{
  "getGridId": {
    "meta": {
      "all": "/** Returns the `gridId` for the current grid as specified via the gridOptions property `gridId` or the auto assigned grid id if none was provided. */",
      "comment": "Returns the `gridId` for the current grid as specified via the gridOptions property `gridId` or the auto assigned grid id if none was provided."
    },
    "type": {
      "arguments": {},
      "returnType": "string"
    }
  },
  "addDetailGridInfo": {
    "meta": {
      "all": "/** Register a detail grid with the master grid when it is created. */",
      "comment": "Register a detail grid with the master grid when it is created."
    },
    "type": {
      "arguments": {
        "id": "string",
        "gridInfo": "DetailGridInfo"
      },
      "returnType": "void"
    }
  },
  "removeDetailGridInfo": {
    "meta": {
      "all": "/** Unregister a detail grid from the master grid when it is destroyed. */",
      "comment": "Unregister a detail grid from the master grid when it is destroyed."
    },
    "type": {
      "arguments": {
        "id": "string"
      },
      "returnType": "void"
    }
  },
  "getDetailGridInfo": {
    "meta": {
      "all": "/** Returns the `DetailGridInfo` corresponding to the supplied `detailGridId`. */",
      "comment": "Returns the `DetailGridInfo` corresponding to the supplied `detailGridId`."
    },
    "type": {
      "arguments": {
        "id": "string"
      },
      "returnType": "DetailGridInfo | undefined"
    }
  },
  "forEachDetailGridInfo": {
    "meta": {
      "all": "/** Iterates through each `DetailGridInfo` in the grid and calls the supplied callback on each. */",
      "comment": "Iterates through each `DetailGridInfo` in the grid and calls the supplied callback on each."
    },
    "type": {
      "arguments": {
        "callback": "(gridInfo: DetailGridInfo, index: number) => void"
      },
      "returnType": "void"
    }
  },
  "getDataAsCsv": {
    "meta": {
      "all": "/** Similar to `exportDataAsCsv`, except returns the result as a string rather than download it. */",
      "comment": "Similar to `exportDataAsCsv`, except returns the result as a string rather than download it."
    },
    "type": {
      "arguments": {
        "params?": "CsvExportParams"
      },
      "returnType": "string | undefined"
    }
  },
  "exportDataAsCsv": {
    "meta": {
      "all": "/** Downloads a CSV export of the grid's data. */",
      "comment": "Downloads a CSV export of the grid's data."
    },
    "type": {
      "arguments": {
        "params?": "CsvExportParams"
      },
      "returnType": "void"
    }
  },
  "getDataAsExcel": {
    "meta": {
      "all": "/** Similar to `exportDataAsExcel`, except instead of downloading a file, it will return a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) to be processed by the user. */",
      "comment": "Similar to `exportDataAsExcel`, except instead of downloading a file, it will return a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) to be processed by the user."
    },
    "type": {
      "arguments": {
        "params?": "ExcelExportParams"
      },
      "returnType": "string | Blob | undefined"
    }
  },
  "exportDataAsExcel": {
    "meta": {
      "all": "/** Downloads an Excel export of the grid's data. */",
      "comment": "Downloads an Excel export of the grid's data."
    },
    "type": {
      "arguments": {
        "params?": "ExcelExportParams"
      },
      "returnType": "void"
    }
  },
  "getSheetDataForExcel": {
    "meta": {
      "all": "/** This is method to be used to get the grid's data as a sheet, that will later be exported either by `getMultipleSheetsAsExcel()` or `exportMultipleSheetsAsExcel()`. */",
      "comment": "This is method to be used to get the grid's data as a sheet, that will later be exported either by `getMultipleSheetsAsExcel()` or `exportMultipleSheetsAsExcel()`."
    },
    "type": {
      "arguments": {
        "params?": "ExcelExportParams"
      },
      "returnType": "string | undefined"
    }
  },
  "getMultipleSheetsAsExcel": {
    "meta": {
      "all": "/** Similar to `exportMultipleSheetsAsExcel`, except instead of downloading a file, it will return a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) to be processed by the user. */",
      "comment": "Similar to `exportMultipleSheetsAsExcel`, except instead of downloading a file, it will return a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) to be processed by the user."
    },
    "type": {
      "arguments": {
        "params": "ExcelExportMultipleSheetParams"
      },
      "returnType": "Blob | undefined"
    }
  },
  "exportMultipleSheetsAsExcel": {
    "meta": {
      "all": "/** Downloads an Excel export of multiple sheets in one file. */",
      "comment": "Downloads an Excel export of multiple sheets in one file."
    },
    "type": {
      "arguments": {
        "params": "ExcelExportMultipleSheetParams"
      },
      "returnType": "void"
    }
  },
  "setGridAriaProperty": {
    "meta": {
      "all": "/** Sets an ARIA property in the grid panel (element with `role=\\\"treegrid\\\"`), and removes an ARIA property when the value is null.\n     *\n     * Example: `api.setGridAriaProperty('label', 'my grid')` will set `aria-label=\\\"my grid\\\"`.\n     *\n     * `api.setGridAriaProperty('label', null)` will remove the `aria-label` attribute from the grid element.\n     */",
      "comment": "Sets an ARIA property in the grid panel (element with `role=\\\"treegrid\\\"`), and removes an ARIA property when the value is null.\n\nExample: `api.setGridAriaProperty('label', 'my grid')` will set `aria-label=\\\"my grid\\\"`.\n\n`api.setGridAriaProperty('label', null)` will remove the `aria-label` attribute from the grid element."
    },
    "type": {
      "arguments": {
        "property": "string",
        "value": "string | null"
      },
      "returnType": "void"
    }
  },
  "getPinnedTopRowCount": {
    "meta": {
      "all": "/** Gets the number of top pinned rows. */",
      "comment": "Gets the number of top pinned rows."
    },
    "type": {
      "arguments": {},
      "returnType": "number"
    }
  },
  "getPinnedBottomRowCount": {
    "meta": {
      "all": "/** Gets the number of bottom pinned rows. */",
      "comment": "Gets the number of bottom pinned rows."
    },
    "type": {
      "arguments": {},
      "returnType": "number"
    }
  },
  "getPinnedTopRow": {
    "meta": {
      "all": "/** Gets the top pinned row with the specified index. */",
      "comment": "Gets the top pinned row with the specified index."
    },
    "type": {
      "arguments": {
        "index": "number"
      },
      "returnType": "IRowNode | undefined"
    }
  },
  "getPinnedBottomRow": {
    "meta": {
      "all": "/** Gets the bottom pinned row with the specified index. */",
      "comment": "Gets the bottom pinned row with the specified index."
    },
    "type": {
      "arguments": {
        "index": "number"
      },
      "returnType": "IRowNode | undefined"
    }
  },
  "expireValueCache": {
    "meta": {
      "all": "/** Expire the value cache. */",
      "comment": "Expire the value cache."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "getVerticalPixelRange": {
    "meta": {
      "all": "/** Returns an object with two properties:\n     *  - `top`: The top pixel position of the current scroll in the grid\n     *  - `bottom`: The bottom pixel position of the current scroll in the grid\n     */",
      "comment": "Returns an object with two properties:\n - `top`: The top pixel position of the current scroll in the grid\n - `bottom`: The bottom pixel position of the current scroll in the grid"
    },
    "type": {
      "arguments": {},
      "returnType": "{ top: number; bottom: number }"
    }
  },
  "getHorizontalPixelRange": {
    "meta": {
      "all": "/** Returns an object with two properties:\n     * - `left`: The left pixel position of the current scroll in the grid\n     * - `right`: The right pixel position of the current scroll in the grid\n     */",
      "comment": "Returns an object with two properties:\n- `left`: The left pixel position of the current scroll in the grid\n- `right`: The right pixel position of the current scroll in the grid"
    },
    "type": {
      "arguments": {},
      "returnType": "{ left: number; right: number }"
    }
  },
  "refreshCells": {
    "meta": {
      "all": "/** Performs change detection on all cells, refreshing cells where required. */",
      "comment": "Performs change detection on all cells, refreshing cells where required."
    },
    "type": {
      "arguments": {
        "params?": "RefreshCellsParams<TData>"
      },
      "returnType": "void"
    }
  },
  "flashCells": {
    "meta": {
      "all": "/** Flash rows, columns or individual cells. */",
      "comment": "Flash rows, columns or individual cells."
    },
    "type": {
      "arguments": {
        "params?": "FlashCellsParams<TData>"
      },
      "returnType": "void"
    }
  },
  "redrawRows": {
    "meta": {
      "all": "/** Remove row(s) from the DOM and recreate them again from scratch. */",
      "comment": "Remove row(s) from the DOM and recreate them again from scratch."
    },
    "type": {
      "arguments": {
        "params?": "RedrawRowsParams<TData>"
      },
      "returnType": "void"
    }
  },
  "refreshHeader": {
    "meta": {
      "all": "/** Redraws the header. Useful if a column name changes, or something else that changes how the column header is displayed. */",
      "comment": "Redraws the header. Useful if a column name changes, or something else that changes how the column header is displayed."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "isAnyFilterPresent": {
    "meta": {
      "all": "/** Returns `true` if any filter is set. This includes quick filter, column filter, external filter or advanced filter. */",
      "comment": "Returns `true` if any filter is set. This includes quick filter, column filter, external filter or advanced filter."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isColumnFilterPresent": {
    "meta": {
      "all": "/** Returns `true` if any column filter is set, otherwise `false`. */",
      "comment": "Returns `true` if any column filter is set, otherwise `false`."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isQuickFilterPresent": {
    "meta": {
      "all": "/** Returns `true` if the Quick Filter is set, otherwise `false`. */",
      "comment": "Returns `true` if the Quick Filter is set, otherwise `false`."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "getModel": {
    "meta": {
      "all": "/** Returns the row model inside the table.\n     * From here you can see the original rows, rows after filter has been applied,\n     * rows after aggregation has been applied, and the final set of 'to be displayed' rows.\n     *\n     * @deprecated As of v31.1, getModel() is deprecated and will not be available in future versions.\n     * Please use the appropriate grid API methods instead\n     */",
      "comment": "Returns the row model inside the table.\nFrom here you can see the original rows, rows after filter has been applied,\nrows after aggregation has been applied, and the final set of 'to be displayed' rows.",
      "tags": [
        {
          "name": "deprecated",
          "comment": "As of v31.1, getModel() is deprecated and will not be available in future versions.\nPlease use the appropriate grid API methods instead"
        }
      ]
    },
    "type": {
      "arguments": {},
      "returnType": "IRowModel"
    }
  },
  "setRowNodeExpanded": {
    "meta": {
      "all": "/** Expand or collapse a specific row node, optionally expanding/collapsing all of its parent nodes.\n     * By default rows are expanded asynchronously for best performance. Set forceSync: `true` if you need to interact with the expanded row immediately after this function.\n     */",
      "comment": "Expand or collapse a specific row node, optionally expanding/collapsing all of its parent nodes.\nBy default rows are expanded asynchronously for best performance. Set forceSync: `true` if you need to interact with the expanded row immediately after this function."
    },
    "type": {
      "arguments": {
        "rowNode": "IRowNode",
        "expanded": "boolean",
        "expandParents?": "boolean",
        "forceSync?": "boolean"
      },
      "returnType": "void"
    }
  },
  "onGroupExpandedOrCollapsed": {
    "meta": {
      "all": "/** Informs the grid that row group expanded state has changed and it needs to rerender the group nodes.\n     * Typically called after updating the row node expanded state explicitly, i.e `rowNode.expanded = false`,\n     * across multiple groups and you want to update the grid view in a single rerender instead of on every group change.\n     */",
      "comment": "Informs the grid that row group expanded state has changed and it needs to rerender the group nodes.\nTypically called after updating the row node expanded state explicitly, i.e `rowNode.expanded = false`,\nacross multiple groups and you want to update the grid view in a single rerender instead of on every group change."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "refreshClientSideRowModel": {
    "meta": {
      "all": "/** Refresh the Client-Side Row Model, executing the grouping, filtering and sorting again.\n     * Optionally provide the step you wish the refresh to apply from. Defaults to `everything`.\n     */",
      "comment": "Refresh the Client-Side Row Model, executing the grouping, filtering and sorting again.\nOptionally provide the step you wish the refresh to apply from. Defaults to `everything`."
    },
    "type": {
      "arguments": {
        "step?": "ClientSideRowModelStep"
      },
      "returnType": "void"
    }
  },
  "isAnimationFrameQueueEmpty": {
    "meta": {
      "all": "/** Returns `true` when there are no more animation frames left to process. */",
      "comment": "Returns `true` when there are no more animation frames left to process."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "flushAllAnimationFrames": {
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "getRowNode": {
    "meta": {
      "all": "/** Returns the row node with the given ID.\n     * The row node ID is the one you provide from the callback `getRowId(params)`,\n     * otherwise the ID is a number (cast as string) auto-generated by the grid when\n     * the row data is set.\n     */",
      "comment": "Returns the row node with the given ID.\nThe row node ID is the one you provide from the callback `getRowId(params)`,\notherwise the ID is a number (cast as string) auto-generated by the grid when\nthe row data is set."
    },
    "type": {
      "arguments": {
        "id": "string"
      },
      "returnType": "IRowNode<TData> | undefined"
    }
  },
  "getSizesForCurrentTheme": {
    "meta": {
      "all": "/** Gets the sizes that various UI elements will be rendered at with the current theme.\n     * If you override the row or header height using `gridOptions`, the override value you provided will be returned.\n     */",
      "comment": "Gets the sizes that various UI elements will be rendered at with the current theme.\nIf you override the row or header height using `gridOptions`, the override value you provided will be returned."
    },
    "type": {
      "arguments": {},
      "returnType": "{ rowHeight: number; headerHeight: number }"
    }
  },
  "expandAll": {
    "meta": {
      "all": "/** Expand all groups. */",
      "comment": "Expand all groups."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "collapseAll": {
    "meta": {
      "all": "/** Collapse all groups. */",
      "comment": "Collapse all groups."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "addRenderedRowListener": {
    "meta": {
      "all": "/** Registers a callback to a virtual row.\n     * A virtual row is a row that is visually rendered on the screen (rows that are not visible because of the scroll position are not rendered).\n     * Unlike normal events, you do not need to unregister rendered row listeners.\n     * When the rendered row is removed from the grid, all associated rendered row listeners will also be removed.\n     * listen for this event if your `cellRenderer` needs to do cleanup when the row no longer exists.\n     */",
      "comment": "Registers a callback to a virtual row.\nA virtual row is a row that is visually rendered on the screen (rows that are not visible because of the scroll position are not rendered).\nUnlike normal events, you do not need to unregister rendered row listeners.\nWhen the rendered row is removed from the grid, all associated rendered row listeners will also be removed.\nlisten for this event if your `cellRenderer` needs to do cleanup when the row no longer exists."
    },
    "type": {
      "arguments": {
        "eventName": "RenderedRowEvent",
        "rowIndex": "number",
        "callback": "(...args: any[]) => any"
      },
      "returnType": "void"
    }
  },
  "getQuickFilter": {
    "meta": {
      "all": "/** Get the current Quick Filter text from the grid, or `undefined` if none is set. */",
      "comment": "Get the current Quick Filter text from the grid, or `undefined` if none is set."
    },
    "type": {
      "arguments": {},
      "returnType": "string | undefined"
    }
  },
  "getAdvancedFilterModel": {
    "meta": {
      "all": "/** Get the state of the Advanced Filter. Used for saving Advanced Filter state */",
      "comment": "Get the state of the Advanced Filter. Used for saving Advanced Filter state"
    },
    "type": {
      "arguments": {},
      "returnType": "AdvancedFilterModel | null"
    }
  },
  "setAdvancedFilterModel": {
    "meta": {
      "all": "/** Set the state of the Advanced Filter. Used for restoring Advanced Filter state */",
      "comment": "Set the state of the Advanced Filter. Used for restoring Advanced Filter state"
    },
    "type": {
      "arguments": {
        "advancedFilterModel": "AdvancedFilterModel | null"
      },
      "returnType": "void"
    }
  },
  "showAdvancedFilterBuilder": {
    "meta": {
      "all": "/** Open the Advanced Filter Builder dialog (if enabled). */",
      "comment": "Open the Advanced Filter Builder dialog (if enabled)."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "hideAdvancedFilterBuilder": {
    "meta": {
      "all": "/** Closes the Advanced Filter Builder dialog (if enabled).\n     * Un-applied changes are discarded.\n     */",
      "comment": "Closes the Advanced Filter Builder dialog (if enabled).\nUn-applied changes are discarded."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "setNodesSelected": {
    "meta": {
      "all": "/** Set all of the provided nodes selection state to the provided value.\n     */",
      "comment": "Set all of the provided nodes selection state to the provided value."
    },
    "type": {
      "arguments": {
        "params": "{ nodes: IRowNode[]; newValue: boolean; source?: SelectionEventSourceType; }"
      },
      "returnType": "void"
    }
  },
  "selectAll": {
    "meta": {
      "all": "/** Select all rows, regardless of filtering and rows that are not visible due to grouping being enabled and their groups not expanded.\n     * @param source Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAll'`\n     */",
      "comment": "Select all rows, regardless of filtering and rows that are not visible due to grouping being enabled and their groups not expanded.",
      "tags": [
        {
          "name": "param",
          "comment": "Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAll'`"
        }
      ]
    },
    "type": {
      "arguments": {
        "source?": "SelectionEventSourceType"
      },
      "returnType": "void"
    }
  },
  "deselectAll": {
    "meta": {
      "all": "/** Clear all row selections, regardless of filtering.\n     * @param source Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAll'`\n     */",
      "comment": "Clear all row selections, regardless of filtering.",
      "tags": [
        {
          "name": "param",
          "comment": "Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAll'`"
        }
      ]
    },
    "type": {
      "arguments": {
        "source?": "SelectionEventSourceType"
      },
      "returnType": "void"
    }
  },
  "selectAllFiltered": {
    "meta": {
      "all": "/** Select all filtered rows.\n     * @param source Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAllFiltered'`\n     */",
      "comment": "Select all filtered rows.",
      "tags": [
        {
          "name": "param",
          "comment": "Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAllFiltered'`"
        }
      ]
    },
    "type": {
      "arguments": {
        "source?": "SelectionEventSourceType"
      },
      "returnType": "void"
    }
  },
  "deselectAllFiltered": {
    "meta": {
      "all": "/** Clear all filtered selections.\n     * @param source Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAllFiltered'`\n     */",
      "comment": "Clear all filtered selections.",
      "tags": [
        {
          "name": "param",
          "comment": "Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAllFiltered'`"
        }
      ]
    },
    "type": {
      "arguments": {
        "source?": "SelectionEventSourceType"
      },
      "returnType": "void"
    }
  },
  "getServerSideSelectionState": {
    "meta": {
      "all": "/** Returns an object containing rules matching the selected rows in the SSRM.\n     *\n     * If `groupSelectsChildren=false` the returned object will be flat, and will conform to IServerSideSelectionState.\n     * If `groupSelectsChildren=true` the returned object will be hierarchical, and will conform to IServerSideGroupSelectionState.\n     */",
      "comment": "Returns an object containing rules matching the selected rows in the SSRM.\n\nIf `groupSelectsChildren=false` the returned object will be flat, and will conform to IServerSideSelectionState.\nIf `groupSelectsChildren=true` the returned object will be hierarchical, and will conform to IServerSideGroupSelectionState."
    },
    "type": {
      "arguments": {},
      "returnType": "IServerSideSelectionState | IServerSideGroupSelectionState | null"
    }
  },
  "setServerSideSelectionState": {
    "meta": {
      "all": "/** Set the rules matching the selected rows in the SSRM.\n     *\n     * If `groupSelectsChildren=false` the param will be flat, and should conform to IServerSideSelectionState.\n     * If `groupSelectsChildren=true` the param will be hierarchical, and should conform to IServerSideGroupSelectionState.\n     */",
      "comment": "Set the rules matching the selected rows in the SSRM.\n\nIf `groupSelectsChildren=false` the param will be flat, and should conform to IServerSideSelectionState.\nIf `groupSelectsChildren=true` the param will be hierarchical, and should conform to IServerSideGroupSelectionState."
    },
    "type": {
      "arguments": {
        "state": "IServerSideSelectionState | IServerSideGroupSelectionState"
      },
      "returnType": "void"
    }
  },
  "selectAllOnCurrentPage": {
    "meta": {
      "all": "/** Select all rows on the current page.\n     * @param source Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAllCurrentPage'`\n     */",
      "comment": "Select all rows on the current page.",
      "tags": [
        {
          "name": "param",
          "comment": "Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAllCurrentPage'`"
        }
      ]
    },
    "type": {
      "arguments": {
        "source?": "SelectionEventSourceType"
      },
      "returnType": "void"
    }
  },
  "deselectAllOnCurrentPage": {
    "meta": {
      "all": "/** Clear all filtered on the current page.\n     * @param source Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAllCurrentPage'`\n     */",
      "comment": "Clear all filtered on the current page.",
      "tags": [
        {
          "name": "param",
          "comment": "Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAllCurrentPage'`"
        }
      ]
    },
    "type": {
      "arguments": {
        "source?": "SelectionEventSourceType"
      },
      "returnType": "void"
    }
  },
  "showLoadingOverlay": {
    "meta": {
      "all": "/** Show the 'loading' overlay.\n     * @deprecated v32 `showLoadingOverlay` is deprecated. Use the grid option \"loading\"=true instead or setGridOption(\"loading\", true).\n     */",
      "comment": "Show the 'loading' overlay.",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v32 `showLoadingOverlay` is deprecated. Use the grid option \"loading\"=true instead or setGridOption(\"loading\", true)."
        }
      ]
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "showNoRowsOverlay": {
    "meta": {
      "all": "/** Show the no-rows overlay. If `suppressNoRowsOverlay` is set, or if `loading` is true, this will not do anything. */",
      "comment": "Show the no-rows overlay. If `suppressNoRowsOverlay` is set, or if `loading` is true, this will not do anything."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "hideOverlay": {
    "meta": {
      "all": "/** Hide the no-rows overlay if it is showing. */",
      "comment": "Hide the no-rows overlay if it is showing."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "getSelectedNodes": {
    "meta": {
      "all": "/** Returns an unsorted list of selected nodes.\n     * Getting the underlying node (rather than the data) is useful when working with tree / aggregated data,\n     * as the node can be traversed.\n     */",
      "comment": "Returns an unsorted list of selected nodes.\nGetting the underlying node (rather than the data) is useful when working with tree / aggregated data,\nas the node can be traversed."
    },
    "type": {
      "arguments": {},
      "returnType": "IRowNode<TData>[]"
    }
  },
  "getSelectedRows": {
    "meta": {
      "all": "/** Returns an unsorted list of selected rows (i.e. row data that you provided). */",
      "comment": "Returns an unsorted list of selected rows (i.e. row data that you provided)."
    },
    "type": {
      "arguments": {},
      "returnType": "TData[]"
    }
  },
  "getBestCostNodeSelection": {
    "meta": {
      "all": "/** Returns a list of all selected nodes at 'best cost', a feature to be used with groups / trees.\n     * If a group has all its children selected, then the group appears in the result, but not the children.\n     * Designed for use with `'children'` as the group selection type, where groups don't actually appear in the selection normally.\n     */",
      "comment": "Returns a list of all selected nodes at 'best cost', a feature to be used with groups / trees.\nIf a group has all its children selected, then the group appears in the result, but not the children.\nDesigned for use with `'children'` as the group selection type, where groups don't actually appear in the selection normally."
    },
    "type": {
      "arguments": {},
      "returnType": "IRowNode<TData>[] | undefined"
    }
  },
  "getRenderedNodes": {
    "meta": {
      "all": "/** Retrieve rendered nodes. Due to virtualisation this will contain only the current visible rows and those in the buffer. */",
      "comment": "Retrieve rendered nodes. Due to virtualisation this will contain only the current visible rows and those in the buffer."
    },
    "type": {
      "arguments": {},
      "returnType": "IRowNode<TData>[]"
    }
  },
  "ensureColumnVisible": {
    "meta": {
      "all": "/**  Ensures the column is visible by scrolling the table if needed.\n     *\n     * This will have no effect before the firstDataRendered event has fired.\n     *\n     * @param key - The column to ensure visible\n     * @param position - Where the column will be positioned. Defaults to `auto`\n     * - `auto` - Scrolls the minimum amount to make sure the column is visible.\n     * - `start` - Scrolls the column to the start of the viewport.\n     * - `middle` - Scrolls the column to the middle of the viewport.\n     * - `end` - Scrolls the column to the end of the viewport.\n     */",
      "comment": "Ensures the column is visible by scrolling the table if needed.\n\nThis will have no effect before the firstDataRendered event has fired.",
      "tags": [
        {
          "name": "param",
          "comment": "- The column to ensure visible"
        },
        {
          "name": "param",
          "comment": "- Where the column will be positioned. Defaults to `auto`\n- `auto` - Scrolls the minimum amount to make sure the column is visible.\n- `start` - Scrolls the column to the start of the viewport.\n- `middle` - Scrolls the column to the middle of the viewport.\n- `end` - Scrolls the column to the end of the viewport."
        }
      ]
    },
    "type": {
      "arguments": {
        "key": "string | Column",
        "position?": "'auto' | 'start' | 'middle' | 'end'"
      },
      "returnType": "void"
    }
  },
  "ensureIndexVisible": {
    "meta": {
      "all": "/** Vertically scrolls the grid until the provided row index is inside the visible viewport.\n     * If a position is provided, the grid will attempt to scroll until the row is at the given position within the viewport.\n     * This will have no effect before the firstDataRendered event has fired.\n     */",
      "comment": "Vertically scrolls the grid until the provided row index is inside the visible viewport.\nIf a position is provided, the grid will attempt to scroll until the row is at the given position within the viewport.\nThis will have no effect before the firstDataRendered event has fired."
    },
    "type": {
      "arguments": {
        "index": "number",
        "position?": "'top' | 'bottom' | 'middle' | null"
      },
      "returnType": "void"
    }
  },
  "ensureNodeVisible": {
    "meta": {
      "all": "/** Vertically scrolls the grid until the provided row (or a row matching the provided comparator) is inside the visible viewport.\n     * If a position is provided, the grid will attempt to scroll until the row is at the given position within the viewport.\n     * This will have no effect before the firstDataRendered event has fired.\n     */",
      "comment": "Vertically scrolls the grid until the provided row (or a row matching the provided comparator) is inside the visible viewport.\nIf a position is provided, the grid will attempt to scroll until the row is at the given position within the viewport.\nThis will have no effect before the firstDataRendered event has fired."
    },
    "type": {
      "arguments": {
        "nodeSelector": "TData | IRowNode<TData> | ((row: IRowNode<TData>) => boolean)",
        "position?": "'top' | 'bottom' | 'middle' | null"
      },
      "returnType": "void"
    }
  },
  "forEachLeafNode": {
    "meta": {
      "all": "/** Similar to `forEachNode`, except lists all the leaf nodes.\n     * This effectively goes through all the data that you provided to the grid before the grid performed any grouping.\n     * If using tree data, goes through all the nodes for the data you provided, including nodes that have children,\n     * but excluding groups the grid created where gaps were missing in the hierarchy.\n     */",
      "comment": "Similar to `forEachNode`, except lists all the leaf nodes.\nThis effectively goes through all the data that you provided to the grid before the grid performed any grouping.\nIf using tree data, goes through all the nodes for the data you provided, including nodes that have children,\nbut excluding groups the grid created where gaps were missing in the hierarchy."
    },
    "type": {
      "arguments": {
        "callback": "(rowNode: IRowNode<TData>) => void"
      },
      "returnType": "void"
    }
  },
  "forEachNode": {
    "meta": {
      "all": "/** Iterates through each node (row) in the grid and calls the callback for each node.\n     * This works similar to the `forEach` method on a JavaScript array.\n     * This is called for every node, ignoring any filtering or sorting applied within the grid.\n     * If using the Infinite Row Model, then this gets called for each page loaded in the page cache.\n     */",
      "comment": "Iterates through each node (row) in the grid and calls the callback for each node.\nThis works similar to the `forEach` method on a JavaScript array.\nThis is called for every node, ignoring any filtering or sorting applied within the grid.\nIf using the Infinite Row Model, then this gets called for each page loaded in the page cache."
    },
    "type": {
      "arguments": {
        "callback": "(rowNode: IRowNode<TData>, index: number) => void",
        "includeFooterNodes?": "boolean"
      },
      "returnType": "void"
    }
  },
  "forEachNodeAfterFilter": {
    "meta": {
      "all": "/** Similar to `forEachNode`, except skips any filtered out data. */",
      "comment": "Similar to `forEachNode`, except skips any filtered out data."
    },
    "type": {
      "arguments": {
        "callback": "(rowNode: IRowNode<TData>, index: number) => void"
      },
      "returnType": "void"
    }
  },
  "forEachNodeAfterFilterAndSort": {
    "meta": {
      "all": "/** Similar to `forEachNodeAfterFilter`, except the callbacks are called in the order the rows are displayed in the grid. */",
      "comment": "Similar to `forEachNodeAfterFilter`, except the callbacks are called in the order the rows are displayed in the grid."
    },
    "type": {
      "arguments": {
        "callback": "(rowNode: IRowNode<TData>, index: number) => void"
      },
      "returnType": "void"
    }
  },
  "getFilterInstance": {
    "meta": {
      "all": "/** @deprecated v31.1 To get/set individual filter models, use `getColumnFilterModel` or `setColumnFilterModel` instead.\n     * To get hold of the filter instance, use `getColumnFilterInstance` which returns the instance asynchronously.\n     * This method now only works asynchronously via the callback. The return value will always be `undefined`.\n     */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v31.1 To get/set individual filter models, use `getColumnFilterModel` or `setColumnFilterModel` instead.\nTo get hold of the filter instance, use `getColumnFilterInstance` which returns the instance asynchronously.\nThis method now only works asynchronously via the callback. The return value will always be `undefined`."
        }
      ]
    },
    "type": {
      "arguments": {
        "key": "string | Column",
        "callback?": "(filter: TFilter | null) => void"
      },
      "returnType": "undefined"
    }
  },
  "getColumnFilterInstance": {
    "meta": {
      "all": "/** Returns the filter component instance for a column.\n     * For getting/setting models for individual column filters, use `getColumnFilterModel` and `setColumnFilterModel` instead of this.\n     * `key` can be a column ID or a `Column` object.\n     */",
      "comment": "Returns the filter component instance for a column.\nFor getting/setting models for individual column filters, use `getColumnFilterModel` and `setColumnFilterModel` instead of this.\n`key` can be a column ID or a `Column` object."
    },
    "type": {
      "arguments": {
        "key": "string | Column"
      },
      "returnType": "Promise<TFilter | null | undefined>"
    }
  },
  "destroyFilter": {
    "meta": {
      "all": "/** Destroys a filter. Useful to force a particular filter to be created from scratch again. */",
      "comment": "Destroys a filter. Useful to force a particular filter to be created from scratch again."
    },
    "type": {
      "arguments": {
        "key": "string | Column"
      },
      "returnType": "void"
    }
  },
  "getStatusPanel": {
    "meta": {
      "all": "/** Gets the status panel instance corresponding to the supplied `id`. */",
      "comment": "Gets the status panel instance corresponding to the supplied `id`."
    },
    "type": {
      "arguments": {
        "key": "string"
      },
      "returnType": "TStatusPanel | undefined"
    }
  },
  "getColumnDef": {
    "type": {
      "arguments": {
        "key": "string | Column<TValue>"
      },
      "returnType": "ColDef<TData, TValue> | null"
    }
  },
  "getColumnDefs": {
    "meta": {
      "all": "/** Returns the current column definitions.\n     */",
      "comment": "Returns the current column definitions."
    },
    "type": {
      "arguments": {},
      "returnType": "(ColDef<TData> | ColGroupDef<TData>)[] | undefined"
    }
  },
  "onFilterChanged": {
    "meta": {
      "all": "/** Informs the grid that a filter has changed. This is typically called after a filter change through one of the filter APIs.\n     * @param source The source of the filter change event. If not specified defaults to `'api'`.\n     */",
      "comment": "Informs the grid that a filter has changed. This is typically called after a filter change through one of the filter APIs.",
      "tags": [
        {
          "name": "param",
          "comment": "The source of the filter change event. If not specified defaults to `'api'`."
        }
      ],
      "isEvent": true,
      "name": "onFilterChanged"
    },
    "type": {
      "arguments": {
        "source?": "FilterChangedEventSourceType"
      },
      "returnType": "void"
    }
  },
  "filterChanged": {
    "meta": {
      "all": "/** Informs the grid that a filter has changed. This is typically called after a filter change through one of the filter APIs.\n     * @param source The source of the filter change event. If not specified defaults to `'api'`.\n     */",
      "comment": "Informs the grid that a filter has changed. This is typically called after a filter change through one of the filter APIs.",
      "tags": [
        {
          "name": "param",
          "comment": "The source of the filter change event. If not specified defaults to `'api'`."
        }
      ],
      "isEvent": true,
      "name": "onFilterChanged"
    },
    "type": {
      "arguments": {
        "source?": "FilterChangedEventSourceType"
      },
      "returnType": "void"
    }
  },
  "onSortChanged": {
    "meta": {
      "all": "/** Gets the grid to act as if the sort was changed.\n     * Useful if you update some values and want to get the grid to reorder them according to the new values.\n     */",
      "comment": "Gets the grid to act as if the sort was changed.\nUseful if you update some values and want to get the grid to reorder them according to the new values.",
      "isEvent": true,
      "name": "onSortChanged"
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "sortChanged": {
    "meta": {
      "all": "/** Gets the grid to act as if the sort was changed.\n     * Useful if you update some values and want to get the grid to reorder them according to the new values.\n     */",
      "comment": "Gets the grid to act as if the sort was changed.\nUseful if you update some values and want to get the grid to reorder them according to the new values.",
      "isEvent": true,
      "name": "onSortChanged"
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "setFilterModel": {
    "meta": {
      "all": "/** Sets the state of all the column filters. Provide it with what you get from `getFilterModel()` to restore filter state.\n     * If inferring cell data types, and row data is provided asynchronously and is yet to be set,\n     * the filter model will be applied asynchronously after row data is added.\n     * To always perform this synchronously, set `cellDataType = false` on the default column definition,\n     * or provide cell data types for every column.\n     */",
      "comment": "Sets the state of all the column filters. Provide it with what you get from `getFilterModel()` to restore filter state.\nIf inferring cell data types, and row data is provided asynchronously and is yet to be set,\nthe filter model will be applied asynchronously after row data is added.\nTo always perform this synchronously, set `cellDataType = false` on the default column definition,\nor provide cell data types for every column."
    },
    "type": {
      "arguments": {
        "model": "FilterModel | null"
      },
      "returnType": "void"
    }
  },
  "getFilterModel": {
    "meta": {
      "all": "/** Gets the current state of all the column filters. Used for saving filter state. */",
      "comment": "Gets the current state of all the column filters. Used for saving filter state."
    },
    "type": {
      "arguments": {},
      "returnType": "FilterModel"
    }
  },
  "getColumnFilterModel": {
    "meta": {
      "all": "/** Gets the current filter model for the specified column.\n     * Will return `null` if no active filter.\n     */",
      "comment": "Gets the current filter model for the specified column.\nWill return `null` if no active filter."
    },
    "type": {
      "arguments": {
        "column": "string | Column"
      },
      "returnType": "TModel | null"
    }
  },
  "setColumnFilterModel": {
    "meta": {
      "all": "/** Sets the filter model for the specified column.\n     * Setting a `model` of `null` will reset the filter (make inactive).\n     * Must wait on the response before calling `api.onFilterChanged()`.\n     */",
      "comment": "Sets the filter model for the specified column.\nSetting a `model` of `null` will reset the filter (make inactive).\nMust wait on the response before calling `api.onFilterChanged()`."
    },
    "type": {
      "arguments": {
        "column": "string | Column",
        "model": "TModel | null"
      },
      "returnType": "Promise<void>"
    }
  },
  "getFocusedCell": {
    "meta": {
      "all": "/** Returns the focused cell (or the last focused cell if the grid lost focus). */",
      "comment": "Returns the focused cell (or the last focused cell if the grid lost focus)."
    },
    "type": {
      "arguments": {},
      "returnType": "CellPosition | null"
    }
  },
  "clearFocusedCell": {
    "meta": {
      "all": "/** Clears the focused cell. */",
      "comment": "Clears the focused cell."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "setFocusedCell": {
    "meta": {
      "all": "/** Sets the focus to the specified cell. `rowPinned` can be either 'top', 'bottom' or null (for not pinned). */",
      "comment": "Sets the focus to the specified cell. `rowPinned` can be either 'top', 'bottom' or null (for not pinned)."
    },
    "type": {
      "arguments": {
        "rowIndex": "number",
        "colKey": "string | Column",
        "rowPinned?": "RowPinnedType"
      },
      "returnType": "void"
    }
  },
  "setFocusedHeader": {
    "meta": {
      "all": "/** Sets the focus to the specified header. If `floatingFilter` is true, the Column's floatingFilter element will be focused. */",
      "comment": "Sets the focus to the specified header. If `floatingFilter` is true, the Column's floatingFilter element will be focused."
    },
    "type": {
      "arguments": {
        "colKey": "string | Column | ColumnGroup",
        "floatingFilter?": "boolean"
      },
      "returnType": "void"
    }
  },
  "addRowDropZone": {
    "meta": {
      "all": "/** Adds a drop zone outside of the grid where rows can be dropped. */",
      "comment": "Adds a drop zone outside of the grid where rows can be dropped."
    },
    "type": {
      "arguments": {
        "params": "RowDropZoneParams"
      },
      "returnType": "void"
    }
  },
  "removeRowDropZone": {
    "meta": {
      "all": "/** Removes an external drop zone added by `addRowDropZone`. */",
      "comment": "Removes an external drop zone added by `addRowDropZone`."
    },
    "type": {
      "arguments": {
        "params": "RowDropZoneParams"
      },
      "returnType": "void"
    }
  },
  "getRowDropZoneParams": {
    "meta": {
      "all": "/** Returns the `RowDropZoneParams` to be used by another grid's `addRowDropZone` method. */",
      "comment": "Returns the `RowDropZoneParams` to be used by another grid's `addRowDropZone` method."
    },
    "type": {
      "arguments": {
        "events?": "RowDropZoneEvents"
      },
      "returnType": "RowDropZoneParams"
    }
  },
  "isSideBarVisible": {
    "meta": {
      "all": "/** Returns `true` if the side bar is visible. */",
      "comment": "Returns `true` if the side bar is visible."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "setSideBarVisible": {
    "meta": {
      "all": "/** Show/hide the entire side bar, including any visible panel and the tab buttons. */",
      "comment": "Show/hide the entire side bar, including any visible panel and the tab buttons."
    },
    "type": {
      "arguments": {
        "show": "boolean"
      },
      "returnType": "void"
    }
  },
  "setSideBarPosition": {
    "meta": {
      "all": "/** Sets the side bar position relative to the grid. Possible values are `'left'` or `'right'`. */",
      "comment": "Sets the side bar position relative to the grid. Possible values are `'left'` or `'right'`."
    },
    "type": {
      "arguments": {
        "position": "'left' | 'right'"
      },
      "returnType": "void"
    }
  },
  "openToolPanel": {
    "meta": {
      "all": "/** Opens a particular tool panel. Provide the ID of the tool panel to open. */",
      "comment": "Opens a particular tool panel. Provide the ID of the tool panel to open."
    },
    "type": {
      "arguments": {
        "key": "string"
      },
      "returnType": "void"
    }
  },
  "closeToolPanel": {
    "meta": {
      "all": "/** Closes the currently open tool panel (if any). */",
      "comment": "Closes the currently open tool panel (if any)."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "getOpenedToolPanel": {
    "meta": {
      "all": "/** Returns the ID of the currently shown tool panel if any, otherwise `null`. */",
      "comment": "Returns the ID of the currently shown tool panel if any, otherwise `null`."
    },
    "type": {
      "arguments": {},
      "returnType": "string | null"
    }
  },
  "refreshToolPanel": {
    "meta": {
      "all": "/** Force refresh all tool panels by calling their `refresh` method. */",
      "comment": "Force refresh all tool panels by calling their `refresh` method."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "isToolPanelShowing": {
    "meta": {
      "all": "/** Returns `true` if the tool panel is showing, otherwise `false`. */",
      "comment": "Returns `true` if the tool panel is showing, otherwise `false`."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "getToolPanelInstance": {
    "meta": {
      "all": "/** Gets the tool panel instance corresponding to the supplied `id`. */",
      "comment": "Gets the tool panel instance corresponding to the supplied `id`."
    },
    "type": {
      "arguments": {
        "id": "string"
      },
      "returnType": "TToolPanel | undefined"
    }
  },
  "getSideBar": {
    "meta": {
      "all": "/** Returns the current side bar configuration. If a shortcut was used, returns the detailed long form. */",
      "comment": "Returns the current side bar configuration. If a shortcut was used, returns the detailed long form."
    },
    "type": {
      "arguments": {},
      "returnType": "SideBarDef | undefined"
    }
  },
  "resetRowHeights": {
    "meta": {
      "all": "/** Tells the grid to recalculate the row heights. */",
      "comment": "Tells the grid to recalculate the row heights."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "setRowCount": {
    "meta": {
      "all": "/** Sets the `rowCount` and `maxRowFound` properties.\n     * The second parameter, `maxRowFound`, is optional and if left out, only `rowCount` is set.\n     * Set `rowCount` to adjust the height of the vertical scroll.\n     * Set `maxRowFound` to enable / disable searching for more rows.\n     * Use this method if you add or remove rows into the dataset and need to reset the number of rows or instruct the grid that the entire row count is no longer known.\n     */",
      "comment": "Sets the `rowCount` and `maxRowFound` properties.\nThe second parameter, `maxRowFound`, is optional and if left out, only `rowCount` is set.\nSet `rowCount` to adjust the height of the vertical scroll.\nSet `maxRowFound` to enable / disable searching for more rows.\nUse this method if you add or remove rows into the dataset and need to reset the number of rows or instruct the grid that the entire row count is no longer known."
    },
    "type": {
      "arguments": {
        "rowCount": "number",
        "maxRowFound?": "boolean"
      },
      "returnType": "void"
    }
  },
  "onRowHeightChanged": {
    "meta": {
      "all": "/** Tells the grid a row height has changed. To be used after calling `rowNode.setRowHeight(newHeight)`. */",
      "comment": "Tells the grid a row height has changed. To be used after calling `rowNode.setRowHeight(newHeight)`."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "getValue": {
    "meta": {
      "all": "/** @deprecated v31.3 Use `getCellValue` instead.\n     */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v31.3 Use `getCellValue` instead."
        }
      ]
    },
    "type": {
      "arguments": {
        "colKey": "string | Column<TValue>",
        "rowNode": "IRowNode"
      },
      "returnType": "TValue | null | undefined"
    }
  },
  "getCellValue": {
    "type": {
      "arguments": {
        "params": "GetCellValueParams<TValue>"
      },
      "returnType": "string | TValue | null | undefined"
    }
  },
  "addEventListener": {
    "meta": {
      "all": "/** Add an event listener for the specified `eventType`.\n     * Listener will receive the `event` as a single parameter.\n     * Listeners will be automatically removed when the grid is destroyed.\n     * @example api.addEventListener('rowClicked', (event) => { console.log('Row clicked', event);});\n     */",
      "comment": "Add an event listener for the specified `eventType`.\nListener will receive the `event` as a single parameter.\nListeners will be automatically removed when the grid is destroyed.",
      "tags": [
        {
          "name": "example",
          "comment": "api.addEventListener('rowClicked', (event) => { console.log('Row clicked', event);});"
        }
      ]
    },
    "type": {
      "arguments": {
        "eventType": "TEventType",
        "listener": "AgEventListener<TData, any, TEventType>"
      },
      "returnType": "void"
    }
  },
  "removeEventListener": {
    "meta": {
      "all": "/** Remove an event listener. */",
      "comment": "Remove an event listener."
    },
    "type": {
      "arguments": {
        "eventType": "TEventType",
        "listener": "AgEventListener<TData, any, TEventType>"
      },
      "returnType": "void"
    }
  },
  "addGlobalListener": {
    "meta": {
      "all": "/** Add an event listener for all event types coming from the grid.\n     * Listener will receive `eventType` and `event` as parameters.\n     * Listeners will be automatically removed when the grid is destroyed.\n     * If handling multiple event types it is recommended to use `event.type` to enable TypeScript to infer the event parameters.\n     * @example api.addGlobalListener((eventType, event) => { });\n     */",
      "comment": "Add an event listener for all event types coming from the grid.\nListener will receive `eventType` and `event` as parameters.\nListeners will be automatically removed when the grid is destroyed.\nIf handling multiple event types it is recommended to use `event.type` to enable TypeScript to infer the event parameters.",
      "tags": [
        {
          "name": "example",
          "comment": "api.addGlobalListener((eventType, event) => { });"
        }
      ]
    },
    "type": {
      "arguments": {
        "listener": "AgGlobalEventListener<TData, any, TEventType>"
      },
      "returnType": "void"
    }
  },
  "removeGlobalListener": {
    "meta": {
      "all": "/** Remove a global event listener. */",
      "comment": "Remove a global event listener."
    },
    "type": {
      "arguments": {
        "listener": "AgGlobalEventListener<TData, any, TEventType>"
      },
      "returnType": "void"
    }
  },
  "dispatchEvent": {
    "type": {
      "arguments": {
        "event": "AgEvent"
      },
      "returnType": "void"
    }
  },
  "destroy": {
    "meta": {
      "all": "/** Will destroy the grid and release resources. If you are using a framework you do not need to call this, as the grid links in with the framework lifecycle. However if you are using Web Components or native JavaScript, you do need to call this, to avoid a memory leak in your application. */",
      "comment": "Will destroy the grid and release resources. If you are using a framework you do not need to call this, as the grid links in with the framework lifecycle. However if you are using Web Components or native JavaScript, you do need to call this, to avoid a memory leak in your application."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "isDestroyed": {
    "meta": {
      "all": "/** Returns `true` if the grid has been destroyed. */",
      "comment": "Returns `true` if the grid has been destroyed."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "resetQuickFilter": {
    "meta": {
      "all": "/** Reset the Quick Filter cache text on every rowNode. */",
      "comment": "Reset the Quick Filter cache text on every rowNode."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "getCellRanges": {
    "meta": {
      "all": "/** Returns the list of selected cell ranges. */",
      "comment": "Returns the list of selected cell ranges."
    },
    "type": {
      "arguments": {},
      "returnType": "CellRange[] | null"
    }
  },
  "addCellRange": {
    "meta": {
      "all": "/** Adds the provided cell range to the selected ranges. */",
      "comment": "Adds the provided cell range to the selected ranges."
    },
    "type": {
      "arguments": {
        "params": "CellRangeParams"
      },
      "returnType": "void"
    }
  },
  "clearRangeSelection": {
    "meta": {
      "all": "/** Clears the selected ranges. */",
      "comment": "Clears the selected ranges."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "undoCellEditing": {
    "meta": {
      "all": "/** Reverts the last cell edit. */",
      "comment": "Reverts the last cell edit."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "redoCellEditing": {
    "meta": {
      "all": "/** Re-applies the most recently undone cell edit. */",
      "comment": "Re-applies the most recently undone cell edit."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "getCurrentUndoSize": {
    "meta": {
      "all": "/** Returns current number of available cell edit undo operations. */",
      "comment": "Returns current number of available cell edit undo operations."
    },
    "type": {
      "arguments": {},
      "returnType": "number"
    }
  },
  "getCurrentRedoSize": {
    "meta": {
      "all": "/** Returns current number of available cell edit redo operations. */",
      "comment": "Returns current number of available cell edit redo operations."
    },
    "type": {
      "arguments": {},
      "returnType": "number"
    }
  },
  "getChartModels": {
    "meta": {
      "all": "/** Returns a list of models with information about the charts that are currently rendered from the grid. */",
      "comment": "Returns a list of models with information about the charts that are currently rendered from the grid."
    },
    "type": {
      "arguments": {},
      "returnType": "ChartModel[] | undefined"
    }
  },
  "getChartRef": {
    "meta": {
      "all": "/** Returns the `ChartRef` using the supplied `chartId`. */",
      "comment": "Returns the `ChartRef` using the supplied `chartId`."
    },
    "type": {
      "arguments": {
        "chartId": "string"
      },
      "returnType": "ChartRef | undefined"
    }
  },
  "getChartImageDataURL": {
    "meta": {
      "all": "/** Returns a base64-encoded image data URL for the referenced chartId. */",
      "comment": "Returns a base64-encoded image data URL for the referenced chartId."
    },
    "type": {
      "arguments": {
        "params": "GetChartImageDataUrlParams"
      },
      "returnType": "string | undefined"
    }
  },
  "downloadChart": {
    "meta": {
      "all": "/** Starts a browser-based image download for the referenced chartId. */",
      "comment": "Starts a browser-based image download for the referenced chartId."
    },
    "type": {
      "arguments": {
        "params": "ChartDownloadParams"
      },
      "returnType": "void"
    }
  },
  "openChartToolPanel": {
    "meta": {
      "all": "/** Open the Chart Tool Panel. */",
      "comment": "Open the Chart Tool Panel."
    },
    "type": {
      "arguments": {
        "params": "OpenChartToolPanelParams"
      },
      "returnType": "void"
    }
  },
  "closeChartToolPanel": {
    "meta": {
      "all": "/** Close the Chart Tool Panel. */",
      "comment": "Close the Chart Tool Panel."
    },
    "type": {
      "arguments": {
        "params": "CloseChartToolPanelParams"
      },
      "returnType": "void"
    }
  },
  "createRangeChart": {
    "meta": {
      "all": "/** Used to programmatically create charts from a range. */",
      "comment": "Used to programmatically create charts from a range."
    },
    "type": {
      "arguments": {
        "params": "CreateRangeChartParams"
      },
      "returnType": "ChartRef | undefined"
    }
  },
  "createPivotChart": {
    "meta": {
      "all": "/** Used to programmatically create pivot charts from a grid. */",
      "comment": "Used to programmatically create pivot charts from a grid."
    },
    "type": {
      "arguments": {
        "params": "CreatePivotChartParams"
      },
      "returnType": "ChartRef | undefined"
    }
  },
  "createCrossFilterChart": {
    "meta": {
      "all": "/** Used to programmatically create cross filter charts from a range. */",
      "comment": "Used to programmatically create cross filter charts from a range."
    },
    "type": {
      "arguments": {
        "params": "CreateCrossFilterChartParams"
      },
      "returnType": "ChartRef | undefined"
    }
  },
  "updateChart": {
    "meta": {
      "all": "/** Used to programmatically update a chart. */",
      "comment": "Used to programmatically update a chart."
    },
    "type": {
      "arguments": {
        "params": "UpdateChartParams"
      },
      "returnType": "void"
    }
  },
  "restoreChart": {
    "meta": {
      "all": "/** Restores a chart using the `ChartModel` that was previously obtained from `getChartModels()`. */",
      "comment": "Restores a chart using the `ChartModel` that was previously obtained from `getChartModels()`."
    },
    "type": {
      "arguments": {
        "chartModel": "ChartModel",
        "chartContainer?": "HTMLElement"
      },
      "returnType": "ChartRef | undefined"
    }
  },
  "copyToClipboard": {
    "meta": {
      "all": "/** Copies data to clipboard by following the same rules as pressing Ctrl+C. */",
      "comment": "Copies data to clipboard by following the same rules as pressing Ctrl+C."
    },
    "type": {
      "arguments": {
        "params?": "IClipboardCopyParams"
      },
      "returnType": "void"
    }
  },
  "cutToClipboard": {
    "meta": {
      "all": "/** Cuts data to clipboard by following the same rules as pressing Ctrl+X. */",
      "comment": "Cuts data to clipboard by following the same rules as pressing Ctrl+X."
    },
    "type": {
      "arguments": {
        "params?": "IClipboardCopyParams"
      },
      "returnType": "void"
    }
  },
  "copySelectedRowsToClipboard": {
    "meta": {
      "all": "/** Copies the selected rows to the clipboard. */",
      "comment": "Copies the selected rows to the clipboard."
    },
    "type": {
      "arguments": {
        "params?": "IClipboardCopyRowsParams"
      },
      "returnType": "void"
    }
  },
  "copySelectedRangeToClipboard": {
    "meta": {
      "all": "/** Copies the selected ranges to the clipboard. */",
      "comment": "Copies the selected ranges to the clipboard."
    },
    "type": {
      "arguments": {
        "params?": "IClipboardCopyParams"
      },
      "returnType": "void"
    }
  },
  "copySelectedRangeDown": {
    "meta": {
      "all": "/** Copies the selected range down, similar to `Ctrl + D` in Excel. */",
      "comment": "Copies the selected range down, similar to `Ctrl + D` in Excel."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "pasteFromClipboard": {
    "meta": {
      "all": "/** Pastes the data from the Clipboard into the focused cell of the grid. If no grid cell is focused, calling this method has no effect. */",
      "comment": "Pastes the data from the Clipboard into the focused cell of the grid. If no grid cell is focused, calling this method has no effect."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "showColumnMenuAfterButtonClick": {
    "meta": {
      "all": "/** @deprecated v31.1 Use `IHeaderParams.showColumnMenu` within a header component, or `api.showColumnMenu` elsewhere. */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v31.1 Use `IHeaderParams.showColumnMenu` within a header component, or `api.showColumnMenu` elsewhere."
        }
      ]
    },
    "type": {
      "arguments": {
        "colKey": "string | Column",
        "buttonElement": "HTMLElement"
      },
      "returnType": "void"
    }
  },
  "showColumnMenuAfterMouseClick": {
    "meta": {
      "all": "/** @deprecated v31.1 Use `IHeaderParams.showColumnMenuAfterMouseClick` within a header component, or `api.showColumnMenu` elsewhere. */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v31.1 Use `IHeaderParams.showColumnMenuAfterMouseClick` within a header component, or `api.showColumnMenu` elsewhere."
        }
      ]
    },
    "type": {
      "arguments": {
        "colKey": "string | Column",
        "mouseEvent": "MouseEvent | Touch"
      },
      "returnType": "void"
    }
  },
  "showContextMenu": {
    "meta": {
      "all": "/** Displays the AG Grid context menu\n     */",
      "comment": "Displays the AG Grid context menu"
    },
    "type": {
      "arguments": {
        "params?": "IContextMenuParams"
      },
      "returnType": "void"
    }
  },
  "showColumnChooser": {
    "meta": {
      "all": "/** Show the column chooser. */",
      "comment": "Show the column chooser."
    },
    "type": {
      "arguments": {
        "params?": "ColumnChooserParams"
      },
      "returnType": "void"
    }
  },
  "showColumnFilter": {
    "meta": {
      "all": "/** Show the filter for the provided column. */",
      "comment": "Show the filter for the provided column."
    },
    "type": {
      "arguments": {
        "colKey": "string | Column"
      },
      "returnType": "void"
    }
  },
  "showColumnMenu": {
    "meta": {
      "all": "/** Show the column menu for the provided column. */",
      "comment": "Show the column menu for the provided column."
    },
    "type": {
      "arguments": {
        "colKey": "string | Column"
      },
      "returnType": "void"
    }
  },
  "hidePopupMenu": {
    "meta": {
      "all": "/** Hides any visible context menu or column menu. */",
      "comment": "Hides any visible context menu or column menu."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "hideColumnChooser": {
    "meta": {
      "all": "/** Hide the column chooser if visible. */",
      "comment": "Hide the column chooser if visible."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "tabToNextCell": {
    "meta": {
      "all": "/** Navigates the grid focus to the next cell, as if tabbing. */",
      "comment": "Navigates the grid focus to the next cell, as if tabbing."
    },
    "type": {
      "arguments": {
        "event?": "KeyboardEvent"
      },
      "returnType": "boolean"
    }
  },
  "tabToPreviousCell": {
    "meta": {
      "all": "/** Navigates the grid focus to the previous cell, as if shift-tabbing. */",
      "comment": "Navigates the grid focus to the previous cell, as if shift-tabbing."
    },
    "type": {
      "arguments": {
        "event?": "KeyboardEvent"
      },
      "returnType": "boolean"
    }
  },
  "getCellRendererInstances": {
    "meta": {
      "all": "/** Returns the list of active cell renderer instances. */",
      "comment": "Returns the list of active cell renderer instances."
    },
    "type": {
      "arguments": {
        "params?": "GetCellRendererInstancesParams<TData>"
      },
      "returnType": "ICellRenderer[]"
    }
  },
  "getCellEditorInstances": {
    "meta": {
      "all": "/** Returns the list of active cell editor instances. Optionally provide parameters to restrict to certain columns / row nodes. */",
      "comment": "Returns the list of active cell editor instances. Optionally provide parameters to restrict to certain columns / row nodes."
    },
    "type": {
      "arguments": {
        "params?": "GetCellEditorInstancesParams<TData>"
      },
      "returnType": "ICellEditor[]"
    }
  },
  "getEditingCells": {
    "meta": {
      "all": "/** If the grid is editing, returns back details of the editing cell(s). */",
      "comment": "If the grid is editing, returns back details of the editing cell(s)."
    },
    "type": {
      "arguments": {},
      "returnType": "CellPosition[]"
    }
  },
  "stopEditing": {
    "meta": {
      "all": "/** If a cell is editing, it stops the editing. Pass `true` if you want to cancel the editing (i.e. don't accept changes). */",
      "comment": "If a cell is editing, it stops the editing. Pass `true` if you want to cancel the editing (i.e. don't accept changes)."
    },
    "type": {
      "arguments": {
        "cancel?": "boolean"
      },
      "returnType": "void"
    }
  },
  "startEditingCell": {
    "meta": {
      "all": "/** Start editing the provided cell. If another cell is editing, the editing will be stopped in that other cell. */",
      "comment": "Start editing the provided cell. If another cell is editing, the editing will be stopped in that other cell."
    },
    "type": {
      "arguments": {
        "params": "StartEditingCellParams"
      },
      "returnType": "void"
    }
  },
  "addAggFunc": {
    "meta": {
      "all": "/** @deprecated v31.1 addAggFunc(key, func) is  deprecated, please use addAggFuncs({ key: func }) instead. */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v31.1 addAggFunc(key, func) is  deprecated, please use addAggFuncs({ key: func }) instead."
        }
      ]
    },
    "type": {
      "arguments": {
        "key": "string",
        "aggFunc": "IAggFunc"
      },
      "returnType": "void"
    }
  },
  "addAggFuncs": {
    "meta": {
      "all": "/** Add aggregations function with the specified keys. */",
      "comment": "Add aggregations function with the specified keys."
    },
    "type": {
      "arguments": {
        "aggFuncs": "{ [key: string]: IAggFunc; }"
      },
      "returnType": "void"
    }
  },
  "clearAggFuncs": {
    "meta": {
      "all": "/** Clears all aggregation functions (including those provided by the grid). */",
      "comment": "Clears all aggregation functions (including those provided by the grid)."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "applyServerSideTransaction": {
    "meta": {
      "all": "/** Apply transactions to the server side row model. */",
      "comment": "Apply transactions to the server side row model."
    },
    "type": {
      "arguments": {
        "transaction": "ServerSideTransaction"
      },
      "returnType": "ServerSideTransactionResult | undefined"
    }
  },
  "applyServerSideTransactionAsync": {
    "meta": {
      "all": "/** Batch apply transactions to the server side row model. */",
      "comment": "Batch apply transactions to the server side row model."
    },
    "type": {
      "arguments": {
        "transaction": "ServerSideTransaction",
        "callback?": "(res: ServerSideTransactionResult) => void"
      },
      "returnType": "void"
    }
  },
  "applyServerSideRowData": {
    "meta": {
      "all": "/** Applies row data to a server side store.\n     * New rows will overwrite rows at the same index in the same way as if provided by a datasource success callback.\n     */",
      "comment": "Applies row data to a server side store.\nNew rows will overwrite rows at the same index in the same way as if provided by a datasource success callback."
    },
    "type": {
      "arguments": {
        "params": "{ successParams: LoadSuccessParams; route?: string[]; startRow?: number; }"
      },
      "returnType": "void"
    }
  },
  "retryServerSideLoads": {
    "meta": {
      "all": "/** Gets all failed server side loads to retry. */",
      "comment": "Gets all failed server side loads to retry."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "flushServerSideAsyncTransactions": {
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "applyTransaction": {
    "meta": {
      "all": "/** Update row data. Pass a transaction object with lists for `add`, `remove` and `update`. */",
      "comment": "Update row data. Pass a transaction object with lists for `add`, `remove` and `update`."
    },
    "type": {
      "arguments": {
        "rowDataTransaction": "RowDataTransaction<TData>"
      },
      "returnType": "RowNodeTransaction<TData> | null | undefined"
    }
  },
  "applyTransactionAsync": {
    "meta": {
      "all": "/** Same as `applyTransaction` except executes asynchronously for efficiency. */",
      "comment": "Same as `applyTransaction` except executes asynchronously for efficiency."
    },
    "type": {
      "arguments": {
        "rowDataTransaction": "RowDataTransaction<TData>",
        "callback?": "(res: RowNodeTransaction<TData>) => void"
      },
      "returnType": "void"
    }
  },
  "flushAsyncTransactions": {
    "meta": {
      "all": "/** Executes any remaining asynchronous grid transactions, if any are waiting to be executed. */",
      "comment": "Executes any remaining asynchronous grid transactions, if any are waiting to be executed."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "refreshInfiniteCache": {
    "meta": {
      "all": "/** Marks all the currently loaded blocks in the cache for reload.\n     * If you have 10 blocks in the cache, all 10 will be marked for reload.\n     * The old data will continue to be displayed until the new data is loaded.\n     */",
      "comment": "Marks all the currently loaded blocks in the cache for reload.\nIf you have 10 blocks in the cache, all 10 will be marked for reload.\nThe old data will continue to be displayed until the new data is loaded."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "purgeInfiniteCache": {
    "meta": {
      "all": "/** Purges the cache.\n     * The grid is then told to refresh. Only the blocks required to display the current data on screen are fetched (typically no more than 2).\n     * The grid will display nothing while the new blocks are loaded.\n     * Use this to immediately remove the old data from the user.\n     */",
      "comment": "Purges the cache.\nThe grid is then told to refresh. Only the blocks required to display the current data on screen are fetched (typically no more than 2).\nThe grid will display nothing while the new blocks are loaded.\nUse this to immediately remove the old data from the user."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "refreshServerSide": {
    "meta": {
      "all": "/** Refresh a server-side store level.\n     * If you pass no parameters, then the top level store is refreshed.\n     * To refresh a child level, pass in the string of keys to get to the desired level.\n     * Once the store refresh is complete, the storeRefreshed event is fired.\n     */",
      "comment": "Refresh a server-side store level.\nIf you pass no parameters, then the top level store is refreshed.\nTo refresh a child level, pass in the string of keys to get to the desired level.\nOnce the store refresh is complete, the storeRefreshed event is fired."
    },
    "type": {
      "arguments": {
        "params?": "RefreshServerSideParams"
      },
      "returnType": "void"
    }
  },
  "getServerSideGroupLevelState": {
    "meta": {
      "all": "/** Returns info on all server side group levels. */",
      "comment": "Returns info on all server side group levels."
    },
    "type": {
      "arguments": {},
      "returnType": "ServerSideGroupLevelState[]"
    }
  },
  "getInfiniteRowCount": {
    "meta": {
      "all": "/** The row count defines how many rows the grid allows scrolling to. */",
      "comment": "The row count defines how many rows the grid allows scrolling to."
    },
    "type": {
      "arguments": {},
      "returnType": "number | undefined"
    }
  },
  "isLastRowIndexKnown": {
    "meta": {
      "all": "/** Returns `true` if grid allows for scrolling past the last row to load more rows, thus providing infinite scroll. */",
      "comment": "Returns `true` if grid allows for scrolling past the last row to load more rows, thus providing infinite scroll."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean | undefined"
    }
  },
  "getCacheBlockState": {
    "meta": {
      "all": "/** Returns an object representing the state of the cache. This is useful for debugging and understanding how the cache is working.\n     */",
      "comment": "Returns an object representing the state of the cache. This is useful for debugging and understanding how the cache is working."
    },
    "type": {
      "arguments": {},
      "returnType": "any"
    }
  },
  "getFirstDisplayedRow": {
    "meta": {
      "all": "/** @deprecated v31.1 `getFirstDisplayedRow` is deprecated. Please use `getFirstDisplayedRowIndex` instead. */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v31.1 `getFirstDisplayedRow` is deprecated. Please use `getFirstDisplayedRowIndex` instead."
        }
      ]
    },
    "type": {
      "arguments": {},
      "returnType": "number"
    }
  },
  "getFirstDisplayedRowIndex": {
    "meta": {
      "all": "/** Get the index of the first displayed row due to scrolling (includes invisible rendered rows in the buffer). */",
      "comment": "Get the index of the first displayed row due to scrolling (includes invisible rendered rows in the buffer)."
    },
    "type": {
      "arguments": {},
      "returnType": "number"
    }
  },
  "getLastDisplayedRow": {
    "meta": {
      "all": "/** @deprecated v31.1 `getLastDisplayedRow` is deprecated. Please use `getLastDisplayedRowIndex` instead. */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v31.1 `getLastDisplayedRow` is deprecated. Please use `getLastDisplayedRowIndex` instead."
        }
      ]
    },
    "type": {
      "arguments": {},
      "returnType": "number"
    }
  },
  "getLastDisplayedRowIndex": {
    "meta": {
      "all": "/** Get the index of the last displayed row due to scrolling (includes invisible rendered rows in the buffer). */",
      "comment": "Get the index of the last displayed row due to scrolling (includes invisible rendered rows in the buffer)."
    },
    "type": {
      "arguments": {},
      "returnType": "number"
    }
  },
  "getDisplayedRowAtIndex": {
    "meta": {
      "all": "/** Returns the displayed `RowNode` at the given `index`. */",
      "comment": "Returns the displayed `RowNode` at the given `index`."
    },
    "type": {
      "arguments": {
        "index": "number"
      },
      "returnType": "IRowNode<TData> | undefined"
    }
  },
  "getDisplayedRowCount": {
    "meta": {
      "all": "/** Returns the total number of displayed rows. */",
      "comment": "Returns the total number of displayed rows."
    },
    "type": {
      "arguments": {},
      "returnType": "number"
    }
  },
  "paginationIsLastPageFound": {
    "meta": {
      "all": "/** Returns `true` when the last page is known.\n     * This will always be `true` if you are using the Client-Side Row Model for pagination.\n     * Returns `false` when the last page is not known; this only happens when using Infinite Row Model.\n     */",
      "comment": "Returns `true` when the last page is known.\nThis will always be `true` if you are using the Client-Side Row Model for pagination.\nReturns `false` when the last page is not known; this only happens when using Infinite Row Model."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "paginationGetPageSize": {
    "meta": {
      "all": "/** Returns how many rows are being shown per page. */",
      "comment": "Returns how many rows are being shown per page."
    },
    "type": {
      "arguments": {},
      "returnType": "number"
    }
  },
  "paginationGetCurrentPage": {
    "meta": {
      "all": "/** Returns the 0-based index of the page which is showing. */",
      "comment": "Returns the 0-based index of the page which is showing."
    },
    "type": {
      "arguments": {},
      "returnType": "number"
    }
  },
  "paginationGetTotalPages": {
    "meta": {
      "all": "/** Returns the total number of pages. Returns `null` if `paginationIsLastPageFound() === false`. */",
      "comment": "Returns the total number of pages. Returns `null` if `paginationIsLastPageFound() === false`."
    },
    "type": {
      "arguments": {},
      "returnType": "number"
    }
  },
  "paginationGetRowCount": {
    "meta": {
      "all": "/** The total number of rows. Returns `null` if `paginationIsLastPageFound() === false`. */",
      "comment": "The total number of rows. Returns `null` if `paginationIsLastPageFound() === false`."
    },
    "type": {
      "arguments": {},
      "returnType": "number"
    }
  },
  "paginationGoToNextPage": {
    "meta": {
      "all": "/** Navigates to the next page. */",
      "comment": "Navigates to the next page."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "paginationGoToPreviousPage": {
    "meta": {
      "all": "/** Navigates to the previous page. */",
      "comment": "Navigates to the previous page."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "paginationGoToFirstPage": {
    "meta": {
      "all": "/** Navigates to the first page. */",
      "comment": "Navigates to the first page."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "paginationGoToLastPage": {
    "meta": {
      "all": "/** Navigates to the last page. */",
      "comment": "Navigates to the last page."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "paginationGoToPage": {
    "meta": {
      "all": "/** Goes to the specified page. If the page requested doesn't exist, it will go to the last page. */",
      "comment": "Goes to the specified page. If the page requested doesn't exist, it will go to the last page."
    },
    "type": {
      "arguments": {
        "page": "number"
      },
      "returnType": "void"
    }
  },
  "sizeColumnsToFit": {
    "meta": {
      "all": "/** Adjusts the size of columns to fit the available horizontal space.\n     *\n     * Note: it is not recommended to call this method rapidly e.g. in response\n     * to window resize events or as the container size is animated. This can\n     * cause the scrollbar to flicker. Use column flex for smoother results.\n     *\n     * If inferring cell data types with custom column types\n     * and row data is provided asynchronously, the column sizing will happen asynchronously when row data is added.\n     * To always perform this synchronously, set `cellDataType = false` on the default column definition.\n     **/",
      "comment": "Adjusts the size of columns to fit the available horizontal space.\n\nNote: it is not recommended to call this method rapidly e.g. in response\nto window resize events or as the container size is animated. This can\ncause the scrollbar to flicker. Use column flex for smoother results.\n\nIf inferring cell data types with custom column types\nand row data is provided asynchronously, the column sizing will happen asynchronously when row data is added.\nTo always perform this synchronously, set `cellDataType = false` on the default column definition."
    },
    "type": {
      "arguments": {
        "paramsOrGridWidth?": "ISizeColumnsToFitParams | number"
      },
      "returnType": "void"
    }
  },
  "setColumnGroupOpened": {
    "meta": {
      "all": "/** Call this if you want to open or close a column group. */",
      "comment": "Call this if you want to open or close a column group."
    },
    "type": {
      "arguments": {
        "group": "ProvidedColumnGroup | string",
        "newValue": "boolean"
      },
      "returnType": "void"
    }
  },
  "getColumnGroup": {
    "meta": {
      "all": "/** Returns the column group with the given name. */",
      "comment": "Returns the column group with the given name."
    },
    "type": {
      "arguments": {
        "name": "string",
        "instanceId?": "number"
      },
      "returnType": "ColumnGroup | null"
    }
  },
  "getProvidedColumnGroup": {
    "meta": {
      "all": "/** Returns the provided column group with the given name. */",
      "comment": "Returns the provided column group with the given name."
    },
    "type": {
      "arguments": {
        "name": "string"
      },
      "returnType": "ProvidedColumnGroup | null"
    }
  },
  "getDisplayNameForColumn": {
    "meta": {
      "all": "/** Returns the display name for a column. Useful if you are doing your own header rendering and want the grid to work out if `headerValueGetter` is used, or if you are doing your own column management GUI, to know what to show as the column name. */",
      "comment": "Returns the display name for a column. Useful if you are doing your own header rendering and want the grid to work out if `headerValueGetter` is used, or if you are doing your own column management GUI, to know what to show as the column name."
    },
    "type": {
      "arguments": {
        "column": "Column",
        "location": "HeaderLocation"
      },
      "returnType": "string"
    }
  },
  "getDisplayNameForColumnGroup": {
    "meta": {
      "all": "/** Returns the display name for a column group (when grouping columns). */",
      "comment": "Returns the display name for a column group (when grouping columns)."
    },
    "type": {
      "arguments": {
        "columnGroup": "ColumnGroup",
        "location": "HeaderLocation"
      },
      "returnType": "string"
    }
  },
  "getColumn": {
    "meta": {
      "all": "/** Returns the column with the given `colKey`, which can either be the `colId` (a string) or the `colDef` (an object). */",
      "comment": "Returns the column with the given `colKey`, which can either be the `colId` (a string) or the `colDef` (an object)."
    },
    "type": {
      "arguments": {
        "key": "string | ColDef<TData, TValue> | Column<TValue>"
      },
      "returnType": "Column<TValue> | null"
    }
  },
  "getColumns": {
    "meta": {
      "all": "/** Returns all the columns, regardless of visible or not. */",
      "comment": "Returns all the columns, regardless of visible or not."
    },
    "type": {
      "arguments": {},
      "returnType": "Column[] | null"
    }
  },
  "applyColumnState": {
    "meta": {
      "all": "/** Applies the state of the columns from a previous state. Returns `false` if one or more columns could not be found. */",
      "comment": "Applies the state of the columns from a previous state. Returns `false` if one or more columns could not be found."
    },
    "type": {
      "arguments": {
        "params": "ApplyColumnStateParams"
      },
      "returnType": "boolean"
    }
  },
  "getColumnState": {
    "meta": {
      "all": "/** Gets the state of the columns. Typically used when saving column state. */",
      "comment": "Gets the state of the columns. Typically used when saving column state."
    },
    "type": {
      "arguments": {},
      "returnType": "ColumnState[]"
    }
  },
  "resetColumnState": {
    "meta": {
      "all": "/** Sets the state back to match the originally provided column definitions. */",
      "comment": "Sets the state back to match the originally provided column definitions."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "getColumnGroupState": {
    "meta": {
      "all": "/** Gets the state of the column groups. Typically used when saving column group state. */",
      "comment": "Gets the state of the column groups. Typically used when saving column group state."
    },
    "type": {
      "arguments": {},
      "returnType": "{ groupId: string; open: boolean }[]"
    }
  },
  "setColumnGroupState": {
    "meta": {
      "all": "/** Sets the state of the column group state from a previous state. */",
      "comment": "Sets the state of the column group state from a previous state."
    },
    "type": {
      "arguments": {
        "stateItems": "{ groupId: string; open: boolean; }[]"
      },
      "returnType": "void"
    }
  },
  "resetColumnGroupState": {
    "meta": {
      "all": "/** Sets the state back to match the originally provided column definitions. */",
      "comment": "Sets the state back to match the originally provided column definitions."
    },
    "type": {
      "arguments": {},
      "returnType": "void"
    }
  },
  "isPinning": {
    "meta": {
      "all": "/** Returns `true` if pinning left or right, otherwise `false`. */",
      "comment": "Returns `true` if pinning left or right, otherwise `false`."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isPinningLeft": {
    "meta": {
      "all": "/** Returns `true` if pinning left, otherwise `false`. */",
      "comment": "Returns `true` if pinning left, otherwise `false`."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isPinningRight": {
    "meta": {
      "all": "/** Returns `true` if pinning right, otherwise `false`. */",
      "comment": "Returns `true` if pinning right, otherwise `false`."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "getDisplayedColAfter": {
    "meta": {
      "all": "/** Returns the column to the right of the provided column, taking into consideration open / closed column groups and visible columns. This is useful if you need to know what column is beside yours e.g. if implementing your own cell navigation. */",
      "comment": "Returns the column to the right of the provided column, taking into consideration open / closed column groups and visible columns. This is useful if you need to know what column is beside yours e.g. if implementing your own cell navigation."
    },
    "type": {
      "arguments": {
        "col": "Column"
      },
      "returnType": "Column | null"
    }
  },
  "getDisplayedColBefore": {
    "meta": {
      "all": "/** Same as `getVisibleColAfter` except gives column to the left. */",
      "comment": "Same as `getVisibleColAfter` except gives column to the left."
    },
    "type": {
      "arguments": {
        "col": "Column"
      },
      "returnType": "Column | null"
    }
  },
  "setColumnVisible": {
    "meta": {
      "all": "/** @deprecated v31.1 setColumnVisible(key, visible) deprecated, please use setColumnsVisible([key], visible) instead. */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v31.1 setColumnVisible(key, visible) deprecated, please use setColumnsVisible([key], visible) instead."
        }
      ]
    },
    "type": {
      "arguments": {
        "key": "string | Column",
        "visible": "boolean"
      },
      "returnType": "void"
    }
  },
  "setColumnsVisible": {
    "meta": {
      "all": "/** Sets the visibility of columns. Key can be the column ID or `Column` object. */",
      "comment": "Sets the visibility of columns. Key can be the column ID or `Column` object."
    },
    "type": {
      "arguments": {
        "keys": "(string | Column)[]",
        "visible": "boolean"
      },
      "returnType": "void"
    }
  },
  "setColumnPinned": {
    "meta": {
      "all": "/** @deprecated v31.1 setColumnPinned(key, pinned) deprecated, please use setColumnsPinned([key], pinned) instead. */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v31.1 setColumnPinned(key, pinned) deprecated, please use setColumnsPinned([key], pinned) instead."
        }
      ]
    },
    "type": {
      "arguments": {
        "key": "string | ColDef | Column",
        "pinned": "ColumnPinnedType"
      },
      "returnType": "void"
    }
  },
  "setColumnsPinned": {
    "meta": {
      "all": "/** Set a column's pinned / unpinned state. Key can be the column ID, field, `ColDef` object or `Column` object. */",
      "comment": "Set a column's pinned / unpinned state. Key can be the column ID, field, `ColDef` object or `Column` object."
    },
    "type": {
      "arguments": {
        "keys": "(string | ColDef | Column)[]",
        "pinned": "ColumnPinnedType"
      },
      "returnType": "void"
    }
  },
  "getAllGridColumns": {
    "meta": {
      "all": "/** Returns all the grid columns, same as `getColumns()`, except\n     *\n     *  a) it has the order of the columns that are presented in the grid\n     *\n     *  b) it's after the 'pivot' step, so if pivoting, has the value columns for the pivot.\n     */",
      "comment": "Returns all the grid columns, same as `getColumns()`, except\n\n a) it has the order of the columns that are presented in the grid\n\n b) it's after the 'pivot' step, so if pivoting, has the value columns for the pivot."
    },
    "type": {
      "arguments": {},
      "returnType": "Column[]"
    }
  },
  "getDisplayedLeftColumns": {
    "meta": {
      "all": "/** Same as `getAllDisplayedColumns` but just for the pinned left portion of the grid. */",
      "comment": "Same as `getAllDisplayedColumns` but just for the pinned left portion of the grid."
    },
    "type": {
      "arguments": {},
      "returnType": "Column[]"
    }
  },
  "getDisplayedCenterColumns": {
    "meta": {
      "all": "/** Same as `getAllDisplayedColumns` but just for the center portion of the grid. */",
      "comment": "Same as `getAllDisplayedColumns` but just for the center portion of the grid."
    },
    "type": {
      "arguments": {},
      "returnType": "Column[]"
    }
  },
  "getDisplayedRightColumns": {
    "meta": {
      "all": "/** Same as `getAllDisplayedColumns` but just for the pinned right portion of the grid. */",
      "comment": "Same as `getAllDisplayedColumns` but just for the pinned right portion of the grid."
    },
    "type": {
      "arguments": {},
      "returnType": "Column[]"
    }
  },
  "getAllDisplayedColumns": {
    "meta": {
      "all": "/** Returns all columns currently displayed (e.g. are visible and if in a group, the group is showing the columns) for the pinned left, centre and pinned right portions of the grid. */",
      "comment": "Returns all columns currently displayed (e.g. are visible and if in a group, the group is showing the columns) for the pinned left, centre and pinned right portions of the grid."
    },
    "type": {
      "arguments": {},
      "returnType": "Column[]"
    }
  },
  "getAllDisplayedVirtualColumns": {
    "meta": {
      "all": "/** Same as `getAllGridColumns()`, except only returns rendered columns, i.e. columns that are not within the viewport and therefore not rendered, due to column virtualisation, are not displayed. */",
      "comment": "Same as `getAllGridColumns()`, except only returns rendered columns, i.e. columns that are not within the viewport and therefore not rendered, due to column virtualisation, are not displayed."
    },
    "type": {
      "arguments": {},
      "returnType": "Column[]"
    }
  },
  "moveColumn": {
    "meta": {
      "all": "/** @deprecated v31.1 moveColumn(key, toIndex) deprecated, please use moveColumns([key], toIndex) instead. */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v31.1 moveColumn(key, toIndex) deprecated, please use moveColumns([key], toIndex) instead."
        }
      ]
    },
    "type": {
      "arguments": {
        "key": "string | ColDef | Column",
        "toIndex": "number"
      },
      "returnType": "void"
    }
  },
  "moveColumnByIndex": {
    "meta": {
      "all": "/** Moves the column at `fromIdex` to `toIndex`. The column is first removed, then added at the `toIndex` location, thus index locations will change to the right of the column after the removal. */",
      "comment": "Moves the column at `fromIdex` to `toIndex`. The column is first removed, then added at the `toIndex` location, thus index locations will change to the right of the column after the removal."
    },
    "type": {
      "arguments": {
        "fromIndex": "number",
        "toIndex": "number"
      },
      "returnType": "void"
    }
  },
  "moveColumns": {
    "meta": {
      "all": "/** Moves columns to `toIndex`. The columns are first removed, then added at the `toIndex` location, thus index locations will change to the right of the column after the removal. */",
      "comment": "Moves columns to `toIndex`. The columns are first removed, then added at the `toIndex` location, thus index locations will change to the right of the column after the removal."
    },
    "type": {
      "arguments": {
        "columnsToMoveKeys": "(string | ColDef | Column)[]",
        "toIndex": "number"
      },
      "returnType": "void"
    }
  },
  "moveRowGroupColumn": {
    "meta": {
      "all": "/** Move the column to a new position in the row grouping order. */",
      "comment": "Move the column to a new position in the row grouping order."
    },
    "type": {
      "arguments": {
        "fromIndex": "number",
        "toIndex": "number"
      },
      "returnType": "void"
    }
  },
  "setColumnAggFunc": {
    "meta": {
      "all": "/** Sets the agg function for a column. `aggFunc` can be one of the built-in aggregations or a custom aggregation by name or direct function. */",
      "comment": "Sets the agg function for a column. `aggFunc` can be one of the built-in aggregations or a custom aggregation by name or direct function."
    },
    "type": {
      "arguments": {
        "key": "string | ColDef | Column",
        "aggFunc": "string | IAggFunc | null | undefined"
      },
      "returnType": "void"
    }
  },
  "setColumnWidth": {
    "meta": {
      "all": "/** @deprecated v31.1 setColumnWidths(key, newWidth) deprecated, please use setColumnWidths( [{key: newWidth}] ) instead. */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v31.1 setColumnWidths(key, newWidth) deprecated, please use setColumnWidths( [{key: newWidth}] ) instead."
        }
      ]
    },
    "type": {
      "arguments": {
        "key": "string | ColDef | Column",
        "newWidth": "number",
        "finished?": "boolean",
        "source?": "ColumnEventType"
      },
      "returnType": "void"
    }
  },
  "setColumnWidths": {
    "meta": {
      "all": "/** Sets the column widths of the columns provided. The finished flag gets included in the resulting event and not used internally by the grid. The finished flag is intended for dragging, where a dragging action will produce many `columnWidth` events, so the consumer of events knows when it receives the last event in a stream. The finished parameter is optional, and defaults to `true`. */",
      "comment": "Sets the column widths of the columns provided. The finished flag gets included in the resulting event and not used internally by the grid. The finished flag is intended for dragging, where a dragging action will produce many `columnWidth` events, so the consumer of events knows when it receives the last event in a stream. The finished parameter is optional, and defaults to `true`."
    },
    "type": {
      "arguments": {
        "columnWidths": "{ key: string | ColDef | Column; newWidth: number; }[]",
        "finished?": "boolean",
        "source?": "ColumnEventType"
      },
      "returnType": "void"
    }
  },
  "isPivotMode": {
    "meta": {
      "all": "/** Get the pivot mode. */",
      "comment": "Get the pivot mode."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "getPivotResultColumn": {
    "meta": {
      "all": "/** Returns the pivot result column for the given `pivotKeys` and `valueColId`. Useful to then call operations on the pivot column. */",
      "comment": "Returns the pivot result column for the given `pivotKeys` and `valueColId`. Useful to then call operations on the pivot column."
    },
    "type": {
      "arguments": {
        "pivotKeys": "string[]",
        "valueColKey": "string | ColDef<TData, TValue> | Column<TValue>"
      },
      "returnType": "Column<TValue> | null"
    }
  },
  "setValueColumns": {
    "meta": {
      "all": "/** Set the value columns to the provided list of columns. */",
      "comment": "Set the value columns to the provided list of columns."
    },
    "type": {
      "arguments": {
        "colKeys": "(string | ColDef | Column)[]"
      },
      "returnType": "void"
    }
  },
  "getValueColumns": {
    "meta": {
      "all": "/** Get a list of the existing value columns. */",
      "comment": "Get a list of the existing value columns."
    },
    "type": {
      "arguments": {},
      "returnType": "Column[]"
    }
  },
  "removeValueColumn": {
    "meta": {
      "all": "/** @deprecated v31.1 removeValueColumn(colKey) deprecated, please use removeValueColumns([colKey]) instead. */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v31.1 removeValueColumn(colKey) deprecated, please use removeValueColumns([colKey]) instead."
        }
      ]
    },
    "type": {
      "arguments": {
        "colKey": "string | ColDef | Column"
      },
      "returnType": "void"
    }
  },
  "removeValueColumns": {
    "meta": {
      "all": "/** Remove the given list of columns from the existing set of value columns. */",
      "comment": "Remove the given list of columns from the existing set of value columns."
    },
    "type": {
      "arguments": {
        "colKeys": "(string | ColDef | Column)[]"
      },
      "returnType": "void"
    }
  },
  "addValueColumn": {
    "meta": {
      "all": "/** @deprecated v31.1 addValueColumn(colKey) deprecated, please use addValueColumns([colKey]) instead. */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v31.1 addValueColumn(colKey) deprecated, please use addValueColumns([colKey]) instead."
        }
      ]
    },
    "type": {
      "arguments": {
        "colKey": "string | ColDef | Column"
      },
      "returnType": "void"
    }
  },
  "addValueColumns": {
    "meta": {
      "all": "/** Add the given list of columns to the existing set of value columns. */",
      "comment": "Add the given list of columns to the existing set of value columns."
    },
    "type": {
      "arguments": {
        "colKeys": "(string | ColDef | Column)[]"
      },
      "returnType": "void"
    }
  },
  "setRowGroupColumns": {
    "meta": {
      "all": "/** Set the row group columns. */",
      "comment": "Set the row group columns."
    },
    "type": {
      "arguments": {
        "colKeys": "(string | ColDef | Column)[]"
      },
      "returnType": "void"
    }
  },
  "removeRowGroupColumn": {
    "meta": {
      "all": "/** @deprecated v31.1 removeRowGroupColumn(colKey) deprecated, please use removeRowGroupColumns([colKey]) instead. */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v31.1 removeRowGroupColumn(colKey) deprecated, please use removeRowGroupColumns([colKey]) instead."
        }
      ]
    },
    "type": {
      "arguments": {
        "colKey": "string | ColDef | Column"
      },
      "returnType": "void"
    }
  },
  "removeRowGroupColumns": {
    "meta": {
      "all": "/** Remove columns from the row groups. */",
      "comment": "Remove columns from the row groups."
    },
    "type": {
      "arguments": {
        "colKeys": "(string | ColDef | Column)[]"
      },
      "returnType": "void"
    }
  },
  "addRowGroupColumn": {
    "meta": {
      "all": "/** @deprecated v31.1 addRowGroupColumn(colKey) deprecated, please use addRowGroupColumns([colKey]) instead. */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v31.1 addRowGroupColumn(colKey) deprecated, please use addRowGroupColumns([colKey]) instead."
        }
      ]
    },
    "type": {
      "arguments": {
        "colKey": "string | ColDef | Column"
      },
      "returnType": "void"
    }
  },
  "addRowGroupColumns": {
    "meta": {
      "all": "/** Add columns to the row groups. */",
      "comment": "Add columns to the row groups."
    },
    "type": {
      "arguments": {
        "colKeys": "(string | ColDef | Column)[]"
      },
      "returnType": "void"
    }
  },
  "getRowGroupColumns": {
    "meta": {
      "all": "/** Get row group columns. */",
      "comment": "Get row group columns."
    },
    "type": {
      "arguments": {},
      "returnType": "Column[]"
    }
  },
  "setPivotColumns": {
    "meta": {
      "all": "/** Set the pivot columns. */",
      "comment": "Set the pivot columns."
    },
    "type": {
      "arguments": {
        "colKeys": "(string | ColDef | Column)[]"
      },
      "returnType": "void"
    }
  },
  "removePivotColumn": {
    "meta": {
      "all": "/** @deprecated v31.1 removePivotColumn(colKey) deprecated, please use removePivotColumns([colKey]) instead. */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v31.1 removePivotColumn(colKey) deprecated, please use removePivotColumns([colKey]) instead."
        }
      ]
    },
    "type": {
      "arguments": {
        "colKey": "string | ColDef | Column"
      },
      "returnType": "void"
    }
  },
  "removePivotColumns": {
    "meta": {
      "all": "/** Remove pivot columns. */",
      "comment": "Remove pivot columns."
    },
    "type": {
      "arguments": {
        "colKeys": "(string | ColDef | Column)[]"
      },
      "returnType": "void"
    }
  },
  "addPivotColumn": {
    "meta": {
      "all": "/** @deprecated v31.1 addPivotColumn(colKey) deprecated, please use addPivotColumns([colKey]) instead. */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v31.1 addPivotColumn(colKey) deprecated, please use addPivotColumns([colKey]) instead."
        }
      ]
    },
    "type": {
      "arguments": {
        "colKey": "string | ColDef | Column"
      },
      "returnType": "void"
    }
  },
  "addPivotColumns": {
    "meta": {
      "all": "/** Add pivot columns. */",
      "comment": "Add pivot columns."
    },
    "type": {
      "arguments": {
        "colKeys": "(string | ColDef | Column)[]"
      },
      "returnType": "void"
    }
  },
  "getPivotColumns": {
    "meta": {
      "all": "/** Get the pivot columns. */",
      "comment": "Get the pivot columns."
    },
    "type": {
      "arguments": {},
      "returnType": "Column[]"
    }
  },
  "getLeftDisplayedColumnGroups": {
    "meta": {
      "all": "/** Same as `getAllDisplayedColumnGroups` but just for the pinned left portion of the grid. */",
      "comment": "Same as `getAllDisplayedColumnGroups` but just for the pinned left portion of the grid."
    },
    "type": {
      "arguments": {},
      "returnType": "(Column | ColumnGroup)[]"
    }
  },
  "getCenterDisplayedColumnGroups": {
    "meta": {
      "all": "/** Same as `getAllDisplayedColumnGroups` but just for the center portion of the grid. */",
      "comment": "Same as `getAllDisplayedColumnGroups` but just for the center portion of the grid."
    },
    "type": {
      "arguments": {},
      "returnType": "(Column | ColumnGroup)[]"
    }
  },
  "getRightDisplayedColumnGroups": {
    "meta": {
      "all": "/** Same as `getAllDisplayedColumnGroups` but just for the pinned right portion of the grid. */",
      "comment": "Same as `getAllDisplayedColumnGroups` but just for the pinned right portion of the grid."
    },
    "type": {
      "arguments": {},
      "returnType": "(Column | ColumnGroup)[]"
    }
  },
  "getAllDisplayedColumnGroups": {
    "meta": {
      "all": "/** Returns all 'root' column headers. If you are not grouping columns, these return the columns. If you are grouping, these return the top level groups - you can navigate down through each one to get the other lower level headers and finally the columns at the bottom. */",
      "comment": "Returns all 'root' column headers. If you are not grouping columns, these return the columns. If you are grouping, these return the top level groups - you can navigate down through each one to get the other lower level headers and finally the columns at the bottom."
    },
    "type": {
      "arguments": {},
      "returnType": "(Column | ColumnGroup)[] | null"
    }
  },
  "autoSizeColumn": {
    "meta": {
      "all": "/** @deprecated v31.1 autoSizeColumn(key) deprecated, please use autoSizeColumns([colKey]) instead. */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v31.1 autoSizeColumn(key) deprecated, please use autoSizeColumns([colKey]) instead."
        }
      ]
    },
    "type": {
      "arguments": {
        "key": "string | ColDef | Column",
        "skipHeader?": "boolean"
      },
      "returnType": "void"
    }
  },
  "autoSizeColumns": {
    "meta": {
      "all": "/** Auto-sizes columns based on their contents. If inferring cell data types with custom column types\n     * and row data is provided asynchronously, the column sizing will happen asynchronously when row data is added.\n     * To always perform this synchronously, set `cellDataType = false` on the default column definition.\n     */",
      "comment": "Auto-sizes columns based on their contents. If inferring cell data types with custom column types\nand row data is provided asynchronously, the column sizing will happen asynchronously when row data is added.\nTo always perform this synchronously, set `cellDataType = false` on the default column definition."
    },
    "type": {
      "arguments": {
        "keys": "(string | ColDef | Column)[]",
        "skipHeader?": "boolean"
      },
      "returnType": "void"
    }
  },
  "autoSizeAllColumns": {
    "meta": {
      "all": "/** Calls `autoSizeColumns` on all displayed columns. If inferring cell data types with custom column types\n     * and row data is provided asynchronously, the column sizing will happen asynchronously when row data is added.\n     * To always perform this synchronously, set `cellDataType = false` on the default column definition.\n     */",
      "comment": "Calls `autoSizeColumns` on all displayed columns. If inferring cell data types with custom column types\nand row data is provided asynchronously, the column sizing will happen asynchronously when row data is added.\nTo always perform this synchronously, set `cellDataType = false` on the default column definition."
    },
    "type": {
      "arguments": {
        "skipHeader?": "boolean"
      },
      "returnType": "void"
    }
  },
  "setPivotResultColumns": {
    "meta": {
      "all": "/** Set the pivot result columns. */",
      "comment": "Set the pivot result columns."
    },
    "type": {
      "arguments": {
        "colDefs": "(ColDef | ColGroupDef)[] | null"
      },
      "returnType": "void"
    }
  },
  "getPivotResultColumns": {
    "meta": {
      "all": "/** Returns the grid's pivot result columns. */",
      "comment": "Returns the grid's pivot result columns."
    },
    "type": {
      "arguments": {},
      "returnType": "Column[] | null"
    }
  },
  "getState": {
    "meta": {
      "all": "/** Get the current state of the grid. Can be used in conjunction with the `initialState` grid option to save and restore grid state. */",
      "comment": "Get the current state of the grid. Can be used in conjunction with the `initialState` grid option to save and restore grid state."
    },
    "type": {
      "arguments": {},
      "returnType": "GridState"
    }
  },
  "getGridOption": {
    "meta": {
      "all": "/** Returns the grid option value for a provided key.\n     */",
      "comment": "Returns the grid option value for a provided key."
    },
    "type": {
      "arguments": {
        "key": "Key"
      },
      "returnType": "GridOptions<TData>[Key]"
    }
  },
  "setGridOption": {
    "meta": {
      "all": "/** Updates a single gridOption to the new value provided. (Cannot be used on `Initial` properties.)\n     * If updating multiple options, it is recommended to instead use `api.updateGridOptions()` which batches update logic.\n     */",
      "comment": "Updates a single gridOption to the new value provided. (Cannot be used on `Initial` properties.)\nIf updating multiple options, it is recommended to instead use `api.updateGridOptions()` which batches update logic."
    },
    "type": {
      "arguments": {
        "key": "Key",
        "value": "GridOptions<TData>[Key]"
      },
      "returnType": "void"
    }
  },
  "updateGridOptions": {
    "meta": {
      "all": "/** Updates the provided subset of gridOptions with the provided values. (Cannot be used on `Initial` properties.)\n     */",
      "comment": "Updates the provided subset of gridOptions with the provided values. (Cannot be used on `Initial` properties.)"
    },
    "type": {
      "arguments": {
        "options": "ManagedGridOptions<TDataUpdate>"
      },
      "returnType": "void"
    }
  }
}