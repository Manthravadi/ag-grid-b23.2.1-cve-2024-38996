{
  "headerName": {
    "meta": {
      "all": "/** The name to render in the column header. If not specified and field is specified, the field name will be used as the header name. */",
      "comment": "The name to render in the column header. If not specified and field is specified, the field name will be used as the header name."
    },
    "type": {
      "returnType": "string"
    }
  },
  "headerValueGetter": {
    "meta": {
      "all": "/** Function or expression. Gets the value for display in the header. */",
      "comment": "Function or expression. Gets the value for display in the header."
    },
    "type": {
      "returnType": "string | HeaderValueGetterFunc<TData, TValue>"
    }
  },
  "headerTooltip": {
    "meta": {
      "all": "/** Tooltip for the column header */",
      "comment": "Tooltip for the column header"
    },
    "type": {
      "returnType": "string"
    }
  },
  "headerClass": {
    "meta": {
      "all": "/** CSS class to use for the header cell. Can be a string, array of strings, or function. */",
      "comment": "CSS class to use for the header cell. Can be a string, array of strings, or function."
    },
    "type": {
      "returnType": "HeaderClass<TData, TValue>"
    }
  },
  "suppressHeaderKeyboardEvent": {
    "meta": {
      "all": "/** Suppress the grid taking action for the relevant keyboard event when a header is focused. */",
      "comment": "Suppress the grid taking action for the relevant keyboard event when a header is focused."
    },
    "type": {
      "arguments": {
        "params": "SuppressHeaderKeyboardEventParams<TData, TValue>"
      },
      "returnType": "boolean"
    }
  },
  "columnGroupShow": {
    "meta": {
      "all": "/** Whether to only show the column when the group is open / closed. If not set the column is always displayed as part of the group. */",
      "comment": "Whether to only show the column when the group is open / closed. If not set the column is always displayed as part of the group."
    },
    "type": {
      "returnType": "ColumnGroupShowType"
    }
  },
  "toolPanelClass": {
    "meta": {
      "all": "/** CSS class to use for the tool panel cell. Can be a string, array of strings, or function. */",
      "comment": "CSS class to use for the tool panel cell. Can be a string, array of strings, or function."
    },
    "type": {
      "returnType": "ToolPanelClass<TData, TValue>"
    }
  },
  "suppressColumnsToolPanel": {
    "meta": {
      "all": "/** Set to `true` if you do not want this column or group to appear in the Columns Tool Panel.\n     * @default false\n     */",
      "comment": "Set to `true` if you do not want this column or group to appear in the Columns Tool Panel.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "suppressFiltersToolPanel": {
    "meta": {
      "all": "/** Set to `true` if you do not want this column (filter) or group (filter group) to appear in the Filters Tool Panel.\n     * @default false\n     */",
      "comment": "Set to `true` if you do not want this column (filter) or group (filter group) to appear in the Filters Tool Panel.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "tooltipComponent": {
    "meta": {
      "all": "/** Provide your own tooltip component for the column.\n     * See [Tooltip Component](https://www.ag-grid.com/javascript-data-grid/tooltips/) for framework specific implementation details.\n     */",
      "comment": "Provide your own tooltip component for the column.\nSee [Tooltip Component](https://www.ag-grid.com/javascript-data-grid/tooltips/) for framework specific implementation details."
    },
    "type": {
      "returnType": "any"
    }
  },
  "tooltipComponentParams": {
    "meta": {
      "all": "/** The params used to configure `tooltipComponent`. */",
      "comment": "The params used to configure `tooltipComponent`."
    },
    "type": {
      "returnType": "any"
    }
  },
  "pivotKeys": {
    "meta": {
      "all": "/** Never set this, it is used internally by grid when doing in-grid pivoting */",
      "comment": "Never set this, it is used internally by grid when doing in-grid pivoting"
    },
    "type": {
      "returnType": "string[]"
    }
  },
  "cellAriaRole": {
    "meta": {
      "all": "/** Used for screen reader announcements - the role property of the cells that belong to this column.\n     * @default 'gridcell'\n     */",
      "comment": "Used for screen reader announcements - the role property of the cells that belong to this column.",
      "tags": [
        {
          "name": "default",
          "comment": "'gridcell'"
        }
      ]
    },
    "type": {
      "returnType": "string"
    }
  },
  "context": {
    "meta": {
      "all": "/** Context property that can be used to associate arbitrary application data with this column definition.\n     */",
      "comment": "Context property that can be used to associate arbitrary application data with this column definition."
    },
    "type": {
      "returnType": "any"
    }
  },
  "children": {
    "meta": {
      "all": "/** A list containing a mix of columns and column groups. */",
      "comment": "A list containing a mix of columns and column groups."
    },
    "type": {
      "returnType": "(ColDef<TData> | ColGroupDef<TData>)[]"
    }
  },
  "groupId": {
    "meta": {
      "all": "/** The unique ID to give the column. This is optional. If missing, a unique ID will be generated. This ID is used to identify the column group in the API. */",
      "comment": "The unique ID to give the column. This is optional. If missing, a unique ID will be generated. This ID is used to identify the column group in the API."
    },
    "type": {
      "returnType": "string"
    }
  },
  "openByDefault": {
    "meta": {
      "all": "/** Set to `true` if this group should be opened by default.\n     * @default false\n     */",
      "comment": "Set to `true` if this group should be opened by default.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "marryChildren": {
    "meta": {
      "all": "/** Set to `true` to keep columns in this group beside each other in the grid. Moving the columns outside of the group (and hence breaking the group) is not allowed.\n     * @default false\n     */",
      "comment": "Set to `true` to keep columns in this group beside each other in the grid. Moving the columns outside of the group (and hence breaking the group) is not allowed.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "suppressStickyLabel": {
    "meta": {
      "all": "/** If `true` the label of the Column Group will not scroll alongside the grid to always remain visible.\n     * @default false\n     */",
      "comment": "If `true` the label of the Column Group will not scroll alongside the grid to always remain visible.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "headerGroupComponent": {
    "meta": {
      "all": "/** The custom header group component to be used for rendering the component header. If none specified the default AG Grid is used.\n     * See [Header Group Component](https://www.ag-grid.com/javascript-data-grid/component-header/#header-group-components) for framework specific implementation details.\n     */",
      "comment": "The custom header group component to be used for rendering the component header. If none specified the default AG Grid is used.\nSee [Header Group Component](https://www.ag-grid.com/javascript-data-grid/component-header/#header-group-components) for framework specific implementation details."
    },
    "type": {
      "returnType": "any"
    }
  },
  "headerGroupComponentParams": {
    "meta": {
      "all": "/** The params used to configure the `headerGroupComponent`. */",
      "comment": "The params used to configure the `headerGroupComponent`."
    },
    "type": {
      "returnType": "any"
    }
  },
  "colId": {
    "meta": {
      "all": "/** The unique ID to give the column. This is optional. If missing, the ID will default to the field.\n     *  If both field and colId are missing, a unique ID will be generated.\n     *  This ID is used to identify the column in the API for sorting, filtering etc.\n     */",
      "comment": "The unique ID to give the column. This is optional. If missing, the ID will default to the field.\nIf both field and colId are missing, a unique ID will be generated.\nThis ID is used to identify the column in the API for sorting, filtering etc."
    },
    "type": {
      "returnType": "string"
    }
  },
  "field": {
    "meta": {
      "all": "/** The field of the row object to get the cell's data from.\n     * Deep references into a row object is supported via dot notation, i.e `'address.firstLine'`.\n     */",
      "comment": "The field of the row object to get the cell's data from.\nDeep references into a row object is supported via dot notation, i.e `'address.firstLine'`."
    },
    "type": {
      "returnType": "ColDefField<TData, TValue>"
    }
  },
  "type": {
    "meta": {
      "all": "/** A comma separated string or array of strings containing `ColumnType` keys which can be used as a template for a column.\n     * This helps to reduce duplication of properties when you have a lot of common column properties.\n     */",
      "comment": "A comma separated string or array of strings containing `ColumnType` keys which can be used as a template for a column.\nThis helps to reduce duplication of properties when you have a lot of common column properties."
    },
    "type": {
      "returnType": "string | string[]"
    }
  },
  "cellDataType": {
    "meta": {
      "all": "/** The data type of the cell values for this column.\n     * Can either infer the data type from the row data (`true` - the default behaviour),\n     * define a specific data type (`string`), or have no data type (`false`).\n     *\n     * If setting a specific data type (`string` value),\n     * this can either be one of the pre-defined data types\n     * `'text'`, `'number'`,  `'boolean'`,  `'date'`,  `'dateString'` or  `'object'`,\n     * or a custom data type that has been defined in the `dataTypeDefinitions` grid option.\n     *\n     * Data type inference only works for the Client-Side Row Model, and requires non-null data.\n     * It will also not work if the `valueGetter`, `valueParser` or `refData` properties are defined,\n     * or if this column is a sparkline.\n     *\n     * @default true\n     */",
      "comment": "The data type of the cell values for this column.\nCan either infer the data type from the row data (`true` - the default behaviour),\ndefine a specific data type (`string`), or have no data type (`false`).\n\nIf setting a specific data type (`string` value),\nthis can either be one of the pre-defined data types\n`'text'`, `'number'`,  `'boolean'`,  `'date'`,  `'dateString'` or  `'object'`,\nor a custom data type that has been defined in the `dataTypeDefinitions` grid option.\n\nData type inference only works for the Client-Side Row Model, and requires non-null data.\nIt will also not work if the `valueGetter`, `valueParser` or `refData` properties are defined,\nor if this column is a sparkline.",
      "tags": [
        {
          "name": "default",
          "comment": "true"
        }
      ]
    },
    "type": {
      "returnType": "boolean | string"
    }
  },
  "valueGetter": {
    "meta": {
      "all": "/** Function or expression. Gets the value from your data for display. */",
      "comment": "Function or expression. Gets the value from your data for display."
    },
    "type": {
      "returnType": "string | ValueGetterFunc<TData, TValue>"
    }
  },
  "valueFormatter": {
    "meta": {
      "all": "/** A function or expression to format a value, should return a string. Not used for CSV export or copy to clipboard, only for UI cell rendering. */",
      "comment": "A function or expression to format a value, should return a string. Not used for CSV export or copy to clipboard, only for UI cell rendering."
    },
    "type": {
      "returnType": "string | ValueFormatterFunc<TData, TValue>"
    }
  },
  "refData": {
    "meta": {
      "all": "/** Provided a reference data map to be used to map column values to their respective value from the map. */",
      "comment": "Provided a reference data map to be used to map column values to their respective value from the map."
    },
    "type": {
      "returnType": "{ [key: string]: string }"
    }
  },
  "keyCreator": {
    "meta": {
      "all": "/** Function to return a string key for a value.\n     * This string is used for grouping, Set filtering, and searching within cell editor dropdowns.\n     * When filtering and searching the string is exposed to the user, so make sure to return a human-readable value.\n     */",
      "comment": "Function to return a string key for a value.\nThis string is used for grouping, Set filtering, and searching within cell editor dropdowns.\nWhen filtering and searching the string is exposed to the user, so make sure to return a human-readable value."
    },
    "type": {
      "arguments": {
        "params": "KeyCreatorParams<TData, TValue>"
      },
      "returnType": "string"
    }
  },
  "equals": {
    "meta": {
      "all": "/** Custom comparator for values, used by renderer to know if values have changed. Cells whose values have not changed don't get refreshed.\n     * By default the grid uses `===` which should work for most use cases.\n     */",
      "comment": "Custom comparator for values, used by renderer to know if values have changed. Cells whose values have not changed don't get refreshed.\nBy default the grid uses `===` which should work for most use cases."
    },
    "type": {
      "arguments": {
        "valueA": "TValue | null | undefined",
        "valueB": "TValue | null | undefined"
      },
      "returnType": "boolean"
    }
  },
  "tooltipField": {
    "meta": {
      "all": "/** The field of the tooltip to apply to the cell. */",
      "comment": "The field of the tooltip to apply to the cell."
    },
    "type": {
      "returnType": "ColDefField<TData>"
    }
  },
  "tooltipValueGetter": {
    "meta": {
      "all": "/** Callback that should return the string to use for a tooltip, `tooltipField` takes precedence if set.\n     * If using a custom `tooltipComponent` you may return any custom value to be passed to your tooltip component.\n     */",
      "comment": "Callback that should return the string to use for a tooltip, `tooltipField` takes precedence if set.\nIf using a custom `tooltipComponent` you may return any custom value to be passed to your tooltip component."
    },
    "type": {
      "arguments": {
        "params": "ITooltipParams<TData, TValue>"
      },
      "returnType": "string | any"
    }
  },
  "checkboxSelection": {
    "meta": {
      "all": "/** Set to `true` (or return `true` from function) to render a selection checkbox in the column.\n     * @default false\n     */",
      "comment": "Set to `true` (or return `true` from function) to render a selection checkbox in the column.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean | CheckboxSelectionCallback<TData, TValue>"
    }
  },
  "showDisabledCheckboxes": {
    "meta": {
      "all": "/** Set to `true` to display a disabled checkbox when row is not selectable and checkboxes are enabled.\n     * @default false\n     */",
      "comment": "Set to `true` to display a disabled checkbox when row is not selectable and checkboxes are enabled.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "icons": {
    "meta": {
      "all": "/** Icons to use inside the column instead of the grid's default icons. Leave undefined to use defaults.\n     * @initial\n     * */",
      "comment": "Icons to use inside the column instead of the grid's default icons. Leave undefined to use defaults.",
      "tags": [
        {
          "name": "initial"
        }
      ]
    },
    "type": {
      "returnType": "{ [key: string]: ((...args: any[]) => any) | string }"
    }
  },
  "suppressNavigable": {
    "meta": {
      "all": "/** Set to `true` if this column is not navigable (i.e. cannot be tabbed into), otherwise `false`.\n     * Can also be a callback function to have different rows navigable.\n     * @default false\n     */",
      "comment": "Set to `true` if this column is not navigable (i.e. cannot be tabbed into), otherwise `false`.\nCan also be a callback function to have different rows navigable.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean | SuppressNavigableCallback<TData, TValue>"
    }
  },
  "suppressKeyboardEvent": {
    "meta": {
      "all": "/** Allows the user to suppress certain keyboard events in the grid cell.\n     * @default false\n     */",
      "comment": "Allows the user to suppress certain keyboard events in the grid cell.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "arguments": {
        "params": "SuppressKeyboardEventParams<TData, TValue>"
      },
      "returnType": "boolean"
    }
  },
  "suppressPaste": {
    "meta": {
      "all": "/** Pasting is on by default as long as cells are editable (non-editable cells cannot be modified, even with a paste operation).\n     * Set to `true` turn paste operations off.\n     */",
      "comment": "Pasting is on by default as long as cells are editable (non-editable cells cannot be modified, even with a paste operation).\nSet to `true` turn paste operations off."
    },
    "type": {
      "returnType": "boolean | SuppressPasteCallback<TData, TValue>"
    }
  },
  "suppressFillHandle": {
    "meta": {
      "all": "/** Set to true to prevent the fillHandle from being rendered in any cell that belongs to this column */",
      "comment": "Set to true to prevent the fillHandle from being rendered in any cell that belongs to this column"
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "hide": {
    "meta": {
      "all": "/** Set to `true` for this column to be hidden.\n     * @default false\n     */",
      "comment": "Set to `true` for this column to be hidden.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "initialHide": {
    "meta": {
      "all": "/** Same as `hide`, except only applied when creating a new column. Not applied when updating column definitions.\n     * @initial\n     */",
      "comment": "Same as `hide`, except only applied when creating a new column. Not applied when updating column definitions.",
      "tags": [
        {
          "name": "initial"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "lockVisible": {
    "meta": {
      "all": "/** Set to `true` to block making column visible / hidden via the UI (API will still work).\n     * @default false\n     */",
      "comment": "Set to `true` to block making column visible / hidden via the UI (API will still work).",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "lockPosition": {
    "meta": {
      "all": "/** Lock a column to position to `'left'` or`'right'` to always have this column displayed in that position. `true` is treated as `'left'` */",
      "comment": "Lock a column to position to `'left'` or`'right'` to always have this column displayed in that position. `true` is treated as `'left'`"
    },
    "type": {
      "returnType": "boolean | 'left' | 'right'"
    }
  },
  "suppressMovable": {
    "meta": {
      "all": "/** Set to `true` if you do not want this column to be movable via dragging.\n     * @default false\n     */",
      "comment": "Set to `true` if you do not want this column to be movable via dragging.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "useValueFormatterForExport": {
    "meta": {
      "all": "/** By default, values are formatted using the column's `valueFormatter` when exporting data from the grid.\n     * This applies to CSV and Excel export, as well as clipboard operations and the fill handle.\n     * Set to `false` to prevent values from being formatted for these operations.\n     * Regardless of this option, if custom handling is provided for the export operation, the value formatter will not be used.\n     * @default true\n     */",
      "comment": "By default, values are formatted using the column's `valueFormatter` when exporting data from the grid.\nThis applies to CSV and Excel export, as well as clipboard operations and the fill handle.\nSet to `false` to prevent values from being formatted for these operations.\nRegardless of this option, if custom handling is provided for the export operation, the value formatter will not be used.",
      "tags": [
        {
          "name": "default",
          "comment": "true"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "editable": {
    "meta": {
      "all": "/** Set to `true` if this column is editable, otherwise `false`. Can also be a function to have different rows editable.\n     * @default false\n     */",
      "comment": "Set to `true` if this column is editable, otherwise `false`. Can also be a function to have different rows editable.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean | EditableCallback<TData, TValue>"
    }
  },
  "valueSetter": {
    "meta": {
      "all": "/** Function or expression. Sets the value into your data for saving. Return `true` if the data changed. */",
      "comment": "Function or expression. Sets the value into your data for saving. Return `true` if the data changed."
    },
    "type": {
      "returnType": "string | ValueSetterFunc<TData, TValue>"
    }
  },
  "valueParser": {
    "meta": {
      "all": "/** Function or expression. Parses the value for saving. */",
      "comment": "Function or expression. Parses the value for saving."
    },
    "type": {
      "returnType": "string | ValueParserFunc<TData, TValue>"
    }
  },
  "cellEditor": {
    "meta": {
      "all": "/** Provide your own cell editor component for this column's cells.\n     */",
      "comment": "Provide your own cell editor component for this column's cells."
    },
    "type": {
      "returnType": "any"
    }
  },
  "cellEditorParams": {
    "meta": {
      "all": "/** Params to be passed to the `cellEditor` component. */",
      "comment": "Params to be passed to the `cellEditor` component."
    },
    "type": {
      "returnType": "any"
    }
  },
  "cellEditorSelector": {
    "meta": {
      "all": "/** Callback to select which cell editor to be used for a given row within the same column. */",
      "comment": "Callback to select which cell editor to be used for a given row within the same column."
    },
    "type": {
      "returnType": "CellEditorSelectorFunc<TData, TValue>"
    }
  },
  "singleClickEdit": {
    "meta": {
      "all": "/** Set to `true` to have cells under this column enter edit mode after single click.\n     * @default false\n     */",
      "comment": "Set to `true` to have cells under this column enter edit mode after single click.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "cellEditorPopup": {
    "meta": {
      "all": "/** Set to `true`, to have the cell editor appear in a popup.\n     */",
      "comment": "Set to `true`, to have the cell editor appear in a popup."
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "cellEditorPopupPosition": {
    "meta": {
      "all": "/** Set the position for the popup cell editor. Possible values are\n     *  - `over` Popup will be positioned over the cell\n     *  - `under` Popup will be positioned below the cell leaving the cell value visible.\n     *\n     * @default 'over'\n     */",
      "comment": "Set the position for the popup cell editor. Possible values are\n - `over` Popup will be positioned over the cell\n - `under` Popup will be positioned below the cell leaving the cell value visible.",
      "tags": [
        {
          "name": "default",
          "comment": "'over'"
        }
      ]
    },
    "type": {
      "returnType": "'over' | 'under'"
    }
  },
  "useValueParserForImport": {
    "meta": {
      "all": "/** By default, values are parsed using the column's `valueParser` when importing data to the grid.\n     * This applies to clipboard operations and the fill handle.\n     * Set to `false` to prevent values from being parsed for these operations.\n     * Regardless of this option, if custom handling is provided for the import operation, the value parser will not be used.\n     * @default true\n     */",
      "comment": "By default, values are parsed using the column's `valueParser` when importing data to the grid.\nThis applies to clipboard operations and the fill handle.\nSet to `false` to prevent values from being parsed for these operations.\nRegardless of this option, if custom handling is provided for the import operation, the value parser will not be used.",
      "tags": [
        {
          "name": "default",
          "comment": "true"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "onCellValueChanged": {
    "meta": {
      "all": "/** Callback for after the value of a cell has changed, either due to editing or the application calling `api.setValue()`. */",
      "comment": "Callback for after the value of a cell has changed, either due to editing or the application calling `api.setValue()`."
    },
    "type": {
      "arguments": {
        "event": "NewValueParams<TData, TValue>"
      },
      "returnType": "void"
    }
  },
  "onCellClicked": {
    "meta": {
      "all": "/** Callback called when a cell is clicked. */",
      "comment": "Callback called when a cell is clicked."
    },
    "type": {
      "arguments": {
        "event": "CellClickedEvent<TData, TValue>"
      },
      "returnType": "void"
    }
  },
  "onCellDoubleClicked": {
    "meta": {
      "all": "/** Callback called when a cell is double clicked. */",
      "comment": "Callback called when a cell is double clicked."
    },
    "type": {
      "arguments": {
        "event": "CellDoubleClickedEvent<TData, TValue>"
      },
      "returnType": "void"
    }
  },
  "onCellContextMenu": {
    "meta": {
      "all": "/** Callback called when a cell is right clicked. */",
      "comment": "Callback called when a cell is right clicked."
    },
    "type": {
      "arguments": {
        "event": "CellContextMenuEvent<TData, TValue>"
      },
      "returnType": "void"
    }
  },
  "getQuickFilterText": {
    "meta": {
      "all": "/** A function to tell the grid what Quick Filter text to use for this column if you don't want to use the default (which is calling `toString` on the value). */",
      "comment": "A function to tell the grid what Quick Filter text to use for this column if you don't want to use the default (which is calling `toString` on the value)."
    },
    "type": {
      "arguments": {
        "params": "GetQuickFilterTextParams<TData, TValue>"
      },
      "returnType": "string"
    }
  },
  "filterValueGetter": {
    "meta": {
      "all": "/** Function or expression. Gets the value for filtering purposes.\n     */",
      "comment": "Function or expression. Gets the value for filtering purposes."
    },
    "type": {
      "returnType": "string | ValueGetterFunc<TData>"
    }
  },
  "floatingFilter": {
    "meta": {
      "all": "/** Whether to display a floating filter for this column.\n     * @default false\n     */",
      "comment": "Whether to display a floating filter for this column.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "suppressFloatingFilterButton": {
    "meta": {
      "all": "/** If `true`, the button in the floating filter that opens the parent filter in a popup will not be displayed.\n     * Only applies if `floatingFilter = true`.\n     */",
      "comment": "If `true`, the button in the floating filter that opens the parent filter in a popup will not be displayed.\nOnly applies if `floatingFilter = true`."
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "wrapHeaderText": {
    "meta": {
      "all": "/** If enabled then column header names that are too long for the column width will wrap onto the next line. Default `false` */",
      "comment": "If enabled then column header names that are too long for the column width will wrap onto the next line. Default `false`"
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "autoHeaderHeight": {
    "meta": {
      "all": "/** If enabled then the column header row will automatically adjust height to accommodate the size of the header cell.\n     * This can be useful when using your own `headerComponent` or long header names in conjunction with `wrapHeaderText`.\n     * @default false\n     */",
      "comment": "If enabled then the column header row will automatically adjust height to accommodate the size of the header cell.\nThis can be useful when using your own `headerComponent` or long header names in conjunction with `wrapHeaderText`.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "headerComponent": {
    "meta": {
      "all": "/** The custom header component to be used for rendering the component header. If none specified the default AG Grid header component is used.\n     * See [Header Component](https://www.ag-grid.com/javascript-data-grid/component-header/) for framework specific implementation detail.\n     */",
      "comment": "The custom header component to be used for rendering the component header. If none specified the default AG Grid header component is used.\nSee [Header Component](https://www.ag-grid.com/javascript-data-grid/component-header/) for framework specific implementation detail."
    },
    "type": {
      "returnType": "any"
    }
  },
  "headerComponentParams": {
    "meta": {
      "all": "/** The parameters to be passed to the `headerComponent`. */",
      "comment": "The parameters to be passed to the `headerComponent`."
    },
    "type": {
      "returnType": "any"
    }
  },
  "menuTabs": {
    "meta": {
      "all": "/** Set to an array containing zero, one or many of the following options: `'filterMenuTab' | 'generalMenuTab' | 'columnsMenuTab'`.\n     * This is used to figure out which menu tabs are present and in which order the tabs are shown.\n     */",
      "comment": "Set to an array containing zero, one or many of the following options: `'filterMenuTab' | 'generalMenuTab' | 'columnsMenuTab'`.\nThis is used to figure out which menu tabs are present and in which order the tabs are shown."
    },
    "type": {
      "returnType": "ColumnMenuTab[]"
    }
  },
  "columnChooserParams": {
    "meta": {
      "all": "/** Params used to change the behaviour and appearance of the Column Chooser/Columns Menu tab. */",
      "comment": "Params used to change the behaviour and appearance of the Column Chooser/Columns Menu tab."
    },
    "type": {
      "returnType": "ColumnChooserParams"
    }
  },
  "columnsMenuParams": {
    "meta": {
      "all": "/** @deprecated v31.1 Use columnChooserParams instead */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v31.1 Use columnChooserParams instead"
        }
      ]
    },
    "type": {
      "returnType": "ColumnsMenuParams"
    }
  },
  "suppressMenu": {
    "meta": {
      "all": "/** @deprecated v31.1 Use suppressHeaderMenuButton instead */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v31.1 Use suppressHeaderMenuButton instead"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "suppressHeaderMenuButton": {
    "meta": {
      "all": "/** Set to `true` if no menu button should be shown for this column header.\n     * @default false\n     */",
      "comment": "Set to `true` if no menu button should be shown for this column header.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "suppressHeaderFilterButton": {
    "meta": {
      "all": "/** Set to `true` to not display the filter button in the column header.\n     * Doesn't apply when `columnMenu = 'legacy'`.\n     * @default false\n     */",
      "comment": "Set to `true` to not display the filter button in the column header.\nDoesn't apply when `columnMenu = 'legacy'`.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "suppressHeaderContextMenu": {
    "meta": {
      "all": "/** Set to `true` to not display the column menu when the column header is right-clicked.\n     * Doesn't apply when `columnMenu = 'legacy'`.\n     * @default false\n     */",
      "comment": "Set to `true` to not display the column menu when the column header is right-clicked.\nDoesn't apply when `columnMenu = 'legacy'`.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "mainMenuItems": {
    "meta": {
      "all": "/** Customise the list of menu items available in the column menu.\n     */",
      "comment": "Customise the list of menu items available in the column menu."
    },
    "type": {
      "returnType": "(string | MenuItemDef<TData>)[] | GetMainMenuItems<TData>"
    }
  },
  "contextMenuItems": {
    "meta": {
      "all": "/** Customise the list of menu items available in the context menu.\n     */",
      "comment": "Customise the list of menu items available in the context menu."
    },
    "type": {
      "returnType": "(string | MenuItemDef<TData>)[] | GetContextMenuItems<TData>"
    }
  },
  "headerCheckboxSelection": {
    "meta": {
      "all": "/** If `true` or the callback returns `true`, a 'select all' checkbox will be put into the header. */",
      "comment": "If `true` or the callback returns `true`, a 'select all' checkbox will be put into the header."
    },
    "type": {
      "returnType": "boolean | HeaderCheckboxSelectionCallback<TData, TValue>"
    }
  },
  "headerCheckboxSelectionFilteredOnly": {
    "meta": {
      "all": "/** If `true`, the header checkbox selection will only select filtered items.\n     * @default false\n     */",
      "comment": "If `true`, the header checkbox selection will only select filtered items.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "headerCheckboxSelectionCurrentPageOnly": {
    "meta": {
      "all": "/** If `true`, the header checkbox selection will only select nodes on the current page.\n     * @default false\n     */",
      "comment": "If `true`, the header checkbox selection will only select nodes on the current page.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "chartDataType": {
    "meta": {
      "all": "/** Defines the chart data type that should be used for a column. */",
      "comment": "Defines the chart data type that should be used for a column."
    },
    "type": {
      "returnType": "'category' | 'series' | 'time' | 'excluded'"
    }
  },
  "pinned": {
    "meta": {
      "all": "/** Pin a column to one side: `right` or `left`. A value of `true` is converted to `'left'`. */",
      "comment": "Pin a column to one side: `right` or `left`. A value of `true` is converted to `'left'`."
    },
    "type": {
      "returnType": "boolean | 'left' | 'right' | null"
    }
  },
  "initialPinned": {
    "meta": {
      "all": "/** Same as `pinned`, except only applied when creating a new column. Not applied when updating column definitions.\n     * @initial\n     */",
      "comment": "Same as `pinned`, except only applied when creating a new column. Not applied when updating column definitions.",
      "tags": [
        {
          "name": "initial"
        }
      ]
    },
    "type": {
      "returnType": "boolean | 'left' | 'right'"
    }
  },
  "lockPinned": {
    "meta": {
      "all": "/** Set to true to block the user pinning the column, the column can only be pinned via definitions or API.\n     * @default false\n     */",
      "comment": "Set to true to block the user pinning the column, the column can only be pinned via definitions or API.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "pivot": {
    "meta": {
      "all": "/** Set to true to pivot by this column. */",
      "comment": "Set to true to pivot by this column."
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "initialPivot": {
    "meta": {
      "all": "/** Same as `pivot`, except only applied when creating a new column. Not applied when updating column definitions.\n     * @initial\n     */",
      "comment": "Same as `pivot`, except only applied when creating a new column. Not applied when updating column definitions.",
      "tags": [
        {
          "name": "initial"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "pivotIndex": {
    "meta": {
      "all": "/** Set this in columns you want to pivot by.\n     * If only pivoting by one column, set this to any number (e.g. `0`).\n     * If pivoting by multiple columns, set this to where you want this column to be in the order of pivots (e.g. `0` for first, `1` for second, and so on).\n     */",
      "comment": "Set this in columns you want to pivot by.\nIf only pivoting by one column, set this to any number (e.g. `0`).\nIf pivoting by multiple columns, set this to where you want this column to be in the order of pivots (e.g. `0` for first, `1` for second, and so on)."
    },
    "type": {
      "returnType": "number | null"
    }
  },
  "initialPivotIndex": {
    "meta": {
      "all": "/** Same as `pivotIndex`, except only applied when creating a new column. Not applied when updating column definitions.\n     * @initial\n     */",
      "comment": "Same as `pivotIndex`, except only applied when creating a new column. Not applied when updating column definitions.",
      "tags": [
        {
          "name": "initial"
        }
      ]
    },
    "type": {
      "returnType": "number"
    }
  },
  "pivotComparator": {
    "meta": {
      "all": "/** Only for CSRM, see [SSRM Pivoting](https://ag-grid.com/javascript-data-grid/server-side-model-pivoting/).\n     *\n     * Comparator to use when ordering the pivot columns, when this column is used to pivot on.\n     * The values will always be strings, as the pivot service uses strings as keys for the pivot groups.\n     * @initial\n     */",
      "comment": "Only for CSRM, see [SSRM Pivoting](https://ag-grid.com/javascript-data-grid/server-side-model-pivoting/).\n\nComparator to use when ordering the pivot columns, when this column is used to pivot on.\nThe values will always be strings, as the pivot service uses strings as keys for the pivot groups.",
      "tags": [
        {
          "name": "initial"
        }
      ]
    },
    "type": {
      "arguments": {
        "valueA": "string",
        "valueB": "string"
      },
      "returnType": "number"
    }
  },
  "enablePivot": {
    "meta": {
      "all": "/** Set to `true` if you want to be able to pivot by this column via the GUI. This will not block the API or properties being used to achieve pivot.\n     * @default false\n     */",
      "comment": "Set to `true` if you want to be able to pivot by this column via the GUI. This will not block the API or properties being used to achieve pivot.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "cellStyle": {
    "meta": {
      "all": "/** An object of css values / or function returning an object of css values for a particular cell. */",
      "comment": "An object of css values / or function returning an object of css values for a particular cell."
    },
    "type": {
      "returnType": "CellStyle | CellStyleFunc<TData, TValue>"
    }
  },
  "cellClass": {
    "meta": {
      "all": "/** Class to use for the cell. Can be string, array of strings, or function that returns a string or array of strings. */",
      "comment": "Class to use for the cell. Can be string, array of strings, or function that returns a string or array of strings."
    },
    "type": {
      "returnType": "string | string[] | CellClassFunc<TData, TValue>"
    }
  },
  "cellClassRules": {
    "meta": {
      "all": "/** Rules which can be applied to include certain CSS classes.\n     */",
      "comment": "Rules which can be applied to include certain CSS classes."
    },
    "type": {
      "returnType": "CellClassRules<TData, TValue>"
    }
  },
  "cellRenderer": {
    "meta": {
      "all": "/** Provide your own cell Renderer component for this column's cells.\n     * See [Cell Renderer](https://www.ag-grid.com/javascript-data-grid/component-cell-renderer/) for framework specific implementation details.\n     */",
      "comment": "Provide your own cell Renderer component for this column's cells.\nSee [Cell Renderer](https://www.ag-grid.com/javascript-data-grid/component-cell-renderer/) for framework specific implementation details."
    },
    "type": {
      "returnType": "any"
    }
  },
  "cellRendererParams": {
    "meta": {
      "all": "/** Params to be passed to the `cellRenderer` component. */",
      "comment": "Params to be passed to the `cellRenderer` component."
    },
    "type": {
      "returnType": "any"
    }
  },
  "cellRendererSelector": {
    "meta": {
      "all": "/** Callback to select which cell renderer to be used for a given row within the same column. */",
      "comment": "Callback to select which cell renderer to be used for a given row within the same column."
    },
    "type": {
      "returnType": "CellRendererSelectorFunc<TData, TValue>"
    }
  },
  "loadingCellRenderer": {
    "meta": {
      "all": "/** The renderer to be used while the row is in an unloaded state.\n     * Only used if `suppressServerSideFullWidthLoadingRow` is enabled.\n     */",
      "comment": "The renderer to be used while the row is in an unloaded state.\nOnly used if `suppressServerSideFullWidthLoadingRow` is enabled."
    },
    "type": {
      "returnType": "any"
    }
  },
  "loadingCellRendererParams": {
    "meta": {
      "all": "/** Params to be passed to the `loadingCellRenderer` component. */",
      "comment": "Params to be passed to the `loadingCellRenderer` component."
    },
    "type": {
      "returnType": "any"
    }
  },
  "loadingCellRendererSelector": {
    "meta": {
      "all": "/** Callback to select which loading renderer to be used for a given row within the same column. */",
      "comment": "Callback to select which loading renderer to be used for a given row within the same column."
    },
    "type": {
      "returnType": "CellRendererSelectorFunc<TData, TValue>"
    }
  },
  "autoHeight": {
    "meta": {
      "all": "/** Set to `true` to have the grid calculate the height of a row based on contents of this column.\n     * @default false\n     */",
      "comment": "Set to `true` to have the grid calculate the height of a row based on contents of this column.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "wrapText": {
    "meta": {
      "all": "/** Set to `true` to have the text wrap inside the cell - typically used with `autoHeight`.\n     * @default false\n     */",
      "comment": "Set to `true` to have the text wrap inside the cell - typically used with `autoHeight`.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "enableCellChangeFlash": {
    "meta": {
      "all": "/** Set to `true` to flash a cell when it's refreshed.\n     * @default false\n     */",
      "comment": "Set to `true` to flash a cell when it's refreshed.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "suppressCellFlash": {
    "meta": {
      "all": "/** Set to `true` to prevent this column from flashing on changes. Only applicable if cell flashing is turned on for the grid.\n     * @default false\n     * @deprecated 31.2 Use `enableCellChangeFlash={false}` in the ColDef.\n     */",
      "comment": "Set to `true` to prevent this column from flashing on changes. Only applicable if cell flashing is turned on for the grid.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        },
        {
          "name": "deprecated",
          "comment": "31.2 Use `enableCellChangeFlash={false}` in the ColDef."
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "rowDrag": {
    "meta": {
      "all": "/** `boolean` or `Function`. Set to `true` (or return `true` from function) to allow row dragging.\n     * @default false\n     */",
      "comment": "`boolean` or `Function`. Set to `true` (or return `true` from function) to allow row dragging.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean | RowDragCallback<TData, TValue>"
    }
  },
  "rowDragText": {
    "meta": {
      "all": "/** A callback that should return a string to be displayed by the `rowDragComp` while dragging a row.\n     * If this callback is not set, the `rowDragText` callback in the `gridOptions` will be used and\n     * if there is no callback in the `gridOptions` the current cell value will be used.\n     */",
      "comment": "A callback that should return a string to be displayed by the `rowDragComp` while dragging a row.\nIf this callback is not set, the `rowDragText` callback in the `gridOptions` will be used and\nif there is no callback in the `gridOptions` the current cell value will be used."
    },
    "type": {
      "arguments": {
        "params": "IRowDragItem",
        "dragItemCount": "number"
      },
      "returnType": "string"
    }
  },
  "dndSource": {
    "meta": {
      "all": "/** `boolean` or `Function`. Set to `true` (or return `true` from function) to allow dragging for native drag and drop.\n     * @default false\n     */",
      "comment": "`boolean` or `Function`. Set to `true` (or return `true` from function) to allow dragging for native drag and drop.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean | DndSourceCallback<TData, TValue>"
    }
  },
  "dndSourceOnRowDrag": {
    "meta": {
      "all": "/** Function to allow custom drag functionality for native drag and drop.\n     */",
      "comment": "Function to allow custom drag functionality for native drag and drop."
    },
    "type": {
      "arguments": {
        "params": "DndSourceOnRowDragParams<TData>"
      },
      "returnType": "void"
    }
  },
  "rowGroup": {
    "meta": {
      "all": "/** Set to `true` to row group by this column.\n     * @default false\n     */",
      "comment": "Set to `true` to row group by this column.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "initialRowGroup": {
    "meta": {
      "all": "/** Same as `rowGroup`, except only applied when creating a new column. Not applied when updating column definitions.\n     * @initial\n     */",
      "comment": "Same as `rowGroup`, except only applied when creating a new column. Not applied when updating column definitions.",
      "tags": [
        {
          "name": "initial"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "rowGroupIndex": {
    "meta": {
      "all": "/** Set this in columns you want to group by.\n     * If only grouping by one column, set this to any number (e.g. `0`).\n     * If grouping by multiple columns, set this to where you want this column to be in the group (e.g. `0` for first, `1` for second, and so on).\n     */",
      "comment": "Set this in columns you want to group by.\nIf only grouping by one column, set this to any number (e.g. `0`).\nIf grouping by multiple columns, set this to where you want this column to be in the group (e.g. `0` for first, `1` for second, and so on)."
    },
    "type": {
      "returnType": "number | null"
    }
  },
  "initialRowGroupIndex": {
    "meta": {
      "all": "/** Same as `rowGroupIndex`, except only applied when creating a new column. Not applied when updating column definitions.\n     * @initial\n     */",
      "comment": "Same as `rowGroupIndex`, except only applied when creating a new column. Not applied when updating column definitions.",
      "tags": [
        {
          "name": "initial"
        }
      ]
    },
    "type": {
      "returnType": "number"
    }
  },
  "enableRowGroup": {
    "meta": {
      "all": "/** Set to `true` if you want to be able to row group by this column via the GUI.\n     * This will not block the API or properties being used to achieve row grouping.\n     * @default false\n     */",
      "comment": "Set to `true` if you want to be able to row group by this column via the GUI.\nThis will not block the API or properties being used to achieve row grouping.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "enableValue": {
    "meta": {
      "all": "/** Set to `true` if you want to be able to aggregate by this column via the GUI.\n     * This will not block the API or properties being used to achieve aggregation.\n     * @default false\n     */",
      "comment": "Set to `true` if you want to be able to aggregate by this column via the GUI.\nThis will not block the API or properties being used to achieve aggregation.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "aggFunc": {
    "meta": {
      "all": "/** Name of function to use for aggregation. In-built options are: `sum`, `min`, `max`, `count`, `avg`, `first`, `last`. Also accepts a custom aggregation name or an aggregation function. */",
      "comment": "Name of function to use for aggregation. In-built options are: `sum`, `min`, `max`, `count`, `avg`, `first`, `last`. Also accepts a custom aggregation name or an aggregation function."
    },
    "type": {
      "returnType": "string | IAggFunc<TData, TValue> | null"
    }
  },
  "initialAggFunc": {
    "meta": {
      "all": "/** Same as `aggFunc`, except only applied when creating a new column. Not applied when updating column definitions.\n     * @initial\n     */",
      "comment": "Same as `aggFunc`, except only applied when creating a new column. Not applied when updating column definitions.",
      "tags": [
        {
          "name": "initial"
        }
      ]
    },
    "type": {
      "returnType": "string | IAggFunc<TData, TValue>"
    }
  },
  "defaultAggFunc": {
    "meta": {
      "all": "/** The name of the aggregation function to use for this column when it is enabled via the GUI.\n     * Note that this does not immediately apply the aggregation function like `aggFunc`\n     * @default 'sum'\n     */",
      "comment": "The name of the aggregation function to use for this column when it is enabled via the GUI.\nNote that this does not immediately apply the aggregation function like `aggFunc`",
      "tags": [
        {
          "name": "default",
          "comment": "'sum'"
        }
      ]
    },
    "type": {
      "returnType": "string"
    }
  },
  "allowedAggFuncs": {
    "meta": {
      "all": "/** Aggregation functions allowed on this column e.g. `['sum', 'avg']`.\n     * If missing, all installed functions are allowed.\n     * This will only restrict what the GUI allows a user to select, it does not impact when you set a function via the API. */",
      "comment": "Aggregation functions allowed on this column e.g. `['sum', 'avg']`.\nIf missing, all installed functions are allowed.\nThis will only restrict what the GUI allows a user to select, it does not impact when you set a function via the API."
    },
    "type": {
      "returnType": "string[]"
    }
  },
  "showRowGroup": {
    "meta": {
      "all": "/** Set to true to have the grid place the values for the group into the cell, or put the name of a grouped column to just show that group.\n     * @initial\n     */",
      "comment": "Set to true to have the grid place the values for the group into the cell, or put the name of a grouped column to just show that group.",
      "tags": [
        {
          "name": "initial"
        }
      ]
    },
    "type": {
      "returnType": "string | boolean"
    }
  },
  "sortable": {
    "meta": {
      "all": "/** Set to `false` to disable sorting which is enabled by default.\n     * @default true\n     */",
      "comment": "Set to `false` to disable sorting which is enabled by default.",
      "tags": [
        {
          "name": "default",
          "comment": "true"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "sort": {
    "meta": {
      "all": "/** If sorting by default, set it here. Set to `asc` or `desc`. */",
      "comment": "If sorting by default, set it here. Set to `asc` or `desc`."
    },
    "type": {
      "returnType": "SortDirection"
    }
  },
  "initialSort": {
    "meta": {
      "all": "/** Same as `sort`, except only applied when creating a new column. Not applied when updating column definitions.\n     * @initial\n     */",
      "comment": "Same as `sort`, except only applied when creating a new column. Not applied when updating column definitions.",
      "tags": [
        {
          "name": "initial"
        }
      ]
    },
    "type": {
      "returnType": "SortDirection"
    }
  },
  "sortIndex": {
    "meta": {
      "all": "/** If sorting more than one column by default, specifies order in which the sorting should be applied. */",
      "comment": "If sorting more than one column by default, specifies order in which the sorting should be applied."
    },
    "type": {
      "returnType": "number | null"
    }
  },
  "initialSortIndex": {
    "meta": {
      "all": "/** Same as `sortIndex`, except only applied when creating a new column. Not applied when updating column definitions.\n     * @initial\n     */",
      "comment": "Same as `sortIndex`, except only applied when creating a new column. Not applied when updating column definitions.",
      "tags": [
        {
          "name": "initial"
        }
      ]
    },
    "type": {
      "returnType": "number"
    }
  },
  "sortingOrder": {
    "meta": {
      "all": "/**  Array defining the order in which sorting occurs (if sorting is enabled). An array with any of the following in any order `['asc','desc',null]` */",
      "comment": "Array defining the order in which sorting occurs (if sorting is enabled). An array with any of the following in any order `['asc','desc',null]`"
    },
    "type": {
      "returnType": "SortDirection[]"
    }
  },
  "comparator": {
    "meta": {
      "all": "/** Override the default sorting order by providing a custom sort comparator.\n     *\n     * - `valueA`, `valueB` are the values to compare.\n     * - `nodeA`,  `nodeB` are the corresponding RowNodes. Useful if additional details are required by the sort.\n     * - `isDescending` - `true` if sort direction is `desc`. Not to be used for inverting the return value as the grid already applies `asc` or `desc` ordering.\n     *\n     * Return:\n     *  - `0`  valueA is the same as valueB\n     *  - `> 0` Sort valueA after valueB\n     *  - `< 0` Sort valueA before valueB\n     */",
      "comment": "Override the default sorting order by providing a custom sort comparator.\n\n- `valueA`, `valueB` are the values to compare.\n- `nodeA`,  `nodeB` are the corresponding RowNodes. Useful if additional details are required by the sort.\n- `isDescending` - `true` if sort direction is `desc`. Not to be used for inverting the return value as the grid already applies `asc` or `desc` ordering.\n\nReturn:\n - `0`  valueA is the same as valueB\n - `> 0` Sort valueA after valueB\n - `< 0` Sort valueA before valueB"
    },
    "type": {
      "arguments": {
        "valueA": "TValue | null | undefined",
        "valueB": "TValue | null | undefined",
        "nodeA": "IRowNode<TData>",
        "nodeB": "IRowNode<TData>",
        "isDescending": "boolean"
      },
      "returnType": "number"
    }
  },
  "unSortIcon": {
    "meta": {
      "all": "/** Set to `true` if you want the unsorted icon to be shown when no sort is applied to this column.\n     * @default false\n     */",
      "comment": "Set to `true` if you want the unsorted icon to be shown when no sort is applied to this column.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "colSpan": {
    "meta": {
      "all": "/** By default, each cell will take up the width of one column. You can change this behaviour to allow cells to span multiple columns. */",
      "comment": "By default, each cell will take up the width of one column. You can change this behaviour to allow cells to span multiple columns."
    },
    "type": {
      "arguments": {
        "params": "ColSpanParams<TData, TValue>"
      },
      "returnType": "number"
    }
  },
  "rowSpan": {
    "meta": {
      "all": "/** By default, each cell will take up the height of one row. You can change this behaviour to allow cells to span multiple rows.\n     */",
      "comment": "By default, each cell will take up the height of one row. You can change this behaviour to allow cells to span multiple rows."
    },
    "type": {
      "arguments": {
        "params": "RowSpanParams<TData, TValue>"
      },
      "returnType": "number"
    }
  },
  "width": {
    "meta": {
      "all": "/** Initial width in pixels for the cell. */",
      "comment": "Initial width in pixels for the cell."
    },
    "type": {
      "returnType": "number"
    }
  },
  "initialWidth": {
    "meta": {
      "all": "/** Same as `width`, except only applied when creating a new column. Not applied when updating column definitions.\n     * @initial\n     */",
      "comment": "Same as `width`, except only applied when creating a new column. Not applied when updating column definitions.",
      "tags": [
        {
          "name": "initial"
        }
      ]
    },
    "type": {
      "returnType": "number"
    }
  },
  "minWidth": {
    "meta": {
      "all": "/** Minimum width in pixels for the cell. */",
      "comment": "Minimum width in pixels for the cell."
    },
    "type": {
      "returnType": "number"
    }
  },
  "maxWidth": {
    "meta": {
      "all": "/** Maximum width in pixels for the cell. */",
      "comment": "Maximum width in pixels for the cell."
    },
    "type": {
      "returnType": "number"
    }
  },
  "flex": {
    "meta": {
      "all": "/** Used instead of `width` when the goal is to fill the remaining empty space of the grid. */",
      "comment": "Used instead of `width` when the goal is to fill the remaining empty space of the grid."
    },
    "type": {
      "returnType": "number"
    }
  },
  "initialFlex": {
    "meta": {
      "all": "/** Same as `flex`, except only applied when creating a new column. Not applied when updating column definitions.\n     * @initial\n     */",
      "comment": "Same as `flex`, except only applied when creating a new column. Not applied when updating column definitions.",
      "tags": [
        {
          "name": "initial"
        }
      ]
    },
    "type": {
      "returnType": "number"
    }
  },
  "resizable": {
    "meta": {
      "all": "/** Set to `false` to disable resizing which is enabled by default.\n     * @default true\n     */",
      "comment": "Set to `false` to disable resizing which is enabled by default.",
      "tags": [
        {
          "name": "default",
          "comment": "true"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "suppressSizeToFit": {
    "meta": {
      "all": "/** Set to `true` if you want this column's width to be fixed during 'size to fit' operations.\n     * @default false\n     */",
      "comment": "Set to `true` if you want this column's width to be fixed during 'size to fit' operations.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "suppressAutoSize": {
    "meta": {
      "all": "/** Set to `true` if you do not want this column to be auto-resizable by double clicking it's edge.\n     * @default false\n     */",
      "comment": "Set to `true` if you do not want this column to be auto-resizable by double clicking it's edge.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "pivotValueColumn": {
    "meta": {
      "all": "/** Never set this, it is used internally by grid when doing in-grid pivoting */",
      "comment": "Never set this, it is used internally by grid when doing in-grid pivoting"
    },
    "type": {
      "returnType": "Column | null"
    }
  },
  "pivotTotalColumnIds": {
    "meta": {
      "all": "/** Never set this, it is used internally by grid when doing in-grid pivoting */",
      "comment": "Never set this, it is used internally by grid when doing in-grid pivoting"
    },
    "type": {
      "returnType": "string[]"
    }
  },
  "suppressSpanHeaderHeight": {
    "meta": {
      "all": "/** Set to `true` if you don't want the column header for this column to span the whole height of the header container.\n     * @default false\n     */",
      "comment": "Set to `true` if you don't want the column header for this column to span the whole height of the header container.",
      "tags": [
        {
          "name": "default",
          "comment": "false"
        }
      ]
    },
    "type": {
      "returnType": "boolean"
    }
  },
  "filter": {
    "meta": {
      "all": "/** Filter component to use for this column.\n     * - Set to `true` to use the default filter.\n     * - Set to the name of a provided filter: `agNumberColumnFilter`, `agTextColumnFilter`, `agDateColumnFilter`, `agMultiColumnFilter`, `agSetColumnFilter`.\n     * - Set to a `IFilterComp`.\n     */",
      "comment": "Filter component to use for this column.\n- Set to `true` to use the default filter.\n- Set to the name of a provided filter: `agNumberColumnFilter`, `agTextColumnFilter`, `agDateColumnFilter`, `agMultiColumnFilter`, `agSetColumnFilter`.\n- Set to a `IFilterComp`."
    },
    "type": {
      "returnType": "any"
    }
  },
  "filterParams": {
    "meta": {
      "all": "/** Params to be passed to the filter component specified in `filter`. */",
      "comment": "Params to be passed to the filter component specified in `filter`."
    },
    "type": {
      "returnType": "any"
    }
  },
  "floatingFilterComponent": {
    "meta": {
      "all": "/** The custom component to be used for rendering the floating filter.\n     * If none is specified the default AG Grid is used.\n     */",
      "comment": "The custom component to be used for rendering the floating filter.\nIf none is specified the default AG Grid is used."
    },
    "type": {
      "returnType": "any"
    }
  },
  "floatingFilterComponentParams": {
    "meta": {
      "all": "/** Params to be passed to `floatingFilterComponent`. */",
      "comment": "Params to be passed to `floatingFilterComponent`."
    },
    "type": {
      "returnType": "any"
    }
  }
}