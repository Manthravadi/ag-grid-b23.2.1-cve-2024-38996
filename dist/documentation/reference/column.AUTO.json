{
  "getUserProvidedColDef": {
    "meta": {
      "all": "/** Returns the column definition provided by the application.\n     * This may not be correct, as items can be superseded by default column options.\n     * However it's useful for comparison, eg to know which application column definition matches that column.\n     */",
      "comment": "Returns the column definition provided by the application.\nThis may not be correct, as items can be superseded by default column options.\nHowever it's useful for comparison, eg to know which application column definition matches that column."
    },
    "type": {
      "arguments": {},
      "returnType": "ColDef<any, TValue> | null"
    }
  },
  "isRowGroupDisplayed": {
    "meta": {
      "all": "/** Returns `true` if this column group is being used to display a row group value. */",
      "comment": "Returns `true` if this column group is being used to display a row group value."
    },
    "type": {
      "arguments": {
        "colId": "string"
      },
      "returnType": "boolean"
    }
  },
  "isPrimary": {
    "meta": {
      "all": "/** Returns `true` if column is a primary column, `false` if secondary. Secondary columns are used for pivoting. */",
      "comment": "Returns `true` if column is a primary column, `false` if secondary. Secondary columns are used for pivoting."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isFilterAllowed": {
    "meta": {
      "all": "/** Returns `true` if column filtering is allowed. */",
      "comment": "Returns `true` if column filtering is allowed."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isFieldContainsDots": {
    "meta": {
      "all": "/** @deprecated v32 Internal method no longer to be exposed on Column interface. */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v32 Internal method no longer to be exposed on Column interface."
        }
      ]
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isTooltipEnabled": {
    "meta": {
      "all": "/** Returns `true` if a tooltip is enabled for this column. */",
      "comment": "Returns `true` if a tooltip is enabled for this column."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isTooltipFieldContainsDots": {
    "meta": {
      "all": "/** @deprecated v32 Internal method no longer to be exposed on Column interface. */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v32 Internal method no longer to be exposed on Column interface."
        }
      ]
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "addEventListener": {
    "meta": {
      "all": "/** Add an event listener to the column. */",
      "comment": "Add an event listener to the column."
    },
    "type": {
      "arguments": {
        "eventType": "T",
        "userListener": "(params: ColumnEvent<T>) => void"
      },
      "returnType": "void"
    }
  },
  "removeEventListener": {
    "meta": {
      "all": "/** Remove event listener from the column. */",
      "comment": "Remove event listener from the column."
    },
    "type": {
      "arguments": {
        "eventType": "T",
        "userListener": "(params: ColumnEvent<T>) => void"
      },
      "returnType": "void"
    }
  },
  "isSuppressNavigable": {
    "meta": {
      "all": "/** Returns `true` if navigation is suppressed for the given column and rowNode. */",
      "comment": "Returns `true` if navigation is suppressed for the given column and rowNode."
    },
    "type": {
      "arguments": {
        "rowNode": "IRowNode"
      },
      "returnType": "boolean"
    }
  },
  "isCellEditable": {
    "meta": {
      "all": "/** Returns `true` if the cell for this column is editable for the given `rowNode`, otherwise `false`.\n     */",
      "comment": "Returns `true` if the cell for this column is editable for the given `rowNode`, otherwise `false`."
    },
    "type": {
      "arguments": {
        "rowNode": "IRowNode"
      },
      "returnType": "boolean"
    }
  },
  "isSuppressFillHandle": {
    "meta": {
      "all": "/** Returns `true` if the fill handle is suppressed. */",
      "comment": "Returns `true` if the fill handle is suppressed."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isAutoHeight": {
    "meta": {
      "all": "/** Returns `true` if the column has autoHeight enabled. */",
      "comment": "Returns `true` if the column has autoHeight enabled."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isAutoHeaderHeight": {
    "meta": {
      "all": "/** Returns `true` if the column header has autoHeight enabled. */",
      "comment": "Returns `true` if the column header has autoHeight enabled."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isRowDrag": {
    "meta": {
      "all": "/** Returns `true` if this column and row node can be dragged. */",
      "comment": "Returns `true` if this column and row node can be dragged."
    },
    "type": {
      "arguments": {
        "rowNode": "IRowNode"
      },
      "returnType": "boolean"
    }
  },
  "isDndSource": {
    "meta": {
      "all": "/** Returns `true` if this column and row node allows dragging for native drag and drop. */",
      "comment": "Returns `true` if this column and row node allows dragging for native drag and drop."
    },
    "type": {
      "arguments": {
        "rowNode": "IRowNode"
      },
      "returnType": "boolean"
    }
  },
  "isCellCheckboxSelection": {
    "meta": {
      "all": "/** Returns `true` if this column and row node has checkbox selection. */",
      "comment": "Returns `true` if this column and row node has checkbox selection."
    },
    "type": {
      "arguments": {
        "rowNode": "IRowNode"
      },
      "returnType": "boolean"
    }
  },
  "isSuppressPaste": {
    "meta": {
      "all": "/** Returns `true` if paste is suppress for this column and row node. */",
      "comment": "Returns `true` if paste is suppress for this column and row node."
    },
    "type": {
      "arguments": {
        "rowNode": "IRowNode"
      },
      "returnType": "boolean"
    }
  },
  "isMenuVisible": {
    "meta": {
      "all": "/** Returns `true` if a menu is visible for this column. */",
      "comment": "Returns `true` if a menu is visible for this column."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "getSort": {
    "meta": {
      "all": "/** If sorting is active, returns the sort direction e.g. `'asc'` or `'desc'`. */",
      "comment": "If sorting is active, returns the sort direction e.g. `'asc'` or `'desc'`."
    },
    "type": {
      "arguments": {},
      "returnType": "SortDirection | undefined"
    }
  },
  "isSortable": {
    "meta": {
      "all": "/** Returns `true` if sorting is enabled for this column via the `sortable` property. */",
      "comment": "Returns `true` if sorting is enabled for this column via the `sortable` property."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isSortAscending": {
    "meta": {
      "all": "/** @deprecated v32 use col.getSort() === 'asc */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v32 use col.getSort() === 'asc"
        }
      ]
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isSortDescending": {
    "meta": {
      "all": "/** @deprecated v32 use col.getSort() === 'desc */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v32 use col.getSort() === 'desc"
        }
      ]
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isSortNone": {
    "meta": {
      "all": "/** @deprecated v32 use col.getSort() === undefined */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v32 use col.getSort() === undefined"
        }
      ]
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isSorting": {
    "meta": {
      "all": "/** @deprecated v32 use col.getSort() !== undefined */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v32 use col.getSort() !== undefined"
        }
      ]
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "getSortIndex": {
    "meta": {
      "all": "/** Returns the sort index for this column. */",
      "comment": "Returns the sort index for this column."
    },
    "type": {
      "arguments": {},
      "returnType": "number | null | undefined"
    }
  },
  "getAggFunc": {
    "meta": {
      "all": "/** If aggregation is set for the column, returns the aggregation function. */",
      "comment": "If aggregation is set for the column, returns the aggregation function."
    },
    "type": {
      "arguments": {},
      "returnType": "string | IAggFunc | null | undefined"
    }
  },
  "getRight": {
    "meta": {
      "all": "/** @deprecated v32 Use col.getLeft() + col.getActualWidth() instead. */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v32 Use col.getLeft() + col.getActualWidth() instead."
        }
      ]
    },
    "type": {
      "arguments": {},
      "returnType": "number"
    }
  },
  "isFilterActive": {
    "meta": {
      "all": "/** Returns `true` if filter is active on the column. */",
      "comment": "Returns `true` if filter is active on the column."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isHovered": {
    "meta": {
      "all": "/** Returns `true` when this `Column` is hovered, otherwise `false` */",
      "comment": "Returns `true` when this `Column` is hovered, otherwise `false`"
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isFirstRightPinned": {
    "meta": {
      "all": "/** Returns `true` if this column is the first right pinned column. */",
      "comment": "Returns `true` if this column is the first right pinned column."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isLastLeftPinned": {
    "meta": {
      "all": "/** Returns `true` if this column is the last left pinned column. */",
      "comment": "Returns `true` if this column is the last left pinned column."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isPinned": {
    "meta": {
      "all": "/** Returns `true` if this column is pinned either left of right. */",
      "comment": "Returns `true` if this column is pinned either left of right."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isPinnedLeft": {
    "meta": {
      "all": "/** Returns `true` if this column is pinned left. */",
      "comment": "Returns `true` if this column is pinned left."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isPinnedRight": {
    "meta": {
      "all": "/** Returns `true` if this column is pinned right. */",
      "comment": "Returns `true` if this column is pinned right."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isSpanHeaderHeight": {
    "meta": {
      "all": "/** Returns `true` if this column spans the header height. */",
      "comment": "Returns `true` if this column spans the header height."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "getColumnGroupPaddingInfo": {
    "meta": {
      "all": "/** Returns column group padding info. */",
      "comment": "Returns column group padding info."
    },
    "type": {
      "arguments": {},
      "returnType": "{ numberOfParents: number; isSpanningTotal: boolean }"
    }
  },
  "getColDef": {
    "meta": {
      "all": "/** Returns the column definition for this column.\n     * The column definition will be the result of merging the application provided column definition with any provided defaults\n     * (e.g. `defaultColDef` grid option, or column types.\n     *\n     * Equivalent: `getDefinition` */",
      "comment": "Returns the column definition for this column.\nThe column definition will be the result of merging the application provided column definition with any provided defaults\n(e.g. `defaultColDef` grid option, or column types.\n\nEquivalent: `getDefinition`"
    },
    "type": {
      "arguments": {},
      "returnType": "ColDef<any, TValue>"
    }
  },
  "getColId": {
    "meta": {
      "all": "/** Returns the unique ID for the column.\n     *\n     * Equivalent: `getId`, `getUniqueId` */",
      "comment": "Returns the unique ID for the column.\n\nEquivalent: `getId`, `getUniqueId`"
    },
    "type": {
      "arguments": {},
      "returnType": "string"
    }
  },
  "getAutoHeaderHeight": {
    "meta": {
      "all": "/** Returns the auto header height. */",
      "comment": "Returns the auto header height."
    },
    "type": {
      "arguments": {},
      "returnType": "number | null"
    }
  },
  "getColSpan": {
    "meta": {
      "all": "/** Returns the column span for this column and row node. */",
      "comment": "Returns the column span for this column and row node."
    },
    "type": {
      "arguments": {
        "rowNode": "IRowNode"
      },
      "returnType": "number"
    }
  },
  "getRowSpan": {
    "meta": {
      "all": "/** Returns the row span for this column and row node. */",
      "comment": "Returns the row span for this column and row node."
    },
    "type": {
      "arguments": {
        "rowNode": "IRowNode"
      },
      "returnType": "number"
    }
  },
  "isGreaterThanMax": {
    "meta": {
      "all": "/** @deprecated v32 Internal method no longer to be exposed on Column interface. */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v32 Internal method no longer to be exposed on Column interface."
        }
      ]
    },
    "type": {
      "arguments": {
        "width": "number"
      },
      "returnType": "boolean"
    }
  },
  "getMaxWidth": {
    "meta": {
      "all": "/** Returns the max width for the column. */",
      "comment": "Returns the max width for the column."
    },
    "type": {
      "arguments": {},
      "returnType": "number"
    }
  },
  "getFlex": {
    "meta": {
      "all": "/** Returns the `flex` value of the column or 0 if not set.  */",
      "comment": "Returns the `flex` value of the column or 0 if not set."
    },
    "type": {
      "arguments": {},
      "returnType": "number"
    }
  },
  "isRowGroupActive": {
    "meta": {
      "all": "/** Returns `true` if row group is currently active for this column. */",
      "comment": "Returns `true` if row group is currently active for this column."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isPivotActive": {
    "meta": {
      "all": "/** Returns `true` if pivot is currently active for this column. */",
      "comment": "Returns `true` if pivot is currently active for this column."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isAnyFunctionActive": {
    "meta": {
      "all": "/** @deprecated v32 Internal method no longer to be exposed on Column interface. */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v32 Internal method no longer to be exposed on Column interface."
        }
      ]
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isAnyFunctionAllowed": {
    "meta": {
      "all": "/** @deprecated v32 Internal method no longer to be exposed on Column interface. */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v32 Internal method no longer to be exposed on Column interface."
        }
      ]
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isValueActive": {
    "meta": {
      "all": "/** Returns `true` if value (aggregation) is currently active for this column. */",
      "comment": "Returns `true` if value (aggregation) is currently active for this column."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isAllowPivot": {
    "meta": {
      "all": "/** Returns `true` if pivoting is allowed for this column */",
      "comment": "Returns `true` if pivoting is allowed for this column"
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isAllowValue": {
    "meta": {
      "all": "/** Returns `true` if this column can be used as a value column. */",
      "comment": "Returns `true` if this column can be used as a value column."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isAllowRowGroup": {
    "meta": {
      "all": "/** Returns `true` if this column can be used as a row group column. */",
      "comment": "Returns `true` if this column can be used as a row group column."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isColumn": {
    "meta": {
      "all": "/** isColumn is always `true`. Used to distinguish between columns and column groups.  */",
      "comment": "isColumn is always `true`. Used to distinguish between columns and column groups."
    },
    "type": {
      "returnType": "true"
    }
  },
  "getUniqueId": {
    "meta": {
      "all": "/** Returns the unique ID for the column.\n     *\n     */",
      "comment": "Returns the unique ID for the column."
    },
    "type": {
      "arguments": {},
      "returnType": "HeaderColumnId"
    }
  },
  "getActualWidth": {
    "meta": {
      "all": "/** Returns the current width of the column. If the column is resized, the actual width is the new size. */",
      "comment": "Returns the current width of the column. If the column is resized, the actual width is the new size."
    },
    "type": {
      "arguments": {},
      "returnType": "number"
    }
  },
  "getMinWidth": {
    "meta": {
      "all": "/** Returns the minWidth of the column or the default min width. */",
      "comment": "Returns the minWidth of the column or the default min width."
    },
    "type": {
      "arguments": {},
      "returnType": "number"
    }
  },
  "getLeft": {
    "meta": {
      "all": "/** Returns the left position of the column. */",
      "comment": "Returns the left position of the column."
    },
    "type": {
      "arguments": {},
      "returnType": "number | null"
    }
  },
  "getDefinition": {
    "meta": {
      "all": "/** Returns the underlying definition. */",
      "comment": "Returns the underlying definition."
    },
    "type": {
      "arguments": {},
      "returnType": "AbstractColDef<any, TValue> | null"
    }
  },
  "getColumnGroupShow": {
    "meta": {
      "all": "/** Returns whether this column should be shown when the group is open / closed or undefined if its always shown. */",
      "comment": "Returns whether this column should be shown when the group is open / closed or undefined if its always shown."
    },
    "type": {
      "arguments": {},
      "returnType": "ColumnGroupShowType | undefined"
    }
  },
  "getParent": {
    "meta": {
      "all": "/** Returns the parent column group, if column grouping is active. */",
      "comment": "Returns the parent column group, if column grouping is active."
    },
    "type": {
      "arguments": {},
      "returnType": "ColumnGroup | null"
    }
  },
  "isResizable": {
    "meta": {
      "all": "/** Returns `true` if this group is resizable. */",
      "comment": "Returns `true` if this group is resizable."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isEmptyGroup": {
    "meta": {
      "all": "/** Returns `true` if this is an empty group. */",
      "comment": "Returns `true` if this is an empty group."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "isMoving": {
    "meta": {
      "all": "/** Returns `true` while the column is being moved. */",
      "comment": "Returns `true` while the column is being moved."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "getPinned": {
    "meta": {
      "all": "/** Returns the pinned state of the column. */",
      "comment": "Returns the pinned state of the column."
    },
    "type": {
      "arguments": {},
      "returnType": "ColumnPinnedType"
    }
  },
  "isVisible": {
    "meta": {
      "all": "/** Returns `true` if the column is visible. */",
      "comment": "Returns `true` if the column is visible."
    },
    "type": {
      "arguments": {},
      "returnType": "boolean"
    }
  },
  "getInstanceId": {
    "meta": {
      "all": "/** @deprecated v32 Internal method no longer to be exposed on Column interface. */",
      "tags": [
        {
          "name": "deprecated",
          "comment": "v32 Internal method no longer to be exposed on Column interface."
        }
      ]
    },
    "type": {
      "arguments": {},
      "returnType": "ColumnInstanceId"
    }
  },
  "getId": {
    "meta": {
      "all": "/** Returns the unique ID for the column. */",
      "comment": "Returns the unique ID for the column."
    },
    "type": {
      "arguments": {},
      "returnType": "string"
    }
  }
}