{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":[],"files":{"data.js":"function getData() {\n    const rowData = [\n        { country: 'Ireland', state: null, city: 'Dublin' },\n        { country: 'Ireland', state: null, city: 'Galway' },\n        { country: 'Ireland', state: null, city: 'Cork' },\n\n        { country: 'United Kingdom', state: null, city: 'London' },\n        { country: 'United Kingdom', state: null, city: 'Manchester' },\n        { country: 'United Kingdom', state: null, city: 'Liverpool' },\n\n        { country: 'USA', state: 'New York', city: 'New York' },\n        { country: 'USA', state: 'New York', city: 'Albany' },\n        { country: 'USA', state: 'New York', city: 'Onondaga' },\n        { country: 'USA', state: 'New York', city: 'Westchester' },\n\n        { country: 'USA', state: 'California', city: 'San Diego' },\n        { country: 'USA', state: 'California', city: 'San Francisco' },\n    ];\n\n    rowData.forEach(function (item, i) {\n        item.val1 = ((i + 13) * 17 * 33) % 1000;\n        item.val2 = ((i + 23) * 17 * 33) % 1000;\n    });\n    return rowData;\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n    columnDefs: [\n        { field: 'city', type: 'dimension', cellRenderer: cityCellRenderer },\n        {\n            field: 'country',\n            type: 'dimension',\n            cellRenderer: countryCellRenderer,\n            minWidth: 200,\n        },\n        {\n            field: 'state',\n            type: 'dimension',\n            rowGroup: true,\n        },\n        { field: 'val1', type: 'numberValue' },\n        { field: 'val2', type: 'numberValue' },\n    ],\n    defaultColDef: {\n        flex: 1,\n        minWidth: 150,\n    },\n    autoGroupColumnDef: {\n        field: 'city',\n        minWidth: 200,\n    },\n    columnTypes: {\n        numberValue: {\n            enableValue: true,\n            aggFunc: 'sum',\n            editable: true,\n            valueParser: numberParser,\n        },\n        dimension: {\n            enableRowGroup: true,\n            enablePivot: true,\n        },\n    },\n    rowData: getData(),\n    groupDefaultExpanded: -1,\n    rowGroupPanelShow: 'always',\n};\n\nconst COUNTRY_CODES = {\n    Ireland: 'ie',\n    'United Kingdom': 'gb',\n    USA: 'us',\n};\n\nfunction numberParser(params) {\n    return parseInt(params.newValue);\n}\n\nfunction countryCellRenderer(params) {\n    if (params.value === undefined || params.value === null) {\n        return '';\n    } else {\n        const flag =\n            '<img border=\"0\" width=\"15\" height=\"10\" src=\"https://flagcdn.com/h20/' +\n            COUNTRY_CODES[params.value] +\n            '.png\">';\n        return flag + ' ' + params.value;\n    }\n}\n\nfunction cityCellRenderer(params) {\n    if (params.value === undefined || params.value === null) {\n        return '';\n    } else {\n        const flag =\n            '<img border=\"0\" width=\"15\" height=\"10\" src=\"https://www.ag-grid.com/example-assets/weather/sun.png\">';\n        return flag + ' ' + params.value;\n    }\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', function () {\n    const gridDiv = document.querySelector('#myGrid');\n    gridApi = agGrid.createGrid(gridDiv, gridOptions); \n});\n","index.html":"<div id=\"myGrid\" style=\"height: 98%\" class=\"ag-theme-quartz\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}}}