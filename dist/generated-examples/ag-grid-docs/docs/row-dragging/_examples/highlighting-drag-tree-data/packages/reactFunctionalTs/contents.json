{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"index.tsx","mainFileName":"index.tsx","styleFiles":[],"files":{"style.css":".fa-folder {\n    color: darkorange;\n}\n\n.fa-file-pdf {\n    color: red;\n}\n\n.fa-file-excel {\n    color: green;\n}\n\n.fa-file-audio {\n    color: blue;\n}\n\n.filename {\n    padding: 5px;\n    color: var(--ag-foreground-color);\n    font-size: 16px;\n    font-family: 'Courier New', Courier, monospace;\n    font-weight: normal;\n}\n\n.hover-over {\n    background-color: #e5e5ff;\n}\n","data.tsx":"export function getData(): any[] {\n    return [\n        { id: 1, filePath: ['Documents'], type: 'folder' },\n        { id: 2, filePath: ['Documents', 'txt'], type: 'folder' },\n        {\n            id: 3,\n            filePath: ['Documents', 'txt', 'notes.txt'],\n            type: 'file',\n            dateModified: 'May 21 2017 01:50:00 PM',\n            size: 14.7,\n        },\n        { id: 4, filePath: ['Documents', 'pdf'], type: 'folder' },\n        {\n            id: 5,\n            filePath: ['Documents', 'pdf', 'book.pdf'],\n            type: 'file',\n            dateModified: 'May 20 2017 01:50:00 PM',\n            size: 2.1,\n        },\n        {\n            id: 6,\n            filePath: ['Documents', 'pdf', 'cv.pdf'],\n            type: 'file',\n            dateModified: 'May 20 2016 11:50:00 PM',\n            size: 2.4,\n        },\n        { id: 7, filePath: ['Documents', 'xls'], type: 'folder' },\n        {\n            id: 8,\n            filePath: ['Documents', 'xls', 'accounts.xls'],\n            type: 'file',\n            dateModified: 'Aug 12 2016 10:50:00 AM',\n            size: 4.3,\n        },\n        { id: 9, filePath: ['Documents', 'stuff'], type: 'folder' },\n        {\n            id: 10,\n            filePath: ['Documents', 'stuff', 'xyz.txt'],\n            type: 'file',\n            dateModified: 'Jan 17 2016 08:03:00 PM',\n            size: 1.1,\n        },\n        { id: 11, filePath: ['Music'], type: 'folder' },\n        { id: 12, filePath: ['Music', 'mp3'], type: 'folder' },\n        {\n            id: 13,\n            filePath: ['Music', 'mp3', 'theme.mp3'],\n            type: 'file',\n            dateModified: 'Sep 11 2016 08:03:00 PM',\n            size: 14.3,\n        },\n        { id: 14, filePath: ['Misc'], type: 'folder' },\n        {\n            id: 15,\n            filePath: ['Misc', 'temp.txt'],\n            type: 'file',\n            dateModified: 'Aug 12 2016 10:50:00 PM',\n            size: 101,\n        },\n    ];\n}\n","index.tsx":"\n'use strict';\n\nimport React, { useCallback, useMemo, useRef, useState, StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/styles/ag-grid.css';\nimport 'ag-grid-community/styles/ag-theme-quartz.css';\nimport './style.css';\nimport { CellClassParams, ColDef, ColGroupDef, GetDataPath, GetRowIdFunc, GetRowIdParams, GridApi, GridOptions, ICellRendererParams, IRowNode, RefreshCellsParams, RowDragEndEvent, RowDragLeaveEvent, RowDragMoveEvent, ValueFormatterParams, createGrid } from 'ag-grid-community';\nimport { getData } from './data';\nimport 'ag-grid-charts-enterprise';\n\n\n\n\nvar valueFormatter = function (params: ValueFormatterParams) {\n    return params.value ? params.value + ' MB' : '';\n};\n\nvar cellClassRules = {\n    'hover-over': (params: CellClassParams) => {\n        return params.node === potentialParent;\n    },\n};\n\nvar potentialParent: any = null;\n\nfunction moveToPath(newParentPath: string[], node: IRowNode, allUpdatedNodes: any[]) {\n    // last part of the file path is the file name\n    var oldPath = node.data.filePath;\n    var fileName = oldPath[oldPath.length - 1];\n    var newChildPath = newParentPath.slice();\n    newChildPath.push(fileName);\n    node.data.filePath = newChildPath;\n    allUpdatedNodes.push(node.data);\n    if (node.childrenAfterGroup) {\n        node.childrenAfterGroup.forEach((childNode) => {\n            moveToPath(newChildPath, childNode, allUpdatedNodes);\n        });\n    }\n}\n\nfunction isSelectionParentOfTarget(selectedNode: IRowNode, targetNode: any) {\n    var children = selectedNode.childrenAfterGroup || [];\n    for (var i = 0; i < children.length; i++) {\n        if (targetNode && children[i].key === targetNode.key)\n            return true;\n        isSelectionParentOfTarget(children[i], targetNode);\n    }\n    return false;\n}\n\nfunction arePathsEqual(path1: string[], path2: string[]) {\n    if (path1.length !== path2.length) {\n        return false;\n    }\n    var equal = true;\n    path1.forEach(function (item, index) {\n        if (path2[index] !== item) {\n            equal = false;\n        }\n    });\n    return equal;\n}\n\nfunction setPotentialParentForNode(api: GridApi, overNode: IRowNode | undefined | null) {\n    var newPotentialParent;\n    if (overNode) {\n        newPotentialParent =\n            overNode.data.type === 'folder'\n                ? // if over a folder, we take the immediate row\n                    overNode\n                : // if over a file, we take the parent row (which will be a folder)\n                    overNode.parent;\n    }\n    else {\n        newPotentialParent = null;\n    }\n    var alreadySelected = potentialParent === newPotentialParent;\n    if (alreadySelected) {\n        return;\n    }\n    // we refresh the previous selection (if it exists) to clear\n    // the highlighted and then the new selection.\n    var rowsToRefresh = [];\n    if (potentialParent) {\n        rowsToRefresh.push(potentialParent);\n    }\n    if (newPotentialParent) {\n        rowsToRefresh.push(newPotentialParent);\n    }\n    potentialParent = newPotentialParent;\n    refreshRows(api, rowsToRefresh);\n}\n\nfunction refreshRows(api: GridApi, rowsToRefresh: IRowNode[]) {\n    var params: RefreshCellsParams = {\n        // refresh these rows only.\n        rowNodes: rowsToRefresh,\n        // because the grid does change detection, the refresh\n        // will not happen because the underlying value has not\n        // changed. to get around this, we force the refresh,\n        // which skips change detection.\n        force: true,\n    };\n    api.refreshCells(params);\n}\n\nclass FileCellRenderer {\n    private eGui!: any;\n\n    init(params: ICellRendererParams) {\n        var tempDiv = document.createElement('div');\n        var value = params.value;\n        var icon = this.getFileIcon(params.value);\n        tempDiv.innerHTML = icon ? '<i class=\"' + icon + '\"/>' + '<span class=\"filename\">' + value + '</span>' : value;\n        this.eGui = tempDiv.firstChild!;\n    }\n    getGui() {\n        return this.eGui;\n    }\n\n    getFileIcon(filename: string) {\n        return filename.endsWith('.mp3') || filename.endsWith('.wav')\n            ? 'far fa-file-audio'\n            : filename.endsWith('.xls')\n              ? 'far fa-file-excel'\n              : filename.endsWith('.txt')\n                ? 'far fa-file'\n                : filename.endsWith('.pdf')\n                  ? 'far fa-file-pdf'\n                  : 'far fa-folder';\n    }\n}\n\nconst GridExample = () => {\n    const gridRef = useRef<AgGridReact>(null);\n    const containerStyle = useMemo(() => ({ width: '100%', height: '100%' }), []);\n    const gridStyle = useMemo(() => ({height: '100%', width: '100%'}), []);\n    const [rowData, setRowData] = useState<any[]>(getData());\n    const [columnDefs, setColumnDefs] = useState<ColDef[]>([\n    {\n        field: 'dateModified',\n        cellClassRules: cellClassRules,\n    },\n    {\n        field: 'size',\n        valueFormatter: valueFormatter,\n        cellClassRules: cellClassRules,\n    },\n]);\n    const defaultColDef = useMemo<ColDef>(() => { return {\n    flex: 1,\n} }, []);\n    const getDataPath = useCallback((data: any) => {\n    return data.filePath;\n}, []);\n    const getRowId = useCallback((params: GetRowIdParams) => {\n    return String(params.data.id);\n}, []);\n    const autoGroupColumnDef = useMemo<ColDef>(() => { return {\n    rowDrag: true,\n    headerName: 'Files',\n    minWidth: 300,\n    cellRendererParams: {\n        suppressCount: true,\n        innerRenderer: FileCellRenderer,\n    },\n    cellClassRules: {\n        'hover-over': (params) => {\n            return params.node === potentialParent;\n        },\n    },\n} }, []);\n\n\n\nconst onRowDragMove = useCallback((event: RowDragMoveEvent)   =>{\n    setPotentialParentForNode(event.api, event.overNode);\n}, [])\n\n   const onRowDragLeave = useCallback((event: RowDragLeaveEvent)   =>{\n    // clear node to highlight\n    setPotentialParentForNode(event.api, null);\n}, [])\n\n   const onRowDragEnd = useCallback((event: RowDragEndEvent)   =>{\n    if (!potentialParent) {\n        return;\n    }\n    var movingData = event.node.data;\n    // take new parent path from parent, if data is missing, means it's the root node,\n    // which has no data.\n    var newParentPath = potentialParent.data ? potentialParent.data.filePath : [];\n    var needToChangeParent = !arePathsEqual(newParentPath, movingData.filePath);\n    // check we are not moving a folder into a child folder\n    var invalidMode = isSelectionParentOfTarget(event.node, potentialParent);\n    if (invalidMode) {\n        console.log('invalid move');\n    }\n    if (needToChangeParent && !invalidMode) {\n        var updatedRows: any[] = [];\n        moveToPath(newParentPath, event.node, updatedRows);\n        gridRef.current!.api.applyTransaction({\n            update: updatedRows,\n        });\n        gridRef.current!.api.clearFocusedCell();\n    }\n    // clear node to highlight\n    setPotentialParentForNode(event.api, null);\n}, [potentialParent])\n\n    return  (\n            <div style={containerStyle}>\n                \n        <div  style={gridStyle} className={/** DARK MODE START **/document.documentElement?.dataset.defaultTheme || 'ag-theme-quartz'/** DARK MODE END **/}>\n            <AgGridReact\n                ref={gridRef}\n                rowData={rowData}\ncolumnDefs={columnDefs}\ndefaultColDef={defaultColDef}\ntreeData={true}\ngroupDefaultExpanded={-1}\ngetDataPath={getDataPath}\ngetRowId={getRowId}\nautoGroupColumnDef={autoGroupColumnDef}\nonRowDragMove={onRowDragMove}\nonRowDragLeave={onRowDragLeave}\nonRowDragEnd={onRowDragEnd}\n            />\n        </div>\n\n            </div>\n        );\n\n}\n\nconst root = createRoot(document.getElementById('root')!);\nroot.render(<StrictMode><GridExample /></StrictMode>);\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\" class=\"ag-theme-quartz\"></div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.dev.js":"(function (global) {\n    var sjsPaths = {};\n    if (typeof systemJsPaths !== 'undefined') {\n        sjsPaths = systemJsPaths;\n    }\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...sjsPaths,\n        },\n        map: {\n            // css: boilerplatePath + \"css.js\",\n            css: 'npm:systemjs-plugin-css@0.1.37/css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.development.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.development.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.tsx',\n                defaultExtension: 'tsx',\n            },\n            '@ag-grid-community/react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-locale': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n            },\n            '@ag-grid-enterprise/clipboard': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-enterprise-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.tsx',\n                defaultExtension: 'tsx',\n            },\n            '@ag-grid-community/react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                format: 'cjs',\n            },\n            'ag-grid-locale': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/clipboard': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-packages","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","ag-grid-react":"^31.3.1","ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}},"extras":["fontawesome"]}