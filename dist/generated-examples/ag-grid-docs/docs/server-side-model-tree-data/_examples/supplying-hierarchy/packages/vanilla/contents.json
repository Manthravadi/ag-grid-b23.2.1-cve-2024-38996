{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"const columnDefs = [\n    { field: 'employeeId', hide: true },\n    { field: 'employeeName', hide: true },\n    { field: 'jobTitle' },\n    { field: 'employmentType' },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n    defaultColDef: {\n        width: 240,\n        flex: 1,\n        sortable: false,\n    },\n    autoGroupColumnDef: {\n        field: 'employeeName',\n        cellRendererParams: {\n            innerRenderer: (params) => {\n                // display employeeName rather than group key (employeeId)\n                return params.data.employeeName;\n            },\n        },\n    },\n    rowModelType: 'serverSide',\n    treeData: true,\n    columnDefs: columnDefs,\n    isServerSideGroupOpenByDefault: (params) => {\n        // open first two levels by default\n        return params.rowNode.level < 2;\n    },\n    isServerSideGroup: (dataItem) => {\n        // indicate if node is a group\n        return !!dataItem.underlings;\n    },\n    getServerSideGroupKey: (dataItem) => {\n        // specify which group key to use\n        return dataItem.employeeId;\n    },\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', function () {\n    var gridDiv = document.querySelector('#myGrid');\n    gridApi = agGrid.createGrid(gridDiv, gridOptions); \n\n    fetch('https://www.ag-grid.com/example-assets/tree-data.json')\n        .then((response) => response.json())\n        .then(function (data) {\n            var datasource = createServerSideDatasource(data);\n            gridApi.setGridOption('serverSideDatasource', datasource);\n\n            function createServerSideDatasource(data) {\n                const dataSource = {\n                    getRows: (params) => {\n                        console.log('ServerSideDatasource.getRows: params = ', params);\n\n                        const request = params.request;\n                        if (request.groupKeys.length) {\n                            // this example doesn't need to support lower levels.\n                            params.fail();\n                            return;\n                        }\n\n                        const result = {\n                            rowData: data.slice(request.startRow, request.endRow),\n                        };\n                        console.log('getRows: result = ', result);\n                        setTimeout(() => {\n                            params.success(result);\n\n                            const recursivelyPopulateHierarchy = (route, node) => {\n                                if (node.underlings) {\n                                    gridApi.applyServerSideRowData({\n                                        route,\n                                        successParams: {\n                                            rowData: node.underlings,\n                                            rowCount: node.underlings.length,\n                                        },\n                                    });\n                                    node.underlings.forEach((child) => {\n                                        recursivelyPopulateHierarchy([...route, child.employeeId], child);\n                                    });\n                                }\n                            };\n                            result.rowData.forEach((topLevelNode) => {\n                                recursivelyPopulateHierarchy([topLevelNode.employeeId], topLevelNode);\n                            });\n                        }, 200);\n                    },\n                };\n\n                return dataSource;\n            }\n        });\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\" class=\"ag-theme-quartz\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}}}