{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"const columnDefs = [\n    { field: 'country', rowGroup: true, hide: true },\n    { field: 'year', rowGroup: true, hide: true },\n    {\n        headerName: 'age using avgAggFunction()',\n        field: 'age',\n        aggFunc: avgAggFunction,\n        enableValue: true,\n        minWidth: 250,\n    },\n    {\n        headerName: 'age using simpleAvg()',\n        field: 'age',\n        aggFunc: simpleAvg,\n        enableValue: true,\n        minWidth: 250,\n    },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n    columnDefs: columnDefs,\n    autoGroupColumnDef: {\n        field: 'athlete',\n        minWidth: 350,\n    },\n    suppressAggFuncInHeader: true,\n};\n\nfunction simpleAvg(params) {\n    const values = params.values;\n    const sum = values.reduce((a, b) => a + b, 0);\n    return sum / values.length;\n}\n\n// the average function is tricky as the multiple levels require weighted averages\n// for the non-leaf node aggregations.\nfunction avgAggFunction(params) {\n    // the average will be the sum / count\n    let sum = 0;\n    let count = 0;\n\n    params.values.forEach((value) => {\n        const groupNode = value !== null && value !== undefined && typeof value === 'object';\n        if (groupNode) {\n            // we are aggregating groups, so we take the\n            // aggregated values to calculated a weighted average\n            sum += value.sum;\n            count += value.count;\n        } else {\n            // skip values that are not numbers (ie skip empty values)\n            if (typeof value === 'number') {\n                sum += value;\n                count++;\n            }\n        }\n    });\n\n    // avoid divide by zero error\n    let avg = null;\n    if (count !== 0) {\n        avg = sum / count;\n    }\n\n    // the result will be an object. when this cell is rendered, only the avg is shown.\n    // however when this cell is part of another aggregation, the count is also needed\n    // to create a weighted average for the next level.\n    const result = {\n        sum: sum,\n        count: count,\n        value: avg,\n    };\n\n    return result;\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', () => {\n    const gridDiv = document.querySelector('#myGrid');\n    gridApi = agGrid.createGrid(gridDiv, gridOptions); \n\n    fetch('https://www.ag-grid.com/example-assets/olympic-winners.json')\n        .then((response) => response.json())\n        .then((data) => gridApi.setGridOption('rowData', data));\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\" class=\"ag-theme-quartz\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}}}