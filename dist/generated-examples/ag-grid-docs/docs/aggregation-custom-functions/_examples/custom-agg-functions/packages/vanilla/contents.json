{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"const columnDefs = [\n    { field: 'country', rowGroup: true, hide: true },\n    { field: 'year', rowGroup: true, hide: true },\n\n    // this column uses min and max func\n    { headerName: 'minMax(age)', field: 'age', aggFunc: minAndMaxAggFunction },\n    // here we use an average func and specify the function directly\n    {\n        headerName: 'avg(age)',\n        field: 'age',\n        aggFunc: avgAggFunction,\n        enableValue: true,\n        minWidth: 200,\n    },\n    {\n        headerName: 'roundedAvg(age)',\n        field: 'age',\n        aggFunc: roundedAvgAggFunction,\n        enableValue: true,\n        minWidth: 200,\n    },\n    // here we use a custom sum function that was registered with the grid,\n    // which overrides the built in sum function\n    {\n        headerName: 'sum(gold)',\n        field: 'gold',\n        aggFunc: 'sum',\n        enableValue: true,\n    },\n    // and these two use the built in sum func\n    {\n        headerName: 'abc(silver)',\n        field: 'silver',\n        aggFunc: '123',\n        enableValue: true,\n    },\n    {\n        headerName: 'xyz(bronze)',\n        field: 'bronze',\n        aggFunc: 'xyz',\n        enableValue: true,\n    },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n    columnDefs: columnDefs,\n    defaultColDef: {\n        flex: 1,\n        minWidth: 150,\n        filter: true,\n    },\n    autoGroupColumnDef: {\n        headerName: 'Athlete',\n        field: 'athlete',\n        minWidth: 250,\n    },\n    suppressAggFuncInHeader: true,\n    aggFuncs: {\n        // this overrides the grids built in sum function\n        sum: sumFunction,\n        // this adds another function called 'abc'\n        '123': oneTwoThreeFunc,\n        // and again xyz\n        xyz: xyzFunc,\n    },\n    sideBar: true,\n    onGridReady: (params) => {\n        // we could also register functions after the grid is created,\n        // however because we are providing the columns in the grid options,\n        // it will be to late (eg remove 'xyz' from aggFuncs, and you will\n        // see the grid complains).\n        params.api.addAggFuncs({ xyz: xyzFunc });\n    },\n};\n\nfunction oneTwoThreeFunc(params) {\n    // this is just an example, rather than working out an aggregation,\n    // we just return 123 each time, so you can see in the example 22 is the result\n    return 123;\n}\n\nfunction xyzFunc(params) {\n    // this is just an example, rather than working out an aggregation,\n    // we just return 22 each time, so you can see in the example 22 is the result\n    return 'xyz';\n}\n\n// sum function has no advantage over the built in sum function.\n// it's shown here as it's the simplest form of aggregation and\n// showing it can be good as a starting point for understanding\n// hwo the aggregation functions work.\nfunction sumFunction(params) {\n    let result = 0;\n    params.values.forEach((value) => {\n        if (typeof value === 'number') {\n            result += value;\n        }\n    });\n    return result;\n}\n\n// min and max agg function. the leaf nodes are just numbers, like any other\n// value. however the function returns an object with min and max, thus the group\n// nodes all have these objects.\nfunction minAndMaxAggFunction(params) {\n    // this is what we will return\n    const result = {\n        min: null,\n        max: null,\n        // because we are returning back an object, this would get rendered as [Object,Object]\n        // in the browser. we could get around this by providing a valueFormatter, OR we could\n        // get around it in a customer cellRenderer, however this is a trick that will also work\n        // with clipboard.\n        toString: function () {\n            return '(' + this.min + '..' + this.max + ')';\n        },\n    };\n    // update the result based on each value\n    params.values.forEach((value) => {\n        const groupNode = value !== null && value !== undefined && typeof value === 'object';\n\n        const minValue = groupNode ? value.min : value;\n        const maxValue = groupNode ? value.max : value;\n\n        // value is a number, not a 'result' object,\n        // so this must be the first group\n        result.min = min(minValue, result.min);\n        result.max = max(maxValue, result.max);\n    });\n\n    return result;\n}\n\n// the average function is tricky as the multiple levels require weighted averages\n// for the non-leaf node aggregations.\nfunction avgAggFunction(params) {\n    // the average will be the sum / count\n    let sum = 0;\n    let count = 0;\n\n    params.values.forEach((value) => {\n        const groupNode = value !== null && value !== undefined && typeof value === 'object';\n        if (groupNode) {\n            // we are aggregating groups, so we take the\n            // aggregated values to calculated a weighted average\n            sum += value.avg * value.count;\n            count += value.count;\n        } else {\n            // skip values that are not numbers (ie skip empty values)\n            if (typeof value === 'number') {\n                sum += value;\n                count++;\n            }\n        }\n    });\n\n    // avoid divide by zero error\n    let avg = null;\n    if (count !== 0) {\n        avg = sum / count;\n    }\n\n    // the result will be an object. when this cell is rendered, only the avg is shown.\n    // however when this cell is part of another aggregation, the count is also needed\n    // to create a weighted average for the next level.\n    const result = {\n        count: count,\n        avg: avg,\n        // the grid by default uses toString to render values for an object, so this\n        // is a trick to get the default cellRenderer to display the avg value\n        toString: function () {\n            return `${this.avg}`;\n        },\n    };\n\n    return result;\n}\n\nfunction roundedAvgAggFunction(params) {\n    const result = avgAggFunction(params);\n    if (result.avg) {\n        result.avg = Math.round(result.avg * 100) / 100;\n    }\n\n    return result;\n}\n\n// similar to Math.min() except handles missing values, if any value is missing, then\n// it returns the other value, or 'null' if both are missing.\nfunction min(a, b) {\n    const aMissing = typeof a !== 'number';\n    const bMissing = typeof b !== 'number';\n\n    if (aMissing && bMissing) {\n        return null;\n    } else if (aMissing) {\n        return b;\n    } else if (bMissing) {\n        return a;\n    } else if (a > b) {\n        return b;\n    } else {\n        return a;\n    }\n}\n\n// similar to Math.max() except handles missing values, if any value is missing, then\n// it returns the other value, or 'null' if both are missing.\nfunction max(a, b) {\n    const aMissing = typeof a !== 'number';\n    const bMissing = typeof b !== 'number';\n\n    if (aMissing && bMissing) {\n        return null;\n    } else if (aMissing) {\n        return b;\n    } else if (bMissing) {\n        return a;\n    } else if (a < b) {\n        return b;\n    } else {\n        return a;\n    }\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', () => {\n    const gridDiv = document.querySelector('#myGrid');\n    gridApi = agGrid.createGrid(gridDiv, gridOptions); \n\n    fetch('https://www.ag-grid.com/example-assets/olympic-winners.json')\n        .then((response) => response.json())\n        .then((data) => gridApi.setGridOption('rowData', data));\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\" class=\"ag-theme-quartz\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}}}