{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["style.css"],"files":{"style.css":".ag-row-level-0 {\n    font-weight: bold;\n}\n\n.number-cell {\n    text-align: right;\n}\n\n.parent-container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.top-container button {\n    margin-bottom: 4px;\n    margin-right: 4px;\n}\n\n.center-container {\n    min-height: 10px;\n    flex: 1 1 auto;\n}\n","main.js":"var rowIdCounter = 0;\nvar callCount = 0;\n\nlet gridApi;\n\nconst gridOptions = {\n    columnDefs: [\n        { field: 'topGroup', rowGroup: true, hide: true },\n        { field: 'group', rowGroup: true, hide: true },\n        { headerName: 'ID', field: 'id', cellClass: 'number-cell', maxWidth: 70 },\n        { field: 'a', type: 'valueColumn' },\n        { field: 'b', type: 'valueColumn' },\n        { field: 'c', type: 'valueColumn' },\n        { field: 'd', type: 'valueColumn' },\n        {\n            headerName: 'Total',\n            type: 'totalColumn',\n            minWidth: 120,\n            // we use getValue() instead of data.a so that it gets the aggregated values at the group level\n            valueGetter: 'getValue(\"a\") + getValue(\"b\") + getValue(\"c\") + getValue(\"d\")',\n        },\n    ],\n    defaultColDef: {\n        flex: 1,\n    },\n    autoGroupColumnDef: {\n        minWidth: 180,\n    },\n    columnTypes: {\n        valueColumn: {\n            minWidth: 90,\n            editable: true,\n            aggFunc: 'sum',\n            cellClass: 'number-cell',\n            cellRenderer: 'agAnimateShowChangeCellRenderer',\n            filter: 'agNumberColumnFilter',\n            valueParser: numberValueParser,\n        },\n        totalColumn: {\n            cellRenderer: 'agAnimateShowChangeCellRenderer',\n            cellClass: 'number-cell',\n        },\n    },\n    // set this to true, so only the column in question gets updated\n    aggregateOnlyChangedColumns: true,\n    aggFuncs: {\n        sum: (params) => {\n            var values = params && params.values ? params.values : [];\n            var result = 0;\n            if (values) {\n                values.forEach((value) => {\n                    if (typeof value === 'number') {\n                        result += value;\n                    }\n                });\n            }\n            callCount++;\n            console.log(callCount + ' aggregation: sum([' + values.join(',') + ']) = ' + result);\n            return result;\n        },\n    },\n    groupDefaultExpanded: 1,\n    suppressAggFuncInHeader: true,\n    getRowId: (params) => String(params.data.id),\n    onGridReady: (params) => {\n        params.api.setGridOption('rowData', createRowData());\n    },\n};\n\nfunction createRowData() {\n    var result = [];\n    for (var i = 1; i <= 2; i++) {\n        for (var j = 1; j <= 5; j++) {\n            for (var k = 1; k <= 3; k++) {\n                var rowDataItem = createRowItem(i, j, k);\n                result.push(rowDataItem);\n            }\n        }\n    }\n    return result;\n}\n\nfunction createRowItem(i, j, k) {\n    var rowDataItem = {\n        id: rowIdCounter++,\n        a: (j * k * 863) % 100,\n        b: (j * k * 811) % 100,\n        c: (j * k * 743) % 100,\n        d: (j * k * 677) % 100,\n        topGroup: 'Bottom',\n        group: 'Group B' + j,\n    };\n    if (i === 1) {\n        rowDataItem.topGroup = 'Top';\n        rowDataItem.group = 'Group A' + j;\n    }\n    return rowDataItem;\n}\n\n// converts strings to numbers\nfunction numberValueParser(params) {\n    console.log('=> updating to ' + params.newValue);\n    return Number(params.newValue);\n}\n\nfunction updateOneRecord() {\n    var rowNodeToUpdate = pickExistingRowNodeAtRandom(gridApi);\n\n    if (!rowNodeToUpdate) return;\n\n    var randomValue = createRandomNumber();\n    var randomColumnId = pickRandomColumn();\n\n    console.log('updating ' + randomColumnId + ' to ' + randomValue + ' on ', rowNodeToUpdate.data);\n    rowNodeToUpdate.setDataValue(randomColumnId, randomValue);\n}\n\nfunction pickRandomColumn() {\n    var letters = ['a', 'b', 'c', 'd'];\n    var randomIndex = Math.floor(Math.random() * letters.length);\n    return letters[randomIndex];\n}\n\nfunction createRandomNumber() {\n    return Math.floor(Math.random() * 100);\n}\n\nfunction pickExistingRowItemAtRandom(api) {\n    var rowNode = pickExistingRowNodeAtRandom(api);\n    return rowNode ? rowNode.data : null;\n}\n\nfunction pickExistingRowNodeAtRandom(api) {\n    var allItems = [];\n    api.forEachLeafNode(function (rowNode) {\n        allItems.push(rowNode);\n    });\n\n    if (allItems.length === 0) {\n        return undefined;\n    }\n    var result = allItems[Math.floor(Math.random() * allItems.length)];\n\n    return result;\n}\n\nfunction updateUsingTransaction() {\n    var itemToUpdate = pickExistingRowItemAtRandom(gridApi);\n    if (!itemToUpdate) {\n        return;\n    }\n\n    console.log('updating - before', itemToUpdate);\n\n    itemToUpdate[pickRandomColumn()] = createRandomNumber();\n    itemToUpdate[pickRandomColumn()] = createRandomNumber();\n\n    var transaction = {\n        update: [itemToUpdate],\n    };\n\n    console.log('updating - after', itemToUpdate);\n\n    gridApi.applyTransaction(transaction);\n}\n\nfunction removeUsingTransaction() {\n    var itemToRemove = pickExistingRowItemAtRandom(gridApi);\n    if (!itemToRemove) {\n        return;\n    }\n\n    var transaction = {\n        remove: [itemToRemove],\n    };\n\n    console.log('removing', itemToRemove);\n\n    gridApi.applyTransaction(transaction);\n}\n\nfunction addUsingTransaction() {\n    var i = Math.floor(Math.random() * 2);\n    var j = Math.floor(Math.random() * 5);\n    var k = Math.floor(Math.random() * 3);\n    var newItem = createRowItem(i, j, k);\n\n    var transaction = {\n        add: [newItem],\n    };\n\n    console.log('adding', newItem);\n\n    gridApi.applyTransaction(transaction);\n}\n\nfunction changeGroupUsingTransaction() {\n    var itemToUpdate = pickExistingRowItemAtRandom(gridApi);\n    if (!itemToUpdate) {\n        return;\n    }\n\n    itemToUpdate.topGroup = itemToUpdate.topGroup === 'Top' ? 'Bottom' : 'Top';\n\n    var transaction = {\n        update: [itemToUpdate],\n    };\n\n    console.log('updating', itemToUpdate);\n\n    gridApi.applyTransaction(transaction);\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', function () {\n    var gridDiv = document.querySelector('#myGrid');\n    gridApi = agGrid.createGrid(gridDiv, gridOptions); \n});\n","index.html":"<div class=\"parent-container\">\n    <div class=\"top-container\">\n        <button onclick=\"updateOneRecord()\">Update One Value</button>\n        <button onclick=\"updateUsingTransaction()\">Update Using Transaction</button>\n        <button onclick=\"removeUsingTransaction()\">Remove Using Transaction</button>\n        <button onclick=\"addUsingTransaction()\">Add Using Transaction</button>\n        <button onclick=\"changeGroupUsingTransaction()\">Change Group Using Transaction</button>\n    </div>\n    <div class=\"center-container\">\n        <div id=\"myGrid\" style=\"height: 100%\" class=\"ag-theme-quartz\"></div>\n    </div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}}}