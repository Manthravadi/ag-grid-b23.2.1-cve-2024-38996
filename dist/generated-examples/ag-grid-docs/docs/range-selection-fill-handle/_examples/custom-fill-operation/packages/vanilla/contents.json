{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"var daysList = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\nlet gridApi;\n\nconst gridOptions = {\n    columnDefs: [\n        { field: 'athlete', minWidth: 150 },\n        { headerName: 'Day of the Week', field: 'dayOfTheWeek', minWidth: 180 },\n        { field: 'age', maxWidth: 90 },\n        { field: 'country', minWidth: 150 },\n        { field: 'year', maxWidth: 90 },\n        { field: 'date', minWidth: 150 },\n        { field: 'sport', minWidth: 150 },\n        { field: 'gold' },\n        { field: 'silver' },\n        { field: 'bronze' },\n    ],\n    defaultColDef: {\n        flex: 1,\n        minWidth: 100,\n        editable: true,\n        cellDataType: false,\n    },\n    enableRangeSelection: true,\n    enableFillHandle: true,\n    fillOperation: (params) => {\n        var hasNonDayValues = params.initialValues.some(function (val) {\n            return daysList.indexOf(val) === -1;\n        });\n\n        if (hasNonDayValues) {\n            return false;\n        }\n\n        var lastValue = params.values[params.values.length - 1];\n        var idxOfLast = daysList.indexOf(lastValue);\n        var nextDay = daysList[(idxOfLast + 1) % daysList.length];\n        console.log('Custom Fill Operation -> Next Day is:', nextDay);\n        return nextDay;\n    },\n    onFillStart: (event) => {\n        console.log('Fill Start', event);\n    },\n    onFillEnd: (event) => {\n        console.log('Fill End', event);\n    },\n};\n\nfunction createRowData(data) {\n    var rowData = data.slice(0, 100);\n    var currentDate = new Date();\n    var currentYear = currentDate.getFullYear();\n\n    for (var i = 0; i < 100; i++) {\n        var dt = new Date(getRandom(currentYear - 10, currentYear + 10), getRandom(0, 12), getRandom(1, 25));\n        rowData[i].dayOfTheWeek = daysList[dt.getDay()];\n    }\n    return rowData;\n}\nvar getRandom = function (start, finish) {\n    return Math.floor(Math.random() * (finish - start) + start);\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', function () {\n    var gridDiv = document.querySelector('#myGrid');\n    gridApi = agGrid.createGrid(gridDiv, gridOptions); \n\n    fetch('https://www.ag-grid.com/example-assets/olympic-winners.json')\n        .then((response) => response.json())\n        .then(function (data) {\n            gridApi.setGridOption('rowData', createRowData(data));\n        });\n});\n","index.html":"<div id=\"myGrid\" class=\"ag-theme-quartz\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}}}