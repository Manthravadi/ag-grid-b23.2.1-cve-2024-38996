{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["fakeServer.js","main.js"],"styleFiles":[],"files":{"fakeServer.js":"// This fake server uses http://alasql.org/ to mimic how a real server\n// might generate sql queries from the Server-Side Row Model request.\n// To keep things simple it does the bare minimum to support the example.\nfunction FakeServer(allData) {\n    alasql.options.cache = false;\n\n    return {\n        getData: function (request) {\n            var results = executeQuery(request);\n            results.forEach((row) => {\n                row.country = {\n                    code: row.countryCode,\n                    name: row.countryName,\n                };\n                delete row.countryCode;\n                delete row.countryName;\n            });\n\n            return {\n                success: true,\n                rows: results,\n                lastRow: getLastRowIndex(request),\n            };\n        },\n        getCountries: function () {\n            var sql = 'SELECT DISTINCT countryCode, countryName FROM ? ORDER BY countryName ASC';\n\n            return alasql(sql, [allData]).map((row) => ({\n                code: row.countryCode,\n                name: row.countryName,\n            }));\n        },\n        getSports: function (countries) {\n            console.log('Returning sports for ' + (countries ? countries.join(', ') : 'all countries'));\n\n            var where = countries ? \" WHERE countryCode IN ('\" + countries.join(\"', '\") + \"')\" : '';\n            var sql = 'SELECT DISTINCT sport FROM ? ' + where + ' ORDER BY sport ASC';\n\n            return alasql(sql, [allData]).map(function (x) {\n                return x.sport;\n            });\n        },\n    };\n\n    function executeQuery(request) {\n        var sql = buildSql(request);\n\n        console.log('[FakeServer] - about to execute query:', sql);\n\n        return alasql(sql, [allData]);\n    }\n\n    function buildSql(request) {\n        return 'SELECT * FROM ?' + whereSql(request) + orderBySql(request) + limitSql(request);\n    }\n\n    function mapColumnKey(columnKey) {\n        return columnKey === 'country' ? 'countryCode' : columnKey;\n    }\n\n    function whereSql(request) {\n        var whereParts = [];\n        var filterModel = request.filterModel;\n\n        if (filterModel) {\n            Object.keys(filterModel).forEach(function (columnKey) {\n                var filter = filterModel[columnKey];\n\n                if (filter.filterType === 'set') {\n                    whereParts.push(mapColumnKey(columnKey) + \" IN ('\" + filter.values.join(\"', '\") + \"')\");\n                    return;\n                }\n\n                console.log('unsupported filter type: ' + filter.filterType);\n            });\n        }\n\n        if (whereParts.length > 0) {\n            return ' WHERE ' + whereParts.join(' AND ');\n        }\n\n        return '';\n    }\n\n    function orderBySql(request) {\n        var sortModel = request.sortModel;\n\n        if (sortModel.length === 0) return '';\n\n        var sorts = sortModel.map(function (s) {\n            return mapColumnKey(s.colId) + ' ' + s.sort.toUpperCase();\n        });\n\n        return ' ORDER BY ' + sorts.join(', ');\n    }\n\n    function limitSql(request) {\n        if (request.endRow == undefined || request.startRow == undefined) {\n            return '';\n        }\n        var blockSize = request.endRow - request.startRow;\n\n        return ' LIMIT ' + blockSize + ' OFFSET ' + request.startRow;\n    }\n\n    function getLastRowIndex(request) {\n        return executeQuery({ ...request, startRow: undefined, endRow: undefined }).length;\n    }\n}\n","main.js":"const columnDefs = [\n    {\n        field: 'country',\n        filter: 'agSetColumnFilter',\n        valueFormatter: countryValueFormatter,\n        filterParams: {\n            values: getCountryValuesAsync,\n            keyCreator: countryCodeKeyCreator,\n            valueFormatter: countryValueFormatter,\n            comparator: countryComparator,\n        },\n        menuTabs: ['filterMenuTab'],\n    },\n    {\n        field: 'sport',\n        filter: 'agSetColumnFilter',\n        filterParams: {\n            values: getSportValuesAsync,\n        },\n        menuTabs: ['filterMenuTab'],\n    },\n    { field: 'athlete', menuTabs: undefined },\n];\n\nfunction countryCodeKeyCreator(params) {\n    return params.value.code;\n}\n\nfunction countryValueFormatter(params) {\n    return params.value.name;\n}\n\nfunction countryComparator(a, b) {\n    // for complex objects, need to provide a comparator to choose what to sort by\n    if (a.name < b.name) {\n        return -1;\n    } else if (a.name > b.name) {\n        return 1;\n    }\n    return 0;\n}\n\nlet gridApi;\n\nconst gridOptions = {\n    columnDefs: columnDefs,\n    defaultColDef: {\n        flex: 1,\n        minWidth: 150,\n    },\n    // use the server-side row model\n    rowModelType: 'serverSide',\n\n    // fetch 100 rows at a time\n    cacheBlockSize: 100,\n\n    // only keep 10 blocks of rows\n    maxBlocksInCache: 10,\n\n    onFilterChanged: onFilterChanged,\n};\n\nvar fakeServer;\nvar selectedCountries = null;\n\nfunction onFilterChanged() {\n    var countryFilterModel = gridApi.getFilterModel()['country'];\n    var selected = countryFilterModel && countryFilterModel.values;\n\n    if (!areEqual(selectedCountries, selected)) {\n        selectedCountries = selected;\n\n        console.log('Refreshing sports filter');\n        gridApi.getColumnFilterInstance('sport').then((sportFilter) => {\n            sportFilter.refreshFilterValues();\n        });\n    }\n}\n\nfunction areEqual(a, b) {\n    if (a == null && b == null) {\n        return true;\n    }\n    if (a != null || b != null) {\n        return false;\n    }\n\n    return (\n        a.length === b.length &&\n        a.every(function (v, i) {\n            return b[i] === v;\n        })\n    );\n}\n\nfunction getCountryValuesAsync(params) {\n    var countries = fakeServer.getCountries();\n\n    // simulating real server call with a 500ms delay\n    setTimeout(() => {\n        params.success(countries);\n    }, 500);\n}\n\nfunction getSportValuesAsync(params) {\n    var sports = fakeServer.getSports(selectedCountries);\n\n    // simulating real server call with a 500ms delay\n    setTimeout(() => {\n        params.success(sports);\n    }, 500);\n}\n\nfunction getServerSideDatasource(server) {\n    return {\n        getRows: (params) => {\n            console.log('[Datasource] - rows requested by grid: ', params.request);\n\n            // get data for request from our fake server\n            var response = server.getData(params.request);\n\n            // simulating real server call with a 500ms delay\n            setTimeout(() => {\n                if (response.success) {\n                    // supply rows for requested block to grid\n                    params.success({ rowData: response.rows, rowCount: response.lastRow });\n                } else {\n                    params.fail();\n                }\n            }, 500);\n        },\n    };\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', function () {\n    var gridDiv = document.querySelector('#myGrid');\n    gridApi = agGrid.createGrid(gridDiv, gridOptions); \n\n    fetch('https://www.ag-grid.com/example-assets/olympic-winners.json')\n        .then((response) => response.json())\n        .then(function (data) {\n            // we don't have unique codes in our dataset, so generate unique ones\n            const namesToCodes = new Map();\n            const codesToNames = new Map();\n            data.forEach((row) => {\n                row.countryName = row.country;\n                if (namesToCodes.has(row.countryName)) {\n                    row.countryCode = namesToCodes.get(row.countryName);\n                } else {\n                    row.countryCode = row.country.substring(0, 2).toUpperCase();\n                    if (codesToNames.has(row.countryCode)) {\n                        let num = 0;\n                        do {\n                            row.countryCode = `${row.countryCode[0]}${num++}`;\n                        } while (codesToNames.has(row.countryCode));\n                    }\n                    codesToNames.set(row.countryCode, row.countryName);\n                    namesToCodes.set(row.countryName, row.countryCode);\n                }\n                delete row.country;\n            });\n            // setup the fake server with entire dataset\n            fakeServer = new FakeServer(data);\n\n            // create datasource with a reference to the fake server\n            var datasource = getServerSideDatasource(fakeServer);\n\n            // register the datasource with the grid\n            gridApi.setGridOption('serverSideDatasource', datasource);\n        });\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\" class=\"ag-theme-quartz\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}},"extras":["alasql"]}