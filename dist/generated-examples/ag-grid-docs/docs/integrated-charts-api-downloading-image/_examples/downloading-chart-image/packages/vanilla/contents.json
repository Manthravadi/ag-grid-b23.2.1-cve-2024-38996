{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":true,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1;\n}\n\n.my-chart {\n    flex: 1;\n}\n\n#buttons {\n    padding-bottom: 10px;\n}\n","data.js":"async function getData(delay = 100) {\n    return new Promise((resolve) => setTimeout(() => resolve(generateData()), delay));\n}\n\nfunction generateData() {\n    const countries = [\n        'Ireland',\n        'Spain',\n        'United Kingdom',\n        'France',\n        'Germany',\n        'Luxembourg',\n        'Sweden',\n        'Norway',\n        'Italy',\n        'Greece',\n        'Iceland',\n        'Portugal',\n        'Malta',\n        'Brazil',\n        'Argentina',\n        'Colombia',\n        'Peru',\n        'Venezuela',\n        'Uruguay',\n        'Belgium',\n    ];\n\n    return countries.map((country) => ({\n        country,\n        sugar: getRandomNumber(0, 50),\n        fat: getRandomNumber(0, 100),\n        weight: getRandomNumber(0, 200),\n    }));\n}\n\nfunction getRandomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n","main.js":"let gridApi;\nlet chartId;\n\nconst gridOptions = {\n    columnDefs: [\n        { field: 'country', chartDataType: 'category' },\n        { field: 'sugar', chartDataType: 'series' },\n        { field: 'fat', chartDataType: 'series' },\n        { field: 'weight', chartDataType: 'series' },\n    ],\n    defaultColDef: {\n        editable: true,\n        flex: 1,\n        minWidth: 100,\n        filter: true,\n    },\n    enableRangeSelection: true,\n    popupParent: document.body,\n    enableCharts: true,\n    chartThemeOverrides: {\n        bar: {\n            axes: {\n                category: {\n                    label: {\n                        rotation: 335,\n                    },\n                },\n            },\n        },\n    },\n    onGridReady: (params) => {\n        getData().then((rowData) => params.api.setGridOption('rowData', rowData));\n    },\n    onFirstDataRendered,\n    onChartCreated,\n};\n\nfunction onFirstDataRendered(params) {\n    const createRangeChartParams = {\n        cellRange: {\n            columns: ['country', 'sugar', 'fat', 'weight'],\n        },\n        chartType: 'groupedColumn',\n        chartContainer: document.querySelector('#myChart') ,\n    };\n\n    params.api.createRangeChart(createRangeChartParams);\n}\n\nfunction onChartCreated(event) {\n    chartId = event.chartId;\n}\n\nfunction downloadChart(dimensions) {\n    if (!chartId) return;\n    gridApi.downloadChart({\n        fileName: 'resizedImage',\n        fileFormat: 'image/jpeg',\n        chartId,\n        dimensions,\n    });\n}\n\nfunction downloadChartImage(fileFormat) {\n    if (!chartId) return;\n    const params = { fileFormat, chartId };\n    const imageDataURL = gridApi.getChartImageDataURL(params);\n\n    if (imageDataURL) {\n        const a = document.createElement('a');\n        a.href = imageDataURL;\n        a.download = 'image';\n        a.style.display = 'none';\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n    }\n}\n\nfunction openChartImage(fileFormat) {\n    if (!chartId) return;\n    const params = { fileFormat, chartId };\n    const imageDataURL = gridApi.getChartImageDataURL(params);\n\n    if (imageDataURL) {\n        const image = new Image();\n        image.src = imageDataURL;\n\n        const w = window.open('');\n        w.document.write(image.outerHTML);\n        w.document.close();\n    }\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', function () {\n    gridApi = agGrid.createGrid(document.querySelector('#myGrid'), gridOptions); /** DARK INTEGRATED START **/\n    const isInitialModeDark = () => {\n            const attr = document.documentElement.getAttribute('data-default-theme');\n            return attr ? attr.endsWith('-dark') : false;\n        };\n      \n        const updateChartThemes = (isDark) => {           \n            const themes = ['ag-default', 'ag-material', 'ag-sheets', 'ag-polychroma', 'ag-vivid'];            \n            const currentThemes = gridApi.getGridOption('chartThemes');                    \n            const customTheme = currentThemes && currentThemes.some(theme => theme.startsWith('my-custom-theme'));\n            \n            let modifiedThemes = customTheme\n                ? (isDark ? ['my-custom-theme-dark', 'my-custom-theme-light'] : ['my-custom-theme-light', 'my-custom-theme-dark'])\n                : Array.from(new Set(themes.map((theme) => theme + (isDark ? '-dark' : ''))));                      \n\n            // updating the 'chartThemes' grid option will cause the chart to reactively update!\n            gridApi.setGridOption('chartThemes', modifiedThemes);\n        };\n\n        // update chart themes when example first loads\n        updateChartThemes(isInitialModeDark());\n\n        const handleColorSchemeChange = (event) => {\n            const { darkMode } = event.detail;\n            updateChartThemes(darkMode);\n        }\n\n        // listen for user-triggered dark mode changes (not removing listener is fine here!)\n        document.addEventListener('color-scheme-change', handleColorSchemeChange);\n    /** DARK INTEGRATED END **/\n});\n","index.html":"<div class=\"wrapper\">\n    <div id=\"buttons\">\n        <button onclick=\"downloadChartImage('image/png')\">Download Chart Image (PNG)</button>\n        <button onclick=\"downloadChart({ width: 800, height: 500 })\">Download Chart Image (JPG 800x500)</button>\n        <button onclick=\"openChartImage('image/jpeg')\">Open Chart Image (JPG)</button>\n    </div>\n    <div id=\"myGrid\" class=\"ag-theme-quartz\"></div>\n    <div id=\"myChart\" class=\"ag-theme-quartz my-chart\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}},"myGridReference":true}