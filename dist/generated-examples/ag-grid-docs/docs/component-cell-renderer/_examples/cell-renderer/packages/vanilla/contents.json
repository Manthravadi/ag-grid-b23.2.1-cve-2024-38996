{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n","main.js":"/**\n * Demonstrating function cell renderer\n * Visually indicates if this months value is higher or lower than last months value\n * by adding an +/- symbols according to the difference\n */\nconst deltaIndicator = (params) => {\n    const element = document.createElement('span');\n    const imageElement = document.createElement('img');\n\n    // visually indicate if this months value is higher or lower than last months value\n    if (params.value > 15) {\n        imageElement.src = 'https://www.ag-grid.com/example-assets/weather/fire-plus.png';\n    } else {\n        imageElement.src = 'https://www.ag-grid.com/example-assets/weather/fire-minus.png';\n    }\n    element.appendChild(imageElement);\n    element.appendChild(document.createTextNode(params.value));\n    return element;\n};\n\nfunction iconCellRenderer(params) {\n    const value = params.value / (params.divisor ? params.divisor : 1);\n    return createImageSpan(value, params.rendererImage);\n}\n\nlet gridApi;\n\nfunction getColumnDefs() {\n    return [\n        {\n            headerName: 'Month',\n            field: 'Month',\n            width: 75,\n        },\n        {\n            headerName: 'Max Temp',\n            field: 'Max temp (C)',\n            width: 120,\n            cellRenderer: deltaIndicator, // Function cell renderer\n        },\n        {\n            headerName: 'Min Temp',\n            field: 'Min temp (C)',\n            width: 120,\n            cellRenderer: deltaIndicator, // Function cell renderer\n        },\n        {\n            headerName: 'Frost',\n            field: 'Days of air frost (days)',\n            width: 233,\n            cellRenderer: iconCellRenderer, // Component Cell Renderer\n            cellRendererParams: {\n                rendererImage: 'frost.png', // Complementing the Cell Renderer parameters\n            },\n        },\n        {\n            headerName: 'Sunshine',\n            field: 'Sunshine (hours)',\n            width: 190,\n            cellRenderer: iconCellRenderer,\n            cellRendererParams: {\n                rendererImage: 'sun.png', // Complementing the Cell Renderer parameters\n                divisor: 24,\n            },\n        },\n        {\n            headerName: 'Rainfall',\n            field: 'Rainfall (mm)',\n            width: 180,\n            cellRenderer: iconCellRenderer,\n            cellRendererParams: {\n                rendererImage: 'rain.png', // Complementing the Cell Renderer parameters\n                divisor: 10,\n            },\n        },\n    ];\n}\n\nconst gridOptions = {\n    columnDefs: getColumnDefs(),\n    rowData: null,\n    defaultColDef: {\n        editable: true,\n        flex: 1,\n        minWidth: 100,\n        filter: true,\n    },\n};\n\nconst createImageSpan = (imageMultiplier, image) => {\n    const resultElement = document.createElement('span');\n    for (let i = 0; i < imageMultiplier; i++) {\n        const imageElement = document.createElement('img');\n        imageElement.src = 'https://www.ag-grid.com/example-assets/weather/' + image;\n        resultElement.appendChild(imageElement);\n    }\n    return resultElement;\n};\n\n/**\n * Updates the Days of Air Frost column - adjusts the value which in turn will demonstrate the Component refresh functionality\n * After a data update, cellRenderer Components.refresh method will be called to re-render the altered Cells\n */\nfunction randomiseFrost() {\n    // iterate over the \"days of air frost\" and make each a random number.\n    gridApi.forEachNode((rowNode) => {\n        rowNode.setDataValue('Days of air frost (days)', Math.floor(Math.random() * 4) + 1);\n    });\n}\n\n// setup the grid after the page has finished loading\nconst gridDiv = document.querySelector('#myGrid');\ngridApi = agGrid.createGrid(gridDiv, gridOptions); \n\nfetch('https://www.ag-grid.com/example-assets/weather-se-england.json')\n    .then((response) => response.json())\n    .then((data) => {\n        gridApi.setGridOption('rowData', data);\n    });\n","index.html":"<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px\">\n        <button onclick=\"randomiseFrost()\">Randomise Frost</button>\n    </div>\n\n    <div id=\"myGrid\" class=\"ag-theme-quartz\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}}}