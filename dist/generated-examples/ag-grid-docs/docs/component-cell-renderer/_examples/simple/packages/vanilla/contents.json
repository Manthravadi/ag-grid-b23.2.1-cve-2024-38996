{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["medalCellRenderer.js","totalValueRenderer.js","main.js"],"styleFiles":[],"files":{"medalCellRenderer.js":"\nclass MedalCellRenderer  {\n    eGui;\n\n    // init method gets the details of the cell to be renderer\n    init(params) {\n        this.eGui = document.createElement('span');\n        this.eGui.textContent = new Array(params.value).fill('#').join('');\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh(params) {\n        return false;\n    }\n}\n","totalValueRenderer.js":"\nclass TotalValueRenderer  {\n    eGui;\n    eButton;\n    eValue;\n    cellValue;\n    eventListener;\n\n    // gets called once before the renderer is used\n    init(params) {\n        // create the cell\n        this.eGui = document.createElement('div');\n        this.eGui.innerHTML = `\n          <span>\n              <span class=\"my-value\"></span>\n              <button class=\"btn-simple\">Push For Total</button>\n          </span>\n       `;\n\n        // get references to the elements we want\n        this.eButton = this.eGui.querySelector('.btn-simple');\n        this.eValue = this.eGui.querySelector('.my-value');\n\n        // set value into cell\n        this.cellValue = this.getValueToDisplay(params);\n        this.eValue.textContent = this.cellValue;\n\n        // add event listener to button\n        this.eventListener = () => alert(`${this.cellValue} medals won!`);\n        this.eButton.addEventListener('click', this.eventListener);\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    // gets called whenever the cell refreshes\n    refresh(params) {\n        // set value into cell again\n        this.cellValue = this.getValueToDisplay(params);\n        this.eValue.textContent = this.cellValue;\n\n        // return true to tell the grid we refreshed successfully\n        return true;\n    }\n\n    // gets called when the cell is removed from the grid\n    destroy() {\n        // do cleanup, remove event listener from button\n        if (this.eButton) {\n            // check that the button element exists as destroy() can be called before getGui()\n            this.eButton.removeEventListener('click', this.eventListener);\n        }\n    }\n\n    getValueToDisplay(params) {\n        return params.valueFormatted ? params.valueFormatted : params.value;\n    }\n}\n","main.js":"const columnDefs = [\n    { field: 'athlete' },\n    { field: 'year', minWidth: 60 },\n    { field: 'gold', cellRenderer: MedalCellRenderer },\n    { field: 'silver', cellRenderer: MedalCellRenderer },\n    { field: 'bronze', cellRenderer: MedalCellRenderer },\n    {\n        field: 'total',\n        minWidth: 190,\n        editable: false,\n        valueGetter: (params) => params.data.gold + params.data.silver + params.data.bronze,\n        cellRenderer: TotalValueRenderer,\n    },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n    columnDefs: columnDefs,\n    defaultColDef: {\n        editable: true,\n        flex: 1,\n        minWidth: 100,\n        filter: true,\n    },\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', () => {\n    const gridDiv = document.querySelector('#myGrid');\n    gridApi = agGrid.createGrid(gridDiv, gridOptions); \n\n    fetch('https://www.ag-grid.com/example-assets/olympic-winners.json')\n        .then((response) => response.json())\n        .then((data) => {\n            gridApi.setGridOption('rowData', data);\n        });\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%; width: 100%\" class=\"ag-theme-quartz\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}}}