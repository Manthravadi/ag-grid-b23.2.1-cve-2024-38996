{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":["styles.css"],"files":{"styles.css":".headerWrapper {\n    display: flex;\n    overflow: hidden;\n    gap: 0.25rem;\n}\n\n.customHeaderLabel {\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n.customSortRemoveLabel {\n    font-size: 11px;\n}\n\n.active {\n    color: cornflowerblue;\n}\n","customHeader.ts":"import { IHeaderParams } from 'ag-grid-community';\n\nexport interface ICustomHeaderParams {\n    menuIcon: string;\n}\n\nexport class CustomHeader {\n    private agParams!: ICustomHeaderParams & IHeaderParams;\n    private eGui!: HTMLDivElement;\n    eMenuButton: any;\n    eSortDownButton: any;\n    eSortUpButton: any;\n    eSortRemoveButton: any;\n    onMenuClickListener!: () => void;\n    onSortAscRequestedListener!: (event: any) => void;\n    onSortDescRequestedListener!: (event: any) => void;\n    onRemoveSortListener!: (event: any) => void;\n    onSortChangedListener!: () => void;\n\n    init(agParams: ICustomHeaderParams & IHeaderParams) {\n        this.agParams = agParams;\n        const div = document.createElement('div');\n        div.className = 'headerWrapper';\n        div.innerHTML = `\n            <div class=\"customHeaderMenuButton\">\n                <i class=\"fa ${agParams.menuIcon}\"></i>\n            </div>\n            <div class=\"customHeaderLabel\">${agParams.displayName}</div>\n            <div class=\"customSortDownLabel inactive\">\n                <i class=\"fa fa-long-arrow-alt-down\"></i>\n            </div>\n            <div class=\"customSortUpLabel inactive\">\n                <i class=\"fa fa-long-arrow-alt-up\"></i>\n            </div>\n            <div class=\"customSortRemoveLabel inactive\">\n                <i class=\"fa fa-times\"></i>\n            </div>\n        `;\n\n        this.eMenuButton = div.querySelector('.customHeaderMenuButton');\n        this.eSortDownButton = div.querySelector('.customSortDownLabel');\n        this.eSortUpButton = div.querySelector('.customSortUpLabel');\n        this.eSortRemoveButton = div.querySelector('.customSortRemoveLabel');\n\n        if (agParams.enableMenu) {\n            this.onMenuClickListener = this.onMenuClick.bind(this);\n            this.eMenuButton.addEventListener('click', this.onMenuClickListener);\n        } else {\n            div.removeChild(this.eMenuButton);\n        }\n\n        if (agParams.enableSorting) {\n            this.onSortAscRequestedListener = this.onSortRequested.bind(this, 'asc');\n            this.eSortDownButton.addEventListener('click', this.onSortAscRequestedListener);\n            this.onSortDescRequestedListener = this.onSortRequested.bind(this, 'desc');\n            this.eSortUpButton.addEventListener('click', this.onSortDescRequestedListener);\n            this.onRemoveSortListener = this.onSortRequested.bind(this, null);\n            this.eSortRemoveButton.addEventListener('click', this.onRemoveSortListener);\n\n            this.onSortChangedListener = this.onSortChanged.bind(this);\n            agParams.column.addEventListener('sortChanged', this.onSortChangedListener);\n            this.onSortChanged();\n        } else {\n            div.removeChild(this.eSortDownButton);\n            div.removeChild(this.eSortUpButton);\n            div.removeChild(this.eSortRemoveButton);\n        }\n\n        this.eGui = div;\n\n        const customHeaderLabel = div.querySelector('.customHeaderLabel');\n        agParams.setTooltip(\n            agParams.displayName,\n            () => customHeaderLabel!.scrollWidth > customHeaderLabel!.clientWidth\n        );\n    }\n\n    onSortChanged() {\n        const deactivate = (toDeactivateItems: any[]) => {\n            toDeactivateItems.forEach((toDeactivate) => {\n                toDeactivate.className = toDeactivate.className.split(' ')[0];\n            });\n        };\n\n        const activate = (toActivate: any) => {\n            toActivate.className = toActivate.className + ' active';\n        };\n        const sort = this.agParams.column.getSort();\n        if (sort === 'asc') {\n            deactivate([this.eSortUpButton, this.eSortRemoveButton]);\n            activate(this.eSortDownButton);\n        } else if (sort === 'desc') {\n            deactivate([this.eSortDownButton, this.eSortRemoveButton]);\n            activate(this.eSortUpButton);\n        } else {\n            deactivate([this.eSortUpButton, this.eSortDownButton]);\n            activate(this.eSortRemoveButton);\n        }\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    onMenuClick() {\n        this.agParams.showColumnMenu(this.eMenuButton);\n    }\n\n    onSortRequested(order: 'asc' | 'desc' | null, event: any) {\n        this.agParams.setSort(order, event.shiftKey);\n    }\n\n    destroy() {\n        if (this.onMenuClickListener) {\n            this.eMenuButton.removeEventListener('click', this.onMenuClickListener);\n        }\n        this.eSortDownButton.removeEventListener('click', this.onSortAscRequestedListener);\n        this.eSortUpButton.removeEventListener('click', this.onSortDescRequestedListener);\n        this.eSortRemoveButton.removeEventListener('click', this.onRemoveSortListener);\n        this.agParams.column.removeEventListener('sortChanged', this.onSortChangedListener);\n    }\n}\n","main.ts":"import 'ag-grid-community/styles/ag-grid.css';\nimport \"ag-grid-community/styles/ag-theme-quartz.css\";\nimport { ColDef, ColGroupDef, GridApi, GridOptions, createGrid } from 'ag-grid-community';\nimport { CustomHeader } from './customHeader';\nimport { IOlympicData } from './interfaces'\n\n\n\n\nconst columnDefs: ColDef[] = [\n    { field: 'athlete', headerName: \"Athlete's Full Name\", suppressHeaderMenuButton: true, minWidth: 120 },\n    {\n        field: 'age',\n        headerName: \"Athlete's Age\",\n        sortable: false,\n        headerComponentParams: { menuIcon: 'fa-external-link-alt' },\n    },\n    { field: 'country', headerName: \"Athlete's Country\", suppressHeaderMenuButton: true, minWidth: 120 },\n    { field: 'year', headerName: 'Event Year', sortable: false },\n    { field: 'date', headerName: 'Event Date', suppressHeaderMenuButton: true },\n    { field: 'sport', sortable: false },\n    {\n        field: 'gold',\n        headerName: 'Gold Medals',\n        headerComponentParams: { menuIcon: 'fa-cog' },\n        minWidth: 120,\n    },\n    { field: 'silver', headerName: 'Silver Medals', sortable: false },\n    { field: 'bronze', headerName: 'Bronze Medals', suppressHeaderMenuButton: true, minWidth: 120 },\n    { field: 'total', headerName: 'Total Medals', sortable: false },\n];\n\nlet gridApi: GridApi<IOlympicData>;\n\nconst gridOptions: GridOptions<IOlympicData> = {\n    columnDefs: columnDefs,\n    rowData: null,\n    suppressMenuHide: true,\n    components: {\n        agColumnHeader: CustomHeader,\n    },\n    defaultColDef: {\n        editable: true,\n        filter: true,\n        width: 120,\n        headerComponentParams: {\n            menuIcon: 'fa-bars',\n        },\n    },\n};\n\n// setup the grid after the page has finished loading\n    const gridDiv = document.querySelector<HTMLElement>('#myGrid')!;\n    gridApi = createGrid(gridDiv, gridOptions);\n\n    fetch('https://www.ag-grid.com/example-assets/olympic-winners.json')\n        .then((response) => response.json())\n        .then((data) => {\n            gridApi!.setGridOption('rowData', data);\n        });;\n  ","index.html":"<div id=\"myGrid\" style=\"height: 100%\" class=\"ag-theme-quartz\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.dev.js":"(function (global) {\n    var sjsPaths = {};\n    if (typeof systemJsPaths !== 'undefined') {\n        sjsPaths = systemJsPaths;\n    }\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {},\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...sjsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            css: 'npm:systemjs-plugin-css@0.1.37/css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            // appLocation comes from index.html\n            app: appLocation,\n\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            '@ag-grid-community/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-locale': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n            },\n            '@ag-grid-enterprise/clipboard': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-enterprise-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {},\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            // appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            '@ag-grid-community/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                format: 'cjs',\n            },\n            'ag-grid-locale': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/clipboard': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}},"extras":["fontawesome"]}