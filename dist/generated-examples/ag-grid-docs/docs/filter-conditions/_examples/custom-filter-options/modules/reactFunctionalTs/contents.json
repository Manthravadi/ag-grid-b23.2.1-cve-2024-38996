{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"index.tsx","mainFileName":"index.tsx","styleFiles":[],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n\n.ag-header-cell-filtered {\n    background-color: #1b6d85 !important;\n    color: #fff !important;\n}\n","index.tsx":"\n'use strict';\n\nimport React, { useCallback, useMemo, useRef, useState, StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { AgGridReact } from '@ag-grid-community/react';\nimport '@ag-grid-community/styles/ag-grid.css';\nimport '@ag-grid-community/styles/ag-theme-quartz.css';\nimport './styles.css';\nimport { ClientSideRowModelModule } from '@ag-grid-community/client-side-row-model';\nimport { ColDef, ColGroupDef, GetLocaleTextParams, GridApi, GridOptions, GridReadyEvent, IDateFilterParams, IFilterOptionDef, INumberFilterParams, ITextFilterParams, ModuleRegistry, createGrid } from '@ag-grid-community/core';\nimport { IOlympicData } from './interfaces'\nModuleRegistry.registerModules([ClientSideRowModelModule]);\n\n\n\ndeclare var window: any;\n\nvar filterParams: INumberFilterParams = {\n    filterOptions: [\n        'empty',\n        {\n            displayKey: 'evenNumbers',\n            displayName: 'Even Numbers',\n            predicate: (_, cellValue) => cellValue != null && cellValue % 2 === 0,\n            numberOfInputs: 0,\n        },\n        {\n            displayKey: 'oddNumbers',\n            displayName: 'Odd Numbers',\n            predicate: (_, cellValue) => cellValue != null && cellValue % 2 !== 0,\n            numberOfInputs: 0,\n        },\n        {\n            displayKey: 'blanks',\n            displayName: 'Blanks',\n            predicate: (_, cellValue) => cellValue == null,\n            numberOfInputs: 0,\n        },\n        {\n            displayKey: 'age5YearsAgo',\n            displayName: 'Age 5 Years Ago',\n            predicate: ([fv1]: any[], cellValue) => cellValue == null || cellValue - 5 === fv1,\n            numberOfInputs: 1,\n        },\n        {\n            displayKey: 'betweenExclusive',\n            displayName: 'Between (Exclusive)',\n            predicate: ([fv1, fv2], cellValue) => cellValue == null || (fv1 < cellValue && fv2 > cellValue),\n            numberOfInputs: 2,\n        },\n    ] as IFilterOptionDef[],\n    maxNumConditions: 1,\n};\n\nvar containsFilterParams: ITextFilterParams = {\n    filterOptions: [\n        'contains',\n        {\n            displayKey: 'startsA',\n            displayName: 'Starts With \"A\"',\n            predicate: (_, cellValue) => cellValue != null && cellValue.indexOf('A') === 0,\n            numberOfInputs: 0,\n        },\n        {\n            displayKey: 'startsN',\n            displayName: 'Starts With \"N\"',\n            predicate: (_, cellValue) => cellValue != null && cellValue.indexOf('N') === 0,\n            numberOfInputs: 0,\n        },\n        {\n            displayKey: 'regexp',\n            displayName: 'Regular Expression',\n            predicate: ([fv1]: any[], cellValue) => cellValue == null || new RegExp(fv1, 'gi').test(cellValue),\n            numberOfInputs: 1,\n        },\n        {\n            displayKey: 'betweenExclusive',\n            displayName: 'Between (Exclusive)',\n            predicate: ([fv1, fv2]: any[], cellValue) => cellValue == null || (fv1 < cellValue && fv2 > cellValue),\n            numberOfInputs: 2,\n        },\n    ] as IFilterOptionDef[],\n};\n\nvar equalsFilterParams: IDateFilterParams = {\n    filterOptions: [\n        'equals',\n        {\n            displayKey: 'equalsWithNulls',\n            displayName: 'Equals (with Nulls)',\n            predicate: ([filterValue]: any[], cellValue) => {\n                if (cellValue == null)\n                    return true;\n                var parts = cellValue.split('/');\n                var cellDate = new Date(Number(parts[2]), Number(parts[1] - 1), Number(parts[0]));\n                return cellDate.getTime() === filterValue.getTime();\n            },\n        },\n        {\n            displayKey: 'leapYear',\n            displayName: 'Leap Year',\n            predicate: (_, cellValue) => {\n                if (cellValue == null)\n                    return true;\n                const year = Number(cellValue.split('/')[2]);\n                return year % 4 === 0 && year % 200 !== 0;\n            },\n            numberOfInputs: 0,\n        },\n        {\n            displayKey: 'betweenExclusive',\n            displayName: 'Between (Exclusive)',\n            predicate: ([fv1, fv2]: any[], cellValue) => {\n                if (cellValue == null)\n                    return true;\n                var parts = cellValue.split('/');\n                var cellDate = new Date(Number(parts[2]), Number(parts[1] - 1), Number(parts[0]));\n                return cellDate.getTime() > fv1.getTime() && cellDate.getTime() < fv2.getTime();\n            },\n            numberOfInputs: 2,\n        },\n    ] as IFilterOptionDef[],\n    comparator: (filterLocalDateAtMidnight: Date, cellValue: string) => {\n        var dateAsString = cellValue;\n        if (dateAsString == null)\n            return -1;\n        var dateParts = dateAsString.split('/');\n        var cellDate = new Date(Number(dateParts[2]), Number(dateParts[1]) - 1, Number(dateParts[0]));\n        if (filterLocalDateAtMidnight.getTime() === cellDate.getTime()) {\n            return 0;\n        }\n        if (cellDate < filterLocalDateAtMidnight) {\n            return -1;\n        }\n        if (cellDate > filterLocalDateAtMidnight) {\n            return 1;\n        }\n        return 0;\n    },\n};\n\nvar notEqualsFilterParams: ITextFilterParams = {\n    filterOptions: [\n        'notEqual',\n        {\n            displayKey: 'notEqualNoNulls',\n            displayName: 'Not Equals without Nulls',\n            predicate: ([filterValue], cellValue) => {\n                if (cellValue == null)\n                    return false;\n                return cellValue.toLowerCase() !== filterValue.toLowerCase();\n            },\n        },\n    ] as IFilterOptionDef[],\n};\n\n\n\nconst GridExample = () => {\n    const gridRef = useRef<AgGridReact<IOlympicData>>(null);\n    const containerStyle = useMemo(() => ({ width: '100%', height: '100%' }), []);\n    const gridStyle = useMemo(() => ({height: '100%', width: '100%'}), []);\n    const [rowData, setRowData] = useState<IOlympicData[]>();\n    const [columnDefs, setColumnDefs] = useState<ColDef[]>([\n    {\n        field: 'athlete',\n        filterParams: containsFilterParams,\n    },\n    {\n        field: 'age',\n        minWidth: 120,\n        filter: 'agNumberColumnFilter',\n        filterParams: filterParams,\n    },\n    {\n        field: 'date',\n        filter: 'agDateColumnFilter',\n        filterParams: equalsFilterParams,\n    },\n    {\n        field: 'country',\n        filterParams: notEqualsFilterParams,\n    },\n    { field: 'gold', filter: 'agNumberColumnFilter' },\n    { field: 'silver', filter: 'agNumberColumnFilter' },\n    { field: 'bronze', filter: 'agNumberColumnFilter' },\n    { field: 'total', filter: false },\n]);\n    const defaultColDef = useMemo<ColDef>(() => { return {\n    flex: 1,\n    minWidth: 150,\n    filter: true,\n} }, []);\n    const getLocaleText = useCallback((params: GetLocaleTextParams) => {\n    if (params.key === 'notEqualNoNulls') {\n        return '* Not Equals (No Nulls) *';\n    }\n    return params.defaultValue;\n}, []);\n\n\n            const onGridReady = useCallback((params: GridReadyEvent) => {\n                \n\n                fetch('https://www.ag-grid.com/example-assets/small-olympic-winners.json')\n                .then(resp => resp.json())\n                .then((data: IOlympicData[]) => {\n    setRowData( data);\n});\n            }, []);\n\nconst printState = useCallback(()   =>{\n    var filterState = gridRef.current!.api.getFilterModel();\n    console.log('filterState: ', filterState);\n}, [])\n\n   const saveState = useCallback(()   =>{\n    window.filterState = gridRef.current!.api.getFilterModel();\n    console.log('filter state saved');\n}, [])\n\n   const restoreState = useCallback(()   =>{\n    gridRef.current!.api.setFilterModel(window.filterState);\n    console.log('filter state restored');\n}, [window])\n\n   const resetState = useCallback(()   =>{\n    gridRef.current!.api.setFilterModel(null);\n    console.log('column state reset');\n}, [])\n\n    return  (\n            <div style={containerStyle}>\n                <div className=\"example-wrapper\">\n    <div style={{\"marginBottom\":\"5px\"}}>\n        <button onClick={printState}>Print State</button>\n        <button onClick={saveState}>Save State</button>\n        <button onClick={restoreState}>Restore State</button>\n        <button onClick={resetState}>Reset State</button>\n    </div>\n\n    \n        <div  style={gridStyle} className={/** DARK MODE START **/document.documentElement?.dataset.defaultTheme || 'ag-theme-quartz'/** DARK MODE END **/}>\n            <AgGridReact<IOlympicData>\n                ref={gridRef}\n                rowData={rowData}\ncolumnDefs={columnDefs}\ndefaultColDef={defaultColDef}\ngetLocaleText={getLocaleText}\nonGridReady={onGridReady}\n            />\n        </div>\n</div>\n\n            </div>\n        );\n\n}\n\nconst root = createRoot(document.getElementById('root')!);\nroot.render(<StrictMode><GridExample /></StrictMode>);\n","index.html":"<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px\">\n        <button onclick=\"printState()\">Print State</button>\n        <button onclick=\"saveState()\">Save State</button>\n        <button onclick=\"restoreState()\">Restore State</button>\n        <button onclick=\"resetState()\">Reset State</button>\n    </div>\n\n    <div id=\"myGrid\" class=\"ag-theme-quartz\" style=\"height: 100%\"></div>\n</div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.dev.js":"(function (global) {\n    var sjsPaths = {};\n    if (typeof systemJsPaths !== 'undefined') {\n        sjsPaths = systemJsPaths;\n    }\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...sjsPaths,\n        },\n        map: {\n            // css: boilerplatePath + \"css.js\",\n            css: 'npm:systemjs-plugin-css@0.1.37/css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.development.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.development.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.tsx',\n                defaultExtension: 'tsx',\n            },\n            '@ag-grid-community/react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-locale': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n            },\n            '@ag-grid-enterprise/clipboard': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-enterprise-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.tsx',\n                defaultExtension: 'tsx',\n            },\n            '@ag-grid-community/react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                format: 'cjs',\n            },\n            'ag-grid-locale': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/clipboard': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-modules","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","@ag-grid-community/react":"^31.3.1","@ag-grid-community/core":"^31.3.1","@ag-grid-community/styles":"^31.3.1","@ag-grid-community/client-side-row-model":"^31.3.1","@ag-grid-community/infinite-row-model":"^31.3.1","@ag-grid-community/csv-export":"^31.3.1","@ag-grid-enterprise/core":"^31.3.1","@ag-grid-enterprise/charts-enterprise":"^31.3.1","@ag-grid-enterprise/sparklines":"^31.3.1","@ag-grid-enterprise/clipboard":"^31.3.1","@ag-grid-enterprise/column-tool-panel":"^31.3.1","@ag-grid-enterprise/excel-export":"^31.3.1","@ag-grid-enterprise/filter-tool-panel":"^31.3.1","@ag-grid-enterprise/master-detail":"^31.3.1","@ag-grid-enterprise/menu":"^31.3.1","@ag-grid-enterprise/range-selection":"^31.3.1","@ag-grid-enterprise/rich-select":"^31.3.1","@ag-grid-enterprise/row-grouping":"^31.3.1","@ag-grid-enterprise/server-side-row-model":"^31.3.1","@ag-grid-enterprise/set-filter":"^31.3.1","@ag-grid-enterprise/multi-filter":"^31.3.1","@ag-grid-enterprise/advanced-filter":"^31.3.1","@ag-grid-enterprise/side-bar":"^31.3.1","@ag-grid-enterprise/status-bar":"^31.3.1","@ag-grid-enterprise/viewport-row-model":"^31.3.1"}}}