{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".test-grid {\n    height: 1px;\n    min-height: 1px;\n    flex-grow: 1;\n}\n\n.test-container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.test-header {\n    margin-bottom: 1rem;\n}\n\n.test-header button:not(:first-child) {\n    margin-left: 5px;\n}\n","data.js":"var LINUX_DISTROS = [\n    'Manjaro',\n    'MX Linux',\n    'Mint',\n    'elementary',\n    'Ubuntu',\n    'Debian',\n    'Fedora',\n    'Solus',\n    'openSUSE',\n    'Zorin',\n    'ReactOS',\n    'CentOS',\n    'Arch',\n    'KDE neon',\n    'deepin',\n    'antiX',\n    'Antergos',\n    'Kali',\n    'Parrot',\n    'Lite',\n    'ArcoLinux',\n    'FreeBSD',\n    'Ubuntu Kylin',\n    'Lubuntu',\n    'SparkyLinux',\n    'Peppermint',\n    'SmartOS',\n    'PCLinuxOS',\n    'Mageia',\n    'Endless',\n];\n\nvar CITIES = [\n    'Tokyo',\n    'Jakarta',\n    'Delhi',\n    'Manila',\n    'Seoul',\n    'Shanghai',\n    'Mumbai',\n    'New York',\n    'Beijing',\n    'Sao Paulo',\n    'Mexico City',\n    'Guangzhou',\n    'Dhaka',\n    'Osaka-Kobe-Kyoto',\n    'Moscow',\n    'Cairo',\n    'Bangkok',\n    'Los Angeles',\n    'Buenos Aires',\n];\n\nvar LAPTOPS = ['Hewlett Packard', 'Lenovo', 'Dell', 'Asus', 'Apple', 'Acer', 'Microsoft', 'Razer'];\n\nvar idCounter = 0;\n\nfunction letter(i) {\n    return 'abcdefghijklmnopqrstuvwxyz'.substring(i, i + 1);\n}\n\nfunction randomLetter() {\n    return letter(Math.floor(Math.random() * 26 + 1));\n}\n\nfunction createDataItem(\n    name,\n    distro,\n    laptop,\n    city,\n    value,\n    idToUse = undefined\n) {\n    const id = idToUse != null ? idToUse : idCounter++;\n    return {\n        id: id,\n        name: name,\n        city: city,\n        distro: distro,\n        laptop: laptop,\n        value: value,\n    };\n}\n\nfunction getData() {\n    var myRowData = [];\n    for (var i = 0; i < 10000; i++) {\n        var name =\n            'Mr ' +\n            randomLetter().toUpperCase() +\n            ' ' +\n            randomLetter().toUpperCase() +\n            randomLetter() +\n            randomLetter() +\n            randomLetter() +\n            randomLetter();\n        var city = CITIES[i % CITIES.length];\n        var distro = LINUX_DISTROS[i % LINUX_DISTROS.length] + ' v' + Math.floor(Math.random() * 100 + 1) / 10;\n        var university = LAPTOPS[i % LAPTOPS.length];\n        var value = Math.floor(Math.random() * 100) + 10; // between 10 and 110\n        myRowData.push(createDataItem(name, distro, university, city, value));\n    }\n    return myRowData;\n}\n","main.js":"var aggCallCount = 0;\nvar compareCallCount = 0;\nvar filterCallCount = 0;\nlet gridApi;\nfunction myAggFunc(params) {\n    aggCallCount++;\n\n    var total = 0;\n    for (var i = 0; i < params.values.length; i++) {\n        total += params.values[i];\n    }\n    return total;\n}\nfunction myComparator(a, b) {\n    compareCallCount++;\n    return a < b ? -1 : 1;\n}\n\nfunction getMyFilter() {\n    class MyFilter  {\n        filterParams;\n        filterValue;\n        eGui;\n        eInput;\n\n        init(params) {\n            this.filterParams = params;\n            this.filterValue = null;\n\n            this.eGui = document.createElement('div');\n            this.eGui.innerHTML = '<div>Greater Than: <input type=\"text\"/></div>';\n            this.eInput = this.eGui.querySelector('input');\n            this.eInput.addEventListener('input', () => {\n                this.getValueFromInput();\n                params.filterChangedCallback();\n            });\n        }\n\n        getGui() {\n            return this.eGui;\n        }\n\n        getValueFromInput() {\n            var value = parseInt(this.eInput.value);\n            this.filterValue = isNaN(value) ? null : value;\n        }\n\n        setModel(model) {\n            this.eInput.value = model == null ? null : model.value;\n            this.getValueFromInput();\n        }\n\n        getModel() {\n            if (!this.isFilterActive()) {\n                return null;\n            }\n\n            return { value: this.eInput.value };\n        }\n\n        isFilterActive() {\n            return this.filterValue !== null;\n        }\n\n        doesFilterPass(params) {\n            filterCallCount++;\n\n            const { node } = params;\n            const value = this.filterParams.getValue(node);\n\n            return value > (this.filterValue || 0);\n        }\n    }\n    return MyFilter;\n}\n\nvar myFilter = getMyFilter();\n\nfunction getRowId(params) {\n    return String(params.data.id);\n}\n\nfunction onBtDuplicate() {\n    // get the first child of the\n    var selectedRows = gridApi.getSelectedRows();\n    if (!selectedRows || selectedRows.length === 0) {\n        console.log('No rows selected!');\n        return;\n    }\n\n    var newItems = [];\n    selectedRows.forEach((selectedRow) => {\n        var newItem = createDataItem(\n            selectedRow.name,\n            selectedRow.distro,\n            selectedRow.laptop,\n            selectedRow.city,\n            selectedRow.value\n        );\n        newItems.push(newItem);\n    });\n\n    timeOperation('Duplicate', () => {\n        gridApi.applyTransaction({ add: newItems });\n    });\n}\n\nfunction onBtUpdate() {\n    // get the first child of the\n    var selectedRows = gridApi.getSelectedRows();\n    if (!selectedRows || selectedRows.length === 0) {\n        console.log('No rows selected!');\n        return;\n    }\n\n    var updatedItems = [];\n    selectedRows.forEach((oldItem) => {\n        var newValue = Math.floor(Math.random() * 100) + 10;\n        var newItem = createDataItem(oldItem.name, oldItem.distro, oldItem.laptop, oldItem.city, newValue, oldItem.id);\n        updatedItems.push(newItem);\n    });\n\n    timeOperation('Update', () => {\n        gridApi.applyTransaction({ update: updatedItems });\n    });\n}\n\nfunction onBtDelete() {\n    // get the first child of the\n    var selectedRows = gridApi.getSelectedRows();\n    if (!selectedRows || selectedRows.length === 0) {\n        console.log('No rows selected!');\n        return;\n    }\n\n    timeOperation('Delete', () => {\n        gridApi.applyTransaction({ remove: selectedRows });\n    });\n}\n\nfunction onBtClearSelection() {\n    gridApi.deselectAll();\n}\n\nfunction timeOperation(name, operation) {\n    aggCallCount = 0;\n    compareCallCount = 0;\n    filterCallCount = 0;\n    var start = new Date().getTime();\n    operation();\n    var end = new Date().getTime();\n    console.log(\n        name +\n            ' finished in ' +\n            (end - start) +\n            'ms, aggCallCount = ' +\n            aggCallCount +\n            ', compareCallCount = ' +\n            compareCallCount +\n            ', filterCallCount = ' +\n            filterCallCount\n    );\n}\n\nconst columnDefs = [\n    { field: 'city', rowGroup: true, hide: true },\n    { field: 'laptop', rowGroup: true, hide: true },\n    { field: 'distro', sort: 'asc', comparator: myComparator },\n    { field: 'value', enableCellChangeFlash: true, aggFunc: myAggFunc, filter: myFilter },\n];\n\nconst gridOptions = {\n    columnDefs: columnDefs,\n    defaultColDef: {\n        flex: 1,\n        filter: true,\n    },\n    getRowId: getRowId,\n    rowSelection: 'multiple',\n    groupSelectsChildren: true,\n    suppressRowClickSelection: true,\n    autoGroupColumnDef: {\n        field: 'name',\n        cellRendererParams: { checkbox: true },\n    },\n    onGridReady: (params) => {\n        params.api.setFilterModel({\n            value: { value: '50' },\n        });\n\n        timeOperation('Initialisation', () => {\n            params.api.setGridOption('rowData', getData());\n        });\n    },\n    isGroupOpenByDefault: isGroupOpenByDefault,\n};\n\nfunction isGroupOpenByDefault(params) {\n    return ['Delhi', 'Seoul'].includes(params.key);\n}\n\n// wait for the document to be loaded, otherwise\n// AG Grid will not find the div in the document.\ndocument.addEventListener('DOMContentLoaded', function () {\n    var eGridDiv = document.querySelector('#myGrid');\n    gridApi = agGrid.createGrid(eGridDiv, gridOptions); \n});\n","index.html":"<div class=\"test-container\">\n    <div class=\"test-header\">\n        <button onclick=\"onBtUpdate()\">Update</button>\n        <button onclick=\"onBtDuplicate()\">Duplicate</button>\n        <button onclick=\"onBtDelete()\">Delete</button>\n        <button onclick=\"onBtClearSelection()\">Clear Selection</button>\n    </div>\n    <div id=\"myGrid\" class=\"ag-theme-quartz test-grid\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}}}