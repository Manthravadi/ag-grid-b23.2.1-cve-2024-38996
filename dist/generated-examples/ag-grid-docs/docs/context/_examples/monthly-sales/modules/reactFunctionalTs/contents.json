{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"index.tsx","mainFileName":"index.tsx","scriptFiles":[],"styleFiles":[],"files":{"styles.css":".ag-basic .ag-cell {\n    padding-top: 2px !important;\n    padding-bottom: 2px !important;\n}\n\nlabel {\n    font-weight: normal !important;\n}\n\n.cell-act {\n    background: rgba(255, 0, 0, 0.1);\n}\n\n.cell-bud {\n    background: rgba(0, 255, 0, 0.1);\n}\n\n.legend-box {\n    display: inline-block;\n    border: 1px solid black;\n    width: 12px;\n    height: 12px;\n}\n\n.cell-figure {\n    text-align: right;\n}\n\n.test-grid {\n    flex-grow: 1;\n}\n\n.test-container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    font-size: 14px;\n}\n\n.test-container button {\n    font-size: 14px;\n    line-height: 20px;\n}\n\n.test-header {\n    margin-left: 20px;\n}\n","index.tsx":"'use strict';\n\nimport { ClientSideRowModelModule } from '@ag-grid-community/client-side-row-model';\nimport { ColDef, ColGroupDef, GridReadyEvent } from '@ag-grid-community/core';\nimport { ModuleRegistry } from '@ag-grid-community/core';\nimport { AgGridReact, CustomCellRendererProps, CustomGroupCellRendererProps } from '@ag-grid-community/react';\nimport '@ag-grid-community/styles/ag-grid.css';\nimport '@ag-grid-community/styles/ag-theme-quartz.css';\nimport { FiltersToolPanelModule } from '@ag-grid-enterprise/filter-tool-panel';\nimport { RowGroupingModule } from '@ag-grid-enterprise/row-grouping';\nimport { SetFilterModule } from '@ag-grid-enterprise/set-filter';\nimport React, { StrictMode, useCallback, useMemo, useRef, useState } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport './styles.css';\n\nModuleRegistry.registerModules([ClientSideRowModelModule, RowGroupingModule, SetFilterModule, FiltersToolPanelModule]);\n\nconst monthValueGetter =\n    '(ctx.month < ctx.months.indexOf(colDef.field)) ? data[colDef.field + \"_bud\"] : data[colDef.field + \"_act\"]';\n\nconst monthCellClassRules = {\n    'cell-act': 'ctx.month < ctx.months.indexOf(colDef.field)',\n    'cell-bud': 'ctx.month >= ctx.months.indexOf(colDef.field)',\n    'cell-negative': 'x < 0',\n};\n\nconst yearToDateValueGetter =\n    'var total = 0; ctx.months.forEach( function(monthName, monthIndex) { if (monthIndex<=ctx.month) { total += data[monthName + \"_act\"]; } }); return total; ';\n\nconst accountingCellRenderer = function (params: CustomCellRendererProps) {\n    if (params.value == null) {\n        return '';\n    } else if (params.value >= 0) {\n        return params.value.toLocaleString();\n    } else {\n        return '(' + Math.abs(params.value).toLocaleString() + ')';\n    }\n};\n\nconst monthNames = [\n    'Budget Only',\n    'Year to Jan',\n    'Year to Feb',\n    'Year to Mar',\n    'Year to Apr',\n    'Year to May',\n    'Year to Jun',\n    'Year to Jul',\n    'Year to Aug',\n    'Year to Sep',\n    'Year to Oct',\n    'Year to Nov',\n    'Full Year',\n];\n\nconst GridExample = () => {\n    const gridRef = useRef<AgGridReact>(null);\n    const containerStyle = useMemo(() => ({ width: '100%', height: '100%' }), []);\n    const gridStyle = useMemo(() => ({ height: '100%', width: '100%' }), []);\n    const [rowData, setRowData] = useState<any[]>();\n    const [columnDefs, setColumnDefs] = useState<(ColDef | ColGroupDef)[]>([\n        {\n            field: 'country',\n            rowGroup: true,\n            hide: true,\n        },\n        {\n            headerName: 'Monthly Data',\n            children: [\n                {\n                    field: 'jan',\n                    cellRenderer: accountingCellRenderer,\n                    cellClass: 'cell-figure',\n                    valueGetter: monthValueGetter,\n                    cellClassRules: monthCellClassRules,\n                    aggFunc: 'sum',\n                },\n                {\n                    field: 'feb',\n                    cellRenderer: accountingCellRenderer,\n                    cellClass: 'cell-figure',\n                    valueGetter: monthValueGetter,\n                    cellClassRules: monthCellClassRules,\n                    aggFunc: 'sum',\n                },\n                {\n                    field: 'mar',\n                    cellRenderer: accountingCellRenderer,\n                    cellClass: 'cell-figure',\n                    valueGetter: monthValueGetter,\n                    cellClassRules: monthCellClassRules,\n                    aggFunc: 'sum',\n                },\n                {\n                    field: 'apr',\n                    cellRenderer: accountingCellRenderer,\n                    cellClass: 'cell-figure',\n                    valueGetter: monthValueGetter,\n                    cellClassRules: monthCellClassRules,\n                    aggFunc: 'sum',\n                },\n                {\n                    field: 'may',\n                    cellRenderer: accountingCellRenderer,\n                    cellClass: 'cell-figure',\n                    valueGetter: monthValueGetter,\n                    cellClassRules: monthCellClassRules,\n                    aggFunc: 'sum',\n                },\n                {\n                    field: 'jun',\n                    cellRenderer: accountingCellRenderer,\n                    cellClass: 'cell-figure',\n                    valueGetter: monthValueGetter,\n                    cellClassRules: monthCellClassRules,\n                    aggFunc: 'sum',\n                },\n                {\n                    headerName: 'YTD',\n                    cellClass: 'cell-figure',\n                    cellRenderer: accountingCellRenderer,\n                    valueGetter: yearToDateValueGetter,\n                    aggFunc: 'sum',\n                },\n            ],\n        },\n    ]);\n    const context = useRef<{ month: number; months: string[] }>({\n        month: 0,\n        months: ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'],\n    });\n    const defaultColDef = useMemo<ColDef>(() => {\n        return {\n            flex: 1,\n            minWidth: 120,\n        };\n    }, []);\n    const autoGroupColumnDef = useMemo<ColDef>(() => {\n        return {\n            headerName: 'Location',\n            field: 'city',\n            minWidth: 260,\n            cellRenderer: 'agGroupCellRenderer',\n            cellRendererParams: {\n                checkbox: true,\n            } as CustomGroupCellRendererProps,\n        };\n    }, []);\n\n    const onGridReady = useCallback((params: GridReadyEvent) => {\n        fetch('https://www.ag-grid.com/example-assets/monthly-sales.json')\n            .then((resp) => resp.json())\n            .then((data: any[]) => {\n                setRowData(data);\n            });\n    }, []);\n\n    const onChangeMonth = useCallback(\n        (i: number) => {\n            var newMonth = (context.current.month += i);\n            if (newMonth < -1) {\n                newMonth = -1;\n            }\n            if (newMonth > 5) {\n                newMonth = 5;\n            }\n            // Mutate the context object in place\n            context.current.month = newMonth;\n            document.querySelector('#monthName')!.textContent = monthNames[newMonth + 1];\n            gridRef.current!.api.refreshClientSideRowModel('aggregate');\n            gridRef.current!.api.refreshCells();\n        },\n        [monthNames]\n    );\n\n    const onQuickFilterChanged = useCallback((value: string) => {\n        gridRef.current!.api.setGridOption('quickFilterText', value);\n    }, []);\n\n    return (\n        <div style={containerStyle}>\n            <div className=\"test-container\">\n                <div className=\"test-header\">\n                    <input\n                        type=\"text\"\n                        id=\"filter-text-box\"\n                        style={{ width: '100px' }}\n                        onChange={(e) => onQuickFilterChanged(e.target.value)}\n                        placeholder=\"Filter...\"\n                    />\n\n                    <span style={{ paddingLeft: '20px' }}>\n                        <b>Period:</b>\n                        <button onClick={() => onChangeMonth(-1)}>\n                            <i className=\"fa fa-chevron-left\"></i>\n                        </button>\n                        <button onClick={() => onChangeMonth(1)}>\n                            <i className=\"fa fa-chevron-right\"></i>\n                        </button>\n                        <span id=\"monthName\" style={{ width: '100px', display: 'inline-block' }}>\n                            Year to Jan\n                        </span>\n                    </span>\n\n                    <span style={{ paddingLeft: '20px' }}>\n                        <b>Legend:</b>&nbsp;&nbsp;\n                        <div className=\"cell-bud legend-box\"></div> Actual&nbsp;&nbsp;\n                        <div className=\"cell-act legend-box\"></div> Budget\n                    </span>\n                </div>\n\n                <div\n                    style={gridStyle}\n                    className={\n                        /** DARK MODE START **/ document.documentElement?.dataset.defaultTheme ||\n                        'ag-theme-quartz' /** DARK MODE END **/\n                    }\n                >\n                    <AgGridReact\n                        ref={gridRef}\n                        rowData={rowData}\n                        columnDefs={columnDefs}\n                        suppressMovableColumns={true}\n                        context={context.current}\n                        defaultColDef={defaultColDef}\n                        autoGroupColumnDef={autoGroupColumnDef}\n                        rowSelection={'multiple'}\n                        groupSelectsChildren={true}\n                        onGridReady={onGridReady}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst root = createRoot(document.getElementById('root')!);\nroot.render(\n    <StrictMode>\n        <GridExample />\n    </StrictMode>\n);\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.dev.js":"(function (global) {\n    var sjsPaths = {};\n    if (typeof systemJsPaths !== 'undefined') {\n        sjsPaths = systemJsPaths;\n    }\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...sjsPaths,\n        },\n        map: {\n            // css: boilerplatePath + \"css.js\",\n            css: 'npm:systemjs-plugin-css@0.1.37/css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.development.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.development.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.tsx',\n                defaultExtension: 'tsx',\n            },\n            '@ag-grid-community/react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-locale': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n            },\n            '@ag-grid-enterprise/clipboard': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-enterprise-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            jsx: 'react',\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.tsx',\n                defaultExtension: 'tsx',\n            },\n            '@ag-grid-community/react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                format: 'cjs',\n            },\n            'ag-grid-locale': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/clipboard': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-modules","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","@ag-grid-community/react":"^31.3.1","@ag-grid-community/core":"^31.3.1","@ag-grid-community/styles":"^31.3.1","@ag-grid-community/client-side-row-model":"^31.3.1","@ag-grid-community/infinite-row-model":"^31.3.1","@ag-grid-community/csv-export":"^31.3.1","@ag-grid-enterprise/core":"^31.3.1","@ag-grid-enterprise/charts-enterprise":"^31.3.1","@ag-grid-enterprise/sparklines":"^31.3.1","@ag-grid-enterprise/clipboard":"^31.3.1","@ag-grid-enterprise/column-tool-panel":"^31.3.1","@ag-grid-enterprise/excel-export":"^31.3.1","@ag-grid-enterprise/filter-tool-panel":"^31.3.1","@ag-grid-enterprise/master-detail":"^31.3.1","@ag-grid-enterprise/menu":"^31.3.1","@ag-grid-enterprise/range-selection":"^31.3.1","@ag-grid-enterprise/rich-select":"^31.3.1","@ag-grid-enterprise/row-grouping":"^31.3.1","@ag-grid-enterprise/server-side-row-model":"^31.3.1","@ag-grid-enterprise/set-filter":"^31.3.1","@ag-grid-enterprise/multi-filter":"^31.3.1","@ag-grid-enterprise/advanced-filter":"^31.3.1","@ag-grid-enterprise/side-bar":"^31.3.1","@ag-grid-enterprise/status-bar":"^31.3.1","@ag-grid-enterprise/viewport-row-model":"^31.3.1"}},"extras":["fontawesome"]}