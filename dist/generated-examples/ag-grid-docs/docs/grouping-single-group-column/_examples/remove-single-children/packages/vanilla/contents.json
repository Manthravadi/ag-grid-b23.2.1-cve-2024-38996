{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n\n.example-header {\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    font-size: 13px;\n    margin-bottom: 5px;\n}\n","data.js":"function getData() {\n    return [\n        {\n            athlete: 'Niall',\n            country: 'Ireland',\n            city: 'Dublin',\n            year: '2016',\n            gold: 10,\n            silver: 10,\n            bronze: 10,\n        },\n        {\n            athlete: 'John',\n            country: 'Ireland',\n            city: 'Dublin',\n            year: '2016',\n            gold: 5,\n            silver: 5,\n            bronze: 5,\n        },\n        {\n            athlete: 'Rob',\n            country: 'Ireland',\n            city: 'Dublin',\n            year: '2016',\n            gold: 2,\n            silver: 2,\n            bronze: 2,\n        },\n        {\n            athlete: 'Bas',\n            country: 'Pakistan',\n            city: 'Ardabil',\n            year: '2016',\n            gold: 2,\n            silver: 2,\n            bronze: 2,\n        },\n        {\n            athlete: 'Dimple',\n            country: 'India',\n            city: 'Delhi',\n            year: '2016',\n            gold: 2,\n            silver: 2,\n            bronze: 2,\n        },\n        {\n            athlete: 'Jack',\n            country: 'South Africa',\n            city: 'Cape Town',\n            year: '2016',\n            gold: 2,\n            silver: 2,\n            bronze: 2,\n        },\n        {\n            athlete: 'Tiger',\n            country: 'South Africa',\n            city: 'Johannesburg',\n            year: '2016',\n            gold: 2,\n            silver: 2,\n            bronze: 2,\n        },\n        {\n            athlete: 'Jack',\n            country: 'Germany',\n            city: 'Berlin',\n            year: '2016',\n            gold: 2,\n            silver: 2,\n            bronze: 2,\n        },\n        {\n            athlete: 'Mike',\n            country: 'France',\n            city: 'Paris',\n            year: '2016',\n            gold: 2,\n            silver: 2,\n            bronze: 2,\n        },\n    ];\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n    columnDefs: [\n        { field: 'athlete' },\n        { field: 'country', rowGroup: true },\n        { field: 'city', rowGroup: true },\n        { field: 'year' },\n        { field: 'gold', aggFunc: 'sum' },\n        { field: 'silver', aggFunc: 'sum' },\n        { field: 'bronze', aggFunc: 'sum' },\n    ],\n    defaultColDef: {\n        flex: 1,\n        minWidth: 150,\n    },\n    autoGroupColumnDef: {\n        headerName: 'Group',\n        field: 'athlete',\n        minWidth: 220,\n        cellRenderer: 'agGroupCellRenderer',\n    },\n    rowData: getData(),\n\n    // optional as 'singleColumn' is the default group display type\n    groupDisplayType: 'singleColumn',\n\n    // set this to true to remove single children\n    groupRemoveSingleChildren: false,\n\n    // set this to true to remove leaf level single children\n    groupRemoveLowestSingleChildren: false,\n\n    // expand everything by default\n    groupDefaultExpanded: -1,\n\n    suppressAggFuncInHeader: true,\n};\n\nfunction changeSelection(type) {\n    // normal, single or lowest\n    if (type === 'normal') {\n        gridApi.updateGridOptions({ groupRemoveSingleChildren: false, groupRemoveLowestSingleChildren: false });\n    } else if (type === 'single') {\n        gridApi.updateGridOptions({ groupRemoveSingleChildren: true, groupRemoveLowestSingleChildren: false });\n    } else if (type === 'lowest') {\n        gridApi.updateGridOptions({ groupRemoveSingleChildren: false, groupRemoveLowestSingleChildren: true });\n    } else {\n        console.log('unknown type: ' + type);\n    }\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', function () {\n    var gridDiv = document.querySelector('#myGrid');\n    gridApi = agGrid.createGrid(gridDiv, gridOptions); \n});\n","index.html":"<div class=\"example-wrapper\">\n    <div class=\"example-header\">\n        <button style=\"margin: 6px\" onclick=\"changeSelection('normal')\">Normal</button>\n\n        <button style=\"margin: 6px\" onclick=\"changeSelection('single')\">Remove Single Children</button>\n\n        <button style=\"margin: 6px\" onclick=\"changeSelection('lowest')\">Remove Lowest Single Children</button>\n    </div>\n    <div id=\"myGrid\" class=\"ag-theme-quartz\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}}}