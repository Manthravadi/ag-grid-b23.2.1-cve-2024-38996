{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"class DatePicker  {\n    eInput;\n\n    // gets called once before the renderer is used\n    init(params) {\n        // create the cell\n        this.eInput = document.createElement('input');\n        this.eInput.value = params.value;\n        this.eInput.classList.add('ag-input');\n        this.eInput.style.height = 'var(--ag-row-height)';\n        this.eInput.style.fontSize = 'calc(var(--ag-font-size) + 1px)';\n\n        // https://jqueryui.com/datepicker/\n        $(this.eInput).datepicker({\n            dateFormat: 'dd/mm/yy',\n            onSelect: () => {\n                this.eInput.focus();\n            },\n        });\n    }\n\n    // gets called once when grid ready to insert the element\n    getGui() {\n        return this.eInput;\n    }\n\n    // focus and select can be done after the gui is attached\n    afterGuiAttached() {\n        this.eInput.focus();\n        this.eInput.select();\n    }\n\n    // returns the new value after editing\n    getValue() {\n        return this.eInput.value;\n    }\n\n    // any cleanup we need to be done here\n    destroy() {\n        // but this example is simple, no cleanup, we could\n        // even leave this method out as it's optional\n    }\n\n    // if true, then this editor will appear in a popup\n    isPopup() {\n        // and we could leave this method out also, false is the default\n        return false;\n    }\n}\n\nconst columnDefs = [\n    { field: 'athlete' },\n    { field: 'date', editable: true, cellEditor: DatePicker, cellEditorPopup: true },\n    { field: 'age', maxWidth: 110 },\n    { field: 'country' },\n    { field: 'year', maxWidth: 120 },\n    { field: 'sport' },\n    { field: 'gold' },\n    { field: 'silver' },\n    { field: 'bronze' },\n    { field: 'total' },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n    columnDefs: columnDefs,\n    defaultColDef: {\n        flex: 1,\n        minWidth: 150,\n    },\n};\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', () => {\n    const gridDiv = document.querySelector('#myGrid');\n    gridApi = agGrid.createGrid(gridDiv, gridOptions); \n\n    fetch('https://www.ag-grid.com/example-assets/olympic-winners.json')\n        .then((response) => response.json())\n        .then((data) => gridApi.setGridOption('rowData', data));\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\" class=\"ag-theme-quartz\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}},"extras":["jquery","jqueryui"]}