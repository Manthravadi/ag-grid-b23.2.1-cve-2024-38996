{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":true,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":["style.css"],"files":{"style.css":".wrapper {\n    display: flex;\n    flex-direction: column;\n    height: calc(100% - 50px);\n    margin-top: 5px;\n}\n\n#axisBtn {\n    text-transform: capitalize;\n}\n\n#myGrid {\n    height: 300px;\n    flex: none;\n}\n\n.my-chart {\n    height: 400px;\n    flex: none;\n}\n","data.js":"async function getData(delay = 100) {\n    return new Promise((resolve) => setTimeout(() => resolve(data), delay));\n}\n\nconst data = [\n    { date: new Date(2019, 0, 1), avgTemp: 8.27 },\n    { date: new Date(2019, 0, 5), avgTemp: 7.22 },\n    { date: new Date(2019, 0, 8), avgTemp: 11.54 },\n    { date: new Date(2019, 0, 11), avgTemp: 8.44 },\n    { date: new Date(2019, 0, 22), avgTemp: 12.03 },\n    { date: new Date(2019, 0, 23), avgTemp: 9.68 },\n    { date: new Date(2019, 0, 24), avgTemp: 9.9 },\n    { date: new Date(2019, 0, 25), avgTemp: 8.74 },\n];\n","main.js":"let gridApi;\nlet currentChartRef;\n\nfunction getColumnDefs() {\n    return [{ field: 'date', valueFormatter: dateFormatter }, { field: 'avgTemp' }];\n}\n\nconst gridOptions = {\n    columnDefs: getColumnDefs(),\n    defaultColDef: { flex: 1 },\n    enableRangeSelection: true,\n    enableCharts: true,\n    chartThemeOverrides: {\n        line: {\n            title: {\n                enabled: true,\n                text: 'Average Daily Temperatures',\n            },\n            navigator: {\n                enabled: true,\n                height: 20,\n                spacing: 25,\n            },\n            axes: {\n                time: {\n                    label: {\n                        rotation: 0,\n                        format: '%d %b',\n                    },\n                },\n                category: {\n                    label: {\n                        rotation: 0,\n                        formatter: (params) => {\n                            // charts typings\n                            return formatDate(params.value);\n                        },\n                    },\n                },\n                number: {\n                    label: {\n                        formatter: (params) => {\n                            // charts typings\n                            return params.value + '°C';\n                        },\n                    },\n                },\n            },\n            series: {\n                tooltip: {\n                    renderer: ({ datum, xKey, yKey }) => {\n                        return {\n                            content: `${formatDate(datum[xKey])}: ${Math.round(datum[yKey])}°C`,\n                        };\n                    },\n                },\n            },\n        },\n    },\n    chartToolPanelsDef: {\n        panels: ['data', 'format'],\n    },\n    onGridReady: (params) => {\n        getData().then((rowData) => params.api.setGridOption('rowData', rowData));\n    },\n    onFirstDataRendered,\n};\n\nfunction onFirstDataRendered(params) {\n    if (currentChartRef) {\n        currentChartRef.destroyChart();\n    }\n\n    currentChartRef = params.api.createRangeChart({\n        chartContainer: document.querySelector('#myChart') ,\n        cellRange: {\n            columns: ['date', 'avgTemp'],\n        },\n        suppressChartRanges: true,\n        chartType: 'line',\n    });\n}\n\nfunction dateFormatter(params) {\n    return params.value ? params.value.toISOString().substring(0, 10) : params.value;\n}\n\nfunction toggleAxis() {\n    const axisBtn = document.querySelector('#axisBtn') ;\n    axisBtn.textContent = axisBtn.value;\n    axisBtn.value = axisBtn.value === 'time' ? 'category' : 'time';\n\n    const columnDefs = getColumnDefs();\n    columnDefs.forEach((colDef) => {\n        if (colDef.field === 'date') {\n            colDef.chartDataType = axisBtn.value;\n        }\n    });\n\n    gridApi.setGridOption('columnDefs', columnDefs);\n}\n\nfunction formatDate(date) {\n    return Intl.DateTimeFormat('en-GB', { day: '2-digit', month: 'short', year: undefined }).format(new Date(date));\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', function () {\n    const gridDiv = document.querySelector('#myGrid');\n    gridApi = agGrid.createGrid(gridDiv, gridOptions); /** DARK INTEGRATED START **/\n    const isInitialModeDark = () => {\n            const attr = document.documentElement.getAttribute('data-default-theme');\n            return attr ? attr.endsWith('-dark') : false;\n        };\n      \n        const updateChartThemes = (isDark) => {           \n            const themes = ['ag-default', 'ag-material', 'ag-sheets', 'ag-polychroma', 'ag-vivid'];            \n            const currentThemes = gridApi.getGridOption('chartThemes');                    \n            const customTheme = currentThemes && currentThemes.some(theme => theme.startsWith('my-custom-theme'));\n            \n            let modifiedThemes = customTheme\n                ? (isDark ? ['my-custom-theme-dark', 'my-custom-theme-light'] : ['my-custom-theme-light', 'my-custom-theme-dark'])\n                : Array.from(new Set(themes.map((theme) => theme + (isDark ? '-dark' : ''))));                      \n\n            // updating the 'chartThemes' grid option will cause the chart to reactively update!\n            gridApi.setGridOption('chartThemes', modifiedThemes);\n        };\n\n        // update chart themes when example first loads\n        updateChartThemes(isInitialModeDark());\n\n        const handleColorSchemeChange = (event) => {\n            const { darkMode } = event.detail;\n            updateChartThemes(darkMode);\n        }\n\n        // listen for user-triggered dark mode changes (not removing listener is fine here!)\n        document.addEventListener('color-scheme-change', handleColorSchemeChange);\n    /** DARK INTEGRATED END **/\n});\n","index.html":"<label>Switch Axis to: </label>\n<button id=\"axisBtn\" onclick=\"toggleAxis()\" value=\"time\">Category</button>\n<div class=\"wrapper\">\n    <div id=\"myGrid\" class=\"ag-theme-quartz my-grid\"></div>\n    <div id=\"myChart\" class=\"ag-theme-quartz my-chart\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}}}