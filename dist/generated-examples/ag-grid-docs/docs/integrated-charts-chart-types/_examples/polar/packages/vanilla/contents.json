{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":true,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":["style.css"],"files":{"style.css":".wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n.button-container {\n    flex-wrap: wrap;\n}\n\n#myGrid {\n    flex: 1;\n}\n\n#myChart {\n    flex: 2;\n    min-height: 530px;\n}\n","data.js":"async function getData(delay = 100) {\n    return new Promise((resolve) => setTimeout(() => resolve(generateData()), delay));\n}\n\nfunction generateData() {\n    return [\n        { division: 'Sales', recurring: 485829, individual: 263971 },\n        { division: 'Finance', recurring: 291245, individual: 46821 },\n        { division: 'Consultancy', recurring: 315284, individual: 216473 },\n        { division: 'Operations', recurring: 154319, individual: 29867 },\n        { division: 'Media', recurring: 215284, individual: 61473 },\n    ];\n}\n","main.js":"let gridApi;\nlet chartRef;\n\nconst gridOptions = {\n    columnDefs: [\n        { field: 'division', chartDataType: 'category', width: 150 },\n        { field: 'recurring', chartDataType: 'series', headerName: 'Recurring revenue' },\n        { field: 'individual', chartDataType: 'series', headerName: 'Individual sales' },\n    ],\n    defaultColDef: {\n        flex: 1,\n        minWidth: 100,\n    },\n    popupParent: document.body,\n    enableRangeSelection: true,\n    enableCharts: true,\n    chartToolPanelsDef: {\n        defaultToolPanel: 'settings',\n    },\n    onGridReady: (params) => {\n        getData().then((rowData) => params.api.setGridOption('rowData', rowData));\n    },\n    onFirstDataRendered,\n};\n\nfunction onFirstDataRendered(params) {\n    chartRef = params.api.createRangeChart({\n        chartContainer: document.querySelector('#myChart') ,\n        cellRange: {\n            columns: ['division', 'recurring', 'individual'],\n        },\n        chartType: 'radarLine',\n    });\n}\n\nfunction updateChart(chartType) {\n    gridApi.updateChart({\n        type: 'rangeChartUpdate',\n        chartId: `${chartRef.chartId}`,\n        chartType: chartType,\n    });\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', function () {\n    const gridDiv = document.querySelector('#myGrid');\n    gridApi = agGrid.createGrid(gridDiv, gridOptions); /** DARK INTEGRATED START **/\n    const isInitialModeDark = () => {\n            const attr = document.documentElement.getAttribute('data-default-theme');\n            return attr ? attr.endsWith('-dark') : false;\n        };\n      \n        const updateChartThemes = (isDark) => {           \n            const themes = ['ag-default', 'ag-material', 'ag-sheets', 'ag-polychroma', 'ag-vivid'];            \n            const currentThemes = gridApi.getGridOption('chartThemes');                    \n            const customTheme = currentThemes && currentThemes.some(theme => theme.startsWith('my-custom-theme'));\n            \n            let modifiedThemes = customTheme\n                ? (isDark ? ['my-custom-theme-dark', 'my-custom-theme-light'] : ['my-custom-theme-light', 'my-custom-theme-dark'])\n                : Array.from(new Set(themes.map((theme) => theme + (isDark ? '-dark' : ''))));                      \n\n            // updating the 'chartThemes' grid option will cause the chart to reactively update!\n            gridApi.setGridOption('chartThemes', modifiedThemes);\n        };\n\n        // update chart themes when example first loads\n        updateChartThemes(isInitialModeDark());\n\n        const handleColorSchemeChange = (event) => {\n            const { darkMode } = event.detail;\n            updateChartThemes(darkMode);\n        }\n\n        // listen for user-triggered dark mode changes (not removing listener is fine here!)\n        document.addEventListener('color-scheme-change', handleColorSchemeChange);\n    /** DARK INTEGRATED END **/\n});\n","index.html":"<div class=\"wrapper\">\n    <div class=\"button-container\">\n        <button onclick=\"updateChart('radarLine')\">Radar Line</button>\n        <button onclick=\"updateChart('radarArea')\">Radar Area</button>\n        <button onclick=\"updateChart('nightingale')\">Nightingale</button>\n        <button onclick=\"updateChart('radialColumn')\">Radial Column</button>\n        <button onclick=\"updateChart('radialBar')\">Radial Bar</button>\n    </div>\n    <div id=\"myGrid\" class=\"ag-theme-quartz\"></div>\n    <div id=\"myChart\" class=\"ag-theme-quartz\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}}}