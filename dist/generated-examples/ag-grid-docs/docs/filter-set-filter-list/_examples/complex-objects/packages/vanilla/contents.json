{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n    columnDefs: [\n        {\n            headerName: 'Country',\n            field: 'country',\n            valueFormatter: countryValueFormatter,\n            filter: 'agSetColumnFilter',\n            filterParams: {\n                valueFormatter: countryValueFormatter,\n                keyCreator: countryCodeKeyCreator,\n            } ,\n        },\n    ],\n    defaultColDef: {\n        flex: 1,\n        floatingFilter: true,\n        cellDataType: false,\n    },\n    sideBar: 'filters',\n    onFirstDataRendered: onFirstDataRendered,\n};\n\nfunction countryCodeKeyCreator(params) {\n    var countryObject = params.value;\n    return countryObject.code;\n}\n\nfunction countryValueFormatter(params) {\n    return params.value.name;\n}\n\nfunction printFilterModel() {\n    var filterModel = gridApi.getFilterModel();\n    console.log(filterModel);\n}\n\nfunction onFirstDataRendered(params) {\n    params.api.getToolPanelInstance('filters').expandFilters();\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', function () {\n    var gridDiv = document.querySelector('#myGrid');\n    gridApi = agGrid.createGrid(gridDiv, gridOptions); \n\n    fetch('https://www.ag-grid.com/example-assets/olympic-winners.json')\n        .then((response) => response.json())\n        .then(function (data) {\n            // hack the data, replace each country with an object of country name and code.\n            // also make country codes unique\n            const uniqueCountryCodes = new Map();\n            const newData = [];\n            data.forEach(function (row) {\n                const countryName = row.country;\n                const countryCode = countryName.substring(0, 2).toUpperCase();\n                const uniqueCountryName = uniqueCountryCodes.get(countryCode);\n                if (!uniqueCountryName || uniqueCountryName === countryName) {\n                    uniqueCountryCodes.set(countryCode, countryName);\n                    row.country = {\n                        name: countryName,\n                        code: countryCode,\n                    };\n                    newData.push(row);\n                }\n            });\n\n            gridApi.setGridOption('rowData', newData);\n        });\n});\n","index.html":"<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px\">\n        <button onclick=\"printFilterModel()\">Print Filter Model</button>\n    </div>\n    <div id=\"myGrid\" class=\"ag-theme-quartz\"></div>\n</div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}}}