{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"app.component.ts","styleFiles":[],"files":{"main.ts":"import '@angular/compiler';\nimport { enableProdMode } from '@angular/core';\nimport { bootstrapApplication } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\nif ((window as any).ENABLE_PROD_MODE) {\n    enableProdMode();\n}\n\nbootstrapApplication(AppComponent);\n","app.component.ts":"\nimport { Component } from '@angular/core';\nimport { AgGridAngular } from '@ag-grid-community/angular';\n// NOTE: Angular CLI does not support component CSS imports: angular-cli/issues/23273\nimport '@ag-grid-community/styles/ag-grid.css';\nimport \"@ag-grid-community/styles/ag-theme-quartz.css\";\nimport { ColDef, ColGroupDef, GetRowIdFunc, GetRowIdParams, GridApi, GridOptions, GridReadyEvent, ICellRendererParams, IDatasource, IGetRowsParams, ModuleRegistry, RowClassParams, RowModelType, RowStyle, ValueFormatterParams, createGrid } from '@ag-grid-community/core';\nimport { InfiniteRowModelModule } from '@ag-grid-community/infinite-row-model';\nModuleRegistry.registerModules([InfiniteRowModelModule]);\n\n\n\n@Component({\n    selector: 'my-app',\n    standalone: true,\n    imports: [AgGridAngular],\n    template: `<div style=\"display: flex; flex-direction: column; height: 100%\">\n    <div style=\"margin-bottom: 10px\">\n        <button (click)=\"insertItemsAt2AndRefresh(5)\">Insert Rows</button>\n        <button (click)=\"removeItem(3, 10)\">Delete Rows</button>\n        <button (click)=\"setRowCountTo200()\">Set Row Count</button>\n        <button (click)=\"rowsAndMaxFound()\">Print Info</button>\n        <button (click)=\"jumpTo500()\">Jump to 500</button>\n    </div>\n    <div style=\"margin-bottom: 10px\">\n        <button (click)=\"setPricesHigh()\">Set Prices High</button>\n        <button (click)=\"setPricesLow()\">Set Prices Low</button>\n        <button (click)=\"refreshCache()\">Refresh Cache</button>\n        <button (click)=\"purgeCache()\">Purge Cache</button>\n    </div>\n    <div style=\"flex-grow: 1\">\n        <ag-grid-angular\n    \n    style=\"width: 100%; height: 100%;\"\n    [columnDefs]=\"columnDefs\"\n    [datasource]=\"datasource\"\n    [defaultColDef]=\"defaultColDef\"\n    [rowSelection]=\"rowSelection\"\n    [rowModelType]=\"rowModelType\"\n    [maxBlocksInCache]=\"maxBlocksInCache\"\n    [infiniteInitialRowCount]=\"infiniteInitialRowCount\"\n    [maxConcurrentDatasourceRequests]=\"maxConcurrentDatasourceRequests\"\n    [getRowId]=\"getRowId\"\n    [getRowStyle]=\"getRowStyle\"\n    [rowData]=\"rowData\"\n    [class]=\"themeClass\"\n    (gridReady)=\"onGridReady($event)\"\n     />\n    </div>\n</div>\n`\n})\n\nexport class AppComponent {\n    private gridApi!: GridApi;\n\n    \n    public columnDefs: ColDef[] = [\n    {\n        headerName: 'Item ID',\n        field: 'id',\n        valueGetter: 'node.id',\n        cellRenderer: (params: ICellRendererParams) => {\n            if (params.value !== undefined) {\n                return params.value;\n            }\n            else {\n                return '<img src=\"https://www.ag-grid.com/example-assets/loading.gif\">';\n            }\n        },\n    },\n    { field: 'make' },\n    { field: 'model' },\n    {\n        field: 'price',\n        valueFormatter: valueFormatter,\n    },\n];\npublic datasource: IDatasource = {\n    rowCount: undefined, // behave as infinite scroll\n    getRows: (params: IGetRowsParams) => {\n        console.log('asking for ' + params.startRow + ' to ' + params.endRow);\n        // At this point in your code, you would call the server.\n        // To make the demo look real, wait for 500ms before returning\n        setTimeout(() => {\n            // take a slice of the total rows\n            const rowsThisPage = allOfTheData.slice(params.startRow, params.endRow);\n            // make a copy of each row - this is what would happen if taking data from server\n            for (let i = 0; i < rowsThisPage.length; i++) {\n                const item = rowsThisPage[i];\n                // this is a trick to copy an object\n                const itemCopy = JSON.parse(JSON.stringify(item));\n                rowsThisPage[i] = itemCopy;\n            }\n            // if on or after the last page, work out the last row.\n            let lastRow = -1;\n            if (allOfTheData.length <= params.endRow) {\n                lastRow = allOfTheData.length;\n            }\n            // call the success callback\n            params.successCallback(rowsThisPage, lastRow);\n        }, 500);\n    },\n};\npublic defaultColDef: ColDef = {\n    flex: 1,\n    sortable: false,\n};\npublic rowSelection: 'single' | 'multiple' = 'multiple';\npublic rowModelType: RowModelType = 'infinite';\npublic maxBlocksInCache = 2;\npublic infiniteInitialRowCount = 500;\npublic maxConcurrentDatasourceRequests = 2;\npublic getRowId: GetRowIdFunc = (params: GetRowIdParams) => {\n    return params.data.id.toString();\n};\npublic getRowStyle: (params: RowClassParams) => RowStyle | undefined = (params: RowClassParams): RowStyle | undefined => {\n    if (params.data && params.data.make === 'Honda') {\n        return {\n            fontWeight: 'bold',\n        };\n    }\n    return {\n        fontWeight: 'normal',\n    };\n};\npublic rowData!: any[];;\npublic themeClass: string = /** DARK MODE START **/document.documentElement?.dataset.defaultTheme || 'ag-theme-quartz'/** DARK MODE END **/;\n\n\n    insertItemsAt2AndRefresh(count: number) {\n    insertItemsAt2(count);\n    // if the data has stopped looking for the last row, then we need to adjust the\n    // row count to allow for the extra data, otherwise the grid will not allow scrolling\n    // to the last row. eg if we have 1000 rows, scroll all the way to the bottom (so\n    // maxRowFound=true), and then add 5 rows, the rowCount needs to be adjusted\n    // to 1005, so grid can scroll to the end. the grid does NOT do this for you in the\n    // refreshInfiniteCache() method, as this would be assuming you want to do it which\n    // is not true, maybe the row count is constant and you just want to refresh the details.\n    const maxRowFound = this.gridApi.isLastRowIndexKnown();\n    if (maxRowFound) {\n        const rowCount = this.gridApi.getInfiniteRowCount() || 0;\n        this.gridApi.setRowCount(rowCount + count);\n    }\n    // get grid to refresh the data\n    this.gridApi.refreshInfiniteCache();\n}\n\nremoveItem(start: number, limit: number) {\n    allOfTheData.splice(start, limit);\n    this.gridApi.refreshInfiniteCache();\n}\n\nrefreshCache() {\n    this.gridApi.refreshInfiniteCache();\n}\n\npurgeCache() {\n    this.gridApi.purgeInfiniteCache();\n}\n\nsetRowCountTo200() {\n    this.gridApi.setRowCount(200, false);\n}\n\nrowsAndMaxFound() {\n    console.log('getInfiniteRowCount() => ' + this.gridApi.getInfiniteRowCount());\n    console.log('isLastRowIndexKnown() => ' + this.gridApi.isLastRowIndexKnown());\n}\n\n// function just gives new prices to the row data, it does not update the grid\n setPricesHigh() {\n    allOfTheData.forEach((dataItem) => {\n        dataItem.price = Math.round(55500 + 400 * (0.5 + Math.random()));\n    });\n}\n\nsetPricesLow() {\n    allOfTheData.forEach((dataItem) => {\n        dataItem.price = Math.round(1000 + 100 * (0.5 + Math.random()));\n    });\n}\n\njumpTo500() {\n    // first up, need to make sure the grid is actually showing 500 or more rows\n    if ((this.gridApi.getInfiniteRowCount() || 0) < 501) {\n        this.gridApi.setRowCount(501, false);\n    }\n    // next, we can jump to the row\n    this.gridApi.ensureIndexVisible(500);\n}\n\nonGridReady(params: GridReadyEvent) {\n             \n            this.gridApi = params.api;\n\n        \n    sequenceId = 1;\n    allOfTheData = [];\n    for (let i = 0; i < 1000; i++) {\n        allOfTheData.push(createRowData(sequenceId++));\n    }\n\n        }\n}\n\n\n\nconst valueFormatter = function (params: ValueFormatterParams) {\n    if (typeof params.value === 'number') {\n        return 'Â£' + params.value.toLocaleString();\n    }\n    else {\n        return params.value;\n    }\n};\n// this counter is used to give id's to the rows\nvar sequenceId = 0;\nvar allOfTheData: any[] = [];\nfunction createRowData(id: number) {\n    const makes = ['Toyota', 'Ford', 'Porsche', 'Chevy', 'Honda', 'Nissan'];\n    const models = ['Cruze', 'Celica', 'Mondeo', 'Boxster', 'Genesis', 'Accord', 'Taurus'];\n    return {\n        id: id,\n        make: makes[id % makes.length],\n        model: models[id % models.length],\n        price: 72000,\n    };\n}\nfunction insertItemsAt2(count: number) {\n    const newDataItems = [];\n    for (let i = 0; i < count; i++) {\n        const newItem = createRowData(sequenceId++);\n        allOfTheData.splice(2, 0, newItem);\n        newDataItems.push(newItem);\n    }\n    return newDataItems;\n}\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","main.ts":"import '@angular/compiler';\nimport { enableProdMode } from '@angular/core';\nimport { bootstrapApplication } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\nif ((window as any).ENABLE_PROD_MODE) {\n    enableProdMode();\n}\n\nbootstrapApplication(AppComponent);\n","systemjs.config.dev.js":"(function (global) {\n    var ANGULAR_VERSION = '^17';\n    window.ENABLE_PROD_MODE = false;\n\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true,\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            '@angular/compiler': 'npm:@angular/compiler@' + ANGULAR_VERSION + '/fesm2022/compiler.mjs',\n            '@angular/platform-browser-dynamic':\n                'npm:@angular/platform-browser-dynamic@' + ANGULAR_VERSION + '/fesm2022/platform-browser-dynamic.mjs',\n            '@angular/core': 'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/core.mjs',\n            '@angular/core/primitives/signals':\n                'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/primitives/signals.mjs',\n            '@angular/common': 'npm:@angular/common@' + ANGULAR_VERSION + '/fesm2022/common.mjs',\n            '@angular/common/http': 'npm:@angular/common@' + ANGULAR_VERSION + '/fesm2022/http.mjs',\n\n            '@angular/platform-browser':\n                'npm:@angular/platform-browser@' + ANGULAR_VERSION + '/fesm2022/platform-browser.mjs',\n            '@angular/platform-browser/animations':\n                'npm:@angular/platform-browser@' + ANGULAR_VERSION + '/fesm2022/animations.mjs',\n\n            '@angular/forms': 'npm:@angular/forms@' + ANGULAR_VERSION + '/fesm2022/forms.mjs',\n            '@angular/animations': 'npm:@angular/animations@' + ANGULAR_VERSION + '/fesm2022/animations.mjs',\n            '@angular/animations/browser': 'npm:@angular/animations@' + ANGULAR_VERSION + '/fesm2022/browser.mjs',\n\n            rxjs: 'npm:rxjs@7.8.1/dist/bundles/rxjs.umd.min.js',\n            'rxjs/operators': 'npm:rxjs@7.8.1/dist/bundles/rxjs.umd.min.js',\n\n            css: 'npm:systemjs-plugin-css@0.1.37/css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@4.4/lib/typescript.min.js',\n\n            // our app is within the app folder, appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {}, // Stop css.js from defaulting to apps .ts extension\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            '@ag-grid-community/angular': {\n                main: './fesm2022/ag-grid-community-angular.mjs',\n                defaultExtension: 'mjs',\n            },\n            '@ag-grid-community/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-locale': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n            },\n            '@ag-grid-enterprise/clipboard': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-angular': {\n                main: './fesm2022/ag-grid-angular.mjs',\n                defaultExtension: 'mjs',\n            },\n            'ag-charts-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-enterprise-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n","systemjs.config.js":"(function (global) {\n    var ANGULAR_VERSION = '^17';\n    window.ENABLE_PROD_MODE = true;\n\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true,\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            '@angular/compiler': 'npm:@angular/compiler@' + ANGULAR_VERSION + '/fesm2022/compiler.mjs',\n            '@angular/platform-browser-dynamic':\n                'npm:@angular/platform-browser-dynamic@' + ANGULAR_VERSION + '/fesm2022/platform-browser-dynamic.mjs',\n\n            '@angular/core': 'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/core.mjs',\n            '@angular/core/primitives/signals':\n                'npm:@angular/core@' + ANGULAR_VERSION + '/fesm2022/primitives/signals.mjs',\n            '@angular/common': 'npm:@angular/common@' + ANGULAR_VERSION + '/fesm2022/common.mjs',\n            '@angular/common/http': 'npm:@angular/common@' + ANGULAR_VERSION + '/fesm2022/http.mjs',\n\n            '@angular/platform-browser':\n                'npm:@angular/platform-browser@' + ANGULAR_VERSION + '/fesm2022/platform-browser.mjs',\n            '@angular/platform-browser/animations':\n                'npm:@angular/platform-browser@' + ANGULAR_VERSION + '/fesm2022/animations.mjs',\n\n            '@angular/forms': 'npm:@angular/forms@' + ANGULAR_VERSION + '/fesm2022/forms.mjs',\n            '@angular/animations': 'npm:@angular/animations@' + ANGULAR_VERSION + '/fesm2022/animations.mjs',\n            '@angular/animations/browser': 'npm:@angular/animations@' + ANGULAR_VERSION + '/fesm2022/browser.mjs',\n\n            rxjs: 'npm:rxjs@7.8.1/dist/bundles/rxjs.umd.min.js',\n            'rxjs/operators': 'npm:rxjs@7.8.1/dist/bundles/rxjs.umd.min.js',\n\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@4.4/lib/typescript.min.js',\n\n            // our app is within the app folder, appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {}, // Stop css.js from defaulting to apps .ts extension\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            '@ag-grid-community/angular': {\n                main: './fesm2022/ag-grid-community-angular.mjs',\n                defaultExtension: 'mjs',\n            },\n            '@ag-grid-community/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                format: 'cjs',\n            },\n            'ag-grid-locale': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/clipboard': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-angular': {\n                main: './fesm2022/ag-grid-angular.mjs',\n                defaultExtension: 'mjs',\n            },\n            'ag-enterprise-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-modules","dependencies":{"@angular/core":"^17","@angular/common":"^17","@angular/forms":"^17","@angular/platform-browser":"^17","@ag-grid-community/angular":"^31.3.1","@ag-grid-community/core":"^31.3.1","@ag-grid-community/styles":"^31.3.1","@ag-grid-community/client-side-row-model":"^31.3.1","@ag-grid-community/infinite-row-model":"^31.3.1","@ag-grid-community/csv-export":"^31.3.1","@ag-grid-enterprise/core":"^31.3.1","@ag-grid-enterprise/charts-enterprise":"^31.3.1","@ag-grid-enterprise/sparklines":"^31.3.1","@ag-grid-enterprise/clipboard":"^31.3.1","@ag-grid-enterprise/column-tool-panel":"^31.3.1","@ag-grid-enterprise/excel-export":"^31.3.1","@ag-grid-enterprise/filter-tool-panel":"^31.3.1","@ag-grid-enterprise/master-detail":"^31.3.1","@ag-grid-enterprise/menu":"^31.3.1","@ag-grid-enterprise/range-selection":"^31.3.1","@ag-grid-enterprise/rich-select":"^31.3.1","@ag-grid-enterprise/row-grouping":"^31.3.1","@ag-grid-enterprise/server-side-row-model":"^31.3.1","@ag-grid-enterprise/set-filter":"^31.3.1","@ag-grid-enterprise/multi-filter":"^31.3.1","@ag-grid-enterprise/advanced-filter":"^31.3.1","@ag-grid-enterprise/side-bar":"^31.3.1","@ag-grid-enterprise/status-bar":"^31.3.1","@ag-grid-enterprise/viewport-row-model":"^31.3.1"}}}