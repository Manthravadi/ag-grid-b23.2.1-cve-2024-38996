{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"const columnDefs = [\n    {\n        headerName: 'Athlete',\n        children: [{ field: 'athlete', headerName: 'Name', minWidth: 170 }, { field: 'age' }, { field: 'country' }],\n    },\n\n    { field: 'year' },\n    { field: 'sport' },\n    {\n        headerName: 'Medals',\n        children: [{ field: 'gold' }, { field: 'silver' }, { field: 'bronze' }, { field: 'total' }],\n    },\n];\n\n// define some handy keycode constants\nconst KEY_LEFT = 'ArrowLeft';\nconst KEY_UP = 'ArrowUp';\nconst KEY_RIGHT = 'ArrowRight';\nconst KEY_DOWN = 'ArrowDown';\n\nlet gridApi;\n\nconst gridOptions = {\n    // make all cols editable\n    defaultColDef: {\n        editable: true,\n        flex: 1,\n        minWidth: 100,\n        filter: true,\n    },\n\n    navigateToNextCell: navigateToNextCell,\n    tabToNextCell: tabToNextCell,\n\n    navigateToNextHeader: navigateToNextHeader,\n    tabToNextHeader: tabToNextHeader,\n\n    columnDefs: columnDefs,\n};\n\nfunction navigateToNextHeader(params) {\n    const nextHeader = params.nextHeaderPosition;\n\n    if (params.key !== 'ArrowDown' && params.key !== 'ArrowUp') {\n        return nextHeader;\n    }\n\n    const processedNextHeader = moveHeaderFocusUpDown(\n        params.previousHeaderPosition,\n        params.headerRowCount,\n        params.key === 'ArrowDown'\n    );\n\n    return processedNextHeader;\n}\n\nfunction tabToNextHeader(params) {\n    return moveHeaderFocusUpDown(params.previousHeaderPosition, params.headerRowCount, params.backwards);\n}\n\nfunction moveHeaderFocusUpDown(previousHeader, headerRowCount, isUp) {\n    const previousColumn = previousHeader.column;\n    const isSpanHeaderHeight =\n        !!(previousColumn ).isSpanHeaderHeight && (previousColumn ).isSpanHeaderHeight();\n\n    const lastRowIndex = previousHeader.headerRowIndex;\n    let nextRowIndex = isUp ? lastRowIndex - 1 : lastRowIndex + 1;\n    let nextColumn;\n\n    if (nextRowIndex === -1) {\n        return previousHeader;\n    }\n\n    if (nextRowIndex === headerRowCount) {\n        nextRowIndex = -1;\n    }\n\n    let parentColumn = previousColumn.getParent();\n    if (isUp) {\n        if (isSpanHeaderHeight) {\n            while (parentColumn && parentColumn.isPadding()) {\n                parentColumn = parentColumn.getParent();\n            }\n        }\n\n        if (!parentColumn) {\n            return previousHeader;\n        }\n\n        nextColumn = parentColumn;\n    } else {\n        const children =\n            ((previousColumn ).getChildren && (previousColumn ).getChildren()) || [];\n        nextColumn = children.length > 0 ? children[0] : previousColumn;\n    }\n\n    return {\n        headerRowIndex: nextRowIndex,\n        column: nextColumn ,\n    };\n}\n\nfunction tabToNextCell(params) {\n    const previousCell = params.previousCellPosition;\n    const renderedRowCount = params.api.getDisplayedRowCount();\n    const lastRowIndex = previousCell.rowIndex;\n\n    let nextRowIndex = params.backwards ? lastRowIndex - 1 : lastRowIndex + 1;\n\n    if (nextRowIndex < 0) {\n        nextRowIndex = -1;\n    }\n\n    if (nextRowIndex >= renderedRowCount) {\n        nextRowIndex = renderedRowCount - 1;\n    }\n\n    const result = {\n        rowIndex: nextRowIndex,\n        column: previousCell.column,\n        rowPinned: previousCell.rowPinned,\n    };\n\n    return result;\n}\n\nfunction navigateToNextCell(params) {\n    const previousCell = params.previousCellPosition,\n        suggestedNextCell = params.nextCellPosition;\n    let nextRowIndex, renderedRowCount;\n\n    switch (params.key) {\n        case KEY_DOWN:\n            // return the cell above\n            nextRowIndex = previousCell.rowIndex - 1;\n            if (nextRowIndex < -1) {\n                return null;\n            } // returning null means don't navigate\n\n            return {\n                rowIndex: nextRowIndex,\n                column: previousCell.column,\n                rowPinned: previousCell.rowPinned,\n            };\n        case KEY_UP:\n            // return the cell below\n            nextRowIndex = previousCell.rowIndex + 1;\n            renderedRowCount = params.api.getDisplayedRowCount();\n            if (nextRowIndex >= renderedRowCount) {\n                return null;\n            } // returning null means don't navigate\n\n            return {\n                rowIndex: nextRowIndex,\n                column: previousCell.column,\n                rowPinned: previousCell.rowPinned,\n            };\n        case KEY_LEFT:\n        case KEY_RIGHT:\n            return suggestedNextCell;\n        default:\n            throw Error('this will never happen, navigation is always one of the 4 keys above');\n    }\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', function () {\n    const gridDiv = document.querySelector('#myGrid');\n    gridApi = agGrid.createGrid(gridDiv, gridOptions); \n\n    fetch('https://www.ag-grid.com/example-assets/olympic-winners.json')\n        .then((response) => response.json())\n        .then((data) => gridApi.setGridOption('rowData', data));\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\" class=\"ag-theme-quartz\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}}}