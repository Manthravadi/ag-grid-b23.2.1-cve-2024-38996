{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":true,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":[],"files":{"data.js":"async function getData(delay = 100) {\n    return new Promise((resolve) => setTimeout(() => resolve(generateData()), delay));\n}\n\nfunction generateData() {\n    const countries = [\n        'Ireland',\n        'Spain',\n        'United Kingdom',\n        'France',\n        'Germany',\n        'Luxembourg',\n        'Sweden',\n        'Norway',\n        'Italy',\n        'Greece',\n        'Iceland',\n        'Portugal',\n        'Malta',\n        'Brazil',\n        'Argentina',\n        'Colombia',\n        'Peru',\n        'Venezuela',\n        'Uruguay',\n        'Belgium',\n    ];\n\n    return countries.map((country, index) => ({\n        country,\n        gold: Math.floor(((index + 1 / 7) * 333) % 100),\n        silver: Math.floor(((index + 1 / 3) * 555) % 100),\n        bronze: Math.floor(((index + 1 / 7.3) * 777) % 100),\n    }));\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n    columnDefs: [\n        { field: 'country', width: 150, chartDataType: 'category' },\n        { field: 'gold', chartDataType: 'series' },\n        { field: 'silver', chartDataType: 'series' },\n        { field: 'bronze', chartDataType: 'series' },\n    ],\n    defaultColDef: { flex: 1 },\n    enableRangeSelection: true,\n    popupParent: document.body,\n    enableCharts: true,\n    chartMenuItems: chartMenuItems,\n    onGridReady: (params) => {\n        getData().then((rowData) => params.api.setGridOption('rowData', rowData));\n    },\n    onFirstDataRendered,\n};\n\nfunction chartMenuItems(params) {\n    // Remove edit chart and advanced settings.\n    // `defaultItems` will automatically update the link/unlink options based on the current state.\n    return params.defaultItems.filter((item) => {\n        return item !== 'chartEdit' && item !== 'chartAdvancedSettings';\n    });\n}\n\nfunction onFirstDataRendered(params) {\n    params.api.createRangeChart({\n        cellRange: {\n            rowStartIndex: 0,\n            rowEndIndex: 4,\n            columns: ['country', 'gold', 'silver', 'bronze'],\n        },\n        chartType: 'groupedColumn',\n    });\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', function () {\n    const gridDiv = document.querySelector('#myGrid');\n    gridApi = agGrid.createGrid(gridDiv, gridOptions); /** DARK INTEGRATED START **/\n    const isInitialModeDark = () => {\n            const attr = document.documentElement.getAttribute('data-default-theme');\n            return attr ? attr.endsWith('-dark') : false;\n        };\n      \n        const updateChartThemes = (isDark) => {           \n            const themes = ['ag-default', 'ag-material', 'ag-sheets', 'ag-polychroma', 'ag-vivid'];            \n            const currentThemes = gridApi.getGridOption('chartThemes');                    \n            const customTheme = currentThemes && currentThemes.some(theme => theme.startsWith('my-custom-theme'));\n            \n            let modifiedThemes = customTheme\n                ? (isDark ? ['my-custom-theme-dark', 'my-custom-theme-light'] : ['my-custom-theme-light', 'my-custom-theme-dark'])\n                : Array.from(new Set(themes.map((theme) => theme + (isDark ? '-dark' : ''))));                      \n\n            // updating the 'chartThemes' grid option will cause the chart to reactively update!\n            gridApi.setGridOption('chartThemes', modifiedThemes);\n        };\n\n        // update chart themes when example first loads\n        updateChartThemes(isInitialModeDark());\n\n        const handleColorSchemeChange = (event) => {\n            const { darkMode } = event.detail;\n            updateChartThemes(darkMode);\n        }\n\n        // listen for user-triggered dark mode changes (not removing listener is fine here!)\n        document.addEventListener('color-scheme-change', handleColorSchemeChange);\n    /** DARK INTEGRATED END **/\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\" class=\"ag-theme-quartz\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}}}