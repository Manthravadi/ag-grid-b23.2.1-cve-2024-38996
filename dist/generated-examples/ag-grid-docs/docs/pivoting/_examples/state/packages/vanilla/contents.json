{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"let gridApi;\n\nconst gridOptions = {\n    columnDefs: [\n        { field: 'athlete', enableRowGroup: true, enablePivot: true },\n        { field: 'age', enableValue: true },\n        { field: 'country', enableRowGroup: true, enablePivot: true, rowGroup: true },\n        { field: 'year', enableRowGroup: true, enablePivot: true },\n        { field: 'date', enableRowGroup: true, enablePivot: true },\n        { field: 'sport', enableRowGroup: true, enablePivot: true, pivot: true },\n        { field: 'gold', enableValue: true, aggFunc: 'sum' },\n        { field: 'silver', enableValue: true, aggFunc: 'sum' },\n        { field: 'bronze', enableValue: true },\n        { field: 'total', enableValue: true },\n    ],\n    defaultColDef: {\n        flex: 1,\n        minWidth: 150,\n        filter: true,\n    },\n    autoGroupColumnDef: {\n        minWidth: 300,\n    },\n    sideBar: true,\n    pivotMode: true,\n};\n\nvar savedState;\nvar savedPivotMode;\n\nfunction printState() {\n    var state = gridApi.getColumnState();\n    console.log(state);\n}\n\nfunction saveState() {\n    savedState = gridApi.getColumnState();\n    savedPivotMode = gridApi.isPivotMode();\n    console.log('column state saved');\n}\n\nfunction restoreState() {\n    if (savedState) {\n        // Pivot mode must be set first otherwise the columns we're trying to set state for won't exist yet\n        gridApi.setGridOption('pivotMode', savedPivotMode);\n        gridApi.applyColumnState({ state: savedState, applyOrder: true });\n        console.log('column state restored');\n    } else {\n        console.log('no previous column state to restore!');\n    }\n}\n\nfunction togglePivotMode() {\n    var pivotMode = gridApi.isPivotMode();\n    gridApi.setGridOption('pivotMode', !pivotMode);\n}\n\nfunction resetState() {\n    gridApi.resetColumnState();\n    gridApi.setGridOption('pivotMode', false);\n    console.log('column state reset');\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', function () {\n    var gridDiv = document.querySelector('#myGrid');\n    gridApi = agGrid.createGrid(gridDiv, gridOptions); \n\n    fetch('https://www.ag-grid.com/example-assets/olympic-winners.json')\n        .then((response) => response.json())\n        .then((data) => gridApi.setGridOption('rowData', data));\n});\n","index.html":"<div style=\"height: 100%; display: flex; flex-direction: column\">\n    <div style=\"margin-bottom: 5px\">\n        <button onclick=\"saveState()\">Save State</button>\n        <button onclick=\"restoreState()\">Restore State</button>\n        <button onclick=\"printState()\">Print State</button>\n        <button onclick=\"resetState()\">Reset State</button>\n        <button onclick=\"togglePivotMode()\">Toggle Pivot Mode</button>\n    </div>\n    <div id=\"myGrid\" style=\"flex: 1 1 0px\" class=\"ag-theme-quartz\"></div>\n</div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}}}