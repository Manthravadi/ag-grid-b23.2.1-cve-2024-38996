{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":true,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["style.css"],"files":{"style.css":".wrapper {\n    display: grid;\n    grid-template-rows: 1fr 375px;\n    height: 100%;\n}\n\n#myGrid {\n    grid-row: 1 / 2;\n}\n\n#myChart {\n    grid-row: 2 / 3;\n}\n\n.ag-theme-quartz,\n.ag-theme-quartz-dark {\n    /* pink category range */\n    --ag-range-selection-chart-category-background-color: rgba(255, 0, 132, 0.1);\n\n    /* orange data range */\n    --ag-range-selection-chart-background-color: rgba(255, 115, 0, 0.1);\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n    columnDefs: [\n        // different ways to define 'categories'\n        { field: 'athlete', width: 150, chartDataType: 'category' },\n        { field: 'age', chartDataType: 'category', sort: 'asc' },\n        { field: 'sport' }, // inferred as category by grid\n\n        // excludes year from charts\n        { field: 'year', chartDataType: 'excluded' },\n\n        // different ways to define 'series'\n        { field: 'gold', chartDataType: 'series' },\n        { field: 'silver', chartDataType: 'series' },\n        { field: 'bronze' }, // inferred as series by grid\n    ],\n    defaultColDef: {\n        flex: 1,\n    },\n    enableRangeSelection: true,\n    popupParent: document.body,\n    enableCharts: true,\n    chartThemeOverrides: {\n        common: {\n            title: {\n                enabled: true,\n                text: 'Medals by Age',\n            },\n        },\n        bar: {\n            axes: {\n                category: {\n                    label: {\n                        rotation: 0,\n                    },\n                },\n            },\n        },\n    },\n    onFirstDataRendered: onFirstDataRendered,\n};\n\nfunction onFirstDataRendered(params) {\n    params.api.createRangeChart({\n        chartContainer: document.querySelector('#myChart') ,\n        cellRange: {\n            rowStartIndex: 0,\n            rowEndIndex: 79,\n            columns: ['age', 'gold', 'silver', 'bronze'],\n        },\n        chartType: 'groupedColumn',\n        aggFunc: 'sum',\n    });\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', function () {\n    const gridDiv = document.querySelector('#myGrid');\n    gridApi = agGrid.createGrid(gridDiv, gridOptions); /** DARK INTEGRATED START **/\n    const isInitialModeDark = () => {\n            const attr = document.documentElement.getAttribute('data-default-theme');\n            return attr ? attr.endsWith('-dark') : false;\n        };\n      \n        const updateChartThemes = (isDark) => {           \n            const themes = ['ag-default', 'ag-material', 'ag-sheets', 'ag-polychroma', 'ag-vivid'];            \n            const currentThemes = gridApi.getGridOption('chartThemes');                    \n            const customTheme = currentThemes && currentThemes.some(theme => theme.startsWith('my-custom-theme'));\n            \n            let modifiedThemes = customTheme\n                ? (isDark ? ['my-custom-theme-dark', 'my-custom-theme-light'] : ['my-custom-theme-light', 'my-custom-theme-dark'])\n                : Array.from(new Set(themes.map((theme) => theme + (isDark ? '-dark' : ''))));                      \n\n            // updating the 'chartThemes' grid option will cause the chart to reactively update!\n            gridApi.setGridOption('chartThemes', modifiedThemes);\n        };\n\n        // update chart themes when example first loads\n        updateChartThemes(isInitialModeDark());\n\n        const handleColorSchemeChange = (event) => {\n            const { darkMode } = event.detail;\n            updateChartThemes(darkMode);\n        }\n\n        // listen for user-triggered dark mode changes (not removing listener is fine here!)\n        document.addEventListener('color-scheme-change', handleColorSchemeChange);\n    /** DARK INTEGRATED END **/\n\n    fetch('https://www.ag-grid.com/example-assets/wide-spread-of-sports.json')\n        .then((response) => response.json())\n        .then(function (data) {\n            gridApi.setGridOption('rowData', data);\n        });\n});\n","index.html":"<div class=\"wrapper\">\n    <div id=\"myGrid\" class=\"ag-theme-quartz my-grid\"></div>\n    <div id=\"myChart\" class=\"ag-theme-quartz my-chart\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}}}