{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":[],"files":{"data.ts":"export function getData(): any[] {\n    return [\n        {\n            area: [-20, 30, 50, -18, 25, -50, 70],\n            bar: [30],\n            column: [-20, 30, 50, -18, 25, -50, 70],\n            line: [-20, 30, 50, -18, 25, -50, 70, -20, 39, 5, -18, 25, -50, 70],\n        },\n        {\n            area: [20, 30, -15, 20, -35, -15, -40],\n            bar: [55],\n            column: [20, 30, -15, 20, -35, -15, -40],\n            line: [20, 30, -15, 20, -35, -15, -40, 10, 30, -15, 40, -35, -15, -40],\n        },\n        {\n            area: [1.3, 1.4, 1.1, 1.8, 1.5, 1.5, 2],\n            bar: [80],\n            column: [30, 40, 10, 80, 50, 50, 100],\n            line: [1.3, 1.4, 1.1, 1.8, 1.5, 1.5, 2, 1.3, 1.4, 1.1, 1.8, 1.5, 1.5, 2],\n        },\n        {\n            area: [13.71, -17.41, 10.132, 11.81, 18.71, 2, 6],\n            bar: [48],\n            column: [14, -17, 10, 12, 19, 2, 6],\n            line: [13.71, -18.41, -10.132, 11.81, 18.71, 2, 6, 13.71, -10.41, 10.132, 11.81, 10.71, 2, 6],\n        },\n        {\n            area: [55.0, 15.458, 46.3, -97, 85, 66, 30],\n            bar: [73],\n            column: [55, 15, 46, -97, 85, 66, 30],\n            line: [55.0, 15.458, 46.3, 0, -20, 66, 30, 55.0, 15.458, 46.3, -80, 85, 90, 30],\n        },\n        {\n            area: [3, 2, 4, 6, 5, 5, 4],\n            bar: [20],\n            column: [30, 20, 40, 60, 55, 50, 35],\n            line: [3, 2, 4, 6, 5, 2, 4, 3, 2, 4, 6, 5, 5, 4],\n        },\n        {\n            area: [500, -100, 340, 200, -90, 80, -70],\n            column: [50, -85, 34, 20, -60, 80, -70],\n            bar: [60],\n            line: [500, -100, 340, 200, -90, 80, -70, 500, -100, 340, 200, -90, 80, -70],\n        },\n    ];\n}\n","main.ts":"import 'ag-grid-community/styles/ag-grid.css';\nimport \"ag-grid-community/styles/ag-theme-quartz.css\";\nimport { AreaSparklineOptions, BarFormatterParams, BarSparklineOptions, ColDef, ColGroupDef, ColumnFormatterParams, ColumnSparklineOptions, GridApi, GridOptions, LineSparklineOptions, MarkerFormatterParams, createGrid } from 'ag-grid-community';\nimport { getData } from './data';\nimport 'ag-grid-charts-enterprise';\n\n\n\n\nconst palette = {\n    blue: 'rgb(20,94,140)',\n    lightBlue: 'rgb(182,219,242)',\n    green: 'rgb(63,141,119)',\n    lightGreen: 'rgba(75,168,142, 0.2)',\n};\n\nlet gridApi: GridApi;\n\nconst gridOptions: GridOptions = {\n    rowHeight: 70,\n    columnDefs: [\n        {\n            field: 'bar',\n            headerName: 'Bar Sparkline',\n            minWidth: 100,\n            cellRenderer: 'agSparklineCellRenderer',\n            cellRendererParams: {\n                sparklineOptions: {\n                    type: 'bar',\n                    valueAxisDomain: [0, 100],\n                    label: {\n                        color: '#5577CC',\n                        enabled: true,\n                        placement: 'outsideEnd',\n                        formatter: function (params) {\n                            return `${params.value}%`;\n                        },\n                        fontWeight: 'bold',\n                        fontFamily: 'Arial, Helvetica, sans-serif',\n                    },\n                    highlightStyle: {\n                        strokeWidth: 0,\n                    },\n                    padding: {\n                        top: 15,\n                        bottom: 15,\n                    },\n                    formatter: barFormatter,\n                } as BarSparklineOptions,\n            },\n        },\n        {\n            field: 'line',\n            headerName: 'Line Sparkline',\n            minWidth: 100,\n            cellRenderer: 'agSparklineCellRenderer',\n            cellRendererParams: {\n                sparklineOptions: {\n                    line: {\n                        stroke: 'rgb(63,141,119)',\n                    },\n                    padding: {\n                        top: 10,\n                        bottom: 10,\n                    },\n                    marker: {\n                        formatter: lineMarkerFormatter,\n                    },\n                } as LineSparklineOptions,\n            },\n        },\n        {\n            field: 'column',\n            headerName: 'Column Sparkline',\n            minWidth: 100,\n            cellRenderer: 'agSparklineCellRenderer',\n            cellRendererParams: {\n                sparklineOptions: {\n                    type: 'column',\n                    label: {\n                        color: '#5577CC',\n                        enabled: true,\n                        placement: 'outsideEnd',\n                        fontFamily: 'Arial, Helvetica, sans-serif',\n                    },\n                    highlightStyle: {\n                        strokeWidth: 0,\n                    },\n                    padding: {\n                        top: 15,\n                        bottom: 15,\n                    },\n                    formatter: columnFormatter,\n                } as ColumnSparklineOptions,\n            },\n        },\n        {\n            field: 'area',\n            headerName: 'Area Sparkline',\n            minWidth: 100,\n            cellRenderer: 'agSparklineCellRenderer',\n            cellRendererParams: {\n                sparklineOptions: {\n                    type: 'area',\n                    fill: 'rgba(75,168,142, 0.2)',\n                    line: {\n                        stroke: 'rgb(63,141,119)',\n                    },\n                    padding: {\n                        top: 10,\n                        bottom: 10,\n                    },\n                    marker: {\n                        formatter: areaMarkerFormatter,\n                    },\n                } as AreaSparklineOptions,\n            },\n        },\n    ],\n    defaultColDef: {\n        flex: 1,\n        minWidth: 100,\n    },\n    rowData: getData(),\n};\n\nfunction barFormatter(params: BarFormatterParams) {\n    const { yValue, highlighted } = params;\n\n    if (highlighted) {\n        return;\n    }\n    return { fill: yValue <= 50 ? palette.lightBlue : palette.blue };\n}\n\nfunction lineMarkerFormatter(params: MarkerFormatterParams) {\n    const { first, last, highlighted } = params;\n\n    const color = highlighted ? palette.blue : last ? palette.lightBlue : palette.green;\n\n    return {\n        size: highlighted || first || last ? 5 : 0,\n        fill: color,\n        stroke: color,\n    };\n}\n\nfunction columnFormatter(params: ColumnFormatterParams) {\n    const { yValue, highlighted } = params;\n\n    if (highlighted) {\n        return;\n    }\n    return { fill: yValue < 0 ? palette.lightBlue : palette.blue };\n}\n\nfunction areaMarkerFormatter(params: MarkerFormatterParams) {\n    const { min, highlighted } = params;\n\n    return {\n        size: min || highlighted ? 5 : 0,\n        fill: palette.green,\n        stroke: palette.green,\n    };\n}\n\n// setup the grid after the page has finished loading\n    var gridDiv = document.querySelector<HTMLElement>('#myGrid')!;\n    gridApi = createGrid(gridDiv, gridOptions);;\n  ","index.html":"<div id=\"myGrid\" class=\"ag-theme-quartz\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.dev.js":"(function (global) {\n    var sjsPaths = {};\n    if (typeof systemJsPaths !== 'undefined') {\n        sjsPaths = systemJsPaths;\n    }\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {},\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...sjsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            css: 'npm:systemjs-plugin-css@0.1.37/css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            // appLocation comes from index.html\n            app: appLocation,\n\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            '@ag-grid-community/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-locale': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n            },\n            '@ag-grid-enterprise/clipboard': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-enterprise-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {},\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        // map tells the System loader where to look for things\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            // appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap,\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: './main.ts',\n                defaultExtension: 'ts',\n            },\n            '@ag-grid-community/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                format: 'cjs',\n            },\n            'ag-grid-locale': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/clipboard': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}}}