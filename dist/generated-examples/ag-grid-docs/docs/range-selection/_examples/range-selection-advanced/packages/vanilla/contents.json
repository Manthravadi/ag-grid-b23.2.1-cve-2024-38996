{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n\n.example-header {\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    font-size: 13px;\n    margin-bottom: 5px;\n}\n","main.js":"let gridApi;\nconst gridOptions = {\n    columnDefs: [\n        { field: 'athlete', minWidth: 150 },\n        { field: 'age', maxWidth: 90 },\n        { field: 'country', minWidth: 150 },\n        { field: 'year', maxWidth: 90 },\n        { field: 'date', minWidth: 150 },\n        { field: 'sport', minWidth: 150 },\n        { field: 'gold' },\n        { field: 'silver' },\n        { field: 'bronze' },\n        { field: 'total' },\n    ],\n    defaultColDef: {\n        flex: 1,\n        minWidth: 100,\n        editable: true,\n    },\n    enableRangeSelection: true,\n    onRangeSelectionChanged: onRangeSelectionChanged,\n\n    processCellForClipboard: (params) => {\n        if (params.column.getColId() === 'athlete' && params.value && params.value.toUpperCase) {\n            return params.value.toUpperCase();\n        }\n\n        return params.value;\n    },\n\n    processCellFromClipboard: (params) => {\n        if (params.column.getColId() === 'athlete' && params.value && params.value.toLowerCase) {\n            return params.value.toLowerCase();\n        }\n        return params.value;\n    },\n    onRangeDeleteStart: (event) => {\n        console.log('onRangeDeleteStart', event);\n    },\n    onRangeDeleteEnd: (event) => {\n        console.log('onRangeDeleteEnd', event);\n    },\n};\n\nfunction onAddRange() {\n    gridApi.addCellRange({\n        rowStartIndex: 4,\n        rowEndIndex: 8,\n        columnStart: 'age',\n        columnEnd: 'date',\n    });\n}\n\nfunction onClearRange() {\n    gridApi.clearRangeSelection();\n}\n\nfunction onRangeSelectionChanged(event) {\n    var lbRangeCount = document.querySelector('#lbRangeCount');\n    var lbEagerSum = document.querySelector('#lbEagerSum');\n    var lbLazySum = document.querySelector('#lbLazySum');\n    var cellRanges = gridApi.getCellRanges();\n\n    // if no selection, clear all the results and do nothing more\n    if (!cellRanges || cellRanges.length === 0) {\n        lbRangeCount.textContent = '0';\n        lbEagerSum.textContent = '-';\n        lbLazySum.textContent = '-';\n        return;\n    }\n\n    // set range count to the number of ranges selected\n    lbRangeCount.textContent = cellRanges.length + '';\n\n    var sum = 0;\n\n    if (cellRanges) {\n        cellRanges.forEach((range) => {\n            // get starting and ending row, remember rowEnd could be before rowStart\n            var startRow = Math.min(range.startRow.rowIndex, range.endRow.rowIndex);\n            var endRow = Math.max(range.startRow.rowIndex, range.endRow.rowIndex);\n\n            for (var rowIndex = startRow; rowIndex <= endRow; rowIndex++) {\n                range.columns.forEach((column) => {\n                    var rowNode = gridApi.getDisplayedRowAtIndex(rowIndex);\n                    var value = gridApi.getCellValue({ colKey: column, rowNode });\n                    if (typeof value === 'number') {\n                        sum += value;\n                    }\n                });\n            }\n        });\n    }\n\n    lbEagerSum.textContent = sum + '';\n\n    if (event.started) {\n        lbLazySum.textContent = '?';\n    }\n    if (event.finished) {\n        lbLazySum.textContent = sum + '';\n    }\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', function () {\n    var gridDiv = document.querySelector('#myGrid');\n    gridApi = agGrid.createGrid(gridDiv, gridOptions); \n\n    fetch('https://www.ag-grid.com/example-assets/olympic-winners.json')\n        .then((response) => response.json())\n        .then((data) => gridApi.setGridOption('rowData', data));\n});\n","index.html":"<div class=\"example-wrapper\">\n    <div class=\"example-header\">\n        <button onclick=\"onAddRange()\">Add Range</button>\n        <button onclick=\"onClearRange()\">Clear Range</button>\n        Range Count:\n        <span id=\"lbRangeCount\" style=\"padding-right: 20px\"></span>\n        Eager Sum:\n        <span id=\"lbEagerSum\" style=\"padding-right: 20px\"></span>\n        Lazy Sum:\n        <span id=\"lbLazySum\" style=\"padding-right: 20px\"></span>\n    </div>\n    <div id=\"myGrid\" class=\"ag-theme-quartz\"></div>\n</div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}}}