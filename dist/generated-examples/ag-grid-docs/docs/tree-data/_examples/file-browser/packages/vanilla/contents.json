{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":["style.css"],"files":{"style.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n\n.fa-folder {\n    color: darkorange;\n}\n\n.fa-file-pdf {\n    color: red;\n}\n\n.fa-file-excel {\n    color: green;\n}\n\n.fa-file-audio {\n    color: blue;\n}\n\n.filename {\n    padding: 5px;\n    color: black;\n    font-size: 16px;\n}\n","data.js":"function getData() {\n    // specify the data\n    var rowData = [\n        {\n            id: 1,\n            filePath: ['Documents'],\n            size: 20,\n        },\n        {\n            id: 2,\n            filePath: ['Documents', 'txt'],\n        },\n        {\n            id: 3,\n            filePath: ['Documents', 'txt', 'notes.txt'],\n            dateModified: 'May 21 2017 01:50:00 PM',\n            size: 14.7,\n        },\n        {\n            id: 4,\n            filePath: ['Documents', 'pdf'],\n        },\n        {\n            id: 5,\n            filePath: ['Documents', 'pdf', 'book.pdf'],\n            dateModified: 'May 20 2017 01:50:00 PM',\n            size: 2.1,\n        },\n        {\n            id: 6,\n            filePath: ['Documents', 'pdf', 'cv.pdf'],\n            dateModified: 'May 20 2016 11:50:00 PM',\n            size: 2.4,\n        },\n        {\n            id: 7,\n            filePath: ['Documents', 'xls'],\n        },\n        {\n            id: 8,\n            filePath: ['Documents', 'xls', 'accounts.xls'],\n            dateModified: 'Aug 12 2016 10:50:00 AM',\n            size: 4.3,\n        },\n        {\n            id: 9,\n            filePath: ['Documents', 'stuff'],\n        },\n        {\n            id: 10,\n            filePath: ['Documents', 'stuff', 'xyz.txt'],\n            dateModified: 'Jan 17 2016 08:03:00 PM',\n            size: 1.1,\n        },\n        {\n            id: 11,\n            filePath: ['Music', 'mp3', 'pop'],\n            dateModified: 'Sep 11 2016 08:03:00 PM',\n            size: 14.3,\n        },\n        {\n            id: 12,\n            filePath: ['temp.txt'],\n            dateModified: 'Aug 12 2016 10:50:00 PM',\n            size: 101,\n        },\n        {\n            id: 13,\n            filePath: ['Music', 'mp3', 'pop', 'theme.mp3'],\n            dateModified: 'Aug 12 2016 10:50:00 PM',\n            size: 101,\n        },\n        {\n            id: 14,\n            filePath: ['Music', 'mp3', 'jazz'],\n            dateModified: 'Aug 12 2016 10:50:00 PM',\n            size: 101,\n        },\n    ];\n    return rowData;\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n    columnDefs: [\n        {\n            field: 'dateModified',\n            minWidth: 250,\n            comparator: (d1, d2) => {\n                return new Date(d1).getTime() < new Date(d2).getTime() ? -1 : 1;\n            },\n        },\n        {\n            field: 'size',\n            aggFunc: 'sum',\n            valueFormatter: (params) => {\n                return params.value ? Math.round(params.value * 10) / 10 + ' MB' : '0 MB';\n            },\n        },\n    ],\n    defaultColDef: {\n        flex: 1,\n        filter: true,\n    },\n    autoGroupColumnDef: {\n        headerName: 'Files',\n        minWidth: 330,\n        cellRendererParams: {\n            checkbox: true,\n            suppressCount: true,\n            innerRenderer: getFileCellRenderer(),\n        },\n    },\n    rowData: getData(),\n    treeData: true,\n    groupDefaultExpanded: -1,\n    getDataPath: (data) => {\n        return data.filePath;\n    },\n    getRowId: (params) => {\n        return String(params.data.id);\n    },\n};\n\nfunction getNextId() {\n    if (!window.nextId) {\n        window.nextId = 15;\n    } else {\n        window.nextId++;\n    }\n    return window.nextId;\n}\n\nfunction getFileCellRenderer() {\n    class FileCellRenderer  {\n        eGui;\n\n        init(params) {\n            var tempDiv = document.createElement('div');\n            var value = params.value;\n            var icon = getFileIcon(params.value);\n            tempDiv.innerHTML = icon\n                ? '<span><i class=\"' + icon + '\"></i>' + '<span class=\"filename\"></span>' + value + '</span>'\n                : value;\n            this.eGui = tempDiv.firstChild;\n        }\n\n        getGui() {\n            return this.eGui;\n        }\n\n        refresh() {\n            return false;\n        }\n    }\n\n    return FileCellRenderer;\n}\n\nfunction addNewGroup() {\n    var newGroupData = [\n        {\n            id: getNextId(),\n            filePath: ['Music', 'wav', 'hit_' + new Date().getTime() + '.wav'],\n            dateModified: 'Aug 23 2017 11:52:00 PM',\n            size: 58.9,\n        },\n    ];\n    gridApi.applyTransaction({ add: newGroupData });\n}\n\nfunction removeSelected() {\n    var selectedNode = gridApi.getSelectedNodes()[0]; // single selection\n    if (!selectedNode) {\n        console.warn('No nodes selected!');\n        return;\n    }\n\n    gridApi.applyTransaction({ remove: getRowsToRemove(selectedNode) });\n}\n\nfunction getRowsToRemove(node) {\n    var res = [];\n    const children = node.childrenAfterGroup || [];\n    for (var i = 0; i < children.length; i++) {\n        res = res.concat(getRowsToRemove(children[i]));\n    }\n\n    // ignore nodes that have no data, i.e. 'filler groups'\n    return node.data ? res.concat([node.data]) : res;\n}\n\nfunction moveSelectedNodeToTarget(targetRowId) {\n    var selectedNode = gridApi.getSelectedNodes()[0]; // single selection\n    if (!selectedNode) {\n        console.warn('No nodes selected!');\n        return;\n    }\n\n    var targetNode = gridApi.getRowNode(targetRowId);\n    var invalidMove = selectedNode.key === targetNode.key || isSelectionParentOfTarget(selectedNode, targetNode);\n    if (invalidMove) {\n        console.warn('Invalid selection - must not be parent or same as target!');\n        return;\n    }\n\n    var rowsToUpdate = getRowsToUpdate(selectedNode, targetNode.data.filePath);\n    gridApi.applyTransaction({ update: rowsToUpdate });\n}\n\nfunction isSelectionParentOfTarget(selectedNode, targetNode) {\n    var children = selectedNode.childrenAfterGroup || [];\n    for (var i = 0; i < children.length; i++) {\n        if (targetNode && children[i].key === targetNode.key) return true;\n        isSelectionParentOfTarget(children[i], targetNode);\n    }\n    return false;\n}\n\nfunction getRowsToUpdate(node, parentPath) {\n    var res = [];\n\n    var newPath = parentPath.concat([node.key]);\n    if (node.data) {\n        // groups without data, i.e. 'filler groups' don't need path updated\n        node.data.filePath = newPath;\n    }\n\n    var children = node.childrenAfterGroup || [];\n    for (var i = 0; i < children.length; i++) {\n        var updatedChildRowData = getRowsToUpdate(children[i], newPath);\n        res = res.concat(updatedChildRowData);\n    }\n\n    // ignore nodes that have no data, i.e. 'filler groups'\n    return node.data ? res.concat([node.data]) : res;\n}\n\nfunction getFileIcon(name) {\n    return endsWith(name, '.mp3') || endsWith(name, '.wav')\n        ? 'far fa-file-audio'\n        : endsWith(name, '.xls')\n          ? 'far fa-file-excel'\n          : endsWith(name, '.txt')\n            ? 'far fa-file'\n            : endsWith(name, '.pdf')\n              ? 'far fa-file-pdf'\n              : 'far fa-folder';\n}\n\nfunction endsWith(str, match) {\n    var len;\n    if (str == null || !str.length || match == null || !match.length) {\n        return false;\n    }\n    len = str.length;\n    return str.substring(len - match.length, len) === match;\n}\n\n// wait for the document to be loaded, otherwise\n// AG Grid will not find the div in the document.\ndocument.addEventListener('DOMContentLoaded', function () {\n    // lookup the container we want the Grid to use\n    var gridDiv = document.querySelector('#myGrid');\n\n    // create the grid passing in the div to use together with the columns & data we want to use\n    gridApi = agGrid.createGrid(gridDiv, gridOptions); \n});\n","index.html":"<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px\">\n        <button onclick=\"addNewGroup()\">Add New Group</button>\n        <button onclick=\"moveSelectedNodeToTarget('9')\">Move Selected to 'stuff'</button>\n        <button onclick=\"removeSelected()\">Remove Selected</button>\n    </div>\n    <div id=\"myGrid\" class=\"ag-theme-quartz\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}},"extras":["fontawesome"]}