{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"let gridApi;\n\nconst gridOptions = {\n    columnDefs: [\n        { field: 'employmentType' },\n        {\n            field: 'startDate',\n            valueFormatter: (params) =>\n                params.value ? params.value.toLocaleDateString() : params.value,\n            filterParams: {\n                treeList: true,\n                valueFormatter: (params) =>\n                    params.value ? params.value.toLocaleDateString() : '(Blanks)',\n            } ,\n        },\n    ],\n    defaultColDef: {\n        flex: 1,\n        minWidth: 200,\n        filter: true,\n        floatingFilter: true,\n    },\n    autoGroupColumnDef: {\n        headerName: 'Employee',\n        field: 'employeeName',\n        cellRendererParams: {\n            suppressCount: true,\n        },\n        filter: 'agSetColumnFilter',\n        filterParams: {\n            treeList: true,\n            keyCreator: (params) => (params.value ? params.value.join('#') : null),\n        } ,\n        minWidth: 280,\n    },\n    treeData: true,\n    groupDefaultExpanded: -1,\n    getDataPath: (data) => data.dataPath,\n    getRowId: (params) => String(params.data.employeeId),\n};\n\nfunction processData(data) {\n    const flattenedData = [];\n    const flattenRowRecursive = (row, parentPath) => {\n        const dateParts = row.startDate.split('/');\n        const startDate = new Date(parseInt(dateParts[2]), dateParts[1] - 1, dateParts[0]);\n        const dataPath = [...parentPath, row.employeeName];\n        flattenedData.push({ ...row, dataPath, startDate });\n        if (row.underlings) {\n            row.underlings.forEach((underling) => flattenRowRecursive(underling, dataPath));\n        }\n    };\n    data.forEach((row) => flattenRowRecursive(row, []));\n    return flattenedData;\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', function () {\n    var gridDiv = document.querySelector('#myGrid');\n    gridApi = agGrid.createGrid(gridDiv, gridOptions); \n\n    fetch('https://www.ag-grid.com/example-assets/tree-data.json')\n        .then((response) => response.json())\n        .then((data) => gridApi.setGridOption('rowData', processData(data)));\n});\n","index.html":"<div id=\"myGrid\" class=\"ag-theme-quartz\" style=\"height: 100%\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}}}