{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["fakeServer.js","main.js"],"styleFiles":[],"files":{"fakeServer.js":"// This fake server uses http://alasql.org/ to mimic how a real server\n// might generate sql queries from the Server-Side Row Model request.\n// To keep things simple it does the bare minimum to support the example.\nfunction FakeServer(allData) {\n    alasql.options.cache = false;\n\n    return {\n        getData: function (request) {\n            var results = executeQuery(request);\n\n            return {\n                success: true,\n                rows: results,\n                lastRow: getLastRowIndex(request),\n            };\n        },\n    };\n\n    function executeQuery(request) {\n        var sql = buildSql(request);\n\n        console.log('[FakeServer] - about to execute query:', sql);\n\n        return alasql(sql, [allData]);\n    }\n\n    function buildSql(request) {\n        return (\n            selectSql(request) +\n            ' FROM ?' +\n            whereSql(request) +\n            groupBySql(request) +\n            orderBySql(request) +\n            limitSql(request)\n        );\n    }\n\n    function selectSql(request) {\n        var rowGroupCols = request.rowGroupCols;\n        var valueCols = request.valueCols;\n        var groupKeys = request.groupKeys;\n\n        if (isDoingGrouping(rowGroupCols, groupKeys)) {\n            var rowGroupCol = rowGroupCols[groupKeys.length];\n            var colsToSelect = [rowGroupCol.id];\n\n            valueCols.forEach(function (valueCol) {\n                colsToSelect.push(valueCol.aggFunc + '(' + valueCol.id + ') AS ' + valueCol.id);\n            });\n\n            return 'SELECT ' + colsToSelect.join(', ');\n        }\n\n        return 'SELECT *';\n    }\n\n    function whereSql(request) {\n        var rowGroups = request.rowGroupCols;\n        var groupKeys = request.groupKeys;\n        var whereParts = [];\n\n        if (groupKeys) {\n            groupKeys.forEach(function (key, i) {\n                var value = typeof key === 'string' ? \"'\" + key + \"'\" : key;\n\n                whereParts.push(rowGroups[i].id + ' = ' + value);\n            });\n        }\n\n        if (whereParts.length > 0) {\n            return ' WHERE ' + whereParts.join(' AND ');\n        }\n\n        return '';\n    }\n\n    function groupBySql(request) {\n        var rowGroupCols = request.rowGroupCols;\n        var groupKeys = request.groupKeys;\n\n        if (isDoingGrouping(rowGroupCols, groupKeys)) {\n            var rowGroupCol = rowGroupCols[groupKeys.length];\n\n            return ' GROUP BY ' + rowGroupCol.id + ' HAVING count(*) > 0';\n        }\n\n        return '';\n    }\n\n    function orderBySql(request) {\n        var sortModel = request.sortModel;\n\n        if (sortModel.length === 0) return '';\n\n        var sorts = sortModel.map(function (s) {\n            return s.colId + ' ' + s.sort.toUpperCase();\n        });\n\n        return ' ORDER BY ' + sorts.join(', ');\n    }\n\n    function limitSql(request) {\n        if (request.endRow == undefined || request.startRow == undefined) {\n            return '';\n        }\n        var blockSize = request.endRow - request.startRow;\n\n        return ' LIMIT ' + blockSize + ' OFFSET ' + request.startRow;\n    }\n\n    function isDoingGrouping(rowGroupCols, groupKeys) {\n        // we are not doing grouping if at the lowest level\n        return rowGroupCols.length > groupKeys.length;\n    }\n\n    function getLastRowIndex(request) {\n        return executeQuery({ ...request, startRow: undefined, endRow: undefined }).length;\n    }\n}\n","main.js":"let gridApi;\nconst gridOptions = {\n    columnDefs: [\n        { field: 'country', rowGroup: true, hide: true },\n        { field: 'athlete', minWidth: 190 },\n        { field: 'gold', aggFunc: 'sum' },\n        { field: 'silver', aggFunc: 'sum' },\n        { field: 'bronze', aggFunc: 'sum' },\n    ],\n\n    defaultColDef: {\n        flex: 1,\n        minWidth: 90,\n    },\n\n    autoGroupColumnDef: {\n        flex: 1,\n        minWidth: 180,\n    },\n    // use the server-side row model\n    rowModelType: 'serverSide',\n\n    // enable pagination\n    pagination: true,\n\n    // fit rows to height of page\n    paginationAutoPageSize: true,\n\n    suppressAggFuncInHeader: true,\n};\n\nfunction getServerSideDatasource(server) {\n    return {\n        getRows: (params) => {\n            console.log('[Datasource] - rows requested by grid: ', params.request);\n\n            var response = server.getData(params.request);\n\n            // adding delay to simulate real server call\n            setTimeout(() => {\n                if (response.success) {\n                    // call the success callback\n                    params.success({ rowData: response.rows, rowCount: response.lastRow });\n                } else {\n                    // inform the grid request failed\n                    params.fail();\n                }\n            }, 200);\n        },\n    };\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', function () {\n    var gridDiv = document.querySelector('#myGrid');\n    gridApi = agGrid.createGrid(gridDiv, gridOptions); \n\n    fetch('https://www.ag-grid.com/example-assets/olympic-winners.json')\n        .then((response) => response.json())\n        .then(function (data) {\n            // setup the fake server with entire dataset\n            var fakeServer = new FakeServer(data);\n\n            // create datasource with a reference to the fake server\n            var datasource = getServerSideDatasource(fakeServer);\n\n            // register the datasource with the grid\n            gridApi.setGridOption('serverSideDatasource', datasource);\n        });\n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\" class=\"ag-theme-quartz\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}},"extras":["alasql"]}