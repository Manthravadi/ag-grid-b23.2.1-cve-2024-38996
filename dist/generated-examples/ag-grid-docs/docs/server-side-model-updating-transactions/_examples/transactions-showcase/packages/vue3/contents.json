{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","styleFiles":[],"files":{"styles.css":".grid-container {\n    height: 100%;\n}\n\n#myGrid {\n    height: calc(100% - 35px);\n}\n","fakeServer.js":"function FakeServer() {\n    alasql.options.cache = false;\n\n    let intervals = [];\n    return {\n        randomUpdates: () => {\n            intervals.push(setInterval(() => randomTransaction({ numUpdate: 5, numAdd: 2, numRemove: 2 }), 1000));\n        },\n        stopUpdates: () => {\n            intervals.forEach(clearInterval);\n            intervals = [];\n        },\n        getData: function (request) {\n            var results = executeQuery(request);\n\n            return {\n                success: true,\n                rows: results,\n            };\n        },\n        getAggValues: function (groupRow) {\n            const whereClause = Object.entries(groupRow)\n                .map(([field, val]) => `${field} = \"${val}\"`)\n                .join(' AND ');\n            const SQL = `\n        SELECT SUM(current) as current, SUM(previous) as previous, COUNT(tradeId) as childCount FROM ? WHERE ${whereClause}\n      `;\n            return alasql(SQL, [data])[0];\n        },\n    };\n\n    function executeQuery(request) {\n        var groupByResult = executeRowGroupQuery(request);\n        var rowGroupCols = request.rowGroupCols;\n        var groupKeys = request.groupKeys;\n\n        if (!isDoingGrouping(rowGroupCols, groupKeys)) {\n            return groupByResult;\n        }\n\n        var groupsToUse = request.rowGroupCols.slice(groupKeys.length, groupKeys.length + 1);\n        var groupColId = groupsToUse[0].id;\n        var childCountResult = executeGroupChildCountsQuery(request, groupColId);\n\n        // add 'childCount' to group results\n        return groupByResult.map(function (group) {\n            group['childCount'] = childCountResult[group[groupColId]];\n            return group;\n        });\n    }\n\n    function executeRowGroupQuery(request) {\n        var groupByQuery = buildGroupBySql(request);\n\n        return alasql(groupByQuery, [data]);\n    }\n\n    function executeGroupChildCountsQuery(request, groupId) {\n        var SQL = interpolate('SELECT {0} FROM ? pivot (count({0}) for {0})' + whereSql(request), [groupId]);\n\n        return alasql(SQL, [data])[0];\n    }\n\n    function buildGroupBySql(request) {\n        return (\n            selectSql(request) +\n            ' FROM ?' +\n            whereSql(request) +\n            groupBySql(request) +\n            orderBySql(request) +\n            limitSql(request)\n        );\n    }\n\n    function selectSql(request) {\n        var rowGroupCols = request.rowGroupCols;\n        var valueCols = request.valueCols;\n        var groupKeys = request.groupKeys;\n\n        if (isDoingGrouping(rowGroupCols, groupKeys)) {\n            var rowGroupCol = rowGroupCols[groupKeys.length];\n            var colsToSelect = [rowGroupCol.id];\n\n            valueCols.forEach(function (valueCol) {\n                colsToSelect.push(valueCol.aggFunc + '(' + valueCol.id + ') AS ' + valueCol.id);\n            });\n\n            return 'SELECT ' + colsToSelect.join(', ');\n        }\n\n        return 'SELECT *';\n    }\n\n    function whereSql(request) {\n        var rowGroups = request.rowGroupCols;\n        var groupKeys = request.groupKeys;\n        var whereParts = [];\n\n        if (groupKeys) {\n            groupKeys.forEach(function (key, i) {\n                var value = typeof key === 'string' ? \"'\" + key + \"'\" : key;\n\n                whereParts.push(rowGroups[i].id + ' = ' + value);\n            });\n        }\n\n        if (whereParts.length > 0) {\n            return ' WHERE ' + whereParts.join(' AND ');\n        }\n\n        return '';\n    }\n\n    function groupBySql(request) {\n        var rowGroupCols = request.rowGroupCols;\n        var groupKeys = request.groupKeys;\n\n        if (isDoingGrouping(rowGroupCols, groupKeys)) {\n            var rowGroupCol = rowGroupCols[groupKeys.length];\n\n            return ' GROUP BY ' + rowGroupCol.id + ' HAVING count(*) > 0';\n        }\n\n        return '';\n    }\n\n    function orderBySql(request) {\n        var sortModel = request.sortModel;\n\n        if (sortModel.length === 0) return '';\n\n        var sorts = sortModel.map(function (s) {\n            return s.colId + ' ' + s.sort.toUpperCase();\n        });\n\n        return ' ORDER BY ' + sorts.join(', ');\n    }\n\n    function limitSql(request) {\n        if (request.endRow == undefined || request.startRow == undefined) {\n            return '';\n        }\n        var blockSize = request.endRow - request.startRow;\n\n        return ' LIMIT ' + blockSize + ' OFFSET ' + request.startRow;\n    }\n\n    function isDoingGrouping(rowGroupCols, groupKeys) {\n        // we are not doing grouping if at the lowest level\n        return rowGroupCols.length > groupKeys.length;\n    }\n\n    function getLastRowIndex(request, results) {\n        if (!results || results.length === 0) {\n            return null;\n        }\n        if (request.endRow == undefined || request.startRow == undefined) {\n            return results.length;\n        }\n        var currentLastRow = request.startRow + results.length;\n\n        return currentLastRow <= request.endRow ? currentLastRow : -1;\n    }\n}\n\nlet fakeServerInstance;\nexport function getFakeServer() {\n    if (!fakeServerInstance) {\n        fakeServerInstance = new FakeServer();\n    }\n    return fakeServerInstance;\n}\n\n// IE Workaround - as templates literals are not supported\nfunction interpolate(str, o) {\n    return str.replace(/{([^{}]*)}/g, function (a, b) {\n        var r = o[b];\n        return typeof r === 'string' || typeof r === 'number' ? r : a;\n    });\n}\n\nconst BOOK_COUNT = 3;\nconst MIN_TRADE_COUNT = 1;\nconst MAX_TRADE_COUNT = 10;\n\nconst products = [\n    'Palm Oil',\n    'Rubber',\n    'Wool',\n    'Amber',\n    'Copper',\n    'Lead',\n    'Zinc',\n    'Tin',\n    'Aluminium',\n    'Aluminium Alloy',\n    'Nickel',\n    'Cobalt',\n    'Molybdenum',\n    'Recycled Steel',\n    'Corn',\n    'Oats',\n];\n\nconst portfolios = ['Aggressive', 'Defensive', 'Income', 'Speculative', 'Hybrid'];\n\nlet nextTradeId = 0;\nconst FIRST_BOOK_ID = 62472;\n\nconst PRODUCT_BOOK_START = {};\nproducts.forEach((product, idx) => {\n    PRODUCT_BOOK_START[product] = FIRST_BOOK_ID + portfolios.length * BOOK_COUNT * idx;\n});\nconst PORTFOLIO_BOOK_OFFSET = {};\nportfolios.forEach((portfolio, idx) => {\n    PORTFOLIO_BOOK_OFFSET[portfolio] = idx * BOOK_COUNT;\n});\n\nlet nextBookId = 62472;\n\nexport let data = [];\n\n// IIFE to create initial data\n(function () {\n    const lastUpdated = new Date();\n\n    for (let i = 0; i < products.length; i++) {\n        let product = products[i];\n        for (let j = 0; j < portfolios.length; j++) {\n            let portfolio = portfolios[j];\n\n            for (let k = 0; k < BOOK_COUNT; k++) {\n                let book = createBookName();\n                let tradeCount = randomBetween(MAX_TRADE_COUNT, MIN_TRADE_COUNT);\n                for (let l = 0; l < tradeCount; l++) {\n                    let trade = createTradeRecord(product, portfolio, book);\n\n                    trade.updateCount = 0;\n                    trade.lastUpdated = lastUpdated;\n\n                    data.push(trade);\n                }\n            }\n        }\n    }\n})();\n\nexport let dataObservers = [];\nexport const registerObserver = ({ transactionFunc, groupedFields }) => {\n    const existingObserver = dataObservers.find(({ transactionFunc: oldFunc }) => oldFunc === transactionFunc);\n    if (existingObserver) {\n        existingObserver.groupedFields = groupedFields;\n        return;\n    }\n    dataObservers.push({\n        transactionFunc,\n        groupedFields,\n    });\n};\n\nconst uniqueQueries = new Map();\nexport function randomTransaction({ numAdd, numUpdate, numRemove }) {\n    uniqueQueries.clear();\n    // updates\n    const update = [];\n    for (let i = 0; i < numUpdate && data.length; i++) {\n        const idx = randomBetween(0, data.length - 1);\n        const d = data[idx];\n        d.previous = d.current;\n        d.current = d.previous + 13;\n        d.lastUpdated = new Date();\n        d.updateCount = ++d.updateCount;\n        update.push(d);\n    }\n\n    // adds\n    const add = [];\n    const lastUpdate = new Date();\n    for (let i = 0; i < numAdd; i++) {\n        const product = products[randomBetween(0, products.length - 1)];\n        const portfolio = portfolios[randomBetween(0, portfolios.length - 1)];\n        const bookStart = PRODUCT_BOOK_START[product] + PORTFOLIO_BOOK_OFFSET[portfolio];\n        const book = 'GL-' + randomBetween(bookStart, bookStart + BOOK_COUNT - 1);\n        const newRecord = createTradeRecord(product, portfolio, book);\n        newRecord.lastUpdated = lastUpdate;\n        newRecord.updateCount = 0;\n        add.push(newRecord);\n    }\n    // insert new rows at the end\n    data.push(...add);\n\n    // removes\n    const remove = [];\n    for (let i = 0; i < numRemove && data.length; i++) {\n        const idx = randomBetween(0, data.length - 1);\n        const d = data[idx];\n        data.splice(idx, 1);\n        remove.push(d);\n    }\n\n    dataObservers.forEach(({ transactionFunc, groupedFields }) => {\n        const routedTransactions = {};\n\n        translateRowsToRoutes({\n            rows: update,\n            op: 'update',\n            fields: groupedFields,\n            mutableTransactionObj: routedTransactions,\n        });\n        translateRowsToRoutes({\n            rows: remove,\n            op: 'remove',\n            fields: groupedFields,\n            mutableTransactionObj: routedTransactions,\n        });\n        translateRowsToRoutes({\n            rows: add,\n            op: 'add',\n            fields: groupedFields,\n            mutableTransactionObj: routedTransactions,\n        });\n\n        // may want to filter duplicates here\n        Object.values(routedTransactions).forEach(transactionFunc);\n    });\n}\n\nconst translateRowsToRoutes = ({ rows, op, fields, mutableTransactionObj }) => {\n    rows.forEach((item) => {\n        for (let i = 0; i < fields.length; i++) {\n            const route = fields.slice(0, i).map((field) => item[field]);\n            const routeId = route.join('-');\n            const groupRowFields = fields.slice(0, i + 1);\n            const groupRow = Object.fromEntries(groupRowFields.map((field) => [field, item[field]]));\n\n            // does a row belonging to this group already exist\n            const doesGroupExist = data.some(\n                (row) => row !== item && groupRowFields.every((field) => groupRow[field] === row[field])\n            );\n\n            const stringifiedRow = JSON.stringify(groupRow);\n            let aggValues;\n            if (uniqueQueries.has(stringifiedRow)) {\n                aggValues = uniqueQueries.get(stringifiedRow);\n            } else {\n                aggValues = getFakeServer().getAggValues(groupRow);\n                uniqueQueries.set(stringifiedRow, aggValues);\n            }\n            const newGroupItem = { ...groupRow, ...aggValues };\n\n            // if not, create a new group row instead\n            if (!doesGroupExist) {\n                const existingTransaction = mutableTransactionObj[routeId] || {};\n\n                mutableTransactionObj[routeId] = {\n                    ...existingTransaction,\n                    route,\n                    [op]: [...(existingTransaction[op] ?? []), newGroupItem],\n                };\n                return;\n            }\n\n            // if group does exist, update aggregations\n            const existingTransaction = mutableTransactionObj[routeId] || {};\n            mutableTransactionObj[routeId] = {\n                ...existingTransaction,\n                route: route,\n                update: [...(existingTransaction.update ?? []), newGroupItem],\n            };\n        }\n\n        // no groups need created, create the leaf row\n        const route = fields.map((field) => item[field]);\n        const routeId = route.join('-');\n        const existingTransaction = mutableTransactionObj[routeId] || {};\n\n        mutableTransactionObj[routeId] = {\n            route,\n            [op]: [...(existingTransaction[op] ?? []), item],\n        };\n    });\n};\n\nfunction randomBetween(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction createTradeRecord(product, portfolio, book) {\n    let current = Math.floor(Math.random() * 100000) + 100;\n    let previous = current + Math.floor(Math.random() * 10000) - 2000;\n    let trade = {\n        product: product,\n        portfolio: portfolio,\n        book: book,\n        tradeId: createTradeId(),\n        submitterID: randomBetween(10, 1000),\n        submitterDealID: randomBetween(10, 1000),\n        dealType: Math.random() < 0.2 ? 'Physical' : 'Financial',\n        bidFlag: Math.random() < 0.5 ? 'Buy' : 'Sell',\n        current: current,\n        previous: previous,\n        pl1: randomBetween(100, 1000),\n        pl2: randomBetween(100, 1000),\n        gainDx: randomBetween(100, 1000),\n        sxPx: randomBetween(100, 1000),\n        _99Out: randomBetween(100, 1000),\n    };\n    return trade;\n}\n\nfunction createBookName() {\n    return 'GL-' + nextBookId++;\n}\n\nfunction createTradeId() {\n    return nextTradeId++;\n}\n","main.js":"\nimport { createApp, onBeforeMount, ref, shallowRef } from 'vue';\nimport { AgGridVue } from 'ag-grid-vue3';\nimport 'ag-grid-charts-enterprise';\nimport 'ag-grid-community/styles/ag-grid.css';\nimport './styles.css';\nimport 'ag-grid-community/styles/ag-theme-quartz.css';\nimport { getFakeServer, registerObserver } from './fakeServer.js';\n\n\n\nconst VueExample = {\n    template: `\n        <div style=\"height: 100%\">\n                <div class=\"grid-container\">\n      <div style=\"margin-bottom: 5px\">\n        <button id=\"startUpdates\" v-on:click=\"startUpdates()\">Start Updates</button>\n        <button id=\"stopUpdates\" v-on:click=\"stopUpdates()\">Stop Updates</button>\n      </div>\n      <ag-grid-vue\n        style=\"width: 100%; height: 100%;\"\n        :class=\"themeClass\"\n        :columnDefs=\"columnDefs\"\n        @grid-ready=\"onGridReady\"\n        :defaultColDef=\"defaultColDef\"\n        :autoGroupColumnDef=\"autoGroupColumnDef\"\n        :rowGroupPanelShow=\"rowGroupPanelShow\"\n        :purgeClosedRowNodes=\"true\"\n        :rowModelType=\"rowModelType\"\n        :getChildCount=\"getChildCount\"\n        :getRowId=\"getRowId\"\n        :isServerSideGroupOpenByDefault=\"isServerSideGroupOpenByDefault\"\n        @column-row-group-changed=\"onColumnRowGroupChanged\"></ag-grid-vue>\n      </div>\n        </div>\n    `,\n    components: {\n        'ag-grid-vue': AgGridVue,\n        \n    },\n    setup(props) {\n        const columnDefs = ref([{field:\"tradeId\"},{field:\"product\",\nrowGroup:true,\nenableRowGroup:true,\nhide:true},{field:\"portfolio\",\nrowGroup:true,\nenableRowGroup:true,\nhide:true},{field:\"book\",\nrowGroup:true,\nenableRowGroup:true,\nhide:true},{field:\"previous\",\naggFunc:\"sum\"},{field:\"current\",\naggFunc:\"sum\"}]);\n        const gridApi = shallowRef();\n        const defaultColDef = ref({\n    flex: 1,\n    minWidth: 100,\n    enableCellChangeFlash: true,\n});\n        const autoGroupColumnDef = ref(null);\nconst rowGroupPanelShow = ref(null);\nconst rowModelType = ref(null)\n        \n        onBeforeMount(() => {\n            autoGroupColumnDef.value = {\n    minWidth: 220,\n};\nrowGroupPanelShow.value = 'always';\nrowModelType.value = 'serverSide'            \n        });\n        \n        const onColumnRowGroupChanged = (event) => {\n    const colState = event.api.getColumnState();\n    const groupedColumns = colState.filter((state) => state.rowGroup);\n    groupedColumns.sort((a, b) => a.rowGroupIndex - b.rowGroupIndex);\n    const groupedFields = groupedColumns.map((col) => col.colId);\n    registerObserver({\n        transactionFunc: (t) => gridApi.value.applyServerSideTransactionAsync(t),\n        groupedFields: groupedFields.length === 0 ? undefined : groupedFields,\n    });\n};\nconst startUpdates = () => {\n    getFakeServer().randomUpdates();\n    disable('#startUpdates', true);\n    disable('#stopUpdates', false);\n};\nconst stopUpdates = () => {\n    getFakeServer().stopUpdates();\n    disable('#stopUpdates', true);\n    disable('#startUpdates', false);\n};\nconst onGridReady = (params) => {\n        \n        gridApi.value = params.api;\n        \n\n        \n    disable('#stopUpdates', true);\n    // create datasource with a reference to the fake server\n    const datasource = getServerSideDatasource(getFakeServer());\n    // register the datasource with the grid\n    params.api.setGridOption('serverSideDatasource', datasource);\n    // register interest in data changes\n    registerObserver({\n        transactionFunc: (t) => params.api.applyServerSideTransactionAsync(t),\n        groupedFields: ['product', 'portfolio', 'book'],\n    });\n\n    };\nconst getChildCount = (data) => {\n    return data ? data.childCount : undefined;\n};\nconst getRowId = (params) => {\n    var rowId = '';\n    if (params.parentKeys && params.parentKeys.length) {\n        rowId += params.parentKeys.join('-') + '-';\n    }\n    const groupCols = params.api.getRowGroupColumns();\n    if (groupCols.length > params.level) {\n        const thisGroupCol = groupCols[params.level];\n        rowId += params.data[thisGroupCol.getColDef().field] + '-';\n    }\n    if (params.data.tradeId != null) {\n        rowId += params.data.tradeId;\n    }\n    return rowId;\n};\nconst isServerSideGroupOpenByDefault = (params) => {\n    let route = params.rowNode.getRoute();\n    if (!route) {\n        return false;\n    }\n    const routeAsString = route.join(',');\n    return ['Wool', 'Wool,Aggressive', 'Wool,Aggressive,GL-62502'].indexOf(routeAsString) >= 0;\n};\n                \n        return {\n            columnDefs,\n            gridApi,\n            defaultColDef,\nautoGroupColumnDef,\nrowGroupPanelShow,\nrowModelType,\ngetChildCount,\ngetRowId,\nisServerSideGroupOpenByDefault,\n            onGridReady,\n            themeClass: /** DARK MODE START **/document.documentElement.dataset.defaultTheme || 'ag-theme-quartz'/** DARK MODE END **/,\n            onColumnRowGroupChanged,\nstartUpdates,\nstopUpdates\n        }        \n    }\n}\n\nwindow.disable = function disable(id, disabled) {\n    document.querySelector(id).disabled = disabled;\n}\n\nwindow.getServerSideDatasource = function getServerSideDatasource(server) {\n    return {\n        getRows: (params) => {\n            console.log('[Datasource] - rows requested by grid: ', params.request);\n            const response = server.getData(params.request);\n            // adding delay to simulate real server call\n            setTimeout(() => {\n                if (response.success) {\n                    // call the success callback\n                    params.success({\n                        rowData: response.rows,\n                        rowCount: response.lastRow,\n                    });\n                }\n                else {\n                    // inform the grid request failed\n                    params.fail();\n                }\n            }, 300);\n        },\n    };\n}\n\ncreateApp(VueExample)\n    .mount(\"#app\")\n\n","index.html":"<div class=\"grid-container\">\n    <div style=\"margin-bottom: 5px\">\n        <button id=\"startUpdates\" onclick=\"startUpdates()\">Start Updates</button>\n        <button id=\"stopUpdates\" onclick=\"stopUpdates()\">Stop Updates</button>\n    </div>\n    <div id=\"myGrid\" class=\"ag-theme-quartz\"></div>\n</div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.dev.js":"(function (global) {\n    var sjsPaths = {};\n    if (typeof systemJsPaths !== 'undefined') {\n        sjsPaths = systemJsPaths;\n    }\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        defaultExtension: 'js',\n        paths: {\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...sjsPaths,\n        },\n        map: {\n            css: 'npm:systemjs-plugin-css@0.1.37/css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            vue: 'npm:vue@3.2.29/dist/vue.esm-browser.js',\n            '@vue/reactivity': 'npm:@vue/reactivity@3.0.0/dist/reactivity.esm-browser.js',\n            // vue class component\n            'vue-class-component': 'npm:vue-class-component@^8.0.0-beta.3/dist/vue-class-component.cjs.js',\n\n            app: appLocation + 'app',\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            vue: {\n                defaultExtension: 'js',\n            },\n            'vue-class-component': {\n                defaultExtension: 'js',\n            },\n            'vue-property-decorator': {\n                defaultExtension: 'js',\n            },\n            app: {\n                defaultExtension: 'js',\n            },\n            '@ag-grid-community/vue3': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-locale': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n            },\n            '@ag-grid-enterprise/clipboard': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-vue3': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-enterprise-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        defaultExtension: 'js',\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            vue: 'npm:vue@3.2.29/dist/vue.esm-browser.js',\n            '@vue/reactivity': 'npm:@vue/reactivity@3.0.0/dist/reactivity.esm-browser.prod.js',\n\n            // vue class component\n            'vue-class-component': 'npm:vue-class-component@^8.0.0-beta.3/dist/vue-class-component.cjs.js',\n\n            app: appLocation + 'app',\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            vue: {\n                defaultExtension: 'js',\n            },\n            'vue-class-component': {\n                defaultExtension: 'js',\n            },\n            'vue-property-decorator': {\n                defaultExtension: 'js',\n            },\n            app: {\n                defaultExtension: 'js',\n            },\n            '@ag-grid-community/vue3': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                format: 'cjs',\n            },\n            'ag-grid-locale': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/clipboard': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-vue3': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"},"extras":["alasql"]}