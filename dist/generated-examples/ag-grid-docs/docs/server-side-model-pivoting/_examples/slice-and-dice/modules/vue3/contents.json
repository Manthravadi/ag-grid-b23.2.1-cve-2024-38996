{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","styleFiles":[],"files":{"countries.js":"export function getCountries() {\n    return [\n        'United States',\n        'Russia',\n        'Australia',\n        'Canada',\n        'Norway',\n        'China',\n        'Zimbabwe',\n        'Netherlands',\n        'South Korea',\n        'Croatia',\n        'France',\n        'Japan',\n        'Hungary',\n        'Germany',\n        'Poland',\n        'South Africa',\n        'Sweden',\n        'Ukraine',\n        'Italy',\n        'Czech Republic',\n        'Austria',\n        'Finland',\n        'Romania',\n        'Great Britain',\n        'Jamaica',\n        'Singapore',\n        'Belarus',\n        'Chile',\n        'Spain',\n        'Tunisia',\n        'Brazil',\n        'Slovakia',\n        'Costa Rica',\n        'Bulgaria',\n        'Switzerland',\n        'New Zealand',\n        'Estonia',\n        'Kenya',\n        'Ethiopia',\n        'Trinidad and Tobago',\n        'Turkey',\n        'Morocco',\n        'Bahamas',\n        'Slovenia',\n        'Armenia',\n        'Azerbaijan',\n        'India',\n        'Puerto Rico',\n        'Egypt',\n        'Kazakhstan',\n        'Iran',\n        'Georgia',\n        'Lithuania',\n        'Cuba',\n        'Colombia',\n        'Mongolia',\n        'Uzbekistan',\n        'North Korea',\n        'Tajikistan',\n        'Kyrgyzstan',\n        'Greece',\n        'Macedonia',\n        'Moldova',\n        'Chinese Taipei',\n        'Indonesia',\n        'Thailand',\n        'Vietnam',\n        'Latvia',\n        'Venezuela',\n        'Mexico',\n        'Nigeria',\n        'Qatar',\n        'Serbia',\n        'Serbia and Montenegro',\n        'Hong Kong',\n        'Denmark',\n        'Portugal',\n        'Argentina',\n        'Afghanistan',\n        'Gabon',\n        'Dominican Republic',\n        'Belgium',\n        'Kuwait',\n        'United Arab Emirates',\n        'Cyprus',\n        'Israel',\n        'Algeria',\n        'Montenegro',\n        'Iceland',\n        'Paraguay',\n        'Cameroon',\n        'Saudi Arabia',\n        'Ireland',\n        'Malaysia',\n        'Uruguay',\n        'Togo',\n        'Mauritius',\n        'Syria',\n        'Botswana',\n        'Guatemala',\n        'Bahrain',\n        'Grenada',\n        'Uganda',\n        'Sudan',\n        'Ecuador',\n        'Panama',\n        'Eritrea',\n        'Sri Lanka',\n        'Mozambique',\n        'Barbados',\n    ];\n}\n","customAgeFilter.js":"\nexport class CustomAgeFilter  {\n    eGui;\n    filterValue = null;\n    params;\n\n    init(params) {\n        this.eGui = document.createElement('div');\n        this.eGui.innerHTML = `<div>  \n            <label>    \n                <input type=\"radio\" name=\"ageFilterValue\" data-ref=\"btAll\" checked/> All  \n            </label>  \n            <label>    \n                <input type=\"radio\" name=\"ageFilterValue\" data-ref=\"bt20\"/> 20  \n            </label>  \n            <label>    \n                <input type=\"radio\" name=\"ageFilterValue\" data-ref=\"bt22\"/> 22  \n            </label>\n          </div>`;\n\n        this.filterValue = null;\n        this.params = params;\n\n        // var that = this;\n\n        this.eGui.querySelector('[data-ref=\"btAll\"]').addEventListener('change', this.onSelection.bind(this, null));\n        this.eGui.querySelector('[data-ref=\"bt20\"]').addEventListener('change', this.onSelection.bind(this, 20));\n        this.eGui.querySelector('[data-ref=\"bt22\"]').addEventListener('change', this.onSelection.bind(this, 22));\n    }\n\n    onSelection(value) {\n        this.filterValue = value;\n        this.params.filterChangedCallback();\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    isFilterActive() {\n        return this.filterValue !== null;\n    }\n\n    doesFilterPass(params) {\n        // not needed for server side filtering\n        const { node } = params;\n        const value = this.params.getValue(node);\n        return value == this.filterValue;\n    }\n\n    getModel() {\n        if (this.filterValue === null) {\n            return null;\n        } else {\n            // the format of what you return depends on your server side, just\n            // return something that your server side can work with.\n            return {\n                filter: this.filterValue,\n                type: 'equals',\n            };\n        }\n    }\n\n    setModel(model) {\n        if (model && model.filter === 20) {\n            this.eGui.querySelector('[data-ref=\"bt20\"]').checked = true;\n            this.filterValue = 20;\n        } else if (model && model.filter === 22) {\n            this.eGui.querySelector('[data-ref=\"bt22\"]').checked = true;\n            this.filterValue = 22;\n        } else {\n            this.eGui.querySelector('[data-ref=\"btAll\"]').checked = true;\n            this.filterValue = null;\n        }\n    }\n}\n","server.js":"export function createServerSideDatasource(fakeServer) {\n    class ServerSideDatasource {\n        constructor(fakeServer) {\n            this.fakeServer = fakeServer;\n        }\n\n        getRows(params) {\n            this.fakeServer.getData(params.request, (resultForGrid, lastRow, pivotFields) => {\n                params.success({\n                    rowData: resultForGrid,\n                    rowCount: lastRow,\n                    pivotResultFields: pivotFields,\n                });\n            });\n        }\n    }\n\n    return new ServerSideDatasource(fakeServer);\n}\n\nexport function createFakeServer(data) {\n    // THIS IS NOT PRODUCTION CODE\n    // in your application, you should be implementing the server logic in your server, maybe in JavaScript, but\n    // also maybe in Java, C# or another server side language. The server side would then typically query a database\n    // or another data store to get the data, and the grouping, aggregation and pivoting would be done by the data store.\n    // This fake server is only intended to demonstrate the interface between AG Grid and the server side. The\n    // implementation details are not intended to be an example of how your server side should create results.\n\n    return new FakeServer(data);\n}\n\nclass FakeServer {\n    constructor(allData) {\n        this.allData = allData;\n    }\n\n    getData(request, callback) {\n        let {\n            // Filtering\n            filterModel,\n\n            // Pivoting\n            pivotCols,\n            pivotMode,\n\n            // Grouping\n            groupKeys,\n            rowGroupCols,\n\n            // Aggregation\n            valueCols,\n\n            // Sorting\n            sortModel,\n        } = request;\n\n        // Pivot is only active if we have pivot columns and aggregate columns\n        const pivotActive = pivotMode && pivotCols.length > 0 && valueCols.length > 0;\n\n        /** Filter data */\n        let rowData = this.filterList(this.allData, filterModel);\n\n        /** Pivot data */\n        let pivotFields = null;\n        if (pivotActive) {\n            const pivotResult = this.pivot(pivotCols, rowGroupCols, valueCols, rowData);\n            // Pivoted row data\n            rowData = pivotResult.data;\n            // Aggregate instead by the pivot columns\n            valueCols = pivotResult.aggCols;\n            // Pivoted columns fields to allow grid to generate pivot result columns\n            pivotFields = pivotResult.pivotFields;\n        }\n\n        /** Group & Aggregate data */\n        if (rowGroupCols.length > 0) {\n            // When grouping we only return data for one group per request, so filter the other data out\n            rowData = this.filterOutOtherGroups(rowData, groupKeys, rowGroupCols);\n\n            // If this group isn't the bottom level, then group the rows rather than returning them\n            const showingGroupLevel = rowGroupCols.length > groupKeys.length;\n            if (showingGroupLevel) {\n                rowData = this.buildGroupsFromData(rowData, rowGroupCols, groupKeys, valueCols);\n            }\n        } else if (pivotMode) {\n            // When pivoting without groups, aggregate all data into one row\n            var rootGroup = this.aggregateList(rowData, valueCols);\n            rowData = [rootGroup];\n        }\n\n        /** Sort data */\n        rowData = this.sortList(rowData, sortModel);\n\n        const lastRow = rowData.length;\n\n        /** Paginate data */\n        if (request.startRow != null && request.endRow != null) {\n            rowData = rowData.slice(request.startRow, request.endRow);\n        }\n\n        // so that the example behaves like a server side call, we put\n        // it in a timeout to a) give a delay and b) make it asynchronous\n        setTimeout(function () {\n            callback(rowData, lastRow, pivotFields);\n        }, 1000);\n    }\n\n    sortList(data, sortModel) {\n        var sortPresent = sortModel && sortModel.length > 0;\n        if (!sortPresent) {\n            return data;\n        }\n        // do an in memory sort of the data, across all the fields\n        var resultOfSort = data.slice();\n        resultOfSort.sort(function (a, b) {\n            for (var k = 0; k < sortModel.length; k++) {\n                var sortColModel = sortModel[k];\n                var valueA = a[sortColModel.colId];\n                var valueB = b[sortColModel.colId];\n                // this filter didn't find a difference, move onto the next one\n                if (valueA == valueB) {\n                    continue;\n                }\n                var sortDirection = sortColModel.sort === 'asc' ? 1 : -1;\n                if (valueA > valueB) {\n                    return sortDirection;\n                } else {\n                    return sortDirection * -1;\n                }\n            }\n            // no filters found a difference\n            return 0;\n        });\n        return resultOfSort;\n    }\n\n    filterList(data, filterModel) {\n        var filterPresent = filterModel && Object.keys(filterModel).length > 0;\n        if (!filterPresent) {\n            return data;\n        }\n\n        var resultOfFilter = [];\n        for (var i = 0; i < data.length; i++) {\n            var item = data[i];\n\n            if (filterModel.age) {\n                var age = item.age;\n                var allowedAge = parseInt(filterModel.age.filter);\n                if (filterModel.age.type == 'equals') {\n                    if (age !== allowedAge) {\n                        continue;\n                    }\n                } else if (filterModel.age.type == 'lessThan') {\n                    if (age >= allowedAge) {\n                        continue;\n                    }\n                } else {\n                    if (age <= allowedAge) {\n                        continue;\n                    }\n                }\n            }\n\n            if (filterModel.year) {\n                if (filterModel.year.values.indexOf(item.year.toString()) < 0) {\n                    // year didn't match, so skip this record\n                    continue;\n                }\n            }\n\n            if (filterModel.country) {\n                if (filterModel.country.values.indexOf(item.country) < 0) {\n                    continue;\n                }\n            }\n\n            resultOfFilter.push(item);\n        }\n\n        return resultOfFilter;\n    }\n\n    // function does pivoting. this is very funky logic, doing pivoting and creating pivot result columns on the fly.\n    // if you are using the AG Grid Enterprise Row Model, remember this would all be done on your server side with a\n    // database or something that does pivoting for you - this messy code is just for demo purposes on how to use\n    // ag-Gird, it's not supposed to be beautiful production quality code.\n    pivot(pivotCols, rowGroupCols, valueCols, data) {\n        const pivotData = [];\n        const aggColsList = [];\n        let pivotFields = new Set();\n        data.forEach(function (item) {\n            var pivotValues = [];\n            pivotCols.forEach(function (pivotCol) {\n                var pivotField = pivotCol.id;\n                var pivotValue = item[pivotField];\n                if (pivotValue !== null && pivotValue !== undefined && pivotValue.toString) {\n                    pivotValues.push(pivotValue.toString());\n                } else {\n                    pivotValues.push('-');\n                }\n            });\n            var pivotItem = {};\n\n            valueCols.forEach(function (valueCol) {\n                const valField = valueCol.id;\n\n                const pivotKey = pivotValues.join('_');\n                const colKey = `${pivotKey}_${valField}`;\n                if (!pivotFields.has(colKey)) {\n                    pivotFields.add(colKey);\n                    // add value col so server can aggregate later\n                    aggColsList.push({\n                        id: colKey,\n                        field: colKey,\n                        aggFunc: valueCol.aggFunc,\n                    });\n                }\n\n                var value = item[valField];\n                pivotItem[colKey] = value;\n            });\n\n            rowGroupCols.forEach(function (rowGroupCol) {\n                var rowGroupField = rowGroupCol.id;\n                pivotItem[rowGroupField] = item[rowGroupField];\n            });\n\n            pivotData.push(pivotItem);\n        });\n\n        return {\n            data: pivotData,\n            aggCols: aggColsList,\n            pivotFields: [...pivotFields],\n        };\n    }\n\n    buildGroupsFromData(rowData, rowGroupCols, groupKeys, valueCols) {\n        var rowGroupCol = rowGroupCols[groupKeys.length];\n        var field = rowGroupCol.id;\n        var mappedRowData = this.groupBy(rowData, field);\n\n        if (!mappedRowData) {\n            return [];\n        }\n\n        var groups = [];\n        var that = this;\n        for (let key in mappedRowData) {\n            const thisRowData = mappedRowData[key];\n            const groupItem = that.aggregateList(thisRowData, valueCols);\n            groupItem[field] = key;\n            groups.push(groupItem);\n        }\n        return groups;\n    }\n\n    aggregateList(rowData, valueCols) {\n        const result = {};\n\n        for (let i = 0; i < valueCols.length; i++) {\n            const col = valueCols[i];\n            const field = col.id;\n\n            // the aggregation we do depends on which agg func the user picked\n            switch (col.aggFunc) {\n                case 'sum':\n                    let sum = 0;\n                    for (let i = 0; i < rowData.length; i++) {\n                        const row = rowData[i];\n                        const value = row[field];\n                        if (value === undefined) continue;\n\n                        sum += value;\n                    }\n                    result[field] = sum;\n                    break;\n                case 'min':\n                    let min = null;\n                    for (let i = 0; i < rowData.length; i++) {\n                        const row = rowData[i];\n                        const value = row[field];\n                        if (value === undefined) continue;\n\n                        if (min === null || min > value) {\n                            min = value;\n                        }\n                    }\n                    result[field] = min;\n                    break;\n                case 'max':\n                    let max = null;\n                    for (let i = 0; i < rowData.length; i++) {\n                        const row = rowData[i];\n                        const value = row[field];\n                        if (value === undefined) continue;\n\n                        if (max === null || max < value) {\n                            max = value;\n                        }\n                    }\n                    result[field] = max;\n                    break;\n                case 'random':\n                    result[field] = Math.random(); // just make up a number\n                    break;\n                default:\n                    console.warn('unrecognised aggregation function: ' + valueCol.aggFunc);\n                    break;\n            }\n        }\n\n        return result;\n    }\n\n    // if user is down some group levels, we take everything else out. eg\n    // if user has opened the two groups United States and 2002, we filter\n    // out everything that is not equal to United States and 2002.\n    filterOutOtherGroups(originalData, groupKeys, rowGroupCols) {\n        var filteredData = originalData;\n        var that = this;\n\n        // if we are inside a group, then filter out everything that is not\n        // part of this group\n        groupKeys.forEach(function (groupKey, index) {\n            var rowGroupCol = rowGroupCols[index];\n            var field = rowGroupCol.id;\n\n            filteredData = that.filter(filteredData, function (item) {\n                return item[field] == groupKey;\n            });\n        });\n\n        return filteredData;\n    }\n\n    groupBy(data, field) {\n        var result = {};\n        data.forEach(function (item) {\n            var key = item[field];\n            var listForThisKey = result[key];\n            if (!listForThisKey) {\n                listForThisKey = [];\n                result[key] = listForThisKey;\n            }\n            listForThisKey.push(item);\n        });\n        return result;\n    }\n\n    filter(data, callback) {\n        var result = [];\n        data.forEach(function (item) {\n            if (callback(item)) {\n                result.push(item);\n            }\n        });\n        return result;\n    }\n}\n","main.js":"\nimport { createApp, onBeforeMount, ref, shallowRef } from 'vue';\nimport { AgGridVue } from '@ag-grid-community/vue3';\nimport '@ag-grid-community/styles/ag-grid.css';\nimport \"@ag-grid-community/styles/ag-theme-quartz.css\";\nimport { getCountries } from './countries.js';\nimport { CustomAgeFilter } from './customAgeFilter.js';\nimport { createFakeServer, createServerSideDatasource } from './server.js';\nimport { ModuleRegistry } from '@ag-grid-community/core';\nimport { ColumnsToolPanelModule } from '@ag-grid-enterprise/column-tool-panel';\nimport { FiltersToolPanelModule } from '@ag-grid-enterprise/filter-tool-panel';\nimport { MenuModule } from '@ag-grid-enterprise/menu';\nimport { RowGroupingModule } from '@ag-grid-enterprise/row-grouping';\nimport { ServerSideRowModelModule } from '@ag-grid-enterprise/server-side-row-model';\nimport { SetFilterModule } from '@ag-grid-enterprise/set-filter';\nModuleRegistry.registerModules([\n    ColumnsToolPanelModule,\n    FiltersToolPanelModule,\n    MenuModule,\n    RowGroupingModule,\n    ServerSideRowModelModule,\n    SetFilterModule,\n]);\n\n\n\nconst VueExample = {\n    template: `\n        <div style=\"height: 100%\">\n                <ag-grid-vue\n      style=\"width: 100%; height: 100%;\"\n      :class=\"themeClass\"\n      :columnDefs=\"columnDefs\"\n      @grid-ready=\"onGridReady\"\n      :defaultColDef=\"defaultColDef\"\n      :autoGroupColumnDef=\"autoGroupColumnDef\"\n      :rowModelType=\"rowModelType\"\n      :rowGroupPanelShow=\"rowGroupPanelShow\"\n      :pivotPanelShow=\"pivotPanelShow\"\n      :sideBar=\"true\"\n      :maxConcurrentDatasourceRequests=\"maxConcurrentDatasourceRequests\"\n      :maxBlocksInCache=\"maxBlocksInCache\"\n      :purgeClosedRowNodes=\"true\"></ag-grid-vue>\n        </div>\n    `,\n    components: {\n        'ag-grid-vue': AgGridVue,\n        \n    },\n    setup(props) {\n        const columnDefs = ref([{field:\"athlete\",\nenableRowGroup:true,\nfilter:false},{field:\"age\",\nenableRowGroup:true,\nenablePivot:true,\nfilter:CustomAgeFilter},{field:\"country\",\nenableRowGroup:true,\nenablePivot:true,\nrowGroup:true,\nhide:true,\nfilter:\"agSetColumnFilter\",\nfilterParams:{\"values\":countries}},{field:\"year\",\nenableRowGroup:true,\nenablePivot:true,\nrowGroup:true,\nhide:true,\nfilter:\"agSetColumnFilter\",\nfilterParams:{\"values\":[\"2000\",\"2002\",\"2004\",\"2006\",\"2008\",\"2010\",\"2012\"]}},{field:\"sport\",\nenableRowGroup:true,\nenablePivot:true,\nfilter:false},{field:\"gold\",\naggFunc:\"sum\",\nfilter:false,\nenableValue:true},{field:\"silver\",\naggFunc:\"sum\",\nfilter:false,\nenableValue:true},{field:\"bronze\",\naggFunc:\"sum\",\nfilter:false,\nenableValue:true}]);\n        const gridApi = shallowRef();\n        const defaultColDef = ref({\n    flex: 1,\n    minWidth: 150,\n    // restrict what aggregation functions the columns can have,\n    // include a custom function 'random' that just returns a\n    // random number\n    allowedAggFuncs: ['sum', 'min', 'max', 'random'],\n    filter: true,\n});\n        const autoGroupColumnDef = ref(null);\nconst rowModelType = ref(null);\nconst rowGroupPanelShow = ref(null);\nconst pivotPanelShow = ref(null);\nconst maxConcurrentDatasourceRequests = ref(null);\nconst maxBlocksInCache = ref(null)\n        \n        onBeforeMount(() => {\n            autoGroupColumnDef.value = {\n    width: 180,\n};\nrowModelType.value = 'serverSide';\nrowGroupPanelShow.value = 'always';\npivotPanelShow.value = 'always';\nmaxConcurrentDatasourceRequests.value = 1;\nmaxBlocksInCache.value = 2            \n        });\n        \n        const onGridReady = (params) => {\n        \n        gridApi.value = params.api;\n        \n\n        \n            const updateData = (data) => {\n    const fakeServer = createFakeServer(data);\n    const datasource = createServerSideDatasource(fakeServer);\n    params.api.setGridOption('serverSideDatasource', datasource);\n};\n            \n            fetch('https://www.ag-grid.com/example-assets/olympic-winners.json')\n                .then(resp => resp.json())\n                .then(data => updateData(data));\n    };\n                \n        return {\n            columnDefs,\n            gridApi,\n            defaultColDef,\nautoGroupColumnDef,\nrowModelType,\nrowGroupPanelShow,\npivotPanelShow,\nmaxConcurrentDatasourceRequests,\nmaxBlocksInCache,\n            onGridReady,\n            themeClass: /** DARK MODE START **/document.documentElement.dataset.defaultTheme || 'ag-theme-quartz'/** DARK MODE END **/,\n            \n        }        \n    }\n}\n\nconst countries = getCountries();\n\ncreateApp(VueExample)\n    .mount(\"#app\")\n\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\" class=\"ag-theme-quartz\"></div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.dev.js":"(function (global) {\n    var sjsPaths = {};\n    if (typeof systemJsPaths !== 'undefined') {\n        sjsPaths = systemJsPaths;\n    }\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        defaultExtension: 'js',\n        paths: {\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...sjsPaths,\n        },\n        map: {\n            css: 'npm:systemjs-plugin-css@0.1.37/css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            vue: 'npm:vue@3.2.29/dist/vue.esm-browser.js',\n            '@vue/reactivity': 'npm:@vue/reactivity@3.0.0/dist/reactivity.esm-browser.js',\n            // vue class component\n            'vue-class-component': 'npm:vue-class-component@^8.0.0-beta.3/dist/vue-class-component.cjs.js',\n\n            app: appLocation + 'app',\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            vue: {\n                defaultExtension: 'js',\n            },\n            'vue-class-component': {\n                defaultExtension: 'js',\n            },\n            'vue-property-decorator': {\n                defaultExtension: 'js',\n            },\n            app: {\n                defaultExtension: 'js',\n            },\n            '@ag-grid-community/vue3': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-locale': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n            },\n            '@ag-grid-enterprise/clipboard': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-vue3': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-enterprise-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        defaultExtension: 'js',\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            vue: 'npm:vue@3.2.29/dist/vue.esm-browser.js',\n            '@vue/reactivity': 'npm:@vue/reactivity@3.0.0/dist/reactivity.esm-browser.prod.js',\n\n            // vue class component\n            'vue-class-component': 'npm:vue-class-component@^8.0.0-beta.3/dist/vue-class-component.cjs.js',\n\n            app: appLocation + 'app',\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            vue: {\n                defaultExtension: 'js',\n            },\n            'vue-class-component': {\n                defaultExtension: 'js',\n            },\n            'vue-property-decorator': {\n                defaultExtension: 'js',\n            },\n            app: {\n                defaultExtension: 'js',\n            },\n            '@ag-grid-community/vue3': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                format: 'cjs',\n            },\n            'ag-grid-locale': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/clipboard': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-vue3': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"}}