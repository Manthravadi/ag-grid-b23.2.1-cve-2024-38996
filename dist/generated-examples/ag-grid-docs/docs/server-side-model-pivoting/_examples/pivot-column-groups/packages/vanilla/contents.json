{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["fakeServer.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 auto;\n    width: 100%;\n}\n","fakeServer.js":"// This fake server uses http://alasql.org/ to mimic how a real server\n// might generate sql queries from the Server-Side Row Model request.\n// To keep things simple it does the bare minimum to support the example.\nfunction FakeServer(allData) {\n    alasql.options.cache = false;\n\n    return {\n        getData: function (request) {\n            var result = executeQuery(request);\n\n            return {\n                success: true,\n                rows: result,\n                lastRow: getLastRowIndex(request, result),\n                pivotFields: getPivotFields(request),\n            };\n        },\n    };\n\n    function executeQuery(request) {\n        var pivotCols = request.pivotCols;\n        var pivotCol = pivotCols[0]; // 'alasql' can only pivot on a single column\n\n        // 'alasql' only supports pivoting on a single value column, to workaround this limitation we need to perform\n        // separate queries for each value column and combine the results\n        var results = [];\n\n        request.valueCols.forEach(function (valueCol) {\n            var pivotResults = executePivotQuery(request, pivotCol, valueCol);\n\n            // merge each row into existing results\n            for (var i = 0; i < pivotResults.length; i++) {\n                var pivotResult = pivotResults[i];\n                var result = results[i] || {};\n\n                Object.keys(pivotResult).forEach(function (key) {\n                    result[key] = pivotResult[key];\n                });\n\n                results[i] = result;\n            }\n        });\n\n        return alasql('SELECT * FROM ?' + orderBySql(request), [results]);\n    }\n\n    function orderBySql(request) {\n        var sortModel = request.sortModel;\n\n        if (sortModel.length === 0) return '';\n\n        var sorts = sortModel.map(function (s) {\n            return '`' + s.colId + '` ' + s.sort.toUpperCase();\n        });\n\n        return ' ORDER BY ' + sorts.join(', ');\n    }\n\n    function executePivotQuery(request, pivotCol, valueCol) {\n        var groupKeys = request.groupKeys;\n        var groupsToUse = request.rowGroupCols.slice(groupKeys.length, groupKeys.length + 1);\n        var selectGroupCols = groupsToUse\n            .map(function (groupCol) {\n                return groupCol.id;\n            })\n            .join(', ');\n\n        var SQL_TEMPLATE = \"SELECT {0}, ({1} + '_{2}') AS {1}, {2} FROM ? PIVOT (SUM([{2}]) FOR {1})\";\n        var SQL = interpolate(SQL_TEMPLATE, [selectGroupCols, pivotCol.id, valueCol.id]) + whereSql(request);\n\n        console.log('[FakeServer] - about to execute query:', SQL);\n\n        var result = alasql(SQL, [allData]);\n\n        // workaround - 'alasql' doesn't support PIVOT + LIMIT\n        return extractRowsForBlock(request, result);\n    }\n\n    function whereSql(request) {\n        var rowGroups = request.rowGroupCols;\n        var groupKeys = request.groupKeys;\n        var whereParts = [];\n\n        if (groupKeys) {\n            groupKeys.forEach(function (key, i) {\n                var value = typeof key === 'string' ? \"'\" + key + \"'\" : key;\n\n                whereParts.push(rowGroups[i].id + ' = ' + value);\n            });\n        }\n\n        if (whereParts.length > 0) {\n            return ' WHERE ' + whereParts.join(' AND ');\n        }\n\n        return '';\n    }\n\n    function extractRowsForBlock(request, results) {\n        var blockSize = request.endRow - request.startRow + 1;\n\n        return results.slice(request.startRow, request.startRow + blockSize);\n    }\n\n    function getPivotFields(request) {\n        var pivotCol = request.pivotCols[0];\n        var template = \"SELECT DISTINCT ({0} + '_{1}') AS {0} FROM ? ORDER BY {0}\";\n\n        var result = flatten(\n            request.valueCols.map(function (valueCol) {\n                var args = [pivotCol.id, valueCol.id];\n                var sql = interpolate(template, args);\n\n                return alasql(sql, [allData]);\n            })\n        );\n\n        return flatten(\n            result.map(function (x) {\n                return x[pivotCol.id];\n            })\n        );\n    }\n\n    function getLastRowIndex(request, results) {\n        if (!results || results.length === 0) {\n            return null;\n        }\n\n        var currentLastRow = request.startRow + results.length;\n\n        return currentLastRow <= request.endRow ? currentLastRow : -1;\n    }\n}\n\n// IE Workaround - as templates literal are not supported\nfunction interpolate(str, o) {\n    return str.replace(/{([^{}]*)}/g, function (a, b) {\n        var r = o[b];\n        return typeof r === 'string' || typeof r === 'number' ? r : a;\n    });\n}\n\nfunction flatten(arrayOfArrays) {\n    return [].concat.apply([], arrayOfArrays);\n}\n","main.js":"let gridApi;\nconst gridOptions = {\n    columnDefs: [\n        { field: 'country', rowGroup: true },\n        { field: 'sport', rowGroup: true },\n        { field: 'year', pivot: true }, // pivot on 'year'\n        { field: 'total', aggFunc: 'sum' },\n        { field: 'gold', aggFunc: 'sum' },\n        { field: 'silver', aggFunc: 'sum' },\n        { field: 'bronze', aggFunc: 'sum' },\n    ],\n    defaultColDef: {\n        width: 150,\n    },\n    autoGroupColumnDef: {\n        minWidth: 200,\n    },\n\n    // use the server-side row model\n    rowModelType: 'serverSide',\n\n    // enable pivoting\n    pivotMode: true,\n\n    processPivotResultColDef: (colDef) => {\n        const pivotValueColumn = colDef.pivotValueColumn;\n\n        if (!pivotValueColumn) return;\n\n        // if column is not the total column, it should only be shown when expanded.\n        // this will enable expandable column groups.\n        if (pivotValueColumn.getColId() !== 'total') {\n            colDef.columnGroupShow = 'open';\n        }\n    },\n};\n\nfunction expand(key, open = false) {\n    if (key) {\n        gridApi.setColumnGroupState([{ groupId: key, open: open }]);\n        return;\n    }\n\n    const existingState = gridApi.getColumnGroupState();\n    const expandedState = existingState.map((s) => ({\n        groupId: s.groupId,\n        open: open,\n    }));\n    gridApi.setColumnGroupState(expandedState);\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', function () {\n    var gridDiv = document.querySelector('#myGrid');\n    gridApi = agGrid.createGrid(gridDiv, gridOptions); \n\n    fetch('https://www.ag-grid.com/example-assets/olympic-winners.json')\n        .then((response) => response.json())\n        .then(function (data) {\n            // setup the fake server with entire dataset\n            var fakeServer = new FakeServer(data);\n\n            // create datasource with a reference to the fake server\n            var datasource = getServerSideDatasource(fakeServer);\n\n            // register the datasource with the grid\n            gridApi.setGridOption('serverSideDatasource', datasource);\n        });\n});\n\nfunction getServerSideDatasource(server) {\n    return {\n        getRows: (params) => {\n            var request = params.request;\n\n            console.log('[Datasource] - rows requested by grid: ', params.request);\n\n            var response = server.getData(request);\n\n            // simulating real server call with a 500ms delay\n            setTimeout(() => {\n                if (response.success) {\n                    // supply data to grid\n                    params.success({\n                        rowData: response.rows,\n                        rowCount: response.lastRow,\n                        pivotResultFields: response.pivotFields,\n                    });\n                } else {\n                    params.fail();\n                }\n            }, 500);\n        },\n    };\n}\n","index.html":"<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px\">\n        <button onclick=\"expand('2000', true)\">Expand 2000</button>\n        <button onclick=\"expand('2000')\">Collapse 2000</button>\n        <button onclick=\"expand(undefined, true)\">Expand All</button>\n        <button onclick=\"expand(undefined)\">Collapse All</button>\n    </div>\n    <div id=\"myGrid\" class=\"ag-theme-quartz\"></div>\n</div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}},"extras":["alasql"]}