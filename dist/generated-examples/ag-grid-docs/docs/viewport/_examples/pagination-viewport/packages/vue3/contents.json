{"isEnterprise":true,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","styleFiles":[],"files":{"mock-server.js":"export function createMockServer() {\n    class MockServer {\n        constructor() {\n            this.connections = {};\n            this.nextConnectionId = 0;\n            setInterval(this.periodicallyUpdateData.bind(this), 100);\n        }\n\n        periodicallyUpdateData() {\n            // keep a record of all the items that changed\n            var changes = [];\n\n            // make some mock changes to the data\n            this.makeSomePriceChanges(changes);\n            this.makeSomeVolumeChanges(changes);\n\n            // inform the connections of the changes where appropriate\n            this.informConnectionsOfChanges(changes);\n        }\n\n        informConnectionsOfChanges(changes) {\n            var that = this;\n            // go through each connection\n            Object.keys(this.connections).forEach(function (connectionId) {\n                var connection = that.connections[connectionId];\n                // create a list of changes that are applicable to this connection only\n                var changesThisConnection = [];\n                changes.forEach(function (change) {\n                    // see if the index of this change is within the connections viewport\n                    var changeInRange = change.rowIndex >= connection.firstRow && change.rowIndex <= connection.lastRow;\n                    if (changeInRange) {\n                        changesThisConnection.push(change);\n                    }\n                });\n                // send msg to this connection if one or more changes\n                if (changesThisConnection.length > 0) {\n                    that.sendEventAsync(connectionId, {\n                        eventType: 'dataUpdated',\n                        changes: changesThisConnection,\n                    });\n                }\n            });\n        }\n\n        makeSomeVolumeChanges(changes) {\n            for (var i = 0; i < 10; i++) {\n                // pick a data item at random\n                var index = Math.floor(this.allData.length * Math.random());\n                var dataItem = this.allData[index];\n\n                // change by a value between -5 and 5\n                var move = Math.floor(10 * Math.random()) - 5;\n                var newValue = dataItem.volume + move;\n                dataItem.volume = newValue;\n\n                changes.push({\n                    rowIndex: index,\n                    columnId: 'volume',\n                    newValue: dataItem.volume,\n                });\n            }\n        }\n\n        makeSomePriceChanges(changes) {\n            // randomly update data for some rows\n            for (var i = 0; i < 10; i++) {\n                var index = Math.floor(this.allData.length * Math.random());\n\n                var dataItem = this.allData[index];\n                // change by a value between -1 and 2 with one decimal place\n                var move = Math.floor(30 * Math.random()) / 10 - 1;\n                var newValue = dataItem.mid + move;\n                dataItem.mid = newValue;\n\n                this.setBidAndAsk(dataItem);\n\n                changes.push({\n                    rowIndex: index,\n                    columnId: 'mid',\n                    newValue: dataItem.mid,\n                });\n                changes.push({\n                    rowIndex: index,\n                    columnId: 'bid',\n                    newValue: dataItem.bid,\n                });\n                changes.push({\n                    rowIndex: index,\n                    columnId: 'ask',\n                    newValue: dataItem.ask,\n                });\n            }\n        }\n\n        init(allData) {\n            this.allData = allData;\n\n            // the sample data has just name and code, we need to add in dummy figures\n            var that = this;\n            this.allData.forEach(function (dataItem) {\n                // have volume a random between 100 and 10,000\n                dataItem.volume = Math.floor(Math.random() * 10000 + 100);\n\n                // have mid random from 20 to 300\n                dataItem.mid = Math.random() * 300 + 20;\n\n                that.setBidAndAsk(dataItem);\n            });\n        }\n\n        setBidAndAsk(dataItem) {\n            dataItem.bid = dataItem.mid * 0.98;\n            dataItem.ask = dataItem.mid * 1.02;\n        }\n\n        connect(listener) {\n            var connectionId = this.nextConnectionId;\n            this.nextConnectionId++;\n            // keep a record of the connection\n            this.connections[connectionId] = {\n                // the client callback that receives the events\n                listener: listener,\n                // we keep track of the rows in the client, so when the viewport changes,\n                // we only send rows that are new, eg if viewport is length 10, and moves 2\n                // positions, we only send the 2 new rows, as the client already has 8 of them\n                rowsInClient: {},\n                // keep track of range, so when data items change, we know what to send\n                firstRow: 0,\n                lastRow: -1, // first row after last row, range doesn't exist\n            };\n\n            this.sendEventAsync(connectionId, {\n                eventType: 'rowCountChanged',\n                rowCount: this.allData.length,\n            });\n\n            return connectionId;\n        }\n\n        // pretend we are on a network, send message to client after 20ms\n        sendEventAsync(connectionId, event) {\n            var listener = this.connections[connectionId].listener;\n            setTimeout(function () {\n                listener(event);\n            }, 20);\n        }\n\n        disconnect(connectionId) {\n            delete this.connections[connectionId];\n        }\n\n        setViewportRange(connectionId, firstRow, lastRow) {\n            var connection = this.connections[connectionId];\n            connection.firstRow = firstRow;\n            connection.lastRow = lastRow;\n\n            // because the client has moved its viewport, it will have disregarded rows outside the range\n            this.purgeFromClientRows(connection.rowsInClient, firstRow, lastRow);\n            // send rows newly in the range\n            this.sendResultsToClient(connectionId, firstRow, lastRow);\n        }\n\n        // removes any entries outside the viewport (firstRow to lastRow)\n        purgeFromClientRows(rowsInClient, firstRow, lastRow) {\n            Object.keys(rowsInClient).forEach(function (rowIndexStr) {\n                var rowIndex = parseInt(rowIndexStr);\n                if (rowIndex < firstRow || rowIndex > lastRow) {\n                    delete rowsInClient[rowIndex];\n                }\n            });\n        }\n\n        sendResultsToClient(connectionId, firstRow, lastRow) {\n            if (firstRow < 0 || lastRow < firstRow) {\n                console.warn('start or end is not valid');\n                return;\n            }\n\n            // we want to keep track of what rows the client has\n            var rowsInClient = this.connections[connectionId].rowsInClient;\n\n            // the map contains row indexes mapped to rows\n            var rowDataMap = {};\n            for (var i = firstRow; i <= lastRow; i++) {\n                // if client already has this row, don't send it again\n                if (rowsInClient[i]) {\n                    continue;\n                }\n                // otherwise send the row. we send a copy of the row to mimic\n                // going over network, so any further changes to the row in\n                // the mock server is not reflected in the grid's copy\n                rowDataMap[i] = JSON.parse(JSON.stringify(this.allData[i]));\n                // and record that the client has this row\n                rowsInClient[i] = true;\n            }\n\n            this.sendEventAsync(connectionId, {\n                eventType: 'rowData',\n                rowDataMap: rowDataMap,\n            });\n        }\n\n        getRowCount() {\n            return this.allData.length;\n        }\n    }\n    return new MockServer();\n}\n","viewport-datasource.js":"\nexport function createViewportDatasource(mockServer) {\n    // client code (ie your code) will call this constructor, pass in whatever you need for the\n    // viewport to do its job\n    class ViewportDatasource {\n        constructor(mockServer) {\n            this.mockServer = mockServer;\n            this.connectionId = this.mockServer.connect(this.eventListener.bind(this));\n        }\n\n        // gets called by the grid, tells us what rows the grid is displaying, so time for\n        // us to tell the server to give us the rows for that displayed range\n        setViewportRange(firstRow, lastRow) {\n            console.log('setViewportRange: ' + firstRow + ' to ' + lastRow);\n            this.mockServer.setViewportRange(this.connectionId, firstRow, lastRow);\n        }\n\n        // gets called by the grid, provides us with the callbacks we need\n        init(params) {\n            this.params = params;\n        }\n\n        // gets called by grid, when grid is destroyed or this datasource is swapped out for another one\n        destroy() {\n            this.mockServer.disconnect(this.connectionId);\n        }\n\n        // manages events back from the server\n        eventListener(event) {\n            switch (event.eventType) {\n                case 'rowCountChanged':\n                    this.onRowCountChanged(event);\n                    break;\n                case 'rowData':\n                    this.onRowData(event);\n                    break;\n                case 'dataUpdated':\n                    this.onDataUpdated(event);\n                    break;\n            }\n        }\n\n        // process rowData event\n        onRowData(event) {\n            var rowDataFromServer = event.rowDataMap;\n            this.params.setRowData(rowDataFromServer);\n        }\n\n        // process dataUpdated event\n        onDataUpdated(event) {\n            var that = this;\n            event.changes.forEach(function (change) {\n                var rowNode = that.params.getRow(change.rowIndex);\n                // if the rowNode is missing, it means the grid is not displaying that row.\n                // if the data is missing, it means the rowNode is there, but that data has not\n                // loaded into it yet, so to early to set delta changes.\n                if (!rowNode || !rowNode.data) {\n                    return;\n                }\n                // rowNode.data[change.columnId] = change.newValue;\n                // this is a trick, it gets the row to refresh\n                rowNode.setDataValue(change.columnId, change.newValue);\n            });\n        }\n\n        // process rowCount event\n        onRowCountChanged(event) {\n            var rowCountFromServer = event.rowCount;\n            // this will get the grid to make set the height of the row container, so we can scroll vertically properly\n            this.params.setRowCount(rowCountFromServer);\n        }\n    }\n\n    return new ViewportDatasource(mockServer);\n}\n","main.js":"\nimport { createApp, onBeforeMount, ref, shallowRef } from 'vue';\nimport { AgGridVue } from 'ag-grid-vue3';\nimport 'ag-grid-charts-enterprise';\nimport 'ag-grid-community/styles/ag-grid.css';\nimport 'ag-grid-community/styles/ag-theme-quartz.css';\nimport { createMockServer } from './mock-server.js';\nimport { createViewportDatasource } from './viewport-datasource.js';\n\nclass RowIndexRenderer  {\n    eGui;\n    init(params) {\n        this.eGui = document.createElement('div');\n        this.eGui.textContent = '' + params.node.rowIndex;\n    }\n    refresh(params) {\n        return false;\n    }\n    getGui() {\n        return this.eGui;\n    }\n}\n\nconst VueExample = {\n    template: `\n        <div style=\"height: 100%\">\n                <ag-grid-vue\n      style=\"width: 100%; height: 100%;\"\n      :class=\"themeClass\"\n      :columnDefs=\"columnDefs\"\n      @grid-ready=\"onGridReady\"\n      :defaultColDef=\"defaultColDef\"\n      :rowModelType=\"rowModelType\"\n      :pagination=\"true\"\n      :paginationAutoPageSize=\"true\"\n      :viewportRowModelPageSize=\"viewportRowModelPageSize\"\n      :viewportRowModelBufferSize=\"viewportRowModelBufferSize\"\n      :getRowId=\"getRowId\"></ag-grid-vue>\n        </div>\n    `,\n    components: {\n        'ag-grid-vue': AgGridVue,\n        \n    },\n    setup(props) {\n        const columnDefs = ref([{headerName:\"#\",\nmaxWidth:80,\ncellRenderer:RowIndexRenderer},{field:\"code\",\nmaxWidth:90},{field:\"name\",\nminWidth:220},{field:\"bid\",\ncellClass:\"cell-number\",\nvalueFormatter:numberFormatter,\ncellRenderer:\"agAnimateShowChangeCellRenderer\"},{field:\"mid\",\ncellClass:\"cell-number\",\nvalueFormatter:numberFormatter,\ncellRenderer:\"agAnimateShowChangeCellRenderer\"},{field:\"ask\",\ncellClass:\"cell-number\",\nvalueFormatter:numberFormatter,\ncellRenderer:\"agAnimateShowChangeCellRenderer\"},{field:\"volume\",\ncellClass:\"cell-number\",\ncellRenderer:\"agAnimateSlideCellRenderer\"}]);\n        const gridApi = shallowRef();\n        const defaultColDef = ref({\n    flex: 1,\n    minWidth: 140,\n    sortable: false,\n});\n        const rowModelType = ref(null);\nconst viewportRowModelPageSize = ref(null);\nconst viewportRowModelBufferSize = ref(null);\nconst getRowId = ref(null)\n        \n        onBeforeMount(() => {\n            rowModelType.value = 'viewport';\nviewportRowModelPageSize.value = 1;\nviewportRowModelBufferSize.value = 0;\ngetRowId.value = (params) => {\n    // the code is unique, so perfect for the id\n    return params.data.code;\n}            \n        });\n        \n        const onGridReady = (params) => {\n        \n        gridApi.value = params.api;\n        \n\n        \n            const updateData = (data) => {\n    // set up a mock server - real code will not do this, it will contact your\n    // real server to get what it needs\n    var mockServer = createMockServer();\n    mockServer.init(data);\n    var viewportDatasource = createViewportDatasource(mockServer);\n    params.api.setGridOption('viewportDatasource', viewportDatasource);\n};\n            \n            fetch('https://www.ag-grid.com/example-assets/stocks.json')\n                .then(resp => resp.json())\n                .then(data => updateData(data));\n    };\n                \n        return {\n            columnDefs,\n            gridApi,\n            defaultColDef,\nrowModelType,\nviewportRowModelPageSize,\nviewportRowModelBufferSize,\ngetRowId,\n            onGridReady,\n            themeClass: /** DARK MODE START **/document.documentElement.dataset.defaultTheme || 'ag-theme-quartz'/** DARK MODE END **/,\n            \n        }        \n    }\n}\n\nwindow.numberFormatter = function numberFormatter(params) {\n    if (typeof params.value === 'number') {\n        return params.value.toFixed(2);\n    }\n    else {\n        return params.value;\n    }\n}\n\ncreateApp(VueExample)\n    .mount(\"#app\")\n\n","index.html":"<style>\n    .cell-number {\n        text-align: right;\n    }\n</style>\n\n<div id=\"myGrid\" style=\"height: 100%\" class=\"ag-theme-quartz\"></div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function (link, callback) {\n        setTimeout(function () {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href) return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function (link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    };\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link');\n        return filter(links, function (link) {\n            return link.href === url;\n        });\n    };\n\n    var noop = function () {};\n\n    var loadCSS = function (url, existingLinks) {\n        const stylesUrl = url.includes('styles.css') || url.includes('style.css');\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(\n                () => {\n                    new Promise(function (resolve, reject) {\n                        var timeout = setTimeout(function () {\n                            reject('Unable to load CSS');\n                        }, waitSeconds * 1000);\n                        var _callback = function (error) {\n                            clearTimeout(timeout);\n                            link.onload = link.onerror = noop;\n                            setTimeout(function () {\n                                if (error) {\n                                    reject(error);\n                                    outerReject(error);\n                                } else {\n                                    resolve('');\n                                    outerResolve('');\n                                }\n                            }, 7);\n                        };\n                        var link = document.createElement('link');\n                        link.type = 'text/css';\n                        link.rel = 'stylesheet';\n                        link.href = url;\n                        link.setAttribute('data-systemjs-css', '');\n                        if (!isWebkit) {\n                            link.onload = function () {\n                                _callback();\n                            };\n                        } else {\n                            webkitLoadCheck(link, _callback);\n                        }\n                        link.onerror = function (event) {\n                            _callback(event.error || new Error('Error loading CSS file.'));\n                        };\n                        if (existingLinks.length) head.insertBefore(link, existingLinks[0]);\n                        else head.appendChild(link);\n                    })\n                        // Remove the old link regardless of loading outcome\n                        .then(\n                            function (result) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                return result;\n                            },\n                            function (err) {\n                                forEach(existingLinks, function (link) {\n                                    link.parentElement.removeChild(link);\n                                });\n                                throw err;\n                            }\n                        );\n                },\n                stylesUrl ? 5 : 0\n            );\n        });\n    };\n\n    exports.fetch = function (load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links)) return '';\n        return loadCSS(load.address, links);\n    };\n} else {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise) return builderPromise;\n\n        return (builderPromise = System['import']('./css-plugin-base.js', module.id).then(function (CSSPluginBase) {\n            return new CSSPluginBase(function compile(source, address) {\n                return {\n                    css: source,\n                    map: null,\n                    moduleSource: null,\n                    moduleFormat: null,\n                };\n            });\n        }));\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function (load, fetch) {\n        if (!this.builder) return '';\n        return fetch(load);\n    };\n    exports.translate = function (load, opts) {\n        if (!this.builder) return '';\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function (load, opts) {\n        if (!this.builder) return;\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function (loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function (loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function (builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = [];\n    forEach(arrayLike, function (item) {\n        if (func(item)) arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i]);\n    }\n}\n","systemjs.config.dev.js":"(function (global) {\n    var sjsPaths = {};\n    if (typeof systemJsPaths !== 'undefined') {\n        sjsPaths = systemJsPaths;\n    }\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        defaultExtension: 'js',\n        paths: {\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...sjsPaths,\n        },\n        map: {\n            css: 'npm:systemjs-plugin-css@0.1.37/css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            vue: 'npm:vue@3.2.29/dist/vue.esm-browser.js',\n            '@vue/reactivity': 'npm:@vue/reactivity@3.0.0/dist/reactivity.esm-browser.js',\n            // vue class component\n            'vue-class-component': 'npm:vue-class-component@^8.0.0-beta.3/dist/vue-class-component.cjs.js',\n\n            app: appLocation + 'app',\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            vue: {\n                defaultExtension: 'js',\n            },\n            'vue-class-component': {\n                defaultExtension: 'js',\n            },\n            'vue-property-decorator': {\n                defaultExtension: 'js',\n            },\n            app: {\n                defaultExtension: 'js',\n            },\n            '@ag-grid-community/vue3': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-locale': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n            },\n            '@ag-grid-enterprise/clipboard': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-vue3': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-enterprise-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: 'ts',\n        typescriptOptions: {\n            target: 'es2020',\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': { loader: 'css' },\n        },\n        defaultExtension: 'js',\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths,\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + 'css.js',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            tslib: 'npm:tslib@2.3.1/tslib.js',\n            typescript: 'npm:typescript@5.4.5/lib/typescript.min.js',\n\n            vue: 'npm:vue@3.2.29/dist/vue.esm-browser.js',\n            '@vue/reactivity': 'npm:@vue/reactivity@3.0.0/dist/reactivity.esm-browser.prod.js',\n\n            // vue class component\n            'vue-class-component': 'npm:vue-class-component@^8.0.0-beta.3/dist/vue-class-component.cjs.js',\n\n            app: appLocation + 'app',\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            vue: {\n                defaultExtension: 'js',\n            },\n            'vue-class-component': {\n                defaultExtension: 'js',\n            },\n            'vue-property-decorator': {\n                defaultExtension: 'js',\n            },\n            app: {\n                defaultExtension: 'js',\n            },\n            '@ag-grid-community/vue3': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                format: 'cjs',\n            },\n            'ag-grid-locale': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/clipboard': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-vue3': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n"}}