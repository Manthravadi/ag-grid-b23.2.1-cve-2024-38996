{"isEnterprise":false,"isLocale":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":[],"files":{"data.js":"function getData() {\n    var rowData = [];\n    var firstNames = ['Niall', 'John', 'Rob', 'Alberto', 'Bas', 'Dimple', 'Sean'];\n    var lastNames = ['Pink', 'Black', 'White', 'Brown', 'Smith', 'Smooth', 'Anderson'];\n\n    for (var i = 0; i < 100; i++) {\n        rowData.push({\n            a: Math.floor(Math.random() * 100),\n            b: Math.floor(Math.random() * 100),\n            firstName: firstNames[i % firstNames.length],\n            lastName: lastNames[i % lastNames.length],\n            c: {\n                x: Math.floor(Math.random() * 100),\n                y: Math.floor(Math.random() * 100),\n            },\n        });\n    }\n\n    return rowData;\n}\n","main.js":"const columnDefs = [\n    {\n        headerName: 'Name',\n        valueGetter: (params) => {\n            return params.data.firstName + ' ' + params.data.lastName;\n        },\n        valueSetter: (params) => {\n            const fullName = params.newValue || '';\n            const nameSplit = fullName.split(' ');\n            const newFirstName = nameSplit[0];\n            const newLastName = nameSplit[1];\n            const data = params.data;\n\n            if (data.firstName !== newFirstName || data.lastName !== newLastName) {\n                data.firstName = newFirstName;\n                data.lastName = newLastName;\n                // return true to tell grid that the value has changed, so it knows\n                // to update the cell\n                return true;\n            } else {\n                // return false, the grid doesn't need to update\n                return false;\n            }\n        },\n    },\n    {\n        headerName: 'A',\n        field: 'a',\n    },\n    {\n        headerName: 'B',\n        valueGetter: (params) => {\n            return params.data.b;\n        },\n        valueSetter: (params) => {\n            const newVal = params.newValue;\n            const valueChanged = params.data.b !== newVal;\n            if (valueChanged) {\n                params.data.b = newVal;\n            }\n            return valueChanged;\n        },\n        cellDataType: 'number',\n    },\n    {\n        headerName: 'C.X',\n        valueGetter: (params) => {\n            if (params.data.c) {\n                return params.data.c.x;\n            } else {\n                return undefined;\n            }\n        },\n        valueSetter: (params) => {\n            const newVal = params.newValue;\n            if (!params.data.c) {\n                params.data.c = {};\n            }\n\n            const valueChanged = params.data.c.x !== newVal;\n            if (valueChanged) {\n                params.data.c.x = newVal;\n            }\n            return valueChanged;\n        },\n        cellDataType: 'number',\n    },\n    {\n        headerName: 'C.Y',\n        valueGetter: (params) => {\n            if (params.data.c) {\n                return params.data.c.y;\n            } else {\n                return undefined;\n            }\n        },\n        valueSetter: (params) => {\n            const newVal = params.newValue;\n            if (!params.data.c) {\n                params.data.c = {};\n            }\n\n            const valueChanged = params.data.c.y !== newVal;\n            if (valueChanged) {\n                params.data.c.y = newVal;\n            }\n            return valueChanged;\n        },\n        cellDataType: 'number',\n    },\n];\n\nlet gridApi;\n\nconst gridOptions = {\n    defaultColDef: {\n        flex: 1,\n        editable: true,\n    },\n    columnDefs: columnDefs,\n    rowData: getData(),\n    onCellValueChanged: onCellValueChanged,\n};\n\nfunction onCellValueChanged(event) {\n    console.log('Data after change is', event.data);\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', function () {\n    const gridDiv = document.querySelector('#myGrid');\n    gridApi = agGrid.createGrid(gridDiv, gridOptions); \n});\n","index.html":"<div id=\"myGrid\" style=\"height: 100%\" class=\"ag-theme-quartz\"></div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.3.1","ag-grid-charts-enterprise":"^31.3.1"}}}