---
title: "Row Selection"
description: "Configure row selection, checkbox selection, and group selection in the $framework Table. Single row selection, multiple row selection, and multi select with click."
---

Select a row by clicking on it. Selecting a row will remove any previous selection unless you hold down {% kbd "^ Ctrl" /%}
while clicking. Selecting a row and holding down {% kbd "⇧ Shift" /%} while clicking a second row will select the range.

{% note %}
This page documents the new selection configuration API. For documentation on the legacy API, [click here](./row-selection-legacy).
{% /note %}

## Enabling Row Selection

Row selection is configured with the `selectionOptions` grid property. Setting `selectionOptions.mode` to either `"multiRow"` or `"singleRow"` will allow you to select rows by clicking.

{% apiDocumentation source="grid-options/properties.json" section="selection" names=["selectionOptions"] /%}

The following example illustrates a basic row selection configuration.

{% gridExampleRunner title="Enabling Row Selection" name="enabling-row-selection" /%}

Note the controls on the top of the grid that can be used to alter how the grid is configured in this example.

- `selectionOptions.mode`: Set to `'singleRow'` to allow selecting only one row at a time, and `'multiRow'` to allow multiple rows to be selected at once.
- `selectionOptions.suppressDeselection`: Set to `true` to prevent rows from being deselected if you hold down {% kbd "^ Ctrl" /%} and click the row (i.e. once a row is selected, it remains selected until another row is selected in its place). By default the grid allows deselection of rows.
- `selectionOptions.suppressClickSelection`: If `true`, rows won't be selected when clicked. Use, for example, when you want checkbox selection or your managing selection from a custom component and don't want to select the row when the row is clicked.
- `selectionOptions.enableMultiSelectWithClick`: Set to `true` to allow multiple rows to be selected with clicks. For example, if you click to select one row and then click to select another row, the first row will stay selected as well. Clicking a selected row in this mode will deselect the row. This is useful for touch devices where {% kbd "^ Ctrl" /%} and {% kbd "⇧ Shift" /%} clicking is not an option.
- `selectionOptions.checkboxSelection`: See [Checkbox Selection](#checkbox-selection) for more details.

## Row Range Selection

When `selectionOptions.mode` is set to `"multiRow"`, ranges of rows can be selected by holiding down {% kbd "⇧ Shift" /%} while clicking on rows. 
{% kbd "⇧ Shift" /%}-clicking a row will select all rows between that row and the previously selected row.
This behaviour also applies when [checkbox selection](#checkbox-selection) is enabled, and in [group selection](./grouping-selection).

### Extending, truncating and inverting a selected range

Once selected, a given range can be extended by {% kbd "⇧ Shift" /%}-clicking another row. 
The range will be expanded to select every row between the last {% kbd "⇧ Shift" /%}-clicked row, and the first row in the range.
The range can also be truncated in the same way: by {% kbd "⇧ Shift" /%}-clicking a row within the current range. 

{% kbd "⇧ Shift" /%}-clicking a row above the selection root will invert the selection: all rows below the selection root are deselected. All rows between the clicked row and the selection root are selected.

### Bulk Deselection
Typically, rows are deselected individually by {% kbd "^ Ctrl" /%}-clicking the row. Users may also deselect multiple rows at once by using a {% kbd "^ Ctrl" /%}+{% kbd "⇧ Shift" /%}-click. 
For example, deselecting a single row with {% kbd "^ Ctrl" /%}-click, then deselecting another row with {% kbd "^ Ctrl" /%}+{% kbd "⇧ Shift" /%}-click will deselect all rows between the two. 
Note that this deselection occurs whether or not the row is within the original range of selected rows. Use the example below to explore this behaviour.

{% gridExampleRunner title="Bulk deselection" name="bulk-deselection" /%}

## Checkbox Selection

The grid can be configured to display a selection checkbox for each row that can be used to select and deselect that row and display its selection state. 
Set `selectionOptions.checkboxSelection = true` to render a separate column of checkboxes for each row.

The rendering of the checkbox can also be determined dynamically, by instead setting `selectionOptions.checkboxSelection` to an object with properties:
```
selectionOptions: {
    /** Return `true` from function to render a selection checkbox in the first column. */
    displayCheckbox?: boolean | CheckboxSelectionCallback<TData, TValue>;
    /** Set to `true` to display a disabled checkbox when row is not selectable and checkboxes are enabled. */
    showDisabledCheckboxes?: boolean;
}
```
The function will be invoked for a given row to determine whether or not that row should display a checkbox.

Note that when using a function in `selectionOptions.checkboxSelection`, the checkbox column will appear even if the function returns `false` for all rows. To be explicit:

| Value of `checkboxSelection.displayCheckbox` | Checkbox column rendered | Checkbox visible |
|------------------------------|--------------------------|------------------|
| `false`                      | No ❌                    | No ❌            |
| `true`                       | Yes ✅                   | Yes ✅           |
| Function returning `false`   | Yes ✅                   | No ❌            |
| Function returning `true`    | Yes ✅                   | Yes ✅           |

### Displaying Disabled Checkboxes

When [selection of a particular row is disabled](#specify-selectable-rows), by default the grid will not display a checkbox in that row. Alternatively, you may configure the grid to display a disabled checkbox in such rows.
This can be done by setting `checkboxSelection.showDisabledCheckboxes` to `true`.

## Bulk Selection

Rows may be bulk selected in two ways: either by using the {% kbd "^ Ctrl" /%}+{% kbd "A" /%} keyboard shortcut, or by configuring and using the header checkbox, as explained below.

Bulk selection has three modes of operation which can be configured by setting the value of `selectionOptions.selectAll` to one of the following:
- `'all'`: The default behaviour, selecting the header checkbox or using {% kbd "^ Ctrl" /%}+{% kbd "A" /%} selects all rows in the grid.
- `'filtered'`: Bulk selection will select all rows that satisfy the currently active filter.
- `'currentPage'`: Bulk selection will select all rows that satisfy the currently active filter on the current page.

### Header Checkbox
To configure the header checkbox to appear, set `selectionOptions.headerCheckbox = true`. To configure the header checkbox dynamically, `headerCheckbox` can also be a function. 
When enabled, the header checkbox will appear in header of the checkbox column.

```{% frameworkTransform=true %}
const gridOptions = {
    selectionOptions: {
        // header checkbox selection is only available in multiRow selection mode
        mode: 'multiRow',
        // the checkbox column header always has a checkbox
        headerCheckbox: true,
    },
}
```

If `headerCheckbox` is a function, the function will be called every time there is a change to the displayed columns.

The example below demonstrates the three different modes of bulk selection:

{% gridExampleRunner title="Header Checkbox Selection" name="header-checkbox" /%}

## Specify Selectable Rows

It is possible to specify which rows can be selected via the `selectionOptions.isRowSelectable` callback function.

For instance if we only wanted to allow rows where the 'year' property is less than 2007, we could implement the following:

```{% frameworkTransform=true %}
const gridOptions = {
    selectionOptions: {
        mode: 'multiRow',
        isRowSelectable: (rowNode) => rowNode.data ? rowNode.data.year < 2007 : false,
    }
}
```

### Selectable Rows with Header Checkbox

This example demonstrates the following:

* The `selectionOptions.isRowSelectable(node)` callback only allows selections on rows where the year < 2007.
* Both `selectionOptions.headerCheckbox` and `selectionOptions.checkboxSelection` are set to `true`, but only rows which are selectable will obtain a selectable checkbox. Similarly, the header checkbox will only select selectable rows.

{% gridExampleRunner title="Selectable Rows with Header Checkbox" name="specify-selectable-rows" /%}

## Enterprise Features

Row selection can be used when using row grouping, tree data and the server side row model. See the respective sections of the documentation:
- [Row group selection](./grouping-selection)
- [Tree data selection](./tree-data)
- [Server-side row model selection](./server-side-model-selection)

## API Reference

### Selection Events

There are two events with regards to selection, illustrated in the example below:

{% apiDocumentation source="grid-events/events.json" section="selection" names=["rowSelected", "selectionChanged"] /%}

{% gridExampleRunner title="Selection Events" name="selection-events" /%}

### Node Selection API

To select rows programmatically, use the `node.setSelected(params)` method.

{% apiDocumentation source="row-object/properties.json" section="selection" names=["setSelected", "isSelected"] /%}

```{% frameworkTransform=true %}
// set selected, keep any other selections
node.setSelected(true);

// set selected, exclusively, remove any other selections
node.setSelected(true, true);

// un-select
node.setSelected(false);

// check status of node selection
const selected = node.isSelected();
```

The `isSelected()` method returns `true` if the node is selected, or `false` if it is not selected. If the node is a group node and the group selection is set to `'children'`, this will return `true` if all child (and grandchild) nodes are selected, `false` if all unselected, or `undefined` if a mixture.

### Grid Selection API

The grid API has the following methods for selection:

{% apiDocumentation source="grid-api/api.json" section="selection" names=["selectAll","deselectAll","selectAllFiltered","deselectAllFiltered","getSelectedNodes", "getSelectedRows", "setNodesSelected"] /%}

If you want to select only the filtered rows, you could do this using the following:

```js
// loop through each node after filter
const nodes = [];
api.forEachNodeAfterFilter(node => {
   nodes.push(node);
});
api.setNodesSelected({ nodes, newValue: true });
```

## Next up

Continue to the next section to learn about [Cell selection](./cell-selection).
