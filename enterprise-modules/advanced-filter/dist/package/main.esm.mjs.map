{
  "version": 3,
  "sources": ["../../src/advancedFilterModule.ts", "../../src/advancedFilter/advancedFilterApi.ts", "../../src/advancedFilter/advancedFilterExpressionService.ts", "../../src/advancedFilter/advancedFilterLocaleText.ts", "../../src/advancedFilter/filterExpressionUtils.ts", "../../src/advancedFilter/colFilterExpressionParser.ts", "../../src/advancedFilter/filterExpressionOperators.ts", "../../src/advancedFilter/advancedFilterService.ts", "../../src/advancedFilter/advancedFilterCtrl.ts", "../../src/advancedFilter/advancedFilterComp.ts", "../../src/advancedFilter/autocomplete/agAutocomplete.ts", "../../src/advancedFilter/autocomplete/agAutocompleteList.ts", "../../src/advancedFilter/autocomplete/agAutocompleteRow.ts", "../../src/advancedFilter/advancedFilterHeaderComp.ts", "../../src/advancedFilter/builder/advancedFilterBuilderComp.ts", "../../src/advancedFilter/builder/advancedFilterBuilderDragFeature.ts", "../../src/advancedFilter/builder/advancedFilterBuilderItemAddComp.ts", "../../src/advancedFilter/builder/addDropdownComp.ts", "../../src/advancedFilter/builder/advancedFilterBuilderItemNavigationFeature.ts", "../../src/advancedFilter/builder/advancedFilterBuilderUtils.ts", "../../src/advancedFilter/builder/advancedFilterBuilderItemComp.ts", "../../src/advancedFilter/builder/conditionPillWrapperComp.ts", "../../src/advancedFilter/builder/inputPillComp.ts", "../../src/advancedFilter/builder/joinPillWrapperComp.ts", "../../src/advancedFilter/builder/selectPillComp.ts", "../../src/advancedFilter/joinFilterExpressionParser.ts", "../../src/advancedFilter/filterExpressionParser.ts", "../../src/version.ts"],
  "sourcesContent": ["import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames, _FilterCoreModule } from '@ag-grid-community/core';\nimport { EnterpriseCoreModule } from '@ag-grid-enterprise/core';\n\nimport {\n    getAdvancedFilterModel,\n    hideAdvancedFilterBuilder,\n    setAdvancedFilterModel,\n    showAdvancedFilterBuilder,\n} from './advancedFilter/advancedFilterApi';\nimport { AdvancedFilterExpressionService } from './advancedFilter/advancedFilterExpressionService';\nimport { AdvancedFilterService } from './advancedFilter/advancedFilterService';\nimport { VERSION } from './version';\n\nexport const AdvancedFilterCoreModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.AdvancedFilterModule}-core`,\n    beans: [AdvancedFilterService, AdvancedFilterExpressionService],\n    dependantModules: [EnterpriseCoreModule, _FilterCoreModule],\n};\n\nexport const AdvancedFilterApiModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.AdvancedFilterModule}-api`,\n    apiFunctions: {\n        getAdvancedFilterModel,\n        setAdvancedFilterModel,\n        showAdvancedFilterBuilder,\n        hideAdvancedFilterBuilder,\n    },\n    dependantModules: [AdvancedFilterCoreModule],\n};\n\nexport const AdvancedFilterModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.AdvancedFilterModule,\n    dependantModules: [AdvancedFilterCoreModule, AdvancedFilterApiModule],\n};\n", "import type { AdvancedFilterModel, BeanCollection } from '@ag-grid-community/core';\n\nexport function getAdvancedFilterModel(beans: BeanCollection): AdvancedFilterModel | null {\n    return beans.filterManager?.getAdvancedFilterModel() ?? null;\n}\n\nexport function setAdvancedFilterModel(beans: BeanCollection, advancedFilterModel: AdvancedFilterModel | null): void {\n    beans.filterManager?.setAdvancedFilterModel(advancedFilterModel);\n}\n\nexport function showAdvancedFilterBuilder(beans: BeanCollection): void {\n    beans.filterManager?.toggleAdvancedFilterBuilder(true, 'api');\n}\n\nexport function hideAdvancedFilterBuilder(beans: BeanCollection): void {\n    beans.filterManager?.toggleAdvancedFilterBuilder(false, 'api');\n}\n", "import type {\n    AgColumn,\n    BaseCellDataType,\n    BeanCollection,\n    ColumnAdvancedFilterModel,\n    ColumnModel,\n    ColumnNameService,\n    DataTypeService,\n    JoinAdvancedFilterModel,\n    NamedBean,\n    ValueService,\n} from '@ag-grid-community/core';\nimport { BeanStub, _exists, _parseDateTimeFromString, _serialiseDate, _toStringOrNull } from '@ag-grid-community/core';\n\nimport { ADVANCED_FILTER_LOCALE_TEXT } from './advancedFilterLocaleText';\nimport type { AutocompleteEntry, AutocompleteListParams } from './autocomplete/autocompleteParams';\nimport { ColFilterExpressionParser } from './colFilterExpressionParser';\nimport type {\n    DataTypeFilterExpressionOperators,\n    FilterExpressionEvaluatorParams,\n    FilterExpressionOperator,\n    FilterExpressionOperators,\n} from './filterExpressionOperators';\nimport {\n    BooleanFilterExpressionOperators,\n    ScalarFilterExpressionOperators,\n    TextFilterExpressionOperators,\n} from './filterExpressionOperators';\n\nexport class AdvancedFilterExpressionService extends BeanStub implements NamedBean {\n    beanName = 'advancedFilterExpressionService' as const;\n\n    private valueService: ValueService;\n    private columnModel: ColumnModel;\n    private columnNameService: ColumnNameService;\n    private dataTypeService?: DataTypeService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.valueService = beans.valueService;\n        this.columnModel = beans.columnModel;\n        this.columnNameService = beans.columnNameService;\n        this.dataTypeService = beans.dataTypeService;\n    }\n\n    private columnNameToIdMap: { [columnNameUpperCase: string]: { colId: string; columnName: string } } = {};\n    private columnAutocompleteEntries: AutocompleteEntry[] | null = null;\n    private expressionOperators: FilterExpressionOperators;\n    private expressionJoinOperators: { AND: string; OR: string };\n    private expressionEvaluatorParams: { [colId: string]: FilterExpressionEvaluatorParams<any> } = {};\n\n    public postConstruct(): void {\n        this.expressionJoinOperators = this.generateExpressionJoinOperators();\n        this.expressionOperators = this.generateExpressionOperators();\n    }\n\n    public parseJoinOperator(model: JoinAdvancedFilterModel): string {\n        const { type } = model;\n        return this.expressionJoinOperators[type] ?? type;\n    }\n\n    public getColumnDisplayValue(model: ColumnAdvancedFilterModel): string | undefined {\n        const { colId } = model;\n        const columnEntries = this.getColumnAutocompleteEntries();\n        const columnEntry = columnEntries.find(({ key }) => key === colId);\n        let columnName;\n        if (columnEntry) {\n            columnName = columnEntry.displayValue!;\n            this.columnNameToIdMap[columnName.toLocaleUpperCase()] = { colId, columnName };\n        } else {\n            columnName = colId;\n        }\n        return columnName;\n    }\n\n    public getOperatorDisplayValue(model: ColumnAdvancedFilterModel): string | undefined {\n        return this.getExpressionOperator(model.filterType, model.type)?.displayValue ?? model.type;\n    }\n\n    public getOperandModelValue(\n        operand: string,\n        baseCellDataType: BaseCellDataType,\n        column: AgColumn\n    ): string | number | null {\n        switch (baseCellDataType) {\n            case 'number':\n                return _exists(operand) ? Number(operand) : null;\n            case 'date':\n                return _serialiseDate(this.valueService.parseValue(column, null, operand, undefined), false);\n            case 'dateString': {\n                // displayed string format may be different from data string format, so parse before converting to date\n                const parsedDateString = this.valueService.parseValue(column, null, operand, undefined);\n                return this.dataTypeService\n                    ? _serialiseDate(\n                          this.dataTypeService.getDateParserFunction(column)(parsedDateString) ?? null,\n                          false\n                      )\n                    : parsedDateString;\n            }\n        }\n        return operand;\n    }\n\n    public getOperandDisplayValue(model: ColumnAdvancedFilterModel, skipFormatting?: boolean): string {\n        const { colId, filter } = model as any;\n        const column = this.columnModel.getColDefCol(colId);\n        let operand = '';\n        if (filter != null) {\n            let operand1: string | null | undefined;\n            switch (model.filterType) {\n                case 'number':\n                    operand1 = _toStringOrNull(filter) ?? '';\n                    break;\n                case 'date': {\n                    const dateValue = _parseDateTimeFromString(filter);\n                    operand1 = column ? this.valueService.formatValue(column, null, dateValue) : null;\n                    break;\n                }\n                case 'dateString': {\n                    let dateStringStringValue;\n                    if (this.dataTypeService) {\n                        // need to convert from ISO date string to Date to data string format to formatted string format\n                        const dateStringDateValue = _parseDateTimeFromString(filter);\n                        dateStringStringValue = column\n                            ? this.dataTypeService?.getDateFormatterFunction(column)(dateStringDateValue ?? undefined)\n                            : null;\n                    } else {\n                        dateStringStringValue = filter;\n                    }\n                    operand1 = column ? this.valueService.formatValue(column, null, dateStringStringValue) : null;\n                    break;\n                }\n            }\n            if (model.filterType !== 'number') {\n                operand1 = operand1 ?? _toStringOrNull(filter) ?? '';\n                if (!skipFormatting) {\n                    operand1 = `\"${operand1}\"`;\n                }\n            }\n            operand = skipFormatting ? operand1! : ` ${operand1}`;\n        }\n        return operand;\n    }\n\n    public parseColumnFilterModel(model: ColumnAdvancedFilterModel): string {\n        const columnName = this.getColumnDisplayValue(model) ?? '';\n        const operator = this.getOperatorDisplayValue(model) ?? '';\n        const operands = this.getOperandDisplayValue(model);\n        return `[${columnName}] ${operator}${operands}`;\n    }\n\n    public updateAutocompleteCache(updateEntry: AutocompleteEntry, type?: string): void {\n        if (type === 'column') {\n            const { key: colId, displayValue } = updateEntry;\n            this.columnNameToIdMap[updateEntry.displayValue!.toLocaleUpperCase()] = {\n                colId,\n                columnName: displayValue!,\n            };\n        }\n    }\n\n    public translate(key: keyof typeof ADVANCED_FILTER_LOCALE_TEXT, variableValues?: string[]): string {\n        let defaultValue = ADVANCED_FILTER_LOCALE_TEXT[key];\n        if (typeof defaultValue === 'function') {\n            defaultValue = defaultValue(variableValues!);\n        }\n        return this.localeService.getLocaleTextFunc()(key, defaultValue, variableValues);\n    }\n\n    public generateAutocompleteListParams(\n        entries: AutocompleteEntry[],\n        type: string,\n        searchString: string\n    ): AutocompleteListParams {\n        return {\n            enabled: true,\n            type,\n            searchString,\n            entries,\n        };\n    }\n\n    public getColumnAutocompleteEntries(): AutocompleteEntry[] {\n        if (this.columnAutocompleteEntries) {\n            return this.columnAutocompleteEntries;\n        }\n        const columns = this.columnModel.getColDefCols() ?? [];\n        const entries: AutocompleteEntry[] = [];\n        const includeHiddenColumns = this.gos.get('includeHiddenColumnsInAdvancedFilter');\n        columns.forEach((column) => {\n            if (\n                column.getColDef().filter &&\n                (includeHiddenColumns || column.isVisible() || column.isRowGroupActive())\n            ) {\n                entries.push({\n                    key: column.getColId(),\n                    displayValue: this.columnNameService.getDisplayNameForColumn(column, 'advancedFilter')!,\n                });\n            }\n        });\n        entries.sort((a, b) => {\n            const aValue = a.displayValue ?? '';\n            const bValue = b.displayValue ?? '';\n            if (aValue < bValue) {\n                return -1;\n            } else if (bValue > aValue) {\n                return 1;\n            }\n            return 0;\n        });\n        return entries;\n    }\n\n    public getOperatorAutocompleteEntries(column: AgColumn, baseCellDataType: BaseCellDataType): AutocompleteEntry[] {\n        const activeOperators = this.getActiveOperators(column);\n        return this.getDataTypeExpressionOperator(baseCellDataType)!.getEntries(activeOperators);\n    }\n\n    public getJoinOperatorAutocompleteEntries(): AutocompleteEntry[] {\n        return Object.entries(this.expressionJoinOperators).map(([key, displayValue]) => ({ key, displayValue }));\n    }\n\n    public getDefaultAutocompleteListParams(searchString: string): AutocompleteListParams {\n        return this.generateAutocompleteListParams(this.getColumnAutocompleteEntries(), 'column', searchString);\n    }\n\n    public getDataTypeExpressionOperator(\n        baseCellDataType?: BaseCellDataType\n    ): DataTypeFilterExpressionOperators<any> | undefined {\n        return this.expressionOperators[baseCellDataType!];\n    }\n\n    public getExpressionOperator(\n        baseCellDataType?: BaseCellDataType,\n        operator?: string\n    ): FilterExpressionOperator<any> | undefined {\n        return this.getDataTypeExpressionOperator(baseCellDataType)?.operators?.[operator!];\n    }\n\n    public getExpressionJoinOperators(): { AND: string; OR: string } {\n        return this.expressionJoinOperators;\n    }\n\n    public getColId(columnName: string): { colId: string; columnName: string } | null {\n        const upperCaseColumnName = columnName.toLocaleUpperCase();\n        const cachedColId = this.columnNameToIdMap[upperCaseColumnName];\n        if (cachedColId) {\n            return cachedColId;\n        }\n\n        const columnAutocompleteEntries = this.getColumnAutocompleteEntries();\n        const colEntry = columnAutocompleteEntries.find(\n            ({ displayValue }) => displayValue!.toLocaleUpperCase() === upperCaseColumnName\n        );\n        if (colEntry) {\n            const { key: colId, displayValue } = colEntry;\n            const colValue = { colId, columnName: displayValue! };\n            // cache for faster lookup\n            this.columnNameToIdMap[upperCaseColumnName] = colValue;\n            return colValue;\n        }\n        return null;\n    }\n\n    public getExpressionEvaluatorParams<ConvertedTValue, TValue = ConvertedTValue>(\n        colId: string\n    ): FilterExpressionEvaluatorParams<ConvertedTValue, TValue> {\n        let params = this.expressionEvaluatorParams[colId];\n        if (params) {\n            return params;\n        }\n\n        const column = this.columnModel.getColDefCol(colId);\n        if (!column) {\n            return { valueConverter: (v: any) => v };\n        }\n\n        const baseCellDataType = this.dataTypeService?.getBaseDataType(column);\n        switch (baseCellDataType) {\n            case 'dateString':\n                params = {\n                    valueConverter: this.dataTypeService?.getDateParserFunction(column) ?? ((v: any) => v),\n                };\n                break;\n            case 'object':\n                // If there's a filter value getter, assume the value is already a string. Otherwise we need to format it.\n                if (column.getColDef().filterValueGetter) {\n                    params = { valueConverter: (v: any) => v };\n                } else {\n                    params = {\n                        valueConverter: (value, node) =>\n                            this.valueService.formatValue(column, node, value) ??\n                            (typeof value.toString === 'function' ? value.toString() : ''),\n                    };\n                }\n                break;\n            case 'text':\n            case undefined:\n                params = { valueConverter: (v: any) => _toStringOrNull(v) };\n                break;\n            default:\n                params = { valueConverter: (v: any) => v };\n                break;\n        }\n        const { filterParams } = column.getColDef();\n        if (filterParams) {\n            ['caseSensitive', 'includeBlanksInEquals', 'includeBlanksInLessThan', 'includeBlanksInGreaterThan'].forEach(\n                (param: keyof FilterExpressionEvaluatorParams<ConvertedTValue, TValue>) => {\n                    const paramValue = filterParams[param];\n                    if (paramValue) {\n                        params[param] = paramValue;\n                    }\n                }\n            );\n        }\n        this.expressionEvaluatorParams[colId] = params;\n\n        return params;\n    }\n\n    public getColumnDetails(colId: string): { column?: AgColumn; baseCellDataType: BaseCellDataType } {\n        const column = this.columnModel.getColDefCol(colId) ?? undefined;\n        const baseCellDataType = (column ? this.dataTypeService?.getBaseDataType(column) : undefined) ?? 'text';\n        return { column, baseCellDataType };\n    }\n\n    public generateExpressionOperators(): FilterExpressionOperators {\n        const translate = (key: keyof typeof ADVANCED_FILTER_LOCALE_TEXT, variableValues?: string[]) =>\n            this.translate(key, variableValues);\n        return {\n            text: new TextFilterExpressionOperators({ translate }),\n            boolean: new BooleanFilterExpressionOperators({ translate }),\n            object: new TextFilterExpressionOperators<any>({ translate }),\n            number: new ScalarFilterExpressionOperators<number>({ translate, equals: (v, o) => v === o }),\n            date: new ScalarFilterExpressionOperators<Date>({\n                translate,\n                equals: (v: Date, o: Date) => v.getTime() === o.getTime(),\n            }),\n            dateString: new ScalarFilterExpressionOperators<Date, string>({\n                translate,\n                equals: (v: Date, o: Date) => v.getTime() === o.getTime(),\n            }),\n        };\n    }\n\n    public getColumnValue({ displayValue }: AutocompleteEntry): string {\n        return `${ColFilterExpressionParser.COL_START_CHAR}${displayValue}${ColFilterExpressionParser.COL_END_CHAR}`;\n    }\n\n    private generateExpressionJoinOperators(): { AND: string; OR: string } {\n        return {\n            AND: this.translate('advancedFilterAnd'),\n            OR: this.translate('advancedFilterOr'),\n        };\n    }\n\n    private getActiveOperators(column: AgColumn): string[] | undefined {\n        const filterOptions = column.getColDef().filterParams?.filterOptions;\n        if (!filterOptions) {\n            return undefined;\n        }\n        const isValid = filterOptions.every((filterOption: any) => typeof filterOption === 'string');\n        return isValid ? filterOptions : undefined;\n    }\n\n    public resetColumnCaches(): void {\n        this.columnAutocompleteEntries = null;\n        this.columnNameToIdMap = {};\n        this.expressionEvaluatorParams = {};\n    }\n}\n", "export const ADVANCED_FILTER_LOCALE_TEXT = {\n    ariaAdvancedFilterBuilderItem: (variableValues: string[]) =>\n        `${variableValues[0]}. Level ${variableValues[1]}. Press ENTER to edit`,\n    ariaAdvancedFilterBuilderItemValidation: (variableValues: string[]) =>\n        `${variableValues[0]}. Level ${variableValues[1]}. ${variableValues[2]} Press ENTER to edit`,\n    ariaAdvancedFilterBuilderList: 'Advanced Filter Builder List',\n    ariaAdvancedFilterBuilderFilterItem: 'Filter Condition',\n    ariaAdvancedFilterBuilderGroupItem: 'Filter Group',\n    ariaAdvancedFilterBuilderColumn: 'Column',\n    ariaAdvancedFilterBuilderOption: 'Option',\n    ariaAdvancedFilterBuilderValue: 'Value',\n    ariaAdvancedFilterBuilderJoinOperator: 'Join Operator',\n\n    ariaAdvancedFilterInput: 'Advanced Filter Input',\n    ariaLabelAdvancedFilterAutocomplete: 'Advanced Filter Autocomplete',\n    advancedFilterContains: 'contains',\n    advancedFilterNotContains: 'does not contain',\n    advancedFilterTextEquals: 'equals',\n    advancedFilterTextNotEqual: 'does not equal',\n    advancedFilterStartsWith: 'begins with',\n    advancedFilterEndsWith: 'ends with',\n    advancedFilterBlank: 'is blank',\n    advancedFilterNotBlank: 'is not blank',\n    advancedFilterEquals: '=',\n    advancedFilterNotEqual: '!=',\n    advancedFilterGreaterThan: '>',\n    advancedFilterGreaterThanOrEqual: '>=',\n    advancedFilterLessThan: '<',\n    advancedFilterLessThanOrEqual: '<=',\n    advancedFilterTrue: 'is true',\n    advancedFilterFalse: 'is false',\n    advancedFilterAnd: 'AND',\n    advancedFilterOr: 'OR',\n    advancedFilterApply: 'Apply',\n    advancedFilterBuilder: 'Builder',\n    advancedFilterValidationMissingColumn: 'Column is missing',\n    advancedFilterValidationMissingOption: 'Option is missing',\n    advancedFilterValidationMissingValue: 'Value is missing',\n    advancedFilterValidationInvalidColumn: 'Column not found',\n    advancedFilterValidationInvalidOption: 'Option not found',\n    advancedFilterValidationMissingQuote: 'Value is missing an end quote',\n    advancedFilterValidationNotANumber: 'Value is not a number',\n    advancedFilterValidationInvalidDate: 'Value is not a valid date',\n    advancedFilterValidationMissingCondition: 'Condition is missing',\n    advancedFilterValidationJoinOperatorMismatch: 'Join operators within a condition must be the same',\n    advancedFilterValidationInvalidJoinOperator: 'Join operator not found',\n    advancedFilterValidationMissingEndBracket: 'Missing end bracket',\n    advancedFilterValidationExtraEndBracket: 'Too many end brackets',\n    advancedFilterValidationMessage: (variableValues: string[]) =>\n        `Expression has an error. ${variableValues[0]} - ${variableValues[1]}.`,\n    advancedFilterValidationMessageAtEnd: (variableValues: string[]) =>\n        `Expression has an error. ${variableValues[0]} at end of expression.`,\n    advancedFilterBuilderTitle: 'Advanced Filter',\n    advancedFilterBuilderApply: 'Apply',\n    advancedFilterBuilderCancel: 'Cancel',\n    advancedFilterBuilderAddButtonTooltip: 'Add Filter or Group',\n    advancedFilterBuilderRemoveButtonTooltip: 'Remove',\n    advancedFilterBuilderMoveUpButtonTooltip: 'Move Up',\n    advancedFilterBuilderMoveDownButtonTooltip: 'Move Down',\n    advancedFilterBuilderAddJoin: 'Add Group',\n    advancedFilterBuilderAddCondition: 'Add Filter',\n    advancedFilterBuilderSelectColumn: 'Select a column',\n    advancedFilterBuilderSelectOption: 'Select an option',\n    advancedFilterBuilderEnterValue: 'Enter a value...',\n    advancedFilterBuilderValidationAlreadyApplied: 'Current filter already applied.',\n    advancedFilterBuilderValidationIncomplete: 'Not all conditions are complete.',\n    advancedFilterBuilderValidationSelectColumn: 'Must select a column.',\n    advancedFilterBuilderValidationSelectOption: 'Must select an option.',\n    advancedFilterBuilderValidationEnterValue: 'Must enter a value.',\n};\n", "import type { ColumnModel, DataTypeService, IRowNode, ValueService } from '@ag-grid-community/core';\n\nimport type { AdvancedFilterExpressionService } from './advancedFilterExpressionService';\nimport type { FilterExpressionEvaluatorParams, FilterExpressionOperator } from './filterExpressionOperators';\n\nexport interface FilterExpressionParserParams {\n    expression: string;\n    columnModel: ColumnModel;\n    dataTypeService?: DataTypeService;\n    valueService: ValueService;\n    advancedFilterExpressionService: AdvancedFilterExpressionService;\n}\n\nexport interface AutocompleteUpdate {\n    updatedValue: string;\n    updatedPosition: number;\n    hideAutocomplete?: boolean;\n}\n\nexport interface FilterExpressionValidationError {\n    message: string;\n    startPosition: number;\n    endPosition: number;\n}\n\nexport interface FilterExpressionFunctionParams {\n    operands: any[];\n    operators: FilterExpressionOperator<any>[];\n    evaluatorParams: FilterExpressionEvaluatorParams<any, any>[];\n}\n\nexport interface ExpressionProxy {\n    getValue<T = any>(colId: string, node: IRowNode): T;\n}\n\nexport type FilterExpressionFunction = (\n    expressionProxy: ExpressionProxy,\n    node: IRowNode,\n    params: FilterExpressionFunctionParams\n) => boolean;\n\nexport function getSearchString(value: string, position: number, endPosition: number): string {\n    if (!value) {\n        return '';\n    }\n    const numChars = endPosition - position;\n    return numChars ? value.slice(0, value.length - numChars) : value;\n}\n\nexport function updateExpression(\n    expression: string,\n    startPosition: number,\n    endPosition: number,\n    updatedValuePart: string,\n    appendSpace?: boolean,\n    appendQuote?: boolean,\n    empty?: boolean\n): AutocompleteUpdate {\n    const secondPartStartPosition = endPosition + (!expression.length || empty ? 0 : 1);\n    let positionOffset = 0;\n    if (appendSpace) {\n        if (expression[secondPartStartPosition] === ' ') {\n            // already a space, just move the position\n            positionOffset = 1;\n        } else {\n            updatedValuePart += ' ';\n            if (appendQuote) {\n                updatedValuePart += `\"`;\n            }\n        }\n    }\n    const updatedValue =\n        expression.slice(0, startPosition) + updatedValuePart + expression.slice(secondPartStartPosition);\n    return { updatedValue, updatedPosition: startPosition + updatedValuePart.length + positionOffset };\n}\n\nexport function findStartPosition(expression: string, position: number, endPosition: number) {\n    let startPosition = position;\n    while (startPosition < endPosition) {\n        const char = expression[startPosition];\n        if (char !== ' ') {\n            break;\n        }\n        startPosition++;\n    }\n    return startPosition;\n}\n\nexport function findEndPosition(\n    expression: string,\n    position: number,\n    includeCloseBracket?: boolean,\n    isStartPositionUnknown?: boolean\n): { endPosition: number; isEmpty: boolean } {\n    let endPosition = position;\n    let isEmpty = false;\n    while (endPosition < expression.length) {\n        const char = expression[endPosition];\n        if (char === '(') {\n            if (isStartPositionUnknown && expression[endPosition - 1] === ' ') {\n                isEmpty = true;\n            } else {\n                endPosition = endPosition - 1;\n            }\n            break;\n        } else if (char === ' ' || (includeCloseBracket && char === ')')) {\n            endPosition = endPosition - 1;\n            break;\n        }\n        endPosition++;\n    }\n    return { endPosition, isEmpty };\n}\n\nexport function checkAndUpdateExpression(\n    params: FilterExpressionParserParams,\n    userValue: string,\n    displayValue: string,\n    endPosition: number\n): void {\n    if (displayValue !== userValue) {\n        params.expression = updateExpression(\n            params.expression,\n            endPosition - userValue.length + 1,\n            endPosition,\n            displayValue\n        ).updatedValue;\n    }\n}\n\nexport function escapeQuotes(value: string): string {\n    return value.replace(/(['\"])/, '\\\\$1');\n}\n", "import type { AdvancedFilterModel, AgColumn, BaseCellDataType } from '@ag-grid-community/core';\n\nimport type { ADVANCED_FILTER_LOCALE_TEXT } from './advancedFilterLocaleText';\nimport type { AutocompleteEntry, AutocompleteListParams } from './autocomplete/autocompleteParams';\nimport type {\n    AutocompleteUpdate,\n    FilterExpressionFunction,\n    FilterExpressionFunctionParams,\n    FilterExpressionParserParams,\n    FilterExpressionValidationError,\n} from './filterExpressionUtils';\nimport {\n    checkAndUpdateExpression,\n    escapeQuotes,\n    findEndPosition,\n    findStartPosition,\n    getSearchString,\n    updateExpression,\n} from './filterExpressionUtils';\n\ninterface Parser {\n    type: string;\n    parse(char: string, position: number): boolean | undefined;\n    complete(position: number): void;\n    getValidationError(): FilterExpressionValidationError | null;\n}\n\nclass ColumnParser implements Parser {\n    public readonly type = 'column';\n\n    public valid = true;\n    public endPosition: number | undefined;\n    public baseCellDataType: BaseCellDataType;\n    public column: AgColumn | null | undefined;\n    public hasStartChar = false;\n    public hasEndChar = false;\n    private colName: string = '';\n    private colId: string;\n\n    constructor(\n        private params: FilterExpressionParserParams,\n        public readonly startPosition: number\n    ) {}\n\n    public parse(char: string, position: number): boolean | undefined {\n        if (char === ColFilterExpressionParser.COL_START_CHAR && !this.colName) {\n            this.hasStartChar = true;\n        } else if (char === ColFilterExpressionParser.COL_END_CHAR && this.hasStartChar) {\n            const isMatch = this.parseColumn(false, position);\n            if (isMatch) {\n                this.hasEndChar = true;\n                return false;\n            } else {\n                this.colName += char;\n            }\n        } else {\n            this.colName += char;\n        }\n        return undefined;\n    }\n\n    public getDisplayValue(): string {\n        return (\n            (this.hasStartChar ? ColFilterExpressionParser.COL_START_CHAR : '') +\n            this.colName +\n            (this.hasEndChar ? ColFilterExpressionParser.COL_END_CHAR : '')\n        );\n    }\n\n    public getColId(): string {\n        return this.colId;\n    }\n\n    public complete(position: number): void {\n        this.parseColumn(true, position);\n    }\n\n    public getValidationError(): FilterExpressionValidationError | null {\n        return this.valid\n            ? null\n            : {\n                  message: this.params.advancedFilterExpressionService.translate(\n                      'advancedFilterValidationInvalidColumn'\n                  ),\n                  startPosition: this.startPosition,\n                  endPosition: this.endPosition ?? this.params.expression.length - 1,\n              };\n    }\n\n    private parseColumn(fromComplete: boolean, endPosition: number): boolean {\n        this.endPosition = endPosition;\n        const colValue = this.params.advancedFilterExpressionService.getColId(this.colName);\n        if (colValue && this.hasStartChar) {\n            this.colId = colValue.colId;\n            checkAndUpdateExpression(this.params, this.colName, colValue.columnName, endPosition - 1);\n            this.colName = colValue.columnName;\n            this.column = this.params.columnModel.getColDefCol(this.colId);\n            if (this.column) {\n                this.baseCellDataType = this.params.dataTypeService?.getBaseDataType(this.column) ?? 'text';\n                return true;\n            }\n        }\n        if (fromComplete) {\n            this.valid = false;\n        }\n        this.baseCellDataType = 'text';\n        return false;\n    }\n}\n\nclass OperatorParser implements Parser {\n    public readonly type = 'operator';\n\n    public valid = true;\n    public endPosition: number | undefined;\n    public expectedNumOperands: number = 0;\n    private operator: string = '';\n    private parsedOperator: string;\n\n    constructor(\n        private params: FilterExpressionParserParams,\n        public readonly startPosition: number,\n        private readonly baseCellDataType: BaseCellDataType\n    ) {}\n\n    public parse(char: string, position: number): boolean | undefined {\n        if (char === ' ' || char === ')') {\n            const isMatch = this.parseOperator(false, position - 1);\n            if (isMatch) {\n                return true;\n            } else {\n                this.operator += char;\n            }\n        } else {\n            this.operator += char;\n        }\n        return undefined;\n    }\n\n    public complete(position: number): void {\n        this.parseOperator(true, position);\n    }\n\n    public getValidationError(): FilterExpressionValidationError | null {\n        return this.valid\n            ? null\n            : {\n                  message: this.params.advancedFilterExpressionService.translate(\n                      'advancedFilterValidationInvalidOption'\n                  ),\n                  startPosition: this.startPosition,\n                  endPosition: this.endPosition ?? this.params.expression.length - 1,\n              };\n    }\n\n    public getDisplayValue(): string {\n        return this.operator;\n    }\n\n    public getOperatorKey(): string {\n        return this.parsedOperator;\n    }\n\n    private parseOperator(fromComplete: boolean, endPosition: number): boolean {\n        const operatorForType = this.params.advancedFilterExpressionService.getDataTypeExpressionOperator(\n            this.baseCellDataType\n        )!;\n        const parsedOperator = operatorForType.findOperator(this.operator);\n        this.endPosition = endPosition;\n        if (parsedOperator) {\n            this.parsedOperator = parsedOperator;\n            const operator = operatorForType.operators[parsedOperator];\n            this.expectedNumOperands = operator.numOperands;\n            const operatorDisplayValue = operator.displayValue;\n            checkAndUpdateExpression(this.params, this.operator, operatorDisplayValue, endPosition);\n            this.operator = operatorDisplayValue;\n            return true;\n        }\n        const isPartialMatch = parsedOperator === null;\n        if (fromComplete || !isPartialMatch) {\n            this.valid = false;\n        }\n        return false;\n    }\n}\n\nclass OperandParser implements Parser {\n    public readonly type = 'operand';\n\n    public valid = true;\n    public endPosition: number | undefined;\n    private quotes: `'` | `\"` | undefined;\n    private operand = '';\n    private modelValue: number | string;\n    private validationMessage: string | null = null;\n\n    constructor(\n        private params: FilterExpressionParserParams,\n        public readonly startPosition: number,\n        private readonly baseCellDataType: BaseCellDataType,\n        private readonly column: AgColumn | null | undefined\n    ) {}\n\n    public parse(char: string, position: number): boolean | undefined {\n        if (char === ' ') {\n            if (this.quotes) {\n                this.operand += char;\n            } else {\n                this.parseOperand(false, position);\n                return true;\n            }\n        } else if (char === ')') {\n            if (this.baseCellDataType === 'number' || !this.quotes) {\n                this.parseOperand(false, position - 1);\n                return true;\n            } else {\n                this.operand += char;\n            }\n        } else if (!this.operand && !this.quotes && (char === `'` || char === `\"`)) {\n            this.quotes = char;\n        } else if (this.quotes && char === this.quotes) {\n            this.parseOperand(false, position);\n            return false;\n        } else {\n            this.operand += char;\n        }\n        return undefined;\n    }\n\n    public complete(position: number): void {\n        this.parseOperand(true, position);\n    }\n\n    public getValidationError(): FilterExpressionValidationError | null {\n        return this.validationMessage\n            ? {\n                  message: this.validationMessage,\n                  startPosition: this.startPosition,\n                  endPosition: this.endPosition ?? this.params.expression.length - 1,\n              }\n            : null;\n    }\n\n    public getRawValue(): string {\n        return this.operand;\n    }\n\n    public getModelValue(): string | number {\n        return this.modelValue;\n    }\n\n    private parseOperand(fromComplete: boolean, position: number): void {\n        const { advancedFilterExpressionService } = this.params;\n        this.endPosition = position;\n        this.modelValue = this.operand;\n        if (fromComplete && this.quotes) {\n            // missing end quote\n            this.valid = false;\n            this.validationMessage = advancedFilterExpressionService.translate('advancedFilterValidationMissingQuote');\n        } else if (this.modelValue === '') {\n            this.valid = false;\n            this.validationMessage = advancedFilterExpressionService.translate('advancedFilterValidationMissingValue');\n        } else {\n            const modelValue = advancedFilterExpressionService.getOperandModelValue(\n                this.operand,\n                this.baseCellDataType,\n                this.column!\n            );\n            if (modelValue != null) {\n                this.modelValue = modelValue;\n            }\n            switch (this.baseCellDataType) {\n                case 'number':\n                    if (this.quotes || isNaN(this.modelValue as number)) {\n                        this.valid = false;\n                        this.validationMessage = advancedFilterExpressionService.translate(\n                            'advancedFilterValidationNotANumber'\n                        );\n                    }\n                    break;\n                case 'date':\n                case 'dateString':\n                    if (modelValue == null) {\n                        this.valid = false;\n                        this.validationMessage = advancedFilterExpressionService.translate(\n                            'advancedFilterValidationInvalidDate'\n                        );\n                    }\n                    break;\n            }\n        }\n    }\n}\n\nexport class ColFilterExpressionParser {\n    public static readonly COL_START_CHAR = '[';\n    public static readonly COL_END_CHAR = ']';\n\n    private endPosition: number | undefined;\n    private isAwaiting = true;\n    private parser: Parser | undefined;\n    private columnParser: ColumnParser | undefined;\n    private operatorParser: OperatorParser | undefined;\n    private operandParser: OperandParser | undefined;\n\n    constructor(\n        private params: FilterExpressionParserParams,\n        public readonly startPosition: number\n    ) {}\n\n    public parseExpression(): number {\n        let i = this.startPosition;\n        const { expression } = this.params;\n        while (i < expression.length) {\n            const char = expression[i];\n            if (char === ' ' && this.isAwaiting) {\n                // ignore duplicate spaces\n            } else {\n                this.isAwaiting = false;\n                if (!this.parser) {\n                    let parser: Parser;\n                    if (!this.columnParser) {\n                        this.columnParser = new ColumnParser(this.params, i);\n                        parser = this.columnParser;\n                    } else if (!this.operatorParser) {\n                        this.operatorParser = new OperatorParser(this.params, i, this.columnParser!.baseCellDataType);\n                        parser = this.operatorParser;\n                    } else {\n                        this.operandParser = new OperandParser(\n                            this.params,\n                            i,\n                            this.columnParser!.baseCellDataType,\n                            this.columnParser!.column\n                        );\n                        parser = this.operandParser;\n                    }\n                    this.parser = parser;\n                }\n                const hasCompletedOnPrevChar = this.parser.parse(char, i);\n                if (hasCompletedOnPrevChar != null) {\n                    if (this.isComplete()) {\n                        return this.returnEndPosition(hasCompletedOnPrevChar ? i - 1 : i, true);\n                    }\n                    this.parser = undefined;\n                    this.isAwaiting = true;\n                }\n            }\n            i++;\n        }\n        this.parser?.complete?.(i - 1);\n        return this.returnEndPosition(i);\n    }\n\n    public isValid(): boolean {\n        return (\n            this.isComplete() &&\n            this.columnParser!.valid &&\n            this.operatorParser!.valid &&\n            (!this.operandParser || this.operandParser!.valid)\n        );\n    }\n\n    public getValidationError(): FilterExpressionValidationError | null {\n        const validationError =\n            this.columnParser?.getValidationError() ??\n            this.operatorParser?.getValidationError() ??\n            this.operandParser?.getValidationError();\n        if (validationError) {\n            return validationError;\n        }\n        const endPosition = this.params.expression.length;\n        let translateKey: keyof typeof ADVANCED_FILTER_LOCALE_TEXT | undefined;\n        if (!this.columnParser) {\n            translateKey = 'advancedFilterValidationMissingColumn';\n        } else if (!this.operatorParser) {\n            translateKey = 'advancedFilterValidationMissingOption';\n        } else if (this.operatorParser.expectedNumOperands && !this.operandParser) {\n            translateKey = 'advancedFilterValidationMissingValue';\n        }\n        if (translateKey) {\n            return {\n                message: this.params.advancedFilterExpressionService.translate(translateKey),\n                startPosition: endPosition,\n                endPosition,\n            };\n        }\n        return null;\n    }\n\n    public getFunctionString(params: FilterExpressionFunctionParams): string {\n        return this.getFunctionCommon(params, (operandIndex, operatorIndex, colId, evaluatorParamsIndex) => {\n            const escapedColId = escapeQuotes(colId);\n            const operand = operandIndex == null ? '' : `, params.operands[${operandIndex}]`;\n            return `params.operators[${operatorIndex}].evaluator(expressionProxy.getValue('${escapedColId}', node), node, params.evaluatorParams[${evaluatorParamsIndex}]${operand})`;\n        });\n    }\n\n    public getFunctionParsed(params: FilterExpressionFunctionParams): FilterExpressionFunction {\n        return this.getFunctionCommon(params, (operandIndex, operatorIndex, colId, evaluatorParamsIndex) => {\n            return (expressionProxy, node, p) =>\n                p.operators[operatorIndex].evaluator(\n                    expressionProxy.getValue(colId, node),\n                    node,\n                    p.evaluatorParams[evaluatorParamsIndex],\n                    operandIndex == null ? undefined : p.operands[operandIndex]\n                );\n        });\n    }\n\n    public getAutocompleteListParams(position: number): AutocompleteListParams | undefined {\n        if (this.isColumnPosition(position)) {\n            return this.getColumnAutocompleteListParams(position);\n        }\n        if (this.isOperatorPosition(position)) {\n            return this.getOperatorAutocompleteListParams(position);\n        }\n        if (this.isBeyondEndPosition(position)) {\n            return undefined;\n        }\n        return { enabled: false };\n    }\n\n    public updateExpression(\n        position: number,\n        updateEntry: AutocompleteEntry,\n        type?: string\n    ): AutocompleteUpdate | null {\n        const { expression } = this.params;\n        if (this.isColumnPosition(position)) {\n            return updateExpression(\n                this.params.expression,\n                this.startPosition,\n                this.columnParser?.getColId()\n                    ? this.columnParser!.endPosition!\n                    : findEndPosition(expression, position).endPosition,\n                this.params.advancedFilterExpressionService.getColumnValue(updateEntry),\n                true\n            );\n        } else if (this.isOperatorPosition(position)) {\n            const baseCellDataType = this.getBaseCellDataTypeFromOperatorAutocompleteType(type);\n            const hasOperand = this.hasOperand(baseCellDataType, updateEntry.key);\n            const doesOperandNeedQuotes = hasOperand && this.doesOperandNeedQuotes(baseCellDataType);\n            let update: AutocompleteUpdate;\n            if (this.operatorParser?.startPosition != null && position < this.operatorParser.startPosition) {\n                // in between multiple spaces, just insert direct\n                update = updateExpression(\n                    expression,\n                    position,\n                    position,\n                    updateEntry.displayValue ?? updateEntry.key,\n                    hasOperand,\n                    doesOperandNeedQuotes\n                );\n            } else {\n                let endPosition: number;\n                let empty = false;\n                if (this.operatorParser?.getOperatorKey()) {\n                    endPosition = this.operatorParser!.endPosition!;\n                } else {\n                    const { endPosition: calculatedEndPosition, isEmpty } = findEndPosition(\n                        expression,\n                        position,\n                        true,\n                        true\n                    );\n                    endPosition = calculatedEndPosition;\n                    empty = isEmpty;\n                }\n                update = updateExpression(\n                    expression,\n                    findStartPosition(expression, this.columnParser!.endPosition! + 1, endPosition),\n                    endPosition,\n                    updateEntry.displayValue ?? updateEntry.key,\n                    hasOperand,\n                    doesOperandNeedQuotes,\n                    empty\n                );\n            }\n            return { ...update, hideAutocomplete: !hasOperand };\n        }\n        return null;\n    }\n\n    public getModel(): AdvancedFilterModel {\n        const colId = this.columnParser!.getColId();\n        const model = {\n            filterType: this.columnParser!.baseCellDataType,\n            colId,\n            type: this.operatorParser!.getOperatorKey(),\n        };\n        if (this.operatorParser!.expectedNumOperands) {\n            (model as any).filter = this.operandParser!.getModelValue();\n        }\n        return model as AdvancedFilterModel;\n    }\n\n    private getFunctionCommon<T>(\n        params: FilterExpressionFunctionParams,\n        processFunc: (\n            operandIndex: number | undefined,\n            operatorIndex: number,\n            colId: string,\n            evaluatorParamsIndex: number\n        ) => T\n    ) {\n        const colId = this.columnParser!.getColId();\n        const operator = this.operatorParser?.getOperatorKey();\n        const { operators, evaluatorParams, operands } = params;\n        const operatorForColumn = this.params.advancedFilterExpressionService.getExpressionOperator(\n            this.columnParser!.baseCellDataType,\n            operator\n        );\n        const operatorIndex = this.addToListAndGetIndex(operators, operatorForColumn);\n        const evaluatorParamsForColumn =\n            this.params.advancedFilterExpressionService.getExpressionEvaluatorParams(colId);\n        const evaluatorParamsIndex = this.addToListAndGetIndex(evaluatorParams, evaluatorParamsForColumn);\n        const operandIndex =\n            this.operatorParser?.expectedNumOperands === 0\n                ? undefined\n                : this.addToListAndGetIndex(operands, this.getOperandValue());\n        return processFunc(operandIndex, operatorIndex, colId, evaluatorParamsIndex);\n    }\n\n    private getOperandValue(): any {\n        let operand: any = this.operandParser!.getRawValue();\n        const { baseCellDataType, column } = this.columnParser!;\n        switch (baseCellDataType) {\n            case 'number':\n                operand = Number(operand);\n                break;\n            case 'date':\n            case 'dateString':\n                operand = this.params.valueService.parseValue(column!, null, operand, undefined);\n                break;\n        }\n        if (baseCellDataType === 'dateString') {\n            const { dataTypeService } = this.params;\n            return dataTypeService ? dataTypeService.getDateParserFunction(column)(operand as string) : operand;\n        }\n        return operand;\n    }\n\n    private isComplete(): boolean {\n        return !!(\n            this.operatorParser &&\n            (!this.operatorParser.expectedNumOperands ||\n                (this.operatorParser.expectedNumOperands && this.operandParser))\n        );\n    }\n\n    private isColumnPosition(position: number): boolean {\n        return (\n            !this.columnParser || this.columnParser.endPosition == null || position <= this.columnParser.endPosition + 1\n        );\n    }\n\n    private isOperatorPosition(position: number): boolean {\n        return (\n            !this.operatorParser ||\n            this.operatorParser.endPosition == null ||\n            position <= this.operatorParser.endPosition + 1\n        );\n    }\n\n    private isBeyondEndPosition(position: number): boolean {\n        return (\n            this.isComplete() &&\n            this.endPosition != null &&\n            position > this.endPosition + 1 &&\n            this.endPosition + 1 < this.params.expression.length\n        );\n    }\n\n    private returnEndPosition(returnPosition: number, treatAsEnd?: boolean): number {\n        this.endPosition = treatAsEnd ? returnPosition : returnPosition - 1;\n        return returnPosition;\n    }\n\n    private getColumnAutocompleteListParams(position: number): AutocompleteListParams {\n        return this.params.advancedFilterExpressionService.generateAutocompleteListParams(\n            this.params.advancedFilterExpressionService.getColumnAutocompleteEntries(),\n            'column',\n            this.getColumnSearchString(position)\n        );\n    }\n\n    private getColumnSearchString(position: number): string {\n        const columnName = this.columnParser?.getDisplayValue() ?? '';\n        const searchString = getSearchString(\n            columnName,\n            position,\n            this.columnParser?.endPosition == null ? this.params.expression.length : this.columnParser.endPosition + 1\n        );\n        const containsStartChar = this.columnParser?.hasStartChar && searchString.length > 0;\n        const containsEndChar = this.columnParser?.hasEndChar && searchString.length === columnName.length + 2;\n        if (containsStartChar) {\n            return searchString.slice(1, containsEndChar ? -1 : undefined);\n        }\n        return searchString;\n    }\n\n    private getOperatorAutocompleteListParams(position: number): AutocompleteListParams {\n        const column = this.columnParser?.column;\n        if (!column) {\n            return { enabled: false };\n        }\n\n        const baseCellDataType = this.columnParser!.baseCellDataType;\n        const searchString =\n            this.operatorParser?.startPosition != null && position < this.operatorParser.startPosition\n                ? ''\n                : getSearchString(\n                      this.operatorParser?.getDisplayValue() ?? '',\n                      position,\n                      this.operatorParser?.endPosition == null\n                          ? this.params.expression.length\n                          : this.operatorParser.endPosition + 1\n                  );\n        return this.params.advancedFilterExpressionService.generateAutocompleteListParams(\n            this.params.advancedFilterExpressionService.getOperatorAutocompleteEntries(column, baseCellDataType),\n            `operator-${baseCellDataType}`,\n            searchString\n        );\n    }\n\n    private getBaseCellDataTypeFromOperatorAutocompleteType(type?: string): BaseCellDataType | undefined {\n        return type?.replace('operator-', '') as BaseCellDataType;\n    }\n\n    private hasOperand(baseCellDataType?: BaseCellDataType, operator?: string): boolean {\n        return (\n            !baseCellDataType ||\n            !operator ||\n            (this.params.advancedFilterExpressionService.getExpressionOperator(baseCellDataType, operator)\n                ?.numOperands ?? 0) > 0\n        );\n    }\n\n    private doesOperandNeedQuotes(baseCellDataType?: BaseCellDataType): boolean {\n        return baseCellDataType !== 'number';\n    }\n\n    private addToListAndGetIndex<T>(list: T[], value: T): number {\n        const index = list.length;\n        list.push(value);\n        return index;\n    }\n}\n", "import type { IRowNode } from '@ag-grid-community/core';\n\nimport type { ADVANCED_FILTER_LOCALE_TEXT } from './advancedFilterLocaleText';\nimport type { AutocompleteEntry } from './autocomplete/autocompleteParams';\n\nexport interface FilterExpressionEvaluatorParams<ConvertedTValue, TValue = ConvertedTValue> {\n    caseSensitive?: boolean;\n    includeBlanksInEquals?: boolean;\n    includeBlanksInLessThan?: boolean;\n    includeBlanksInGreaterThan?: boolean;\n    valueConverter: (value: TValue, node: IRowNode) => ConvertedTValue;\n}\n\nexport type FilterExpressionEvaluator<ConvertedTValue, TValue = ConvertedTValue> = (\n    value: TValue | null | undefined,\n    node: IRowNode,\n    params: FilterExpressionEvaluatorParams<ConvertedTValue, TValue>,\n    operand1?: ConvertedTValue,\n    operand2?: ConvertedTValue\n) => boolean;\n\nexport interface FilterExpressionOperator<ConvertedTValue, TValue = ConvertedTValue> {\n    displayValue: string;\n    evaluator: FilterExpressionEvaluator<ConvertedTValue, TValue>;\n    numOperands: number;\n}\n\nexport interface DataTypeFilterExpressionOperators<ConvertedTValue, TValue = ConvertedTValue> {\n    operators: {\n        [operator: string]: FilterExpressionOperator<ConvertedTValue, TValue>;\n    };\n    getEntries(activeOperators?: string[]): AutocompleteEntry[];\n    findOperator(displayValue: string): string | null | undefined;\n}\n\nexport interface FilterExpressionOperators {\n    text: DataTypeFilterExpressionOperators<string>;\n    number: DataTypeFilterExpressionOperators<number>;\n    boolean: DataTypeFilterExpressionOperators<boolean>;\n    date: DataTypeFilterExpressionOperators<Date>;\n    dateString: DataTypeFilterExpressionOperators<Date, string>;\n    object: DataTypeFilterExpressionOperators<string, any>;\n}\n\n// null = partial match, undefined = no match\nexport function findMatch<T>(\n    searchValue: string,\n    values: { [key: string]: T },\n    getDisplayValue: (value: T) => string\n): string | null | undefined {\n    let partialMatch = false;\n    const searchValueLowerCase = searchValue.toLocaleLowerCase();\n    const partialSearchValue = searchValueLowerCase + ' ';\n    const parsedValue = Object.entries(values).find(([, value]) => {\n        const displayValueLowerCase = getDisplayValue(value).toLocaleLowerCase();\n        if (displayValueLowerCase.startsWith(partialSearchValue)) {\n            partialMatch = true;\n        }\n        return displayValueLowerCase === searchValueLowerCase;\n    });\n    if (parsedValue) {\n        return parsedValue[0];\n    } else if (partialMatch) {\n        return null;\n    } else {\n        return undefined;\n    }\n}\n\nfunction getEntries<ConvertedTValue, TValue = ConvertedTValue>(\n    operators: { [operator: string]: FilterExpressionOperator<ConvertedTValue, TValue> },\n    activeOperatorKeys?: string[]\n): AutocompleteEntry[] {\n    const keys = activeOperatorKeys ?? Object.keys(operators);\n    return keys.map((key) => ({\n        key,\n        displayValue: operators[key].displayValue,\n    }));\n}\n\nexport interface FilterExpressionOperatorsParams {\n    translate: (key: keyof typeof ADVANCED_FILTER_LOCALE_TEXT, variableValues?: string[]) => string;\n}\n\nexport class TextFilterExpressionOperators<TValue = string>\n    implements DataTypeFilterExpressionOperators<string, TValue>\n{\n    public operators: { [operator: string]: FilterExpressionOperator<string, TValue> };\n\n    constructor(private params: FilterExpressionOperatorsParams) {\n        this.initOperators();\n    }\n\n    public getEntries(activeOperators?: string[]): AutocompleteEntry[] {\n        return getEntries(this.operators, activeOperators);\n    }\n\n    public findOperator(displayValue: string): string | null | undefined {\n        return findMatch(displayValue, this.operators, ({ displayValue }) => displayValue);\n    }\n\n    private initOperators(): void {\n        const { translate } = this.params;\n        this.operators = {\n            contains: {\n                displayValue: translate('advancedFilterContains'),\n                evaluator: (value, node, params, operand1) =>\n                    this.evaluateExpression(value, node, params, operand1!, false, (v, o) => v.includes(o)),\n                numOperands: 1,\n            },\n            notContains: {\n                displayValue: translate('advancedFilterNotContains'),\n                evaluator: (value, node, params, operand1) =>\n                    this.evaluateExpression(value, node, params, operand1!, true, (v, o) => !v.includes(o)),\n                numOperands: 1,\n            },\n            equals: {\n                displayValue: translate('advancedFilterTextEquals'),\n                evaluator: (value, node, params, operand1) =>\n                    this.evaluateExpression(value, node, params, operand1!, false, (v, o) => v === o),\n                numOperands: 1,\n            },\n            notEqual: {\n                displayValue: translate('advancedFilterTextNotEqual'),\n                evaluator: (value, node, params, operand1) =>\n                    this.evaluateExpression(value, node, params, operand1!, true, (v, o) => v != o),\n                numOperands: 1,\n            },\n            startsWith: {\n                displayValue: translate('advancedFilterStartsWith'),\n                evaluator: (value, node, params, operand1) =>\n                    this.evaluateExpression(value, node, params, operand1!, false, (v, o) => v.startsWith(o)),\n                numOperands: 1,\n            },\n            endsWith: {\n                displayValue: translate('advancedFilterEndsWith'),\n                evaluator: (value, node, params, operand1) =>\n                    this.evaluateExpression(value, node, params, operand1!, false, (v, o) => v.endsWith(o)),\n                numOperands: 1,\n            },\n            blank: {\n                displayValue: translate('advancedFilterBlank'),\n                evaluator: (value) => value == null || (typeof value === 'string' && value.trim().length === 0),\n                numOperands: 0,\n            },\n            notBlank: {\n                displayValue: translate('advancedFilterNotBlank'),\n                evaluator: (value) => value != null && (typeof value !== 'string' || value.trim().length > 0),\n                numOperands: 0,\n            },\n        };\n    }\n\n    private evaluateExpression(\n        value: TValue | null | undefined,\n        node: IRowNode,\n        params: FilterExpressionEvaluatorParams<string, TValue>,\n        operand: string,\n        nullsMatch: boolean,\n        expression: (value: string, operand: string) => boolean\n    ): boolean {\n        if (value == null) {\n            return nullsMatch;\n        }\n        return params.caseSensitive\n            ? expression(params.valueConverter(value, node), operand)\n            : expression(params.valueConverter(value, node).toLocaleLowerCase(), operand.toLocaleLowerCase());\n    }\n}\n\nexport interface ScalarFilterExpressionOperatorsParams<ConvertedTValue> extends FilterExpressionOperatorsParams {\n    equals: (value: ConvertedTValue, operand: ConvertedTValue) => boolean;\n}\n\nexport class ScalarFilterExpressionOperators<ConvertedTValue extends number | Date, TValue = ConvertedTValue>\n    implements DataTypeFilterExpressionOperators<ConvertedTValue, TValue>\n{\n    public operators: { [operator: string]: FilterExpressionOperator<ConvertedTValue, TValue> };\n\n    constructor(private params: ScalarFilterExpressionOperatorsParams<ConvertedTValue>) {\n        this.initOperators();\n    }\n\n    public getEntries(activeOperators?: string[]): AutocompleteEntry[] {\n        return getEntries(this.operators, activeOperators);\n    }\n\n    public findOperator(displayValue: string): string | null | undefined {\n        return findMatch(displayValue, this.operators, ({ displayValue }) => displayValue);\n    }\n\n    private initOperators(): void {\n        const { translate, equals } = this.params;\n        this.operators = {\n            equals: {\n                displayValue: translate('advancedFilterEquals'),\n                evaluator: (value, node, params, operand1) =>\n                    this.evaluateSingleOperandExpression(\n                        value,\n                        node,\n                        params,\n                        operand1!,\n                        !!params.includeBlanksInEquals,\n                        equals!\n                    ),\n                numOperands: 1,\n            },\n            notEqual: {\n                displayValue: translate('advancedFilterNotEqual'),\n                evaluator: (value, node, params, operand1) =>\n                    this.evaluateSingleOperandExpression(\n                        value,\n                        node,\n                        params,\n                        operand1!,\n                        !!params.includeBlanksInEquals,\n                        (v, o) => !equals!(v, o)\n                    ),\n                numOperands: 1,\n            },\n            greaterThan: {\n                displayValue: translate('advancedFilterGreaterThan'),\n                evaluator: (value, node, params, operand1) =>\n                    this.evaluateSingleOperandExpression(\n                        value,\n                        node,\n                        params,\n                        operand1!,\n                        !!params.includeBlanksInGreaterThan,\n                        (v, o) => v > o\n                    ),\n                numOperands: 1,\n            },\n            greaterThanOrEqual: {\n                displayValue: translate('advancedFilterGreaterThanOrEqual'),\n                evaluator: (value, node, params, operand1) =>\n                    this.evaluateSingleOperandExpression(\n                        value,\n                        node,\n                        params,\n                        operand1!,\n                        !!params.includeBlanksInGreaterThan,\n                        (v, o) => v >= o\n                    ),\n                numOperands: 1,\n            },\n            lessThan: {\n                displayValue: translate('advancedFilterLessThan'),\n                evaluator: (value, node, params, operand1) =>\n                    this.evaluateSingleOperandExpression(\n                        value,\n                        node,\n                        params,\n                        operand1!,\n                        !!params.includeBlanksInLessThan,\n                        (v, o) => v < o\n                    ),\n                numOperands: 1,\n            },\n            lessThanOrEqual: {\n                displayValue: translate('advancedFilterLessThanOrEqual'),\n                evaluator: (value, node, params, operand1) =>\n                    this.evaluateSingleOperandExpression(\n                        value,\n                        node,\n                        params,\n                        operand1!,\n                        !!params.includeBlanksInLessThan,\n                        (v, o) => v <= o\n                    ),\n                numOperands: 1,\n            },\n            blank: {\n                displayValue: translate('advancedFilterBlank'),\n                evaluator: (value) => value == null,\n                numOperands: 0,\n            },\n            notBlank: {\n                displayValue: translate('advancedFilterNotBlank'),\n                evaluator: (value) => value != null,\n                numOperands: 0,\n            },\n        };\n    }\n\n    private evaluateSingleOperandExpression(\n        value: TValue | null | undefined,\n        node: IRowNode,\n        params: FilterExpressionEvaluatorParams<ConvertedTValue, TValue>,\n        operand: ConvertedTValue,\n        nullsMatch: boolean,\n        expression: (value: ConvertedTValue, operand: ConvertedTValue) => boolean\n    ): boolean {\n        if (value == null) {\n            return nullsMatch;\n        }\n        return expression(params.valueConverter(value, node), operand);\n    }\n}\n\nexport class BooleanFilterExpressionOperators implements DataTypeFilterExpressionOperators<boolean> {\n    public operators: { [operator: string]: FilterExpressionOperator<boolean> };\n\n    constructor(private params: FilterExpressionOperatorsParams) {\n        this.initOperators();\n    }\n\n    public getEntries(activeOperators?: string[]): AutocompleteEntry[] {\n        return getEntries(this.operators, activeOperators);\n    }\n\n    public findOperator(displayValue: string): string | null | undefined {\n        return findMatch(displayValue, this.operators, ({ displayValue }) => displayValue);\n    }\n\n    private initOperators(): void {\n        const { translate } = this.params;\n        this.operators = {\n            true: {\n                displayValue: translate('advancedFilterTrue'),\n                evaluator: (value) => !!value,\n                numOperands: 0,\n            },\n            false: {\n                displayValue: translate('advancedFilterFalse'),\n                evaluator: (value) => value === false,\n                numOperands: 0,\n            },\n            blank: {\n                displayValue: translate('advancedFilterBlank'),\n                evaluator: (value) => value == null,\n                numOperands: 0,\n            },\n            notBlank: {\n                displayValue: translate('advancedFilterNotBlank'),\n                evaluator: (value) => value != null,\n                numOperands: 0,\n            },\n        };\n    }\n}\n", "import type {\n    AdvancedFilterEnabledChangedEvent,\n    AdvancedFilterModel,\n    BeanCollection,\n    ColumnModel,\n    DataTypeService,\n    IAdvancedFilterService,\n    IRowModel,\n    IRowNode,\n    NamedBean,\n    NewColumnsLoadedEvent,\n    ValueService,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { BeanStub, _exists, _warnOnce } from '@ag-grid-community/core';\n\nimport { AdvancedFilterCtrl } from './advancedFilterCtrl';\nimport type { AdvancedFilterExpressionService } from './advancedFilterExpressionService';\nimport type { AutocompleteEntry } from './autocomplete/autocompleteParams';\nimport { FilterExpressionParser } from './filterExpressionParser';\nimport type {\n    ExpressionProxy,\n    FilterExpressionFunction,\n    FilterExpressionFunctionParams,\n} from './filterExpressionUtils';\n\nexport class AdvancedFilterService extends BeanStub implements NamedBean, IAdvancedFilterService {\n    beanName = 'advancedFilterService' as const;\n\n    private valueService: ValueService;\n    private columnModel: ColumnModel;\n    private dataTypeService?: DataTypeService;\n    private rowModel: IRowModel;\n    private advancedFilterExpressionService: AdvancedFilterExpressionService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.valueService = beans.valueService;\n        this.columnModel = beans.columnModel;\n        this.dataTypeService = beans.dataTypeService;\n        this.rowModel = beans.rowModel;\n        this.advancedFilterExpressionService = beans.advancedFilterExpressionService as AdvancedFilterExpressionService;\n    }\n\n    private enabled: boolean;\n    private ctrl: AdvancedFilterCtrl;\n\n    private expressionProxy: ExpressionProxy;\n    private appliedExpression: string | null = null;\n    /** The value displayed in the input, which may be invalid */\n    private expression: string | null = null;\n    private expressionFunction: FilterExpressionFunction | null;\n    private expressionParams: FilterExpressionFunctionParams | null;\n    private isValid: boolean = true;\n\n    public postConstruct(): void {\n        this.setEnabled(this.gos.get('enableAdvancedFilter'), true);\n\n        this.ctrl = this.createManagedBean(new AdvancedFilterCtrl(this.enabled));\n\n        this.expressionProxy = {\n            getValue: (colId, node) => {\n                const column = this.columnModel.getColDefCol(colId);\n                return column ? this.valueService.getValue(column, node, true) : undefined;\n            },\n        };\n\n        this.addManagedPropertyListener('enableAdvancedFilter', (event) => this.setEnabled(!!event.currentValue));\n        this.addManagedEventListeners({\n            newColumnsLoaded: (event) => this.onNewColumnsLoaded(event),\n        });\n        this.addManagedPropertyListener('includeHiddenColumnsInAdvancedFilter', () => this.updateValidity());\n    }\n\n    public isEnabled(): boolean {\n        return this.enabled;\n    }\n\n    public isFilterPresent(): boolean {\n        return !!this.expressionFunction;\n    }\n\n    public doesFilterPass(node: IRowNode): boolean {\n        return this.expressionFunction!(this.expressionProxy, node, this.expressionParams!);\n    }\n\n    public getModel(): AdvancedFilterModel | null {\n        const expressionParser = this.createExpressionParser(this.appliedExpression);\n        expressionParser?.parseExpression();\n        return expressionParser?.getModel() ?? null;\n    }\n\n    public setModel(model: AdvancedFilterModel | null): void {\n        const parseModel = (model: AdvancedFilterModel, isFirstParent?: boolean): string | null => {\n            if (model.filterType === 'join') {\n                const operator = this.advancedFilterExpressionService.parseJoinOperator(model);\n                const expression = model.conditions\n                    .map((condition) => parseModel(condition))\n                    .filter((condition) => _exists(condition))\n                    .join(` ${operator} `);\n                return isFirstParent || model.conditions.length <= 1 ? expression : `(${expression})`;\n            } else {\n                return this.advancedFilterExpressionService.parseColumnFilterModel(model);\n            }\n        };\n\n        const expression = model ? parseModel(model, true) : null;\n\n        this.setExpressionDisplayValue(expression);\n        this.applyExpression();\n        this.ctrl.refreshComp();\n        this.ctrl.refreshBuilderComp();\n    }\n\n    public getExpressionDisplayValue(): string | null {\n        return this.expression;\n    }\n\n    public setExpressionDisplayValue(expression: string | null): void {\n        this.expression = expression;\n    }\n\n    public isCurrentExpressionApplied(): boolean {\n        return this.appliedExpression === this.expression;\n    }\n\n    public createExpressionParser(expression: string | null): FilterExpressionParser | null {\n        if (!expression) {\n            return null;\n        }\n\n        return new FilterExpressionParser({\n            expression,\n            columnModel: this.columnModel,\n            dataTypeService: this.dataTypeService,\n            valueService: this.valueService,\n            advancedFilterExpressionService: this.advancedFilterExpressionService,\n        });\n    }\n\n    public getDefaultExpression(updateEntry: AutocompleteEntry): {\n        updatedValue: string;\n        updatedPosition: number;\n    } {\n        const updatedValue = this.advancedFilterExpressionService.getColumnValue(updateEntry) + ' ';\n        return {\n            updatedValue,\n            updatedPosition: updatedValue.length,\n        };\n    }\n\n    public isHeaderActive(): boolean {\n        return !this.gos.get('advancedFilterParent');\n    }\n\n    public getCtrl(): AdvancedFilterCtrl {\n        return this.ctrl;\n    }\n\n    private setEnabled(enabled: boolean, silent?: boolean): void {\n        const previousValue = this.enabled;\n        const rowModelType = this.rowModel.getType();\n        const isValidRowModel = rowModelType === 'clientSide' || rowModelType === 'serverSide';\n        if (enabled && !rowModelType) {\n            _warnOnce('Advanced Filter is only supported with the Client-Side Row Model or Server-Side Row Model.');\n        }\n        this.enabled = enabled && isValidRowModel;\n        if (!silent && this.enabled !== previousValue) {\n            const event: WithoutGridCommon<AdvancedFilterEnabledChangedEvent> = {\n                type: 'advancedFilterEnabledChanged',\n                enabled: this.enabled,\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    public applyExpression(): void {\n        const expressionParser = this.createExpressionParser(this.expression);\n        expressionParser?.parseExpression();\n        this.applyExpressionFromParser(expressionParser);\n    }\n\n    private applyExpressionFromParser(expressionParser: FilterExpressionParser | null): void {\n        this.isValid = !expressionParser || expressionParser.isValid();\n        if (!expressionParser || !this.isValid) {\n            this.expressionFunction = null;\n            this.expressionParams = null;\n            this.appliedExpression = null;\n            return;\n        }\n\n        const { expressionFunction, params } = this.getFunction(expressionParser);\n\n        this.expressionFunction = expressionFunction;\n        this.expressionParams = params;\n        this.appliedExpression = this.expression;\n    }\n\n    private getFunction(expressionParser: FilterExpressionParser): {\n        expressionFunction: FilterExpressionFunction;\n        params: FilterExpressionFunctionParams;\n    } {\n        if (this.gos.get('suppressAdvancedFilterEval')) {\n            return expressionParser.getFunctionParsed();\n        } else {\n            const { functionString, params } = expressionParser.getFunctionString();\n            return {\n                expressionFunction: new Function(\n                    'expressionProxy',\n                    'node',\n                    'params',\n                    functionString\n                ) as FilterExpressionFunction,\n                params,\n            };\n        }\n    }\n\n    public updateValidity(): boolean {\n        this.advancedFilterExpressionService.resetColumnCaches();\n        const expressionParser = this.createExpressionParser(this.expression);\n        expressionParser?.parseExpression();\n        const isValid = !expressionParser || expressionParser.isValid();\n\n        const updatedValidity = isValid !== this.isValid;\n\n        this.applyExpressionFromParser(expressionParser);\n        this.ctrl.refreshComp();\n        this.ctrl.refreshBuilderComp();\n        return updatedValidity;\n    }\n\n    private onNewColumnsLoaded(event: NewColumnsLoadedEvent): void {\n        if (event.source !== 'gridInitializing' || !this.dataTypeService?.isPendingInference()) {\n            return;\n        }\n\n        this.ctrl.setInputDisabled(true);\n        const [destroyFunc] = this.addManagedEventListeners({\n            dataTypesInferred: () => {\n                destroyFunc?.();\n                this.ctrl.setInputDisabled(false);\n            },\n        });\n    }\n}\n", "import type {\n    AdvancedFilterBuilderVisibleChangedEvent,\n    BeanCollection,\n    CtrlsService,\n    Environment,\n    IAdvancedFilterCtrl,\n    PopupService,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { BeanStub, _getAbsoluteHeight, _getAbsoluteWidth, _removeFromParent } from '@ag-grid-community/core';\nimport { AgDialog } from '@ag-grid-enterprise/core';\n\nimport { AdvancedFilterComp } from './advancedFilterComp';\nimport type { AdvancedFilterExpressionService } from './advancedFilterExpressionService';\nimport { AdvancedFilterHeaderComp } from './advancedFilterHeaderComp';\nimport { AdvancedFilterBuilderComp } from './builder/advancedFilterBuilderComp';\n\nexport type AdvancedFilterCtrlEvent = 'advancedFilterBuilderClosed';\nexport class AdvancedFilterCtrl extends BeanStub<AdvancedFilterCtrlEvent> implements IAdvancedFilterCtrl {\n    private ctrlsService: CtrlsService;\n    private popupService: PopupService;\n    private advancedFilterExpressionService: AdvancedFilterExpressionService;\n    private environment: Environment;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.ctrlsService = beans.ctrlsService;\n        this.popupService = beans.popupService;\n        this.advancedFilterExpressionService = beans.advancedFilterExpressionService as AdvancedFilterExpressionService;\n        this.environment = beans.environment;\n    }\n\n    private eHeaderComp: AdvancedFilterHeaderComp | undefined;\n    private eFilterComp: AdvancedFilterComp | undefined;\n    private hasAdvancedFilterParent: boolean;\n    private eBuilderComp: AdvancedFilterBuilderComp | undefined;\n    private eBuilderDialog: AgDialog | undefined;\n    private builderDestroySource?: 'api' | 'ui';\n\n    constructor(private enabled: boolean) {\n        super();\n    }\n\n    public postConstruct(): void {\n        this.hasAdvancedFilterParent = !!this.gos.get('advancedFilterParent');\n\n        this.ctrlsService.whenReady(() => this.setAdvancedFilterComp());\n\n        this.addManagedEventListeners({\n            advancedFilterEnabledChanged: ({ enabled }) => this.onEnabledChanged(enabled),\n        });\n\n        this.addManagedPropertyListener('advancedFilterParent', () => this.updateComps());\n\n        this.addDestroyFunc(() => {\n            this.destroyAdvancedFilterComp();\n            this.destroyBean(this.eBuilderComp);\n            if (this.eBuilderDialog && this.eBuilderDialog.isAlive()) {\n                this.destroyBean(this.eBuilderDialog);\n            }\n        });\n    }\n\n    public setupHeaderComp(eCompToInsertBefore: HTMLElement): void {\n        this.eHeaderComp = this.createManagedBean(\n            new AdvancedFilterHeaderComp(this.enabled && !this.hasAdvancedFilterParent)\n        );\n        eCompToInsertBefore.insertAdjacentElement('beforebegin', this.eHeaderComp.getGui());\n    }\n\n    public focusHeaderComp(): boolean {\n        if (this.eHeaderComp) {\n            this.eHeaderComp.getFocusableElement().focus();\n            return true;\n        }\n        return false;\n    }\n\n    public refreshComp(): void {\n        this.eFilterComp?.refresh();\n        this.eHeaderComp?.refresh();\n    }\n\n    public refreshBuilderComp(): void {\n        this.eBuilderComp?.refresh();\n    }\n\n    public getHeaderHeight(): number {\n        return this.eHeaderComp?.getHeight() ?? 0;\n    }\n\n    public setInputDisabled(disabled: boolean): void {\n        this.eFilterComp?.setInputDisabled(disabled);\n        this.eHeaderComp?.setInputDisabled(disabled);\n    }\n\n    public toggleFilterBuilder(source: 'api' | 'ui', force?: boolean): void {\n        if ((force && this.eBuilderDialog) || (force === false && !this.eBuilderDialog)) {\n            // state requested is already active\n            return;\n        }\n        if (this.eBuilderDialog) {\n            this.builderDestroySource = source;\n            this.destroyBean(this.eBuilderDialog);\n            return;\n        }\n\n        this.setInputDisabled(true);\n\n        const { width, height, minWidth } = this.getBuilderDialogSize();\n\n        this.eBuilderComp = this.createBean(new AdvancedFilterBuilderComp());\n        this.eBuilderDialog = this.createBean(\n            new AgDialog({\n                title: this.advancedFilterExpressionService.translate('advancedFilterBuilderTitle'),\n                component: this.eBuilderComp,\n                width,\n                height,\n                resizable: true,\n                movable: true,\n                maximizable: true,\n                centered: true,\n                closable: true,\n                minWidth,\n                afterGuiAttached: () => this.eBuilderComp?.afterGuiAttached(),\n            })\n        );\n\n        this.dispatchFilterBuilderVisibleChangedEvent(source, true);\n\n        this.eBuilderDialog.addEventListener('destroyed', () => {\n            this.destroyBean(this.eBuilderComp);\n            this.eBuilderComp = undefined;\n            this.eBuilderDialog = undefined;\n            this.setInputDisabled(false);\n            this.dispatchLocalEvent({\n                type: 'advancedFilterBuilderClosed',\n            });\n            this.dispatchFilterBuilderVisibleChangedEvent(this.builderDestroySource ?? 'ui', false);\n            this.builderDestroySource = undefined;\n        });\n    }\n\n    private dispatchFilterBuilderVisibleChangedEvent(source: 'api' | 'ui', visible: boolean): void {\n        const event: WithoutGridCommon<AdvancedFilterBuilderVisibleChangedEvent> = {\n            type: 'advancedFilterBuilderVisibleChanged',\n            source,\n            visible,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private getBuilderDialogSize(): { width: number; height: number; minWidth: number } {\n        const minWidth = this.gos.get('advancedFilterBuilderParams')?.minWidth ?? 500;\n        const popupParent = this.popupService.getPopupParent();\n        const maxWidth = Math.round(_getAbsoluteWidth(popupParent)) - 2; // assume 1 pixel border\n        const maxHeight = Math.round(_getAbsoluteHeight(popupParent) * 0.75) - 2;\n\n        const width = Math.min(Math.max(600, minWidth), maxWidth);\n        const height = Math.min(600, maxHeight);\n\n        return { width, height, minWidth };\n    }\n\n    private onEnabledChanged(enabled: boolean): void {\n        this.enabled = enabled;\n        this.updateComps();\n    }\n\n    private updateComps(): void {\n        this.setAdvancedFilterComp();\n        this.setHeaderCompEnabled();\n        this.eventService.dispatchEvent({\n            type: 'headerHeightChanged',\n        });\n    }\n\n    private setAdvancedFilterComp(): void {\n        this.destroyAdvancedFilterComp();\n        if (!this.enabled) {\n            return;\n        }\n\n        const advancedFilterParent = this.gos.get('advancedFilterParent');\n        this.hasAdvancedFilterParent = !!advancedFilterParent;\n        if (advancedFilterParent) {\n            // unmanaged as can be recreated\n            const eAdvancedFilterComp = this.createBean(new AdvancedFilterComp());\n            const eAdvancedFilterCompGui = eAdvancedFilterComp.getGui();\n\n            this.environment.applyThemeClasses(eAdvancedFilterCompGui);\n\n            eAdvancedFilterCompGui.classList.add(this.gos.get('enableRtl') ? 'ag-rtl' : 'ag-ltr');\n\n            advancedFilterParent.appendChild(eAdvancedFilterCompGui);\n\n            this.eFilterComp = eAdvancedFilterComp;\n        }\n    }\n\n    private setHeaderCompEnabled(): void {\n        this.eHeaderComp?.setEnabled(this.enabled && !this.hasAdvancedFilterParent);\n    }\n\n    private destroyAdvancedFilterComp(): void {\n        if (this.eFilterComp) {\n            _removeFromParent(this.eFilterComp.getGui());\n            this.destroyBean(this.eFilterComp);\n        }\n    }\n}\n", "import type { BeanCollection, FilterManager, ITooltipParams, WithoutGridCommon } from '@ag-grid-community/core';\nimport { Component, RefPlaceholder, _createIconNoSpan, _makeNull, _setDisabled } from '@ag-grid-community/core';\n\nimport type { AdvancedFilterExpressionService } from './advancedFilterExpressionService';\nimport type { AdvancedFilterService } from './advancedFilterService';\nimport type {\n    AgAutocomplete,\n    AutocompleteOptionSelectedEvent,\n    AutocompleteValidChangedEvent,\n    AutocompleteValueChangedEvent,\n    AutocompleteValueConfirmedEvent,\n} from './autocomplete/agAutocomplete';\nimport { AgAutocompleteSelector } from './autocomplete/agAutocomplete';\nimport type { AutocompleteEntry, AutocompleteListParams } from './autocomplete/autocompleteParams';\nimport type { FilterExpressionParser } from './filterExpressionParser';\nimport type { AutocompleteUpdate } from './filterExpressionUtils';\n\nexport class AdvancedFilterComp extends Component {\n    private advancedFilterService: AdvancedFilterService;\n    private advancedFilterExpressionService: AdvancedFilterExpressionService;\n    private filterManager?: FilterManager;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.advancedFilterExpressionService = beans.advancedFilterExpressionService as AdvancedFilterExpressionService;\n        this.advancedFilterService = beans.advancedFilterService as AdvancedFilterService;\n        this.filterManager = beans.filterManager;\n    }\n\n    private readonly eAutocomplete: AgAutocomplete = RefPlaceholder;\n    private readonly eApplyFilterButton: HTMLElement = RefPlaceholder;\n    private readonly eBuilderFilterButton: HTMLElement = RefPlaceholder;\n    private readonly eBuilderFilterButtonIcon: HTMLElement = RefPlaceholder;\n    private readonly eBuilderFilterButtonLabel: HTMLElement = RefPlaceholder;\n\n    private expressionParser: FilterExpressionParser | null = null;\n    private isApplyDisabled = true;\n    private builderOpen = false;\n\n    constructor() {\n        super(\n            /* html */ `\n            <div class=\"ag-advanced-filter\" role=\"presentation\" tabindex=\"-1\">\n                <ag-autocomplete data-ref=\"eAutocomplete\"></ag-autocomplete>\n                <button class=\"ag-button ag-standard-button ag-advanced-filter-apply-button\" data-ref=\"eApplyFilterButton\"></button>\n                <button class=\"ag-advanced-filter-builder-button\" data-ref=\"eBuilderFilterButton\">\n                    <span data-ref=\"eBuilderFilterButtonIcon\" aria-hidden=\"true\"></span>\n                    <span class=\"ag-advanced-filter-builder-button-label\" data-ref=\"eBuilderFilterButtonLabel\"></span>\n                </button>\n            </div>`,\n            [AgAutocompleteSelector]\n        );\n    }\n\n    public postConstruct(): void {\n        this.eAutocomplete\n            .setListGenerator((_value, position) => this.generateAutocompleteListParams(position))\n            .setValidator(() => this.validateValue())\n            .setForceLastSelection((lastSelection, searchString) =>\n                this.forceLastSelection(lastSelection, searchString)\n            )\n            .setInputAriaLabel(this.advancedFilterExpressionService.translate('ariaAdvancedFilterInput'))\n            .setListAriaLabel(this.advancedFilterExpressionService.translate('ariaLabelAdvancedFilterAutocomplete'));\n\n        this.refresh();\n\n        this.addManagedListeners(this.eAutocomplete, {\n            eventValueChanged: ({ value }: AutocompleteValueChangedEvent) => this.onValueChanged(value),\n            eventValueConfirmed: ({ isValid }: AutocompleteValueConfirmedEvent) => this.onValueConfirmed(isValid),\n            eventOptionSelected: ({ position, updateEntry, autocompleteType }: AutocompleteOptionSelectedEvent) =>\n                this.onOptionSelected(position, updateEntry, autocompleteType),\n            eventValidChanged: ({ isValid, validationMessage }: AutocompleteValidChangedEvent) =>\n                this.onValidChanged(isValid, validationMessage),\n        });\n\n        this.setupApplyButton();\n        this.setupBuilderButton();\n    }\n\n    public refresh(): void {\n        const expression = this.advancedFilterService.getExpressionDisplayValue();\n        this.eAutocomplete.setValue({\n            value: expression ?? '',\n            position: expression?.length,\n            updateListOnlyIfOpen: true,\n        });\n    }\n\n    public setInputDisabled(disabled: boolean): void {\n        this.eAutocomplete.setInputDisabled(disabled);\n        _setDisabled(this.eApplyFilterButton, disabled || this.isApplyDisabled);\n    }\n\n    public override getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        const res = super.getTooltipParams();\n        res.location = 'advancedFilter';\n        return res;\n    }\n\n    private setupApplyButton(): void {\n        this.eApplyFilterButton.innerText = this.advancedFilterExpressionService.translate('advancedFilterApply');\n        this.activateTabIndex([this.eApplyFilterButton]);\n        this.addManagedElementListeners(this.eApplyFilterButton, {\n            click: () => this.onValueConfirmed(this.eAutocomplete.isValid()),\n        });\n        _setDisabled(this.eApplyFilterButton, this.isApplyDisabled);\n    }\n\n    private setupBuilderButton(): void {\n        this.eBuilderFilterButtonIcon.appendChild(_createIconNoSpan('advancedFilterBuilder', this.gos)!);\n        this.eBuilderFilterButtonLabel.innerText =\n            this.advancedFilterExpressionService.translate('advancedFilterBuilder');\n        this.activateTabIndex([this.eBuilderFilterButton]);\n        this.addManagedElementListeners(this.eBuilderFilterButton, { click: () => this.openBuilder() });\n        this.addManagedListeners(this.advancedFilterService.getCtrl(), {\n            advancedFilterBuilderClosed: () => this.closeBuilder(),\n        });\n    }\n\n    private onValueChanged(value: string | null): void {\n        value = _makeNull(value);\n        this.advancedFilterService.setExpressionDisplayValue(value);\n        this.expressionParser = this.advancedFilterService.createExpressionParser(value);\n        const updatedExpression = this.expressionParser?.parseExpression();\n        if (updatedExpression && updatedExpression !== value) {\n            this.eAutocomplete.setValue({ value: updatedExpression, silent: true, restoreFocus: true });\n        }\n    }\n\n    private onValueConfirmed(isValid: boolean): void {\n        if (!isValid || this.isApplyDisabled) {\n            return;\n        }\n        _setDisabled(this.eApplyFilterButton, true);\n        this.advancedFilterService.applyExpression();\n        this.filterManager?.onFilterChanged({ source: 'advancedFilter' });\n    }\n\n    private onOptionSelected(position: number, updateEntry: AutocompleteEntry, type?: string): void {\n        const { updatedValue, updatedPosition, hideAutocomplete } = this.updateExpression(position, updateEntry, type);\n        this.eAutocomplete.setValue({\n            value: updatedValue,\n            position: updatedPosition,\n            updateListOnlyIfOpen: hideAutocomplete,\n            restoreFocus: true,\n        });\n    }\n\n    private validateValue(): string | null {\n        return this.expressionParser?.isValid() ? null : this.expressionParser?.getValidationMessage() ?? null;\n    }\n\n    private onValidChanged(isValid: boolean, validationMessage: string | null): void {\n        this.isApplyDisabled = !isValid || this.advancedFilterService.isCurrentExpressionApplied();\n        _setDisabled(this.eApplyFilterButton, this.isApplyDisabled);\n        this.setTooltip({\n            newTooltipText: validationMessage,\n            showDelayOverride: 1000,\n        });\n    }\n\n    private generateAutocompleteListParams(position: number): AutocompleteListParams {\n        return this.expressionParser\n            ? this.expressionParser.getAutocompleteListParams(position)\n            : this.advancedFilterExpressionService.getDefaultAutocompleteListParams('');\n    }\n\n    private updateExpression(position: number, updateEntry: AutocompleteEntry, type?: string): AutocompleteUpdate {\n        this.advancedFilterExpressionService.updateAutocompleteCache(updateEntry, type);\n        return (\n            this.expressionParser?.updateExpression(position, updateEntry, type) ??\n            this.advancedFilterService.getDefaultExpression(updateEntry)\n        );\n    }\n\n    private forceLastSelection({ key, displayValue }: AutocompleteEntry, searchString: string): boolean {\n        return !!searchString.toLocaleLowerCase().match(`^${(displayValue ?? key).toLocaleLowerCase()}\\\\s*$`);\n    }\n\n    private openBuilder(): void {\n        if (this.builderOpen) {\n            return;\n        }\n        this.builderOpen = true;\n        _setDisabled(this.eBuilderFilterButton, true);\n        this.advancedFilterService.getCtrl().toggleFilterBuilder('ui');\n    }\n\n    private closeBuilder(): void {\n        if (!this.builderOpen) {\n            return;\n        }\n        this.builderOpen = false;\n        _setDisabled(this.eBuilderFilterButton, false);\n        this.eBuilderFilterButton.focus();\n    }\n}\n", "import type {\n    AgEvent,\n    AgInputTextField,\n    BeanCollection,\n    ComponentSelector,\n    PopupPositionParams,\n    PopupService,\n} from '@ag-grid-community/core';\nimport { AgInputTextFieldSelector, Component, KeyCode, RefPlaceholder, _makeNull } from '@ag-grid-community/core';\n\nimport { AgAutocompleteList } from './agAutocompleteList';\nimport type { AutocompleteEntry, AutocompleteListParams } from './autocompleteParams';\n\ninterface AutoCompleteEvent<T extends AgAutocompleteEvent> extends AgEvent<T> {\n    value: string | null;\n}\n\nexport interface AutocompleteValueChangedEvent extends AutoCompleteEvent<'eventValueChanged'> {}\n\nexport interface AutocompleteValueConfirmedEvent extends AutoCompleteEvent<'eventValueConfirmed'> {\n    isValid: boolean;\n}\n\nexport interface AutocompleteOptionSelectedEvent extends AutoCompleteEvent<'eventOptionSelected'> {\n    position: number;\n    updateEntry: AutocompleteEntry;\n    autocompleteType?: string;\n}\n\nexport interface AutocompleteValidChangedEvent extends AgEvent<'eventValidChanged'> {\n    isValid: boolean;\n    validationMessage: string | null;\n}\n\nexport type AgAutocompleteEvent =\n    | 'eventValueChanged'\n    | 'eventValueConfirmed'\n    | 'eventOptionSelected'\n    | 'eventValidChanged';\nexport class AgAutocomplete extends Component<AgAutocompleteEvent> {\n    private popupService: PopupService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.popupService = beans.popupService;\n    }\n\n    private eAutocompleteInput: AgInputTextField = RefPlaceholder;\n\n    private isListOpen = false;\n    private autocompleteList: AgAutocompleteList | null;\n    private hidePopup: () => void;\n    private autocompleteListParams: AutocompleteListParams;\n    private lastPosition: number = 0;\n    private valid: boolean = true;\n    private validationMessage: string | null;\n    private listAriaLabel: string;\n    private listGenerator?: (value: string | null, position: number) => AutocompleteListParams;\n    private validator?: (value: string | null) => string | null;\n    private forceLastSelection?: (lastSelection: AutocompleteEntry, searchString: string) => boolean;\n\n    constructor() {\n        super(\n            /* html */ `\n            <div class=\"ag-autocomplete\" role=\"presentation\">\n                <ag-input-text-field data-ref=\"eAutocompleteInput\"></ag-input-text-field>\n            </div>`,\n            [AgInputTextFieldSelector]\n        );\n    }\n\n    public postConstruct(): void {\n        this.eAutocompleteInput.onValueChange((value) => this.onValueChanged(value));\n        this.eAutocompleteInput.getInputElement().setAttribute('autocomplete', 'off');\n\n        this.addGuiEventListener('keydown', this.onKeyDown.bind(this));\n\n        this.addGuiEventListener('click', this.updatePositionAndList.bind(this));\n\n        this.addDestroyFunc(() => {\n            this.destroyBean(this.autocompleteList);\n        });\n\n        this.addGuiEventListener('focusout', () => this.onFocusOut());\n    }\n\n    private onValueChanged(value?: string | null): void {\n        const parsedValue = _makeNull(value);\n        this.updateValue(parsedValue);\n        this.updateAutocompleteList(parsedValue);\n    }\n\n    private updateValue(value: string | null): void {\n        this.updateLastPosition();\n        this.dispatchLocalEvent<AutocompleteValueChangedEvent>({\n            type: 'eventValueChanged',\n            value,\n        });\n        this.validate(value);\n    }\n\n    private updateAutocompleteList(value: string | null): void {\n        const autocompleteListParams = this.listGenerator?.(value, this.lastPosition) ?? { enabled: false };\n        if (!autocompleteListParams.type || autocompleteListParams.type !== this.autocompleteListParams?.type) {\n            if (this.isListOpen) {\n                this.closeList();\n            }\n        }\n        this.autocompleteListParams = autocompleteListParams;\n        if (this.autocompleteListParams?.enabled) {\n            if (!this.isListOpen) {\n                this.openList();\n            }\n            const { searchString } = this.autocompleteListParams;\n            this.autocompleteList!.setSearch(searchString ?? '');\n        } else {\n            if (this.isListOpen) {\n                this.closeList();\n            }\n        }\n    }\n\n    private onKeyDown(event: KeyboardEvent): void {\n        const key = event.key;\n\n        this.updateLastPosition();\n\n        switch (key) {\n            case KeyCode.ENTER:\n                this.onEnterKeyDown(event);\n                break;\n            case KeyCode.TAB:\n                this.onTabKeyDown(event);\n                break;\n            case KeyCode.DOWN:\n            case KeyCode.UP:\n                this.onUpDownKeyDown(event, key);\n                break;\n            case KeyCode.LEFT:\n            case KeyCode.RIGHT:\n            case KeyCode.PAGE_HOME:\n            case KeyCode.PAGE_END:\n                // input position is updated after this is called, so do async\n                setTimeout(() => {\n                    this.updatePositionAndList();\n                });\n                break;\n            case KeyCode.ESCAPE:\n                this.onEscapeKeyDown(event);\n                break;\n            case KeyCode.SPACE:\n                if (event.ctrlKey && !this.isListOpen) {\n                    event.preventDefault();\n                    this.forceOpenList();\n                }\n                break;\n        }\n    }\n\n    private confirmSelection(): void {\n        const selectedValue = this.autocompleteList?.getSelectedValue();\n        if (selectedValue) {\n            this.closeList();\n            this.dispatchLocalEvent<AutocompleteOptionSelectedEvent>({\n                type: 'eventOptionSelected',\n                value: this.getValue()!,\n                position: this.lastPosition,\n                updateEntry: selectedValue,\n                autocompleteType: this.autocompleteListParams.type,\n            });\n        }\n    }\n\n    private onTabKeyDown(event: KeyboardEvent): void {\n        if (this.isListOpen) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.confirmSelection();\n        }\n    }\n\n    private onEnterKeyDown(event: KeyboardEvent): void {\n        event.preventDefault();\n        if (this.isListOpen) {\n            this.confirmSelection();\n        } else {\n            this.onCompleted();\n        }\n    }\n\n    private onUpDownKeyDown(event: KeyboardEvent, key: string): void {\n        event.preventDefault();\n        if (!this.isListOpen) {\n            this.forceOpenList();\n        } else {\n            this.autocompleteList?.onNavigationKeyDown(event, key);\n        }\n    }\n\n    private onEscapeKeyDown(event: KeyboardEvent): void {\n        if (this.isListOpen) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.closeList();\n            this.setCaret(this.lastPosition, true);\n        }\n    }\n\n    private onFocusOut(): void {\n        if (this.isListOpen) {\n            this.closeList();\n        }\n    }\n\n    private updatePositionAndList(): void {\n        this.updateLastPosition();\n        this.updateAutocompleteList(this.eAutocompleteInput.getValue() ?? null);\n    }\n\n    private setCaret(position: number, setFocus?: boolean): void {\n        const eDocument = this.gos.getDocument();\n        const activeEl = this.gos.getActiveDomElement();\n        if (setFocus && (!activeEl || activeEl === eDocument.body)) {\n            // clicking on the list loses focus, so restore\n            this.eAutocompleteInput.getFocusableElement().focus();\n        }\n        const eInput = this.eAutocompleteInput.getInputElement();\n        eInput.setSelectionRange(position, position);\n        if (position === eInput.value.length) {\n            // ensure the caret is visible\n            eInput.scrollLeft = eInput.scrollWidth;\n        }\n    }\n\n    private forceOpenList(): void {\n        this.onValueChanged(this.eAutocompleteInput.getValue());\n    }\n\n    private updateLastPosition(): void {\n        this.lastPosition = this.eAutocompleteInput.getInputElement().selectionStart ?? 0;\n    }\n\n    private validate(value: string | null): void {\n        if (!this.validator) {\n            return;\n        }\n        this.validationMessage = this.validator(value);\n        this.eAutocompleteInput.getInputElement().setCustomValidity(this.validationMessage ?? '');\n        this.valid = !this.validationMessage;\n        this.dispatchLocalEvent<AutocompleteValidChangedEvent>({\n            type: 'eventValidChanged',\n            isValid: this.valid,\n            validationMessage: this.validationMessage,\n        });\n    }\n\n    private openList(): void {\n        this.isListOpen = true;\n        // this is unmanaged as it gets destroyed/created each time it is opened\n        this.autocompleteList = this.createBean(\n            new AgAutocompleteList({\n                autocompleteEntries: this.autocompleteListParams.entries!,\n                onConfirmed: () => this.confirmSelection(),\n                forceLastSelection: this.forceLastSelection,\n            })\n        );\n        const ePopupGui = this.autocompleteList.getGui();\n\n        const positionParams: PopupPositionParams & { type: string; eventSource: HTMLElement } = {\n            ePopup: ePopupGui,\n            type: 'autocomplete',\n            eventSource: this.getGui(),\n            position: 'under',\n            alignSide: this.gos.get('enableRtl') ? 'right' : 'left',\n            keepWithinBounds: true,\n        };\n\n        const addPopupRes = this.popupService.addPopup({\n            eChild: ePopupGui,\n            anchorToElement: this.getGui(),\n            positionCallback: () => this.popupService.positionPopupByComponent(positionParams),\n            ariaLabel: this.listAriaLabel,\n        });\n        this.hidePopup = addPopupRes.hideFunc;\n\n        this.autocompleteList.afterGuiAttached();\n    }\n\n    private closeList(): void {\n        this.isListOpen = false;\n        this.hidePopup();\n        this.destroyBean(this.autocompleteList);\n        this.autocompleteList = null;\n    }\n\n    private onCompleted(): void {\n        if (this.isListOpen) {\n            this.closeList();\n        }\n        this.dispatchLocalEvent<AutocompleteValueConfirmedEvent>({\n            type: 'eventValueConfirmed',\n            value: this.getValue(),\n            isValid: this.isValid(),\n        });\n    }\n\n    public getValue(): string | null {\n        return _makeNull(this.eAutocompleteInput.getValue());\n    }\n\n    public setInputPlaceholder(placeholder: string): this {\n        this.eAutocompleteInput.setInputPlaceholder(placeholder);\n        return this;\n    }\n\n    public setInputAriaLabel(label?: string | null): this {\n        this.eAutocompleteInput.setInputAriaLabel(label);\n        return this;\n    }\n\n    public setListAriaLabel(label: string): this {\n        this.listAriaLabel = label;\n        return this;\n    }\n\n    public setListGenerator(listGenerator?: (value: string | null, position: number) => AutocompleteListParams): this {\n        this.listGenerator = listGenerator;\n        return this;\n    }\n\n    public setValidator(validator?: (value: string | null) => string | null): this {\n        this.validator = validator;\n        return this;\n    }\n\n    public isValid(): boolean {\n        return this.valid;\n    }\n\n    public setValue(params: {\n        value: string;\n        position?: number;\n        silent?: boolean;\n        updateListOnlyIfOpen?: boolean;\n        restoreFocus?: boolean;\n    }): void {\n        const { value, position, silent, updateListOnlyIfOpen, restoreFocus } = params;\n        this.eAutocompleteInput.setValue(value, true);\n        this.setCaret(position ?? this.lastPosition, restoreFocus);\n        if (!silent) {\n            this.updateValue(value);\n        }\n        if (!updateListOnlyIfOpen || this.isListOpen) {\n            this.updateAutocompleteList(value);\n        }\n    }\n\n    public setForceLastSelection(\n        forceLastSelection?: (lastSelection: AutocompleteEntry, searchString: string) => boolean\n    ): this {\n        this.forceLastSelection = forceLastSelection;\n        return this;\n    }\n\n    public setInputDisabled(disabled: boolean): this {\n        this.eAutocompleteInput.setDisabled(disabled);\n        return this;\n    }\n}\n\nexport const AgAutocompleteSelector: ComponentSelector = {\n    selector: 'AG-AUTOCOMPLETE',\n    component: AgAutocomplete,\n};\n", "import type { Component } from '@ag-grid-community/core';\nimport { KeyCode, PopupComponent, RefPlaceholder, _exists, _fuzzySuggestions } from '@ag-grid-community/core';\nimport { VirtualList } from '@ag-grid-enterprise/core';\n\nimport { AgAutocompleteRow } from './agAutocompleteRow';\nimport type { AutocompleteEntry } from './autocompleteParams';\n\nexport class AgAutocompleteList extends PopupComponent {\n    private readonly eList: HTMLElement = RefPlaceholder;\n\n    private virtualList: VirtualList<any>;\n\n    private autocompleteEntries: AutocompleteEntry[];\n\n    // as the user moves the mouse, the selectedValue changes\n    private selectedValue: AutocompleteEntry;\n\n    private searchString = '';\n\n    constructor(\n        private params: {\n            autocompleteEntries: AutocompleteEntry[];\n            onConfirmed: () => void;\n            useFuzzySearch?: boolean;\n            forceLastSelection?: (lastSelection: AutocompleteEntry, searchString: string) => boolean;\n        }\n    ) {\n        super(/* html */ `<div class=\"ag-autocomplete-list-popup\">\n            <div data-ref=\"eList\" class=\"ag-autocomplete-list\"></div>\n        <div>`);\n    }\n\n    public override destroy(): void {\n        super.destroy();\n    }\n\n    public postConstruct(): void {\n        this.autocompleteEntries = this.params.autocompleteEntries;\n        this.virtualList = this.createManagedBean(new VirtualList({ cssIdentifier: 'autocomplete' }));\n        this.virtualList.setComponentCreator(this.createRowComponent.bind(this));\n        this.eList.appendChild(this.virtualList.getGui());\n\n        this.virtualList.setModel({\n            getRowCount: () => this.autocompleteEntries.length,\n            getRow: (index: number) => this.autocompleteEntries[index],\n        });\n\n        const virtualListGui = this.virtualList.getGui();\n\n        this.addManagedListeners(virtualListGui, {\n            click: () => this.params.onConfirmed(),\n            mousemove: this.onMouseMove.bind(this),\n            mousedown: (e) => e.preventDefault(),\n        });\n\n        this.setSelectedValue(0);\n    }\n\n    public onNavigationKeyDown(event: any, key: string): void {\n        // if we don't preventDefault the page body and/or grid scroll will move.\n        event.preventDefault();\n        const oldIndex = this.autocompleteEntries.indexOf(this.selectedValue);\n        const newIndex = key === KeyCode.UP ? oldIndex - 1 : oldIndex + 1;\n\n        this.checkSetSelectedValue(newIndex);\n    }\n\n    public setSearch(searchString: string): void {\n        this.searchString = searchString;\n        if (_exists(searchString)) {\n            this.runSearch();\n        } else {\n            // reset\n            this.autocompleteEntries = this.params.autocompleteEntries;\n            this.virtualList.refresh();\n            this.checkSetSelectedValue(0);\n        }\n        this.updateSearchInList();\n    }\n\n    private runContainsSearch(\n        searchString: string,\n        searchStrings: string[]\n    ): { topMatch: string | undefined; allMatches: string[] } {\n        let topMatch: string | undefined;\n        let topMatchStartsWithSearchString = false;\n        const lowerCaseSearchString = searchString.toLocaleLowerCase();\n        const allMatches = searchStrings.filter((string) => {\n            const lowerCaseString = string.toLocaleLowerCase();\n            const index = lowerCaseString.indexOf(lowerCaseSearchString);\n            const startsWithSearchString = index === 0;\n            const isMatch = index >= 0;\n            // top match is shortest value that starts with the search string, otherwise shortest value that includes the search string\n            if (\n                isMatch &&\n                (!topMatch ||\n                    (!topMatchStartsWithSearchString && startsWithSearchString) ||\n                    (topMatchStartsWithSearchString === startsWithSearchString && string.length < topMatch.length))\n            ) {\n                topMatch = string;\n                topMatchStartsWithSearchString = startsWithSearchString;\n            }\n            return isMatch;\n        });\n        if (!topMatch && allMatches.length) {\n            topMatch = allMatches[0];\n        }\n        return { topMatch, allMatches };\n    }\n\n    private runSearch() {\n        const { autocompleteEntries } = this.params;\n        const searchStrings = autocompleteEntries.map((v) => v.displayValue ?? v.key);\n\n        let matchingStrings: string[];\n        let topSuggestion: string | undefined;\n        if (this.params.useFuzzySearch) {\n            matchingStrings = _fuzzySuggestions(this.searchString, searchStrings, true).values;\n            topSuggestion = matchingStrings.length ? matchingStrings[0] : undefined;\n        } else {\n            const containsMatches = this.runContainsSearch(this.searchString, searchStrings);\n            matchingStrings = containsMatches.allMatches;\n            topSuggestion = containsMatches.topMatch;\n        }\n\n        let filteredEntries = autocompleteEntries.filter(({ key, displayValue }) =>\n            matchingStrings.includes(displayValue ?? key)\n        );\n        if (\n            !filteredEntries.length &&\n            this.selectedValue &&\n            this.params?.forceLastSelection?.(this.selectedValue, this.searchString)\n        ) {\n            filteredEntries = [this.selectedValue];\n        }\n        this.autocompleteEntries = filteredEntries;\n        this.virtualList.refresh();\n\n        if (!topSuggestion) {\n            return;\n        }\n\n        const topSuggestionIndex = matchingStrings.indexOf(topSuggestion);\n\n        this.checkSetSelectedValue(topSuggestionIndex);\n    }\n\n    private updateSearchInList(): void {\n        this.virtualList.forEachRenderedRow((row: AgAutocompleteRow) => row.setSearchString(this.searchString));\n    }\n\n    private checkSetSelectedValue(index: number): void {\n        if (index >= 0 && index < this.autocompleteEntries.length) {\n            this.setSelectedValue(index);\n        }\n    }\n\n    private setSelectedValue(index: number): void {\n        const value = this.autocompleteEntries[index];\n\n        if (this.selectedValue === value) {\n            return;\n        }\n\n        this.selectedValue = value;\n        this.virtualList.ensureIndexVisible(index);\n\n        this.virtualList.forEachRenderedRow((cmp: AgAutocompleteRow, idx: number) => {\n            cmp.updateSelected(index === idx);\n        });\n    }\n\n    private createRowComponent(value: AutocompleteEntry): Component {\n        const row = new AgAutocompleteRow();\n\n        this.createBean(row);\n        row.setState(value.displayValue ?? value.key, value === this.selectedValue);\n\n        return row;\n    }\n\n    private onMouseMove(mouseEvent: MouseEvent): void {\n        const rect = this.virtualList.getGui().getBoundingClientRect();\n        const scrollTop = this.virtualList.getScrollTop();\n        const mouseY = mouseEvent.clientY - rect.top + scrollTop;\n        const row = Math.floor(mouseY / this.virtualList.getRowHeight());\n\n        this.checkSetSelectedValue(row);\n    }\n\n    public afterGuiAttached(): void {\n        this.virtualList.refresh();\n    }\n\n    public getSelectedValue(): AutocompleteEntry | null {\n        if (!this.autocompleteEntries.length) {\n            return null;\n        }\n        return this.selectedValue ?? null;\n    }\n}\n", "import { Component, _escapeString, _exists } from '@ag-grid-community/core';\n\nexport class AgAutocompleteRow extends Component {\n    private value: string;\n    private hasHighlighting = false;\n\n    constructor() {\n        super(/* html */ `\n        <div class=\"ag-autocomplete-row\" role=\"presentation\">\n            <div class=\"ag-autocomplete-row-label\"></div>\n        </div>`);\n    }\n\n    public setState(value: string, selected: boolean): void {\n        this.value = value;\n\n        this.render();\n\n        this.updateSelected(selected);\n    }\n\n    public updateSelected(selected: boolean): void {\n        this.addOrRemoveCssClass('ag-autocomplete-row-selected', selected);\n    }\n\n    public setSearchString(searchString: string): void {\n        let keepHighlighting = false;\n        if (_exists(searchString)) {\n            const index = this.value?.toLocaleLowerCase().indexOf(searchString.toLocaleLowerCase());\n            if (index >= 0) {\n                keepHighlighting = true;\n                this.hasHighlighting = true;\n                const highlightEndIndex = index + searchString.length;\n                const startPart = _escapeString(this.value.slice(0, index));\n                const highlightedPart = _escapeString(this.value.slice(index, highlightEndIndex));\n                const endPart = _escapeString(this.value.slice(highlightEndIndex));\n                this.getGui().lastElementChild!.innerHTML = `${startPart}<b>${highlightedPart}</b>${endPart}`;\n            }\n        }\n        if (!keepHighlighting && this.hasHighlighting) {\n            this.hasHighlighting = false;\n            this.render();\n        }\n    }\n\n    private render() {\n        // putting in blank if missing, so at least the user can click on it\n        this.getGui().lastElementChild!.innerHTML = _escapeString(this.value) ?? '&nbsp;';\n    }\n}\n", "import type { BeanCollection, ColumnModel, FocusService, HeaderNavigationService } from '@ag-grid-community/core';\nimport {\n    Component,\n    KeyCode,\n    _clearElement,\n    _setAriaColIndex,\n    _setAriaColSpan,\n    _setAriaRole,\n    _setAriaRowIndex,\n    _setDisplayed,\n} from '@ag-grid-community/core';\n\nimport { AdvancedFilterComp } from './advancedFilterComp';\n\nexport class AdvancedFilterHeaderComp extends Component {\n    private columnModel: ColumnModel;\n    private focusService: FocusService;\n    private headerNavigationService: HeaderNavigationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.columnModel = beans.columnModel;\n        this.focusService = beans.focusService;\n        this.headerNavigationService = beans.headerNavigationService;\n    }\n\n    private eAdvancedFilter: AdvancedFilterComp | undefined;\n    private height: number;\n\n    constructor(private enabled: boolean) {\n        super(/* html */ `\n            <div class=\"ag-advanced-filter-header\" role=\"row\">\n            </div>`);\n    }\n\n    public postConstruct(): void {\n        this.setupAdvancedFilter(this.enabled);\n\n        this.addDestroyFunc(() => this.destroyBean(this.eAdvancedFilter));\n\n        const heightListener = () => {\n            if (this.enabled) {\n                this.setEnabledHeight();\n            }\n        };\n\n        this.addManagedEventListeners({\n            gridColumnsChanged: () => this.onGridColumnsChanged(),\n            columnHeaderHeightChanged: heightListener,\n            gridStylesChanged: heightListener,\n        });\n\n        this.addManagedPropertyListener('headerHeight', heightListener);\n        this.addManagedPropertyListener('floatingFiltersHeight', heightListener);\n\n        this.addGuiEventListener('keydown', (event: KeyboardEvent) => this.onKeyDown(event));\n\n        this.addGuiEventListener('focusout', (event: FocusEvent) => {\n            if (!this.getFocusableElement().contains(event.relatedTarget as HTMLElement)) {\n                this.focusService.clearAdvancedFilterColumn();\n            }\n        });\n    }\n\n    public override getFocusableElement(): HTMLElement {\n        return this.eAdvancedFilter?.getGui() ?? this.getGui();\n    }\n\n    public setEnabled(enabled: boolean): void {\n        if (enabled === this.enabled) {\n            return;\n        }\n        this.setupAdvancedFilter(enabled);\n    }\n\n    public refresh(): void {\n        this.eAdvancedFilter?.refresh();\n    }\n\n    public getHeight(): number {\n        return this.height;\n    }\n\n    public setInputDisabled(disabled: boolean): void {\n        this.eAdvancedFilter?.setInputDisabled(disabled);\n    }\n\n    private setupAdvancedFilter(enabled: boolean): void {\n        const eGui = this.getGui();\n        if (enabled) {\n            // unmanaged as can be recreated\n            this.eAdvancedFilter = this.createBean(new AdvancedFilterComp());\n            const eAdvancedFilterGui = this.eAdvancedFilter.getGui();\n            this.eAdvancedFilter.addCssClass('ag-advanced-filter-header-cell');\n\n            this.setEnabledHeight();\n\n            this.setAriaRowIndex();\n            _setAriaRole(eAdvancedFilterGui, 'gridcell');\n            _setAriaColIndex(eAdvancedFilterGui, 1);\n            this.setAriaColumnCount(eAdvancedFilterGui);\n\n            eGui.appendChild(eAdvancedFilterGui);\n        } else {\n            _clearElement(eGui);\n            this.destroyBean(this.eAdvancedFilter);\n            this.height = 0;\n        }\n        _setDisplayed(eGui, enabled);\n        this.enabled = enabled;\n    }\n\n    private setEnabledHeight(): void {\n        const eGui = this.getGui();\n        this.height = this.columnModel.getFloatingFiltersHeight();\n        const height = `${this.height}px`;\n        eGui.style.height = height;\n        eGui.style.minHeight = height;\n    }\n\n    private setAriaColumnCount(eAdvancedFilterGui: HTMLElement): void {\n        _setAriaColSpan(eAdvancedFilterGui, this.columnModel.getCols().length);\n    }\n\n    private setAriaRowIndex(): void {\n        _setAriaRowIndex(this.getGui(), this.headerNavigationService.getHeaderRowCount());\n    }\n\n    private onGridColumnsChanged(): void {\n        if (!this.eAdvancedFilter) {\n            return;\n        }\n        this.setAriaColumnCount(this.eAdvancedFilter.getGui());\n        this.setAriaRowIndex();\n    }\n\n    private onKeyDown(event: KeyboardEvent): void {\n        switch (event.key) {\n            case KeyCode.ENTER: {\n                if (this.hasFocus()) {\n                    if (this.focusService.focusInto(this.getFocusableElement())) {\n                        event.preventDefault();\n                    }\n                }\n                break;\n            }\n            case KeyCode.ESCAPE:\n                if (!this.hasFocus()) {\n                    this.getFocusableElement().focus();\n                }\n                break;\n            case KeyCode.UP:\n                this.navigateUpDown(true, event);\n                break;\n            case KeyCode.DOWN:\n                this.navigateUpDown(false, event);\n                break;\n            case KeyCode.TAB:\n                if (this.hasFocus()) {\n                    this.navigateLeftRight(event);\n                } else {\n                    const nextFocusableEl = this.focusService.findNextFocusableElement(\n                        this.getFocusableElement(),\n                        null,\n                        event.shiftKey\n                    );\n                    if (nextFocusableEl) {\n                        event.preventDefault();\n                        nextFocusableEl.focus();\n                    } else {\n                        this.navigateLeftRight(event);\n                    }\n                }\n                break;\n        }\n    }\n\n    private navigateUpDown(backwards: boolean, event: KeyboardEvent): void {\n        if (this.hasFocus()) {\n            if (this.focusService.focusNextFromAdvancedFilter(backwards)) {\n                event.preventDefault();\n            }\n        }\n    }\n\n    private navigateLeftRight(event: KeyboardEvent): void {\n        if (\n            event.shiftKey\n                ? this.focusService.focusLastHeader()\n                : this.focusService.focusNextFromAdvancedFilter(false, true)\n        ) {\n            event.preventDefault();\n        }\n    }\n\n    private hasFocus(): boolean {\n        return this.gos.getActiveDomElement() === this.getFocusableElement();\n    }\n}\n", "import type {\n    AdvancedFilterModel,\n    BeanCollection,\n    ColumnAdvancedFilterModel,\n    FilterManager,\n    JoinAdvancedFilterModel,\n} from '@ag-grid-community/core';\nimport { Component, RefPlaceholder, TooltipFeature, _exists, _setDisabled } from '@ag-grid-community/core';\nimport { VirtualList } from '@ag-grid-enterprise/core';\nimport type { VirtualListDragItem } from '@ag-grid-enterprise/core';\n\nimport type { AdvancedFilterExpressionService } from '../advancedFilterExpressionService';\nimport type { AdvancedFilterService } from '../advancedFilterService';\nimport { AdvancedFilterBuilderDragFeature } from './advancedFilterBuilderDragFeature';\nimport { AdvancedFilterBuilderItemAddComp } from './advancedFilterBuilderItemAddComp';\nimport { AdvancedFilterBuilderItemComp } from './advancedFilterBuilderItemComp';\nimport type {\n    AdvancedFilterBuilderAddEvent,\n    AdvancedFilterBuilderEvents,\n    AdvancedFilterBuilderItem,\n    AdvancedFilterBuilderMoveEvent,\n    AdvancedFilterBuilderRemoveEvent,\n} from './iAdvancedFilterBuilder';\n\nexport class AdvancedFilterBuilderComp extends Component<AdvancedFilterBuilderEvents> {\n    private filterManager?: FilterManager;\n    private advancedFilterService: AdvancedFilterService;\n    private advancedFilterExpressionService: AdvancedFilterExpressionService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.filterManager = beans.filterManager;\n        this.advancedFilterService = beans.advancedFilterService as AdvancedFilterService;\n        this.advancedFilterExpressionService = beans.advancedFilterExpressionService as AdvancedFilterExpressionService;\n    }\n\n    private readonly eList: HTMLElement = RefPlaceholder;\n    private readonly eApplyFilterButton: HTMLElement = RefPlaceholder;\n    private readonly eCancelFilterButton: HTMLElement = RefPlaceholder;\n\n    private virtualList: VirtualList<AdvancedFilterBuilderItemComp | AdvancedFilterBuilderItemAddComp>;\n    private filterModel: AdvancedFilterModel;\n    private stringifiedModel: string;\n    private items: AdvancedFilterBuilderItem[];\n    private dragFeature: AdvancedFilterBuilderDragFeature;\n    private showMove: boolean;\n    private validationTooltipFeature: TooltipFeature;\n    private validationMessage: string | null = null;\n\n    constructor() {\n        super(/* html */ `\n            <div role=\"presentation\" class=\"ag-advanced-filter-builder\" tabindex=\"-1\">\n                <div role=\"presentation\" class=\"ag-advanced-filter-builder-list\" data-ref=\"eList\"></div>\n                <div role=\"presentation\" class=\"ag-advanced-filter-builder-button-panel\">\n                    <button class=\"ag-button ag-standard-button ag-advanced-filter-builder-apply-button\" data-ref=\"eApplyFilterButton\"></button>\n                    <button class=\"ag-button ag-standard-button ag-advanced-filter-builder-cancel-button\" data-ref=\"eCancelFilterButton\"></button>\n                </div>\n            </div>`);\n    }\n\n    public postConstruct(): void {\n        const { showMoveButtons } = this.gos.get('advancedFilterBuilderParams') ?? {};\n        this.showMove = !!showMoveButtons;\n        this.addManagedPropertyListener('advancedFilterBuilderParams', ({ currentValue }) => {\n            this.showMove = !!currentValue?.showMoveButtons;\n            this.refreshList(false);\n        });\n\n        this.filterModel = this.setupFilterModel();\n        this.setupVirtualList();\n\n        this.dragFeature = this.createManagedBean(new AdvancedFilterBuilderDragFeature(this, this.virtualList));\n\n        this.setupButtons();\n    }\n\n    public refresh(): void {\n        let indexToFocus = this.virtualList.getLastFocusedRow();\n        this.setupFilterModel();\n        this.validateItems();\n        this.refreshList(false);\n        if (indexToFocus != null) {\n            // last focused row is cleared on focus out, so if defined, we need to put the focus back\n            if (!this.virtualList.getComponentAt(indexToFocus)) {\n                indexToFocus = 0;\n            }\n            this.virtualList.focusRow(indexToFocus);\n        }\n    }\n\n    public getNumItems(): number {\n        return this.items.length;\n    }\n\n    public moveItem(\n        item: AdvancedFilterBuilderItem | null,\n        destination: VirtualListDragItem<AdvancedFilterBuilderItemComp> | null\n    ): void {\n        if (!destination || !item) {\n            return;\n        }\n        this.moveItemToIndex(item, destination.rowIndex, destination.position);\n    }\n\n    public afterGuiAttached(): void {\n        this.virtualList.focusRow(0);\n    }\n\n    private setupVirtualList(): void {\n        this.virtualList = this.createManagedBean(\n            new VirtualList({\n                cssIdentifier: 'advanced-filter-builder',\n                ariaRole: 'tree',\n                listName: this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderList'),\n            })\n        );\n        this.virtualList.setComponentCreator(this.createItemComponent.bind(this));\n        this.virtualList.setComponentUpdater(this.updateItemComponent.bind(this));\n        this.virtualList.setRowHeight(40);\n        this.eList.appendChild(this.virtualList.getGui());\n\n        this.virtualList.setModel({\n            getRowCount: () => this.items.length,\n            getRow: (index: number) => this.items[index],\n            areRowsEqual: (oldRow: AdvancedFilterBuilderItem, newRow: AdvancedFilterBuilderItem) => oldRow === newRow,\n        });\n        this.buildList();\n        this.virtualList.refresh();\n    }\n\n    private setupButtons(): void {\n        this.eApplyFilterButton.innerText =\n            this.advancedFilterExpressionService.translate('advancedFilterBuilderApply');\n        this.activateTabIndex([this.eApplyFilterButton]);\n        this.addManagedElementListeners(this.eApplyFilterButton, {\n            click: () => {\n                this.advancedFilterService.setModel(this.filterModel);\n                this.filterManager?.onFilterChanged({ source: 'advancedFilter' });\n                this.close();\n            },\n        });\n\n        this.validationTooltipFeature = this.createManagedBean(\n            new TooltipFeature({\n                getGui: () => this.eApplyFilterButton,\n                getLocation: () => 'advancedFilter',\n                getTooltipValue: () => this.validationMessage,\n                getTooltipShowDelayOverride: () => 1000,\n            })\n        );\n        this.validate();\n\n        const mouseListener = (isEnter: boolean) =>\n            this.addOrRemoveCssClass('ag-advanced-filter-builder-validation', isEnter);\n        this.addManagedListeners(this.eApplyFilterButton, {\n            mouseenter: () => mouseListener(true),\n            mouseleave: () => mouseListener(false),\n        });\n\n        this.eCancelFilterButton.innerText =\n            this.advancedFilterExpressionService.translate('advancedFilterBuilderCancel');\n        this.activateTabIndex([this.eCancelFilterButton]);\n        this.addManagedElementListeners(this.eCancelFilterButton, { click: () => this.close() });\n    }\n\n    private removeItemFromParent(item: AdvancedFilterBuilderItem): number {\n        const sourceParentIndex = item.parent!.conditions.indexOf(item.filterModel!);\n        item.parent!.conditions.splice(sourceParentIndex, 1);\n        return sourceParentIndex;\n    }\n\n    private moveItemToIndex(\n        item: AdvancedFilterBuilderItem,\n        destinationRowIndex: number,\n        destinationPosition: 'top' | 'bottom'\n    ): void {\n        const destinationItem = this.items[destinationRowIndex];\n        const destinationIsParent =\n            destinationItem.filterModel?.filterType === 'join' && destinationPosition === 'bottom';\n        const destinationParent = destinationIsParent\n            ? (destinationItem.filterModel as JoinAdvancedFilterModel)\n            : destinationItem.parent;\n\n        // trying to move before the root\n        if (!destinationParent) {\n            return;\n        }\n\n        // can't move into itself\n        if (this.isChildOrSelf(destinationParent, item.filterModel!) || destinationItem === item) {\n            return;\n        }\n\n        this.removeItemFromParent(item);\n\n        let destinationParentIndex;\n        if (destinationIsParent) {\n            destinationParentIndex = 0;\n        } else {\n            destinationParentIndex = destinationParent.conditions.indexOf(destinationItem.filterModel!);\n            if (destinationParentIndex === -1) {\n                destinationParentIndex = destinationParent.conditions.length;\n            } else if (destinationPosition === 'bottom') {\n                destinationParentIndex += 1;\n            }\n        }\n        destinationParent.conditions.splice(destinationParentIndex, 0, item.filterModel!);\n        this.refreshList(false);\n    }\n\n    private isChildOrSelf(modelToCheck: AdvancedFilterModel, potentialParentModel: AdvancedFilterModel): boolean {\n        return (\n            modelToCheck === potentialParentModel ||\n            (potentialParentModel.filterType === 'join' &&\n                potentialParentModel.conditions.some((condition) => this.isChildOrSelf(modelToCheck, condition)))\n        );\n    }\n\n    private setupFilterModel(): AdvancedFilterModel {\n        const filterModel = this.formatFilterModel(this.advancedFilterService.getModel());\n        this.stringifiedModel = JSON.stringify(filterModel);\n        return filterModel;\n    }\n\n    private formatFilterModel(filterModel: AdvancedFilterModel | null): AdvancedFilterModel {\n        filterModel = filterModel ?? {\n            filterType: 'join',\n            type: 'AND',\n            conditions: [],\n        };\n        if (filterModel.filterType !== 'join') {\n            filterModel = {\n                filterType: 'join',\n                type: 'AND',\n                conditions: [filterModel],\n            };\n        }\n        return filterModel;\n    }\n\n    private buildList(): void {\n        const parseFilterModel = (\n            filterModel: AdvancedFilterModel,\n            items: AdvancedFilterBuilderItem[],\n            level: number,\n            parent?: JoinAdvancedFilterModel\n        ) => {\n            items.push({ filterModel, level, parent, valid: true, showMove: this.showMove });\n            if (filterModel.filterType === 'join') {\n                filterModel.conditions.forEach((childFilterModel) =>\n                    parseFilterModel(childFilterModel, items, level + 1, filterModel)\n                );\n                if (level === 0) {\n                    items.push({ filterModel: null, level: level + 1, parent: filterModel, valid: true });\n                }\n            }\n        };\n        this.items = [];\n        parseFilterModel(this.filterModel, this.items, 0);\n    }\n\n    private refreshList(softRefresh: boolean): void {\n        if (!softRefresh) {\n            const invalidModels: AdvancedFilterModel[] = [];\n            this.items.forEach((item) => {\n                if (!item.valid) {\n                    invalidModels.push(item.filterModel!);\n                }\n            });\n            this.buildList();\n            if (invalidModels.length) {\n                this.items.forEach((item) => {\n                    if (item.filterModel && invalidModels.includes(item.filterModel)) {\n                        item.valid = false;\n                    }\n                });\n            }\n        }\n        this.virtualList.refresh(softRefresh);\n        this.validate();\n    }\n\n    private updateItemComponent(item: AdvancedFilterBuilderItem, comp: AdvancedFilterBuilderItemComp): void {\n        const index = this.items.indexOf(item);\n        const populateTreeLines = (filterModel: AdvancedFilterModel | null, treeLines: boolean[]) => {\n            const parentItem = this.items.find((itemToCheck) => itemToCheck.filterModel === filterModel);\n            const parentFilterModel = parentItem?.parent;\n            if (parentFilterModel) {\n                const { conditions } = parentFilterModel as JoinAdvancedFilterModel;\n                // check parent\n                populateTreeLines(parentFilterModel, treeLines);\n                treeLines.push(conditions[conditions.length - 1] === filterModel);\n            }\n        };\n        const treeLines: boolean[] = [];\n        const { filterModel } = item;\n        if (filterModel) {\n            populateTreeLines(filterModel, treeLines);\n            // the add item button is always last child\n            treeLines[0] = false;\n        }\n        const showStartTreeLine = filterModel?.filterType === 'join' && !!filterModel.conditions.length;\n        comp.setState({\n            disableMoveUp: index === 1,\n            disableMoveDown: !this.canMoveDown(item, index),\n            treeLines,\n            showStartTreeLine,\n        });\n    }\n\n    private createItemComponent(\n        item: AdvancedFilterBuilderItem,\n        focusWrapper: HTMLElement\n    ): Component<AdvancedFilterBuilderEvents> {\n        const itemComp = this.createBean(\n            item.filterModel\n                ? new AdvancedFilterBuilderItemComp(item, this.dragFeature, focusWrapper)\n                : new AdvancedFilterBuilderItemAddComp(item, focusWrapper)\n        );\n\n        itemComp.addManagedListeners(itemComp, {\n            advancedFilterBuilderRemoved: ({ item }: AdvancedFilterBuilderRemoveEvent) => this.removeItem(item),\n            advancedFilterBuilderValueChanged: () => this.validate(),\n            advancedFilterBuilderAdded: ({ item, isJoin }: AdvancedFilterBuilderAddEvent) => this.addItem(item, isJoin),\n            advancedFilterBuilderMoved: ({ item, backwards }: AdvancedFilterBuilderMoveEvent) =>\n                this.moveItemUpDown(item, backwards),\n        });\n\n        if (itemComp instanceof AdvancedFilterBuilderItemComp) {\n            this.updateItemComponent(item, itemComp);\n        }\n\n        return itemComp;\n    }\n\n    private addItem(item: AdvancedFilterBuilderItem, isJoin: boolean): void {\n        const { parent: itemParent, level, filterModel: itemFilterModel } = item;\n        const itemIsJoin = itemFilterModel?.filterType === 'join';\n        const filterModel = isJoin\n            ? ({\n                  filterType: 'join',\n                  type: 'AND',\n                  conditions: [],\n              } as JoinAdvancedFilterModel)\n            : ({} as ColumnAdvancedFilterModel);\n        const parent = (itemIsJoin ? (itemFilterModel as JoinAdvancedFilterModel) : itemParent)!;\n        let insertIndex = itemIsJoin ? 0 : parent.conditions.indexOf(itemFilterModel!);\n        if (insertIndex >= 0) {\n            if (!itemIsJoin) {\n                insertIndex += 1;\n            }\n            parent.conditions.splice(insertIndex, 0, filterModel);\n        } else {\n            parent.conditions.push(filterModel);\n        }\n        let index = this.items.indexOf(item);\n        const softRefresh = index >= 0;\n        if (softRefresh) {\n            if (item.filterModel) {\n                index++;\n            }\n            const newItems: AdvancedFilterBuilderItem[] = [\n                {\n                    filterModel,\n                    level: itemIsJoin ? level + 1 : level,\n                    parent,\n                    valid: isJoin,\n                    showMove: this.showMove,\n                },\n            ];\n            this.items.splice(index, 0, ...newItems);\n        }\n        this.refreshList(softRefresh);\n        if (softRefresh) {\n            this.virtualList.getComponentAt(index)?.afterAdd();\n        }\n    }\n\n    private removeItem(item: AdvancedFilterBuilderItem): void {\n        const parent = item.parent!;\n        const { filterModel } = item;\n        const parentIndex = parent.conditions.indexOf(filterModel!);\n        parent.conditions.splice(parentIndex, 1);\n\n        const isJoin = item.filterModel?.filterType === 'join';\n        const index = this.items.indexOf(item);\n        // if it's a join, we don't know how many children there are, so always rebuild\n        const softRefresh = !isJoin && index >= 0;\n        if (softRefresh) {\n            this.items.splice(index, 1);\n        }\n        this.refreshList(softRefresh);\n        if (index >= 0) {\n            this.virtualList.focusRow(index);\n        }\n    }\n\n    private moveItemUpDown(item: AdvancedFilterBuilderItem, backwards: boolean): void {\n        const itemIndex = this.items.indexOf(item);\n        const destinationIndex = backwards ? itemIndex - 1 : itemIndex + 1;\n        if (destinationIndex === 0 || (!backwards && !this.canMoveDown(item, itemIndex))) {\n            return;\n        }\n        const destinationItem = this.items[destinationIndex];\n        const indexInParent = this.removeItemFromParent(item);\n        const { level, filterModel, parent } = item;\n        const {\n            level: destinationLevel,\n            filterModel: destinationFilterModel,\n            parent: destinationParent,\n        } = destinationItem;\n        if (backwards) {\n            if (destinationLevel === level && destinationFilterModel!.filterType === 'join') {\n                // destination is empty join. move to last child\n                (destinationFilterModel as JoinAdvancedFilterModel).conditions.push(filterModel!);\n            } else if (destinationLevel <= level) {\n                // same parent or first child. move above destination in destination parent\n                const destinationIndex = destinationParent!.conditions.indexOf(destinationFilterModel!);\n                destinationParent!.conditions.splice(destinationIndex, 0, filterModel!);\n            } else {\n                // need to move up a level. move to end of previous item's children\n                const newParentItem = parent!.conditions[indexInParent - 1] as JoinAdvancedFilterModel;\n                newParentItem.conditions.push(filterModel!);\n            }\n        } else {\n            if (destinationLevel === level) {\n                if (destinationFilterModel!.filterType === 'join') {\n                    // destination is join. move to first child\n                    (destinationFilterModel as JoinAdvancedFilterModel).conditions.splice(0, 0, filterModel!);\n                } else {\n                    // switch positions\n                    const destinationIndex = destinationParent!.conditions.indexOf(destinationFilterModel!);\n                    destinationParent!.conditions.splice(destinationIndex + 1, 0, filterModel!);\n                }\n            } else {\n                if (indexInParent < parent!.conditions.length) {\n                    // keep in parent, but swap with next child\n                    parent!.conditions.splice(indexInParent + 1, 0, filterModel!);\n                } else {\n                    // need to move down a level. move after parent in its parent\n                    const parentItem = this.items.find((itemToCheck) => itemToCheck.filterModel === parent);\n                    const destinationIndex = parentItem!.parent!.conditions.indexOf(parentItem!.filterModel!) + 1;\n                    parentItem!.parent!.conditions.splice(destinationIndex, 0, filterModel!);\n                }\n            }\n        }\n        this.refreshList(false);\n        const newIndex = this.items.findIndex(\n            ({ filterModel: filterModelToCheck }) => filterModelToCheck === filterModel\n        );\n        if (newIndex >= 0) {\n            const comp = this.virtualList.getComponentAt(newIndex);\n            if (comp instanceof AdvancedFilterBuilderItemComp) {\n                comp.focusMoveButton(backwards);\n            }\n        }\n    }\n\n    private canMoveDown(item: AdvancedFilterBuilderItem, index: number): boolean {\n        return !(\n            (item.level === 1 && index === this.items.length - 2) ||\n            (item.level === 1 && item.parent!.conditions[item.parent!.conditions.length - 1] === item.filterModel!)\n        );\n    }\n\n    private close(): void {\n        this.advancedFilterService.getCtrl().toggleFilterBuilder('ui');\n    }\n\n    private validate(): void {\n        let disableApply = !this.items.every(({ valid }) => valid);\n        if (!disableApply) {\n            disableApply = JSON.stringify(this.filterModel) === this.stringifiedModel;\n            if (disableApply) {\n                this.validationMessage = this.advancedFilterExpressionService.translate(\n                    'advancedFilterBuilderValidationAlreadyApplied'\n                );\n            } else {\n                this.validationMessage = null;\n            }\n        } else {\n            this.validationMessage = this.advancedFilterExpressionService.translate(\n                'advancedFilterBuilderValidationIncomplete'\n            );\n        }\n        _setDisabled(this.eApplyFilterButton, disableApply);\n        this.validationTooltipFeature.refreshToolTip();\n    }\n\n    private validateItems(): void {\n        const clearOperator = (filterModel: ColumnAdvancedFilterModel) => {\n            filterModel.type = undefined as any;\n        };\n        const clearOperand = (filterModel: ColumnAdvancedFilterModel) => {\n            delete (filterModel as any).filter;\n        };\n        this.items.forEach((item) => {\n            if (!item.valid || !item.filterModel || item.filterModel.filterType === 'join') {\n                return;\n            }\n            const { filterModel } = item;\n            const { colId } = filterModel;\n            const hasColumn = this.advancedFilterExpressionService\n                .getColumnAutocompleteEntries()\n                .find(({ key }) => key === colId);\n            const columnDetails = this.advancedFilterExpressionService.getColumnDetails(filterModel.colId);\n            if (!hasColumn || !columnDetails.column) {\n                item.valid = false;\n                filterModel.colId = undefined as any;\n                clearOperator(filterModel);\n                clearOperand(filterModel);\n                return;\n            }\n            const operatorForType = this.advancedFilterExpressionService.getDataTypeExpressionOperator(\n                columnDetails.baseCellDataType\n            )!;\n            const operator = operatorForType.operators[filterModel.type];\n            if (!operator) {\n                item.valid = false;\n                clearOperator(filterModel);\n                clearOperand(filterModel);\n                return;\n            }\n            if (operator.numOperands > 0 && !_exists((filterModel as any).filter)) {\n                item.valid = false;\n                return;\n            }\n        });\n    }\n}\n", "import type { AgEvent } from '@ag-grid-community/core';\nimport { BeanStub, DragSourceType } from '@ag-grid-community/core';\nimport { VirtualListDragFeature } from '@ag-grid-enterprise/core';\nimport type { VirtualList, VirtualListDragItem } from '@ag-grid-enterprise/core';\n\nimport type { AdvancedFilterBuilderComp } from './advancedFilterBuilderComp';\nimport type { AdvancedFilterBuilderItemComp } from './advancedFilterBuilderItemComp';\nimport type { AdvancedFilterBuilderItem } from './iAdvancedFilterBuilder';\n\nexport interface AdvancedFilterBuilderDragStartedEvent extends AgEvent<'advancedFilterBuilderDragStarted'> {\n    item: AdvancedFilterBuilderItem;\n}\n\nexport type AdvancedFilterBuilderDragFeatureEvent =\n    | 'advancedFilterBuilderDragStarted'\n    | 'advancedFilterBuilderDragEnded';\nexport class AdvancedFilterBuilderDragFeature extends BeanStub<AdvancedFilterBuilderDragFeatureEvent> {\n    constructor(\n        private readonly comp: AdvancedFilterBuilderComp,\n        private readonly virtualList: VirtualList\n    ) {\n        super();\n    }\n\n    public postConstruct(): void {\n        this.createManagedBean(\n            new VirtualListDragFeature<\n                AdvancedFilterBuilderComp,\n                AdvancedFilterBuilderItemComp,\n                AdvancedFilterBuilderItem,\n                AdvancedFilterBuilderDragStartedEvent\n            >(this.comp, this.virtualList, {\n                dragSourceType: DragSourceType.AdvancedFilterBuilder,\n                listItemDragStartEvent: 'advancedFilterBuilderDragStarted',\n                listItemDragEndEvent: 'advancedFilterBuilderDragEnded',\n                eventSource: this,\n                getCurrentDragValue: (listItemDragStartEvent: AdvancedFilterBuilderDragStartedEvent) =>\n                    this.getCurrentDragValue(listItemDragStartEvent),\n                isMoveBlocked: () => false,\n                getNumRows: (comp: AdvancedFilterBuilderComp) => comp.getNumItems(),\n                moveItem: (\n                    currentDragValue: AdvancedFilterBuilderItem | null,\n                    lastHoveredListItem: VirtualListDragItem<AdvancedFilterBuilderItemComp> | null\n                ) => this.moveItem(currentDragValue, lastHoveredListItem),\n            })\n        );\n    }\n\n    private getCurrentDragValue(\n        listItemDragStartEvent: AdvancedFilterBuilderDragStartedEvent\n    ): AdvancedFilterBuilderItem {\n        return listItemDragStartEvent.item;\n    }\n\n    private moveItem(\n        currentDragValue: AdvancedFilterBuilderItem | null,\n        lastHoveredListItem: VirtualListDragItem<AdvancedFilterBuilderItemComp> | null\n    ): void {\n        this.comp.moveItem(currentDragValue, lastHoveredListItem);\n    }\n}\n", "import type { BeanCollection, FieldPickerValueSelectedEvent } from '@ag-grid-community/core';\nimport { Component, RefPlaceholder, TooltipFeature, _setAriaLabel, _setAriaLevel } from '@ag-grid-community/core';\n\nimport type { AdvancedFilterExpressionService } from '../advancedFilterExpressionService';\nimport { AddDropdownComp } from './addDropdownComp';\nimport { AdvancedFilterBuilderItemNavigationFeature } from './advancedFilterBuilderItemNavigationFeature';\nimport { getAdvancedFilterBuilderAddButtonParams } from './advancedFilterBuilderUtils';\nimport type {\n    AdvancedFilterBuilderAddEvent,\n    AdvancedFilterBuilderEvents,\n    AdvancedFilterBuilderItem,\n} from './iAdvancedFilterBuilder';\n\nexport class AdvancedFilterBuilderItemAddComp extends Component<AdvancedFilterBuilderEvents> {\n    private advancedFilterExpressionService: AdvancedFilterExpressionService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.advancedFilterExpressionService = beans.advancedFilterExpressionService as AdvancedFilterExpressionService;\n    }\n\n    private readonly eItem: HTMLElement = RefPlaceholder;\n\n    constructor(\n        private readonly item: AdvancedFilterBuilderItem,\n        private readonly focusWrapper: HTMLElement\n    ) {\n        super(/* html */ `\n            <div class=\"ag-advanced-filter-builder-item-wrapper\" role=\"presentation\">\n                <div data-ref=\"eItem\" class=\"ag-advanced-filter-builder-item\" role=\"presentation\">\n                    <div class=\"ag-advanced-filter-builder-item-tree-lines\" aria-hidden=\"true\">\n                        <div class=\"ag-advanced-filter-builder-item-tree-line-vertical-top ag-advanced-filter-builder-item-tree-line-horizontal\"></div>\n                    </div>\n                </div>\n            </div>\n        `);\n    }\n\n    public postConstruct(): void {\n        _setAriaLevel(this.focusWrapper, 2);\n\n        const addButtonParams = getAdvancedFilterBuilderAddButtonParams(\n            (key) => this.advancedFilterExpressionService.translate(key),\n            this.gos.get('advancedFilterBuilderParams')?.addSelectWidth\n        );\n        const eAddButton = this.createManagedBean(new AddDropdownComp(addButtonParams));\n        this.addManagedListeners(eAddButton, {\n            fieldPickerValueSelected: ({ value }: FieldPickerValueSelectedEvent) => {\n                this.dispatchLocalEvent<AdvancedFilterBuilderAddEvent>({\n                    type: 'advancedFilterBuilderAdded',\n                    item: this.item,\n                    isJoin: value.key === 'join',\n                });\n            },\n        });\n        this.eItem.appendChild(eAddButton.getGui());\n\n        this.createManagedBean(\n            new TooltipFeature({\n                getGui: () => eAddButton.getGui(),\n                getLocation: () => 'advancedFilter',\n                getTooltipValue: () =>\n                    this.advancedFilterExpressionService.translate('advancedFilterBuilderAddButtonTooltip'),\n            })\n        );\n\n        this.createManagedBean(\n            new AdvancedFilterBuilderItemNavigationFeature(this.getGui(), this.focusWrapper, eAddButton)\n        );\n\n        _setAriaLabel(\n            this.focusWrapper,\n            this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderItem', [\n                this.advancedFilterExpressionService.translate('advancedFilterBuilderAddButtonTooltip'),\n                `${this.item.level + 1}`,\n            ])\n        );\n    }\n\n    public afterAdd(): void {\n        // do nothing\n    }\n}\n", "import type { RichSelectParams } from '@ag-grid-community/core';\nimport {\n    AgInputTextFieldSelector,\n    _setAriaLabel,\n    _setAriaLabelledBy,\n    _setDisplayed,\n    _stopPropagationForAgGrid,\n} from '@ag-grid-community/core';\nimport { AgRichSelect } from '@ag-grid-enterprise/core';\n\nimport type { AutocompleteEntry } from '../autocomplete/autocompleteParams';\n\nexport interface AddDropdownCompParams extends RichSelectParams<AutocompleteEntry> {\n    wrapperClassName?: string;\n    ariaLabel: string;\n}\n\nexport class AddDropdownComp extends AgRichSelect {\n    constructor(private readonly params: AddDropdownCompParams) {\n        super({\n            ...params,\n            template: /* html */ `\n                <div class=\"ag-picker-field\" role=\"presentation\">\n                    <div data-ref=\"eLabel\"></div>\n                    <div data-ref=\"eWrapper\" class=\"ag-wrapper ag-picker-collapsed\">\n                        <div data-ref=\"eDisplayField\" class=\"ag-picker-field-display\"></div>\n                        <ag-input-text-field data-ref=\"eInput\" class=\"ag-rich-select-field-input\"></ag-input-text-field>\n                        <span data-ref=\"eDeselect\" class=\"ag-rich-select-deselect-button ag-picker-field-icon\" role=\"presentation\"></span>\n                        <div data-ref=\"eIcon\" class=\"ag-picker-field-icon\" aria-hidden=\"true\"></div>\n                    </div>\n                </div>`,\n            agComponents: [AgInputTextFieldSelector],\n        });\n    }\n\n    public override showPicker(): void {\n        // avoid focus handling issues with multiple rich selects\n        setTimeout(() => super.showPicker());\n    }\n\n    public override hidePicker(): void {\n        // avoid focus handling issues with multiple rich selects\n        setTimeout(() => super.hidePicker());\n    }\n\n    public override postConstruct(): void {\n        super.postConstruct();\n\n        const { wrapperClassName, ariaLabel } = this.params;\n\n        _setDisplayed(this.eDisplayField, false);\n        if (wrapperClassName) {\n            this.eWrapper.classList.add(wrapperClassName);\n        }\n        _setAriaLabelledBy(this.eWrapper, '');\n        _setAriaLabel(this.eWrapper, ariaLabel);\n    }\n\n    protected override onEnterKeyDown(event: KeyboardEvent): void {\n        _stopPropagationForAgGrid(event);\n        if (this.isPickerDisplayed) {\n            super.onEnterKeyDown(event);\n        } else {\n            event.preventDefault();\n            this.showPicker();\n        }\n    }\n}\n", "import type { Component } from '@ag-grid-community/core';\nimport { BeanStub, KeyCode, _isStopPropagationForAgGrid, _stopPropagationForAgGrid } from '@ag-grid-community/core';\n\nexport class AdvancedFilterBuilderItemNavigationFeature extends BeanStub {\n    constructor(\n        private readonly eGui: HTMLElement,\n        private readonly focusWrapper: HTMLElement,\n        private readonly eFocusableComp: Component<any>\n    ) {\n        super();\n    }\n\n    public postConstruct(): void {\n        this.addManagedElementListeners(this.eGui, {\n            keydown: (event: KeyboardEvent) => {\n                switch (event.key) {\n                    case KeyCode.TAB:\n                        if (!event.defaultPrevented) {\n                            // tab guard handled the navigation. stop from reaching virtual list\n                            _stopPropagationForAgGrid(event);\n                        }\n                        break;\n                    case KeyCode.UP:\n                    case KeyCode.DOWN:\n                        // if this hasn't been handled by an editor, prevent virtual list navigation\n                        _stopPropagationForAgGrid(event);\n                        break;\n                    case KeyCode.ESCAPE:\n                        if (_isStopPropagationForAgGrid(event)) {\n                            return;\n                        }\n                        if (this.eGui.contains(this.gos.getActiveDomElement())) {\n                            event.preventDefault();\n                            _stopPropagationForAgGrid(event);\n                            this.focusWrapper.focus();\n                        }\n                        break;\n                }\n            },\n        });\n        const highlightClass = 'ag-advanced-filter-builder-virtual-list-item-highlight';\n        this.addManagedListeners(this.focusWrapper, {\n            keydown: (event: KeyboardEvent) => {\n                switch (event.key) {\n                    case KeyCode.ENTER:\n                        if (_isStopPropagationForAgGrid(event)) {\n                            return;\n                        }\n                        if (this.gos.getActiveDomElement() === this.focusWrapper) {\n                            event.preventDefault();\n                            _stopPropagationForAgGrid(event);\n                            this.eFocusableComp.getFocusableElement().focus();\n                        }\n                        break;\n                }\n            },\n            focusin: () => {\n                this.focusWrapper.classList.add(highlightClass);\n            },\n            focusout: (event: FocusEvent) => {\n                if (!this.focusWrapper.contains(event.relatedTarget as HTMLElement)) {\n                    this.focusWrapper.classList.remove(highlightClass);\n                }\n            },\n        });\n    }\n}\n", "import type { ADVANCED_FILTER_LOCALE_TEXT } from '../advancedFilterLocaleText';\nimport type { AutocompleteEntry } from '../autocomplete/autocompleteParams';\nimport type { AddDropdownCompParams } from './addDropdownComp';\n\nexport function getAdvancedFilterBuilderAddButtonParams(\n    translate: (key: keyof typeof ADVANCED_FILTER_LOCALE_TEXT) => string,\n    maxPickerWidth?: number\n): AddDropdownCompParams {\n    return {\n        pickerAriaLabelKey: 'ariaLabelAdvancedFilterBuilderAddField',\n        pickerAriaLabelValue: 'Advanced Filter Builder Add Field',\n        pickerType: 'ag-list',\n        valueList: [\n            {\n                key: 'condition',\n                displayValue: translate('advancedFilterBuilderAddCondition'),\n            },\n            {\n                key: 'join',\n                displayValue: translate('advancedFilterBuilderAddJoin'),\n            },\n        ],\n        valueFormatter: (value: AutocompleteEntry) => (value == null ? null : value.displayValue ?? value.key),\n        pickerIcon: 'advancedFilterBuilderAdd',\n        maxPickerWidth: `${maxPickerWidth ?? 120}px`,\n        wrapperClassName: 'ag-advanced-filter-builder-item-button',\n        ariaLabel: translate('advancedFilterBuilderAddButtonTooltip'),\n    };\n}\n", "import type {\n    BaseCellDataType,\n    BeanCollection,\n    DragAndDropService,\n    DragSource,\n    FieldPickerValueSelectedEvent,\n    FieldValueEvent,\n} from '@ag-grid-community/core';\nimport {\n    DragSourceType,\n    KeyCode,\n    RefPlaceholder,\n    TabGuardComp,\n    TooltipFeature,\n    _createIconNoSpan,\n    _removeAriaExpanded,\n    _setAriaDisabled,\n    _setAriaExpanded,\n    _setAriaLabel,\n    _setAriaLevel,\n    _setDisplayed,\n    _setVisible,\n    _stopPropagationForAgGrid,\n} from '@ag-grid-community/core';\n\nimport type { AdvancedFilterExpressionService } from '../advancedFilterExpressionService';\nimport type { AutocompleteEntry } from '../autocomplete/autocompleteParams';\nimport { AddDropdownComp } from './addDropdownComp';\nimport type { AdvancedFilterBuilderDragStartedEvent } from './advancedFilterBuilderDragFeature';\nimport type { AdvancedFilterBuilderDragFeature } from './advancedFilterBuilderDragFeature';\nimport { AdvancedFilterBuilderItemNavigationFeature } from './advancedFilterBuilderItemNavigationFeature';\nimport { getAdvancedFilterBuilderAddButtonParams } from './advancedFilterBuilderUtils';\nimport { ConditionPillWrapperComp } from './conditionPillWrapperComp';\nimport type {\n    AdvancedFilterBuilderAddEvent,\n    AdvancedFilterBuilderEvents,\n    AdvancedFilterBuilderItem,\n    AdvancedFilterBuilderMoveEvent,\n    AdvancedFilterBuilderRemoveEvent,\n    CreatePillParams,\n} from './iAdvancedFilterBuilder';\nimport { InputPillComp } from './inputPillComp';\nimport { JoinPillWrapperComp } from './joinPillWrapperComp';\nimport { SelectPillComp } from './selectPillComp';\n\nexport class AdvancedFilterBuilderItemComp extends TabGuardComp<AdvancedFilterBuilderEvents> {\n    private dragAndDropService: DragAndDropService;\n    private advancedFilterExpressionService: AdvancedFilterExpressionService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.dragAndDropService = beans.dragAndDropService;\n        this.advancedFilterExpressionService = beans.advancedFilterExpressionService as AdvancedFilterExpressionService;\n    }\n\n    private readonly eTreeLines: HTMLElement = RefPlaceholder;\n    private readonly eDragHandle: HTMLElement = RefPlaceholder;\n    private readonly eButtons: HTMLElement = RefPlaceholder;\n    private readonly eValidation: HTMLElement = RefPlaceholder;\n    private readonly eMoveUpButton: HTMLElement = RefPlaceholder;\n    private readonly eMoveDownButton: HTMLElement = RefPlaceholder;\n    private readonly eAddButton: HTMLElement = RefPlaceholder;\n    private readonly eRemoveButton: HTMLElement = RefPlaceholder;\n\n    private ePillWrapper: JoinPillWrapperComp | ConditionPillWrapperComp;\n    private validationTooltipFeature: TooltipFeature;\n    private moveUpDisabled: boolean = false;\n    private moveDownDisabled: boolean = false;\n    private moveUpTooltipFeature: TooltipFeature;\n    private moveDownTooltipFeature: TooltipFeature;\n\n    constructor(\n        private readonly item: AdvancedFilterBuilderItem,\n        private readonly dragFeature: AdvancedFilterBuilderDragFeature,\n        private readonly focusWrapper: HTMLElement\n    ) {\n        super(/* html */ `\n            <div class=\"ag-advanced-filter-builder-item-wrapper\" role=\"presentation\">\n                <div class=\"ag-advanced-filter-builder-item\" role=\"presentation\">\n                    <div data-ref=\"eTreeLines\" class=\"ag-advanced-filter-builder-item-tree-lines\" aria-hidden=\"true\"></div>\n                    <span data-ref=\"eDragHandle\" class=\"ag-drag-handle\" aria-hidden=\"true\"></span>\n                    <span data-ref=\"eValidation\" class=\"ag-advanced-filter-builder-item-button ag-advanced-filter-builder-invalid\" aria-hidden=\"true\"></span>\n                </div>\n                <div data-ref=\"eButtons\" class=\"ag-advanced-filter-builder-item-buttons\">\n                    <span data-ref=\"eMoveUpButton\" class=\"ag-advanced-filter-builder-item-button\" role=\"button\"></span>\n                    <span data-ref=\"eMoveDownButton\" class=\"ag-advanced-filter-builder-item-button\" role=\"button\"></span>\n                    <div data-ref=\"eAddButton\" role=\"presentation\"></div>\n                    <span data-ref=\"eRemoveButton\" class=\"ag-advanced-filter-builder-item-button\" role=\"button\"></span>\n                </div>\n            </div>\n        `);\n    }\n\n    public postConstruct(): void {\n        const { filterModel, level, showMove } = this.item;\n\n        const isJoin = filterModel!.filterType === 'join';\n        this.ePillWrapper = this.createManagedBean(isJoin ? new JoinPillWrapperComp() : new ConditionPillWrapperComp());\n        this.ePillWrapper.init({ item: this.item, createPill: (params: CreatePillParams) => this.createPill(params) });\n        this.eDragHandle.insertAdjacentElement('afterend', this.ePillWrapper.getGui());\n\n        if (level === 0) {\n            const eTreeLine = document.createElement('div');\n            eTreeLine.classList.add('ag-advanced-filter-builder-item-tree-line-vertical-bottom');\n            eTreeLine.classList.add('ag-advanced-filter-builder-item-tree-line-root');\n            this.eTreeLines.appendChild(eTreeLine);\n\n            _setDisplayed(this.eDragHandle, false);\n            _setDisplayed(this.eButtons, false);\n            _setAriaExpanded(this.focusWrapper, true);\n        } else {\n            this.setupTreeLines(level);\n\n            this.eDragHandle.appendChild(_createIconNoSpan('advancedFilterBuilderDrag', this.gos)!);\n            this.setupValidation();\n            this.setupMoveButtons(showMove);\n            this.setupAddButton();\n            this.setupRemoveButton();\n\n            this.setupDragging();\n            this.updateAriaExpanded();\n        }\n\n        _setAriaLevel(this.focusWrapper, level + 1);\n\n        this.initialiseTabGuard({});\n\n        this.createManagedBean(\n            new AdvancedFilterBuilderItemNavigationFeature(this.getGui(), this.focusWrapper, this.ePillWrapper)\n        );\n\n        this.updateAriaLabel();\n\n        this.addManagedListeners(this.ePillWrapper, {\n            advancedFilterBuilderValueChanged: () =>\n                this.dispatchLocalEvent({\n                    type: 'advancedFilterBuilderValueChanged',\n                }),\n            advancedFilterBuilderValidChanged: () => this.updateValidity(),\n        });\n    }\n\n    public setState(params: {\n        disableMoveUp?: boolean;\n        disableMoveDown?: boolean;\n        treeLines: boolean[];\n        showStartTreeLine: boolean;\n    }): void {\n        const { level } = this.item;\n        if (level === 0) {\n            return;\n        }\n        const { showMove } = this.item;\n        const { disableMoveUp, disableMoveDown, treeLines, showStartTreeLine } = params;\n        this.updateTreeLines(treeLines, showStartTreeLine);\n        this.updateAriaExpanded();\n        if (showMove) {\n            this.moveUpDisabled = !!disableMoveUp;\n            this.moveDownDisabled = !!disableMoveDown;\n            this.eMoveUpButton.classList.toggle('ag-advanced-filter-builder-item-button-disabled', disableMoveUp);\n            this.eMoveDownButton.classList.toggle('ag-advanced-filter-builder-item-button-disabled', disableMoveDown);\n            _setAriaDisabled(this.eMoveUpButton, !!disableMoveUp);\n            _setAriaDisabled(this.eMoveDownButton, !!disableMoveDown);\n            this.moveUpTooltipFeature.refreshToolTip();\n            this.moveDownTooltipFeature.refreshToolTip();\n        }\n    }\n\n    public focusMoveButton(backwards: boolean): void {\n        (backwards ? this.eMoveUpButton : this.eMoveDownButton).focus();\n    }\n\n    public afterAdd(): void {\n        this.ePillWrapper.getFocusableElement().focus();\n    }\n\n    private setupTreeLines(level: number): void {\n        for (let i = 0; i < level; i++) {\n            const eTreeLine = document.createElement('div');\n            this.eTreeLines.appendChild(eTreeLine);\n        }\n    }\n\n    private updateTreeLines(treeLines: boolean[], showStartTreeLine: boolean): void {\n        const lastTreeLineIndex = treeLines.length - 1;\n        const { children } = this.eTreeLines;\n        for (let i = 0; i < lastTreeLineIndex; i++) {\n            const eTreeLine = children.item(i);\n            if (eTreeLine) {\n                eTreeLine.classList.toggle('ag-advanced-filter-builder-item-tree-line-vertical', !treeLines[i]);\n            }\n        }\n        const eTreeLine = children.item(lastTreeLineIndex);\n        if (eTreeLine) {\n            eTreeLine.classList.add('ag-advanced-filter-builder-item-tree-line-horizontal');\n            const isLastChild = treeLines[lastTreeLineIndex];\n            eTreeLine.classList.toggle('ag-advanced-filter-builder-item-tree-line-vertical-top', isLastChild);\n            eTreeLine.classList.toggle('ag-advanced-filter-builder-item-tree-line-vertical', !isLastChild);\n        }\n        this.eDragHandle.classList.toggle(\n            'ag-advanced-filter-builder-item-tree-line-vertical-bottom',\n            showStartTreeLine\n        );\n    }\n\n    private setupValidation(): void {\n        this.eValidation.appendChild(_createIconNoSpan('advancedFilterBuilderInvalid', this.gos)!);\n        this.validationTooltipFeature = this.createManagedBean(\n            new TooltipFeature({\n                getGui: () => this.eValidation,\n                getLocation: () => 'advancedFilter',\n                getTooltipValue: () => this.ePillWrapper.getValidationMessage(),\n                getTooltipShowDelayOverride: () => 1000,\n            })\n        );\n        this.updateValidity();\n    }\n\n    private setupAddButton(): void {\n        const addButtonParams = getAdvancedFilterBuilderAddButtonParams(\n            (key) => this.advancedFilterExpressionService.translate(key),\n            this.gos.get('advancedFilterBuilderParams')?.addSelectWidth\n        );\n        const eAddButton = this.createManagedBean(new AddDropdownComp(addButtonParams));\n        this.addManagedListeners(eAddButton, {\n            fieldPickerValueSelected: ({ value }: FieldPickerValueSelectedEvent) =>\n                this.dispatchLocalEvent<AdvancedFilterBuilderAddEvent>({\n                    type: 'advancedFilterBuilderAdded',\n                    item: this.item,\n                    isJoin: value.key === 'join',\n                }),\n        });\n        this.eAddButton.appendChild(eAddButton.getGui());\n\n        this.createManagedBean(\n            new TooltipFeature({\n                getGui: () => this.eAddButton,\n                getLocation: () => 'advancedFilter',\n                getTooltipValue: () =>\n                    this.advancedFilterExpressionService.translate('advancedFilterBuilderAddButtonTooltip'),\n            })\n        );\n    }\n\n    private setupRemoveButton(): void {\n        this.eRemoveButton.appendChild(_createIconNoSpan('advancedFilterBuilderRemove', this.gos)!);\n        this.addManagedListeners(this.eRemoveButton, {\n            click: () => this.removeItem(),\n            keydown: (event: KeyboardEvent) => {\n                switch (event.key) {\n                    case KeyCode.ENTER:\n                        event.preventDefault();\n                        _stopPropagationForAgGrid(event);\n                        this.removeItem();\n                        break;\n                }\n            },\n        });\n\n        this.createManagedBean(\n            new TooltipFeature({\n                getGui: () => this.eRemoveButton,\n                getLocation: () => 'advancedFilter',\n                getTooltipValue: () =>\n                    this.advancedFilterExpressionService.translate('advancedFilterBuilderRemoveButtonTooltip'),\n            })\n        );\n        _setAriaLabel(\n            this.eRemoveButton,\n            this.advancedFilterExpressionService.translate('advancedFilterBuilderRemoveButtonTooltip')\n        );\n\n        this.activateTabIndex([this.eRemoveButton]);\n    }\n\n    private setupMoveButtons(showMove?: boolean): void {\n        if (showMove) {\n            this.eMoveUpButton.appendChild(_createIconNoSpan('advancedFilterBuilderMoveUp', this.gos)!);\n\n            this.addManagedListeners(this.eMoveUpButton, {\n                click: () => this.moveItem(true),\n                keydown: (event: KeyboardEvent) => {\n                    switch (event.key) {\n                        case KeyCode.ENTER:\n                            event.preventDefault();\n                            _stopPropagationForAgGrid(event);\n                            this.moveItem(true);\n                            break;\n                    }\n                },\n            });\n\n            this.moveUpTooltipFeature = this.createManagedBean(\n                new TooltipFeature({\n                    getGui: () => this.eMoveUpButton,\n                    getLocation: () => 'advancedFilter',\n                    getTooltipValue: () =>\n                        this.moveUpDisabled\n                            ? null\n                            : this.advancedFilterExpressionService.translate(\n                                  'advancedFilterBuilderMoveUpButtonTooltip'\n                              ),\n                })\n            );\n            _setAriaLabel(\n                this.eMoveUpButton,\n                this.advancedFilterExpressionService.translate('advancedFilterBuilderMoveUpButtonTooltip')\n            );\n\n            this.eMoveDownButton.appendChild(_createIconNoSpan('advancedFilterBuilderMoveDown', this.gos)!);\n            this.addManagedListeners(this.eMoveDownButton, {\n                click: () => this.moveItem(false),\n                keydown: (event: KeyboardEvent) => {\n                    switch (event.key) {\n                        case KeyCode.ENTER:\n                            event.preventDefault();\n                            _stopPropagationForAgGrid(event);\n                            this.moveItem(false);\n                            break;\n                    }\n                },\n            });\n\n            this.moveDownTooltipFeature = this.createManagedBean(\n                new TooltipFeature({\n                    getGui: () => this.eMoveDownButton,\n                    getLocation: () => 'advancedFilter',\n                    getTooltipValue: () =>\n                        this.moveDownDisabled\n                            ? null\n                            : this.advancedFilterExpressionService.translate(\n                                  'advancedFilterBuilderMoveDownButtonTooltip'\n                              ),\n                })\n            );\n            _setAriaLabel(\n                this.eMoveDownButton,\n                this.advancedFilterExpressionService.translate('advancedFilterBuilderMoveDownButtonTooltip')\n            );\n\n            this.activateTabIndex([this.eMoveUpButton, this.eMoveDownButton]);\n        } else {\n            _setDisplayed(this.eMoveUpButton, false);\n            _setDisplayed(this.eMoveDownButton, false);\n        }\n    }\n\n    private updateValidity(): void {\n        _setVisible(this.eValidation, !this.item.valid);\n        this.validationTooltipFeature.refreshToolTip();\n        this.updateAriaLabel();\n    }\n\n    private createPill(params: CreatePillParams): SelectPillComp | InputPillComp {\n        const { key, displayValue, cssClass, update, ariaLabel } = params;\n        const onUpdated = (key: string) => {\n            if (key == null) {\n                return;\n            }\n            update(key);\n            this.dispatchLocalEvent({\n                type: 'advancedFilterBuilderValueChanged',\n            });\n        };\n        if (params.isSelect) {\n            const { getEditorParams, pickerAriaLabelKey, pickerAriaLabelValue } = params;\n            const advancedFilterBuilderParams = this.gos.get('advancedFilterBuilderParams');\n            const minPickerWidth = `${advancedFilterBuilderParams?.pillSelectMinWidth ?? 140}px`;\n            const maxPickerWidth = `${advancedFilterBuilderParams?.pillSelectMaxWidth ?? 200}px`;\n            const comp = this.createBean(\n                new SelectPillComp({\n                    pickerAriaLabelKey,\n                    pickerAriaLabelValue,\n                    pickerType: 'ag-list',\n                    value: {\n                        key,\n                        displayValue,\n                    },\n                    valueFormatter: (value: AutocompleteEntry) =>\n                        value == null ? null : value.displayValue ?? value.key,\n                    variableWidth: true,\n                    minPickerWidth,\n                    maxPickerWidth,\n                    getEditorParams,\n                    wrapperClassName: cssClass,\n                    ariaLabel,\n                })\n            );\n            this.addManagedListeners(comp, {\n                fieldPickerValueSelected: ({ value }: FieldPickerValueSelectedEvent) => onUpdated(value?.key),\n            });\n            return comp;\n        } else {\n            const comp = this.createBean(\n                new InputPillComp({\n                    value: displayValue,\n                    cssClass,\n                    type: this.getInputType(params.baseCellDataType),\n                    ariaLabel,\n                })\n            );\n            this.addManagedListeners(comp, { fieldValueChanged: ({ value }: FieldValueEvent) => onUpdated(value) });\n            return comp;\n        }\n    }\n\n    private getInputType(baseCellDataType: BaseCellDataType): 'text' | 'number' | 'date' {\n        switch (baseCellDataType) {\n            case 'text':\n            case 'object':\n            case 'boolean':\n                return 'text';\n            case 'number':\n                return 'number';\n            case 'date':\n            case 'dateString':\n                return 'date';\n        }\n    }\n\n    private setupDragging(): void {\n        const dragSource: DragSource = {\n            type: DragSourceType.AdvancedFilterBuilder,\n            eElement: this.eDragHandle,\n            dragItemName: () => this.ePillWrapper.getDragName(),\n            getDefaultIconName: () => 'notAllowed',\n            getDragItem: () => ({}),\n            onDragStarted: () =>\n                this.dragFeature.dispatchLocalEvent<AdvancedFilterBuilderDragStartedEvent>({\n                    type: 'advancedFilterBuilderDragStarted',\n                    item: this.item,\n                }),\n            onDragStopped: () =>\n                this.dragFeature.dispatchLocalEvent({\n                    type: 'advancedFilterBuilderDragEnded',\n                }),\n        };\n\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => this.dragAndDropService.removeDragSource(dragSource));\n    }\n\n    private updateAriaLabel(): void {\n        const wrapperLabel = this.ePillWrapper.getAriaLabel();\n        const level = `${this.item.level + 1}`;\n        const validationMessage = this.ePillWrapper.getValidationMessage();\n        let ariaLabel;\n        if (validationMessage) {\n            ariaLabel = this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderItemValidation', [\n                wrapperLabel,\n                level,\n                validationMessage,\n            ]);\n        } else {\n            ariaLabel = this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderItem', [\n                wrapperLabel,\n                level,\n            ]);\n        }\n        _setAriaLabel(this.focusWrapper, ariaLabel);\n    }\n\n    private updateAriaExpanded(): void {\n        _removeAriaExpanded(this.focusWrapper);\n        const { filterModel } = this.item;\n        if (filterModel?.filterType === 'join' && filterModel.conditions.length) {\n            _setAriaExpanded(this.focusWrapper, true);\n        }\n    }\n\n    private removeItem(): void {\n        this.dispatchLocalEvent<AdvancedFilterBuilderRemoveEvent>({\n            type: 'advancedFilterBuilderRemoved',\n            item: this.item,\n        });\n    }\n\n    private moveItem(backwards: boolean): void {\n        this.dispatchLocalEvent<AdvancedFilterBuilderMoveEvent>({\n            type: 'advancedFilterBuilderMoved',\n            item: this.item,\n            backwards,\n        });\n    }\n}\n", "import type { AgColumn, BaseCellDataType, BeanCollection, ColumnAdvancedFilterModel } from '@ag-grid-community/core';\nimport { Component, _exists, _removeFromParent } from '@ag-grid-community/core';\n\nimport type { AdvancedFilterExpressionService } from '../advancedFilterExpressionService';\nimport type { AutocompleteEntry } from '../autocomplete/autocompleteParams';\nimport type {\n    AdvancedFilterBuilderEvents,\n    AdvancedFilterBuilderItem,\n    CreatePillParams,\n} from './iAdvancedFilterBuilder';\nimport type { InputPillComp } from './inputPillComp';\nimport type { SelectPillComp } from './selectPillComp';\n\nexport class ConditionPillWrapperComp extends Component<AdvancedFilterBuilderEvents> {\n    private advancedFilterExpressionService: AdvancedFilterExpressionService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.advancedFilterExpressionService = beans.advancedFilterExpressionService as AdvancedFilterExpressionService;\n    }\n\n    private item: AdvancedFilterBuilderItem;\n    private createPill: (params: CreatePillParams) => SelectPillComp | InputPillComp;\n    private filterModel: ColumnAdvancedFilterModel;\n    private baseCellDataType: BaseCellDataType;\n    private column: AgColumn | undefined;\n    private numOperands: number;\n    private eColumnPill: SelectPillComp | InputPillComp;\n    private eOperatorPill: SelectPillComp | InputPillComp | undefined;\n    private eOperandPill: SelectPillComp | InputPillComp | undefined;\n    private validationMessage: string | null = null;\n\n    constructor() {\n        super(/* html */ `\n            <div class=\"ag-advanced-filter-builder-item-condition\" role=\"presentation\"></div>\n        `);\n    }\n\n    public init(params: {\n        item: AdvancedFilterBuilderItem;\n        createPill: (params: CreatePillParams) => SelectPillComp | InputPillComp;\n    }): void {\n        const { item, createPill } = params;\n        this.item = item;\n        this.createPill = createPill;\n        this.filterModel = item.filterModel as ColumnAdvancedFilterModel;\n        this.setupColumnCondition(this.filterModel);\n        this.validate();\n\n        this.addDestroyFunc(() => this.destroyBeans([this.eColumnPill, this.eOperatorPill, this.eOperandPill]));\n    }\n\n    public getDragName(): string {\n        return this.filterModel.colId\n            ? this.advancedFilterExpressionService.parseColumnFilterModel(this.filterModel)\n            : this.getDefaultColumnDisplayValue();\n    }\n\n    public getAriaLabel(): string {\n        return `${this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderFilterItem')} ${this.getDragName()}`;\n    }\n\n    public getValidationMessage(): string | null {\n        return this.validationMessage;\n    }\n\n    public override getFocusableElement(): HTMLElement {\n        return this.eColumnPill.getFocusableElement();\n    }\n\n    private setupColumnCondition(filterModel: ColumnAdvancedFilterModel): void {\n        const columnDetails = this.advancedFilterExpressionService.getColumnDetails(filterModel.colId);\n        this.baseCellDataType = columnDetails.baseCellDataType;\n        this.column = columnDetails.column;\n        this.numOperands = this.getNumOperands(this.getOperatorKey());\n\n        this.eColumnPill = this.createPill({\n            key: this.getColumnKey(),\n            displayValue: this.getColumnDisplayValue() ?? this.getDefaultColumnDisplayValue(),\n            cssClass: 'ag-advanced-filter-builder-column-pill',\n            isSelect: true,\n            getEditorParams: () => ({ values: this.advancedFilterExpressionService.getColumnAutocompleteEntries() }),\n            update: (key) => this.setColumnKey(key),\n            pickerAriaLabelKey: 'ariaLabelAdvancedFilterBuilderColumnSelectField',\n            pickerAriaLabelValue: 'Advanced Filter Builder Column Select Field',\n            ariaLabel: this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderColumn'),\n        });\n        this.getGui().appendChild(this.eColumnPill.getGui());\n\n        if (_exists(this.getColumnKey())) {\n            this.createOperatorPill();\n            if (this.hasOperand()) {\n                this.createOperandPill();\n            }\n        }\n    }\n\n    private createOperatorPill(): void {\n        this.eOperatorPill = this.createPill({\n            key: this.getOperatorKey(),\n            displayValue: this.getOperatorDisplayValue() ?? this.getDefaultOptionSelectValue(),\n            cssClass: 'ag-advanced-filter-builder-option-pill',\n            isSelect: true,\n            getEditorParams: () => ({ values: this.getOperatorAutocompleteEntries() }),\n            update: (key) => this.setOperatorKey(key),\n            pickerAriaLabelKey: 'ariaLabelAdvancedFilterBuilderOptionSelectField',\n            pickerAriaLabelValue: 'Advanced Filter Builder Option Select Field',\n            ariaLabel: this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderOption'),\n        });\n        this.eColumnPill.getGui().insertAdjacentElement('afterend', this.eOperatorPill.getGui());\n    }\n\n    private createOperandPill(): void {\n        const key = this.getOperandDisplayValue() ?? '';\n        this.eOperandPill = this.createPill({\n            key,\n            displayValue: key,\n            baseCellDataType: this.baseCellDataType,\n            cssClass: 'ag-advanced-filter-builder-value-pill',\n            isSelect: false,\n            update: (key) => this.setOperand(key),\n            ariaLabel: this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderValue'),\n        });\n        this.getGui().appendChild(this.eOperandPill.getGui());\n    }\n\n    private getColumnKey(): string {\n        return this.filterModel.colId;\n    }\n\n    private getColumnDisplayValue(): string | undefined {\n        return this.advancedFilterExpressionService.getColumnDisplayValue(this.filterModel);\n    }\n\n    private getOperatorKey(): string {\n        return this.filterModel.type;\n    }\n\n    private getOperatorDisplayValue(): string | undefined {\n        return this.advancedFilterExpressionService.getOperatorDisplayValue(this.filterModel);\n    }\n\n    private getOperandDisplayValue(): string {\n        return this.advancedFilterExpressionService.getOperandDisplayValue(this.filterModel, true);\n    }\n\n    private hasOperand(): boolean {\n        return this.numOperands > 0;\n    }\n\n    private getOperatorAutocompleteEntries(): AutocompleteEntry[] {\n        return this.column\n            ? this.advancedFilterExpressionService.getOperatorAutocompleteEntries(this.column, this.baseCellDataType)\n            : [];\n    }\n\n    private setColumnKey(colId: string): void {\n        if (!this.eOperatorPill) {\n            this.createOperatorPill();\n        }\n\n        const newColumnDetails = this.advancedFilterExpressionService.getColumnDetails(colId);\n        this.column = newColumnDetails.column;\n        const newBaseCellDataType = newColumnDetails.baseCellDataType;\n        if (this.baseCellDataType !== newBaseCellDataType) {\n            this.baseCellDataType = newBaseCellDataType;\n\n            this.setOperatorKey(undefined as any);\n            if (this.eOperatorPill) {\n                _removeFromParent(this.eOperatorPill.getGui());\n                this.destroyBean(this.eOperatorPill);\n                this.createOperatorPill();\n            }\n            this.validate();\n        }\n        this.filterModel.colId = colId;\n        this.filterModel.filterType = this.baseCellDataType;\n    }\n\n    private setOperatorKey(operator: string): void {\n        const newNumOperands = this.getNumOperands(operator);\n        if (newNumOperands !== this.numOperands) {\n            this.numOperands = newNumOperands;\n            if (newNumOperands === 0) {\n                this.destroyOperandPill();\n            } else {\n                this.createOperandPill();\n                if (this.baseCellDataType !== 'number') {\n                    this.setOperand('');\n                }\n            }\n        }\n        this.filterModel.type = operator as any;\n        this.validate();\n    }\n\n    private setOperand(operand: string): void {\n        let parsedOperand: string | number = operand;\n        if (this.column) {\n            parsedOperand =\n                this.advancedFilterExpressionService.getOperandModelValue(\n                    operand,\n                    this.baseCellDataType,\n                    this.column\n                ) ?? '';\n        }\n        (this.filterModel as any).filter = parsedOperand;\n        this.validate();\n    }\n\n    private getNumOperands(operator: string): number {\n        return (\n            this.advancedFilterExpressionService.getExpressionOperator(this.baseCellDataType, operator)?.numOperands ??\n            0\n        );\n    }\n\n    private destroyOperandPill(): void {\n        delete (this.filterModel as any).filter;\n        this.getGui().removeChild(this.eOperandPill!.getGui());\n        this.destroyBean(this.eOperandPill);\n        this.eOperandPill = undefined;\n    }\n\n    private validate(): void {\n        let validationMessage = null;\n        if (!_exists(this.getColumnKey())) {\n            validationMessage = this.advancedFilterExpressionService.translate(\n                'advancedFilterBuilderValidationSelectColumn'\n            );\n        } else if (!_exists(this.getOperatorKey())) {\n            validationMessage = this.advancedFilterExpressionService.translate(\n                'advancedFilterBuilderValidationSelectOption'\n            );\n        } else if (this.numOperands > 0 && !_exists(this.getOperandDisplayValue())) {\n            validationMessage = this.advancedFilterExpressionService.translate(\n                'advancedFilterBuilderValidationEnterValue'\n            );\n        }\n\n        this.item.valid = !validationMessage;\n        if (validationMessage !== this.validationMessage) {\n            this.validationMessage = validationMessage;\n            this.dispatchLocalEvent({\n                type: 'advancedFilterBuilderValidChanged',\n            });\n        }\n    }\n\n    private getDefaultColumnDisplayValue(): string {\n        return this.advancedFilterExpressionService.translate('advancedFilterBuilderSelectColumn');\n    }\n\n    private getDefaultOptionSelectValue(): string {\n        return this.advancedFilterExpressionService.translate('advancedFilterBuilderSelectOption');\n    }\n}\n", "import type { BeanCollection, FieldValueEvent, WithoutGridCommon } from '@ag-grid-community/core';\nimport {\n    AgInputDateField,\n    AgInputNumberField,\n    AgInputTextField,\n    Component,\n    KeyCode,\n    RefPlaceholder,\n    _exists,\n    _setAriaDescribedBy,\n    _setAriaLabel,\n    _setDisplayed,\n    _stopPropagationForAgGrid,\n} from '@ag-grid-community/core';\n\nimport type { AdvancedFilterExpressionService } from '../advancedFilterExpressionService';\n\nexport type InputPillCompEvent = 'fieldValueChanged';\nexport class InputPillComp extends Component<InputPillCompEvent> {\n    private advancedFilterExpressionService: AdvancedFilterExpressionService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.advancedFilterExpressionService = beans.advancedFilterExpressionService as AdvancedFilterExpressionService;\n    }\n\n    private readonly ePill: HTMLElement = RefPlaceholder;\n    private readonly eLabel: HTMLElement = RefPlaceholder;\n\n    private eEditor: AgInputTextField | undefined;\n    private value: string;\n\n    constructor(\n        private readonly params: {\n            value: string;\n            cssClass: string;\n            type: 'text' | 'number' | 'date';\n            ariaLabel: string;\n        }\n    ) {\n        super(/* html */ `\n            <div class=\"ag-advanced-filter-builder-pill-wrapper\" role=\"presentation\">\n                <div data-ref=\"ePill\" class=\"ag-advanced-filter-builder-pill\" role=\"button\">\n                    <span data-ref=\"eLabel\" class=\"ag-advanced-filter-builder-pill-display\"></span>\n                </div>\n            </div>\n        `);\n        this.value = params.value;\n    }\n\n    public postConstruct(): void {\n        const { cssClass, ariaLabel } = this.params;\n\n        this.ePill.classList.add(cssClass);\n        this.activateTabIndex([this.ePill]);\n\n        this.eLabel.id = `${this.getCompId()}`;\n        _setAriaDescribedBy(this.ePill, this.eLabel.id);\n        _setAriaLabel(this.ePill, ariaLabel);\n\n        this.renderValue();\n\n        this.addManagedListeners(this.ePill, {\n            click: (event: MouseEvent) => {\n                event.preventDefault();\n                this.showEditor();\n            },\n            keydown: (event: KeyboardEvent) => {\n                switch (event.key) {\n                    case KeyCode.ENTER:\n                        event.preventDefault();\n                        _stopPropagationForAgGrid(event);\n                        this.showEditor();\n                        break;\n                }\n            },\n        });\n        this.addDestroyFunc(() => this.destroyBean(this.eEditor));\n    }\n\n    public override getFocusableElement(): HTMLElement {\n        return this.ePill;\n    }\n\n    private showEditor(): void {\n        if (this.eEditor) {\n            return;\n        }\n        _setDisplayed(this.ePill, false);\n        this.eEditor = this.createEditorComp(this.params.type);\n        this.eEditor.setValue(this.value);\n        const eEditorGui = this.eEditor.getGui();\n        this.eEditor.addManagedElementListeners(eEditorGui, {\n            keydown: (event: KeyboardEvent) => {\n                switch (event.key) {\n                    case KeyCode.ENTER:\n                        event.preventDefault();\n                        _stopPropagationForAgGrid(event);\n                        this.updateValue(true);\n                        break;\n                    case KeyCode.ESCAPE:\n                        event.preventDefault();\n                        _stopPropagationForAgGrid(event);\n                        this.hideEditor(true);\n                        break;\n                }\n            },\n            focusout: () => this.updateValue(false),\n        });\n        this.getGui().appendChild(eEditorGui);\n        this.eEditor.getFocusableElement().focus();\n    }\n\n    private createEditorComp(\n        type: 'text' | 'number' | 'date'\n    ): AgInputTextField | AgInputNumberField | AgInputDateField {\n        let comp;\n        switch (type) {\n            case 'text':\n                comp = new AgInputTextField();\n                break;\n            case 'number':\n                comp = new AgInputNumberField();\n                break;\n            case 'date':\n                comp = new AgInputDateField();\n                break;\n        }\n        return this.createBean(comp);\n    }\n\n    private hideEditor(keepFocus: boolean): void {\n        const { eEditor } = this;\n        if (!eEditor) {\n            return;\n        }\n        this.eEditor = undefined;\n        this.getGui().removeChild(eEditor.getGui());\n        this.destroyBean(eEditor);\n        _setDisplayed(this.ePill, true);\n        if (keepFocus) {\n            this.ePill.focus();\n        }\n    }\n\n    private renderValue(): void {\n        let value: string;\n        this.eLabel.classList.remove(\n            'ag-advanced-filter-builder-value-empty',\n            'ag-advanced-filter-builder-value-number',\n            'ag-advanced-filter-builder-value-text'\n        );\n        if (!_exists(this.value)) {\n            value = this.advancedFilterExpressionService.translate('advancedFilterBuilderEnterValue');\n            this.eLabel.classList.add('ag-advanced-filter-builder-value-empty');\n        } else if (this.params.type === 'number') {\n            value = this.value;\n            this.eLabel.classList.add('ag-advanced-filter-builder-value-number');\n        } else {\n            value = `\"${this.value}\"`;\n            this.eLabel.classList.add('ag-advanced-filter-builder-value-text');\n        }\n        this.eLabel.innerText = value;\n    }\n\n    private updateValue(keepFocus: boolean): void {\n        if (!this.eEditor) {\n            return;\n        }\n        const value = this.eEditor!.getValue() ?? '';\n        this.dispatchLocalEvent<WithoutGridCommon<FieldValueEvent>>({\n            type: 'fieldValueChanged',\n            value,\n        });\n        this.value = value;\n        this.renderValue();\n        this.hideEditor(keepFocus);\n    }\n}\n", "import type { BeanCollection, JoinAdvancedFilterModel } from '@ag-grid-community/core';\nimport { Component } from '@ag-grid-community/core';\n\nimport type { AdvancedFilterExpressionService } from '../advancedFilterExpressionService';\nimport type {\n    AdvancedFilterBuilderEvents,\n    AdvancedFilterBuilderItem,\n    CreatePillParams,\n} from './iAdvancedFilterBuilder';\nimport type { InputPillComp } from './inputPillComp';\nimport type { SelectPillComp } from './selectPillComp';\n\nexport class JoinPillWrapperComp extends Component<AdvancedFilterBuilderEvents> {\n    private advancedFilterExpressionService: AdvancedFilterExpressionService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.advancedFilterExpressionService = beans.advancedFilterExpressionService as AdvancedFilterExpressionService;\n    }\n\n    private filterModel: JoinAdvancedFilterModel;\n    private ePill: SelectPillComp | InputPillComp;\n\n    constructor() {\n        super(/* html */ `\n            <div class=\"ag-advanced-filter-builder-item-condition\" role=\"presentation\"></div>\n        `);\n    }\n\n    public init(params: {\n        item: AdvancedFilterBuilderItem;\n        createPill: (params: CreatePillParams) => SelectPillComp | InputPillComp;\n    }): void {\n        const { item, createPill } = params;\n        const filterModel = item.filterModel as JoinAdvancedFilterModel;\n        this.filterModel = filterModel;\n\n        this.ePill = createPill({\n            key: filterModel.type,\n            displayValue: this.advancedFilterExpressionService.parseJoinOperator(filterModel),\n            cssClass: 'ag-advanced-filter-builder-join-pill',\n            isSelect: true,\n            getEditorParams: () => ({\n                values: this.advancedFilterExpressionService.getJoinOperatorAutocompleteEntries(),\n            }),\n            update: (key) => (filterModel.type = key as any),\n            pickerAriaLabelKey: 'ariaLabelAdvancedFilterBuilderJoinSelectField',\n            pickerAriaLabelValue: 'Advanced Filter Builder Join Operator Select Field',\n            ariaLabel: this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderJoinOperator'),\n        });\n        this.getGui().appendChild(this.ePill.getGui());\n        this.addDestroyFunc(() => this.destroyBean(this.ePill));\n    }\n\n    public getDragName(): string {\n        return this.advancedFilterExpressionService.parseJoinOperator(this.filterModel);\n    }\n\n    public getAriaLabel(): string {\n        return `${this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderGroupItem')} ${this.getDragName()}`;\n    }\n\n    public getValidationMessage(): string | null {\n        return null;\n    }\n\n    public override getFocusableElement(): HTMLElement {\n        return this.ePill.getFocusableElement();\n    }\n}\n", "import type { RichSelectParams } from '@ag-grid-community/core';\nimport {\n    AgInputTextFieldSelector,\n    _setAriaLabel,\n    _setAriaLabelledBy,\n    _stopPropagationForAgGrid,\n} from '@ag-grid-community/core';\nimport { AgRichSelect } from '@ag-grid-enterprise/core';\n\nimport type { AutocompleteEntry } from '../autocomplete/autocompleteParams';\n\nexport interface SelectPillParams extends RichSelectParams<AutocompleteEntry> {\n    getEditorParams: () => { values?: any[] };\n    wrapperClassName: string;\n    ariaLabel: string;\n}\n\nexport class SelectPillComp extends AgRichSelect<AutocompleteEntry> {\n    constructor(private readonly params: SelectPillParams) {\n        super({\n            ...params,\n            template: /* html */ `\n                <div class=\"ag-picker-field ag-advanced-filter-builder-pill-wrapper\" role=\"presentation\">\n                    <div data-ref=\"eLabel\"></div>\n                    <div data-ref=\"eWrapper\" class=\"ag-wrapper ag-advanced-filter-builder-pill ag-picker-collapsed\">\n                        <div data-ref=\"eDisplayField\" class=\"ag-picker-field-display ag-advanced-filter-builder-pill-display\"></div>\n                        <ag-input-text-field data-ref=\"eInput\" class=\"ag-rich-select-field-input\"></ag-input-text-field>\n                        <span data-ref=\"eDeselect\" class=\"ag-rich-select-deselect-button ag-picker-field-icon\" role=\"presentation\"></span>\n                        <div data-ref=\"eIcon\" class=\"ag-picker-field-icon\" aria-hidden=\"true\"></div>\n                    </div>\n                </div>`,\n            agComponents: [AgInputTextFieldSelector],\n        });\n    }\n\n    public override getFocusableElement(): HTMLElement {\n        return this.eWrapper;\n    }\n\n    public override showPicker(): void {\n        // avoid focus handling issues with multiple rich selects\n        setTimeout(() => super.showPicker());\n    }\n\n    public override hidePicker(): void {\n        // avoid focus handling issues with multiple rich selects\n        setTimeout(() => super.hidePicker());\n    }\n\n    public override postConstruct(): void {\n        super.postConstruct();\n\n        const { wrapperClassName, ariaLabel } = this.params;\n\n        this.eWrapper.classList.add(wrapperClassName);\n        _setAriaLabelledBy(this.eWrapper, '');\n        _setAriaLabel(this.eWrapper, ariaLabel);\n    }\n\n    protected override createPickerComponent() {\n        if (!this.values) {\n            const { values } = this.params.getEditorParams();\n            this.values = values!;\n            const key = (this.value as AutocompleteEntry).key;\n            const value = values!.find((value) => value.key === key) ?? {\n                key,\n                displayValue: (this.value as AutocompleteEntry).displayValue,\n            };\n            this.value = value;\n        }\n        return super.createPickerComponent();\n    }\n\n    protected override onEnterKeyDown(event: KeyboardEvent): void {\n        _stopPropagationForAgGrid(event);\n        if (this.isPickerDisplayed) {\n            super.onEnterKeyDown(event);\n        } else {\n            event.preventDefault();\n            this.showPicker();\n        }\n    }\n}\n", "import type { AdvancedFilterModel } from '@ag-grid-community/core';\n\nimport type { ADVANCED_FILTER_LOCALE_TEXT } from './advancedFilterLocaleText';\nimport type { AutocompleteEntry, AutocompleteListParams } from './autocomplete/autocompleteParams';\nimport { ColFilterExpressionParser } from './colFilterExpressionParser';\nimport { findMatch } from './filterExpressionOperators';\nimport type {\n    AutocompleteUpdate,\n    FilterExpressionFunction,\n    FilterExpressionFunctionParams,\n    FilterExpressionParserParams,\n    FilterExpressionValidationError,\n} from './filterExpressionUtils';\nimport { checkAndUpdateExpression, findEndPosition, getSearchString, updateExpression } from './filterExpressionUtils';\n\nclass OperatorParser {\n    private operators: string[] = [];\n    private parsedOperator: 'AND' | 'OR';\n    private operatorStartPositions: number[] = [];\n    private operatorEndPositions: (number | undefined)[] = [];\n    private activeOperator: number = 0;\n    private validationError: FilterExpressionValidationError | null = null;\n\n    constructor(private params: FilterExpressionParserParams) {}\n\n    public parseExpression(i: number): number {\n        this.operators.push('');\n        this.operatorStartPositions.push(i);\n        this.operatorEndPositions.push(undefined);\n        const { expression } = this.params;\n        while (i < expression.length) {\n            const char = expression[i];\n            if (char === ' ') {\n                const isComplete = this.parseOperator(i - 1);\n                if (isComplete) {\n                    this.activeOperator++;\n                    return i - 1;\n                } else {\n                    this.operators[this.activeOperator] += char;\n                }\n            } else {\n                this.operators[this.activeOperator] += char;\n            }\n            i++;\n        }\n        this.parseOperator(i - 1);\n\n        return i;\n    }\n\n    public isValid(): boolean {\n        return !this.validationError && (!this.operators.length || !!this.parsedOperator);\n    }\n\n    public getValidationError(): FilterExpressionValidationError | null {\n        return this.validationError;\n    }\n\n    public getFunction(): '&&' | '||' {\n        return this.parsedOperator === 'OR' ? '||' : '&&';\n    }\n\n    public getModel(): 'AND' | 'OR' {\n        return this.parsedOperator === 'OR' ? 'OR' : 'AND';\n    }\n\n    public getAutocompleteListParams(position: number, operatorIndex?: number): AutocompleteListParams {\n        let searchString: string;\n        if (operatorIndex == null) {\n            searchString = '';\n        } else {\n            const operator = this.operators[operatorIndex];\n            const operatorEndPosition = this.operatorEndPositions[operatorIndex];\n            searchString = getSearchString(\n                operator,\n                position,\n                operatorEndPosition == null ? this.params.expression.length : operatorEndPosition + 1\n            );\n        }\n        let entries = this.params.advancedFilterExpressionService.getJoinOperatorAutocompleteEntries();\n        if (operatorIndex || (operatorIndex == null && this.activeOperator)) {\n            // if operator already chosen, don't allow other operators\n            entries = entries.filter(({ key }) => key === this.parsedOperator);\n        }\n        return this.params.advancedFilterExpressionService.generateAutocompleteListParams(\n            entries,\n            'join',\n            searchString\n        );\n    }\n\n    public updateExpression(\n        position: number,\n        updateEntry: AutocompleteEntry,\n        operatorIndex: number\n    ): AutocompleteUpdate {\n        let { expression } = this.params;\n        const updatedValuePart = updateEntry.displayValue ?? updateEntry.key;\n        if (operatorIndex === 0) {\n            // need to update all others\n            for (let i = this.operatorEndPositions.length - 1; i > 0; i--) {\n                const operatorEndPosition = this.operatorEndPositions[i];\n                if (operatorEndPosition == null) {\n                    continue;\n                }\n                expression = updateExpression(\n                    expression,\n                    this.operatorStartPositions[i],\n                    operatorEndPosition,\n                    updatedValuePart\n                ).updatedValue;\n            }\n        }\n        // if we don't have a start position, haven't typed anything yet, so use current position\n        const startPosition =\n            this.operatorStartPositions.length > operatorIndex ? this.operatorStartPositions[operatorIndex] : position;\n        const endPosition =\n            (this.operatorEndPositions.length > operatorIndex ? this.operatorEndPositions[operatorIndex] : undefined) ??\n            findEndPosition(expression, position, true).endPosition;\n        return updateExpression(expression, startPosition, endPosition, updatedValuePart, true);\n    }\n\n    public getNumOperators(): number {\n        return this.operators.length;\n    }\n\n    public getLastOperatorEndPosition(): number | undefined {\n        return this.operatorEndPositions[this.operatorEndPositions.length - 1];\n    }\n\n    private parseOperator(endPosition: number): boolean {\n        const operator = this.operators.length > this.activeOperator ? this.operators[this.activeOperator] : '';\n        const joinOperators = this.params.advancedFilterExpressionService.getExpressionJoinOperators();\n        const parsedValue = findMatch(operator, joinOperators, (v) => v) as 'AND' | 'OR';\n        if (parsedValue) {\n            // exact match\n            this.operatorEndPositions[this.activeOperator] = endPosition;\n            const displayValue = joinOperators[parsedValue];\n            if (this.activeOperator) {\n                if (parsedValue !== this.parsedOperator) {\n                    if (!this.validationError) {\n                        this.validationError = {\n                            message: this.params.advancedFilterExpressionService.translate(\n                                'advancedFilterValidationJoinOperatorMismatch'\n                            ),\n                            startPosition: endPosition - operator.length + 1,\n                            endPosition,\n                        };\n                    }\n                    return false;\n                }\n            } else {\n                this.parsedOperator = parsedValue;\n            }\n            if (operator !== displayValue) {\n                checkAndUpdateExpression(this.params, operator, displayValue, endPosition);\n                this.operators[this.activeOperator] = displayValue;\n            }\n            return true;\n        } else if (parsedValue === null) {\n            // partial match\n            return false;\n        } else {\n            // no match\n            if (!this.validationError) {\n                this.validationError = {\n                    message: this.params.advancedFilterExpressionService.translate(\n                        'advancedFilterValidationInvalidJoinOperator'\n                    ),\n                    startPosition: endPosition - operator.length + 1,\n                    endPosition,\n                };\n            }\n            return true;\n        }\n    }\n}\n\nexport class JoinFilterExpressionParser {\n    private expectingExpression: boolean = true;\n    private expectingOperator: boolean = false;\n    private expressionParsers: (JoinFilterExpressionParser | ColFilterExpressionParser)[] = [];\n    private operatorParser: OperatorParser = new OperatorParser(this.params);\n    private endPosition: number;\n    private missingEndBracket: boolean = false;\n    private extraEndBracket: boolean = false;\n\n    constructor(\n        private params: FilterExpressionParserParams,\n        public readonly startPosition: number\n    ) {}\n\n    public parseExpression(): number {\n        let i = this.startPosition;\n        const { expression } = this.params;\n        while (i < expression.length) {\n            const char = expression[i];\n            if (char === '(' && !this.expectingOperator) {\n                const nestedParser = new JoinFilterExpressionParser(this.params, i + 1);\n                i = nestedParser.parseExpression();\n                this.expressionParsers.push(nestedParser);\n                this.expectingExpression = false;\n                this.expectingOperator = true;\n            } else if (char === ')') {\n                this.endPosition = i - 1;\n                if (this.startPosition === 0) {\n                    this.extraEndBracket = true;\n                }\n                return i;\n            } else if (char === ' ') {\n                // ignore extra whitespace\n            } else if (this.expectingExpression) {\n                const nestedParser = new ColFilterExpressionParser(this.params, i);\n                i = nestedParser.parseExpression();\n                this.expressionParsers.push(nestedParser);\n                this.expectingExpression = false;\n                this.expectingOperator = true;\n            } else if (this.expectingOperator) {\n                i = this.operatorParser.parseExpression(i);\n                this.expectingOperator = false;\n                this.expectingExpression = true;\n            }\n            i++;\n        }\n        if (this.startPosition > 0) {\n            this.missingEndBracket = true;\n        }\n\n        return i;\n    }\n\n    public isValid(): boolean {\n        return (\n            !this.missingEndBracket &&\n            !this.extraEndBracket &&\n            this.expressionParsers.length === this.operatorParser.getNumOperators() + 1 &&\n            this.operatorParser.isValid() &&\n            this.expressionParsers.every((expressionParser) => expressionParser.isValid())\n        );\n    }\n\n    public getValidationError(): FilterExpressionValidationError | null {\n        const operatorError = this.operatorParser.getValidationError();\n        for (let i = 0; i < this.expressionParsers.length; i++) {\n            const expressionError = this.expressionParsers[i].getValidationError();\n            if (expressionError) {\n                return operatorError && operatorError.startPosition < expressionError.startPosition\n                    ? operatorError\n                    : expressionError;\n            }\n        }\n        if (operatorError) {\n            return operatorError;\n        }\n        if (this.extraEndBracket) {\n            return {\n                message: this.params.advancedFilterExpressionService.translate(\n                    'advancedFilterValidationExtraEndBracket'\n                ),\n                startPosition: this.endPosition + 1,\n                endPosition: this.endPosition + 1,\n            };\n        }\n        let translateKey: keyof typeof ADVANCED_FILTER_LOCALE_TEXT | undefined;\n        if (this.expressionParsers.length === this.operatorParser.getNumOperators()) {\n            translateKey = 'advancedFilterValidationMissingCondition';\n        } else if (this.missingEndBracket) {\n            translateKey = 'advancedFilterValidationMissingEndBracket';\n        }\n        if (translateKey) {\n            return {\n                message: this.params.advancedFilterExpressionService.translate(translateKey),\n                startPosition: this.params.expression.length,\n                endPosition: this.params.expression.length,\n            };\n        }\n        return null;\n    }\n\n    public getFunctionString(params: FilterExpressionFunctionParams): string {\n        const hasMultipleExpressions = this.expressionParsers.length > 1;\n        const expression = this.expressionParsers\n            .map((expressionParser) => expressionParser.getFunctionString(params))\n            .join(` ${this.operatorParser.getFunction()} `);\n        return hasMultipleExpressions ? `(${expression})` : expression;\n    }\n\n    public getFunctionParsed(params: FilterExpressionFunctionParams): FilterExpressionFunction {\n        const operator = this.operatorParser.getFunction();\n        const funcs = this.expressionParsers.map((expressionParser) => expressionParser.getFunctionParsed(params));\n        const arrayFunc = operator === '&&' ? 'every' : 'some';\n        return (expressionProxy, node, p) => funcs[arrayFunc]((func) => func(expressionProxy, node, p));\n    }\n\n    public getAutocompleteListParams(position: number): AutocompleteListParams | undefined {\n        if (this.endPosition != null && position > this.endPosition + 1) {\n            return undefined;\n        }\n        if (!this.expressionParsers.length) {\n            return this.getColumnAutocompleteListParams();\n        }\n\n        const expressionParserIndex = this.getExpressionParserIndex(position);\n\n        if (expressionParserIndex == null) {\n            if (this.params.expression[position] === '(') {\n                return { enabled: false };\n            }\n            // positioned before the expression, so new expression\n            return this.getColumnAutocompleteListParams();\n        }\n\n        const expressionParser = this.expressionParsers[expressionParserIndex];\n\n        const autocompleteType = expressionParser.getAutocompleteListParams(position);\n\n        if (!autocompleteType) {\n            // beyond the end of the expression\n            if (expressionParserIndex! < this.expressionParsers.length - 1) {\n                // in the middle of two expressions\n                return this.operatorParser.getAutocompleteListParams(position, expressionParserIndex);\n            }\n            if (this.expressionParsers.length === this.operatorParser.getNumOperators()) {\n                const operatorEndPosition = this.operatorParser.getLastOperatorEndPosition();\n                return operatorEndPosition == null || position <= operatorEndPosition + 1\n                    ? this.operatorParser.getAutocompleteListParams(position, this.operatorParser.getNumOperators() - 1)\n                    : this.getColumnAutocompleteListParams();\n            }\n            if (this.params.expression[position - 1] === ')') {\n                return { enabled: false };\n            }\n            return this.operatorParser.getAutocompleteListParams(position);\n        }\n\n        return autocompleteType;\n    }\n\n    public updateExpression(\n        position: number,\n        updateEntry: AutocompleteEntry,\n        type?: string\n    ): AutocompleteUpdate | null {\n        const expression = this.params.expression;\n\n        const expressionParserIndex = this.getExpressionParserIndex(position);\n\n        if (expressionParserIndex == null) {\n            // positioned before the expression\n            const updatedValuePart =\n                type === 'column'\n                    ? this.params.advancedFilterExpressionService.getColumnValue(updateEntry)\n                    : updateEntry.displayValue ?? updateEntry.key;\n            return updateExpression(expression, this.startPosition, this.startPosition, updatedValuePart, true);\n        }\n\n        const expressionParser = this.expressionParsers[expressionParserIndex];\n\n        const updatedExpression = expressionParser.updateExpression(position, updateEntry, type);\n\n        if (updatedExpression == null) {\n            if (type === 'column') {\n                // beyond the end of the expression, just do simple update\n                return updateExpression(\n                    expression,\n                    position,\n                    expression.length - 1,\n                    this.params.advancedFilterExpressionService.getColumnValue(updateEntry),\n                    true\n                );\n            } else if (this.endPosition != null && position > this.endPosition + 1) {\n                return null;\n            } else {\n                return this.operatorParser.updateExpression(position, updateEntry, expressionParserIndex);\n            }\n        }\n        return updatedExpression;\n    }\n\n    public getModel(): AdvancedFilterModel {\n        if (this.expressionParsers.length > 1) {\n            return {\n                filterType: 'join',\n                type: this.operatorParser.getModel(),\n                conditions: this.expressionParsers.map((parser) => parser.getModel()),\n            };\n        } else {\n            return this.expressionParsers[0].getModel();\n        }\n    }\n\n    private getColumnAutocompleteListParams(): AutocompleteListParams {\n        return this.params.advancedFilterExpressionService.generateAutocompleteListParams(\n            this.params.advancedFilterExpressionService.getColumnAutocompleteEntries(),\n            'column',\n            ''\n        );\n    }\n\n    private getExpressionParserIndex(position: number): number | undefined {\n        let expressionParserIndex: number | undefined;\n\n        for (let i = 0; i < this.expressionParsers.length; i++) {\n            const expressionParserToCheck = this.expressionParsers[i];\n            if (expressionParserToCheck.startPosition > position) {\n                break;\n            }\n            expressionParserIndex = i;\n        }\n\n        return expressionParserIndex;\n    }\n}\n", "import type { AdvancedFilterModel } from '@ag-grid-community/core';\n\nimport type { AutocompleteEntry, AutocompleteListParams } from './autocomplete/autocompleteParams';\nimport type {\n    AutocompleteUpdate,\n    FilterExpressionFunction,\n    FilterExpressionFunctionParams,\n    FilterExpressionParserParams,\n} from './filterExpressionUtils';\nimport { JoinFilterExpressionParser } from './joinFilterExpressionParser';\n\nexport class FilterExpressionParser {\n    private joinExpressionParser: JoinFilterExpressionParser;\n    private valid: boolean = false;\n\n    constructor(private params: FilterExpressionParserParams) {}\n\n    public parseExpression(): string {\n        this.joinExpressionParser = new JoinFilterExpressionParser(this.params, 0);\n        const i = this.joinExpressionParser.parseExpression();\n        this.valid = i >= this.params.expression.length - 1 && this.joinExpressionParser.isValid();\n        return this.params.expression;\n    }\n\n    public isValid(): boolean {\n        return this.valid;\n    }\n\n    public getValidationMessage(): string | null {\n        const error = this.joinExpressionParser.getValidationError();\n        if (!error) {\n            return null;\n        }\n        const { message, startPosition, endPosition } = error;\n        return startPosition < this.params.expression.length\n            ? this.params.advancedFilterExpressionService.translate('advancedFilterValidationMessage', [\n                  message,\n                  this.params.expression.slice(startPosition, endPosition + 1).trim(),\n              ])\n            : this.params.advancedFilterExpressionService.translate('advancedFilterValidationMessageAtEnd', [message]);\n    }\n\n    public getFunctionString(): {\n        functionString: string;\n        params: FilterExpressionFunctionParams;\n    } {\n        const params = this.createFunctionParams();\n        return {\n            functionString: `return ${this.joinExpressionParser.getFunctionString(params)};`,\n            params,\n        };\n    }\n\n    public getFunctionParsed(): {\n        expressionFunction: FilterExpressionFunction;\n        params: FilterExpressionFunctionParams;\n    } {\n        const params = this.createFunctionParams();\n        return {\n            expressionFunction: this.joinExpressionParser.getFunctionParsed(params),\n            params,\n        };\n    }\n\n    public getAutocompleteListParams(position: number): AutocompleteListParams {\n        return this.joinExpressionParser.getAutocompleteListParams(position) ?? { enabled: false };\n    }\n\n    public updateExpression(position: number, updateEntry: AutocompleteEntry, type?: string): AutocompleteUpdate {\n        return this.joinExpressionParser.updateExpression(position, updateEntry, type)!;\n    }\n\n    public getModel(): AdvancedFilterModel | null {\n        return this.isValid() ? this.joinExpressionParser.getModel() : null;\n    }\n\n    private createFunctionParams(): FilterExpressionFunctionParams {\n        return {\n            operands: [],\n            operators: [],\n            evaluatorParams: [],\n        };\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.3.1';\n"],
  "mappings": "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",
  "names": ["displayValue", "BeanStub", "_exists", "BeanStub", "_removeFromParent", "Component", "RefPlaceholder", "_makeNull", "Component", "KeyCode", "RefPlaceholder", "_exists", "_exists", "_exists", "Component", "RefPlaceholder", "KeyCode", "Component", "RefPlaceholder", "_makeNull", "Component", "KeyCode", "Component", "KeyCode", "Component", "RefPlaceholder", "TooltipFeature", "_exists", "_setDisabled", "VirtualList", "BeanStub", "Component", "RefPlaceholder", "_setAriaLabel", "AgInputTextFieldSelector", "_setDisplayed", "BeanStub", "KeyCode", "_stopPropagationForAgGrid", "Component", "RefPlaceholder", "_setAriaLabel", "DragSourceType", "KeyCode", "RefPlaceholder", "TooltipFeature", "_createIconNoSpan", "_setAriaLabel", "_setAriaLevel", "_setDisplayed", "_stopPropagationForAgGrid", "Component", "_exists", "key", "Component", "KeyCode", "RefPlaceholder", "_exists", "_setAriaLabel", "_setDisplayed", "_stopPropagationForAgGrid", "Component", "AgInputTextFieldSelector", "_setAriaLabel", "_setAriaLabelledBy", "_stopPropagationForAgGrid", "AgRichSelect", "value", "RefPlaceholder", "_setDisplayed", "_createIconNoSpan", "_setAriaLevel", "eTreeLine", "TooltipFeature", "KeyCode", "_stopPropagationForAgGrid", "_setAriaLabel", "key", "DragSourceType", "Component", "RefPlaceholder", "VirtualList", "TooltipFeature", "filterModel", "treeLines", "item", "destinationIndex", "_setDisabled", "_exists", "BeanStub", "_removeFromParent", "OperatorParser", "BeanStub", "model", "expression", "_exists"]
}
