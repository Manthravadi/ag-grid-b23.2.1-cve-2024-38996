{
  "version": 3,
  "sources": ["../../src/filtersToolPanelModule.ts", "../../src/filterToolPanel/filtersToolPanel.ts", "../../src/filterToolPanel/agFiltersToolPanelHeader.ts", "../../src/filterToolPanel/agFiltersToolPanelList.ts", "../../src/filterToolPanel/toolPanelFilterComp.ts", "../../src/filterToolPanel/toolPanelFilterGroupComp.ts", "../../src/version.ts"],
  "sourcesContent": ["import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames, _ColumnFilterModule } from '@ag-grid-community/core';\nimport { EnterpriseCoreModule } from '@ag-grid-enterprise/core';\nimport { SideBarModule } from '@ag-grid-enterprise/side-bar';\n\nimport { FiltersToolPanel } from './filterToolPanel/filtersToolPanel';\nimport { VERSION } from './version';\n\nexport const FiltersToolPanelModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.FiltersToolPanelModule,\n    beans: [],\n    userComponents: [{ name: 'agFiltersToolPanel', classImp: FiltersToolPanel }],\n    dependantModules: [SideBarModule, EnterpriseCoreModule, _ColumnFilterModule],\n};\n", "import type {\n    ColDef,\n    ColGroupDef,\n    FiltersToolPanelState,\n    IFiltersToolPanel,\n    IToolPanelComp,\n    IToolPanelFiltersCompParams,\n    IToolPanelParams,\n} from '@ag-grid-community/core';\nimport { Component, RefPlaceholder } from '@ag-grid-community/core';\n\nimport type { AgFiltersToolPanelHeader } from './agFiltersToolPanelHeader';\nimport { AgFiltersToolPanelHeaderSelector } from './agFiltersToolPanelHeader';\nimport type { AgFiltersToolPanelList } from './agFiltersToolPanelList';\nimport { AgFiltersToolPanelListSelector } from './agFiltersToolPanelList';\n\nexport interface ToolPanelFiltersCompParams<TData = any, TContext = any>\n    extends IToolPanelParams<TData, TContext, FiltersToolPanelState>,\n        IToolPanelFiltersCompParams {}\n\nexport class FiltersToolPanel extends Component implements IFiltersToolPanel, IToolPanelComp {\n    private readonly filtersToolPanelHeaderPanel: AgFiltersToolPanelHeader = RefPlaceholder;\n    private readonly filtersToolPanelListPanel: AgFiltersToolPanelList = RefPlaceholder;\n\n    private initialised = false;\n    private params: ToolPanelFiltersCompParams;\n    private listenerDestroyFuncs: (() => void)[] = [];\n\n    constructor() {\n        super(\n            /* html */ `<div class=\"ag-filter-toolpanel\">\n            <ag-filters-tool-panel-header data-ref=\"filtersToolPanelHeaderPanel\"></ag-filters-tool-panel-header>\n            <ag-filters-tool-panel-list data-ref=\"filtersToolPanelListPanel\"></ag-filters-tool-panel-list>\n         </div>`,\n            [AgFiltersToolPanelHeaderSelector, AgFiltersToolPanelListSelector]\n        );\n    }\n\n    public init(params: ToolPanelFiltersCompParams): void {\n        // if initialised is true, means this is a refresh\n        if (this.initialised) {\n            this.listenerDestroyFuncs.forEach((func) => func());\n            this.listenerDestroyFuncs = [];\n        }\n\n        this.initialised = true;\n\n        const defaultParams: Partial<ToolPanelFiltersCompParams> = this.gos.addGridCommonParams({\n            suppressExpandAll: false,\n            suppressFilterSearch: false,\n            suppressSyncLayoutWithGrid: false,\n        });\n        this.params = {\n            ...defaultParams,\n            ...params,\n        };\n\n        this.filtersToolPanelHeaderPanel.init(this.params);\n        this.filtersToolPanelListPanel.init(this.params);\n\n        const hideExpand = this.params.suppressExpandAll;\n        const hideSearch = this.params.suppressFilterSearch;\n\n        if (hideExpand && hideSearch) {\n            this.filtersToolPanelHeaderPanel.setDisplayed(false);\n        }\n\n        // this is necessary to prevent a memory leak while refreshing the tool panel\n        this.listenerDestroyFuncs.push(\n            ...this.addManagedListeners(this.filtersToolPanelHeaderPanel, {\n                expandAll: this.onExpandAll.bind(this),\n                collapseAll: this.onCollapseAll.bind(this),\n                searchChanged: this.onSearchChanged.bind(this),\n            }),\n            ...this.addManagedListeners(this.filtersToolPanelListPanel, {\n                filterExpanded: this.onFilterExpanded.bind(this),\n                groupExpanded: this.onGroupExpanded.bind(this),\n            })\n        );\n    }\n\n    // lazy initialise the panel\n    public override setVisible(visible: boolean): void {\n        super.setDisplayed(visible);\n        if (visible && !this.initialised) {\n            this.init(this.params);\n        }\n    }\n\n    public onExpandAll(): void {\n        this.filtersToolPanelListPanel.expandFilterGroups(true);\n    }\n\n    public onCollapseAll(): void {\n        this.filtersToolPanelListPanel.expandFilterGroups(false);\n    }\n\n    private onSearchChanged(event: any): void {\n        this.filtersToolPanelListPanel.performFilterSearch(event.searchText);\n    }\n\n    public setFilterLayout(colDefs: (ColDef | ColGroupDef)[]): void {\n        this.filtersToolPanelListPanel.setFiltersLayout(colDefs);\n    }\n\n    private onFilterExpanded(): void {\n        this.params.onStateUpdated();\n    }\n\n    private onGroupExpanded(event: any): void {\n        this.filtersToolPanelHeaderPanel.setExpandState(event.state);\n        this.params.onStateUpdated();\n    }\n\n    public expandFilterGroups(groupIds?: string[]): void {\n        this.filtersToolPanelListPanel.expandFilterGroups(true, groupIds);\n    }\n\n    public collapseFilterGroups(groupIds?: string[]): void {\n        this.filtersToolPanelListPanel.expandFilterGroups(false, groupIds);\n    }\n\n    public expandFilters(colIds?: string[]): void {\n        this.filtersToolPanelListPanel.expandFilters(true, colIds);\n    }\n\n    public collapseFilters(colIds?: string[]): void {\n        this.filtersToolPanelListPanel.expandFilters(false, colIds);\n    }\n\n    public syncLayoutWithGrid(): void {\n        this.filtersToolPanelListPanel.syncFilterLayout();\n    }\n\n    public refresh(params: ToolPanelFiltersCompParams): boolean {\n        this.init(params);\n        return true;\n    }\n\n    public getState(): FiltersToolPanelState {\n        return this.filtersToolPanelListPanel.getExpandedFiltersAndGroups();\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public override destroy(): void {\n        super.destroy();\n    }\n}\n", "import type {\n    AgColumn,\n    AgEvent,\n    AgInputTextField,\n    BeanCollection,\n    ColumnModel,\n    ComponentSelector,\n} from '@ag-grid-community/core';\nimport {\n    AgInputTextFieldSelector,\n    Component,\n    RefPlaceholder,\n    _createIconNoSpan,\n    _debounce,\n    _setDisplayed,\n} from '@ag-grid-community/core';\n\nimport type { ToolPanelFiltersCompParams } from './filtersToolPanel';\n\nexport enum EXPAND_STATE {\n    EXPANDED,\n    COLLAPSED,\n    INDETERMINATE,\n}\nexport type AgFiltersToolPanelHeaderEvent = 'collapseAll' | 'expandAll' | 'searchChanged';\nexport class AgFiltersToolPanelHeader extends Component<AgFiltersToolPanelHeaderEvent> {\n    private columnModel: ColumnModel;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n    }\n\n    private readonly eExpand: Element = RefPlaceholder;\n    private readonly eFilterTextField: AgInputTextField = RefPlaceholder;\n\n    private eExpandChecked: Element;\n    private eExpandUnchecked: Element;\n    private eExpandIndeterminate: Element;\n\n    private onSearchTextChangedDebounced: () => void;\n\n    private currentExpandState: EXPAND_STATE;\n\n    private params: ToolPanelFiltersCompParams;\n\n    public postConstruct(): void {\n        this.setTemplate(\n            /* html */\n            `<div class=\"ag-filter-toolpanel-search\" role=\"presentation\">\n                <div data-ref=\"eExpand\" class=\"ag-filter-toolpanel-expand\"></div>\n                <ag-input-text-field data-ref=\"eFilterTextField\" class=\"ag-filter-toolpanel-search-input\"></ag-input-text-field>\n            </div>`,\n            [AgInputTextFieldSelector]\n        );\n\n        const translate = this.localeService.getLocaleTextFunc();\n\n        this.eFilterTextField\n            .setAutoComplete(false)\n            .setInputAriaLabel(translate('ariaFilterColumnsInput', 'Filter Columns Input'))\n            .onValueChange(this.onSearchTextChanged.bind(this));\n\n        this.createExpandIcons();\n        this.setExpandState(EXPAND_STATE.EXPANDED);\n        this.addManagedElementListeners(this.eExpand, { click: this.onExpandClicked.bind(this) });\n        this.addManagedEventListeners({ newColumnsLoaded: this.showOrHideOptions.bind(this) });\n    }\n\n    public init(params: ToolPanelFiltersCompParams): void {\n        this.params = params;\n\n        if (this.columnModel.isReady()) {\n            this.showOrHideOptions();\n        }\n    }\n\n    private createExpandIcons() {\n        this.eExpand.appendChild((this.eExpandChecked = _createIconNoSpan('columnSelectOpen', this.gos)!));\n        this.eExpand.appendChild((this.eExpandUnchecked = _createIconNoSpan('columnSelectClosed', this.gos)!));\n        this.eExpand.appendChild(\n            (this.eExpandIndeterminate = _createIconNoSpan('columnSelectIndeterminate', this.gos)!)\n        );\n    }\n\n    // we only show expand / collapse if we are showing filters\n    private showOrHideOptions(): void {\n        const showFilterSearch = !this.params.suppressFilterSearch;\n        const showExpand = !this.params.suppressExpandAll;\n        const translate = this.localeService.getLocaleTextFunc();\n\n        this.eFilterTextField.setInputPlaceholder(translate('searchOoo', 'Search...'));\n\n        const isFilterGroupPresent = (col: AgColumn) => col.getOriginalParent() && col.isFilterAllowed();\n        const filterGroupsPresent = this.columnModel.getCols().some(isFilterGroupPresent);\n\n        _setDisplayed(this.eFilterTextField.getGui(), showFilterSearch);\n        _setDisplayed(this.eExpand, showExpand && filterGroupsPresent);\n    }\n\n    private onSearchTextChanged(): void {\n        if (!this.onSearchTextChangedDebounced) {\n            this.onSearchTextChangedDebounced = _debounce(() => {\n                this.dispatchLocalEvent({ type: 'searchChanged', searchText: this.eFilterTextField.getValue() });\n            }, 300);\n        }\n\n        this.onSearchTextChangedDebounced();\n    }\n\n    private onExpandClicked(): void {\n        const event: AgEvent<AgFiltersToolPanelHeaderEvent> =\n            this.currentExpandState === EXPAND_STATE.EXPANDED ? { type: 'collapseAll' } : { type: 'expandAll' };\n        this.dispatchLocalEvent(event);\n    }\n\n    public setExpandState(state: EXPAND_STATE): void {\n        this.currentExpandState = state;\n\n        _setDisplayed(this.eExpandChecked, this.currentExpandState === EXPAND_STATE.EXPANDED);\n        _setDisplayed(this.eExpandUnchecked, this.currentExpandState === EXPAND_STATE.COLLAPSED);\n        _setDisplayed(this.eExpandIndeterminate, this.currentExpandState === EXPAND_STATE.INDETERMINATE);\n    }\n}\n\nexport const AgFiltersToolPanelHeaderSelector: ComponentSelector = {\n    selector: 'AG-FILTERS-TOOL-PANEL-HEADER',\n    component: AgFiltersToolPanelHeader,\n};\n", "import type {\n    AbstractColDef,\n    AgColumn,\n    AgProvidedColumnGroup,\n    BeanCollection,\n    ColumnModel,\n    ComponentSelector,\n    FiltersToolPanelState,\n} from '@ag-grid-community/core';\nimport {\n    Component,\n    _clearElement,\n    _exists,\n    _flatten,\n    _includes,\n    _mergeDeep,\n    _setAriaLabel,\n    _warnOnce,\n    isProvidedColumnGroup,\n} from '@ag-grid-community/core';\nimport type { ToolPanelColDefService } from '@ag-grid-enterprise/side-bar';\n\nimport { EXPAND_STATE } from './agFiltersToolPanelHeader';\nimport type { ToolPanelFiltersCompParams } from './filtersToolPanel';\nimport { ToolPanelFilterComp } from './toolPanelFilterComp';\nimport type { ToolPanelFilterItem } from './toolPanelFilterGroupComp';\nimport { ToolPanelFilterGroupComp } from './toolPanelFilterGroupComp';\n\nexport type AgFiltersToolPanelListEvent = 'filterExpanded' | 'groupExpanded';\nexport class AgFiltersToolPanelList extends Component<AgFiltersToolPanelListEvent> {\n    private toolPanelColDefService: ToolPanelColDefService;\n    private columnModel: ColumnModel;\n\n    public wireBeans(beans: BeanCollection) {\n        this.toolPanelColDefService = beans.toolPanelColDefService as ToolPanelColDefService;\n        this.columnModel = beans.columnModel;\n    }\n\n    private initialised = false;\n    private hasLoadedInitialState = false;\n    private isInitialState = false;\n\n    private params: ToolPanelFiltersCompParams;\n    private filterGroupComps: ToolPanelFilterGroupComp[] = [];\n\n    // null is used to check if we should search filters when new cols are loaded\n    private searchFilterText: string | null;\n\n    // If a column drag is happening, we suppress handling the event until it has completed\n    private suppressOnColumnsChanged: boolean = false;\n    private onColumnsChangedPending: boolean = false;\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-filter-list-panel\"></div>`);\n    }\n\n    public init(params: ToolPanelFiltersCompParams): void {\n        this.initialised = true;\n\n        const defaultParams: Partial<ToolPanelFiltersCompParams> = this.gos.addGridCommonParams({\n            suppressExpandAll: false,\n            suppressFilterSearch: false,\n            suppressSyncLayoutWithGrid: false,\n        });\n        _mergeDeep(defaultParams, params);\n        this.params = defaultParams as ToolPanelFiltersCompParams;\n\n        if (!this.params.suppressSyncLayoutWithGrid) {\n            this.addManagedEventListeners({ columnMoved: () => this.onColumnsChanged() });\n        }\n\n        this.addManagedEventListeners({\n            newColumnsLoaded: () => this.onColumnsChanged(),\n            toolPanelVisibleChanged: (event) => {\n                // when re-entering the filters tool panel we need to refresh the virtual lists in the set filters in case\n                // filters have been changed elsewhere, i.e. via an api call.\n                if (event.key === 'filters') {\n                    this.refreshFilters(event.visible);\n                }\n            },\n            dragStarted: () => {\n                this.suppressOnColumnsChanged = true;\n            },\n            dragStopped: () => {\n                this.suppressOnColumnsChanged = false;\n                if (this.onColumnsChangedPending) {\n                    this.onColumnsChangedPending = false;\n                    this.onColumnsChanged();\n                }\n            },\n        });\n\n        if (this.columnModel.isReady()) {\n            this.onColumnsChanged();\n        }\n    }\n\n    public onColumnsChanged(): void {\n        if (this.suppressOnColumnsChanged) {\n            this.onColumnsChangedPending = true;\n            return;\n        }\n        const pivotModeActive = this.columnModel.isPivotMode();\n        const shouldSyncColumnLayoutWithGrid = !this.params.suppressSyncLayoutWithGrid && !pivotModeActive;\n        shouldSyncColumnLayoutWithGrid ? this.syncFilterLayout() : this.buildTreeFromProvidedColumnDefs();\n        this.refreshAriaLabel();\n    }\n\n    public syncFilterLayout(): void {\n        this.toolPanelColDefService.syncLayoutWithGrid(this.setFiltersLayout.bind(this));\n        this.refreshAriaLabel();\n    }\n\n    private buildTreeFromProvidedColumnDefs(): void {\n        const columnTree = this.columnModel.getColDefColTree();\n        this.recreateFilters(columnTree);\n    }\n\n    public setFiltersLayout(colDefs: AbstractColDef[]): void {\n        const columnTree = this.toolPanelColDefService.createColumnTree(colDefs);\n        this.recreateFilters(columnTree);\n    }\n\n    private recreateFilters(columnTree: (AgColumn | AgProvidedColumnGroup)[]): void {\n        // Underlying filter comp/element won't get recreated if the column still exists (the element just gets detached/re-attached).\n        // We can therefore restore focus if an element in the filter tool panel was focused.\n        const activeElement = this.gos.getActiveDomElement() as HTMLElement;\n\n        if (!this.hasLoadedInitialState) {\n            this.hasLoadedInitialState = true;\n            this.isInitialState = !!this.params.initialState;\n        }\n\n        // Want to restore the expansion state where possible.\n        const expansionState = this.getExpansionState();\n\n        this.destroyFilters();\n\n        this.filterGroupComps = this.recursivelyAddComps(columnTree, 0, expansionState) as ToolPanelFilterGroupComp[];\n\n        const len = this.filterGroupComps.length;\n\n        if (len) {\n            // skip the destroy function because this will be managed\n            // by the `destroyFilters` function\n            this.filterGroupComps.forEach((comp) => this.appendChild(comp));\n            this.setFirstAndLastVisible(0, len - 1);\n        }\n\n        // perform search if searchFilterText exists\n        if (_exists(this.searchFilterText)) {\n            this.searchFilters(this.searchFilterText);\n        }\n\n        // notify header of expand\n        this.fireExpandedEvent();\n\n        // We only care about restoring focus if the originally focused element was in the filter tool panel.\n        if (this.getGui().contains(activeElement)) {\n            activeElement.focus();\n        }\n\n        this.isInitialState = false;\n        this.refreshAriaLabel();\n    }\n\n    private recursivelyAddComps(\n        tree: (AgColumn | AgProvidedColumnGroup)[],\n        depth: number,\n        expansionState: Map<string, boolean>\n    ): (ToolPanelFilterGroupComp | ToolPanelFilterComp)[] {\n        return _flatten(\n            tree.map((child) => {\n                if (isProvidedColumnGroup(child)) {\n                    return _flatten(this.recursivelyAddFilterGroupComps(child, depth, expansionState)!);\n                }\n\n                const column = child;\n\n                if (!this.shouldDisplayFilter(column)) {\n                    return [];\n                }\n\n                const hideFilterCompHeader = depth === 0;\n                const filterComp = new ToolPanelFilterComp(hideFilterCompHeader, () => this.onFilterExpanded());\n                this.createBean(filterComp);\n\n                filterComp.setColumn(column);\n                if (expansionState.get(column.getId())) {\n                    // Default state on creation and desired state are both collapsed. Expand if expanded before.\n                    filterComp.expand();\n                }\n\n                if (depth > 0) {\n                    return filterComp;\n                }\n\n                const filterGroupComp = this.createBean(\n                    new ToolPanelFilterGroupComp(column, [filterComp], this.onGroupExpanded.bind(this), depth, true)\n                );\n                filterGroupComp.addCssClassToTitleBar('ag-filter-toolpanel-header');\n                if (!expansionState.get(filterGroupComp.getFilterGroupId())) {\n                    // Default state on creation is expanded. Desired initial state is collapsed. Always collapse unless expanded before.\n                    filterGroupComp.collapse();\n                }\n                return filterGroupComp;\n            })\n        );\n    }\n\n    private refreshAriaLabel(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const filterListName = translate('ariaFilterPanelList', 'Filter List');\n        const localeFilters = translate('filters', 'Filters');\n\n        const eGui = this.getGui();\n        const groupSelector = '.ag-filter-toolpanel-group-wrapper';\n        const itemSelector = '.ag-filter-toolpanel-group-item';\n        const hiddenSelector = '.ag-hidden';\n        const visibleItems = eGui.querySelectorAll(`${itemSelector}:not(${groupSelector}, ${hiddenSelector})`);\n\n        const totalVisibleItems = visibleItems.length;\n\n        _setAriaLabel(this.getAriaElement(), `${filterListName} ${totalVisibleItems} ${localeFilters}`);\n    }\n\n    private recursivelyAddFilterGroupComps(\n        columnGroup: AgProvidedColumnGroup,\n        depth: number,\n        expansionState: Map<string, boolean>\n    ): (ToolPanelFilterGroupComp | ToolPanelFilterComp)[] | undefined {\n        if (!this.filtersExistInChildren(columnGroup.getChildren())) {\n            return;\n        }\n\n        const colGroupDef = columnGroup.getColGroupDef();\n        if (colGroupDef && colGroupDef.suppressFiltersToolPanel) {\n            return [];\n        }\n\n        const newDepth = columnGroup.isPadding() ? depth : depth + 1;\n        const childFilterComps = _flatten(\n            this.recursivelyAddComps(columnGroup.getChildren(), newDepth, expansionState)\n        );\n\n        if (columnGroup.isPadding()) {\n            return childFilterComps;\n        }\n\n        const filterGroupComp = new ToolPanelFilterGroupComp(\n            columnGroup,\n            childFilterComps,\n            this.onGroupExpanded.bind(this),\n            depth,\n            false\n        );\n\n        this.createBean(filterGroupComp);\n        filterGroupComp.addCssClassToTitleBar('ag-filter-toolpanel-header');\n        const expansionStateValue = expansionState.get(filterGroupComp.getFilterGroupId());\n        if ((this.isInitialState && !expansionStateValue) || expansionStateValue === false) {\n            // Default state on creation is expanded. Desired initial state is expanded. Only collapse if collapsed before or using initial state.\n            filterGroupComp.collapse();\n        }\n        return [filterGroupComp];\n    }\n\n    private filtersExistInChildren(tree: (AgColumn | AgProvidedColumnGroup)[]): boolean {\n        return tree.some((child) => {\n            if (isProvidedColumnGroup(child)) {\n                return this.filtersExistInChildren(child.getChildren());\n            }\n\n            return this.shouldDisplayFilter(child);\n        });\n    }\n\n    private shouldDisplayFilter(column: AgColumn) {\n        const suppressFiltersToolPanel = column.getColDef() && column.getColDef().suppressFiltersToolPanel;\n        return column.isFilterAllowed() && !suppressFiltersToolPanel;\n    }\n\n    private getExpansionState(): Map<string, boolean> {\n        const expansionState: Map<string, boolean> = new Map();\n\n        if (this.isInitialState) {\n            const { expandedColIds, expandedGroupIds } = this.params.initialState as FiltersToolPanelState;\n            expandedColIds.forEach((id) => expansionState.set(id, true));\n            expandedGroupIds.forEach((id) => expansionState.set(id, true));\n            return expansionState;\n        }\n\n        const recursiveGetExpansionState = (filterGroupComp: ToolPanelFilterGroupComp) => {\n            expansionState.set(filterGroupComp.getFilterGroupId(), filterGroupComp.isExpanded());\n            filterGroupComp.getChildren().forEach((child) => {\n                if (child instanceof ToolPanelFilterGroupComp) {\n                    recursiveGetExpansionState(child);\n                } else {\n                    expansionState.set(child.getColumn().getId(), child.isExpanded());\n                }\n            });\n        };\n\n        this.filterGroupComps.forEach(recursiveGetExpansionState);\n\n        return expansionState;\n    }\n\n    // we don't support refreshing, but must implement because it's on the tool panel interface\n    public refresh(): void {}\n\n    // lazy initialise the panel\n    public override setVisible(visible: boolean): void {\n        super.setDisplayed(visible);\n        if (visible && !this.initialised) {\n            this.init(this.params);\n        }\n    }\n\n    public expandFilterGroups(expand: boolean, groupIds?: string[]): void {\n        const updatedGroupIds: string[] = [];\n\n        const updateGroupExpandState = (filterGroup: ToolPanelFilterGroupComp) => {\n            const groupId = filterGroup.getFilterGroupId();\n            const shouldExpandOrCollapse = !groupIds || _includes(groupIds, groupId);\n            if (shouldExpandOrCollapse) {\n                // don't expand 'column groups', i.e. top level columns wrapped in a group\n                if (expand && filterGroup.isColumnGroup()) {\n                    filterGroup.expand();\n                } else {\n                    filterGroup.collapse();\n                }\n                updatedGroupIds.push(groupId);\n            }\n\n            // recursively look for more groups to expand / collapse\n            filterGroup.getChildren().forEach((child) => {\n                if (child instanceof ToolPanelFilterGroupComp) {\n                    updateGroupExpandState(child);\n                }\n            });\n        };\n\n        this.filterGroupComps.forEach(updateGroupExpandState);\n\n        // update header expand / collapse icon\n        this.onGroupExpanded();\n\n        if (groupIds) {\n            const unrecognisedGroupIds = groupIds.filter((groupId) => updatedGroupIds.indexOf(groupId) < 0);\n            if (unrecognisedGroupIds.length > 0) {\n                _warnOnce('unable to find groups for these supplied groupIds:', unrecognisedGroupIds);\n            }\n        }\n    }\n\n    public expandFilters(expand: boolean, colIds?: string[]): void {\n        const updatedColIds: string[] = [];\n\n        const updateGroupExpandState = (filterComp: ToolPanelFilterGroupComp | ToolPanelFilterComp): boolean => {\n            if (filterComp instanceof ToolPanelFilterGroupComp) {\n                let anyChildrenChanged = false;\n                filterComp.getChildren().forEach((child) => {\n                    const childUpdated = updateGroupExpandState(child);\n                    if (childUpdated) {\n                        if (expand) {\n                            filterComp.expand();\n                            anyChildrenChanged = true;\n                        } else if (!filterComp.isColumnGroup()) {\n                            // we only collapse columns wrapped in groups\n                            filterComp.collapse();\n                        }\n                    }\n                });\n                return anyChildrenChanged;\n            }\n\n            const colId = filterComp.getColumn().getColId();\n            const updateFilterExpandState = !colIds || _includes(colIds, colId);\n\n            if (updateFilterExpandState) {\n                expand ? filterComp.expand() : filterComp.collapse();\n                updatedColIds.push(colId);\n            }\n\n            return updateFilterExpandState;\n        };\n\n        this.filterGroupComps.forEach(updateGroupExpandState);\n\n        // update header expand / collapse icon\n        this.onGroupExpanded();\n\n        if (colIds) {\n            const unrecognisedColIds = colIds.filter((colId) => updatedColIds.indexOf(colId) < 0);\n            if (unrecognisedColIds.length > 0) {\n                _warnOnce('unable to find columns for these supplied colIds:' + unrecognisedColIds);\n            }\n        }\n    }\n\n    private onGroupExpanded(): void {\n        this.fireExpandedEvent();\n    }\n\n    private onFilterExpanded(): void {\n        this.dispatchLocalEvent({ type: 'filterExpanded' });\n    }\n\n    private fireExpandedEvent(): void {\n        let expandedCount = 0;\n        let notExpandedCount = 0;\n\n        const updateExpandCounts = (filterGroup: ToolPanelFilterGroupComp) => {\n            if (!filterGroup.isColumnGroup()) {\n                return;\n            }\n\n            filterGroup.isExpanded() ? expandedCount++ : notExpandedCount++;\n\n            filterGroup.getChildren().forEach((child) => {\n                if (child instanceof ToolPanelFilterGroupComp) {\n                    updateExpandCounts(child);\n                }\n            });\n        };\n\n        this.filterGroupComps.forEach(updateExpandCounts);\n\n        let state: EXPAND_STATE;\n        if (expandedCount > 0 && notExpandedCount > 0) {\n            state = EXPAND_STATE.INDETERMINATE;\n        } else if (notExpandedCount > 0) {\n            state = EXPAND_STATE.COLLAPSED;\n        } else {\n            state = EXPAND_STATE.EXPANDED;\n        }\n\n        this.dispatchLocalEvent({ type: 'groupExpanded', state: state });\n    }\n\n    public performFilterSearch(searchText: string) {\n        this.searchFilterText = _exists(searchText) ? searchText.toLowerCase() : null;\n        this.searchFilters(this.searchFilterText);\n    }\n\n    private searchFilters(searchFilter: string | null) {\n        const passesFilter = (groupName: string) => {\n            return !_exists(searchFilter) || groupName.toLowerCase().indexOf(searchFilter) !== -1;\n        };\n\n        const recursivelySearch = (filterItem: ToolPanelFilterItem, parentPasses: boolean): boolean => {\n            if (!(filterItem instanceof ToolPanelFilterGroupComp)) {\n                return passesFilter(filterItem.getColumnFilterName() || '');\n            }\n\n            const children = filterItem.getChildren();\n            const groupNamePasses = passesFilter(filterItem.getFilterGroupName());\n\n            // if group or parent already passed - ensure this group and all children are visible\n            const alreadyPassed = parentPasses || groupNamePasses;\n            if (alreadyPassed) {\n                // ensure group visible\n                filterItem.hideGroup(false);\n\n                // ensure all children are visible\n                for (let i = 0; i < children.length; i++) {\n                    recursivelySearch(children[i], alreadyPassed);\n                    filterItem.hideGroupItem(false, i);\n                }\n                return true;\n            }\n\n            // hide group item filters\n            let anyChildPasses = false;\n            children.forEach((child: ToolPanelFilterItem, index: number) => {\n                const childPasses = recursivelySearch(child, parentPasses);\n                filterItem.hideGroupItem(!childPasses, index);\n                if (childPasses) {\n                    anyChildPasses = true;\n                }\n            });\n\n            // hide group if no children pass\n            filterItem.hideGroup(!anyChildPasses);\n\n            return anyChildPasses;\n        };\n\n        let firstVisible: number | undefined;\n        let lastVisible: number | undefined;\n\n        this.filterGroupComps.forEach((filterGroup, idx) => {\n            recursivelySearch(filterGroup, false);\n\n            if (firstVisible === undefined) {\n                if (!filterGroup.containsCssClass('ag-hidden')) {\n                    firstVisible = idx;\n                    lastVisible = idx;\n                }\n            } else if (!filterGroup.containsCssClass('ag-hidden') && lastVisible !== idx) {\n                lastVisible = idx;\n            }\n        });\n\n        this.setFirstAndLastVisible(firstVisible, lastVisible);\n        this.refreshAriaLabel();\n    }\n\n    private setFirstAndLastVisible(firstIdx?: number, lastIdx?: number) {\n        this.filterGroupComps.forEach((filterGroup, idx) => {\n            filterGroup.removeCssClass('ag-first-group-visible');\n            filterGroup.removeCssClass('ag-last-group-visible');\n\n            if (idx === firstIdx) {\n                filterGroup.addCssClass('ag-first-group-visible');\n            }\n            if (idx === lastIdx) {\n                filterGroup.addCssClass('ag-last-group-visible');\n            }\n        });\n    }\n\n    private refreshFilters(isDisplayed: boolean) {\n        this.filterGroupComps.forEach((filterGroupComp) => filterGroupComp.refreshFilters(isDisplayed));\n    }\n\n    public getExpandedFiltersAndGroups(): { expandedGroupIds: string[]; expandedColIds: string[] } {\n        const expandedGroupIds: string[] = [];\n        const expandedColIds: Set<string> = new Set();\n\n        const getExpandedFiltersAndGroups = (filterComp: ToolPanelFilterGroupComp | ToolPanelFilterComp) => {\n            if (filterComp instanceof ToolPanelFilterGroupComp) {\n                filterComp.getChildren().forEach((child) => getExpandedFiltersAndGroups(child));\n                const groupId = filterComp.getFilterGroupId();\n                if (filterComp.isExpanded() && !expandedColIds.has(groupId)) {\n                    expandedGroupIds.push(groupId);\n                }\n            } else {\n                if (filterComp.isExpanded()) {\n                    expandedColIds.add(filterComp.getColumn().getColId());\n                }\n            }\n        };\n\n        this.filterGroupComps.forEach(getExpandedFiltersAndGroups);\n\n        return { expandedGroupIds, expandedColIds: Array.from(expandedColIds) };\n    }\n\n    private destroyFilters() {\n        this.filterGroupComps = this.destroyBeans(this.filterGroupComps);\n        _clearElement(this.getGui());\n    }\n\n    public override destroy() {\n        this.destroyFilters();\n        super.destroy();\n    }\n}\n\nexport const AgFiltersToolPanelListSelector: ComponentSelector = {\n    selector: 'AG-FILTERS-TOOL-PANEL-LIST',\n    component: AgFiltersToolPanelList,\n};\n", "import type {\n    AgColumn,\n    BeanCollection,\n    ColumnNameService,\n    FilterManager,\n    FilterOpenedEvent,\n    IFilterComp,\n} from '@ag-grid-community/core';\nimport {\n    Component,\n    FilterWrapperComp,\n    KeyCode,\n    RefPlaceholder,\n    _clearElement,\n    _createIconNoSpan,\n    _loadTemplate,\n    _setAriaExpanded,\n    _setDisplayed,\n} from '@ag-grid-community/core';\n\nexport type ToolPanelFilterCompEvent = 'filterChanged';\nexport class ToolPanelFilterComp extends Component<ToolPanelFilterCompEvent> {\n    private filterManager?: FilterManager;\n    private columnNameService: ColumnNameService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.filterManager = beans.filterManager;\n        this.columnNameService = beans.columnNameService;\n    }\n\n    private readonly eFilterToolPanelHeader: HTMLElement = RefPlaceholder;\n    private readonly eFilterName: HTMLElement = RefPlaceholder;\n    private readonly agFilterToolPanelBody: HTMLElement = RefPlaceholder;\n    private readonly eFilterIcon: Element = RefPlaceholder;\n    private readonly eExpand: Element = RefPlaceholder;\n\n    private eExpandChecked: Element;\n    private eExpandUnchecked: Element;\n    private hideHeader: boolean;\n    private column: AgColumn;\n    private expanded: boolean = false;\n    private underlyingFilter: IFilterComp | null;\n    private filterWrapperComp?: FilterWrapperComp;\n\n    constructor(\n        hideHeader: boolean,\n        private readonly expandedCallback: () => void\n    ) {\n        super(/* html */ `\n            <div class=\"ag-filter-toolpanel-instance\">\n                <div class=\"ag-filter-toolpanel-header ag-filter-toolpanel-instance-header\" data-ref=\"eFilterToolPanelHeader\" role=\"button\" aria-expanded=\"false\">\n                    <div data-ref=\"eExpand\" class=\"ag-filter-toolpanel-expand\"></div>\n                    <span data-ref=\"eFilterName\" class=\"ag-header-cell-text\"></span>\n                    <span data-ref=\"eFilterIcon\" class=\"ag-header-icon ag-filter-icon ag-filter-toolpanel-instance-header-icon\" aria-hidden=\"true\"></span>\n                </div>\n                <div class=\"ag-filter-toolpanel-instance-body ag-filter\" data-ref=\"agFilterToolPanelBody\"></div>\n            </div>`);\n        this.hideHeader = hideHeader;\n    }\n\n    public postConstruct() {\n        this.eExpandChecked = _createIconNoSpan('columnSelectOpen', this.gos)!;\n        this.eExpandUnchecked = _createIconNoSpan('columnSelectClosed', this.gos)!;\n        this.eExpand.appendChild(this.eExpandChecked);\n        this.eExpand.appendChild(this.eExpandUnchecked);\n    }\n\n    public setColumn(column: AgColumn): void {\n        this.column = column;\n        this.eFilterName.innerText =\n            this.columnNameService.getDisplayNameForColumn(this.column, 'filterToolPanel', false) || '';\n        this.addManagedListeners(this.eFilterToolPanelHeader, {\n            click: this.toggleExpanded.bind(this),\n            keydown: this.onKeyDown.bind(this),\n        });\n        this.addManagedEventListeners({ filterOpened: this.onFilterOpened.bind(this) });\n        this.addInIcon('filter', this.eFilterIcon, this.column);\n\n        _setDisplayed(this.eFilterIcon, this.isFilterActive(), { skipAriaHidden: true });\n        _setDisplayed(this.eExpandChecked, false);\n\n        if (this.hideHeader) {\n            _setDisplayed(this.eFilterToolPanelHeader, false);\n            this.eFilterToolPanelHeader.removeAttribute('tabindex');\n        } else {\n            this.eFilterToolPanelHeader.setAttribute('tabindex', '0');\n        }\n\n        this.addManagedListeners(this.column, { filterChanged: this.onFilterChanged.bind(this) });\n    }\n\n    private onKeyDown(e: KeyboardEvent): void {\n        const { key } = e;\n        const { ENTER, SPACE, LEFT, RIGHT } = KeyCode;\n\n        if (key !== ENTER && key !== SPACE && key !== LEFT && key !== RIGHT) {\n            return;\n        }\n\n        e.preventDefault();\n\n        if (key === ENTER || key === SPACE) {\n            this.toggleExpanded();\n        } else if (key === KeyCode.LEFT) {\n            this.collapse();\n        } else {\n            this.expand();\n        }\n    }\n\n    public getColumn(): AgColumn {\n        return this.column;\n    }\n\n    public getColumnFilterName(): string | null {\n        return this.columnNameService.getDisplayNameForColumn(this.column, 'filterToolPanel', false);\n    }\n\n    public addCssClassToTitleBar(cssClass: string) {\n        this.eFilterToolPanelHeader.classList.add(cssClass);\n    }\n\n    private addInIcon(iconName: string, eParent: Element, column: AgColumn): void {\n        if (eParent == null) {\n            return;\n        }\n\n        const eIcon = _createIconNoSpan(iconName, this.gos, column)!;\n        eParent.appendChild(eIcon);\n    }\n\n    public isFilterActive(): boolean {\n        return !!this.filterManager?.isFilterActive(this.column);\n    }\n\n    private onFilterChanged(): void {\n        _setDisplayed(this.eFilterIcon, this.isFilterActive(), { skipAriaHidden: true });\n        this.dispatchLocalEvent({ type: 'filterChanged' });\n    }\n\n    public toggleExpanded(): void {\n        this.expanded ? this.collapse() : this.expand();\n    }\n\n    public expand(): void {\n        if (this.expanded) {\n            return;\n        }\n\n        this.expanded = true;\n        _setAriaExpanded(this.eFilterToolPanelHeader, true);\n\n        _setDisplayed(this.eExpandChecked, true);\n        _setDisplayed(this.eExpandUnchecked, false);\n\n        this.addFilterElement();\n\n        this.expandedCallback();\n    }\n\n    private addFilterElement(suppressFocus?: boolean): void {\n        const filterPanelWrapper = _loadTemplate(/* html */ `<div class=\"ag-filter-toolpanel-instance-filter\"></div>`);\n        const comp = this.createManagedBean(new FilterWrapperComp(this.column, 'TOOLBAR'));\n        this.filterWrapperComp = comp;\n\n        if (!comp.hasFilter()) {\n            return;\n        }\n\n        comp.getFilter()?.then((filter) => {\n            this.underlyingFilter = filter;\n\n            if (!filter) {\n                return;\n            }\n            filterPanelWrapper.appendChild(comp.getGui());\n\n            this.agFilterToolPanelBody.appendChild(filterPanelWrapper);\n\n            comp.afterGuiAttached({ container: 'toolPanel', suppressFocus });\n        });\n    }\n\n    public collapse(): void {\n        if (!this.expanded) {\n            return;\n        }\n\n        this.expanded = false;\n        _setAriaExpanded(this.eFilterToolPanelHeader, false);\n        this.removeFilterElement();\n\n        _setDisplayed(this.eExpandChecked, false);\n        _setDisplayed(this.eExpandUnchecked, true);\n\n        this.filterWrapperComp?.afterGuiDetached();\n        this.destroyBean(this.filterWrapperComp);\n\n        this.expandedCallback();\n    }\n\n    private removeFilterElement(): void {\n        _clearElement(this.agFilterToolPanelBody);\n    }\n\n    public isExpanded(): boolean {\n        return this.expanded;\n    }\n\n    public refreshFilter(isDisplayed: boolean): void {\n        if (!this.expanded) {\n            return;\n        }\n\n        const filter = this.underlyingFilter as any;\n\n        if (!filter) {\n            return;\n        }\n\n        if (isDisplayed) {\n            // set filters should be updated when the filter has been changed elsewhere, i.e. via api. Note that we can't\n            // use 'afterGuiAttached' to refresh the virtual list as it also focuses on the mini filter which changes the\n            // scroll position in the filter list panel\n            if (typeof filter.refreshVirtualList === 'function') {\n                filter.refreshVirtualList();\n            }\n        } else {\n            filter.afterGuiDetached?.();\n        }\n    }\n\n    private onFilterOpened(event: FilterOpenedEvent): void {\n        if (event.source !== 'COLUMN_MENU') {\n            return;\n        }\n        if (event.column !== this.column) {\n            return;\n        }\n        if (!this.expanded) {\n            return;\n        }\n\n        this.collapse();\n    }\n}\n", "import type {\n    AgColumn,\n    AgProvidedColumnGroup,\n    BeanCollection,\n    ColumnNameService,\n    FilterOpenedEvent,\n    ITooltipParams,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport {\n    Component,\n    RefPlaceholder,\n    _clearElement,\n    _createIconNoSpan,\n    isProvidedColumnGroup,\n} from '@ag-grid-community/core';\nimport type { AgGroupComponent, AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport { ToolPanelFilterComp } from './toolPanelFilterComp';\n\nexport type ToolPanelFilterItem = ToolPanelFilterGroupComp | ToolPanelFilterComp;\n\nexport class ToolPanelFilterGroupComp extends Component {\n    private columnNameService: ColumnNameService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnNameService = beans.columnNameService;\n    }\n\n    private filterGroupComp: AgGroupComponent = RefPlaceholder;\n\n    private readonly depth: number;\n    private readonly columnGroup: AgColumn | AgProvidedColumnGroup;\n    private readonly showingColumn: boolean;\n    private childFilterComps: (ToolPanelFilterGroupComp | ToolPanelFilterComp)[];\n    private expandedCallback: () => void;\n    private filterGroupName: string | null;\n\n    constructor(\n        columnGroup: AgColumn | AgProvidedColumnGroup,\n        childFilterComps: (ToolPanelFilterGroupComp | ToolPanelFilterComp)[],\n        expandedCallback: () => void,\n        depth: number,\n        showingColumn: boolean\n    ) {\n        super();\n        this.columnGroup = columnGroup;\n        this.childFilterComps = childFilterComps;\n        this.depth = depth;\n        this.expandedCallback = expandedCallback;\n        this.showingColumn = showingColumn;\n    }\n\n    public postConstruct(): void {\n        const groupParams: AgGroupComponentParams = {\n            cssIdentifier: 'filter-toolpanel',\n            direction: 'vertical',\n        };\n        this.setTemplate(\n            /* html */ `<div class=\"ag-filter-toolpanel-group-wrapper\">\n            <ag-group-component data-ref=\"filterGroupComp\"></ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector],\n            { filterGroupComp: groupParams }\n        );\n\n        this.setGroupTitle();\n        this.filterGroupComp.setAlignItems('stretch');\n\n        this.filterGroupComp.addCssClass(`ag-filter-toolpanel-group-level-${this.depth}`);\n        this.filterGroupComp.getGui().style.setProperty('--ag-indentation-level', String(this.depth));\n        this.filterGroupComp.addCssClassToTitleBar(`ag-filter-toolpanel-group-level-${this.depth}-header`);\n\n        this.childFilterComps.forEach((filterComp) => {\n            this.filterGroupComp.addItem(filterComp as Component);\n            filterComp.addCssClassToTitleBar(`ag-filter-toolpanel-group-level-${this.depth + 1}-header`);\n            filterComp.getGui().style.setProperty('--ag-indentation-level', String(this.depth + 1));\n        });\n\n        this.refreshFilterClass();\n        this.addExpandCollapseListeners();\n        this.addFilterChangedListeners();\n        this.setupTooltip();\n        this.addInIcon('filter');\n    }\n\n    private setupTooltip(): void {\n        // we don't show tooltips for groups, as when the group expands, it's div contains the columns which also\n        // have tooltips, so the tooltips would clash. Eg mouse over group, tooltip shows, mouse over column, another\n        // tooltip shows but cos we didn't leave the group the group tooltip remains. this should be fixed in the future,\n        // maybe the group shouldn't contain the children form a DOM perspective.\n        if (!this.showingColumn) {\n            return;\n        }\n\n        const isTooltipWhenTruncated = this.gos.get('tooltipShowMode') === 'whenTruncated';\n        let shouldDisplayTooltip: (() => boolean) | undefined;\n\n        if (isTooltipWhenTruncated) {\n            shouldDisplayTooltip = () => {\n                const eGui = this.filterGroupComp.getGui();\n                const eTitle = eGui.querySelector('.ag-group-title');\n\n                if (!eTitle) {\n                    return true;\n                } // show tooltip by default\n                return eTitle.scrollWidth > eTitle.clientWidth;\n            };\n        }\n\n        const refresh = () => {\n            const newTooltipText = (this.columnGroup as AgColumn).getColDef().headerTooltip;\n            this.setTooltip({ newTooltipText, location: 'filterToolPanelColumnGroup', shouldDisplayTooltip });\n        };\n\n        refresh();\n\n        this.addManagedEventListeners({ newColumnsLoaded: refresh });\n    }\n\n    public override getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        const res = super.getTooltipParams();\n        res.location = 'filterToolPanelColumnGroup';\n        return res;\n    }\n\n    public addCssClassToTitleBar(cssClass: string) {\n        this.filterGroupComp.addCssClassToTitleBar(cssClass);\n    }\n\n    public refreshFilters(isDisplayed: boolean) {\n        this.childFilterComps.forEach((filterComp) => {\n            if (filterComp instanceof ToolPanelFilterGroupComp) {\n                filterComp.refreshFilters(isDisplayed);\n            } else {\n                filterComp.refreshFilter(isDisplayed);\n            }\n        });\n    }\n\n    public isColumnGroup(): boolean {\n        return isProvidedColumnGroup(this.columnGroup);\n    }\n\n    public isExpanded(): boolean {\n        return this.filterGroupComp.isExpanded();\n    }\n\n    public getChildren(): ToolPanelFilterItem[] {\n        return this.childFilterComps;\n    }\n\n    public getFilterGroupName(): string {\n        return this.filterGroupName ? this.filterGroupName : '';\n    }\n\n    public getFilterGroupId(): string {\n        return this.columnGroup.getId();\n    }\n\n    public hideGroupItem(hide: boolean, index: number) {\n        this.filterGroupComp.hideItem(hide, index);\n    }\n\n    public hideGroup(hide: boolean) {\n        this.setDisplayed(!hide);\n    }\n\n    private addInIcon(iconName: string): void {\n        const eIcon = _createIconNoSpan(iconName, this.gos)!;\n        if (eIcon) {\n            eIcon.classList.add('ag-filter-toolpanel-group-instance-header-icon');\n        }\n        this.filterGroupComp.addTitleBarWidget(eIcon);\n    }\n\n    private forEachToolPanelFilterChild(action: (filterComp: ToolPanelFilterItem) => void) {\n        this.childFilterComps.forEach((filterComp) => {\n            if (filterComp instanceof ToolPanelFilterComp) {\n                action(filterComp);\n            }\n        });\n    }\n\n    private addExpandCollapseListeners() {\n        const expandListener = this.isColumnGroup()\n            ? () => this.expandedCallback()\n            : () => this.forEachToolPanelFilterChild((filterComp) => filterComp.expand());\n\n        const collapseListener = this.isColumnGroup()\n            ? () => this.expandedCallback()\n            : () => this.forEachToolPanelFilterChild((filterComp) => filterComp.collapse());\n\n        this.addManagedListeners(this.filterGroupComp, {\n            expanded: expandListener,\n            collapsed: collapseListener,\n        });\n    }\n\n    private getColumns(): AgColumn[] {\n        if (isProvidedColumnGroup(this.columnGroup)) {\n            return this.columnGroup.getLeafColumns();\n        }\n\n        return [this.columnGroup];\n    }\n\n    private addFilterChangedListeners() {\n        this.getColumns().forEach((column) => {\n            this.addManagedListeners(column, { filterChanged: () => this.refreshFilterClass() });\n        });\n\n        if (!isProvidedColumnGroup(this.columnGroup)) {\n            this.addManagedEventListeners({ filterOpened: this.onFilterOpened.bind(this) });\n        }\n    }\n\n    private refreshFilterClass(): void {\n        const columns = this.getColumns();\n\n        const anyChildFiltersActive = () => columns.some((col) => col.isFilterActive());\n        this.filterGroupComp.addOrRemoveCssClass('ag-has-filter', anyChildFiltersActive());\n    }\n\n    private onFilterOpened(event: FilterOpenedEvent): void {\n        // when a filter is opened elsewhere, i.e. column menu we close the filter comp so we also need to collapse\n        // the column group. This approach means we don't need to try and sync filter models on the same column.\n\n        if (event.source !== 'COLUMN_MENU') {\n            return;\n        }\n        if (event.column !== this.columnGroup) {\n            return;\n        }\n        if (!this.isExpanded()) {\n            return;\n        }\n\n        this.collapse();\n    }\n\n    public expand() {\n        this.filterGroupComp.toggleGroupExpand(true);\n    }\n\n    public collapse() {\n        this.filterGroupComp.toggleGroupExpand(false);\n    }\n\n    private setGroupTitle() {\n        this.filterGroupName = isProvidedColumnGroup(this.columnGroup)\n            ? this.getColumnGroupName(this.columnGroup)\n            : this.getColumnName(this.columnGroup);\n\n        this.filterGroupComp.setTitle(this.filterGroupName || '');\n    }\n\n    private getColumnGroupName(columnGroup: AgProvidedColumnGroup): string | null {\n        return this.columnNameService.getDisplayNameForProvidedColumnGroup(null, columnGroup, 'filterToolPanel');\n    }\n\n    private getColumnName(column: AgColumn): string | null {\n        return this.columnNameService.getDisplayNameForColumn(column, 'filterToolPanel', false);\n    }\n\n    private destroyFilters() {\n        this.childFilterComps = this.destroyBeans(this.childFilterComps);\n        _clearElement(this.getGui());\n    }\n\n    public override destroy() {\n        this.destroyFilters();\n        super.destroy();\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.3.1';\n"],
  "mappings": "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",
  "names": ["Component", "RefPlaceholder", "Component", "_clearElement", "isProvidedColumnGroup", "Component", "RefPlaceholder", "_createIconNoSpan", "_setDisplayed", "Component", "RefPlaceholder", "_clearElement", "_createIconNoSpan", "Component", "RefPlaceholder", "_createIconNoSpan", "_clearElement", "Component", "isProvidedColumnGroup", "_clearElement", "Component", "RefPlaceholder"]
}
