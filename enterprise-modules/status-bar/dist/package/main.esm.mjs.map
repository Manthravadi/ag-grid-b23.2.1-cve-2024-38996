{
  "version": 3,
  "sources": ["../../src/statusBarModule.ts", "../../src/statusBar/providedPanels/aggregationComp.ts", "../../src/statusBar/providedPanels/agNameValue.ts", "../../src/statusBar/providedPanels/filteredRowsComp.ts", "../../src/statusBar/providedPanels/selectedRowsComp.ts", "../../src/statusBar/providedPanels/totalAndFilteredRowsComp.ts", "../../src/statusBar/providedPanels/totalRowsComp.ts", "../../src/statusBar/statusBarApi.ts", "../../src/statusBar/statusBarService.ts", "../../src/statusBar/agStatusBar.ts", "../../src/version.ts"],
  "sourcesContent": ["import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames } from '@ag-grid-community/core';\nimport { EnterpriseCoreModule } from '@ag-grid-enterprise/core';\n\nimport { AggregationComp } from './statusBar/providedPanels/aggregationComp';\nimport { FilteredRowsComp } from './statusBar/providedPanels/filteredRowsComp';\nimport { SelectedRowsComp } from './statusBar/providedPanels/selectedRowsComp';\nimport { TotalAndFilteredRowsComp } from './statusBar/providedPanels/totalAndFilteredRowsComp';\nimport { TotalRowsComp } from './statusBar/providedPanels/totalRowsComp';\nimport { getStatusPanel } from './statusBar/statusBarApi';\nimport { StatusBarService } from './statusBar/statusBarService';\nimport { VERSION } from './version';\n\nexport const StatusBarCoreModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.StatusBarModule}-core`,\n    beans: [StatusBarService],\n    userComponents: [\n        { name: 'agAggregationComponent', classImp: AggregationComp },\n        { name: 'agSelectedRowCountComponent', classImp: SelectedRowsComp },\n        { name: 'agTotalRowCountComponent', classImp: TotalRowsComp },\n        { name: 'agFilteredRowCountComponent', classImp: FilteredRowsComp },\n        { name: 'agTotalAndFilteredRowCountComponent', classImp: TotalAndFilteredRowsComp },\n    ],\n    dependantModules: [EnterpriseCoreModule],\n};\n\nexport const StatusBarApiModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.StatusBarModule}-api`,\n    apiFunctions: {\n        getStatusPanel,\n    },\n    dependantModules: [StatusBarCoreModule],\n};\n\nexport const StatusBarModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.StatusBarModule,\n    dependantModules: [StatusBarCoreModule, StatusBarApiModule],\n};\n", "import type {\n    AgColumn,\n    AggregationStatusPanelAggFunc,\n    AggregationStatusPanelParams,\n    BeanCollection,\n    CellNavigationService,\n    CellPositionUtils,\n    IRangeService,\n    IRowModel,\n    IStatusPanelComp,\n    RowPosition,\n    RowPositionUtils,\n    ValueService,\n} from '@ag-grid-community/core';\nimport {\n    Component,\n    RefPlaceholder,\n    _exists,\n    _formatNumberTwoDecimalPlacesAndCommas,\n    _missing,\n    _missingOrEmpty,\n    _warnOnce,\n} from '@ag-grid-community/core';\n\nimport type { AgNameValue } from './agNameValue';\nimport { AgNameValueSelector } from './agNameValue';\n\nexport class AggregationComp extends Component implements IStatusPanelComp {\n    private valueService: ValueService;\n    private cellNavigationService: CellNavigationService;\n    private rowModel: IRowModel;\n    private cellPositionUtils: CellPositionUtils;\n    private rowPositionUtils: RowPositionUtils;\n    private rangeService?: IRangeService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.valueService = beans.valueService;\n        this.cellNavigationService = beans.cellNavigationService;\n        this.rowModel = beans.rowModel;\n        this.cellPositionUtils = beans.cellPositionUtils;\n        this.rowPositionUtils = beans.rowPositionUtils;\n        this.rangeService = beans.rangeService;\n    }\n\n    private readonly sumAggregationComp: AgNameValue = RefPlaceholder;\n    private readonly countAggregationComp: AgNameValue = RefPlaceholder;\n    private readonly minAggregationComp: AgNameValue = RefPlaceholder;\n    private readonly maxAggregationComp: AgNameValue = RefPlaceholder;\n    private readonly avgAggregationComp: AgNameValue = RefPlaceholder;\n\n    private params!: AggregationStatusPanelParams;\n\n    constructor() {\n        super(\n            /* html */ `<div class=\"ag-status-panel ag-status-panel-aggregations\">\n            <ag-name-value data-ref=\"avgAggregationComp\"></ag-name-value>\n            <ag-name-value data-ref=\"countAggregationComp\"></ag-name-value>\n            <ag-name-value data-ref=\"minAggregationComp\"></ag-name-value>\n            <ag-name-value data-ref=\"maxAggregationComp\"></ag-name-value>\n            <ag-name-value data-ref=\"sumAggregationComp\"></ag-name-value>\n        </div>`,\n            [AgNameValueSelector]\n        );\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public override destroy(): void {\n        super.destroy();\n    }\n\n    public postConstruct(): void {\n        if (!this.isValidRowModel()) {\n            _warnOnce(`agAggregationComponent should only be used with the client and server side row model.`);\n            return;\n        }\n\n        this.avgAggregationComp.setLabel('avg', 'Average');\n        this.countAggregationComp.setLabel('count', 'Count');\n        this.minAggregationComp.setLabel('min', 'Min');\n        this.maxAggregationComp.setLabel('max', 'Max');\n        this.sumAggregationComp.setLabel('sum', 'Sum');\n\n        this.addManagedEventListeners({\n            rangeSelectionChanged: this.onRangeSelectionChanged.bind(this),\n            modelUpdated: this.onRangeSelectionChanged.bind(this),\n        });\n    }\n\n    private isValidRowModel() {\n        // this component is only really useful with client or server side rowmodels\n        const rowModelType = this.rowModel.getType();\n        return rowModelType === 'clientSide' || rowModelType === 'serverSide';\n    }\n\n    public init(params: AggregationStatusPanelParams) {\n        this.params = params;\n    }\n\n    public refresh(params: AggregationStatusPanelParams): boolean {\n        this.params = params;\n        this.onRangeSelectionChanged();\n        return true;\n    }\n\n    private setAggregationComponentValue(\n        aggFuncName: AggregationStatusPanelAggFunc,\n        value: number | null,\n        visible: boolean\n    ) {\n        const statusBarValueComponent = this.getAllowedAggregationValueComponent(aggFuncName);\n        if (_exists(statusBarValueComponent) && statusBarValueComponent) {\n            const localeTextFunc = this.localeService.getLocaleTextFunc();\n            const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n            const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n\n            statusBarValueComponent.setValue(\n                _formatNumberTwoDecimalPlacesAndCommas(value!, thousandSeparator, decimalSeparator)\n            );\n            statusBarValueComponent.setDisplayed(visible);\n        } else {\n            // might have previously been visible, so hide now\n            this.getAggregationValueComponent(aggFuncName)?.setDisplayed(false);\n        }\n    }\n\n    private getAllowedAggregationValueComponent(aggFuncName: AggregationStatusPanelAggFunc): AgNameValue | null {\n        // if the user has specified the agAggregationPanelComp but no aggFuncs we show the all\n        // if the user has specified the agAggregationPanelComp and aggFuncs, then we only show the aggFuncs listed\n        const { aggFuncs } = this.params;\n        if (!aggFuncs || aggFuncs.includes(aggFuncName)) {\n            return this.getAggregationValueComponent(aggFuncName);\n        }\n\n        // either we can't find it (which would indicate a typo or similar user side), or the user has deliberately\n        // not listed the component in aggFuncs\n        return null;\n    }\n\n    private getAggregationValueComponent(aggFuncName: AggregationStatusPanelAggFunc): AgNameValue {\n        // converts user supplied agg name to our reference - eg: sum => sumAggregationComp\n        const refComponentName = `${aggFuncName}AggregationComp`;\n        return (this as any)[refComponentName];\n    }\n\n    private onRangeSelectionChanged(): void {\n        const cellRanges = this.rangeService?.getCellRanges();\n\n        let sum = 0;\n        let count = 0;\n        let numberCount = 0;\n        let min: number | null = null;\n        let max: number | null = null;\n\n        const cellsSoFar: any = {};\n\n        if (cellRanges && !_missingOrEmpty(cellRanges) && this.rangeService) {\n            for (let i = 0; i < cellRanges.length; i++) {\n                const cellRange = cellRanges[i];\n\n                let currentRow: RowPosition | null = this.rangeService.getRangeStartRow(cellRange);\n                const lastRow = this.rangeService.getRangeEndRow(cellRange);\n\n                while (true) {\n                    const finishedAllRows =\n                        _missing(currentRow) || !currentRow || this.rowPositionUtils.before(lastRow, currentRow);\n                    if (finishedAllRows || !currentRow || !cellRange.columns) {\n                        break;\n                    }\n\n                    cellRange.columns.forEach((col: AgColumn) => {\n                        if (currentRow === null) {\n                            return;\n                        }\n\n                        // we only want to include each cell once, in case a cell is in multiple ranges\n                        const cellId = this.cellPositionUtils.createId({\n                            rowPinned: currentRow.rowPinned,\n                            column: col,\n                            rowIndex: currentRow.rowIndex,\n                        });\n                        if (cellsSoFar[cellId]) {\n                            return;\n                        }\n                        cellsSoFar[cellId] = true;\n\n                        const rowNode = this.rowPositionUtils.getRowNode(currentRow);\n                        if (_missing(rowNode)) {\n                            return;\n                        }\n\n                        let value = this.valueService.getValue(col, rowNode);\n\n                        // if empty cell, skip it, doesn't impact count or anything\n                        if (_missing(value) || value === '') {\n                            return;\n                        }\n\n                        count++;\n\n                        // see if value is wrapped, can happen when doing count() or avg() functions\n                        if (typeof value === 'object' && 'value' in value) {\n                            value = value.value;\n\n                            // ensure that the new value wouldn't have been skipped by the previous check\n                            if (value === '') {\n                                return;\n                            }\n                        }\n\n                        if (typeof value === 'string') {\n                            value = Number(value);\n                        }\n\n                        if (typeof value === 'number' && !isNaN(value)) {\n                            sum += value;\n\n                            if (max === null || value > max) {\n                                max = value;\n                            }\n\n                            if (min === null || value < min) {\n                                min = value;\n                            }\n\n                            numberCount++;\n                        }\n                    });\n\n                    currentRow = this.cellNavigationService.getRowBelow(currentRow);\n                }\n            }\n        }\n\n        const gotResult = count > 1;\n        const gotNumberResult = numberCount > 1;\n\n        // we show count even if no numbers\n        this.setAggregationComponentValue('count', count, gotResult);\n\n        // show if numbers found\n        this.setAggregationComponentValue('sum', sum, gotNumberResult);\n        this.setAggregationComponentValue('min', min, gotNumberResult);\n        this.setAggregationComponentValue('max', max, gotNumberResult);\n        this.setAggregationComponentValue('avg', sum / numberCount, gotNumberResult);\n    }\n}\n", "import type { ComponentSelector } from '@ag-grid-community/core';\nimport { Component, RefPlaceholder } from '@ag-grid-community/core';\n\nexport class AgNameValue extends Component {\n    private readonly eLabel: HTMLElement = RefPlaceholder;\n    private readonly eValue: HTMLElement = RefPlaceholder;\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-status-name-value\">\n            <span data-ref=\"eLabel\"></span>:&nbsp;\n            <span data-ref=\"eValue\" class=\"ag-status-name-value-value\"></span>\n        </div>`);\n    }\n\n    public setLabel(key: string, defaultValue: string): void {\n        // we want to hide until the first value comes in\n        this.setDisplayed(false);\n\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        this.eLabel.innerHTML = localeTextFunc(key, defaultValue);\n    }\n\n    public setValue(value: any): void {\n        this.eValue.innerHTML = value;\n    }\n}\nexport const AgNameValueSelector: ComponentSelector = {\n    selector: 'AG-NAME-VALUE',\n    component: AgNameValue,\n};\n", "import type { BeanCollection, IClientSideRowModel, IRowModel, IStatusPanelComp } from '@ag-grid-community/core';\nimport { _formatNumberCommas, _warnOnce } from '@ag-grid-community/core';\n\nimport { AgNameValue } from './agNameValue';\n\nexport class FilteredRowsComp extends AgNameValue implements IStatusPanelComp {\n    private rowModel: IRowModel;\n\n    public wireBeans(beans: BeanCollection) {\n        this.rowModel = beans.rowModel;\n    }\n\n    public postConstruct(): void {\n        this.setLabel('filteredRows', 'Filtered');\n\n        // this component is only really useful with client side row model\n        if (this.rowModel.getType() !== 'clientSide') {\n            _warnOnce(`agFilteredRowCountComponent should only be used with the client side row model.`);\n            return;\n        }\n\n        this.addCssClass('ag-status-panel');\n        this.addCssClass('ag-status-panel-filtered-row-count');\n\n        this.setDisplayed(true);\n\n        const listener = this.onDataChanged.bind(this);\n        this.addManagedEventListeners({ modelUpdated: listener });\n        listener();\n    }\n\n    private onDataChanged() {\n        const totalRowCountValue = this.getTotalRowCountValue();\n        const filteredRowCountValue = this.getFilteredRowCountValue();\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n        const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n\n        this.setValue(_formatNumberCommas(filteredRowCountValue, thousandSeparator, decimalSeparator));\n        this.setDisplayed(totalRowCountValue !== filteredRowCountValue);\n    }\n\n    private getTotalRowCountValue(): number {\n        let totalRowCount = 0;\n        this.rowModel.forEachNode(() => (totalRowCount += 1));\n        return totalRowCount;\n    }\n\n    private getFilteredRowCountValue(): number {\n        let filteredRowCount = 0;\n\n        (this.rowModel as IClientSideRowModel).forEachNodeAfterFilter((node) => {\n            if (!node.group) {\n                filteredRowCount += 1;\n            }\n        });\n        return filteredRowCount;\n    }\n\n    public init() {}\n\n    public refresh(): boolean {\n        return true;\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public override destroy(): void {\n        super.destroy();\n    }\n}\n", "import type { BeanCollection, IRowModel, ISelectionService, IStatusPanelComp } from '@ag-grid-community/core';\nimport { _formatNumberCommas, _warnOnce } from '@ag-grid-community/core';\n\nimport { AgNameValue } from './agNameValue';\n\nexport class SelectedRowsComp extends AgNameValue implements IStatusPanelComp {\n    private rowModel: IRowModel;\n    private selectionService: ISelectionService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.rowModel = beans.rowModel;\n        this.selectionService = beans.selectionService;\n    }\n\n    public postConstruct(): void {\n        if (!this.isValidRowModel()) {\n            _warnOnce(`agSelectedRowCountComponent should only be used with the client and server side row model.`);\n            return;\n        }\n\n        this.setLabel('selectedRows', 'Selected');\n\n        this.addCssClass('ag-status-panel');\n        this.addCssClass('ag-status-panel-selected-row-count');\n\n        this.onRowSelectionChanged();\n\n        const eventListener = this.onRowSelectionChanged.bind(this);\n        this.addManagedEventListeners({ modelUpdated: eventListener, selectionChanged: eventListener });\n    }\n\n    private isValidRowModel() {\n        // this component is only really useful with client or server side rowmodels\n        const rowModelType = this.rowModel.getType();\n        return rowModelType === 'clientSide' || rowModelType === 'serverSide';\n    }\n\n    private onRowSelectionChanged() {\n        const selectedRowCount = this.selectionService.getSelectionCount();\n        if (selectedRowCount < 0) {\n            this.setValue('?');\n            this.setDisplayed(true);\n            return;\n        }\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n        const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n        this.setValue(_formatNumberCommas(selectedRowCount, thousandSeparator, decimalSeparator));\n        this.setDisplayed(selectedRowCount > 0);\n    }\n\n    public init() {}\n\n    public refresh(): boolean {\n        return true;\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public override destroy(): void {\n        super.destroy();\n    }\n}\n", "import type { BeanCollection, IClientSideRowModel, IRowModel, IStatusPanelComp } from '@ag-grid-community/core';\nimport { _formatNumberCommas, _warnOnce } from '@ag-grid-community/core';\n\nimport { AgNameValue } from './agNameValue';\n\nexport class TotalAndFilteredRowsComp extends AgNameValue implements IStatusPanelComp {\n    private rowModel: IRowModel;\n\n    public wireBeans(beans: BeanCollection) {\n        this.rowModel = beans.rowModel;\n    }\n\n    public postConstruct(): void {\n        // this component is only really useful with client side row model\n        if (this.rowModel.getType() !== 'clientSide') {\n            _warnOnce(`agTotalAndFilteredRowCountComponent should only be used with the client side row model.`);\n            return;\n        }\n\n        this.setLabel('totalAndFilteredRows', 'Rows');\n\n        this.addCssClass('ag-status-panel');\n        this.addCssClass('ag-status-panel-total-and-filtered-row-count');\n\n        this.setDisplayed(true);\n\n        this.addManagedEventListeners({ modelUpdated: this.onDataChanged.bind(this) });\n        this.onDataChanged();\n    }\n\n    private onDataChanged() {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n        const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n\n        const rowCount = _formatNumberCommas(this.getFilteredRowCountValue(), thousandSeparator, decimalSeparator);\n        const totalRowCount = _formatNumberCommas(this.getTotalRowCount(), thousandSeparator, decimalSeparator);\n\n        if (rowCount === totalRowCount) {\n            this.setValue(rowCount);\n        } else {\n            const localeTextFunc = this.localeService.getLocaleTextFunc();\n            this.setValue(`${rowCount} ${localeTextFunc('of', 'of')} ${totalRowCount}`);\n        }\n    }\n\n    private getFilteredRowCountValue(): number {\n        let filteredRowCount = 0;\n        (this.rowModel as IClientSideRowModel).forEachNodeAfterFilter((node) => {\n            if (!node.group) {\n                filteredRowCount++;\n            }\n        });\n        return filteredRowCount;\n    }\n\n    private getTotalRowCount(): number {\n        let totalRowCount = 0;\n        this.rowModel.forEachNode((node) => {\n            if (!node.group) {\n                totalRowCount++;\n            }\n        });\n        return totalRowCount;\n    }\n\n    public init() {}\n\n    public refresh(): boolean {\n        return true;\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public override destroy(): void {\n        super.destroy();\n    }\n}\n", "import type { BeanCollection, IClientSideRowModel, IRowModel, IStatusPanelComp } from '@ag-grid-community/core';\nimport { _formatNumberCommas, _warnOnce } from '@ag-grid-community/core';\n\nimport { AgNameValue } from './agNameValue';\n\nexport class TotalRowsComp extends AgNameValue implements IStatusPanelComp {\n    private rowModel: IRowModel;\n\n    public wireBeans(beans: BeanCollection) {\n        this.rowModel = beans.rowModel;\n    }\n\n    public postConstruct(): void {\n        this.setLabel('totalRows', 'Total Rows');\n\n        // this component is only really useful with client side row model\n        if (this.rowModel.getType() !== 'clientSide') {\n            _warnOnce('agTotalRowCountComponent should only be used with the client side row model.');\n            return;\n        }\n\n        this.addCssClass('ag-status-panel');\n        this.addCssClass('ag-status-panel-total-row-count');\n\n        this.setDisplayed(true);\n\n        this.addManagedEventListeners({ modelUpdated: this.onDataChanged.bind(this) });\n        this.onDataChanged();\n    }\n\n    private onDataChanged() {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n        const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n        this.setValue(_formatNumberCommas(this.getRowCountValue(), thousandSeparator, decimalSeparator));\n    }\n\n    private getRowCountValue(): number {\n        let totalRowCount = 0;\n        (this.rowModel as IClientSideRowModel).forEachLeafNode(() => (totalRowCount += 1));\n        return totalRowCount;\n    }\n\n    public init() {}\n\n    public refresh(): boolean {\n        return true;\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public override destroy(): void {\n        super.destroy();\n    }\n}\n", "import type { BeanCollection, IStatusPanel } from '@ag-grid-community/core';\nimport { _unwrapUserComp } from '@ag-grid-community/core';\n\nexport function getStatusPanel<TStatusPanel = IStatusPanel>(\n    beans: BeanCollection,\n    key: string\n): TStatusPanel | undefined {\n    const comp = beans.statusBarService!.getStatusPanel(key);\n    return _unwrapUserComp(comp) as any;\n}\n", "import type { ComponentSelector, IStatusBarService, IStatusPanelComp, NamedBean } from '@ag-grid-community/core';\nimport { BeanStub } from '@ag-grid-community/core';\n\nimport { AgStatusBarSelector } from './agStatusBar';\n\nexport class StatusBarService extends BeanStub implements NamedBean, IStatusBarService {\n    beanName = 'statusBarService' as const;\n\n    private allComponents: Map<string, IStatusPanelComp> = new Map();\n\n    // tslint:disable-next-line\n    constructor() {\n        super();\n    }\n\n    public registerStatusPanel(key: string, component: IStatusPanelComp): void {\n        this.allComponents.set(key, component);\n    }\n\n    public unregisterStatusPanel(key: string): void {\n        this.allComponents.delete(key);\n    }\n\n    public unregisterAllComponents(): void {\n        this.allComponents.clear();\n    }\n\n    public getStatusPanel(key: string): IStatusPanelComp {\n        return this.allComponents.get(key)!;\n    }\n\n    public getStatusPanelSelector(): ComponentSelector {\n        return AgStatusBarSelector;\n    }\n\n    public override destroy(): void {\n        this.unregisterAllComponents();\n        super.destroy();\n    }\n}\n", "import type {\n    BeanCollection,\n    ComponentSelector,\n    IStatusPanelComp,\n    IStatusPanelParams,\n    StatusPanelDef,\n    UserComponentFactory,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { AgPromise, Component, RefPlaceholder, _removeFromParent } from '@ag-grid-community/core';\n\nimport type { StatusBarService } from './statusBarService';\n\nexport class AgStatusBar extends Component {\n    private userComponentFactory: UserComponentFactory;\n    private statusBarService: StatusBarService;\n    private updateQueued: boolean = false;\n    private panelsPromise: AgPromise<(void | null)[]> = AgPromise.resolve();\n\n    public wireBeans(beans: BeanCollection) {\n        this.userComponentFactory = beans.userComponentFactory;\n        this.statusBarService = beans.statusBarService as StatusBarService;\n    }\n\n    private readonly eStatusBarLeft: HTMLElement = RefPlaceholder;\n    private readonly eStatusBarCenter: HTMLElement = RefPlaceholder;\n    private readonly eStatusBarRight: HTMLElement = RefPlaceholder;\n\n    private compDestroyFunctions: { [key: string]: () => void } = {};\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-status-bar\">\n            <div data-ref=\"eStatusBarLeft\" class=\"ag-status-bar-left\" role=\"status\"></div>\n            <div data-ref=\"eStatusBarCenter\" class=\"ag-status-bar-center\" role=\"status\"></div>\n            <div data-ref=\"eStatusBarRight\" class=\"ag-status-bar-right\" role=\"status\"></div>\n        </div>`);\n    }\n\n    public postConstruct(): void {\n        this.processStatusPanels(new Map());\n        this.addManagedPropertyListeners(['statusBar'], this.handleStatusBarChanged.bind(this));\n    }\n\n    private processStatusPanels(existingStatusPanelsToReuse: Map<string, IStatusPanelComp>): void {\n        const statusPanels = this.gos.get('statusBar')?.statusPanels;\n        if (statusPanels) {\n            const leftStatusPanelComponents = statusPanels.filter(\n                (componentConfig) => componentConfig.align === 'left'\n            );\n            const centerStatusPanelComponents = statusPanels.filter(\n                (componentConfig) => componentConfig.align === 'center'\n            );\n            const rightStatusPanelComponents = statusPanels.filter(\n                (componentConfig) => !componentConfig.align || componentConfig.align === 'right'\n            );\n            this.panelsPromise = AgPromise.all([\n                this.createAndRenderComponents(\n                    leftStatusPanelComponents,\n                    this.eStatusBarLeft,\n                    existingStatusPanelsToReuse\n                ),\n                this.createAndRenderComponents(\n                    centerStatusPanelComponents,\n                    this.eStatusBarCenter,\n                    existingStatusPanelsToReuse\n                ),\n                this.createAndRenderComponents(\n                    rightStatusPanelComponents,\n                    this.eStatusBarRight,\n                    existingStatusPanelsToReuse\n                ),\n            ]);\n        } else {\n            this.setDisplayed(false);\n        }\n    }\n\n    private handleStatusBarChanged(): void {\n        if (this.updateQueued) {\n            return;\n        }\n        this.updateQueued = true;\n        this.panelsPromise.then(() => {\n            this.updateStatusBar();\n            this.updateQueued = false;\n        });\n    }\n\n    private updateStatusBar(): void {\n        const statusPanels = this.gos.get('statusBar')?.statusPanels;\n        const validStatusBarPanelsProvided = Array.isArray(statusPanels) && statusPanels.length > 0;\n        this.setDisplayed(validStatusBarPanelsProvided);\n\n        const existingStatusPanelsToReuse: Map<string, IStatusPanelComp> = new Map();\n\n        if (validStatusBarPanelsProvided) {\n            statusPanels.forEach((statusPanelConfig) => {\n                const key = statusPanelConfig.key ?? statusPanelConfig.statusPanel;\n                const existingStatusPanel = this.statusBarService.getStatusPanel(key);\n                if (existingStatusPanel?.refresh) {\n                    const newParams = this.gos.addGridCommonParams(statusPanelConfig.statusPanelParams ?? {});\n                    const hasRefreshed = existingStatusPanel.refresh(newParams);\n                    if (hasRefreshed) {\n                        existingStatusPanelsToReuse.set(key, existingStatusPanel);\n                        delete this.compDestroyFunctions[key];\n                        _removeFromParent(existingStatusPanel.getGui());\n                    }\n                }\n            });\n        }\n\n        this.resetStatusBar();\n        if (validStatusBarPanelsProvided) {\n            this.processStatusPanels(existingStatusPanelsToReuse);\n        }\n    }\n\n    resetStatusBar(): void {\n        this.eStatusBarLeft.innerHTML = '';\n        this.eStatusBarCenter.innerHTML = '';\n        this.eStatusBarRight.innerHTML = '';\n\n        this.destroyComponents();\n        this.statusBarService.unregisterAllComponents();\n    }\n\n    public override destroy(): void {\n        this.destroyComponents();\n        super.destroy();\n    }\n\n    private destroyComponents(): void {\n        Object.values(this.compDestroyFunctions).forEach((func) => func());\n        this.compDestroyFunctions = {};\n    }\n\n    private createAndRenderComponents(\n        statusBarComponents: StatusPanelDef[],\n        ePanelComponent: HTMLElement,\n        existingStatusPanelsToReuse: Map<string, IStatusPanelComp>\n    ): AgPromise<void> {\n        const componentDetails: { key: string; promise: AgPromise<IStatusPanelComp> }[] = [];\n\n        statusBarComponents.forEach((componentConfig) => {\n            // default to the component name if no key supplied\n            const key = componentConfig.key || componentConfig.statusPanel;\n            const existingStatusPanel = existingStatusPanelsToReuse.get(key);\n            let promise: AgPromise<IStatusPanelComp>;\n            if (existingStatusPanel) {\n                promise = AgPromise.resolve(existingStatusPanel);\n            } else {\n                const params: WithoutGridCommon<IStatusPanelParams> = {};\n\n                const compDetails = this.userComponentFactory.getStatusPanelCompDetails(componentConfig, params);\n                promise = compDetails.newAgStackInstance();\n\n                if (promise == null) {\n                    return;\n                }\n            }\n\n            componentDetails.push({\n                key,\n                promise,\n            });\n        });\n\n        return AgPromise.all(componentDetails.map((details) => details.promise)).then(() => {\n            componentDetails.forEach((componentDetail) => {\n                componentDetail.promise.then((component: IStatusPanelComp) => {\n                    const destroyFunc = () => {\n                        this.destroyBean(component);\n                    };\n\n                    if (this.isAlive()) {\n                        this.statusBarService.registerStatusPanel(componentDetail.key, component);\n                        ePanelComponent.appendChild(component.getGui());\n                        this.compDestroyFunctions[componentDetail.key] = destroyFunc;\n                    } else {\n                        destroyFunc();\n                    }\n                });\n            });\n        });\n    }\n}\n\nexport const AgStatusBarSelector: ComponentSelector = {\n    selector: 'AG-STATUS-BAR',\n    component: AgStatusBar,\n};\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.3.1';\n"],
  "mappings": "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",
  "names": ["Component", "RefPlaceholder", "Component", "RefPlaceholder", "_warnOnce", "_warnOnce", "_formatNumberCommas", "_warnOnce", "_warnOnce", "_formatNumberCommas", "_formatNumberCommas", "_warnOnce", "_warnOnce", "_formatNumberCommas", "localeTextFunc", "_formatNumberCommas", "_warnOnce", "_warnOnce", "_formatNumberCommas", "Component", "RefPlaceholder"]
}
