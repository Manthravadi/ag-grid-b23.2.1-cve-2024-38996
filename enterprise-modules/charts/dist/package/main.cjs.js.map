{
  "version": 3,
  "sources": ["../../src/main.ts", "../../src/gridChartsModule.ts", "../../src/charts/chartComp/menu/advancedSettings/advancedSettingsMenuFactory.ts", "../../src/charts/chartComp/menu/advancedSettings/advancedSettingsPanel.ts", "../../src/charts/chartComp/utils/seriesTypeMapper.ts", "../../src/charts/chartComp/menu/chartPanelFeature.ts", "../../src/charts/chartComp/menu/advancedSettings/interactivity/animationPanel.ts", "../../src/charts/chartComp/menu/advancedSettings/interactivity/crosshairPanel.ts", "../../src/widgets/agColorPicker.ts", "../../src/widgets/agColorPanel.ts", "../../src/widgets/agColorInput.ts", "../../src/charts/chartComp/menu/advancedSettings/interactivity/navigatorPanel.ts", "../../src/widgets/agSlider.ts", "../../src/widgets/agInputRange.ts", "../../src/charts/chartComp/menu/advancedSettings/interactivity/zoomPanel.ts", "../../src/charts/chartComp/menu/chartMenuList.ts", "../../src/charts/chartComp/services/chartCrossFilterService.ts", "../../src/charts/chartComp/services/chartMenuService.ts", "../../src/charts/chartComp/services/chartTranslationService.ts", "../../src/charts/chartService.ts", "../../src/version.ts", "../../src/charts/chartComp/gridChartComp.ts", "../../src/charts/chartComp/chartController.ts", "../../src/charts/chartComp/chartProxies/chartTheme.ts", "../../src/charts/chartComp/utils/axisTypeMapper.ts", "../../src/charts/chartComp/utils/object.ts", "../../src/charts/chartComp/model/chartDataModel.ts", "../../src/charts/chartComp/datasource/chartDatasource.ts", "../../src/charts/chartComp/services/chartColumnService.ts", "../../src/charts/chartComp/model/comboChartModel.ts", "../../src/charts/chartComp/utils/chartParamsValidator.ts", "../../src/charts/chartComp/chartProxies/chartProxy.ts", "../../src/charts/chartComp/utils/integration.ts", "../../src/charts/chartComp/chartProxies/cartesian/cartesianChartProxy.ts", "../../src/charts/chartComp/chartProxies/cartesian/areaChartProxy.ts", "../../src/charts/chartComp/chartProxies/cartesian/barChartProxy.ts", "../../src/charts/chartComp/utils/color.ts", "../../src/charts/chartComp/chartProxies/cartesian/histogramChartProxy.ts", "../../src/charts/chartComp/chartProxies/cartesian/lineChartProxy.ts", "../../src/charts/chartComp/chartProxies/cartesian/scatterChartProxy.ts", "../../src/charts/chartComp/chartProxies/cartesian/waterfallChartProxy.ts", "../../src/charts/chartComp/chartProxies/combo/comboChartProxy.ts", "../../src/charts/chartComp/chartProxies/hierarchical/hierarchicalChartProxy.ts", "../../src/charts/chartComp/chartProxies/hierarchical/hierarchicalChartUtils.ts", "../../src/charts/chartComp/chartProxies/pie/pieChartProxy.ts", "../../src/charts/chartComp/chartProxies/polar/polarChartProxy.ts", "../../src/charts/chartComp/utils/array.ts", "../../src/charts/chartComp/chartProxies/specialized/heatmapChartProxy.ts", "../../src/charts/chartComp/chartProxies/statistical/statisticalChartProxy.ts", "../../src/charts/chartComp/chartProxies/statistical/boxPlotChartProxy.ts", "../../src/charts/chartComp/chartProxies/statistical/rangeChartProxy.ts", "../../src/charts/chartComp/menu/chartMenu.ts", "../../src/charts/chartComp/menu/chartToolbar.ts", "../../src/charts/chartComp/menu/tabbedChartMenu.ts", "../../src/charts/chartComp/menu/data/chartDataPanel.ts", "../../src/charts/chartComp/menu/data/categoriesDataPanel.ts", "../../src/charts/chartComp/menu/data/dragDataPanel.ts", "../../src/widgets/agPillSelect.ts", "../../src/charts/chartComp/menu/data/chartSpecificDataPanel.ts", "../../src/charts/chartComp/menu/chartMenuParamsFactory.ts", "../../src/charts/chartComp/menu/data/seriesChartTypePanel.ts", "../../src/charts/chartComp/menu/data/seriesDataPanel.ts", "../../src/charts/chartComp/menu/format/formatPanel.ts", "../../src/charts/chartComp/menu/format/axis/cartesianAxisPanel.ts", "../../src/widgets/agAngleSelect.ts", "../../src/charts/chartComp/menu/format/fontPanel.ts", "../../src/charts/chartComp/menu/format/axis/axisTicksPanel.ts", "../../src/charts/chartComp/menu/format/axis/gridLinePanel.ts", "../../src/charts/chartComp/menu/format/axis/polarAxisPanel.ts", "../../src/charts/chartComp/menu/format/chart/chartPanel.ts", "../../src/charts/chartComp/menu/format/chart/backgroundPanel.ts", "../../src/charts/chartComp/menu/format/chart/paddingPanel.ts", "../../src/charts/chartComp/menu/format/groupExpansionFeature.ts", "../../src/charts/chartComp/menu/format/legend/legendPanel.ts", "../../src/charts/chartComp/menu/format/series/seriesPanel.ts", "../../src/charts/chartComp/menu/format/series/calloutPanel.ts", "../../src/charts/chartComp/menu/format/series/capsPanel.ts", "../../src/charts/chartComp/menu/format/series/connectorLinePanel.ts", "../../src/charts/chartComp/menu/format/series/markersPanel.ts", "../../src/charts/chartComp/menu/format/series/seriesUtils.ts", "../../src/charts/chartComp/menu/format/series/seriesItemsPanel.ts", "../../src/charts/chartComp/menu/format/series/shadowPanel.ts", "../../src/charts/chartComp/menu/format/series/tileSpacingPanel.ts", "../../src/charts/chartComp/menu/format/series/whiskersPanel.ts", "../../src/charts/chartComp/menu/format/titles/titlesPanel.ts", "../../src/charts/chartComp/menu/format/titles/titlePanel.ts", "../../src/charts/chartComp/menu/format/titles/chartTitlePanel.ts", "../../src/charts/chartComp/menu/settings/chartSettingsPanel.ts", "../../src/charts/chartComp/menu/settings/miniChartsContainer.ts", "../../src/charts/chartComp/menu/settings/miniCharts/miniChartHelpers.ts", "../../src/charts/chartComp/menu/settings/miniCharts/miniChartWithAxes.ts", "../../src/charts/chartComp/menu/settings/miniCharts/miniChart.ts", "../../src/charts/chartComp/menu/settings/miniCharts/column/miniColumn.ts", "../../src/charts/chartComp/menu/settings/miniCharts/column/miniStackedColumn.ts", "../../src/charts/chartComp/menu/settings/miniCharts/column/miniNormalizedColumn.ts", "../../src/charts/chartComp/menu/settings/miniCharts/bar/miniBar.ts", "../../src/charts/chartComp/menu/settings/miniCharts/bar/miniStackedBar.ts", "../../src/charts/chartComp/menu/settings/miniCharts/bar/miniNormalizedBar.ts", "../../src/charts/chartComp/menu/settings/miniCharts/pie/miniDonut.ts", "../../src/charts/chartComp/menu/settings/miniCharts/pie/miniPie.ts", "../../src/charts/chartComp/menu/settings/miniCharts/line/miniLine.ts", "../../src/charts/chartComp/menu/settings/miniCharts/scatter/miniScatter.ts", "../../src/charts/chartComp/menu/settings/miniCharts/scatter/miniBubble.ts", "../../src/charts/chartComp/menu/settings/miniCharts/area/miniArea.ts", "../../src/charts/chartComp/menu/settings/miniCharts/area/miniStackedArea.ts", "../../src/charts/chartComp/menu/settings/miniCharts/area/miniNormalizedArea.ts", "../../src/charts/chartComp/menu/settings/miniCharts/histogram/miniHistogram.ts", "../../src/charts/chartComp/menu/settings/miniCharts/polar/miniRadialColumn.ts", "../../src/charts/chartComp/menu/settings/miniCharts/miniChartWithPolarAxes.ts", "../../src/charts/chartComp/menu/settings/miniCharts/polar/miniRadialBar.ts", "../../src/charts/chartComp/menu/settings/miniCharts/polar/miniRadarLine.ts", "../../src/charts/chartComp/menu/settings/miniCharts/polar/miniRadarArea.ts", "../../src/charts/chartComp/menu/settings/miniCharts/polar/miniNightingale.ts", "../../src/charts/chartComp/menu/settings/miniCharts/statistical/miniRangeBar.ts", "../../src/charts/chartComp/menu/settings/miniCharts/statistical/miniRangeArea.ts", "../../src/charts/chartComp/menu/settings/miniCharts/statistical/miniBoxPlot.ts", "../../src/charts/chartComp/menu/settings/miniCharts/hierarchical/miniTreemap.ts", "../../src/charts/chartComp/menu/settings/miniCharts/hierarchical/miniSunburst.ts", "../../src/charts/chartComp/menu/settings/miniCharts/specialized/miniHeatmap.ts", "../../src/charts/chartComp/menu/settings/miniCharts/specialized/miniWaterfall.ts", "../../src/charts/chartComp/menu/settings/miniCharts/combo/miniColumnLineCombo.ts", "../../src/charts/chartComp/menu/settings/miniCharts/combo/miniAreaColumnCombo.ts", "../../src/charts/chartComp/menu/settings/miniCharts/combo/miniCustomCombo.ts", "../../src/charts/chartComp/services/chartOptionsService.ts", "../../src/charts/chartModelMigration.ts", "../../src/charts/chartsApi.ts", "../../src/utils/validGridChartsVersion.ts"],
  "sourcesContent": ["import { AgCharts, time } from 'ag-charts-community';\n\nexport { GridChartsModule } from './gridChartsModule';\n\nexport * from 'ag-charts-community';\n\nexport const agCharts = {\n    time,\n    AgCharts,\n};\n", "import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames } from '@ag-grid-community/core';\nimport { AgMenuItemRenderer, EnterpriseCoreModule } from '@ag-grid-enterprise/core';\nimport { RangeSelectionModule } from '@ag-grid-enterprise/range-selection';\n\nimport { AdvancedSettingsMenuFactory } from './charts/chartComp/menu/advancedSettings/advancedSettingsMenuFactory';\nimport { ChartMenuListFactory } from './charts/chartComp/menu/chartMenuList';\nimport { ChartCrossFilterService } from './charts/chartComp/services/chartCrossFilterService';\nimport { ChartMenuService } from './charts/chartComp/services/chartMenuService';\nimport { ChartTranslationService } from './charts/chartComp/services/chartTranslationService';\nimport { ChartService } from './charts/chartService';\nimport {\n    closeChartToolPanel,\n    createCrossFilterChart,\n    createPivotChart,\n    createRangeChart,\n    downloadChart,\n    getChartImageDataURL,\n    getChartModels,\n    getChartRef,\n    openChartToolPanel,\n    restoreChart,\n    updateChart,\n} from './charts/chartsApi';\nimport { validGridChartsVersion } from './utils/validGridChartsVersion';\nimport { VERSION as GRID_VERSION } from './version';\n\nexport const GridChartsCoreModule: Module = {\n    version: GRID_VERSION,\n    validate: () => {\n        return validGridChartsVersion({\n            gridVersion: GRID_VERSION,\n            chartsVersion: ChartService.CHARTS_VERSION,\n        });\n    },\n    moduleName: `${ModuleNames.GridChartsModule}-core`,\n    beans: [\n        ChartService,\n        ChartTranslationService,\n        ChartCrossFilterService,\n        ChartMenuListFactory,\n        ChartMenuService,\n        AdvancedSettingsMenuFactory,\n    ],\n    userComponents: [\n        {\n            name: 'agMenuItem',\n            classImp: AgMenuItemRenderer,\n        },\n    ],\n    dependantModules: [RangeSelectionModule, EnterpriseCoreModule],\n};\n\nexport const GridChartsApiModule: Module = {\n    version: GRID_VERSION,\n    moduleName: `${ModuleNames.GridChartsModule}-api`,\n    apiFunctions: {\n        getChartModels,\n        getChartRef,\n        getChartImageDataURL,\n        downloadChart,\n        openChartToolPanel,\n        closeChartToolPanel,\n        createRangeChart,\n        createPivotChart,\n        createCrossFilterChart,\n        updateChart,\n        restoreChart,\n    },\n    dependantModules: [GridChartsCoreModule],\n};\n\nexport const GridChartsModule: Module = {\n    version: GRID_VERSION,\n    moduleName: ModuleNames.GridChartsModule,\n    dependantModules: [GridChartsCoreModule, GridChartsApiModule],\n};\n", "import type { BeanCollection, FocusService, NamedBean } from '@ag-grid-community/core';\nimport { BeanStub, TabGuardComp } from '@ag-grid-community/core';\nimport { AgDialog } from '@ag-grid-enterprise/core';\n\nimport type { ChartTranslationService } from '../../services/chartTranslationService';\nimport type { ChartMenuContext } from '../chartMenuContext';\nimport { AdvancedSettingsPanel } from './advancedSettingsPanel';\n\nexport class AdvancedSettingsMenuFactory extends BeanStub implements NamedBean {\n    beanName = 'advancedSettingsMenuFactory' as const;\n\n    private focusService: FocusService;\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.focusService = beans.focusService;\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    private activeMenu?: AdvancedSettingsMenu;\n    private activeDialog?: AgDialog;\n\n    public showMenu(chartMenuContext: ChartMenuContext, eventSource?: HTMLElement): void {\n        this.hideMenu();\n\n        const menu = this.createBean(new AdvancedSettingsMenu(chartMenuContext));\n\n        this.activeDialog = this.createBean(\n            new AgDialog({\n                title: this.chartTranslationService.translate('advancedSettings'),\n                component: menu,\n                width: 300,\n                height: 400,\n                resizable: true,\n                movable: true,\n                centered: true,\n                closable: true,\n                afterGuiAttached: () => {\n                    this.focusService.findFocusableElements(menu.getGui())[0]?.focus();\n                },\n                closedCallback: () => {\n                    this.activeMenu = this.destroyBean(this.activeMenu);\n                    this.activeDialog = undefined;\n                    eventSource?.focus({ preventScroll: true });\n                },\n            })\n        );\n\n        this.activeMenu = menu;\n    }\n\n    public hideMenu(): void {\n        if (this.activeDialog) {\n            this.destroyBean(this.activeDialog);\n        }\n    }\n\n    public override destroy(): void {\n        this.activeMenu = this.destroyBean(this.activeMenu);\n        this.activeDialog = this.destroyBean(this.activeDialog);\n        super.destroy();\n    }\n}\n\nclass AdvancedSettingsMenu extends TabGuardComp {\n    private focusService: FocusService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.focusService = beans.focusService;\n    }\n\n    private advancedSettingsPanel: AdvancedSettingsPanel;\n\n    constructor(private readonly chartMenuContext: ChartMenuContext) {\n        super(/* html */ `<div class=\"ag-chart-advanced-settings\"></div>`);\n    }\n\n    public postConstruct(): void {\n        this.advancedSettingsPanel = this.createManagedBean(new AdvancedSettingsPanel(this.chartMenuContext));\n        this.getGui().appendChild(this.advancedSettingsPanel.getGui());\n        this.initialiseTabGuard({\n            onTabKeyDown: this.onTabKeyDown.bind(this),\n            focusTrapActive: true,\n        });\n    }\n\n    protected onTabKeyDown(e: KeyboardEvent) {\n        if (e.defaultPrevented) {\n            return;\n        }\n\n        e.preventDefault();\n\n        const backwards = e.shiftKey;\n        const panelGui = this.advancedSettingsPanel.getGui();\n        const nextEl = this.focusService.findNextFocusableElement(panelGui, false, backwards);\n\n        if (nextEl) {\n            nextEl.focus();\n        } else {\n            const focusableElements = this.focusService.findFocusableElements(panelGui);\n            if (focusableElements.length) {\n                focusableElements[backwards ? focusableElements.length - 1 : 0].focus();\n            }\n        }\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { Component } from '@ag-grid-community/core';\n\nimport type { ChartSeriesType } from '../../utils/seriesTypeMapper';\nimport { isCartesian } from '../../utils/seriesTypeMapper';\nimport type { ChartMenuContext } from '../chartMenuContext';\nimport { ChartPanelFeature } from '../chartPanelFeature';\nimport { AnimationPanel } from './interactivity/animationPanel';\nimport { CrosshairPanel } from './interactivity/crosshairPanel';\nimport { NavigatorPanel } from './interactivity/navigatorPanel';\nimport { ZoomPanel } from './interactivity/zoomPanel';\n\nconst INTERACTIVITY_GROUPS = ['navigator', 'zoom', 'animation', 'crosshair'] as const;\n\ntype ChartInteractivityGroup = (typeof INTERACTIVITY_GROUPS)[number];\n\nexport class AdvancedSettingsPanel extends Component {\n    private chartPanelFeature: ChartPanelFeature;\n\n    constructor(private readonly chartMenuContext: ChartMenuContext) {\n        super(/* html */ `<div class=\"ag-chart-advanced-settings-wrapper\"></div>`);\n    }\n\n    public postConstruct(): void {\n        this.chartPanelFeature = this.createManagedBean(\n            new ChartPanelFeature(\n                this.chartMenuContext.chartController,\n                this.getGui(),\n                'ag-chart-advanced-settings-section',\n                (chartType, seriesType) => this.createPanels(chartType, seriesType)\n            )\n        );\n        this.chartPanelFeature.refreshPanels();\n    }\n\n    private createPanels(chartType: ChartType, seriesType: ChartSeriesType): void {\n        INTERACTIVITY_GROUPS.forEach((group) => {\n            if (!this.isGroupPanelShownForSeries(group, seriesType)) {\n                return;\n            }\n\n            const comp = this.createPanel(group);\n            this.chartPanelFeature.addComponent(comp);\n        });\n    }\n\n    private isGroupPanelShownForSeries(group: ChartInteractivityGroup, seriesType: ChartSeriesType): boolean {\n        return group === 'animation' || isCartesian(seriesType);\n    }\n\n    private createPanel(group: ChartInteractivityGroup): Component {\n        const { chartMenuParamsFactory, chartAxisMenuParamsFactory } = this.chartMenuContext;\n        switch (group) {\n            case 'navigator':\n                return new NavigatorPanel(chartMenuParamsFactory);\n            case 'zoom':\n                return new ZoomPanel(chartMenuParamsFactory);\n            case 'animation':\n                return new AnimationPanel(chartMenuParamsFactory);\n            case 'crosshair':\n                return new CrosshairPanel(chartAxisMenuParamsFactory);\n        }\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { ChartMappings } from '@ag-grid-community/core';\nimport type { AgChartThemeOverrides } from 'ag-charts-community';\n\nimport type { ChartTranslationKey } from '../services/chartTranslationService';\n\nexport type ChartSeriesType =\n    (typeof ChartMappings.CHART_TYPE_TO_SERIES_TYPE)[keyof typeof ChartMappings.CHART_TYPE_TO_SERIES_TYPE] &\n        keyof AgChartThemeOverrides;\n\n// these values correspond to top level object names in `AgChartThemeOverrides`\nexport type ChartThemeOverridesSeriesType = keyof AgChartThemeOverrides & (ChartSeriesType | 'common');\n\ninterface SeriesParams {\n    isCartesian?: boolean;\n    isPolar?: boolean;\n    isEnterprise?: boolean;\n    isRadial?: boolean;\n    isHierarchical?: boolean;\n    isPie?: boolean;\n    canInvert?: boolean;\n    canSwitchDirection?: boolean;\n}\n\nconst SERIES_TYPES: { [key in ChartSeriesType]: SeriesParams } = {\n    area: {\n        isCartesian: true,\n        canInvert: true,\n    },\n    bar: {\n        isCartesian: true,\n        canInvert: true,\n    },\n    histogram: {\n        isCartesian: true,\n    },\n    line: {\n        isCartesian: true,\n        canInvert: true,\n    },\n    pie: {\n        isPie: true,\n    },\n    donut: {\n        isPie: true,\n        canInvert: true,\n    },\n    scatter: {\n        isCartesian: true,\n    },\n    bubble: {\n        isCartesian: true,\n    },\n    'radial-column': {\n        isPolar: true,\n        isEnterprise: true,\n        isRadial: true,\n        canInvert: true,\n    },\n    'radial-bar': {\n        isPolar: true,\n        isEnterprise: true,\n        isRadial: true,\n        canInvert: true,\n    },\n    'radar-line': {\n        isPolar: true,\n        isEnterprise: true,\n        canInvert: true,\n    },\n    'radar-area': {\n        isPolar: true,\n        isEnterprise: true,\n        canInvert: true,\n    },\n    nightingale: {\n        isPolar: true,\n        isEnterprise: true,\n        canInvert: true,\n    },\n    'range-bar': {\n        isCartesian: true,\n        isEnterprise: true,\n        canSwitchDirection: true,\n    },\n    'range-area': {\n        isCartesian: true,\n        isEnterprise: true,\n    },\n    'box-plot': {\n        isCartesian: true,\n        isEnterprise: true,\n        canSwitchDirection: true,\n    },\n    treemap: {\n        isEnterprise: true,\n        isHierarchical: true,\n    },\n    sunburst: {\n        isEnterprise: true,\n        isHierarchical: true,\n    },\n    heatmap: {\n        isCartesian: true,\n        isEnterprise: true,\n    },\n    waterfall: {\n        isCartesian: true,\n        isEnterprise: true,\n        canSwitchDirection: true,\n    },\n};\n\nexport function isSeriesType(seriesType: ChartSeriesType): boolean {\n    return !!SERIES_TYPES[seriesType];\n}\n\nexport function isComboChart(chartType: ChartType): boolean {\n    return ChartMappings.COMBO_CHART_TYPES.includes(chartType as (typeof ChartMappings.COMBO_CHART_TYPES)[number]);\n}\n\nfunction doesSeriesHaveProperty(seriesType: ChartSeriesType, prop: keyof SeriesParams): boolean {\n    return !!SERIES_TYPES[seriesType]?.[prop];\n}\n\nexport function isEnterpriseChartType(chartType: ChartType): boolean {\n    return doesSeriesHaveProperty(getSeriesType(chartType), 'isEnterprise');\n}\n\nconst stackedChartTypes = new Set(['stackedColumn', 'normalizedColumn', 'stackedBar', 'normalizedBar']);\nexport function isStacked(chartType: ChartType): boolean {\n    return stackedChartTypes.has(chartType);\n}\n\nexport function isCartesian(seriesType: ChartSeriesType): boolean {\n    return doesSeriesHaveProperty(seriesType, 'isCartesian');\n}\n\nexport function isPolar(seriesType: ChartSeriesType): boolean {\n    return doesSeriesHaveProperty(seriesType, 'isPolar');\n}\n\nexport function isRadial(seriesType: ChartSeriesType): boolean {\n    return doesSeriesHaveProperty(seriesType, 'isRadial');\n}\n\nexport function isHierarchical(seriesType: ChartSeriesType): boolean {\n    return doesSeriesHaveProperty(seriesType, 'isHierarchical');\n}\n\nexport function getCanonicalChartType(chartType: ChartType): Exclude<ChartType, 'doughnut'> {\n    return chartType === 'doughnut' ? 'donut' : chartType;\n}\n\nexport function getSeriesTypeIfExists(chartType: ChartType): ChartSeriesType | undefined {\n    return ChartMappings.CHART_TYPE_TO_SERIES_TYPE[chartType as keyof typeof ChartMappings.CHART_TYPE_TO_SERIES_TYPE];\n}\n\nexport function getSeriesType(chartType: ChartType): ChartSeriesType {\n    return getSeriesTypeIfExists(chartType) ?? 'line';\n}\n\nexport function isPieChartSeries(seriesType: ChartSeriesType): boolean {\n    return doesSeriesHaveProperty(seriesType, 'isPie');\n}\n\nfunction canOnlyHaveSingleSeries(chartType: ChartType): boolean {\n    return chartType === 'pie' || chartType === 'waterfall' || chartType === 'histogram';\n}\n\nexport function getMaxNumCategories(chartType: ChartType): number | undefined {\n    return isHierarchical(getSeriesType(chartType)) ? undefined : 1;\n}\n\nexport function getMaxNumSeries(chartType: ChartType): number | undefined {\n    if (isHierarchical(getSeriesType(chartType))) {\n        return 2;\n    } else if (canOnlyHaveSingleSeries(chartType)) {\n        return 1;\n    } else {\n        return undefined;\n    }\n}\n\nexport function supportsInvertedCategorySeries(chartType: ChartType): boolean {\n    return !isComboChart(chartType) && doesSeriesHaveProperty(getSeriesType(chartType), 'canInvert');\n}\n\nexport function canSwitchDirection(chartType: ChartType): boolean {\n    return doesSeriesHaveProperty(getSeriesType(chartType), 'canSwitchDirection');\n}\n\nexport function getFullChartNameTranslationKey(chartType: ChartType): ChartTranslationKey {\n    switch (chartType) {\n        case 'groupedColumn':\n        case 'stackedColumn':\n        case 'normalizedColumn':\n        case 'groupedBar':\n        case 'stackedBar':\n        case 'normalizedBar':\n        case 'stackedArea':\n        case 'normalizedArea':\n            return `${chartType}Full`;\n        case 'doughnut':\n            return 'donut';\n        case 'areaColumnCombo':\n            return 'AreaColumnCombo';\n        default:\n            return chartType;\n    }\n}\n", "import type { ChartType, Component } from '@ag-grid-community/core';\nimport { BeanStub, _removeFromParent } from '@ag-grid-community/core';\n\nimport type { ChartController } from '../chartController';\nimport type { ChartSeriesType } from '../utils/seriesTypeMapper';\nimport { getSeriesType } from '../utils/seriesTypeMapper';\n\nexport class ChartPanelFeature extends BeanStub {\n    private chartType: ChartType;\n    private isGrouping: boolean;\n    private panels: Component[] = [];\n\n    constructor(\n        private readonly chartController: ChartController,\n        private readonly eGui: HTMLElement,\n        private readonly cssClass: string,\n        private readonly createPanels: (chartType: ChartType, seriesType: ChartSeriesType) => void\n    ) {\n        super();\n    }\n\n    public postConstruct(): void {\n        this.addManagedListeners(this.chartController, {\n            chartUpdated: () => this.refreshPanels(true),\n            chartApiUpdate: () => this.refreshPanels(false),\n        });\n    }\n\n    public addComponent(component: Component): void {\n        this.createBean(component);\n        this.panels.push(component);\n        component.addCssClass(this.cssClass);\n        this.eGui.appendChild(component.getGui());\n    }\n\n    public refreshPanels(reuse?: boolean) {\n        const chartType = this.chartController.getChartType();\n        const isGrouping = this.chartController.isGrouping();\n        const seriesType = getSeriesType(chartType);\n\n        if (reuse && chartType === this.chartType && isGrouping === this.isGrouping) {\n            // existing panels can be re-used\n            return;\n        }\n\n        this.destroyPanels();\n\n        this.createPanels(chartType, seriesType);\n\n        this.chartType = chartType;\n        this.isGrouping = isGrouping;\n    }\n\n    private destroyPanels(): void {\n        this.panels.forEach((panel) => {\n            _removeFromParent(panel.getGui());\n            this.destroyBean(panel);\n        });\n        this.panels = [];\n    }\n\n    public override destroy(): void {\n        this.destroyPanels();\n        super.destroy();\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { AgInputNumberFieldSelector, Component } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class AnimationPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    constructor(private readonly chartMenuParamsFactory: ChartMenuParamsFactory) {\n        super();\n    }\n\n    public postConstruct() {\n        const animationGroupParams = this.chartMenuParamsFactory.addEnableParams<AgGroupComponentParams>(\n            'animation.enabled',\n            {\n                cssIdentifier: 'charts-advanced-settings-top-level',\n                direction: 'vertical',\n                suppressOpenCloseIcons: true,\n                title: this.chartTranslationService.translate('animation'),\n                suppressEnabledCheckbox: true,\n                useToggle: true,\n            }\n        );\n        const animationHeightInputParams = this.chartMenuParamsFactory.getDefaultNumberInputParams(\n            'animation.duration',\n            'durationMillis',\n            {\n                min: 0,\n            }\n        );\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"animationGroup\">\n                <ag-input-number-field data-ref=\"animationHeightInput\"></ag-input>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgInputNumberFieldSelector],\n            {\n                animationGroup: animationGroupParams,\n                animationHeightInput: animationHeightInputParams,\n            }\n        );\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { AgCheckboxSelector, Component } from '@ag-grid-community/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\n\nimport { AgColorPickerSelector } from '../../../../../widgets/agColorPicker';\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class CrosshairPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    constructor(private readonly chartMenuParamsFactory: ChartMenuParamsFactory) {\n        super();\n    }\n\n    public postConstruct() {\n        const crosshairGroupParams = this.chartMenuParamsFactory.addEnableParams<AgGroupComponentParams>(\n            'crosshair.enabled',\n            {\n                cssIdentifier: 'charts-advanced-settings-top-level',\n                direction: 'vertical',\n                suppressOpenCloseIcons: true,\n                title: this.chartTranslationService.translate('crosshair'),\n                suppressEnabledCheckbox: true,\n                useToggle: true,\n            }\n        );\n        const crosshairLabelCheckboxParams = this.chartMenuParamsFactory.getDefaultCheckboxParams(\n            'crosshair.label.enabled',\n            'crosshairLabel'\n        );\n        const crosshairSnapCheckboxParams = this.chartMenuParamsFactory.getDefaultCheckboxParams(\n            'crosshair.snap',\n            'crosshairSnap'\n        );\n        const crosshairStrokeColorPickerParams = this.chartMenuParamsFactory.getDefaultColorPickerParams(\n            'crosshair.stroke',\n            'color'\n        );\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"crosshairGroup\">\n                <ag-checkbox data-ref=\"crosshairLabelCheckbox\"></ag-checkbox>\n                <ag-checkbox data-ref=\"crosshairSnapCheckbox\"></ag-checkbox>\n                <ag-color-picker data-ref=\"crosshairStrokeColorPicker\"></ag-color-picker>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgCheckboxSelector, AgColorPickerSelector],\n            {\n                crosshairGroup: crosshairGroupParams,\n                crosshairLabelCheckbox: crosshairLabelCheckboxParams,\n                crosshairSnapCheckbox: crosshairSnapCheckboxParams,\n                crosshairStrokeColorPicker: crosshairStrokeColorPickerParams,\n            }\n        );\n    }\n}\n", "import type { AgPickerFieldParams, ComponentSelector } from '@ag-grid-community/core';\nimport { AgPickerField } from '@ag-grid-community/core';\nimport { AgDialog } from '@ag-grid-enterprise/core';\nimport { _Util } from 'ag-charts-community';\n\nimport { AgColorPanel } from './agColorPanel';\n\nexport interface AgColorPickerParams\n    extends Omit<AgPickerFieldParams, 'pickerType' | 'pickerAriaLabelKey' | 'pickerAriaLabelValue'> {\n    pickerType?: string;\n    pickerAriaLabelKey?: string;\n    pickerAriaLabelValue?: string;\n}\n\nexport class AgColorPicker extends AgPickerField<string, AgColorPickerParams & AgPickerFieldParams, string, AgDialog> {\n    private isDestroyingPicker: boolean;\n    private eDisplayFieldColor: HTMLElement;\n    private eDisplayFieldText: HTMLElement;\n\n    constructor(config?: AgColorPickerParams) {\n        super({\n            pickerAriaLabelKey: 'ariaLabelColorPicker',\n            pickerAriaLabelValue: 'Color Picker',\n            pickerType: 'ag-list',\n            className: 'ag-color-picker',\n            pickerIcon: 'smallDown',\n            ...config,\n        });\n    }\n\n    public override postConstruct() {\n        const eDocument = this.gos.getDocument();\n        this.eDisplayFieldColor = eDocument.createElement('span');\n        this.eDisplayFieldColor.classList.add('ag-color-picker-color');\n        this.eDisplayFieldText = eDocument.createElement('span');\n        this.eDisplayFieldText.classList.add('ag-color-picker-value');\n        this.eDisplayField.appendChild(this.eDisplayFieldColor);\n        this.eDisplayField.appendChild(this.eDisplayFieldText);\n\n        super.postConstruct();\n\n        if (this.value) {\n            this.setValue(this.value);\n        }\n    }\n\n    protected createPickerComponent() {\n        const eGuiRect = this.eWrapper.getBoundingClientRect();\n        const parentRect = this.popupService.getParentRect();\n\n        const colorDialog = this.createBean(\n            new AgDialog({\n                closable: false,\n                modal: true,\n                hideTitleBar: true,\n                minWidth: 190,\n                width: 190,\n                height: 250,\n                x: eGuiRect.right - parentRect.left - 190,\n                y: eGuiRect.top - parentRect.top - 250 - (this.config.pickerGap ?? 0),\n            })\n        );\n\n        return colorDialog;\n    }\n\n    protected override renderAndPositionPicker(): () => void {\n        const pickerComponent = this.pickerComponent!;\n        const colorPanel = this.createBean(new AgColorPanel({ picker: this }));\n\n        pickerComponent.addCssClass('ag-color-dialog');\n\n        colorPanel.addDestroyFunc(() => {\n            if (pickerComponent.isAlive()) {\n                this.destroyBean(pickerComponent);\n            }\n        });\n\n        pickerComponent.setParentComponent(this);\n        pickerComponent.setBodyComponent(colorPanel);\n        colorPanel.setValue(this.getValue());\n        colorPanel.getGui().focus();\n\n        pickerComponent.addDestroyFunc(() => {\n            // here we check if the picker was already being\n            // destroyed to avoid a stack overflow\n            if (!this.isDestroyingPicker) {\n                this.beforeHidePicker();\n                this.isDestroyingPicker = true;\n\n                if (colorPanel.isAlive()) {\n                    this.destroyBean(colorPanel);\n                }\n\n                if (this.isAlive()) {\n                    this.getFocusableElement().focus();\n                }\n            } else {\n                this.isDestroyingPicker = false;\n            }\n        });\n\n        return () => this.pickerComponent?.close();\n    }\n\n    public override setValue(color: string): this {\n        if (this.value === color) {\n            return this;\n        }\n\n        this.eDisplayFieldColor.style.backgroundColor = color;\n        this.eDisplayFieldText.textContent = _Util.Color.fromString(color).toHexString().toUpperCase();\n\n        return super.setValue(color);\n    }\n\n    public override getValue(): string {\n        return this.value;\n    }\n}\n\nexport const AgColorPickerSelector: ComponentSelector = {\n    selector: 'AG-COLOR-PICKER',\n    component: AgColorPicker,\n};\n", "import { Component, KeyCode, RefPlaceholder, _exists, _setDisplayed } from '@ag-grid-community/core';\nimport { _Util } from 'ag-charts-community';\n\nimport type { AgColorInput } from './agColorInput';\nimport { AgColorInputSelector } from './agColorInput';\nimport type { AgColorPicker } from './agColorPicker';\n\nexport class AgColorPanel extends Component {\n    private H = 1; // in the [0, 1] range\n    private S = 1; // in the [0, 1] range\n    private B = 1; // in the [0, 1] range\n    private A = 1; // in the [0, 1] range\n\n    private spectrumValRect?: ClientRect | DOMRect;\n    private isSpectrumDragging = false;\n\n    private spectrumHueRect?: ClientRect | DOMRect;\n    private isSpectrumHueDragging = false;\n\n    private spectrumAlphaRect?: ClientRect | DOMRect;\n    private isSpectrumAlphaDragging = false;\n\n    private picker: Component;\n\n    private colorChanged = false;\n    private static maxRecentColors = 8;\n    private static recentColors: string[] = [];\n    private tabIndex: string;\n\n    private readonly spectrumColor: HTMLElement = RefPlaceholder;\n    private readonly spectrumVal: HTMLElement = RefPlaceholder;\n    private readonly spectrumDragger: HTMLElement = RefPlaceholder;\n    private readonly spectrumHue: HTMLElement = RefPlaceholder;\n    private readonly spectrumHueSlider: HTMLElement = RefPlaceholder;\n    private readonly spectrumAlpha: HTMLElement = RefPlaceholder;\n    private readonly spectrumAlphaSlider: HTMLElement = RefPlaceholder;\n    private readonly colorInput: AgColorInput = RefPlaceholder;\n    private readonly recentColors: HTMLElement = RefPlaceholder;\n\n    constructor(config: { picker: Component<any> }) {\n        super(\n            /* html */ `<div class=\"ag-color-panel\" tabindex=\"-1\">\n            <div data-ref=\"spectrumColor\" class=\"ag-spectrum-color\">\n                <div class=\"ag-spectrum-sat ag-spectrum-fill\">\n                    <div data-ref=\"spectrumVal\" class=\"ag-spectrum-val ag-spectrum-fill\">\n                        <div data-ref=\"spectrumDragger\" class=\"ag-spectrum-dragger\"></div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"ag-spectrum-tools\">\n                <div data-ref=\"spectrumHue\" class=\"ag-spectrum-hue ag-spectrum-tool\">\n                    <div class=\"ag-spectrum-hue-background\"></div>\n                    <div data-ref=\"spectrumHueSlider\" class=\"ag-spectrum-slider\"></div>\n                </div>\n                <div data-ref=\"spectrumAlpha\" class=\"ag-spectrum-alpha ag-spectrum-tool\">\n                    <div class=\"ag-spectrum-alpha-background\"></div>\n                    <div data-ref=\"spectrumAlphaSlider\" class=\"ag-spectrum-slider\"></div>\n                </div>\n                <ag-color-input data-ref=\"colorInput\"></ag-color-input>\n                <div data-ref=\"recentColors\" class=\"ag-recent-colors\"></div>\n            </div>\n        </div>`,\n            [AgColorInputSelector]\n        );\n        this.picker = config.picker;\n    }\n\n    public postConstruct() {\n        this.initTabIndex();\n        this.initRecentColors();\n\n        this.addGuiEventListener('focus', () => this.spectrumColor.focus());\n        this.addGuiEventListener('keydown', (e: KeyboardEvent) => {\n            if (e.key === KeyCode.ENTER && !e.defaultPrevented) {\n                this.destroy();\n            }\n        });\n\n        this.addManagedListeners(this.spectrumColor, { keydown: (e) => this.moveDragger(e) });\n        this.addManagedListeners(this.spectrumAlphaSlider, { keydown: (e) => this.moveAlphaSlider(e) });\n        this.addManagedListeners(this.spectrumHueSlider, { keydown: (e) => this.moveHueSlider(e) });\n\n        this.addManagedListeners(this.spectrumVal, { mousedown: this.onSpectrumDraggerDown.bind(this) });\n        this.addManagedListeners(this.spectrumHue, { mousedown: this.onSpectrumHueDown.bind(this) });\n        this.addManagedListeners(this.spectrumAlpha, { mousedown: this.onSpectrumAlphaDown.bind(this) });\n\n        this.addGuiEventListener('mousemove', (e: MouseEvent) => {\n            this.onSpectrumDraggerMove(e);\n            this.onSpectrumHueMove(e);\n            this.onSpectrumAlphaMove(e);\n        });\n\n        // Listening to `mouseup` on the document on purpose. The user might release the mouse button\n        // outside the UI control. When the mouse returns back to the control's area, the dragging\n        // of the thumb is not expected and seen as a bug.\n        this.addManagedListeners(document, { mouseup: this.onMouseUp.bind(this) });\n\n        this.colorInput.onColorChanged(this.setColor.bind(this));\n\n        this.addManagedListeners(this.recentColors, {\n            click: this.onRecentColorClick.bind(this),\n            keydown: (e: KeyboardEvent) => {\n                if (e.key === KeyCode.ENTER || e.key === KeyCode.SPACE) {\n                    e.preventDefault();\n                    this.onRecentColorClick(e);\n                }\n            },\n        });\n    }\n\n    private initTabIndex(): void {\n        const tabIndex = (this.tabIndex = this.gos.get('tabIndex').toString());\n\n        this.spectrumColor.setAttribute('tabindex', tabIndex);\n        this.spectrumHueSlider.setAttribute('tabindex', tabIndex);\n        this.spectrumAlphaSlider.setAttribute('tabindex', tabIndex);\n    }\n\n    private refreshSpectrumRect() {\n        return (this.spectrumValRect = this.spectrumVal.getBoundingClientRect());\n    }\n\n    private refreshHueRect() {\n        return (this.spectrumHueRect = this.spectrumHue.getBoundingClientRect());\n    }\n\n    private refreshAlphaRect() {\n        return (this.spectrumAlphaRect = this.spectrumAlpha.getBoundingClientRect());\n    }\n\n    private onSpectrumDraggerDown(e: MouseEvent) {\n        this.refreshSpectrumRect();\n        this.isSpectrumDragging = true;\n\n        this.moveDragger(e);\n    }\n\n    private onSpectrumDraggerMove(e: MouseEvent) {\n        if (this.isSpectrumDragging) {\n            this.moveDragger(e);\n        }\n    }\n\n    private onSpectrumHueDown(e: MouseEvent) {\n        this.refreshHueRect();\n        this.isSpectrumHueDragging = true;\n\n        this.moveHueSlider(e);\n    }\n\n    private onSpectrumHueMove(e: MouseEvent) {\n        if (this.isSpectrumHueDragging) {\n            this.moveHueSlider(e);\n        }\n    }\n\n    private onSpectrumAlphaDown(e: MouseEvent) {\n        this.refreshAlphaRect();\n        this.isSpectrumAlphaDragging = true;\n\n        this.moveAlphaSlider(e);\n    }\n\n    private onSpectrumAlphaMove(e: MouseEvent) {\n        if (this.isSpectrumAlphaDragging) {\n            this.moveAlphaSlider(e);\n        }\n    }\n\n    private onMouseUp() {\n        this.isSpectrumDragging = false;\n        this.isSpectrumHueDragging = false;\n        this.isSpectrumAlphaDragging = false;\n    }\n\n    private moveDragger(e: MouseEvent | KeyboardEvent) {\n        const valRect = this.spectrumValRect;\n        if (!valRect) {\n            return;\n        }\n\n        let x: number;\n        let y: number;\n\n        if (e instanceof MouseEvent) {\n            x = e.clientX - valRect.left;\n            y = e.clientY - valRect.top;\n        } else {\n            const isLeft = e.key === KeyCode.LEFT;\n            const isRight = e.key === KeyCode.RIGHT;\n            const isUp = e.key === KeyCode.UP;\n            const isDown = e.key === KeyCode.DOWN;\n            const isVertical = isUp || isDown;\n            const isHorizontal = isLeft || isRight;\n\n            if (!isVertical && !isHorizontal) {\n                return;\n            }\n            e.preventDefault();\n\n            const { x: currentX, y: currentY } = this.getSpectrumValue();\n            x = currentX + (isHorizontal ? (isLeft ? -5 : 5) : 0);\n            y = currentY + (isVertical ? (isUp ? -5 : 5) : 0);\n        }\n\n        x = Math.max(x, 0);\n        x = Math.min(x, valRect.width);\n        y = Math.max(y, 0);\n        y = Math.min(y, valRect.height);\n\n        this.setSpectrumValue(x / valRect.width, 1 - y / valRect.height);\n    }\n\n    private moveHueSlider(e: MouseEvent | KeyboardEvent) {\n        const rect = this.spectrumHueRect;\n\n        if (!rect) {\n            return;\n        }\n\n        const x = this.moveSlider(this.spectrumHueSlider, e);\n\n        if (x == null) {\n            return;\n        }\n\n        this.H = 1 - x / rect.width;\n        this.update();\n    }\n\n    private moveAlphaSlider(e: MouseEvent | KeyboardEvent) {\n        const rect = this.spectrumAlphaRect;\n\n        if (!rect) {\n            return;\n        }\n\n        const x = this.moveSlider(this.spectrumAlphaSlider, e);\n\n        if (x == null) {\n            return;\n        }\n\n        this.A = x / rect.width;\n        this.update();\n    }\n\n    private moveSlider(slider: HTMLElement, e: MouseEvent | KeyboardEvent): number | null {\n        const sliderRect = slider.getBoundingClientRect();\n        const parentRect = slider.parentElement?.getBoundingClientRect();\n\n        if (!slider || !parentRect) {\n            return null;\n        }\n\n        const offset = sliderRect.width / 2;\n\n        let x: number;\n        if (e instanceof MouseEvent) {\n            x = Math.floor(e.clientX - parentRect.left);\n        } else {\n            const isLeft = e.key === KeyCode.LEFT;\n            const isRight = e.key === KeyCode.RIGHT;\n            if (!isLeft && !isRight) {\n                return null;\n            }\n            e.preventDefault();\n            const diff = isLeft ? -5 : 5;\n            x = parseFloat(slider.style.left) + offset + diff;\n        }\n\n        x = Math.max(x, 0);\n        x = Math.min(x, parentRect.width);\n\n        slider.style.left = x - offset + 'px';\n\n        return x;\n    }\n\n    private update(suppressColorInputUpdate?: boolean) {\n        const hue = this.H * 360;\n        const color = _Util.Color.fromHSB(hue, this.S, this.B, this.A);\n        const rgbaColor = color.toRgbaString();\n        const colorWithoutAlpha = _Util.Color.fromHSB(hue, this.S, this.B);\n        const rgbaColorWithoutAlpha = colorWithoutAlpha.toRgbaString();\n        const spectrumColor = _Util.Color.fromHSB(hue, 1, 1);\n        const spectrumRgbaColor = spectrumColor.toRgbaString();\n\n        // the recent color list needs to know color has actually changed\n        const colorPicker = this.picker as AgColorPicker;\n\n        const existingColor = _Util.Color.fromString(colorPicker.getValue());\n        if (existingColor.toRgbaString() !== rgbaColor) {\n            this.colorChanged = true;\n        }\n\n        colorPicker.setValue(rgbaColor);\n\n        this.spectrumColor.style.backgroundColor = spectrumRgbaColor;\n        this.spectrumDragger.style.backgroundColor = rgbaColorWithoutAlpha;\n\n        this.spectrumHueSlider.style.backgroundColor = spectrumRgbaColor;\n\n        this.spectrumAlpha.style.setProperty(\n            '--ag-internal-spectrum-alpha-color-from',\n            _Util.Color.fromHSB(hue, this.S, this.B, 0).toRgbaString()\n        );\n        this.spectrumAlpha.style.setProperty('--ag-internal-spectrum-alpha-color-to', rgbaColorWithoutAlpha);\n        this.spectrumAlpha.style.setProperty('--ag-internal-spectrum-alpha-color', rgbaColor);\n\n        if (!suppressColorInputUpdate) {\n            this.colorInput.setColor(color);\n        }\n    }\n\n    /**\n     * @param saturation In the [0, 1] interval.\n     * @param brightness In the [0, 1] interval.\n     */\n    public setSpectrumValue(saturation: number, brightness: number, suppressColorInputUpdate?: boolean) {\n        const valRect = this.spectrumValRect || this.refreshSpectrumRect();\n\n        if (valRect == null) {\n            return;\n        }\n\n        const dragger = this.spectrumDragger;\n        const draggerRect = dragger.getBoundingClientRect();\n\n        saturation = Math.max(0, saturation);\n        saturation = Math.min(1, saturation);\n        brightness = Math.max(0, brightness);\n        brightness = Math.min(1, brightness);\n\n        this.S = saturation;\n        this.B = brightness;\n\n        dragger.style.left = saturation * valRect.width - draggerRect.width / 2 + 'px';\n        dragger.style.top = (1 - brightness) * valRect.height - draggerRect.height / 2 + 'px';\n\n        this.update(suppressColorInputUpdate);\n    }\n\n    private getSpectrumValue(): { x: number; y: number } {\n        const dragger = this.spectrumDragger;\n        const draggerRect = dragger.getBoundingClientRect();\n\n        const x = parseFloat(dragger.style.left) + draggerRect.width / 2;\n        const y = parseFloat(dragger.style.top) + draggerRect.height / 2;\n\n        return { x, y };\n    }\n\n    private initRecentColors() {\n        const recentColors = AgColorPanel.recentColors;\n        const innerHtml = recentColors.map((color: string, index: number) => {\n            return /* html */ `<div class=\"ag-recent-color\" id=${index} style=\"background-color: ${color}; width: 15px; height: 15px;\" recent-color=\"${color}\" tabIndex=\"${this.tabIndex}\"></div>`;\n        });\n\n        this.recentColors.innerHTML = innerHtml.join('');\n        _setDisplayed(this.recentColors, !!recentColors.length);\n    }\n\n    public setValue(val: string): void {\n        const color: _Util.Color = _Util.Color.fromString(val);\n        this.setColor(color, true);\n    }\n\n    private setColor(color: _Util.Color, updateColorInput?: boolean): void {\n        const [h, s, b] = color.toHSB();\n\n        this.H = (isNaN(h) ? 0 : h) / 360;\n        this.A = color.a;\n\n        const spectrumHueRect = this.spectrumHueRect || this.refreshHueRect();\n        const spectrumAlphaRect = this.spectrumAlphaRect || this.refreshAlphaRect();\n\n        this.spectrumHueSlider.style.left = `${(this.H - 1) * -spectrumHueRect.width - this.spectrumHueSlider.getBoundingClientRect().width / 2}px`;\n        this.spectrumAlphaSlider.style.left = `${this.A * spectrumAlphaRect.width - this.spectrumAlphaSlider.getBoundingClientRect().width / 2}px`;\n\n        this.setSpectrumValue(s, b, !updateColorInput);\n    }\n\n    private onRecentColorClick(e: MouseEvent | KeyboardEvent) {\n        const target = e.target as HTMLElement;\n\n        if (!_exists(target.id)) {\n            return;\n        }\n\n        const id = parseInt(target.id, 10);\n\n        this.setValue(AgColorPanel.recentColors[id]);\n        this.destroy();\n    }\n\n    private addRecentColor() {\n        const color = _Util.Color.fromHSB(this.H * 360, this.S, this.B, this.A);\n        const rgbaColor = color.toRgbaString();\n\n        let recentColors = AgColorPanel.recentColors;\n\n        if (!this.colorChanged || recentColors[0] === rgbaColor) {\n            return;\n        }\n\n        // remove duplicate color\n        recentColors = recentColors.filter((currentColor) => currentColor != rgbaColor);\n\n        // add color to head\n        recentColors = [rgbaColor].concat(recentColors);\n\n        // ensure we don't exceed max number of recent colors\n        if (recentColors.length > AgColorPanel.maxRecentColors) {\n            recentColors = recentColors.slice(0, AgColorPanel.maxRecentColors);\n        }\n\n        AgColorPanel.recentColors = recentColors;\n    }\n\n    public override destroy(): void {\n        this.addRecentColor();\n        super.destroy();\n    }\n}\n", "import type { AgInputTextFieldParams, BeanCollection, ComponentSelector } from '@ag-grid-community/core';\nimport { AgInputTextField, RefPlaceholder } from '@ag-grid-community/core';\nimport { _Util } from 'ag-charts-community';\n\nimport type { ChartTranslationService } from '../charts/chartComp/services/chartTranslationService';\n\nexport type AgColorInputEvent = 'colorChanged';\nexport class AgColorInput extends AgInputTextField<AgInputTextFieldParams, AgColorInputEvent> {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    private readonly eColor: HTMLElement = RefPlaceholder;\n\n    constructor() {\n        super({\n            template: /* html */ `\n            <div role=\"presentation\" class=\"ag-color-input\">\n                <div data-ref=\"eLabel\" class=\"ag-input-field-label\"></div>\n                <div data-ref=\"eWrapper\" class=\"ag-wrapper ag-input-wrapper\" role=\"presentation\">\n                    <input data-ref=\"eInput\" class=\"ag-input-field-input\">\n                    <div data-ref=\"eColor\" class=\"ag-color-input-color\"></div>\n                </div>\n            </div>`,\n        });\n    }\n\n    public setColor(color: _Util.Color): void {\n        const rgbaColor = color.toRgbaString();\n        this.setValue(_Util.Color.fromString(rgbaColor).toHexString().toUpperCase(), true);\n        this.eColor.style.backgroundColor = rgbaColor;\n    }\n\n    public override setValue(value?: string | null | undefined, silent?: boolean | undefined): this {\n        const isValid = _Util.Color.validColorString(value ?? '');\n        this.eInput.setCustomValidity(isValid ? '' : this.chartTranslationService.translate('invalidColor'));\n        super.setValue(value, silent);\n        if (isValid && !silent) {\n            this.dispatchLocalEvent({ type: 'colorChanged' });\n        }\n        return this;\n    }\n\n    public onColorChanged(callback: (color: _Util.Color) => void): void {\n        this.addManagedListeners(this, { colorChanged: () => callback(_Util.Color.fromString(this.value!)) });\n    }\n}\n\nexport const AgColorInputSelector: ComponentSelector = {\n    selector: 'AG-COLOR-INPUT',\n    component: AgColorInput,\n};\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { AgCheckboxSelector, Component } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport { AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class NavigatorPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    constructor(private readonly chartMenuParamsFactory: ChartMenuParamsFactory) {\n        super();\n    }\n\n    public postConstruct() {\n        const navigatorGroupParams = this.chartMenuParamsFactory.addEnableParams<AgGroupComponentParams>(\n            'navigator.enabled',\n            {\n                cssIdentifier: 'charts-advanced-settings-top-level',\n                direction: 'vertical',\n                suppressOpenCloseIcons: true,\n                title: this.chartTranslationService.translate('navigator'),\n                suppressEnabledCheckbox: true,\n                useToggle: true,\n            }\n        );\n        const navigatorHeightSliderParams = this.chartMenuParamsFactory.getDefaultSliderParams(\n            'navigator.height',\n            'height',\n            60\n        );\n        navigatorHeightSliderParams.minValue = 10;\n        const navigatorMiniChartCheckboxParams = this.chartMenuParamsFactory.getDefaultCheckboxParams(\n            'navigator.miniChart.enabled',\n            'miniChart'\n        );\n\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"navigatorGroup\">\n                <ag-slider data-ref=\"navigatorHeightSlider\"></ag-slider>\n                <ag-checkbox data-ref=\"navigatorMiniChartCheckbox\"></ag-checkbox>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgSliderSelector, AgCheckboxSelector],\n            {\n                navigatorGroup: navigatorGroupParams,\n                navigatorHeightSlider: navigatorHeightSliderParams,\n                navigatorMiniChartCheckbox: navigatorMiniChartCheckboxParams,\n            }\n        );\n    }\n}\n", "import type { AgInputNumberField, AgLabelParams, ComponentSelector, LabelAlignment } from '@ag-grid-community/core';\nimport { AgAbstractLabel, AgInputNumberFieldSelector, RefPlaceholder } from '@ag-grid-community/core';\n\nimport type { AgInputRange } from './agInputRange';\nimport { AgInputRangeSelector } from './agInputRange';\n\nexport interface AgSliderParams extends AgLabelParams {\n    minValue?: number;\n    maxValue?: number;\n    textFieldWidth?: number;\n    step?: number;\n    value?: string;\n    onValueChange?: (newValue: number) => void;\n}\n\nexport type AgSliderEvent = 'fieldValueChanged';\nexport class AgSlider extends AgAbstractLabel<AgSliderParams, AgSliderEvent> {\n    protected readonly eLabel: HTMLElement = RefPlaceholder;\n    private readonly eSlider: AgInputRange = RefPlaceholder;\n    private readonly eText: AgInputNumberField = RefPlaceholder;\n\n    protected override labelAlignment: LabelAlignment = 'top';\n\n    constructor(config?: AgSliderParams) {\n        super(\n            config,\n            /* html */ `<div class=\"ag-slider\">\n            <label data-ref=\"eLabel\"></label>\n            <div class=\"ag-wrapper ag-slider-wrapper\">\n                <ag-input-range data-ref=\"eSlider\"></ag-input-range>\n                <ag-input-number-field data-ref=\"eText\"></ag-input-number-field>\n            </div>\n        </div>`,\n            [AgInputRangeSelector, AgInputNumberFieldSelector]\n        );\n    }\n\n    public override postConstruct() {\n        super.postConstruct();\n        this.eSlider.addCssClass('ag-slider-field');\n        const { minValue, maxValue, textFieldWidth, step, value, onValueChange } = this.config;\n        if (minValue != null) {\n            this.setMinValue(minValue);\n        }\n        if (maxValue != null) {\n            this.setMaxValue(maxValue);\n        }\n        if (textFieldWidth != null) {\n            this.setTextFieldWidth(textFieldWidth);\n        }\n        if (step != null) {\n            this.setStep(step);\n        }\n        if (value != null) {\n            this.setValue(value);\n        }\n        if (onValueChange != null) {\n            this.onValueChange(onValueChange);\n        }\n    }\n\n    public onValueChange(callbackFn: (newValue: number) => void) {\n        this.addManagedListeners(this.eText, {\n            fieldValueChanged: () => {\n                const textValue = parseFloat(this.eText.getValue()!);\n                this.eSlider.setValue(textValue.toString(), true);\n                callbackFn(textValue || 0);\n            },\n        });\n\n        this.addManagedListeners(this.eSlider, {\n            fieldValueChanged: () => {\n                const sliderValue = this.eSlider.getValue()!;\n                this.eText.setValue(sliderValue, true);\n                callbackFn(parseFloat(sliderValue));\n            },\n        });\n\n        return this;\n    }\n\n    public setSliderWidth(width: number): this {\n        this.eSlider.setWidth(width);\n        return this;\n    }\n\n    public setTextFieldWidth(width: number): this {\n        this.eText.setWidth(width);\n        return this;\n    }\n\n    public setMinValue(minValue: number): this {\n        this.eSlider.setMinValue(minValue);\n        this.eText.setMin(minValue);\n\n        return this;\n    }\n\n    public setMaxValue(maxValue: number): this {\n        this.eSlider.setMaxValue(maxValue);\n        this.eText.setMax(maxValue);\n        return this;\n    }\n\n    public getValue(): string | null | undefined {\n        return this.eText.getValue();\n    }\n\n    public setValue(value: string, silent?: boolean): this {\n        if (this.getValue() === value) {\n            return this;\n        }\n\n        this.eText.setValue(value, true);\n        this.eSlider.setValue(value, true);\n\n        if (!silent) {\n            this.dispatchLocalEvent({ type: 'fieldValueChanged' });\n        }\n\n        return this;\n    }\n\n    public setStep(step: number): this {\n        this.eSlider.setStep(step);\n        this.eText.setStep(step);\n        return this;\n    }\n}\n\nexport const AgSliderSelector: ComponentSelector = {\n    selector: 'AG-SLIDER',\n    component: AgSlider,\n};\n", "import type { AgInputFieldParams, ComponentSelector } from '@ag-grid-community/core';\nimport { AgAbstractInputField } from '@ag-grid-community/core';\n\ninterface IInputRange extends AgInputFieldParams {\n    min?: number;\n    max?: number;\n    step?: number;\n}\n\nexport class AgInputRange extends AgAbstractInputField<HTMLInputElement, string, IInputRange> {\n    private min: number;\n    private max: number;\n\n    constructor(config?: IInputRange) {\n        super(config, 'ag-range-field', 'range');\n    }\n\n    public override postConstruct() {\n        super.postConstruct();\n\n        const { min, max, step } = this.config;\n\n        if (min != null) {\n            this.setMinValue(min);\n        }\n\n        if (max != null) {\n            this.setMaxValue(max);\n        }\n\n        this.setStep(step || 1);\n    }\n\n    protected override addInputListeners() {\n        this.addManagedElementListeners(this.eInput, {\n            input: (e: any) => {\n                const value = e.target.value;\n\n                this.setValue(value);\n            },\n        });\n    }\n\n    public setMinValue(value: number): this {\n        this.min = value;\n\n        this.eInput.setAttribute('min', value.toString());\n\n        return this;\n    }\n\n    public setMaxValue(value: number): this {\n        this.max = value;\n\n        this.eInput.setAttribute('max', value.toString());\n\n        return this;\n    }\n\n    public setStep(value: number): this {\n        this.eInput.setAttribute('step', value.toString());\n\n        return this;\n    }\n\n    public override setValue(value: string, silent?: boolean): this {\n        if (this.min != null) {\n            value = Math.max(parseFloat(value), this.min).toString();\n        }\n\n        if (this.max != null) {\n            value = Math.min(parseFloat(value), this.max).toString();\n        }\n\n        const ret = super.setValue(value, silent);\n\n        this.eInput.value = value;\n\n        return ret;\n    }\n}\n\nexport const AgInputRangeSelector: ComponentSelector = {\n    selector: 'AG-INPUT-RANGE',\n    component: AgInputRange,\n};\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { AgCheckboxSelector, Component, RefPlaceholder } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport type { AgSlider } from '../../../../../widgets/agSlider';\nimport { AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class ZoomPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    private readonly zoomScrollingStepInput: AgSlider = RefPlaceholder;\n\n    constructor(private readonly chartMenuParamsFactory: ChartMenuParamsFactory) {\n        super();\n    }\n\n    public postConstruct() {\n        const zoomGroupParams = this.chartMenuParamsFactory.addEnableParams<AgGroupComponentParams>('zoom.enabled', {\n            cssIdentifier: 'charts-advanced-settings-top-level',\n            direction: 'vertical',\n            suppressOpenCloseIcons: true,\n            title: this.chartTranslationService.translate('zoom'),\n            suppressEnabledCheckbox: true,\n            useToggle: true,\n        });\n        const zoomScrollingCheckboxParams = this.chartMenuParamsFactory.getDefaultCheckboxParams(\n            'zoom.enableScrolling',\n            'scrollingZoom'\n        );\n        const zoomScrollingStepSliderParams = this.chartMenuParamsFactory.getDefaultSliderParams(\n            'zoom.scrollingStep',\n            'scrollingStep',\n            1\n        );\n        zoomScrollingStepSliderParams.step = 0.01;\n        zoomScrollingStepSliderParams.minValue = zoomScrollingStepSliderParams.step;\n        const zoomSelectingCheckboxParams = this.chartMenuParamsFactory.getDefaultCheckboxParams(\n            'zoom.enableSelecting',\n            'selectingZoom'\n        );\n\n        // Enable/disable the scrolling step input according to whether the scrolling checkbox is checked\n        zoomScrollingCheckboxParams.onValueChange = ((onValueChange) => (value: boolean) => {\n            if (!onValueChange) return;\n            onValueChange(value);\n            this.zoomScrollingStepInput.setDisabled(!value);\n        })(zoomScrollingCheckboxParams.onValueChange);\n\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"zoomGroup\">\n                <ag-checkbox data-ref=\"zoomSelectingCheckbox\"></ag-checkbox>\n                <ag-checkbox data-ref=\"zoomScrollingCheckbox\"></ag-checkbox>\n                <ag-slider data-ref=\"zoomScrollingStepInput\"></ag-slider>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgCheckboxSelector, AgSliderSelector],\n            {\n                zoomGroup: zoomGroupParams,\n                zoomScrollingCheckbox: zoomScrollingCheckboxParams,\n                zoomScrollingStepInput: zoomScrollingStepSliderParams,\n                zoomSelectingCheckbox: zoomSelectingCheckboxParams,\n            }\n        );\n\n        // Set the initial state of the scrolling step input according to whether the scrolling checkbox is checked\n        this.zoomScrollingStepInput.setDisabled(!zoomScrollingCheckboxParams.value);\n    }\n}\n", "import type {\n    BeanCollection,\n    FocusService,\n    IAfterGuiAttachedParams,\n    MenuItemDef,\n    NamedBean,\n    PopupService,\n} from '@ag-grid-community/core';\nimport { BeanStub, Component, RefPlaceholder, _createIconNoSpan } from '@ag-grid-community/core';\nimport { AgMenuList } from '@ag-grid-enterprise/core';\n\nimport type { ChartController } from '../chartController';\nimport type { ChartMenuService } from '../services/chartMenuService';\nimport type { ChartTranslationService } from '../services/chartTranslationService';\nimport type { ChartMenuContext } from './chartMenuContext';\n\nexport class ChartMenuListFactory extends BeanStub implements NamedBean {\n    beanName = 'chartMenuListFactory' as const;\n\n    private popupService: PopupService;\n    private chartMenuService: ChartMenuService;\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.popupService = beans.popupService;\n        this.chartMenuService = beans.chartMenuService as ChartMenuService;\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    private activeChartMenuList?: ChartMenuList;\n\n    public showMenuList(params: {\n        eventSource: HTMLElement;\n        showMenu: () => void;\n        chartMenuContext: ChartMenuContext;\n    }): void {\n        const { eventSource, showMenu, chartMenuContext } = params;\n        const areChartToolPanelsEnabled = this.chartMenuService.doChartToolPanelsExist(\n            chartMenuContext.chartController\n        );\n        const menuItems = this.mapWithStockItems(\n            this.getMenuItems(chartMenuContext.chartController, areChartToolPanelsEnabled),\n            chartMenuContext,\n            showMenu,\n            eventSource,\n            areChartToolPanelsEnabled\n        );\n        if (!menuItems.length) {\n            return;\n        }\n        const chartMenuList = this.createBean(new ChartMenuList(menuItems));\n        this.activeChartMenuList = chartMenuList;\n\n        let multiplier = -1;\n        let alignSide: 'left' | 'right' = 'left';\n\n        if (this.gos.get('enableRtl')) {\n            multiplier = 1;\n            alignSide = 'right';\n        }\n\n        const eGui = chartMenuList.getGui();\n\n        this.popupService.addPopup({\n            modal: true,\n            eChild: eGui,\n            closeOnEsc: true,\n            closedCallback: () => {\n                this.destroyBean(chartMenuList);\n                this.activeChartMenuList = undefined;\n                const eDocument = this.gos.getDocument();\n                const activeEl = this.gos.getActiveDomElement();\n                if (!activeEl || activeEl === eDocument.body) {\n                    eventSource.focus({ preventScroll: true });\n                }\n            },\n            afterGuiAttached: (params) => chartMenuList.afterGuiAttached(params),\n            positionCallback: () => {\n                {\n                    this.popupService.positionPopupByComponent({\n                        type: 'chartMenu',\n                        eventSource,\n                        ePopup: eGui,\n                        alignSide,\n                        nudgeX: 4 * multiplier,\n                        nudgeY: 4,\n                        position: 'under',\n                        keepWithinBounds: true,\n                    });\n                }\n            },\n            ariaLabel: 'Chart Menu',\n        });\n    }\n\n    private getMenuItems(\n        chartController: ChartController,\n        areChartToolPanelsEnabled: boolean\n    ): (MenuItemDef | string)[] {\n        const defaultItems = [\n            ...(areChartToolPanelsEnabled ? ['chartEdit'] : []),\n            ...(chartController.isEnterprise() ? ['chartAdvancedSettings'] : []),\n            chartController.isChartLinked() ? 'chartUnlink' : 'chartLink',\n            'chartDownload',\n        ];\n        const chartMenuItems = this.gos.get('chartMenuItems');\n        if (!chartMenuItems) {\n            return defaultItems;\n        } else if (Array.isArray(chartMenuItems)) {\n            return chartMenuItems;\n        } else {\n            return chartMenuItems(\n                this.gos.addGridCommonParams({\n                    defaultItems,\n                })\n            );\n        }\n    }\n\n    private mapWithStockItems(\n        originalList: (MenuItemDef | string)[],\n        chartMenuContext: ChartMenuContext,\n        showMenu: () => void,\n        eventSource: HTMLElement,\n        areChartToolPanelsEnabled: boolean\n    ): MenuItemDef[] {\n        if (!originalList) {\n            return [];\n        }\n        const resultList: MenuItemDef[] = [];\n\n        originalList.forEach((menuItemOrString) => {\n            let result: MenuItemDef | null;\n            if (typeof menuItemOrString === 'string') {\n                result = this.getStockMenuItem(\n                    menuItemOrString,\n                    chartMenuContext,\n                    showMenu,\n                    eventSource,\n                    areChartToolPanelsEnabled\n                );\n            } else {\n                result = { ...menuItemOrString };\n            }\n            if (!result) {\n                return;\n            }\n\n            const { subMenu } = result;\n            if (Array.isArray(subMenu)) {\n                result.subMenu = this.mapWithStockItems(\n                    subMenu,\n                    chartMenuContext,\n                    showMenu,\n                    eventSource,\n                    areChartToolPanelsEnabled\n                );\n            }\n\n            resultList.push(result);\n        });\n\n        return resultList;\n    }\n\n    private getStockMenuItem(\n        key: string,\n        chartMenuContext: ChartMenuContext,\n        showMenu: () => void,\n        eventSource: HTMLElement,\n        areChartToolPanelsEnabled: boolean\n    ): MenuItemDef | null {\n        switch (key) {\n            case 'chartEdit':\n                return areChartToolPanelsEnabled\n                    ? this.createMenuItem(\n                          this.chartTranslationService.translate('chartEdit'),\n                          'chartsMenuEdit',\n                          showMenu\n                      )\n                    : null;\n            case 'chartAdvancedSettings':\n                return this.createMenuItem(\n                    this.chartTranslationService.translate('chartAdvancedSettings'),\n                    'chartsMenuAdvancedSettings',\n                    () => this.chartMenuService.openAdvancedSettings(chartMenuContext, eventSource)\n                );\n            case 'chartUnlink':\n                return chartMenuContext.chartController.isChartLinked()\n                    ? this.createMenuItem(this.chartTranslationService.translate('chartUnlink'), 'unlinked', () =>\n                          this.chartMenuService.toggleLinked(chartMenuContext)\n                      )\n                    : null;\n            case 'chartLink':\n                return !chartMenuContext.chartController.isChartLinked()\n                    ? this.createMenuItem(this.chartTranslationService.translate('chartLink'), 'linked', () =>\n                          this.chartMenuService.toggleLinked(chartMenuContext)\n                      )\n                    : null;\n            case 'chartDownload':\n                return this.createMenuItem(this.chartTranslationService.translate('chartDownload'), 'save', () =>\n                    this.chartMenuService.downloadChart(chartMenuContext)\n                );\n        }\n        return null;\n    }\n\n    private createMenuItem(name: string, iconName: string, action: () => void): MenuItemDef {\n        return {\n            name,\n            icon: _createIconNoSpan(iconName, this.gos, null),\n            action,\n        };\n    }\n\n    public override destroy(): void {\n        this.destroyBean(this.activeChartMenuList);\n        super.destroy();\n    }\n}\n\nclass ChartMenuList extends Component {\n    private focusService: FocusService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.focusService = beans.focusService;\n    }\n\n    private readonly eChartsMenu: HTMLElement = RefPlaceholder;\n\n    private hidePopupFunc: () => void;\n    private mainMenuList: AgMenuList;\n\n    constructor(private readonly menuItems: (MenuItemDef | string)[]) {\n        super(/* html */ `\n            <div data-ref=\"eChartsMenu\" role=\"presentation\" class=\"ag-menu ag-chart-menu-popup\"></div>\n        `);\n    }\n\n    public postConstruct(): void {\n        this.mainMenuList = this.createManagedBean(new AgMenuList(0));\n        this.mainMenuList.addMenuItems(this.menuItems);\n        this.mainMenuList.addEventListener('closeMenu', this.onHidePopup.bind(this));\n        this.eChartsMenu.appendChild(this.mainMenuList.getGui());\n    }\n\n    private onHidePopup(): void {\n        this.hidePopupFunc?.();\n    }\n\n    public afterGuiAttached({ hidePopup }: IAfterGuiAttachedParams): void {\n        if (hidePopup) {\n            this.hidePopupFunc = hidePopup;\n            this.addDestroyFunc(hidePopup);\n        }\n        this.focusService.focusInto(this.mainMenuList.getGui());\n    }\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    ColumnModel,\n    FilterManager,\n    IClientSideRowModel,\n    NamedBean,\n    RowNode,\n    ValueService,\n} from '@ag-grid-community/core';\nimport { BeanStub, _includes, _warnOnce } from '@ag-grid-community/core';\n\nexport class ChartCrossFilterService extends BeanStub implements NamedBean {\n    beanName = 'chartCrossFilterService' as const;\n\n    private columnModel: ColumnModel;\n    private valueService: ValueService;\n    private filterManager?: FilterManager;\n    private clientSideRowModel?: IClientSideRowModel;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n        this.valueService = beans.valueService;\n        this.filterManager = beans.filterManager;\n        if (beans.rowModel.getType() === 'clientSide') {\n            this.clientSideRowModel = beans.rowModel as IClientSideRowModel;\n        }\n    }\n\n    public filter(event: any, reset: boolean = false): void {\n        const filterModel = this.filterManager?.getFilterModel() ?? {};\n\n        // filters should be reset when user clicks on canvas background\n        if (reset) {\n            this.resetFilters(filterModel);\n            return;\n        }\n\n        const colId = ChartCrossFilterService.extractFilterColId(event);\n        if (this.isValidColumnFilter(colId)) {\n            // update filters based on current chart selections\n            this.updateFilters(filterModel, event, colId);\n        } else {\n            _warnOnce(\n                \"cross filtering requires a 'agSetColumnFilter' or 'agMultiColumnFilter' \" +\n                    \"to be defined on the column with id: '\" +\n                    colId +\n                    \"'\"\n            );\n        }\n    }\n\n    private resetFilters(filterModel: any) {\n        const filtersExist = Object.keys(filterModel).length > 0;\n        if (filtersExist) {\n            // only reset filters / charts when necessary to prevent undesirable flickering effect\n            this.filterManager?.setFilterModel(null);\n            this.filterManager?.onFilterChanged({ source: 'api' });\n        }\n    }\n\n    private updateFilters(filterModel: any, event: any, colId: string) {\n        const dataKey = ChartCrossFilterService.extractFilterColId(event);\n        const rawValue = event.datum[dataKey];\n        if (rawValue === undefined) {\n            return;\n        }\n\n        const selectedValue = rawValue.toString();\n\n        if (event.event.metaKey || event.event.ctrlKey) {\n            const existingGridValues = this.getCurrentGridValuesForCategory(colId);\n            const valueAlreadyExists = _includes(existingGridValues, selectedValue);\n\n            let updatedValues;\n            if (valueAlreadyExists) {\n                updatedValues = existingGridValues.filter((v: any) => v !== selectedValue);\n            } else {\n                updatedValues = existingGridValues;\n                updatedValues.push(selectedValue);\n            }\n\n            filterModel[colId] = this.getUpdatedFilterModel(colId, updatedValues);\n        } else {\n            const updatedValues = [selectedValue];\n            filterModel = { [colId]: this.getUpdatedFilterModel(colId, updatedValues) };\n        }\n\n        this.filterManager?.setFilterModel(filterModel);\n    }\n\n    private getUpdatedFilterModel(colId: any, updatedValues: any[]) {\n        const columnFilterType = this.getColumnFilterType(colId);\n        if (columnFilterType === 'agMultiColumnFilter') {\n            return { filterType: 'multi', filterModels: [null, { filterType: 'set', values: updatedValues }] };\n        }\n        return { filterType: 'set', values: updatedValues };\n    }\n\n    private getCurrentGridValuesForCategory(colId: string) {\n        const filteredValues: any[] = [];\n        const column = this.getColumnById(colId);\n        this.clientSideRowModel?.forEachNodeAfterFilter((rowNode: RowNode) => {\n            if (column && !rowNode.group) {\n                const value = this.valueService.getValue(column, rowNode) + '';\n                if (!filteredValues.includes(value)) {\n                    filteredValues.push(value);\n                }\n            }\n        });\n        return filteredValues;\n    }\n\n    private static extractFilterColId(event: any): string {\n        return event.xKey || event.calloutLabelKey;\n    }\n\n    private isValidColumnFilter(colId: any) {\n        if (colId.indexOf('-filtered-out')) {\n            colId = colId.replace('-filtered-out', '');\n        }\n\n        const filterType = this.getColumnFilterType(colId);\n        if (typeof filterType === 'boolean') {\n            return filterType;\n        }\n\n        return _includes(['agSetColumnFilter', 'agMultiColumnFilter'], filterType);\n    }\n\n    private getColumnFilterType(colId: any) {\n        const gridColumn = this.getColumnById(colId);\n        if (gridColumn) {\n            const colDef = gridColumn.getColDef();\n            return colDef.filter;\n        }\n    }\n\n    private getColumnById(colId: string) {\n        return this.columnModel.getCol(colId) as AgColumn;\n    }\n}\n", "import type {\n    BeanCollection,\n    ChartToolPanelMenuOptions,\n    ChartToolPanelName,\n    ChartToolbarMenuItemOptions,\n    GetChartToolbarItemsParams,\n    NamedBean,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { BeanStub, _warnOnce } from '@ag-grid-community/core';\n\nimport type { ChartController } from '../chartController';\nimport type { AdvancedSettingsMenuFactory } from '../menu/advancedSettings/advancedSettingsMenuFactory';\nimport type { ChartMenuContext } from '../menu/chartMenuContext';\n\nconst CHART_TOOLBAR_ALLOW_LIST: ChartToolbarMenuItemOptions[] = [\n    'chartUnlink',\n    'chartLink',\n    'chartDownload',\n    'chartMenu',\n];\n\nexport const CHART_TOOL_PANEL_MENU_OPTIONS: { [key in ChartToolPanelName]: ChartToolPanelMenuOptions } = {\n    settings: 'chartSettings',\n    data: 'chartData',\n    format: 'chartFormat',\n};\n\nexport class ChartMenuService extends BeanStub implements NamedBean {\n    beanName = 'chartMenuService' as const;\n\n    private advancedSettingsMenuFactory: AdvancedSettingsMenuFactory;\n\n    public wireBeans(beans: BeanCollection) {\n        this.advancedSettingsMenuFactory = beans.advancedSettingsMenuFactory as AdvancedSettingsMenuFactory;\n    }\n\n    public downloadChart(\n        chartMenuContext: ChartMenuContext,\n        dimensions?: { width: number; height: number },\n        fileName?: string,\n        fileFormat?: string\n    ): void {\n        chartMenuContext.chartController.getChartProxy().downloadChart(dimensions, fileName, fileFormat);\n    }\n\n    public toggleLinked(chartMenuContext: ChartMenuContext): void {\n        chartMenuContext.chartController.detachChartRange();\n    }\n\n    public openAdvancedSettings(chartMenuContext: ChartMenuContext, eventSource?: HTMLElement): void {\n        this.advancedSettingsMenuFactory.showMenu(chartMenuContext, eventSource);\n    }\n\n    public hideAdvancedSettings(): void {\n        this.advancedSettingsMenuFactory.hideMenu();\n    }\n\n    public getChartToolbarOptions(): ChartToolbarMenuItemOptions[] {\n        const defaultChartToolbarOptions: ChartToolbarMenuItemOptions[] = ['chartMenu'];\n\n        const toolbarItemsFunc = this.gos.getCallback('getChartToolbarItems');\n        const params: WithoutGridCommon<GetChartToolbarItemsParams> = {\n            defaultItems: defaultChartToolbarOptions,\n        };\n        return toolbarItemsFunc\n            ? toolbarItemsFunc(params).filter((option) => {\n                  if (!CHART_TOOLBAR_ALLOW_LIST.includes(option)) {\n                      _warnOnce(`'${option}' is not a valid Chart Toolbar Option`);\n                      return false;\n                  }\n                  return true;\n              })\n            : defaultChartToolbarOptions;\n    }\n\n    public getChartToolPanels(chartController: ChartController): {\n        panels: ChartToolPanelMenuOptions[];\n        defaultPanel: ChartToolPanelMenuOptions;\n    } {\n        const chartToolPanelsDef = this.gos.get('chartToolPanelsDef');\n\n        const panelsOverride = chartToolPanelsDef?.panels\n            ?.map((panel) => {\n                const menuOption = CHART_TOOL_PANEL_MENU_OPTIONS[panel];\n                if (!menuOption) {\n                    _warnOnce(`Invalid panel in chartToolPanelsDef.panels: '${panel}'`);\n                }\n                return menuOption;\n            })\n            .filter((panel) => Boolean(panel));\n        let panels = panelsOverride ?? Object.values(CHART_TOOL_PANEL_MENU_OPTIONS);\n\n        // pivot charts use the column tool panel instead of the data panel\n        if (chartController.isPivotChart()) {\n            panels = panels.filter((panel) => panel !== 'chartData');\n        }\n\n        const defaultToolPanel = chartToolPanelsDef?.defaultToolPanel;\n        const defaultPanel = (defaultToolPanel && CHART_TOOL_PANEL_MENU_OPTIONS[defaultToolPanel]) || panels[0];\n\n        return {\n            panels,\n            defaultPanel,\n        };\n    }\n\n    public doesChartToolbarExist(): boolean {\n        const chartToolbarOptions = this.getChartToolbarOptions();\n        return chartToolbarOptions.length > 0;\n    }\n\n    public doChartToolPanelsExist(chartController: ChartController): boolean {\n        const { panels } = this.getChartToolPanels(chartController);\n        return panels.length > 0;\n    }\n}\n", "import type { NamedBean } from '@ag-grid-community/core';\nimport { BeanStub } from '@ag-grid-community/core';\n\nexport type ChartTranslationKey = keyof typeof ChartTranslationService.DEFAULT_TRANSLATIONS;\n\nexport class ChartTranslationService extends BeanStub implements NamedBean {\n    beanName = 'chartTranslationService' as const;\n\n    public static readonly DEFAULT_TRANSLATIONS = {\n        pivotChartTitle: 'Pivot Chart',\n        rangeChartTitle: 'Range Chart',\n        settings: 'Chart',\n        data: 'Set Up',\n        format: 'Customize',\n        categories: 'Categories',\n        defaultCategory: '(None)',\n        series: 'Series',\n        switchCategorySeries: 'Switch Category / Series',\n        categoryValues: 'Category Values',\n        seriesLabels: 'Series Labels',\n        aggregate: 'Aggregate',\n        xyValues: 'X Y Values',\n        paired: 'Paired Mode',\n        axis: 'Axis',\n        xAxis: 'Horizontal Axis',\n        yAxis: 'Vertical Axis',\n        polarAxis: 'Polar Axis',\n        radiusAxis: 'Radius Axis',\n        navigator: 'Navigator',\n        zoom: 'Zoom',\n        animation: 'Animation',\n        crosshair: 'Crosshair',\n        color: 'Color',\n        thickness: 'Thickness',\n        preferredLength: 'Preferred Length',\n        xType: 'X Type',\n        axisType: 'Axis Type',\n        automatic: 'Automatic',\n        category: 'Category',\n        number: 'Number',\n        time: 'Time',\n        timeFormat: 'Time Format',\n        autoRotate: 'Auto Rotate',\n        labelRotation: 'Rotation',\n        circle: 'Circle',\n        polygon: 'Polygon',\n        square: 'Square',\n        cross: 'Cross',\n        diamond: 'Diamond',\n        plus: 'Plus',\n        triangle: 'Triangle',\n        heart: 'Heart',\n        orientation: 'Orientation',\n        fixed: 'Fixed',\n        parallel: 'Parallel',\n        perpendicular: 'Perpendicular',\n        radiusAxisPosition: 'Position',\n        ticks: 'Ticks',\n        gridLines: 'Grid Lines',\n        width: 'Width',\n        height: 'Height',\n        length: 'Length',\n        padding: 'Padding',\n        spacing: 'Spacing',\n        chartStyle: 'Chart Style',\n        title: 'Title',\n        chartTitles: 'Titles',\n        chartTitle: 'Chart Title',\n        chartSubtitle: 'Subtitle',\n        horizontalAxisTitle: 'Horizontal Axis Title',\n        verticalAxisTitle: 'Vertical Axis Title',\n        polarAxisTitle: 'Polar Axis Title',\n        titlePlaceholder: 'Chart Title',\n        background: 'Background',\n        font: 'Font',\n        weight: 'Weight',\n        top: 'Top',\n        right: 'Right',\n        bottom: 'Bottom',\n        left: 'Left',\n        labels: 'Labels',\n        calloutLabels: 'Callout Labels',\n        sectorLabels: 'Sector Labels',\n        positionRatio: 'Position Ratio',\n        size: 'Size',\n        shape: 'Shape',\n        minSize: 'Minimum Size',\n        maxSize: 'Maximum Size',\n        legend: 'Legend',\n        position: 'Position',\n        markerSize: 'Marker Size',\n        markerStroke: 'Marker Stroke',\n        markerPadding: 'Marker Padding',\n        itemSpacing: 'Item Spacing',\n        itemPaddingX: 'Item Padding X',\n        itemPaddingY: 'Item Padding Y',\n        layoutHorizontalSpacing: 'Horizontal Spacing',\n        layoutVerticalSpacing: 'Vertical Spacing',\n        strokeWidth: 'Stroke Width',\n        offset: 'Offset',\n        offsets: 'Offsets',\n        tooltips: 'Tooltips',\n        callout: 'Callout',\n        markers: 'Markers',\n        shadow: 'Shadow',\n        blur: 'Blur',\n        xOffset: 'X Offset',\n        yOffset: 'Y Offset',\n        lineWidth: 'Line Width',\n        lineDash: 'Line Dash',\n        lineDashOffset: 'Dash Offset',\n        scrollingZoom: 'Scrolling',\n        scrollingStep: 'Scrolling Step',\n        selectingZoom: 'Selecting',\n        durationMillis: 'Duration (ms)',\n        crosshairLabel: 'Label',\n        crosshairSnap: 'Snap to Node',\n        normal: 'Normal',\n        bold: 'Bold',\n        italic: 'Italic',\n        boldItalic: 'Bold Italic',\n        predefined: 'Predefined',\n        fillOpacity: 'Fill Opacity',\n        strokeColor: 'Line Color',\n        strokeOpacity: 'Line Opacity',\n        miniChart: 'Mini-Chart',\n        histogramBinCount: 'Bin count',\n        connectorLine: 'Connector Line',\n        seriesItems: 'Series Items',\n        seriesItemType: 'Item Type',\n        seriesItemPositive: 'Positive',\n        seriesItemNegative: 'Negative',\n        seriesItemLabels: 'Item Labels',\n        columnGroup: 'Column',\n        barGroup: 'Bar',\n        pieGroup: 'Pie',\n        lineGroup: 'Line',\n        scatterGroup: 'X Y (Scatter)',\n        areaGroup: 'Area',\n        polarGroup: 'Polar',\n        statisticalGroup: 'Statistical',\n        hierarchicalGroup: 'Hierarchical',\n        specializedGroup: 'Specialized',\n        combinationGroup: 'Combination',\n        groupedColumnTooltip: 'Grouped',\n        stackedColumnTooltip: 'Stacked',\n        normalizedColumnTooltip: '100% Stacked',\n        groupedBarTooltip: 'Grouped',\n        stackedBarTooltip: 'Stacked',\n        normalizedBarTooltip: '100% Stacked',\n        pieTooltip: 'Pie',\n        donutTooltip: 'Donut',\n        lineTooltip: 'Line',\n        groupedAreaTooltip: 'Area',\n        stackedAreaTooltip: 'Stacked',\n        normalizedAreaTooltip: '100% Stacked',\n        scatterTooltip: 'Scatter',\n        bubbleTooltip: 'Bubble',\n        histogramTooltip: 'Histogram',\n        radialColumnTooltip: 'Radial Column',\n        radialBarTooltip: 'Radial Bar',\n        radarLineTooltip: 'Radar Line',\n        radarAreaTooltip: 'Radar Area',\n        nightingaleTooltip: 'Nightingale',\n        rangeBarTooltip: 'Range Bar',\n        rangeAreaTooltip: 'Range Area',\n        boxPlotTooltip: 'Box Plot',\n        treemapTooltip: 'Treemap',\n        sunburstTooltip: 'Sunburst',\n        waterfallTooltip: 'Waterfall',\n        heatmapTooltip: 'Heatmap',\n        columnLineComboTooltip: 'Column & Line',\n        areaColumnComboTooltip: 'Area & Column',\n        customComboTooltip: 'Custom Combination',\n        innerRadius: 'Inner Radius',\n        startAngle: 'Start Angle',\n        endAngle: 'End Angle',\n        reverseDirection: 'Reverse Direction',\n        groupPadding: 'Group Padding',\n        seriesPadding: 'Series Padding',\n        tile: 'Tile',\n        whisker: 'Whisker',\n        cap: 'Cap',\n        capLengthRatio: 'Length Ratio',\n        labelPlacement: 'Placement',\n        inside: 'Inside',\n        outside: 'Outside',\n        noDataToChart: 'No data available to be charted.',\n        pivotChartRequiresPivotMode: 'Pivot Chart requires Pivot Mode enabled.',\n        chartSettingsToolbarTooltip: 'Menu',\n        chartLinkToolbarTooltip: 'Linked to Grid',\n        chartUnlinkToolbarTooltip: 'Unlinked from Grid',\n        chartDownloadToolbarTooltip: 'Download Chart',\n        chartMenuToolbarTooltip: 'Menu',\n        chartEdit: 'Edit Chart',\n        chartAdvancedSettings: 'Advanced Settings',\n        chartLink: 'Link to Grid',\n        chartUnlink: 'Unlink from Grid',\n        chartDownload: 'Download Chart',\n        histogramFrequency: 'Frequency',\n        seriesChartType: 'Series Chart Type',\n        seriesType: 'Series Type',\n        secondaryAxis: 'Secondary Axis',\n        seriesAdd: 'Add a series',\n        categoryAdd: 'Add a category',\n        bar: 'Bar',\n        column: 'Column',\n        histogram: 'Histogram',\n        advancedSettings: 'Advanced Settings',\n        direction: 'Direction',\n        horizontal: 'Horizontal',\n        vertical: 'Vertical',\n        seriesGroupType: 'Group Type',\n        groupedSeriesGroupType: 'Grouped',\n        stackedSeriesGroupType: 'Stacked',\n        normalizedSeriesGroupType: '100% Stacked',\n        legendEnabled: 'Enabled',\n        invalidColor: 'Color value is invalid',\n        groupedColumnFull: 'Grouped Column',\n        stackedColumnFull: 'Stacked Column',\n        normalizedColumnFull: '100% Stacked Column',\n        groupedBarFull: 'Grouped Bar',\n        stackedBarFull: 'Stacked Bar',\n        normalizedBarFull: '100% Stacked Bar',\n        stackedAreaFull: 'Stacked Area',\n        normalizedAreaFull: '100% Stacked Area',\n        customCombo: 'Custom Combination',\n\n        // menu items\n        groupedColumn: 'Grouped',\n        stackedColumn: 'Stacked',\n        pie: 'Pie',\n        donut: 'Donut',\n        line: 'Line',\n        scatter: 'Scatter',\n        bubble: 'Bubble',\n        area: 'Area',\n        stackedArea: 'Stacked',\n        radarLine: 'Radar Line',\n        radarArea: 'Radar Area',\n        nightingale: 'Nightingale',\n        radialColumn: 'Radial Column',\n        radialBar: 'Radial Bar',\n        boxPlot: 'Box Plot',\n        rangeBar: 'Range Bar',\n        rangeArea: 'Range Area',\n        treemap: 'Treemap',\n        sunburst: 'Sunburst',\n        waterfall: 'Waterfall',\n        heatmap: 'Heatmap',\n        columnLineCombo: 'Column & Line',\n        AreaColumnCombo: 'Area & Column',\n\n        // aria\n        ariaChartMenuClose: 'Close Chart Edit Menu',\n        ariaChartSelected: 'Selected',\n\n        // group\n        group: 'Group',\n\n        // time formats\n        timeFormatSlashesDDMMYYYY: 'DD/MM/YYYY',\n        timeFormatSlashesMMDDYYYY: 'MM/DD/YYYY',\n        timeFormatSlashesDDMMYY: 'DD/MM/YY',\n        timeFormatSlashesMMDDYY: 'MM/DD/YY',\n        timeFormatDotsDDMYY: 'DD.M.YY',\n        timeFormatDotsMDDYY: 'M.DD.YY',\n        timeFormatDashesYYYYMMDD: 'YYYY-MM-DD',\n        timeFormatSpacesDDMMMMYYYY: 'DD MMMM YYYY',\n        timeFormatHHMMSS: 'HH:MM:SS',\n        timeFormatHHMMSSAmPm: 'HH:MM:SS AM/PM',\n\n        // agg funcs\n        sum: 'Sum',\n        first: 'First',\n        last: 'Last',\n        min: 'Min',\n        max: 'Max',\n        count: 'Count',\n        avg: 'Average',\n    };\n\n    public translate(toTranslate: ChartTranslationKey): string {\n        const translate = this.localeService.getLocaleTextFunc();\n        const defaultTranslation = ChartTranslationService.DEFAULT_TRANSLATIONS[toTranslate];\n        return translate(toTranslate, defaultTranslation);\n    }\n}\n", "import type {\n    BaseCreateChartParams,\n    BeanCollection,\n    CellRangeParams,\n    ChartDownloadParams,\n    ChartModel,\n    ChartParamsCellRange,\n    ChartRef,\n    ChartType,\n    CreateCrossFilterChartParams,\n    CreatePivotChartParams,\n    CreateRangeChartParams,\n    Environment,\n    FocusService,\n    GetChartImageDataUrlParams,\n    IAggFunc,\n    IChartService,\n    IRangeService,\n    NamedBean,\n    OpenChartToolPanelParams,\n    PartialCellRange,\n    SeriesChartType,\n    SeriesGroupType,\n    UpdateChartParams,\n    VisibleColsService,\n} from '@ag-grid-community/core';\nimport { BeanStub, _warnOnce } from '@ag-grid-community/core';\nimport type { AgChartThemeOverrides, AgChartThemePalette } from 'ag-charts-community';\nimport { VERSION as CHARTS_VERSION, _ModuleSupport } from 'ag-charts-community';\n\nimport { VERSION as GRID_VERSION } from '../version';\nimport type { GridChartParams } from './chartComp/gridChartComp';\nimport { GridChartComp } from './chartComp/gridChartComp';\nimport { ChartParamsValidator } from './chartComp/utils/chartParamsValidator';\nimport { getCanonicalChartType } from './chartComp/utils/seriesTypeMapper';\nimport { upgradeChartModel } from './chartModelMigration';\n\nexport interface CrossFilteringContext {\n    lastSelectedChartId: string;\n}\n\nexport interface CommonCreateChartParams extends BaseCreateChartParams {\n    cellRange: PartialCellRange;\n    pivotChart?: boolean;\n    suppressChartRanges?: boolean;\n    switchCategorySeries?: boolean;\n    aggFunc?: string | IAggFunc;\n    crossFiltering?: boolean;\n    chartOptionsToRestore?: AgChartThemeOverrides;\n    chartPaletteToRestore?: AgChartThemePalette;\n    seriesChartTypes?: SeriesChartType[];\n    seriesGroupType?: SeriesGroupType;\n    focusDialogOnOpen?: boolean;\n}\n\nexport class ChartService extends BeanStub implements NamedBean, IChartService {\n    beanName = 'chartService' as const;\n\n    private visibleColsService: VisibleColsService;\n    private rangeService?: IRangeService;\n    private environment: Environment;\n    private focusService: FocusService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.visibleColsService = beans.visibleColsService;\n        this.rangeService = beans.rangeService;\n        this.environment = beans.environment;\n        this.focusService = beans.focusService;\n    }\n\n    public static CHARTS_VERSION = CHARTS_VERSION;\n\n    // we destroy all charts bound to this grid when grid is destroyed. activeCharts contains all charts, including\n    // those in developer provided containers.\n    private activeCharts = new Set<ChartRef>();\n    private activeChartComps = new Set<GridChartComp>();\n\n    // this shared (singleton) context is used by cross filtering in line and area charts\n    private crossFilteringContext: CrossFilteringContext = {\n        lastSelectedChartId: '',\n    };\n\n    public isEnterprise = () => _ModuleSupport.enterpriseModule.isEnterprise;\n\n    public updateChart(params: UpdateChartParams): void {\n        if (this.activeChartComps.size === 0) {\n            _warnOnce(`No active charts to update.`);\n            return;\n        }\n\n        const chartComp = [...this.activeChartComps].find((chartComp) => chartComp.getChartId() === params.chartId);\n        if (!chartComp) {\n            _warnOnce(`Unable to update chart. No active chart found with ID: ${params.chartId}.`);\n            return;\n        }\n\n        chartComp.update(params);\n    }\n\n    public getChartModels(): ChartModel[] {\n        const models: ChartModel[] = [];\n\n        const versionedModel = (c: ChartModel) => {\n            return { ...c, version: GRID_VERSION };\n        };\n        this.activeChartComps.forEach((c) => models.push(versionedModel(c.getChartModel())));\n\n        return models;\n    }\n\n    public getChartRef(chartId: string): ChartRef | undefined {\n        let chartRef;\n        this.activeCharts.forEach((cr) => {\n            if (cr.chartId === chartId) {\n                chartRef = cr;\n            }\n        });\n        return chartRef;\n    }\n\n    public getChartComp(chartId: string): GridChartComp | undefined {\n        let chartComp;\n        this.activeChartComps.forEach((comp) => {\n            if (comp.getChartId() === chartId) {\n                chartComp = comp;\n            }\n        });\n        return chartComp;\n    }\n\n    public getChartImageDataURL(params: GetChartImageDataUrlParams): string | undefined {\n        let url: any;\n        this.activeChartComps.forEach((c) => {\n            if (c.getChartId() === params.chartId) {\n                url = c.getChartImageDataURL(params.fileFormat);\n            }\n        });\n        return url;\n    }\n\n    public downloadChart(params: ChartDownloadParams) {\n        const chartComp = Array.from(this.activeChartComps).find((c) => c.getChartId() === params.chartId);\n        chartComp?.downloadChart(params.dimensions, params.fileName, params.fileFormat);\n    }\n\n    public openChartToolPanel(params: OpenChartToolPanelParams) {\n        const chartComp = Array.from(this.activeChartComps).find((c) => c.getChartId() === params.chartId);\n        chartComp?.openChartToolPanel(params.panel);\n    }\n\n    public closeChartToolPanel(chartId: string) {\n        const chartComp = Array.from(this.activeChartComps).find((c) => c.getChartId() === chartId);\n        chartComp?.closeChartToolPanel();\n    }\n\n    public createChartFromCurrentRange(\n        chartType: ChartType = 'groupedColumn',\n        fromApi?: boolean\n    ): ChartRef | undefined {\n        const cellRange: PartialCellRange = this.getSelectedRange();\n        return this.createChart({ cellRange, chartType, focusDialogOnOpen: !fromApi });\n    }\n\n    public restoreChart(model: ChartModel, chartContainer?: HTMLElement): ChartRef | undefined {\n        if (!model) {\n            _warnOnce('unable to restore chart as no chart model is provided');\n            return;\n        }\n\n        if (model.version !== GRID_VERSION) {\n            model = upgradeChartModel(model);\n        }\n\n        let cellRange: PartialCellRange | undefined;\n        let pivotChart: true | undefined;\n        let suppressChartRanges: boolean | undefined;\n        let chartPaletteToRestore: AgChartThemePalette | undefined;\n\n        if (model.modelType === 'pivot') {\n            // if required enter pivot mode\n            this.gos.updateGridOptions({ options: { pivotMode: true }, source: 'pivotChart' as any });\n\n            cellRange = this.createCellRange(undefined, true);\n            pivotChart = true;\n            suppressChartRanges = true;\n        } else {\n            cellRange = this.createCellRange(model.cellRange);\n            chartPaletteToRestore = model.chartPalette;\n            suppressChartRanges = model.suppressChartRanges;\n        }\n\n        if (!cellRange) {\n            return;\n        }\n\n        return this.createChart({\n            ...model,\n            cellRange,\n            pivotChart,\n            suppressChartRanges,\n            chartContainer,\n            chartOptionsToRestore: model.chartOptions,\n            chartPaletteToRestore,\n        });\n    }\n\n    public createRangeChart(params: CreateRangeChartParams, fromApi?: boolean): ChartRef | undefined {\n        const cellRange = this.createCellRange(params.cellRange);\n\n        if (!cellRange) {\n            return;\n        }\n\n        return this.createChart({\n            ...params,\n            cellRange,\n            focusDialogOnOpen: !fromApi,\n        });\n    }\n\n    public createPivotChart(params: CreatePivotChartParams, fromApi?: boolean): ChartRef | undefined {\n        // if required enter pivot mode\n        this.gos.updateGridOptions({ options: { pivotMode: true }, source: 'pivotChart' as any });\n\n        const cellRange = this.createCellRange(undefined, true);\n\n        if (!cellRange) {\n            return;\n        }\n\n        return this.createChart({\n            ...params,\n            cellRange,\n            pivotChart: true,\n            suppressChartRanges: true,\n            focusDialogOnOpen: !fromApi,\n        });\n    }\n\n    public createCrossFilterChart(params: CreateCrossFilterChartParams, fromApi?: boolean): ChartRef | undefined {\n        const cellRange = this.createCellRange(params.cellRange);\n\n        if (!cellRange) {\n            return;\n        }\n\n        const suppressChartRangesSupplied =\n            typeof params.suppressChartRanges !== 'undefined' && params.suppressChartRanges !== null;\n        const suppressChartRanges = suppressChartRangesSupplied ? params.suppressChartRanges : true;\n\n        return this.createChart({\n            ...params,\n            cellRange,\n            suppressChartRanges,\n            crossFiltering: true,\n            focusDialogOnOpen: !fromApi,\n        });\n    }\n\n    private createChart(params: CommonCreateChartParams): ChartRef | undefined {\n        const validationResult = ChartParamsValidator.validateCreateParams(params);\n        if (!validationResult) {\n            return undefined;\n        }\n        params = validationResult === true ? params : validationResult;\n\n        const { chartType, chartContainer } = params;\n\n        const createChartContainerFunc = this.gos.getCallback('createChartContainer');\n\n        const gridChartParams: GridChartParams = {\n            ...params,\n            chartId: this.generateId(),\n            chartType: getCanonicalChartType(chartType),\n            insideDialog: !(chartContainer || createChartContainerFunc),\n            crossFilteringContext: this.crossFilteringContext,\n            crossFilteringResetCallback: () => this.activeChartComps.forEach((c) => c.crossFilteringReset()),\n        };\n\n        const chartComp = new GridChartComp(gridChartParams);\n        this.createBean(chartComp);\n\n        const chartRef = this.createChartRef(chartComp);\n\n        if (chartContainer) {\n            // if container exists, means developer initiated chart create via API, so place in provided container\n            chartContainer.appendChild(chartComp.getGui());\n\n            // if the chart container was placed outside an element that\n            // has the grid's theme, we manually add the current theme to\n            // make sure all styles for the chartMenu are rendered correctly\n            const themeEl = this.environment.getThemeAncestorElement();\n\n            if (themeEl && !themeEl.contains(chartContainer)) {\n                this.environment.applyThemeClasses(chartContainer);\n            }\n        } else if (createChartContainerFunc) {\n            // otherwise, user created chart via grid UI, check if developer provides containers (e.g. if the application\n            // is using its own dialogs rather than the grid provided dialogs)\n            createChartContainerFunc(chartRef);\n        } else {\n            // add listener to remove from active charts list when charts are destroyed, e.g. closing chart dialog\n            chartComp.addEventListener('destroyed', () => {\n                this.activeChartComps.delete(chartComp);\n                this.activeCharts.delete(chartRef);\n            });\n        }\n\n        return chartRef;\n    }\n\n    private createChartRef(chartComp: GridChartComp): ChartRef {\n        const chartRef: ChartRef = {\n            destroyChart: () => {\n                if (this.activeCharts.has(chartRef)) {\n                    this.destroyBean(chartComp);\n                    this.activeChartComps.delete(chartComp);\n                    this.activeCharts.delete(chartRef);\n                }\n            },\n            focusChart: () => {\n                this.focusService.focusInto(chartComp.getGui());\n            },\n            chartElement: chartComp.getGui(),\n            chart: chartComp.getUnderlyingChart(),\n            chartId: chartComp.getChartModel().chartId,\n        };\n\n        this.activeCharts.add(chartRef);\n        this.activeChartComps.add(chartComp);\n\n        return chartRef;\n    }\n\n    private getSelectedRange(): PartialCellRange {\n        const ranges = this.rangeService?.getCellRanges() ?? [];\n        return ranges.length > 0 ? ranges[0] : { columns: [] };\n    }\n\n    private generateId(): string {\n        return `id-${Math.random().toString(36).substring(2, 18)}`;\n    }\n\n    private createCellRange(cellRangeParams?: ChartParamsCellRange, allRange?: boolean): PartialCellRange | undefined {\n        const rangeParams = allRange\n            ? {\n                  rowStartIndex: null,\n                  rowStartPinned: undefined,\n                  rowEndIndex: null,\n                  rowEndPinned: undefined,\n                  columns: this.visibleColsService.getAllCols().map((col) => col.getColId()),\n              }\n            : cellRangeParams;\n        const cellRange =\n            rangeParams &&\n            this.rangeService?.createPartialCellRangeFromRangeParams(rangeParams as CellRangeParams, true);\n        if (!cellRange) {\n            _warnOnce(\n                `unable to create chart as ${allRange ? 'there are no columns in the grid' : 'no range is selected'}.`\n            );\n        }\n        return cellRange;\n    }\n\n    public override destroy(): void {\n        this.activeCharts.forEach((chart) => chart.destroyChart());\n        super.destroy();\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.3.1';\n", "import type {\n    BeanCollection,\n    ChartCreatedEvent,\n    ChartDestroyedEvent,\n    ChartModel,\n    ChartToolPanelName,\n    ChartType,\n    FocusService,\n    IAggFunc,\n    PartialCellRange,\n    PopupService,\n    SeriesChartType,\n    UpdateChartParams,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport {\n    Component,\n    RefPlaceholder,\n    _clearElement,\n    _getAbsoluteHeight,\n    _getAbsoluteWidth,\n    _includes,\n    _removeFromParent,\n    _setDisplayed,\n    _warnOnce,\n} from '@ag-grid-community/core';\nimport { AgDialog } from '@ag-grid-enterprise/core';\nimport type { AgChartInstance, AgChartThemeOverrides, AgChartThemePalette } from 'ag-charts-community';\n\nimport type { CrossFilteringContext } from '../chartService';\nimport { ChartController, DEFAULT_THEMES } from './chartController';\nimport { AreaChartProxy } from './chartProxies/cartesian/areaChartProxy';\nimport { BarChartProxy } from './chartProxies/cartesian/barChartProxy';\nimport { HistogramChartProxy } from './chartProxies/cartesian/histogramChartProxy';\nimport { LineChartProxy } from './chartProxies/cartesian/lineChartProxy';\nimport { ScatterChartProxy } from './chartProxies/cartesian/scatterChartProxy';\nimport { WaterfallChartProxy } from './chartProxies/cartesian/waterfallChartProxy';\nimport type { ChartProxy, ChartProxyParams } from './chartProxies/chartProxy';\nimport { ComboChartProxy } from './chartProxies/combo/comboChartProxy';\nimport { HierarchicalChartProxy } from './chartProxies/hierarchical/hierarchicalChartProxy';\nimport { PieChartProxy } from './chartProxies/pie/pieChartProxy';\nimport { PolarChartProxy } from './chartProxies/polar/polarChartProxy';\nimport { HeatmapChartProxy } from './chartProxies/specialized/heatmapChartProxy';\nimport { BoxPlotChartProxy } from './chartProxies/statistical/boxPlotChartProxy';\nimport { RangeChartProxy } from './chartProxies/statistical/rangeChartProxy';\nimport { ChartMenu } from './menu/chartMenu';\nimport type { ChartMenuContext } from './menu/chartMenuContext';\nimport { ChartMenuParamsFactory } from './menu/chartMenuParamsFactory';\nimport type { ChartModelParams } from './model/chartDataModel';\nimport { ChartDataModel } from './model/chartDataModel';\nimport type { ChartCrossFilterService } from './services/chartCrossFilterService';\nimport type { ChartMenuService } from './services/chartMenuService';\nimport { CHART_TOOL_PANEL_MENU_OPTIONS } from './services/chartMenuService';\nimport { ChartOptionsService } from './services/chartOptionsService';\nimport type { ChartTranslationKey, ChartTranslationService } from './services/chartTranslationService';\nimport { deepMerge } from './utils/object';\nimport { getCanonicalChartType, getSeriesType, isHierarchical } from './utils/seriesTypeMapper';\n\nexport interface GridChartParams {\n    chartId: string;\n    pivotChart?: boolean;\n    cellRange: PartialCellRange;\n    chartType: ChartType;\n    chartThemeName?: string;\n    insideDialog: boolean;\n    focusDialogOnOpen?: boolean;\n    suppressChartRanges?: boolean;\n    switchCategorySeries?: boolean;\n    aggFunc?: string | IAggFunc;\n    chartThemeOverrides?: AgChartThemeOverrides;\n    unlinkChart?: boolean;\n    crossFiltering?: boolean;\n    crossFilteringContext: CrossFilteringContext;\n    chartOptionsToRestore?: AgChartThemeOverrides;\n    chartPaletteToRestore?: AgChartThemePalette;\n    seriesChartTypes?: SeriesChartType[];\n    crossFilteringResetCallback?: () => void;\n}\n\nexport class GridChartComp extends Component {\n    private crossFilterService: ChartCrossFilterService;\n    private chartTranslationService: ChartTranslationService;\n    private chartMenuService: ChartMenuService;\n    private focusService: FocusService;\n    private popupService: PopupService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.crossFilterService = beans.chartCrossFilterService as ChartCrossFilterService;\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n        this.chartMenuService = beans.chartMenuService as ChartMenuService;\n        this.focusService = beans.focusService;\n        this.popupService = beans.popupService;\n    }\n\n    private readonly eChart: HTMLElement = RefPlaceholder;\n    private readonly eChartContainer: HTMLElement = RefPlaceholder;\n    private readonly eMenuContainer: HTMLElement = RefPlaceholder;\n    private readonly eEmpty: HTMLElement = RefPlaceholder;\n\n    private chartMenu: ChartMenu;\n    private chartDialog: AgDialog;\n\n    private chartController: ChartController;\n    private chartOptionsService: ChartOptionsService;\n    private chartMenuContext: ChartMenuContext;\n\n    private chartProxy: ChartProxy;\n    private chartType: ChartType;\n    private chartEmpty: boolean;\n\n    private readonly params: GridChartParams;\n\n    // function to clean up the 'color-scheme-change' event listener\n    private onDestroyColorSchemeChangeListener: () => void;\n\n    constructor(params: GridChartParams) {\n        super(/* html */ `<div class=\"ag-chart\">\n            <div data-ref=\"eChartContainer\" class=\"ag-chart-components-wrapper ag-chart-menu-hidden\">\n                <div data-ref=\"eChart\" class=\"ag-chart-canvas-wrapper\"></div>\n                <div data-ref=\"eEmpty\" class=\"ag-chart-empty-text ag-unselectable\"></div>\n            </div>\n            <div data-ref=\"eMenuContainer\" class=\"ag-chart-docked-container\"></div>\n            </div>`);\n        this.params = params;\n    }\n\n    public postConstruct(): void {\n        const modelParams: ChartModelParams = {\n            ...this.params,\n            chartType: getCanonicalChartType(this.params.chartType),\n            chartThemeName: this.getThemeName(),\n        };\n\n        const isRtl = this.gos.get('enableRtl');\n\n        this.addCssClass(isRtl ? 'ag-rtl' : 'ag-ltr');\n\n        // only the chart controller interacts with the chart model\n        const model = this.createBean(new ChartDataModel(modelParams));\n        this.chartController = this.createManagedBean(new ChartController(model));\n        this.chartOptionsService = this.createManagedBean(new ChartOptionsService(this.chartController));\n\n        this.validateCustomThemes();\n\n        // create chart before dialog to ensure dialog is correct size\n        this.createChart();\n\n        if (this.params.insideDialog) {\n            this.addDialog();\n        }\n\n        this.addMenu();\n\n        this.addManagedElementListeners(this.getGui(), { focusin: this.setActiveChartCellRange.bind(this) });\n        this.addManagedListeners(this.chartController, { chartModelUpdate: this.update.bind(this) });\n\n        this.addManagedPropertyListeners(\n            ['chartThemeOverrides', 'chartThemes'],\n            this.reactivePropertyUpdate.bind(this)\n        );\n\n        this.update();\n        this.raiseChartCreatedEvent();\n    }\n\n    private createChart(): void {\n        // if chart already exists, destroy it and remove it from DOM\n        let chartInstance: AgChartInstance | undefined = undefined;\n        if (this.chartProxy) {\n            chartInstance = this.chartProxy.destroy({ keepChartInstance: true });\n        }\n\n        const crossFilterCallback = (event: any, reset: boolean) => {\n            const ctx = this.params.crossFilteringContext;\n            ctx.lastSelectedChartId = reset ? '' : this.chartController.getChartId();\n            if (reset) {\n                this.params.crossFilteringResetCallback!();\n            }\n            this.crossFilterService.filter(event, reset);\n        };\n\n        const chartType = this.chartController.getChartType();\n        const chartProxyParams: ChartProxyParams = {\n            chartType,\n            chartInstance,\n            getChartThemeName: this.getChartThemeName.bind(this),\n            getChartThemes: this.getChartThemes.bind(this),\n            customChartThemes: this.gos.get('customChartThemes'),\n            getGridOptionsChartThemeOverrides: () => this.getGridOptionsChartThemeOverrides(),\n            getExtraPaddingDirections: () => this.chartMenu?.getExtraPaddingDirections() ?? [],\n            apiChartThemeOverrides: this.params.chartThemeOverrides,\n            crossFiltering: this.params.crossFiltering ?? false,\n            crossFilterCallback,\n            parentElement: this.eChart,\n            grouping: this.chartController.isGrouping(),\n            chartThemeToRestore: this.params.chartThemeName,\n            chartOptionsToRestore: this.params.chartOptionsToRestore,\n            chartPaletteToRestore: this.params.chartPaletteToRestore,\n            seriesChartTypes: this.chartController.getSeriesChartTypes(),\n            translate: (toTranslate: ChartTranslationKey) => this.chartTranslationService.translate(toTranslate),\n        };\n\n        // ensure 'restoring' options are not reused when switching chart types\n        this.params.chartOptionsToRestore = undefined;\n\n        // set local state used to detect when chart changes\n        this.chartType = chartType;\n\n        this.chartProxy = GridChartComp.createChartProxy(chartProxyParams);\n        if (!this.chartProxy) {\n            _warnOnce('invalid chart type supplied: ' + chartProxyParams.chartType);\n            return;\n        }\n\n        this.chartController.setChartProxy(this.chartProxy);\n        this.createMenuContext();\n    }\n\n    private createMenuContext(): void {\n        if (this.chartMenuContext) {\n            return;\n        }\n        const chartMenuParamsFactory = this.createManagedBean(\n            new ChartMenuParamsFactory(this.chartOptionsService.getChartThemeOverridesProxy())\n        );\n        const chartAxisMenuParamsFactory = this.createManagedBean(\n            new ChartMenuParamsFactory(this.chartOptionsService.getAxisThemeOverridesProxy())\n        );\n        this.chartMenuContext = {\n            chartController: this.chartController,\n            chartOptionsService: this.chartOptionsService,\n            chartMenuParamsFactory,\n            chartAxisMenuParamsFactory,\n        };\n    }\n\n    private getChartThemeName(): string {\n        return this.chartController.getChartThemeName();\n    }\n\n    private getChartThemes(): string[] {\n        return this.chartController.getThemeNames();\n    }\n\n    private getGridOptionsChartThemeOverrides(): AgChartThemeOverrides | undefined {\n        return this.gos.get('chartThemeOverrides');\n    }\n\n    private static createChartProxy(chartProxyParams: ChartProxyParams): ChartProxy {\n        switch (chartProxyParams.chartType) {\n            case 'column':\n            case 'bar':\n            case 'groupedColumn':\n            case 'stackedColumn':\n            case 'normalizedColumn':\n            case 'groupedBar':\n            case 'stackedBar':\n            case 'normalizedBar':\n                return new BarChartProxy(chartProxyParams);\n            case 'pie':\n            case 'donut':\n            case 'doughnut':\n                return new PieChartProxy(chartProxyParams);\n            case 'area':\n            case 'stackedArea':\n            case 'normalizedArea':\n                return new AreaChartProxy(chartProxyParams);\n            case 'line':\n                return new LineChartProxy(chartProxyParams);\n            case 'scatter':\n            case 'bubble':\n                return new ScatterChartProxy(chartProxyParams);\n            case 'histogram':\n                return new HistogramChartProxy(chartProxyParams);\n            case 'radarLine':\n            case 'radarArea':\n            case 'nightingale':\n            case 'radialColumn':\n            case 'radialBar':\n                return new PolarChartProxy(chartProxyParams);\n            case 'rangeBar':\n            case 'rangeArea':\n                return new RangeChartProxy(chartProxyParams);\n            case 'boxPlot':\n                return new BoxPlotChartProxy(chartProxyParams);\n            case 'treemap':\n            case 'sunburst':\n                return new HierarchicalChartProxy(chartProxyParams);\n            case 'heatmap':\n                return new HeatmapChartProxy(chartProxyParams);\n            case 'waterfall':\n                return new WaterfallChartProxy(chartProxyParams);\n            case 'columnLineCombo':\n            case 'areaColumnCombo':\n            case 'customCombo':\n                return new ComboChartProxy(chartProxyParams);\n            default:\n                throw `AG Grid: Unable to create chart as an invalid chartType = '${chartProxyParams.chartType}' was supplied.`;\n        }\n    }\n\n    private addDialog(): void {\n        const title = this.chartTranslationService.translate(\n            this.params.pivotChart ? 'pivotChartTitle' : 'rangeChartTitle'\n        );\n\n        const { width, height } = this.getBestDialogSize();\n\n        const afterGuiAttached = this.params.focusDialogOnOpen\n            ? () => setTimeout(() => this.focusService.focusInto(this.getGui()))\n            : undefined;\n\n        this.chartDialog = new AgDialog({\n            resizable: true,\n            movable: true,\n            maximizable: true,\n            title,\n            width,\n            height,\n            component: this,\n            centered: true,\n            closable: true,\n            afterGuiAttached,\n        });\n\n        this.createBean(this.chartDialog);\n\n        this.chartDialog.addEventListener('destroyed', () => {\n            this.destroy();\n            this.chartMenuService.hideAdvancedSettings();\n            const lastFocusedCell = this.focusService.getFocusedCell();\n            setTimeout(() => {\n                if (lastFocusedCell) {\n                    this.focusService.setFocusedCell({ ...lastFocusedCell, forceBrowserFocus: true });\n                } else {\n                    this.focusService.focusGridInnerElement();\n                }\n            });\n        });\n    }\n\n    private getBestDialogSize(): { width: number; height: number } {\n        const popupParent = this.popupService.getPopupParent();\n        const maxWidth = _getAbsoluteWidth(popupParent) * 0.75;\n        const maxHeight = _getAbsoluteHeight(popupParent) * 0.75;\n        const ratio = 0.553;\n\n        const chart = this.chartProxy.getChart();\n        let width = this.params.insideDialog ? 850 : chart.width;\n        let height = this.params.insideDialog ? 470 : chart.height;\n\n        if (width > maxWidth || height > maxHeight) {\n            width = Math.min(width, maxWidth);\n            height = Math.round(width * ratio);\n\n            if (height > maxHeight) {\n                height = maxHeight;\n                width = Math.min(width, Math.round(height / ratio));\n            }\n        }\n\n        return { width, height };\n    }\n\n    private addMenu(): void {\n        if (!this.params.crossFiltering) {\n            this.chartMenu = this.createBean(\n                new ChartMenu(this.eChartContainer, this.eMenuContainer, this.chartMenuContext)\n            );\n            this.eChartContainer.appendChild(this.chartMenu.getGui());\n        }\n    }\n\n    public update(params?: UpdateChartParams): void {\n        // update chart model for api.updateChart()\n        if (params?.chartId) {\n            const validUpdate = this.chartController.update(params);\n            if (!validUpdate) {\n                return; // warning already logged!\n            }\n        }\n\n        const updatedChartType = this.chartTypeChanged(params);\n        // If the chart type has changed, grab the theme overrides from the exisiting chart before destroying it,\n        // so that we can retain any compatible theme overrides across different chart types.\n        const persistedThemeOverrides =\n            updatedChartType || this.chartEmpty\n                ? ((updatedChartType) => {\n                      const currentChartType = this.chartType;\n                      const targetChartType = updatedChartType;\n                      const existingChartInstance = this.chartProxy.getChart();\n                      const existingChartOptions = existingChartInstance?.getOptions();\n                      const existingAxes = existingChartInstance?.axes;\n                      return this.chartOptionsService.getPersistedChartThemeOverrides(\n                          existingChartOptions,\n                          existingAxes,\n                          currentChartType,\n                          targetChartType ?? currentChartType\n                      );\n                  })(updatedChartType)\n                : undefined;\n\n        // recreate chart if chart type has changed\n        if (updatedChartType) this.createChart();\n\n        // combine any provided theme overrides with any retained theme overrides from changing chart type\n        const updatedThemeOverrides =\n            persistedThemeOverrides && params?.chartThemeOverrides\n                ? deepMerge(persistedThemeOverrides, params.chartThemeOverrides)\n                : persistedThemeOverrides || params?.chartThemeOverrides;\n\n        // update chart options if chart type hasn't changed or if overrides are supplied\n        this.updateChart(updatedThemeOverrides);\n\n        if (params?.chartId) {\n            this.chartProxy\n                .getChart()\n                .waitForUpdate()\n                .then(() => {\n                    this.chartController.raiseChartApiUpdateEvent();\n                });\n        }\n    }\n\n    private updateChart(updatedOverrides?: AgChartThemeOverrides): void {\n        const { chartProxy } = this;\n\n        const selectedCols = this.chartController.getSelectedValueColState();\n        const data = this.chartController.getChartData();\n        const chartEmpty = this.handleEmptyChart(data, selectedCols.length);\n\n        this.chartEmpty = chartEmpty;\n        if (chartEmpty) {\n            // We don't have enough data to reinstantiate the chart with the new chart type,\n            // but we still want to persist any theme overrides for when the data is present\n            if (updatedOverrides) this.chartController.updateThemeOverrides(updatedOverrides);\n            return;\n        }\n\n        const chartUpdateParams = this.chartController.getChartUpdateParams(updatedOverrides);\n        chartProxy.update(chartUpdateParams);\n\n        this.chartProxy\n            .getChart()\n            .waitForUpdate()\n            .then(() => {\n                this.chartController.raiseChartUpdatedEvent();\n            });\n    }\n\n    private chartTypeChanged(updateParams?: UpdateChartParams): ChartType | null {\n        const [currentType, updatedChartType] = [this.chartController.getChartType(), updateParams?.chartType];\n        const targetChartType = updatedChartType ? getCanonicalChartType(updatedChartType) : undefined;\n        // If the grid chart component is out of sync with the existing chart instance type, return the correct chart type\n        if (this.chartType !== currentType) return targetChartType ?? currentType;\n        // If the target chart type is different to the current chart type, return the new chart type\n        if (targetChartType && currentType !== targetChartType) return targetChartType;\n        // Otherwise nothing has changed\n        return null;\n    }\n\n    public getChartModel(): ChartModel {\n        return this.chartController.getChartModel();\n    }\n\n    public getChartImageDataURL(fileFormat?: string): string {\n        return this.chartProxy.getChartImageDataURL(fileFormat);\n    }\n\n    private handleEmptyChart(data: any[], numFields: number): boolean {\n        const pivotModeDisabled = this.chartController.isPivotChart() && !this.chartController.isPivotMode();\n\n        // Determine the minimum number of fields based on the chart type\n        const chartType = this.chartController.getChartType();\n        let minFieldsRequired = 1;\n        if (this.chartController.isActiveXYChart()) {\n            minFieldsRequired = chartType === 'bubble' ? 3 : 2;\n        } else if (isHierarchical(getSeriesType(chartType))) {\n            minFieldsRequired = 0;\n        }\n\n        const isEmptyChart = numFields < minFieldsRequired || data.length === 0;\n\n        if (this.eChart) {\n            const isEmpty = pivotModeDisabled || isEmptyChart;\n            _setDisplayed(this.eChart, !isEmpty);\n            _setDisplayed(this.eEmpty, isEmpty);\n        }\n\n        if (pivotModeDisabled) {\n            this.eEmpty.innerText = this.chartTranslationService.translate('pivotChartRequiresPivotMode');\n            return true;\n        }\n\n        if (isEmptyChart) {\n            this.eEmpty.innerText = this.chartTranslationService.translate('noDataToChart');\n            return true;\n        }\n\n        return false;\n    }\n\n    public downloadChart(dimensions?: { width: number; height: number }, fileName?: string, fileFormat?: string): void {\n        this.chartProxy.downloadChart(dimensions, fileName, fileFormat);\n    }\n\n    public openChartToolPanel(panel?: ChartToolPanelName) {\n        const menuPanel = panel ? CHART_TOOL_PANEL_MENU_OPTIONS[panel] : panel;\n        this.chartMenu.showMenu({ panel: menuPanel });\n    }\n\n    public closeChartToolPanel() {\n        this.chartMenu.hideMenu();\n    }\n\n    public getChartId(): string {\n        return this.chartController.getChartId();\n    }\n\n    public getUnderlyingChart() {\n        return this.chartProxy.getChartRef();\n    }\n\n    public crossFilteringReset(): void {\n        this.chartProxy.crossFilteringReset();\n    }\n\n    private setActiveChartCellRange(focusEvent: FocusEvent): void {\n        if (this.getGui().contains(focusEvent.relatedTarget as HTMLElement)) {\n            return;\n        }\n\n        this.chartController.setChartRange(true);\n        this.focusService.clearFocusedCell();\n    }\n\n    private getThemeName(): string {\n        const availableChartThemes = this.gos.get('chartThemes') || DEFAULT_THEMES;\n\n        if (availableChartThemes.length === 0) {\n            throw new Error('Cannot create chart: no chart themes available.');\n        }\n\n        const { chartThemeName } = this.params;\n        return _includes(availableChartThemes, chartThemeName) ? chartThemeName! : availableChartThemes[0];\n    }\n\n    private getAllKeysInObjects(objects: any[]): string[] {\n        const allValues: any = {};\n\n        objects\n            .filter((obj) => obj != null)\n            .forEach((obj) => {\n                Object.keys(obj).forEach((key) => (allValues[key] = null));\n            });\n\n        return Object.keys(allValues);\n    }\n\n    private validateCustomThemes() {\n        const suppliedThemes = this.getChartThemes();\n        const customChartThemes = this.gos.get('customChartThemes');\n        if (customChartThemes) {\n            this.getAllKeysInObjects([customChartThemes]).forEach((customThemeName) => {\n                if (!_includes(suppliedThemes, customThemeName)) {\n                    _warnOnce(\n                        \"a custom chart theme with the name '\" +\n                            customThemeName +\n                            \"' has been \" +\n                            \"supplied but not added to the 'chartThemes' list\"\n                    );\n                }\n            });\n        }\n    }\n\n    private reactivePropertyUpdate(): void {\n        // switch to the first theme if the current theme is unavailable\n        this.chartController.setChartThemeName(this.getThemeName(), true);\n\n        const chartId = this.getChartId();\n        const modelType = this.chartController.isCrossFilterChart() ? 'crossFilter' : this.getChartModel().modelType;\n\n        // standalone requires that `undefined` / `null` values are supplied as `{}`\n        const chartThemeOverrides = this.gos.get('chartThemeOverrides') || {};\n\n        this.update({\n            type: `${modelType}ChartUpdate`,\n            chartId,\n            chartThemeOverrides,\n        });\n    }\n\n    private raiseChartCreatedEvent(): void {\n        const event: WithoutGridCommon<ChartCreatedEvent> = {\n            type: 'chartCreated',\n            chartId: this.chartController.getChartId(),\n        };\n\n        this.chartProxy\n            .getChart()\n            .waitForUpdate()\n            .then(() => {\n                this.eventService.dispatchEvent(event);\n            });\n    }\n\n    private raiseChartDestroyedEvent(): void {\n        const event: WithoutGridCommon<ChartDestroyedEvent> = {\n            type: 'chartDestroyed',\n            chartId: this.chartController.getChartId(),\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public override destroy(): void {\n        super.destroy();\n\n        if (this.chartProxy) {\n            this.chartProxy.destroy();\n        }\n\n        this.destroyBean(this.chartMenu);\n\n        // don't want to invoke destroy() on the Dialog (prevents destroy loop)\n        if (this.chartDialog && this.chartDialog.isAlive()) {\n            this.destroyBean(this.chartDialog);\n        }\n\n        this.onDestroyColorSchemeChangeListener?.();\n\n        // if the user is providing containers for the charts, we need to clean up, otherwise the old chart\n        // data will still be visible although the chart is no longer bound to the grid\n        const eGui = this.getGui();\n        _clearElement(eGui);\n        // remove from parent, so if user provided container, we detach from the provided dom element\n        _removeFromParent(eGui);\n\n        this.raiseChartDestroyedEvent();\n    }\n}\n", "import type {\n    BeanCollection,\n    CellRange,\n    CellRangeParams,\n    ChartModel,\n    ChartModelType,\n    ChartOptionsChangedEvent,\n    ChartRangeSelectionChangedEvent,\n    ChartType,\n    IAggFunc,\n    IRangeService,\n    PartialCellRange,\n    SeriesChartType,\n    SeriesGroupType,\n    UpdateChartParams,\n    UpdateCrossFilterChartParams,\n    UpdateRangeChartParams,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { BeanStub, _warnOnce } from '@ag-grid-community/core';\nimport type { AgCartesianAxisType, AgChartThemePalette } from 'ag-charts-community';\nimport { _ModuleSupport, _Theme } from 'ag-charts-community';\nimport type { AgChartThemeOverrides } from 'ag-charts-types';\n\nimport type { ChartProxy, FieldDefinition, UpdateParams } from './chartProxies/chartProxy';\nimport { isStockTheme } from './chartProxies/chartTheme';\nimport type { ChartModelParams, ColState } from './model/chartDataModel';\nimport { ChartDataModel } from './model/chartDataModel';\nimport { ChartParamsValidator } from './utils/chartParamsValidator';\nimport type { ChartSeriesType } from './utils/seriesTypeMapper';\nimport {\n    getMaxNumCategories,\n    getMaxNumSeries,\n    getSeriesType,\n    supportsInvertedCategorySeries,\n} from './utils/seriesTypeMapper';\n\nexport const DEFAULT_THEMES = ['ag-default', 'ag-material', 'ag-sheets', 'ag-polychroma', 'ag-vivid'];\n\nexport type ChartControllerEvent =\n    | 'chartUpdated'\n    | 'chartApiUpdate'\n    | 'chartModelUpdate'\n    | 'chartTypeChanged'\n    | 'chartSeriesChartTypeChanged'\n    | 'chartLinkedChanged';\nexport class ChartController extends BeanStub<ChartControllerEvent> {\n    private rangeService: IRangeService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.rangeService = beans.rangeService!;\n    }\n\n    private chartProxy: ChartProxy;\n\n    public constructor(private readonly model: ChartDataModel) {\n        super();\n    }\n\n    public postConstruct(): void {\n        this.setChartRange();\n\n        if (this.model.unlinked) {\n            if (this.rangeService) {\n                this.rangeService.setCellRanges([]);\n            }\n        }\n        const listener = this.updateForGridChange.bind(this);\n        this.addManagedEventListeners({\n            rangeSelectionChanged: (event) => {\n                if (event.id && event.id === this.model.chartId) {\n                    this.updateForRangeChange();\n                }\n            },\n            columnMoved: listener,\n            columnPinned: listener,\n            columnVisible: listener,\n            columnRowGroupChanged: listener,\n            modelUpdated: () => this.updateForGridChange({ fromModelUpdate: true }),\n            cellValueChanged: this.updateForDataChange.bind(this),\n        });\n    }\n\n    public update(params: UpdateChartParams): boolean {\n        if (!this.validUpdateType(params)) return false;\n        const validationResult = ChartParamsValidator.validateUpdateParams(params);\n        if (!validationResult) return false;\n        const validParams = validationResult === true ? params : validationResult;\n        this.applyValidatedChartParams(validParams);\n        return true;\n    }\n\n    private applyValidatedChartParams(params: UpdateChartParams): void {\n        const { chartId, chartType, chartThemeName, unlinkChart } = params;\n\n        // create a common base for the chart model parameters (this covers pivot chart updates)\n        const common = {\n            chartId: chartId,\n            pivotChart: this.model.pivotChart,\n            chartType: chartType ?? this.model.chartType,\n            chartThemeName: chartThemeName ?? this.model.chartThemeName,\n            unlinkChart: unlinkChart ?? this.model.unlinked,\n            cellRange: this.model.suppliedCellRange,\n            switchCategorySeries: this.model.switchCategorySeries,\n            aggFunc: this.model.aggFunc,\n            seriesChartTypes: undefined,\n            suppressChartRanges: false,\n            crossFiltering: false,\n        };\n\n        const chartModelParams: ChartModelParams = { ...common };\n\n        // modify the chart model properties based on the type of update\n        switch (params.type) {\n            case 'rangeChartUpdate':\n                chartModelParams.cellRange = this.createCellRange(params) ?? this.model.suppliedCellRange;\n                chartModelParams.switchCategorySeries = params.switchCategorySeries ?? this.model.switchCategorySeries;\n                chartModelParams.aggFunc = params.aggFunc ?? this.model.aggFunc;\n                chartModelParams.seriesChartTypes = params.seriesChartTypes;\n                chartModelParams.suppressChartRanges = params.suppressChartRanges ?? this.model.suppressChartRanges;\n                chartModelParams.seriesGroupType = params.seriesGroupType ?? this.model.seriesGroupType;\n                break;\n            case 'crossFilterChartUpdate':\n                chartModelParams.cellRange = this.createCellRange(params) ?? this.model.suppliedCellRange;\n                chartModelParams.switchCategorySeries = false;\n                chartModelParams.aggFunc = params.aggFunc ?? this.model.aggFunc;\n                chartModelParams.crossFiltering = true;\n                chartModelParams.suppressChartRanges = params.suppressChartRanges ?? this.model.suppressChartRanges;\n                break;\n            case 'pivotChartUpdate':\n                chartModelParams.switchCategorySeries = false;\n                break;\n        }\n\n        this.model.updateModel(chartModelParams);\n\n        // if the chart should be unlinked or chart ranges suppressed, remove all cell ranges; otherwise, set the chart range\n        const removeChartCellRanges = chartModelParams.unlinkChart || chartModelParams.suppressChartRanges;\n        removeChartCellRanges ? this.rangeService?.setCellRanges([]) : this.setChartRange();\n    }\n\n    public updateForGridChange(params?: {\n        maintainColState?: boolean;\n        setColsFromRange?: boolean;\n        fromModelUpdate?: boolean;\n    }): void {\n        if (this.model.unlinked) {\n            return;\n        }\n\n        const { maintainColState, setColsFromRange, fromModelUpdate } = params ?? {};\n\n        this.model.updateCellRanges({ maintainColState, setColsFromRange, fromModelUpdate });\n        this.model.updateData();\n        this.setChartRange();\n    }\n\n    public updateForDataChange(): void {\n        if (this.model.unlinked) {\n            return;\n        }\n\n        this.model.updateData();\n        this.raiseChartModelUpdateEvent();\n    }\n\n    public updateForRangeChange(): void {\n        this.updateForGridChange({ setColsFromRange: true });\n        this.raiseChartRangeSelectionChangedEvent();\n    }\n\n    public updateForPanelChange(params: {\n        updatedColState: ColState;\n        resetOrder?: boolean;\n        skipAnimation?: boolean;\n    }): void {\n        this.model.updateCellRanges(params);\n        this.model.updateData();\n        if (params.skipAnimation) {\n            this.getChartProxy().getChartRef().skipAnimations();\n        }\n        this.setChartRange();\n        this.raiseChartRangeSelectionChangedEvent();\n    }\n\n    public updateThemeOverrides(updatedOverrides: AgChartThemeOverrides): void {\n        this.chartProxy.updateThemeOverrides(updatedOverrides);\n    }\n\n    public getChartUpdateParams(updatedOverrides?: AgChartThemeOverrides): UpdateParams {\n        const selectedCols = this.getSelectedValueColState();\n        const fields = selectedCols.map((c) => ({ colId: c.colId, displayName: c.displayName }));\n        const data = this.getChartData();\n        const selectedDimensions = this.getSelectedDimensions();\n\n        const params: UpdateParams = {\n            data,\n            groupData: this.model.groupChartData,\n            grouping: this.isGrouping(),\n            categories: selectedDimensions.map((selectedDimension) => ({\n                id: selectedDimension.colId,\n                name: selectedDimension.displayName!,\n                chartDataType: this.model.categoryAxisType ?? this.model.getChartDataType(selectedDimension.colId),\n            })),\n            fields,\n            chartId: this.getChartId(),\n            getCrossFilteringContext: () => ({ lastSelectedChartId: 'xxx' }), //this.params.crossFilteringContext, //TODO\n            seriesChartTypes: this.getSeriesChartTypes(),\n            updatedOverrides: updatedOverrides,\n            seriesGroupType: this.model.seriesGroupType,\n        };\n\n        return this.isCategorySeriesSwitched() ? this.invertCategorySeriesParams(params) : params;\n    }\n\n    private invertCategorySeriesParams(params: UpdateParams): UpdateParams {\n        const [category] = params.categories;\n        // Create a single synthetic output category that will contain the series name values\n        const categories = [{ id: ChartDataModel.DEFAULT_CATEGORY, name: '' }];\n        // Create an output series corresponding to each row in the input data\n        const fields = params.data.map((value, index): FieldDefinition => {\n            const categoryKey = `${category.id}:${index}`;\n            const categoryValue = value[category.id];\n            const seriesLabel = categoryValue == null ? '' : String(categoryValue);\n            return { colId: categoryKey, displayName: seriesLabel };\n        });\n        // Create an output data row corresponding to each selected series column\n        const data = params.fields.map((field) => {\n            // Create a new output row labeled with the series column name\n            const row: Record<PropertyKey, any> = {\n                [ChartDataModel.DEFAULT_CATEGORY]: field.displayName,\n            };\n            // Append fields corresponding to each row in the input data\n            for (const [index, value] of params.data.entries()) {\n                const categoryKey = `${category.id}:${index}`;\n                const seriesLabelValue = value[field.colId];\n                row[categoryKey] = seriesLabelValue;\n            }\n            return row;\n        });\n        return {\n            ...params,\n            categories,\n            fields,\n            data,\n        };\n    }\n\n    public getChartModel(): ChartModel {\n        const modelType: ChartModelType = this.model.pivotChart ? 'pivot' : 'range';\n\n        const seriesChartTypes = this.isComboChart() ? this.model.comboChartModel.seriesChartTypes : undefined;\n\n        return {\n            modelType,\n            chartId: this.model.chartId,\n            chartType: this.model.chartType,\n            chartThemeName: this.getChartThemeName(),\n            chartOptions: this.chartProxy.getChartThemeOverrides(),\n            chartPalette: this.chartProxy.getChartPalette(),\n            cellRange: this.getCellRangeParams(),\n            switchCategorySeries: this.model.switchCategorySeries,\n            suppressChartRanges: this.model.suppressChartRanges,\n            aggFunc: this.model.aggFunc,\n            unlinkChart: this.model.unlinked,\n            seriesChartTypes,\n            seriesGroupType: this.model.seriesGroupType,\n        };\n    }\n\n    public getChartId(): string {\n        return this.model.chartId;\n    }\n\n    public getChartData(): any[] {\n        return this.model.chartData;\n    }\n\n    public getChartType(): ChartType {\n        return this.model.chartType;\n    }\n\n    public setChartType(chartType: ChartType): void {\n        this.updateMultiSeriesAndCategory(this.model.chartType, chartType);\n\n        this.model.chartType = chartType;\n\n        this.model.comboChartModel.updateSeriesChartTypes();\n\n        // Reset the inverted category/series toggle whenever the chart type changes\n        this.model.switchCategorySeries = false;\n\n        this.model.categoryAxisType = undefined;\n\n        this.model.seriesGroupType = undefined;\n\n        this.raiseChartModelUpdateEvent();\n        this.raiseChartOptionsChangedEvent();\n    }\n\n    public isCategorySeriesSwitched(): boolean {\n        return this.model.switchCategorySeries && !this.model.isGrouping();\n    }\n\n    public switchCategorySeries(inverted: boolean): void {\n        if (!supportsInvertedCategorySeries(this.getChartType())) return;\n        this.model.switchCategorySeries = inverted;\n        this.raiseChartModelUpdateEvent();\n    }\n\n    public getAggFunc(): string | IAggFunc | undefined {\n        return this.model.aggFunc;\n    }\n\n    public setAggFunc(value: string | IAggFunc | undefined, silent?: boolean): void {\n        if (this.model.aggFunc === value) return;\n        this.model.aggFunc = value;\n        if (silent) return;\n        this.model.updateData();\n        this.raiseChartModelUpdateEvent();\n    }\n\n    private updateMultiSeriesAndCategory(previousChartType: ChartType, chartType: ChartType): void {\n        // If we are changing from a multi-category/series chart type to a single-category/series chart type,\n        // ensure that only the allowed number of selected category/series column remain selected\n        const updateForMax = (columns: ColState[], maxNum: number) => {\n            let numSelected = 0;\n            for (const colState of columns) {\n                if (!colState.selected) continue;\n                if (numSelected >= maxNum) {\n                    colState.selected = false;\n                } else {\n                    numSelected++;\n                }\n            }\n            if (numSelected === 0) {\n                columns[0].selected = true;\n            }\n        };\n\n        const maxNumDimensions = getMaxNumCategories(chartType);\n        const maxNumSeries = getMaxNumSeries(chartType);\n        const updateDimensionColState =\n            maxNumDimensions != null && (getMaxNumCategories(previousChartType) ?? 100) > (maxNumDimensions ?? 100);\n        const updateValueColState =\n            maxNumSeries != null && (getMaxNumSeries(previousChartType) ?? 100) > (maxNumSeries ?? 100);\n        if (updateDimensionColState) {\n            updateForMax(this.model.dimensionColState, maxNumDimensions);\n        }\n        if (updateValueColState) {\n            updateForMax(this.model.valueColState, maxNumSeries);\n        }\n        if (updateDimensionColState || updateValueColState) {\n            this.model.resetCellRanges(updateDimensionColState, updateValueColState);\n            this.setChartRange(true);\n        }\n    }\n\n    public setChartThemeName(chartThemeName: string, silent?: boolean): void {\n        this.model.chartThemeName = chartThemeName;\n        if (!silent) {\n            this.raiseChartModelUpdateEvent();\n            this.raiseChartOptionsChangedEvent();\n        }\n    }\n\n    public getChartThemeName(): string {\n        return this.model.chartThemeName;\n    }\n\n    public isPivotChart(): boolean {\n        return this.model.pivotChart;\n    }\n\n    public isPivotMode(): boolean {\n        return this.model.isPivotMode();\n    }\n\n    public isGrouping(): boolean {\n        return this.model.isGrouping();\n    }\n\n    public isCrossFilterChart(): boolean {\n        return this.model.crossFiltering;\n    }\n\n    public getThemeNames(): string[] {\n        return this.gos.get('chartThemes') || DEFAULT_THEMES;\n    }\n\n    public getThemes(): _Theme.ChartTheme[] {\n        const themeNames = this.getThemeNames();\n\n        return themeNames.map((themeName) => {\n            const stockTheme = isStockTheme(themeName);\n            const theme = stockTheme ? themeName : this.chartProxy.lookupCustomChartTheme(themeName);\n            return _Theme.getChartTheme(theme);\n        });\n    }\n\n    public getPalettes(): AgChartThemePalette[] {\n        const themes = this.getThemes();\n\n        return themes.map((theme) => {\n            return theme.palette;\n        });\n    }\n\n    public getThemeTemplateParameters(): Map<any, any>[] {\n        const themes = this.getThemes();\n\n        return themes.map((theme) => {\n            return theme.getTemplateParameters();\n        });\n    }\n\n    public getValueColState(): ColState[] {\n        return this.model.valueColState.map(this.displayNameMapper.bind(this));\n    }\n\n    public getSelectedValueColState(): { colId: string; displayName: string | null }[] {\n        return this.getValueColState().filter((cs) => cs.selected);\n    }\n\n    public getSelectedDimensions(): ColState[] {\n        return this.model.getSelectedDimensions();\n    }\n\n    private displayNameMapper(col: ColState): ColState {\n        const columnNames = this.model.columnNames[col.colId];\n        col.displayName = columnNames ? columnNames.join(' - ') : this.model.getColDisplayName(col.column!);\n        return col;\n    }\n\n    public getColStateForMenu(): { dimensionCols: ColState[]; valueCols: ColState[] } {\n        return { dimensionCols: this.model.dimensionColState, valueCols: this.getValueColState() };\n    }\n\n    public setChartRange(silent = false): void {\n        if (this.rangeService && !this.model.suppressChartRanges && !this.model.unlinked) {\n            this.rangeService.setCellRanges(this.getCellRanges());\n        }\n\n        if (!silent) {\n            this.raiseChartModelUpdateEvent();\n        }\n    }\n\n    public detachChartRange(): void {\n        // when chart is detached it won't listen to changes from the grid\n        this.model.unlinked = !this.model.unlinked;\n\n        if (this.model.unlinked) {\n            // remove range from grid\n            if (this.rangeService) {\n                this.rangeService.setCellRanges([]);\n            }\n        } else {\n            // update chart data may have changed\n            this.updateForGridChange();\n        }\n        this.dispatchLocalEvent({ type: 'chartLinkedChanged' });\n    }\n\n    public setChartProxy(chartProxy: ChartProxy): void {\n        this.chartProxy = chartProxy;\n    }\n\n    public getChartProxy(): ChartProxy {\n        return this.chartProxy;\n    }\n\n    public isActiveXYChart(): boolean {\n        return ['scatter', 'bubble'].includes(this.getChartType());\n    }\n\n    public isChartLinked(): boolean {\n        return !this.model.unlinked;\n    }\n\n    public customComboExists(): boolean {\n        const savedCustomSeriesChartTypes = this.model.comboChartModel.savedCustomSeriesChartTypes;\n        return savedCustomSeriesChartTypes && savedCustomSeriesChartTypes.length > 0;\n    }\n\n    public getSeriesChartTypes(): SeriesChartType[] {\n        return this.model.comboChartModel.seriesChartTypes;\n    }\n\n    public isComboChart(chartType?: ChartType): boolean {\n        return this.model.isComboChart(chartType);\n    }\n\n    public updateSeriesChartType(colId: string, chartType?: ChartType, secondaryAxis?: boolean): void {\n        const seriesChartType = this.model.comboChartModel.seriesChartTypes.find((s) => s.colId === colId);\n        if (seriesChartType) {\n            // once a combo chart has been modified it is now a 'customCombo' chart\n            const updateChartType = this.model.chartType !== 'customCombo';\n            if (updateChartType) {\n                this.model.chartType = 'customCombo';\n            }\n\n            const prevSeriesChartType = seriesChartType.chartType;\n            if (chartType != null) {\n                seriesChartType.chartType = chartType;\n            }\n\n            if (secondaryAxis != null) {\n                seriesChartType.secondaryAxis = secondaryAxis;\n            }\n\n            // replace existing custom series types with this latest version\n            this.model.comboChartModel.savedCustomSeriesChartTypes = this.model.comboChartModel.seriesChartTypes;\n\n            // series chart types can be modified, i.e. column chart types should be moved to primary axis\n            this.model.comboChartModel.updateSeriesChartTypes();\n\n            this.updateForDataChange();\n\n            if (updateChartType) {\n                // update the settings panel by raising an 'chartTypeChanged' event\n                this.dispatchLocalEvent({\n                    type: 'chartTypeChanged',\n                });\n            }\n\n            if (prevSeriesChartType !== chartType) {\n                // update the format panel by raising an chartSeriesChartTypeChanged event\n                this.dispatchLocalEvent({\n                    type: 'chartSeriesChartTypeChanged',\n                });\n            }\n\n            this.raiseChartOptionsChangedEvent();\n        }\n    }\n\n    public getActiveSeriesChartTypes(): SeriesChartType[] {\n        const selectedColIds = this.getSelectedValueColState().map((c) => c.colId);\n        return this.getSeriesChartTypes().filter((s) => selectedColIds.includes(s.colId));\n    }\n\n    public getChartSeriesTypes(chartType?: ChartType): ChartSeriesType[] {\n        const targetChartType = chartType ?? this.getChartType();\n        return this.isComboChart(targetChartType) ? ['line', 'bar', 'area'] : [getSeriesType(targetChartType)];\n    }\n\n    public getChartSeriesType(): ChartSeriesType {\n        const seriesChartTypes = this.getSeriesChartTypes();\n\n        if (seriesChartTypes.length === 0) {\n            return 'bar';\n        }\n        const ct = seriesChartTypes[0].chartType;\n\n        if (ct === 'columnLineCombo') {\n            return 'bar';\n        }\n\n        if (ct === 'areaColumnCombo') {\n            return 'area';\n        }\n        return getSeriesType(ct);\n    }\n\n    public isEnterprise = () => _ModuleSupport.enterpriseModule.isEnterprise;\n\n    private getCellRanges(): CellRange[] {\n        return [this.model.dimensionCellRange!, this.model.valueCellRange!].filter((r) => r);\n    }\n\n    private createCellRange(\n        params: UpdateRangeChartParams | UpdateCrossFilterChartParams\n    ): PartialCellRange | undefined {\n        return (\n            params.cellRange &&\n            this.rangeService?.createPartialCellRangeFromRangeParams(params.cellRange as CellRangeParams, true)\n        );\n    }\n\n    private validUpdateType(params: UpdateChartParams): boolean {\n        if (!params.type) {\n            _warnOnce(\n                `Unable to update chart as the 'type' is missing. It must be either 'rangeChartUpdate', 'pivotChartUpdate', or 'crossFilterChartUpdate'.`\n            );\n            return false;\n        }\n\n        const chartTypeMap: Record<string, () => boolean> = {\n            'Range Chart': () => !this.isPivotChart() && !this.isCrossFilterChart(),\n            'Pivot Chart': () => this.isPivotChart(),\n            'Cross Filter Chart': () => this.isCrossFilterChart(),\n        };\n\n        const currentChartType = Object.keys(chartTypeMap).find((type) => chartTypeMap[type]()) ?? 'Range Chart';\n\n        const valid =\n            params.type === `${currentChartType[0].toLowerCase()}${currentChartType.slice(1).replace(/ /g, '')}Update`;\n\n        if (!valid) {\n            _warnOnce(\n                `Unable to update chart as a '${params.type}' update type is not permitted on a ${currentChartType}.`\n            );\n        }\n        return valid;\n    }\n\n    private getCellRangeParams(): CellRangeParams {\n        const cellRanges = this.getCellRanges();\n        const firstCellRange = cellRanges[0];\n        const startRow = (firstCellRange && firstCellRange.startRow) || null;\n        const endRow = (firstCellRange && firstCellRange.endRow) || null;\n\n        return {\n            rowStartIndex: startRow && startRow.rowIndex,\n            rowStartPinned: startRow && startRow.rowPinned,\n            rowEndIndex: endRow && endRow.rowIndex,\n            rowEndPinned: endRow && endRow.rowPinned,\n            columns: cellRanges.reduce(\n                (columns, value) => columns.concat(value.columns.map((c) => c.getId())),\n                [] as string[]\n            ),\n        };\n    }\n\n    public setCategoryAxisType(categoryAxisType?: AgCartesianAxisType): void {\n        this.model.categoryAxisType = categoryAxisType;\n        this.raiseChartModelUpdateEvent();\n    }\n\n    public getSeriesGroupType(): SeriesGroupType | undefined {\n        return this.model.seriesGroupType ?? this.chartProxy.getSeriesGroupType();\n    }\n\n    public setSeriesGroupType(seriesGroupType?: SeriesGroupType): void {\n        this.model.seriesGroupType = seriesGroupType;\n        this.raiseChartModelUpdateEvent();\n    }\n\n    public raiseChartModelUpdateEvent(): void {\n        this.dispatchLocalEvent({ type: 'chartModelUpdate' });\n    }\n\n    public raiseChartUpdatedEvent(): void {\n        this.dispatchLocalEvent({ type: 'chartUpdated' });\n    }\n\n    public raiseChartApiUpdateEvent(): void {\n        this.dispatchLocalEvent({ type: 'chartApiUpdate' });\n    }\n\n    private raiseChartOptionsChangedEvent(): void {\n        const { chartId, chartType } = this.getChartModel();\n        const event: WithoutGridCommon<ChartOptionsChangedEvent> = {\n            type: 'chartOptionsChanged',\n            chartId,\n            chartType,\n            chartThemeName: this.getChartThemeName(),\n            chartOptions: this.chartProxy.getChartThemeOverrides(),\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    private raiseChartRangeSelectionChangedEvent(): void {\n        const event: WithoutGridCommon<ChartRangeSelectionChangedEvent> = {\n            type: 'chartRangeSelectionChanged',\n            id: this.model.chartId,\n            chartId: this.model.chartId,\n            cellRange: this.getCellRangeParams(),\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public override destroy(): void {\n        super.destroy();\n\n        if (this.rangeService) {\n            this.rangeService.setCellRanges([]);\n        }\n    }\n}\n", "import { _includes, _warnOnce } from '@ag-grid-community/core';\nimport type {\n    AgChartLegendClickEvent,\n    AgChartTheme,\n    AgChartThemeName,\n    AgChartThemeOverrides,\n    AgChartThemePalette,\n} from 'ag-charts-community';\nimport { _Theme } from 'ag-charts-community';\n\nimport { ALL_AXIS_TYPES } from '../utils/axisTypeMapper';\nimport { get } from '../utils/object';\nimport type { ChartSeriesType } from '../utils/seriesTypeMapper';\nimport { getSeriesType } from '../utils/seriesTypeMapper';\nimport type { ChartProxy, ChartProxyParams } from './chartProxy';\n\nexport function createAgChartTheme(\n    chartProxyParams: ChartProxyParams,\n    proxy: ChartProxy,\n    isEnterprise: boolean,\n    chartThemeDefaults?: AgChartThemeOverrides,\n    updatedOverrides?: AgChartThemeOverrides\n): AgChartTheme {\n    const { chartOptionsToRestore, chartPaletteToRestore, chartThemeToRestore } = chartProxyParams;\n    const themeName = getSelectedTheme(chartProxyParams);\n    const stockTheme = isStockTheme(themeName);\n\n    const rootTheme = stockTheme\n        ? { baseTheme: themeName as AgChartThemeName }\n        : lookupCustomChartTheme(chartProxyParams, themeName) ?? {};\n\n    const gridOptionsThemeOverrides = chartProxyParams.getGridOptionsChartThemeOverrides();\n    const apiThemeOverrides = chartProxyParams.apiChartThemeOverrides;\n\n    const standaloneChartType = getSeriesType(chartProxyParams.chartType);\n    const crossFilteringOverrides = chartProxyParams.crossFiltering\n        ? createCrossFilterThemeOverrides(proxy, chartProxyParams, standaloneChartType)\n        : undefined;\n\n    const isTitleEnabled = () => {\n        const isTitleEnabled = (obj: any) => {\n            if (!obj) {\n                return false;\n            }\n            return Object.keys(obj).some((key) => get(obj[key], 'title.enabled', false));\n        };\n        return isTitleEnabled(gridOptionsThemeOverrides) || isTitleEnabled(apiThemeOverrides);\n    };\n\n    // Overrides in ascending precedence ordering.\n    const overrides: (AgChartThemeOverrides | undefined)[] = [\n        stockTheme ? inbuiltStockThemeOverrides(chartProxyParams, isEnterprise, isTitleEnabled()) : undefined,\n        chartThemeDefaults,\n        crossFilteringOverrides,\n        gridOptionsThemeOverrides,\n        apiThemeOverrides,\n        { ...(chartOptionsToRestore ?? {}) },\n        updatedOverrides,\n    ];\n\n    // Recursively nest theme overrides so they are applied with correct precedence in\n    // Standalone Charts - this is an undocumented feature.\n    // Outermost theme overrides will be the formatting panel configured values, so they are\n    // differentiated from grid-config and inbuilt overrides.\n    const theme = overrides\n        .filter((v): v is AgChartThemeOverrides => !!v)\n        .reduce(\n            (r, n): AgChartTheme => ({\n                baseTheme: r as any,\n                overrides: n,\n            }),\n            rootTheme\n        );\n\n    // Avoid explicitly setting the `theme.palette` property unless we're using the restored theme\n    // AND the palette is actually different.\n    if (chartPaletteToRestore && themeName === chartThemeToRestore) {\n        const rootThemePalette = _Theme.getChartTheme(rootTheme).palette;\n        if (!isIdenticalPalette(chartPaletteToRestore, rootThemePalette)) {\n            theme.palette = chartPaletteToRestore;\n        }\n    }\n\n    return theme;\n}\n\nfunction isIdenticalPalette(paletteA: AgChartThemePalette, paletteB: AgChartThemePalette) {\n    const arrayCompare = (arrA?: any[], arrB?: any[]) => {\n        if (arrA === arrB) return true;\n        if (arrA?.length !== arrB?.length) return false;\n\n        return arrA?.every((v: any, i) => v === arrB?.[i]) ?? false;\n    };\n\n    return arrayCompare(paletteA.fills, paletteB.fills) && arrayCompare(paletteA.strokes, paletteB.strokes);\n}\n\nexport function isStockTheme(themeName: string): boolean {\n    return _includes(Object.keys(_Theme.themes), themeName);\n}\n\nfunction createCrossFilterThemeOverrides(\n    proxy: ChartProxy,\n    chartProxyParams: ChartProxyParams,\n    seriesType: ChartSeriesType\n): AgChartThemeOverrides {\n    const legend = {\n        listeners: {\n            legendItemClick: (e: AgChartLegendClickEvent) => {\n                const chart = proxy.getChart();\n                chart.series.forEach((s) => {\n                    s.toggleSeriesItem(e.itemId, e.enabled);\n                    s.toggleSeriesItem(`${e.itemId}-filtered-out`, e.enabled);\n                });\n            },\n        },\n    };\n\n    return {\n        [seriesType]: {\n            tooltip: {\n                delay: 500,\n            },\n            legend,\n            listeners: {\n                click: (e: any) => chartProxyParams.crossFilterCallback(e, true),\n            },\n        },\n    };\n}\n\nconst STATIC_INBUILT_STOCK_THEME_AXES_OVERRIDES = ALL_AXIS_TYPES.reduce(\n    (r, n) => ({ ...r, [n]: { title: { _enabledFromTheme: true } } }),\n    {}\n);\n\nfunction inbuiltStockThemeOverrides(params: ChartProxyParams, isEnterprise: boolean, titleEnabled: boolean) {\n    const extraPadding = params.getExtraPaddingDirections();\n    return {\n        common: {\n            ...(isEnterprise ? { animation: { duration: 500 } } : undefined),\n            axes: STATIC_INBUILT_STOCK_THEME_AXES_OVERRIDES,\n            padding: {\n                // don't add extra padding when a title is present!\n                top: !titleEnabled && extraPadding.includes('top') ? 40 : 20,\n                right: extraPadding.includes('right') ? 30 : 20,\n                bottom: extraPadding.includes('bottom') ? 40 : 20,\n                left: extraPadding.includes('left') ? 30 : 20,\n            },\n        },\n        pie: {\n            series: {\n                title: { _enabledFromTheme: true },\n                calloutLabel: { _enabledFromTheme: true },\n                sectorLabel: {\n                    enabled: false,\n                    _enabledFromTheme: true,\n                },\n            } as any,\n        },\n        donut: {\n            series: {\n                title: { _enabledFromTheme: true },\n                calloutLabel: { _enabledFromTheme: true },\n                sectorLabel: {\n                    enabled: false,\n                    _enabledFromTheme: true,\n                },\n            } as any,\n        },\n    };\n}\n\nfunction getSelectedTheme(chartProxyParams: ChartProxyParams): string {\n    let chartThemeName = chartProxyParams.getChartThemeName();\n    const availableThemes = chartProxyParams.getChartThemes();\n\n    if (!_includes(availableThemes, chartThemeName)) {\n        chartThemeName = availableThemes[0];\n    }\n\n    return chartThemeName;\n}\n\nexport function lookupCustomChartTheme(chartProxyParams: ChartProxyParams, name: string): AgChartTheme {\n    const { customChartThemes } = chartProxyParams;\n    const customChartTheme = customChartThemes && customChartThemes[name];\n\n    if (!customChartTheme) {\n        _warnOnce(\n            `no stock theme exists with the name '${name}' and no ` +\n                \"custom chart theme with that name was supplied to 'customChartThemes'\"\n        );\n    }\n\n    return customChartTheme as AgChartTheme;\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport type { AgCartesianAxisType } from 'ag-charts-community';\n\nexport const ALL_AXIS_TYPES: AgCartesianAxisType[] = ['number', 'category', 'grouped-category', 'log', 'time'];\n\nexport function getLegacyAxisType(chartType: ChartType): [AgCartesianAxisType, AgCartesianAxisType] | undefined {\n    switch (chartType) {\n        case 'bar':\n        case 'stackedBar':\n        case 'normalizedBar':\n            return ['number', 'category'];\n        case 'groupedBar':\n            return ['number', 'grouped-category'];\n        case 'column':\n        case 'stackedColumn':\n        case 'normalizedColumn':\n        case 'line':\n        case 'area':\n        case 'stackedArea':\n        case 'normalizedArea':\n        case 'histogram':\n            return ['category', 'number'];\n        case 'groupedColumn':\n            return ['grouped-category', 'number'];\n        case 'scatter':\n        case 'bubble':\n            return ['number', 'number'];\n        default:\n            return undefined;\n    }\n}\n", "// deepMerge\nfunction emptyTarget(value: any) {\n    return Array.isArray(value) ? [] : {};\n}\n\nfunction cloneUnlessOtherwiseSpecified(value: any, options: any) {\n    return options.clone !== false && options.isMergeableObject(value)\n        ? deepMerge(emptyTarget(value), value, options)\n        : value;\n}\n\nfunction defaultArrayMerge(target: any, source: any, options: any) {\n    return target.concat(source).map(function (element: any) {\n        return cloneUnlessOtherwiseSpecified(element, options);\n    });\n}\n\nfunction getMergeFunction(key: string, options: any) {\n    if (!options.customMerge) {\n        return deepMerge;\n    }\n    const customMerge = options.customMerge(key);\n    return typeof customMerge === 'function' ? customMerge : deepMerge;\n}\n\nfunction getEnumerableOwnPropertySymbols(target: any): any[] {\n    // @ts-ignore\n    return Object.getOwnPropertySymbols\n        ? // @ts-ignore\n          Object.getOwnPropertySymbols(target).filter(function (symbol) {\n              return target.propertyIsEnumerable(symbol);\n          })\n        : [];\n}\n\nfunction getKeys(target: any): any[] {\n    return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));\n}\n\nfunction propertyIsOnObject(object: any, property: string) {\n    try {\n        return property in object;\n    } catch (_) {\n        return false;\n    }\n}\n\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target: any, key: string) {\n    return (\n        propertyIsOnObject(target, key) && // Properties are safe to merge if they don't exist in the target yet,\n        !(\n            Object.hasOwnProperty.call(target, key) && // unsafe if they exist up the prototype chain,\n            Object.propertyIsEnumerable.call(target, key)\n        )\n    ); // and also unsafe if they're nonenumerable.\n}\n\nfunction mergeObject(target: Record<string, any> = {}, source: Record<string, any> = {}, options: any) {\n    const destination: any = {};\n    if (options.isMergeableObject(target)) {\n        getKeys(target).forEach(function (key) {\n            destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n        });\n    }\n    getKeys(source).forEach(function (key) {\n        if (propertyIsUnsafe(target, key)) {\n            return;\n        }\n        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n            destination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n        } else {\n            destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n        }\n    });\n    return destination;\n}\n\nfunction defaultIsMergeableObject(value: any): boolean {\n    return isNonNullObject(value) && !isSpecial(value);\n}\n\nfunction isNonNullObject(value: any): boolean {\n    return !!value && typeof value === 'object';\n}\n\nfunction isSpecial(value: any): boolean {\n    const stringValue = Object.prototype.toString.call(value);\n    return stringValue === '[object RegExp]' || stringValue === '[object Date]';\n}\n\nexport function deepMerge<T>(target: T, source: T, options?: any): T;\nexport function deepMerge(target: any, source: any, options?: any): any;\nexport function deepMerge(target: any, source: any, options?: any): any {\n    options = options || {};\n    options.arrayMerge = options.arrayMerge || defaultArrayMerge;\n    options.isMergeableObject = options.isMergeableObject || defaultIsMergeableObject;\n    // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n    // implementations can use it. The caller may not replace it.\n    options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n\n    const sourceIsArray = Array.isArray(source);\n    const targetIsArray = Array.isArray(target);\n    const sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n    if (!sourceAndTargetTypesMatch) {\n        return cloneUnlessOtherwiseSpecified(source, options);\n    } else if (sourceIsArray) {\n        return options.arrayMerge(target, source, options);\n    } else {\n        return mergeObject(target, source, options);\n    }\n}\n// END - deep merge\n\nexport function get(source: any, expression: string, defaultValue: any): any {\n    if (source == null) {\n        return defaultValue;\n    }\n\n    const keys = expression.split('.');\n    let objectToRead = source;\n\n    while (keys.length > 1) {\n        objectToRead = objectToRead[keys.shift()!];\n\n        if (objectToRead == null) {\n            return defaultValue;\n        }\n    }\n\n    const value = objectToRead[keys[0]];\n\n    return value != null ? value : defaultValue;\n}\n\nexport function set(target: any, expression: string, value: any) {\n    if (target == null) {\n        return;\n    }\n\n    const keys = expression.split('.');\n\n    let objectToUpdate = target;\n    // Create empty objects\n    keys.forEach((key, i) => {\n        if (!objectToUpdate[key]) {\n            objectToUpdate[key] = {};\n        }\n\n        if (i < keys.length - 1) {\n            objectToUpdate = objectToUpdate[key];\n        }\n    });\n\n    objectToUpdate[keys[keys.length - 1]] = value;\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    CellRange,\n    ChartType,\n    IAggFunc,\n    IRangeService,\n    PartialCellRange,\n    SeriesChartType,\n    SeriesGroupType,\n} from '@ag-grid-community/core';\nimport { BeanStub, CellRangeType, _includes } from '@ag-grid-community/core';\nimport type { AgCartesianAxisType } from 'ag-charts-community';\n\nimport type { ChartDatasourceParams } from '../datasource/chartDatasource';\nimport { ChartDatasource } from '../datasource/chartDatasource';\nimport { ChartColumnService } from '../services/chartColumnService';\nimport type { ChartTranslationService } from '../services/chartTranslationService';\nimport { getMaxNumSeries, getSeriesType, isComboChart, isHierarchical } from '../utils/seriesTypeMapper';\nimport { ComboChartModel } from './comboChartModel';\n\nexport interface ColState {\n    column?: AgColumn;\n    colId: string;\n    displayName: string | null;\n    selected?: boolean;\n    order: number;\n}\n\nexport interface ChartModelParams {\n    chartId: string;\n    pivotChart?: boolean;\n    chartType: ChartType;\n    chartThemeName: string;\n    switchCategorySeries?: boolean;\n    aggFunc?: string | IAggFunc;\n    cellRange: PartialCellRange;\n    suppressChartRanges?: boolean;\n    unlinkChart?: boolean;\n    crossFiltering?: boolean;\n    seriesChartTypes?: SeriesChartType[];\n    seriesGroupType?: SeriesGroupType;\n}\n\nexport class ChartDataModel extends BeanStub {\n    public static DEFAULT_CATEGORY = 'AG-GRID-DEFAULT-CATEGORY';\n\n    private rangeService: IRangeService;\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.rangeService = beans.rangeService!;\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    public readonly params: ChartModelParams;\n\n    // this is used to associate chart ranges with charts\n    public readonly chartId: string;\n\n    public suppressChartRanges: boolean;\n    public switchCategorySeries: boolean;\n    public aggFunc?: string | IAggFunc;\n    public pivotChart: boolean;\n    public categoryAxisType?: AgCartesianAxisType;\n\n    public chartType: ChartType;\n    public chartThemeName: string;\n    public unlinked = false;\n    public chartData: any[] = [];\n    public groupChartData: any[] | undefined;\n    public valueColState: ColState[] = [];\n    public dimensionColState: ColState[] = [];\n    public columnNames: { [p: string]: string[] } = {};\n\n    public valueCellRange?: CellRange;\n    public dimensionCellRange?: CellRange;\n\n    public comboChartModel: ComboChartModel;\n    private chartColumnService: ChartColumnService;\n    private datasource: ChartDatasource;\n\n    public referenceCellRange: PartialCellRange;\n    public suppliedCellRange: PartialCellRange;\n\n    public crossFiltering = false;\n\n    private grouping = false;\n\n    public seriesGroupType?: SeriesGroupType;\n\n    public constructor(params: ChartModelParams) {\n        super();\n\n        this.params = params;\n        this.chartId = params.chartId;\n        this.setParams(params);\n    }\n\n    private setParams(params: ChartModelParams): void {\n        const {\n            chartType,\n            pivotChart,\n            chartThemeName,\n            switchCategorySeries,\n            aggFunc,\n            cellRange,\n            suppressChartRanges,\n            unlinkChart,\n            crossFiltering,\n            seriesGroupType,\n        } = params;\n        this.chartType = chartType;\n        this.pivotChart = pivotChart ?? false;\n        this.chartThemeName = chartThemeName;\n        this.switchCategorySeries = !!switchCategorySeries;\n        this.aggFunc = aggFunc;\n        this.referenceCellRange = cellRange;\n        this.suppliedCellRange = cellRange;\n        this.suppressChartRanges = suppressChartRanges ?? false;\n        this.unlinked = !!unlinkChart;\n        this.crossFiltering = !!crossFiltering;\n        this.seriesGroupType = seriesGroupType;\n    }\n\n    public postConstruct(): void {\n        this.datasource = this.createManagedBean(new ChartDatasource());\n        this.chartColumnService = this.createManagedBean(new ChartColumnService());\n        this.comboChartModel = this.createManagedBean(new ComboChartModel(this));\n        this.updateCellRanges({ setColsFromRange: true });\n        this.updateData();\n    }\n\n    public updateModel(params: ChartModelParams): void {\n        const { cellRange, seriesChartTypes } = params;\n\n        if (cellRange !== this.suppliedCellRange) {\n            this.dimensionCellRange = undefined;\n            this.valueCellRange = undefined;\n        }\n\n        this.setParams(params);\n\n        this.updateSelectedDimensions(cellRange?.columns as AgColumn[]);\n        this.updateCellRanges({ setColsFromRange: true });\n\n        const shouldUpdateComboModel = this.isComboChart() || seriesChartTypes;\n        if (shouldUpdateComboModel) {\n            this.comboChartModel.update(seriesChartTypes);\n        }\n\n        if (!this.unlinked) {\n            this.updateData();\n        }\n    }\n\n    public updateCellRanges(params?: {\n        updatedColState?: ColState;\n        resetOrder?: boolean;\n        maintainColState?: boolean;\n        setColsFromRange?: boolean;\n        fromModelUpdate?: boolean;\n    }): void {\n        const { updatedColState, resetOrder, maintainColState, setColsFromRange, fromModelUpdate } = params ?? {};\n        if (this.valueCellRange) {\n            this.referenceCellRange = this.valueCellRange;\n        }\n\n        const { dimensionCols, valueCols } = this.chartColumnService.getChartColumns();\n        const allColsFromRanges = this.getAllColumnsFromRanges();\n\n        if (updatedColState) {\n            this.updateColumnState(updatedColState, resetOrder);\n        }\n\n        this.setDimensionCellRange(dimensionCols, allColsFromRanges, updatedColState);\n        this.setValueCellRange(valueCols, allColsFromRanges, setColsFromRange);\n\n        if (!updatedColState && !maintainColState) {\n            this.resetColumnState(fromModelUpdate || setColsFromRange);\n            // dimension / category cell range could be out of sync after resetting column state when row grouping\n            this.syncDimensionCellRange();\n        }\n\n        this.comboChartModel.updateSeriesChartTypes();\n    }\n\n    public updateData(): void {\n        const { startRow, endRow } = this.getRowIndexes();\n\n        if (this.pivotChart) {\n            this.resetColumnState();\n        }\n\n        this.grouping = this.isGrouping();\n\n        const params: ChartDatasourceParams = {\n            aggFunc: this.aggFunc,\n            dimensionCols: this.getSelectedDimensions(),\n            grouping: this.grouping,\n            pivoting: this.isPivotActive(),\n            crossFiltering: this.crossFiltering,\n            valueCols: this.getSelectedValueCols(),\n            startRow,\n            endRow,\n            isScatter: _includes(['scatter', 'bubble'], this.chartType),\n        };\n\n        const { chartData, columnNames, groupChartData } = this.datasource.getData(params);\n\n        this.chartData = chartData;\n        this.groupChartData = groupChartData;\n        this.columnNames = columnNames;\n        this.categoryAxisType = undefined;\n    }\n\n    public isGrouping(): boolean {\n        const usingTreeData = this.gos.get('treeData');\n        const groupedCols = usingTreeData ? null : this.chartColumnService.getRowGroupColumns();\n        const isGroupActive = usingTreeData || (groupedCols && groupedCols.length > 0);\n\n        // charts only group when the selected category is a group column\n        const colIds = this.getSelectedDimensions().map(({ colId }) => colId);\n        const displayedGroupCols = this.chartColumnService.getGroupDisplayColumns();\n        const groupDimensionSelected = displayedGroupCols\n            .map((col) => col.getColId())\n            .some((id) => colIds.includes(id));\n        return !!isGroupActive && groupDimensionSelected;\n    }\n\n    public getSelectedValueCols(): AgColumn[] {\n        return this.valueColState.filter((cs) => cs.selected).map((cs) => cs.column!);\n    }\n\n    public getSelectedDimensions(): ColState[] {\n        return this.dimensionColState.filter((cs) => cs.selected);\n    }\n\n    public getColDisplayName(col: AgColumn): string | null {\n        return this.chartColumnService.getColDisplayName(col);\n    }\n\n    public isPivotMode(): boolean {\n        return this.chartColumnService.isPivotMode();\n    }\n\n    public getChartDataType(colId: string): string | undefined {\n        const column = this.chartColumnService.getColumn(colId);\n        return column ? column.getColDef().chartDataType : undefined;\n    }\n\n    private isPivotActive(): boolean {\n        return this.chartColumnService.isPivotActive();\n    }\n\n    private createCellRange(type: CellRangeType, ...columns: AgColumn[]): CellRange {\n        return {\n            id: this.chartId, // set range ID to match chart ID so we can identify changes to the ranges for this chart\n            startRow: this.referenceCellRange.startRow,\n            endRow: this.referenceCellRange.endRow,\n            columns,\n            startColumn:\n                type === CellRangeType.DIMENSION || this.referenceCellRange.startColumn == null\n                    ? columns[0]\n                    : this.referenceCellRange.startColumn,\n            type,\n        };\n    }\n\n    private getAllColumnsFromRanges(): Set<AgColumn> {\n        if (this.pivotChart) {\n            return new Set(this.chartColumnService.getAllDisplayedColumns());\n        }\n\n        const columns = this.dimensionCellRange || this.valueCellRange ? [] : this.referenceCellRange.columns;\n\n        if (this.dimensionCellRange) {\n            columns.push(...this.dimensionCellRange.columns);\n        }\n\n        if (this.valueCellRange) {\n            columns.push(...this.valueCellRange.columns);\n        }\n\n        return new Set(columns as AgColumn[]);\n    }\n\n    private getRowIndexes(): { startRow: number; endRow: number } {\n        let startRow = 0,\n            endRow = 0;\n        const { rangeService, valueCellRange, dimensionCellRange } = this;\n\n        // Not all chart types require a value series (e.g. hierarchical charts),\n        // so fall back to using the dimension cell range for inferring row indices\n        const cellRange = valueCellRange || dimensionCellRange;\n\n        if (rangeService && cellRange) {\n            startRow = rangeService.getRangeStartRow(cellRange).rowIndex;\n\n            // when the last row the cell range is a pinned 'bottom' row, the `endRow` index is set to -1 which results\n            // in the ChartDatasource processing all non pinned rows from the `startRow` index.\n            const endRowPosition = rangeService.getRangeEndRow(cellRange);\n            endRow = endRowPosition.rowPinned === 'bottom' ? -1 : endRowPosition.rowIndex;\n        }\n\n        return { startRow, endRow };\n    }\n\n    private resetColumnState(suppressSelectAutoGroupCol?: boolean): void {\n        const { dimensionCols, valueCols } = this.chartColumnService.getChartColumns();\n        const allCols = this.getAllColumnsFromRanges();\n        const isInitialising = this.valueColState.length < 1;\n\n        this.dimensionColState = [];\n        this.valueColState = [];\n\n        const supportsMultipleDimensions = isHierarchical(getSeriesType(this.chartType));\n        let hasSelectedDimension = false;\n        let order = 1;\n\n        const aggFuncDimension = this.suppliedCellRange.columns[0]; //TODO\n\n        dimensionCols.forEach((column) => {\n            const isAutoGroupCol = column.getColId() === 'ag-Grid-AutoColumn';\n\n            let selected = false;\n            if (this.crossFiltering && this.aggFunc) {\n                if (aggFuncDimension.getColId() === column.getColId()) {\n                    selected = true;\n                }\n            } else {\n                selected =\n                    isAutoGroupCol && !suppressSelectAutoGroupCol\n                        ? true\n                        : (!hasSelectedDimension || supportsMultipleDimensions) && allCols.has(column);\n            }\n\n            this.dimensionColState.push({\n                column,\n                colId: column.getColId(),\n                displayName: this.getColDisplayName(column),\n                selected,\n                order: order++,\n            });\n\n            if (selected) {\n                hasSelectedDimension = true;\n            }\n        });\n\n        const defaultCategory = {\n            colId: ChartDataModel.DEFAULT_CATEGORY,\n            displayName: this.chartTranslationService.translate('defaultCategory'),\n            selected: !hasSelectedDimension, // if no dimensions in range select the default\n            order: 0,\n        };\n\n        this.dimensionColState.unshift(defaultCategory);\n\n        const valueColumnsFromReferenceRange = (this.referenceCellRange.columns as AgColumn[]).filter((c) =>\n            valueCols.has(c)\n        );\n\n        valueCols.forEach((column) => {\n            // first time the value cell range is set, preserve the column order from the supplied range\n            if (isInitialising && _includes(this.referenceCellRange.columns, column)) {\n                column = valueColumnsFromReferenceRange.shift()!;\n            }\n\n            this.valueColState.push({\n                column,\n                colId: column.getColId(),\n                displayName: this.getColDisplayName(column),\n                selected: allCols.has(column),\n                order: order++,\n            });\n        });\n    }\n\n    private updateColumnState(updatedCol: ColState, resetOrder?: boolean): void {\n        const idsMatch = (cs: ColState) => cs.colId === updatedCol.colId;\n        const { dimensionColState, valueColState } = this;\n\n        // Determine whether the specified column is a dimension or value column\n        const matchedDimensionColState = dimensionColState.find(idsMatch);\n        const matchedValueColState = valueColState.find(idsMatch);\n\n        if (matchedDimensionColState) {\n            // For non-hierarchical chart types, only one dimension can be selected\n            const supportsMultipleDimensions = isHierarchical(getSeriesType(this.chartType));\n            if (!supportsMultipleDimensions) {\n                // Determine which column should end up selected, if any\n                const selectedColumnState = updatedCol.selected\n                    ? matchedDimensionColState\n                    : dimensionColState\n                          .filter((cs) => cs !== matchedDimensionColState)\n                          .find(({ selected }) => selected);\n                // Update the selection state of all dimension columns\n                dimensionColState.forEach((cs) => (cs.selected = cs === selectedColumnState));\n            } else {\n                // Update the selection state of the specified dimension column\n                matchedDimensionColState.selected = updatedCol.selected;\n            }\n        } else if (matchedValueColState) {\n            // Update the selection state of the specified value column\n            matchedValueColState.selected = updatedCol.selected;\n        }\n\n        const allColumns = [...dimensionColState, ...valueColState];\n        const orderedColIds: string[] = [];\n\n        if (!resetOrder) {\n            // calculate new order\n            allColumns.forEach((col: ColState, i: number) => {\n                if (i === updatedCol.order) {\n                    orderedColIds.push(updatedCol.colId);\n                }\n\n                if (col.colId !== updatedCol.colId) {\n                    orderedColIds.push(col.colId);\n                }\n            });\n\n            // update col state with new order\n            allColumns.forEach((col) => {\n                const order = orderedColIds.indexOf(col.colId);\n                col.order = order >= 0 ? orderedColIds.indexOf(col.colId) : allColumns.length - 1;\n            });\n        }\n\n        this.reorderColState();\n    }\n\n    private reorderColState(): void {\n        const ascColStateOrder = (a: ColState, b: ColState) => a.order - b.order;\n        this.dimensionColState.sort(ascColStateOrder);\n        this.valueColState.sort(ascColStateOrder);\n    }\n\n    private setDimensionCellRange(\n        dimensionCols: Set<AgColumn>,\n        colsInRange: Set<AgColumn>,\n        updatedColState?: ColState\n    ): void {\n        this.dimensionCellRange = undefined;\n        const supportsMultipleDimensions = isHierarchical(getSeriesType(this.chartType));\n\n        if (!updatedColState && !this.dimensionColState.length) {\n            const selectedCols = new Array<AgColumn>();\n            // use first dimension column in range by default, or all dimension columns for hierarchical charts\n            dimensionCols.forEach((col) => {\n                if ((selectedCols.length > 0 && !supportsMultipleDimensions) || !colsInRange.has(col)) {\n                    return;\n                }\n                selectedCols.push(col);\n            });\n            if (selectedCols.length > 0) {\n                this.dimensionCellRange = this.createCellRange(CellRangeType.DIMENSION, ...selectedCols);\n            }\n            return;\n        }\n\n        let selectedDimensionColStates = updatedColState ? [updatedColState] : [];\n        if (this.crossFiltering && this.aggFunc) {\n            const aggFuncDimension = this.suppliedCellRange.columns[0]; //TODO\n            selectedDimensionColStates = this.dimensionColState.filter(\n                (cs) => cs.colId === aggFuncDimension.getColId()\n            );\n        } else if (\n            supportsMultipleDimensions ||\n            selectedDimensionColStates.length === 0 ||\n            selectedDimensionColStates.some(({ column }) => !column || !dimensionCols.has(column))\n        ) {\n            selectedDimensionColStates = this.dimensionColState.filter((cs) => cs.selected);\n        }\n\n        const isDefaultCategory =\n            selectedDimensionColStates.length === 1\n                ? selectedDimensionColStates[0].colId === ChartDataModel.DEFAULT_CATEGORY\n                : false;\n        const selectedColumns = selectedDimensionColStates\n            .map(({ column }) => column)\n            .filter((value): value is NonNullable<typeof value> => value != null);\n        if (selectedColumns.length > 0 && !isDefaultCategory) {\n            this.dimensionCellRange = this.createCellRange(CellRangeType.DIMENSION, ...selectedColumns);\n        }\n    }\n\n    private setValueCellRange(valueCols: Set<AgColumn>, colsInRange: Set<AgColumn>, setColsFromRange?: boolean): void {\n        this.valueCellRange = undefined;\n\n        const selectedValueCols: AgColumn[] = [];\n\n        const maxSelection = getMaxNumSeries(this.chartType);\n        let numSelected = 0;\n\n        valueCols.forEach((col) => {\n            if (setColsFromRange) {\n                if ((maxSelection == null || numSelected < maxSelection) && colsInRange.has(col)) {\n                    selectedValueCols.push(col);\n                    numSelected++;\n                }\n            } else {\n                if (this.valueColState.some((colState) => colState.selected && colState.colId === col.getColId())) {\n                    selectedValueCols.push(col);\n                }\n            }\n        });\n\n        if (selectedValueCols.length > 0) {\n            let orderedColIds: string[] = [];\n\n            if (this.valueColState.length > 0) {\n                orderedColIds = this.valueColState.map((c) => c.colId);\n            } else {\n                colsInRange.forEach((c) => orderedColIds.push(c.getColId()));\n            }\n\n            selectedValueCols.sort((a, b) => orderedColIds.indexOf(a.getColId()) - orderedColIds.indexOf(b.getColId()));\n\n            this.valueCellRange = this.createCellRange(CellRangeType.VALUE, ...selectedValueCols);\n        }\n    }\n\n    public resetCellRanges(dimension: boolean, value: boolean): void {\n        if (!dimension && !value) {\n            return;\n        }\n        const { dimensionCols, valueCols } = this.chartColumnService.getChartColumns();\n        const allColsFromRanges = this.getAllColumnsFromRanges();\n        if (dimension) {\n            this.setDimensionCellRange(dimensionCols, allColsFromRanges);\n        }\n        if (value) {\n            this.setValueCellRange(valueCols, allColsFromRanges);\n        }\n    }\n\n    private updateSelectedDimensions(columns: AgColumn[]): void {\n        const colIdSet = new Set(columns.map((column) => column.getColId()));\n\n        // For non-hierarchical chart types, only one dimension can be selected\n        const supportsMultipleDimensions = isHierarchical(getSeriesType(this.chartType));\n        if (!supportsMultipleDimensions) {\n            // Determine which column should end up selected, if any\n            // if no dimension found in supplied columns use the default category (always index = 0)\n            const foundColState =\n                this.dimensionColState.find((colState) => colIdSet.has(colState.colId)) || this.dimensionColState[0];\n            const selectedColumnId = foundColState.colId;\n            // Update the selection state of all dimension columns\n            this.dimensionColState = this.dimensionColState.map((colState) => ({\n                ...colState,\n                selected: colState.colId === selectedColumnId,\n            }));\n        } else {\n            // Update the selection state of all dimension columns, selecting only the provided columns from the chart model\n            const foundColStates = this.dimensionColState.filter((colState) => colIdSet.has(colState.colId));\n            const selectedColumnIds = new Set(foundColStates.map((colState) => colState.colId));\n            this.dimensionColState = this.dimensionColState.map((colState) => ({\n                ...colState,\n                selected: selectedColumnIds.has(colState.colId),\n            }));\n        }\n    }\n\n    private syncDimensionCellRange() {\n        const selectedDimensions = this.getSelectedDimensions();\n        if (selectedDimensions.length === 0) return;\n        const selectedCols = selectedDimensions\n            .map(({ column }) => column)\n            .filter((value): value is NonNullable<typeof value> => value != null);\n        if (selectedCols.length > 0) {\n            this.dimensionCellRange = this.createCellRange(CellRangeType.DIMENSION, ...selectedCols);\n        }\n    }\n\n    public isComboChart(chartType?: ChartType): boolean {\n        return isComboChart(chartType ?? this.chartType);\n    }\n}\n", "import type {\n    AgColumn,\n    AgColumnGroup,\n    BeanCollection,\n    ColumnModel,\n    IAggFunc,\n    IAggregationStage,\n    IClientSideRowModel,\n    IRowModel,\n    IRowNodeStage,\n    PartialCellRange,\n    PivotResultColsService,\n    RowNode,\n    RowNodeSorter,\n    SortController,\n    ValueService,\n} from '@ag-grid-community/core';\nimport { BeanStub, ModuleNames, ModuleRegistry, _includes, _last, _values, _warnOnce } from '@ag-grid-community/core';\n\nimport type { ColState } from '../model/chartDataModel';\nimport { ChartDataModel } from '../model/chartDataModel';\n\nexport interface ChartDatasourceParams {\n    dimensionCols: ColState[];\n    grouping: boolean;\n    pivoting: boolean;\n    crossFiltering: boolean;\n    valueCols: AgColumn[];\n    startRow: number;\n    endRow: number;\n    isScatter: boolean;\n    aggFunc?: string | IAggFunc;\n    referenceCellRange?: PartialCellRange;\n}\n\ninterface IData {\n    chartData: any[];\n    columnNames: { [key: string]: string[] };\n    groupChartData?: any[];\n}\n\nexport class ChartDatasource extends BeanStub {\n    private gridRowModel: IRowModel;\n    private pivotResultColsService: PivotResultColsService;\n    private valueService: ValueService;\n    private columnModel: ColumnModel;\n    private rowNodeSorter: RowNodeSorter;\n    private sortController: SortController;\n    private aggregationStage?: IRowNodeStage & IAggregationStage;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.sortController = beans.sortController;\n        this.gridRowModel = beans.rowModel;\n        this.columnModel = beans.columnModel;\n        this.valueService = beans.valueService;\n        this.pivotResultColsService = beans.pivotResultColsService;\n        this.rowNodeSorter = beans.rowNodeSorter;\n        this.aggregationStage = beans.aggregationStage as (IRowNodeStage & IAggregationStage) | undefined;\n    }\n\n    public getData(params: ChartDatasourceParams): IData {\n        if (params.crossFiltering) {\n            if (params.grouping) {\n                _warnOnce('crossing filtering with row grouping is not supported.');\n                return { chartData: [], columnNames: {} };\n            }\n\n            if (!this.gos.isRowModelType('clientSide')) {\n                _warnOnce('crossing filtering is only supported in the client side row model.');\n                return { chartData: [], columnNames: {} };\n            }\n        }\n\n        const isServerSide = this.gos.isRowModelType('serverSide');\n        if (isServerSide && params.pivoting) {\n            this.updatePivotKeysForSSRM();\n        }\n\n        const result = this.extractRowsFromGridRowModel(params);\n        result.chartData = this.aggregateRowsByDimension(params, result.chartData);\n        return result;\n    }\n\n    private extractRowsFromGridRowModel(params: ChartDatasourceParams): IData {\n        const { crossFiltering, startRow, endRow, valueCols, dimensionCols, grouping } = params;\n        let extractedRowData: any[] = [];\n        const columnNames: { [key: string]: string[] } = {};\n\n        // maps used to keep track of expanded groups that need to be removed\n        const groupNodeIndexes: { [key: string]: number } = {};\n        const groupsToRemove: { [key: string]: number } = {};\n\n        // only used when cross filtering\n        let filteredNodes: { [key: string]: RowNode } = {};\n        let allRowNodes: RowNode[] = [];\n\n        let numRows;\n        if (crossFiltering) {\n            filteredNodes = this.getFilteredRowNodes();\n            allRowNodes = this.getAllRowNodes();\n            numRows = allRowNodes.length;\n        } else {\n            // make sure enough rows in range to chart. if user filters and less rows, then end row will be\n            // the last displayed row, not where the range ends.\n            const modelLastRow = this.gridRowModel.getRowCount() - 1;\n            // inclusivity is wrong for end row, so can't detect 0 rows properly\n            const hasNoRange =\n                startRow === endRow && startRow === 0 && dimensionCols.length === 0 && valueCols.length === 0;\n            if (hasNoRange) {\n                numRows = 0;\n            } else {\n                const rangeLastRow = endRow >= 0 ? Math.min(endRow, modelLastRow) : modelLastRow;\n                numRows = rangeLastRow - startRow + 1;\n            }\n        }\n\n        if (numRows > 0) {\n            valueCols.forEach((col) => {\n                let columnNamesArr: string[] = [];\n\n                // pivot keys should be added first\n                const pivotKeys = col.getColDef().pivotKeys;\n                if (pivotKeys) {\n                    columnNamesArr = pivotKeys.slice();\n                }\n\n                // then add column header name to results\n                const headerName = col.getColDef().headerName;\n                if (headerName) {\n                    columnNamesArr.push(headerName);\n                }\n\n                // add array of column names to results\n                if (columnNamesArr.length > 0) {\n                    columnNames[col.getId()] = columnNamesArr;\n                }\n            });\n        }\n\n        let numRemovedNodes = 0;\n\n        let id = 0;\n\n        for (let i = 0; i < numRows; i++) {\n            const rowNode = crossFiltering ? allRowNodes[i] : this.gridRowModel.getRow(i + startRow)!;\n\n            if (rowNode.footer || rowNode.detail) {\n                numRemovedNodes++;\n                continue;\n            }\n\n            const data: any = {};\n            // first get data for dimensions columns\n            dimensionCols.forEach((col) => {\n                const colId = col.colId;\n                const column = this.columnModel.getCol(colId);\n\n                if (column) {\n                    const valueObject = this.valueService.getValue(column, rowNode);\n\n                    // when grouping we also need to build up multi category labels for charts\n                    if (grouping) {\n                        const valueString = valueObject && valueObject.toString ? String(valueObject.toString()) : '';\n\n                        // traverse parents to extract group label path\n                        const labels = ChartDatasource.getGroupLabels(rowNode, valueString);\n\n                        data[colId] = {\n                            labels,\n                            // this is needed so that standalone can handle animations properly when data updates\n                            id: id++,\n                            toString: function () {\n                                return this.labels\n                                    .filter((l: string) => !!l)\n                                    .reverse()\n                                    .join(' - ');\n                            },\n                        };\n\n                        // keep track of group node indexes, so they can be padded when other groups are expanded\n                        if (rowNode.group) {\n                            groupNodeIndexes[labels.toString()] = i - numRemovedNodes;\n                        }\n\n                        // if node (group or leaf) has parents then it is expanded and should be removed\n                        const groupKey = labels.slice(1, labels.length).toString();\n\n                        if (groupKey) {\n                            groupsToRemove[groupKey] = groupNodeIndexes[groupKey];\n                        }\n                    } else {\n                        // leaf nodes can be directly added to dimension columns\n                        data[colId] = valueObject;\n                    }\n                } else {\n                    // introduce a default category when no dimensions exist with a value based off row index (+1)\n                    data[ChartDataModel.DEFAULT_CATEGORY] = i + 1;\n                }\n            });\n\n            // then get data for value columns\n            valueCols.forEach((col) => {\n                const colId = col.getColId();\n                if (crossFiltering) {\n                    const filteredOutColId = colId + '-filtered-out';\n\n                    // add data value to value column\n                    const value = this.valueService.getValue(col, rowNode);\n                    const actualValue =\n                        value != null && typeof value.toNumber === 'function' ? value.toNumber() : value;\n\n                    if (filteredNodes[rowNode.id as string]) {\n                        data[colId] = actualValue;\n                        data[filteredOutColId] = params.aggFunc || params.isScatter ? undefined : 0;\n                    } else {\n                        data[colId] = params.aggFunc || params.isScatter ? undefined : 0;\n                        data[filteredOutColId] = actualValue;\n                    }\n                } else {\n                    // add data value to value column\n                    let value = this.valueService.getValue(col, rowNode);\n\n                    // aggregated value\n                    if (value && Object.prototype.hasOwnProperty.call(value, 'toString')) {\n                        value = parseFloat(value.toString());\n                    }\n\n                    data[colId] = value != null && typeof value.toNumber === 'function' ? value.toNumber() : value;\n                }\n            });\n\n            // add data to results\n            extractedRowData.push(data);\n        }\n\n        let groupChartData: any[] | undefined;\n        if (grouping) {\n            const groupIndexesToRemove = _values(groupsToRemove);\n            const allData = extractedRowData;\n            extractedRowData = [];\n            groupChartData = [];\n            for (let i = 0; i < allData.length; i++) {\n                (_includes(groupIndexesToRemove, i) ? groupChartData : extractedRowData).push(allData[i]);\n            }\n        }\n\n        return { chartData: extractedRowData, columnNames, groupChartData };\n    }\n\n    private aggregateRowsByDimension(params: ChartDatasourceParams, dataFromGrid: any[]): any[] {\n        const dimensionCols = params.dimensionCols;\n\n        if (!params.aggFunc || dimensionCols.length === 0) {\n            return dataFromGrid;\n        }\n\n        const lastCol = _last(dimensionCols);\n        const lastColId = lastCol && lastCol.colId;\n        const map: any = {};\n        const dataAggregated: any[] = [];\n\n        dataFromGrid.forEach((data) => {\n            let currentMap = map;\n\n            dimensionCols.forEach((col) => {\n                const colId = col.colId;\n                const key = data[colId];\n\n                if (colId === lastColId) {\n                    let groupItem = currentMap[key];\n\n                    if (!groupItem) {\n                        groupItem = { __children: [] };\n\n                        dimensionCols.forEach((dimCol) => {\n                            const dimColId = dimCol.colId;\n                            groupItem[dimColId] = data[dimColId];\n                        });\n\n                        currentMap[key] = groupItem;\n                        dataAggregated.push(groupItem);\n                    }\n\n                    groupItem.__children.push(data);\n                } else {\n                    // map of maps\n                    if (!currentMap[key]) {\n                        currentMap[key] = {};\n                    }\n\n                    currentMap = currentMap[key];\n                }\n            });\n        });\n\n        if (ModuleRegistry.__assertRegistered(ModuleNames.RowGroupingModule, 'Charting Aggregation', this.gridId)) {\n            const aggStage = this.aggregationStage!;\n            dataAggregated.forEach((groupItem) =>\n                params.valueCols.forEach((col) => {\n                    if (params.crossFiltering) {\n                        params.valueCols.forEach((valueCol) => {\n                            const colId = valueCol.getColId();\n\n                            // filtered data\n                            const dataToAgg = groupItem.__children\n                                .filter((child: any) => typeof child[colId] !== 'undefined')\n                                .map((child: any) => child[colId]);\n\n                            const aggResult: any = aggStage.aggregateValues(dataToAgg, params.aggFunc!);\n                            groupItem[valueCol.getId()] =\n                                aggResult && typeof aggResult.value !== 'undefined' ? aggResult.value : aggResult;\n\n                            // filtered out data\n                            const filteredOutColId = `${colId}-filtered-out`;\n                            const dataToAggFiltered = groupItem.__children\n                                .filter((child: any) => typeof child[filteredOutColId] !== 'undefined')\n                                .map((child: any) => child[filteredOutColId]);\n\n                            const aggResultFiltered: any = aggStage.aggregateValues(dataToAggFiltered, params.aggFunc!);\n                            groupItem[filteredOutColId] =\n                                aggResultFiltered && typeof aggResultFiltered.value !== 'undefined'\n                                    ? aggResultFiltered.value\n                                    : aggResultFiltered;\n                        });\n                    } else {\n                        const dataToAgg = groupItem.__children.map((child: any) => child[col.getId()]);\n                        const aggResult = aggStage.aggregateValues(dataToAgg, params.aggFunc!);\n\n                        groupItem[col.getId()] =\n                            aggResult && typeof aggResult.value !== 'undefined' ? aggResult.value : aggResult;\n                    }\n                })\n            );\n        }\n\n        return dataAggregated;\n    }\n\n    private updatePivotKeysForSSRM() {\n        const secondaryColumns = this.pivotResultColsService.getPivotResultCols()?.list;\n\n        if (!secondaryColumns) {\n            return;\n        }\n\n        // we don't know what the application will use for the pivot key separator (i.e. '_' or '|' ) as the\n        // secondary columns are provided to grid by the application via api.setSecondaryColumns()\n        const pivotKeySeparator = this.extractPivotKeySeparator(secondaryColumns);\n\n        // `pivotKeys` is not used by the SSRM for pivoting, so it is safe to reuse this colDef property. This way\n        // the same logic can be used for CSRM and SSRM to extract legend names in extractRowsFromGridRowModel()\n        secondaryColumns.forEach((col) => {\n            if (pivotKeySeparator === '') {\n                col.getColDef().pivotKeys = [];\n            } else {\n                const keys = col.getColId().split(pivotKeySeparator);\n                col.getColDef().pivotKeys = keys.slice(0, keys.length - 1);\n            }\n        });\n    }\n\n    private extractPivotKeySeparator(secondaryColumns: AgColumn[]) {\n        if (secondaryColumns.length === 0) {\n            return '';\n        }\n\n        const extractSeparator = (columnGroup: AgColumnGroup, childId: string): string => {\n            const groupId = columnGroup.getGroupId();\n            if (!columnGroup.getParent()) {\n                // removing groupId ('2000') from childId ('2000|Swimming') yields '|Swimming' so first char is separator\n                return childId.split(groupId)[1][0];\n            }\n            return extractSeparator(columnGroup.getParent()!, groupId);\n        };\n\n        const firstSecondaryCol = secondaryColumns[0];\n        if (firstSecondaryCol.getParent() == null) {\n            return '';\n        }\n        return extractSeparator(firstSecondaryCol.getParent()!, firstSecondaryCol.getColId());\n    }\n\n    private static getGroupLabels(rowNode: RowNode | null, initialLabel: string): string[] {\n        const labels = [initialLabel];\n        while (rowNode && rowNode.level !== 0) {\n            rowNode = rowNode.parent;\n            if (rowNode) {\n                labels.push(rowNode.key!);\n            }\n        }\n        return labels;\n    }\n\n    private getFilteredRowNodes() {\n        const filteredNodes: { [key: string]: RowNode } = {};\n        (this.gridRowModel as IClientSideRowModel).forEachNodeAfterFilterAndSort((rowNode: RowNode) => {\n            filteredNodes[rowNode.id as string] = rowNode;\n        });\n        return filteredNodes;\n    }\n\n    private getAllRowNodes() {\n        const allRowNodes: RowNode[] = [];\n        this.gridRowModel.forEachNode((rowNode: RowNode) => {\n            allRowNodes.push(rowNode);\n        });\n        return this.sortRowNodes(allRowNodes);\n    }\n\n    private sortRowNodes(rowNodes: RowNode[]): RowNode[] {\n        const sortOptions = this.sortController.getSortOptions();\n        const noSort = !sortOptions || sortOptions.length == 0;\n        if (noSort) return rowNodes;\n        return this.rowNodeSorter.doFullSort(rowNodes, sortOptions);\n    }\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    ColumnModel,\n    ColumnNameService,\n    FuncColsService,\n    IShowRowGroupColsService,\n    NamedBean,\n    RowNode,\n    RowPositionUtils,\n    ValueService,\n    VisibleColsService,\n} from '@ag-grid-community/core';\nimport { BeanStub, _warnOnce } from '@ag-grid-community/core';\n\nexport class ChartColumnService extends BeanStub implements NamedBean {\n    beanName = 'chartColumnService' as const;\n\n    private columnModel: ColumnModel;\n    private showRowGroupColsService?: IShowRowGroupColsService;\n    private columnNameService: ColumnNameService;\n    private visibleColsService: VisibleColsService;\n    private funcColsService: FuncColsService;\n    private valueService: ValueService;\n    private rowPositionUtils: RowPositionUtils;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.columnModel = beans.columnModel;\n        this.showRowGroupColsService = beans.showRowGroupColsService;\n        this.columnNameService = beans.columnNameService;\n        this.visibleColsService = beans.visibleColsService;\n        this.funcColsService = beans.funcColsService;\n        this.valueService = beans.valueService;\n        this.rowPositionUtils = beans.rowPositionUtils;\n    }\n\n    private valueColsWithoutSeriesType: Set<string> = new Set();\n\n    public postConstruct(): void {\n        const clearValueCols = () => this.valueColsWithoutSeriesType.clear();\n        this.addManagedEventListeners({\n            newColumnsLoaded: clearValueCols,\n            rowDataUpdated: clearValueCols,\n        });\n    }\n\n    public getColumn(colId: string): AgColumn | null {\n        return this.columnModel.getColDefCol(colId);\n    }\n\n    public getAllDisplayedColumns(): AgColumn[] {\n        return this.visibleColsService.getAllCols();\n    }\n\n    public getColDisplayName(col: AgColumn): string | null {\n        return this.columnNameService.getDisplayNameForColumn(col, 'chart');\n    }\n\n    public getRowGroupColumns(): AgColumn[] {\n        return this.funcColsService.getRowGroupColumns();\n    }\n\n    public getGroupDisplayColumns(): AgColumn[] {\n        return this.showRowGroupColsService?.getShowRowGroupCols() ?? [];\n    }\n\n    public isPivotMode(): boolean {\n        return this.columnModel.isPivotMode();\n    }\n\n    public isPivotActive(): boolean {\n        return this.columnModel.isPivotActive();\n    }\n\n    public getChartColumns(): { dimensionCols: Set<AgColumn>; valueCols: Set<AgColumn> } {\n        const gridCols = this.columnModel.getCols();\n\n        const dimensionCols = new Set<AgColumn>();\n        const valueCols = new Set<AgColumn>();\n\n        gridCols.forEach((col) => {\n            const colDef = col.getColDef();\n            const chartDataType = colDef.chartDataType;\n\n            if (chartDataType) {\n                // chart data type was specified explicitly\n                switch (chartDataType) {\n                    case 'category':\n                    case 'time':\n                        dimensionCols.add(col);\n                        return;\n                    case 'series':\n                        valueCols.add(col);\n                        return;\n                    case 'excluded':\n                        return;\n                    default:\n                        _warnOnce(\n                            `unexpected chartDataType value '${chartDataType}' supplied, instead use 'category', 'series' or 'excluded'`\n                        );\n                        break;\n                }\n            }\n\n            if (colDef.colId === 'ag-Grid-AutoColumn') {\n                dimensionCols.add(col);\n                return;\n            }\n\n            if (!col.isPrimary()) {\n                valueCols.add(col);\n                return;\n            }\n\n            // if 'chartDataType' is not provided then infer type based data contained in first row\n            (this.isInferredValueCol(col) ? valueCols : dimensionCols).add(col);\n        });\n\n        return { dimensionCols, valueCols };\n    }\n\n    private isInferredValueCol(col: AgColumn): boolean {\n        const colId = col.getColId();\n        if (colId === 'ag-Grid-AutoColumn') {\n            return false;\n        }\n\n        const row = this.rowPositionUtils.getRowNode({ rowIndex: 0, rowPinned: null });\n\n        if (!row) {\n            return this.valueColsWithoutSeriesType.has(colId);\n        }\n\n        let cellValue = this.valueService.getValue(col, row);\n\n        if (cellValue == null) {\n            cellValue = this.extractLeafData(row, col);\n        }\n\n        if (cellValue != null && typeof cellValue.toNumber === 'function') {\n            cellValue = cellValue.toNumber();\n        }\n\n        const isNumber = typeof cellValue === 'number';\n\n        if (isNumber) {\n            this.valueColsWithoutSeriesType.add(colId);\n        }\n\n        return isNumber;\n    }\n\n    private extractLeafData(row: RowNode, col: AgColumn): any {\n        if (!row.allLeafChildren) {\n            return null;\n        }\n\n        for (let i = 0; i < row.allLeafChildren.length; i++) {\n            const childRow = row.allLeafChildren[i];\n            const value = this.valueService.getValue(col, childRow);\n\n            if (value != null) {\n                return value;\n            }\n        }\n\n        return null;\n    }\n\n    public override destroy(): void {\n        this.valueColsWithoutSeriesType.clear();\n        super.destroy();\n    }\n}\n", "import type { ChartType, SeriesChartType } from '@ag-grid-community/core';\nimport { BeanStub, _warnOnce } from '@ag-grid-community/core';\n\nimport type { ChartDataModel, ColState } from './chartDataModel';\n\nexport class ComboChartModel extends BeanStub {\n    public static SUPPORTED_COMBO_CHART_TYPES = ['line', 'groupedColumn', 'stackedColumn', 'area', 'stackedArea'];\n\n    public seriesChartTypes: SeriesChartType[];\n    public savedCustomSeriesChartTypes: SeriesChartType[];\n\n    // this control flag is used to only log warning for the initial user config\n    private suppressComboChartWarnings = false;\n    private chartDataModel: ChartDataModel;\n\n    public constructor(chartDataModel: ChartDataModel) {\n        super();\n        this.chartDataModel = chartDataModel;\n        this.seriesChartTypes = chartDataModel.params.seriesChartTypes ?? [];\n    }\n\n    public postConstruct(): void {\n        this.initComboCharts();\n    }\n\n    public update(seriesChartTypes?: SeriesChartType[]): void {\n        this.seriesChartTypes = seriesChartTypes ?? this.seriesChartTypes;\n        this.initComboCharts();\n        this.updateSeriesChartTypes();\n    }\n\n    private initComboCharts() {\n        const seriesChartTypesExist = this.seriesChartTypes && this.seriesChartTypes.length > 0;\n        const customCombo = this.chartDataModel.chartType === 'customCombo' || seriesChartTypesExist;\n        if (customCombo) {\n            // it is not necessary to supply a chart type for combo charts when `seriesChartTypes` is supplied\n            this.chartDataModel.chartType = 'customCombo';\n\n            // cache supplied `seriesChartTypes` to allow switching between different chart types in the settings panel\n            this.savedCustomSeriesChartTypes = this.seriesChartTypes || [];\n        }\n    }\n\n    public updateSeriesChartTypes(): void {\n        if (!this.chartDataModel.isComboChart()) {\n            return;\n        }\n\n        // ensure primary only chart types are not placed on secondary axis\n        this.seriesChartTypes = this.seriesChartTypes.map((seriesChartType) => {\n            const primaryOnly = ['groupedColumn', 'stackedColumn', 'stackedArea'].includes(seriesChartType.chartType);\n            seriesChartType.secondaryAxis = primaryOnly ? false : seriesChartType.secondaryAxis;\n            return seriesChartType;\n        });\n\n        // note that when seriesChartTypes are supplied the chart type is also changed to 'customCombo'\n        if (this.chartDataModel.chartType === 'customCombo') {\n            this.updateSeriesChartTypesForCustomCombo();\n            return;\n        }\n\n        this.updateChartSeriesTypesForBuiltInCombos();\n    }\n\n    private updateSeriesChartTypesForCustomCombo() {\n        const seriesChartTypesSupplied = this.seriesChartTypes && this.seriesChartTypes.length > 0;\n        if (!seriesChartTypesSupplied && !this.suppressComboChartWarnings) {\n            _warnOnce(`'seriesChartTypes' are required when the 'customCombo' chart type is specified.`);\n        }\n\n        // ensure correct chartTypes are supplied\n        this.seriesChartTypes = this.seriesChartTypes.map((s) => {\n            if (!ComboChartModel.SUPPORTED_COMBO_CHART_TYPES.includes(s.chartType)) {\n                _warnOnce(\n                    `invalid chartType '${s.chartType}' supplied in 'seriesChartTypes', converting to 'line' instead.`\n                );\n                s.chartType = 'line';\n            }\n            return s;\n        });\n\n        const getSeriesChartType = (valueCol: ColState): SeriesChartType => {\n            if (!this.savedCustomSeriesChartTypes || this.savedCustomSeriesChartTypes.length === 0) {\n                this.savedCustomSeriesChartTypes = this.seriesChartTypes;\n            }\n\n            const providedSeriesChartType = this.savedCustomSeriesChartTypes.find((s) => s.colId === valueCol.colId);\n            if (!providedSeriesChartType) {\n                if (valueCol.selected && !this.suppressComboChartWarnings) {\n                    _warnOnce(`no 'seriesChartType' found for colId = '${valueCol.colId}', defaulting to 'line'.`);\n                }\n                return {\n                    colId: valueCol.colId,\n                    chartType: 'line',\n                    secondaryAxis: false,\n                };\n            }\n\n            return providedSeriesChartType;\n        };\n\n        const updatedSeriesChartTypes = this.chartDataModel.valueColState.map(getSeriesChartType);\n\n        this.seriesChartTypes = updatedSeriesChartTypes;\n\n        // also cache custom `seriesChartTypes` to allow for switching between different chart types\n        this.savedCustomSeriesChartTypes = updatedSeriesChartTypes;\n\n        // turn off warnings as first combo chart attempt has completed\n        this.suppressComboChartWarnings = true;\n    }\n\n    private updateChartSeriesTypesForBuiltInCombos() {\n        const { chartType, valueColState } = this.chartDataModel;\n\n        const primaryChartType: ChartType = chartType === 'columnLineCombo' ? 'groupedColumn' : 'stackedArea';\n        const secondaryChartType: ChartType = chartType === 'columnLineCombo' ? 'line' : 'groupedColumn';\n\n        const selectedCols = valueColState.filter((cs) => cs.selected);\n        const lineIndex = Math.ceil(selectedCols.length / 2);\n        this.seriesChartTypes = selectedCols.map((valueCol: ColState, i: number) => {\n            const seriesType = i >= lineIndex ? secondaryChartType : primaryChartType;\n            return { colId: valueCol.colId, chartType: seriesType, secondaryAxis: false };\n        });\n    }\n}\n", "import type {\n    ChartParamsCellRange,\n    ChartType,\n    IAggFunc,\n    UpdateChartParams,\n    UpdateCrossFilterChartParams,\n    UpdatePivotChartParams,\n    UpdateRangeChartParams,\n} from '@ag-grid-community/core';\nimport { _warnOnce } from '@ag-grid-community/core';\nimport type { AgChartThemeOverrides } from 'ag-charts-community';\nimport { _ModuleSupport } from 'ag-charts-community';\n\nimport type { CommonCreateChartParams } from '../../chartService';\nimport { getCanonicalChartType, getSeriesTypeIfExists, isComboChart, isEnterpriseChartType } from './seriesTypeMapper';\n\nconst validateIfDefined = <I, O = never>(validationFn: (value: NonNullable<I>) => boolean | O) => {\n    return (value: I | null | undefined): boolean | O => {\n        if (value == undefined) return true;\n        return validationFn(value as NonNullable<I>);\n    };\n};\n\nconst isString = (value: any): boolean => typeof value === 'string';\nconst isBoolean = (value: any): boolean => typeof value === 'boolean';\nconst isValidSeriesChartType = (value: any): boolean => typeof value === 'object';\nconst createWarnMessage =\n    (property: string, expectedType: string): ((value: any) => string) =>\n    (value: any) =>\n        `AG Grid - unable to update chart as invalid params supplied:  \\`${property}: ${value}\\`, expected ${expectedType}.`;\n\nconst createEnterpriseMessage = (feature: string) => {\n    const url = 'https://www.ag-grid.com/javascript-data-grid/integrated-charts-installation/';\n    return `${feature} is not supported in AG Charts Community (either 'ag-grid-charts-enterprise' or '@ag-grid-enterprise/charts-enterprise' hasn't been loaded). See ${url} for more details.`;\n};\n\ninterface ValidationFunction<T, K extends keyof T = keyof T, V = T[K]> {\n    property: K;\n    validationFn: (value: T[K]) => boolean | V;\n    warnMessage: (value: T[K]) => string;\n    warnIfFixed?: boolean;\n}\n\nexport class ChartParamsValidator {\n    private static legacyChartTypes: ChartType[] = ['doughnut'];\n\n    private static baseUpdateChartParams = [\n        'type',\n        'chartId',\n        'chartType',\n        'chartThemeName',\n        'chartThemeOverrides',\n        'unlinkChart',\n    ] as const;\n\n    private static isEnterprise(): boolean {\n        return _ModuleSupport.enterpriseModule.isEnterprise;\n    }\n\n    private static isValidChartType(value: string): value is ChartType {\n        return !!getSeriesTypeIfExists(value as ChartType) || isComboChart(value as ChartType);\n    }\n\n    private static isLegacyChartType(value: string): value is ChartType {\n        return ChartParamsValidator.legacyChartTypes.includes(value as ChartType);\n    }\n\n    private static validateChartType = validateIfDefined<\n        UpdateChartParams['chartType'],\n        Exclude<ChartType, 'doughnut'>\n    >((chartType) => {\n        if (this.isValidChartType(chartType)) return true;\n        if (this.isLegacyChartType(chartType)) {\n            const renamedChartType = getCanonicalChartType(chartType);\n            _warnOnce(`The chart type '${chartType}' has been deprecated. Please use '${renamedChartType}' instead.`);\n            return renamedChartType;\n        }\n        return false;\n    });\n\n    private static validateAgChartThemeOverrides = validateIfDefined<AgChartThemeOverrides>((themeOverrides) => {\n        // ensure supplied AgChartThemeOverrides is an object - can be improved if necessary?\n        return typeof themeOverrides === 'object';\n    });\n\n    private static validateChartParamsCellRange = validateIfDefined<ChartParamsCellRange>((cellRange) => {\n        // ensure supplied ChartParamsCellRange is an object - can be improved if necessary?\n        return typeof cellRange === 'object';\n    });\n\n    private static validateAggFunc = validateIfDefined<string | IAggFunc>((aggFunc) => {\n        // ensure supplied aggFunc is a `string` or `function` - can be improved if necessary?\n        return typeof aggFunc === 'string' || typeof aggFunc === 'function';\n    });\n\n    private static enterpriseChartTypeValidation: ValidationFunction<any> = {\n        property: 'chartType',\n        validationFn: validateIfDefined<ChartType>(\n            (chartType) => ChartParamsValidator.isEnterprise() || !chartType || !isEnterpriseChartType(chartType)\n        ),\n        warnMessage: (chartType) => createEnterpriseMessage(`The '${chartType}' chart type`),\n    };\n\n    private static switchCategorySeriesValidation: ValidationFunction<any> = {\n        property: 'switchCategorySeries',\n        validationFn: validateIfDefined<boolean, undefined>((switchCategorySeries) => {\n            if (!switchCategorySeries || ChartParamsValidator.isEnterprise()) {\n                return true;\n            }\n            return undefined;\n        }),\n        warnMessage: () => createEnterpriseMessage(`'switchCategorySeries' has been ignored as it`),\n        warnIfFixed: true,\n    };\n\n    private static commonUpdateValidations: ValidationFunction<any>[] = [\n        { property: 'chartId', validationFn: isString, warnMessage: createWarnMessage('chartId', 'string') },\n        {\n            property: 'chartType',\n            validationFn: ChartParamsValidator.validateChartType,\n            warnMessage: createWarnMessage('chartType', 'ChartType'),\n        },\n        {\n            property: 'chartThemeName',\n            validationFn: isString,\n            warnMessage: createWarnMessage('chartThemeName', 'string'),\n        },\n        {\n            property: 'chartThemeOverrides',\n            validationFn: ChartParamsValidator.validateAgChartThemeOverrides,\n            warnMessage: createWarnMessage('chartThemeOverrides', 'AgChartThemeOverrides'),\n        },\n        { property: 'unlinkChart', validationFn: isBoolean, warnMessage: createWarnMessage('unlinkChart', 'boolean') },\n    ];\n\n    private static cellRangeValidations: ValidationFunction<any>[] = [\n        {\n            property: 'cellRange',\n            validationFn: ChartParamsValidator.validateChartParamsCellRange,\n            warnMessage: createWarnMessage('cellRange', 'ChartParamsCellRange'),\n        },\n        {\n            property: 'suppressChartRanges',\n            validationFn: isBoolean,\n            warnMessage: createWarnMessage('suppressChartRanges', 'boolean'),\n        },\n        {\n            property: 'aggFunc',\n            validationFn: ChartParamsValidator.validateAggFunc,\n            warnMessage: createWarnMessage('aggFunc', 'string or IAggFunc'),\n        },\n        ChartParamsValidator.switchCategorySeriesValidation,\n    ];\n\n    public static validateUpdateParams(params: UpdateChartParams): boolean | UpdateChartParams {\n        const paramsToValidate = params as UpdateChartParams;\n        switch (paramsToValidate.type) {\n            case 'rangeChartUpdate':\n                return ChartParamsValidator.validateUpdateRangeChartParams(params as UpdateRangeChartParams);\n            case 'pivotChartUpdate':\n                return ChartParamsValidator.validateUpdatePivotChartParams(params as UpdatePivotChartParams);\n            case 'crossFilterChartUpdate':\n                return ChartParamsValidator.validateUpdateCrossFilterChartParams(\n                    params as UpdateCrossFilterChartParams\n                );\n            default:\n                _warnOnce(\n                    `Invalid value supplied for 'type': ${params.type}. It must be either 'rangeChartUpdate', 'pivotChartUpdate', or 'crossFilterChartUpdate'.`\n                );\n                return false;\n        }\n    }\n\n    public static validateCreateParams(params: CommonCreateChartParams): boolean | CommonCreateChartParams {\n        return validateProperties(params, [\n            ChartParamsValidator.enterpriseChartTypeValidation,\n            ChartParamsValidator.switchCategorySeriesValidation,\n        ]);\n    }\n\n    private static validateUpdateRangeChartParams(params: UpdateRangeChartParams): boolean | UpdateRangeChartParams {\n        const validations: ValidationFunction<any>[] = [\n            ...ChartParamsValidator.commonUpdateValidations,\n            ChartParamsValidator.enterpriseChartTypeValidation,\n            ...ChartParamsValidator.cellRangeValidations,\n            {\n                property: 'seriesChartTypes',\n                validationFn: (value: any) =>\n                    value === undefined || (Array.isArray(value) && value.every(isValidSeriesChartType)),\n                warnMessage: createWarnMessage('seriesChartTypes', 'Array of SeriesChartType'),\n            },\n        ];\n\n        return validateProperties(\n            params,\n            validations,\n            [\n                ...ChartParamsValidator.baseUpdateChartParams,\n                'cellRange',\n                'suppressChartRanges',\n                'switchCategorySeries',\n                'aggFunc',\n                'seriesChartTypes',\n                'seriesGroupType',\n            ],\n            'UpdateRangeChartParams'\n        );\n    }\n\n    private static validateUpdatePivotChartParams(params: UpdatePivotChartParams): boolean | UpdatePivotChartParams {\n        const validations: ValidationFunction<any>[] = [...ChartParamsValidator.commonUpdateValidations];\n\n        return validateProperties(\n            params,\n            validations,\n            [...ChartParamsValidator.baseUpdateChartParams],\n            'UpdatePivotChartParams'\n        );\n    }\n\n    private static validateUpdateCrossFilterChartParams(\n        params: UpdateCrossFilterChartParams\n    ): boolean | UpdateCrossFilterChartParams {\n        const validations: ValidationFunction<any>[] = [\n            ...ChartParamsValidator.commonUpdateValidations,\n            ...ChartParamsValidator.cellRangeValidations,\n        ];\n\n        return validateProperties(\n            params,\n            validations,\n            [...ChartParamsValidator.baseUpdateChartParams, 'cellRange', 'suppressChartRanges', 'aggFunc'],\n            'UpdateCrossFilterChartParams'\n        );\n    }\n}\n\nfunction validateProperties<T extends object>(\n    params: T,\n    validations: ValidationFunction<T>[],\n    validPropertyNames?: (keyof T)[],\n    paramsType?: string\n): boolean | T {\n    let validatedProperties: T | undefined = undefined;\n    for (const validation of validations) {\n        const { property, validationFn, warnMessage, warnIfFixed } = validation;\n        if (property in params) {\n            const value = params[property];\n            const validationResult = validationFn(value);\n            if (validationResult === true) continue;\n            if (validationResult === false) {\n                _warnOnce(warnMessage(value));\n                return false;\n            }\n            // If the validation function returned a 'fix' value, we need to return an updated property set.\n            // First we clone the input set if there has not been a 'fix' encountered in a previous iteration:\n            validatedProperties = validatedProperties || { ...params };\n            /// Then we update the cloned object with the 'fixed' value\n            validatedProperties[property] = validationResult;\n            if (warnIfFixed) {\n                _warnOnce(warnMessage(value));\n            }\n        }\n    }\n\n    if (validPropertyNames) {\n        // Check for unexpected properties\n        for (const property in params) {\n            if (!validPropertyNames.includes(property as keyof T)) {\n                _warnOnce(`Unexpected property supplied. ${paramsType} does not contain: \\`${property}\\`.`);\n                return false;\n            }\n        }\n    }\n\n    // If one or more 'fixed' values were encountered, return the updated property set\n    if (validatedProperties) return validatedProperties;\n\n    return true;\n}\n", "import type { ChartType, SeriesChartType, SeriesGroupType } from '@ag-grid-community/core';\nimport type {\n    AgChartInstance,\n    AgChartOptions,\n    AgChartTheme,\n    AgChartThemeOverrides,\n    AgChartThemePalette,\n    AgCommonThemeableChartOptions,\n    AgCrosshairOptions,\n} from 'ag-charts-community';\nimport { AgCharts, _ModuleSupport, _Theme } from 'ag-charts-community';\n\nimport type { CrossFilteringContext } from '../../chartService';\nimport { deproxy } from '../utils/integration';\nimport { get } from '../utils/object';\nimport type { ChartSeriesType } from '../utils/seriesTypeMapper';\nimport { getSeriesType } from '../utils/seriesTypeMapper';\nimport { createAgChartTheme, lookupCustomChartTheme } from './chartTheme';\n\nexport interface ChartProxyParams {\n    chartInstance?: AgChartInstance;\n    chartType: ChartType;\n    customChartThemes?: { [name: string]: AgChartTheme };\n    parentElement: HTMLElement;\n    grouping: boolean;\n    getChartThemeName: () => string;\n    getChartThemes: () => string[];\n    getGridOptionsChartThemeOverrides: () => AgChartThemeOverrides | undefined;\n    getExtraPaddingDirections: () => ExtraPaddingDirection[];\n    apiChartThemeOverrides?: AgChartThemeOverrides;\n    crossFiltering: boolean;\n    crossFilterCallback: (event: any, reset?: boolean) => void;\n    chartThemeToRestore?: string;\n    chartOptionsToRestore?: AgChartThemeOverrides;\n    chartPaletteToRestore?: AgChartThemePalette;\n    seriesChartTypes: SeriesChartType[];\n    translate: (toTranslate: string, defaultText?: string) => string;\n}\n\nexport type ExtraPaddingDirection = 'top' | 'right' | 'bottom' | 'left';\n\nexport interface FieldDefinition {\n    colId: string;\n    displayName: string | null;\n}\n\nexport interface UpdateParams {\n    data: any[];\n    groupData?: any[];\n    grouping: boolean;\n    categories: {\n        id: string;\n        name: string;\n        chartDataType?: string;\n    }[];\n    fields: FieldDefinition[];\n    chartId?: string;\n    getCrossFilteringContext: () => CrossFilteringContext;\n    seriesChartTypes: SeriesChartType[];\n    updatedOverrides?: AgChartThemeOverrides;\n    seriesGroupType?: SeriesGroupType;\n}\n\nexport abstract class ChartProxy<\n    TOptions extends AgChartOptions = AgChartOptions,\n    TSeries extends ChartSeriesType = ChartSeriesType,\n> {\n    private readonly isEnterpriseCharts: boolean;\n    protected readonly chartType: ChartType;\n    protected readonly standaloneChartType: TSeries;\n\n    protected readonly chart: AgChartInstance;\n    protected readonly crossFiltering: boolean;\n    protected readonly crossFilterCallback: (event: any, reset?: boolean) => void;\n\n    protected clearThemeOverrides = false;\n\n    protected constructor(protected readonly chartProxyParams: ChartProxyParams) {\n        this.isEnterpriseCharts = _ModuleSupport.enterpriseModule.isEnterprise;\n        this.chart = chartProxyParams.chartInstance!;\n        this.chartType = chartProxyParams.chartType;\n        this.crossFiltering = chartProxyParams.crossFiltering;\n        this.crossFilterCallback = chartProxyParams.crossFilterCallback;\n        this.standaloneChartType = getSeriesType(this.chartType) as TSeries;\n\n        if (this.chart == null) {\n            this.chart = AgCharts.create(this.getCommonChartOptions());\n        } else {\n            // On chart change, reset formatting panel changes.\n            this.clearThemeOverrides = true;\n        }\n    }\n\n    protected abstract getUpdateOptions(params: UpdateParams, commonChartOptions: TOptions): TOptions;\n\n    public crossFilteringReset(): void {\n        // only required in cartesian charts\n    }\n\n    public update(params: UpdateParams): void {\n        this.getChartRef().update(this.getUpdateOptions(params, this.getCommonChartOptions(params.updatedOverrides)));\n    }\n\n    public updateThemeOverrides(themeOverrides: AgChartThemeOverrides): void {\n        this.getChartRef().updateDelta({ theme: { overrides: themeOverrides } });\n    }\n\n    public getChart() {\n        return deproxy(this.chart);\n    }\n\n    public getChartRef() {\n        return this.chart;\n    }\n\n    public downloadChart(dimensions?: { width: number; height: number }, fileName?: string, fileFormat?: string) {\n        const { chart } = this;\n        const rawChart = deproxy(chart);\n        const imageFileName = fileName || (rawChart.title ? rawChart.title.text : 'chart');\n        const { width, height } = dimensions || {};\n\n        chart.download({ width, height, fileName: imageFileName, fileFormat });\n    }\n\n    public getChartImageDataURL(type?: string) {\n        return this.getChart().getCanvasDataURL(type);\n    }\n\n    private getChartOptions(): AgChartOptions {\n        return this.chart.getOptions();\n    }\n\n    public getChartThemeOverrides(): AgChartThemeOverrides {\n        const chartOptionsTheme = this.getChartOptions().theme as AgChartTheme;\n        return chartOptionsTheme.overrides ?? {};\n    }\n\n    public getChartPalette(): AgChartThemePalette | undefined {\n        return _Theme.getChartTheme(this.getChartOptions().theme).palette;\n    }\n\n    public setPaired(paired: boolean) {\n        // Special handling to make scatter charts operate in paired mode by default, where\n        // columns alternate between being X and Y (and size for bubble). In standard mode,\n        // the first column is used for X and every other column is treated as Y\n        // (or alternates between Y and size for bubble)\n        const seriesType = getSeriesType(this.chartProxyParams.chartType);\n        this.chart.updateDelta({ theme: { overrides: { [seriesType]: { paired } } } });\n    }\n\n    public isPaired(): boolean {\n        const seriesType = getSeriesType(this.chartProxyParams.chartType);\n        return get(this.getChartThemeOverrides(), `${seriesType}.paired`, true);\n    }\n\n    public lookupCustomChartTheme(themeName: string) {\n        return lookupCustomChartTheme(this.chartProxyParams, themeName);\n    }\n\n    public getSeriesGroupType(): SeriesGroupType | undefined {\n        return undefined;\n    }\n\n    protected transformCategoryData(data: any[], categoryKey: string): any[] {\n        // replace the values for the selected category with a complex object to allow for duplicated categories\n        return data.map((d, index) => {\n            const value = d[categoryKey];\n            const valueString = value && value.toString ? value.toString() : '';\n            const datum = { ...d };\n\n            datum[categoryKey] = { id: index, value, toString: () => valueString };\n\n            return datum;\n        });\n    }\n\n    private getCommonChartOptions(updatedOverrides?: AgChartThemeOverrides): TOptions & { mode: 'integrated' } {\n        // Only apply active overrides if chart is initialised.\n        const existingOptions = (this.clearThemeOverrides ? {} : this.chart?.getOptions() ?? {}) as TOptions;\n        const formattingPanelOverrides = this.chart != null ? this.getActiveFormattingPanelOverrides() : undefined;\n        this.clearThemeOverrides = false;\n\n        const theme = createAgChartTheme(\n            this.chartProxyParams,\n            this,\n            this.isEnterpriseCharts,\n            this.getChartThemeDefaults(),\n            updatedOverrides ?? formattingPanelOverrides\n        );\n\n        const newOptions = {\n            ...existingOptions,\n            mode: 'integrated',\n        } as const;\n        newOptions.theme = theme;\n        newOptions.container = this.chartProxyParams.parentElement;\n        return newOptions;\n    }\n\n    private getChartThemeDefaults(): AgChartThemeOverrides | undefined {\n        const seriesOverrides = this.getSeriesChartThemeDefaults();\n        const seriesChartOptions = seriesOverrides\n            ? {\n                  [this.standaloneChartType]: seriesOverrides,\n              }\n            : {};\n        const crosshair: AgCrosshairOptions = {\n            enabled: true,\n            snap: true,\n            label: {\n                enabled: false,\n            },\n        };\n        const common: AgCommonThemeableChartOptions = this.isEnterpriseCharts\n            ? {\n                  zoom: {\n                      enabled: true,\n                  },\n                  animation: {\n                      enabled: true,\n                      duration: 500,\n                  },\n                  axes: {\n                      number: { crosshair },\n                      category: { crosshair },\n                      log: { crosshair },\n                      time: { crosshair },\n                  },\n              }\n            : {};\n        common.minHeight = 0;\n        common.minWidth = 0;\n        common.navigator = {\n            enabled: false,\n        };\n        return {\n            common,\n            ...seriesChartOptions,\n        };\n    }\n\n    protected getSeriesChartThemeDefaults(): AgChartThemeOverrides[TSeries] {\n        return undefined;\n    }\n\n    private getActiveFormattingPanelOverrides(): AgChartThemeOverrides {\n        if (this.clearThemeOverrides) {\n            return {};\n        }\n\n        const inUseTheme = this.chart?.getOptions().theme as AgChartTheme;\n        return inUseTheme?.overrides ?? {};\n    }\n\n    public destroy({ keepChartInstance = false } = {}): AgChartInstance | undefined {\n        if (keepChartInstance) {\n            // Reset Charts animation state, so that future updates to this re-used chart instance\n            // behave as-if the chart is brand new. When switching chartTypes, this means we hide\n            // the fact we are reusing the chart instance; the user sees a new chart which behaves\n            // as-if it is a completely new and distinct chart instance.\n            this.chart.resetAnimations();\n            return this.chart;\n        }\n\n        this.destroyChart();\n    }\n\n    protected destroyChart(): void {\n        if (this.chart) {\n            this.chart.destroy();\n            (this.chart as any) = undefined;\n        }\n    }\n}\n", "import type { AgCartesianAxisType, AgChartInstance, AgPolarAxisOptions, _Scene } from 'ag-charts-community';\n\nexport function deproxy(chartOrProxy: AgChartInstance): AgChartActual {\n    if ((chartOrProxy as any).chart != null) {\n        return (chartOrProxy as any).chart;\n    }\n    return chartOrProxy as AgChartActual;\n}\n\n// Extensions to the public ag-charts-community API that Integrated Charts currently depends on for\n// correct operation. Over time we aim to eliminate these and only use the public API.\n//\n// AVOID ADDING MORE DEPENDENCIES ON THESE PRIVATE APIS.\n\nexport interface AgChartActual extends AgChartInstance {\n    title?: _Scene.Caption;\n    width: number;\n    height: number;\n    series: {\n        type: string;\n        toggleSeriesItem(itemId: string, enabled: boolean): void;\n        properties: {\n            [key: string]: any;\n            toJson(): any;\n        };\n    }[];\n    axes?: {\n        type: AgCartesianAxisType | AgPolarAxisOptions['type'];\n        direction: 'x' | 'y';\n    }[];\n    canvasElement: HTMLCanvasElement;\n    getCanvasDataURL(type?: string): string;\n    addEventListener(type: 'click', cb: (even: any) => void): void;\n    waitForUpdate(): Promise<void>;\n}\n\nexport type AgChartAxis = NonNullable<AgChartActual['axes']>[number];\nexport type AgChartAxisType = AgChartAxis['type'];\n", "import type {\n    AgAreaSeriesOptions,\n    AgCartesianAxisOptions,\n    AgCartesianAxisType,\n    AgCartesianChartOptions,\n    AgCartesianSeriesOptions,\n    AgChartTheme,\n    AgChartThemeName,\n    AgLineSeriesOptions,\n    AgRangeBarSeriesThemeableOptions,\n} from 'ag-charts-community';\n\nimport type { ChartProxyParams, UpdateParams } from '../chartProxy';\nimport { ChartProxy } from '../chartProxy';\n\nexport abstract class CartesianChartProxy<\n    TSeries extends\n        | 'area'\n        | 'bar'\n        | 'histogram'\n        | 'line'\n        | 'scatter'\n        | 'bubble'\n        | 'waterfall'\n        | 'box-plot'\n        | 'range-area'\n        | 'range-bar',\n> extends ChartProxy<AgCartesianChartOptions, TSeries> {\n    protected crossFilteringAllPoints = new Set<string>();\n    protected crossFilteringSelectedPoints: string[] = [];\n\n    protected constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected abstract getAxes(\n        params: UpdateParams,\n        commonChartOptions: AgCartesianChartOptions\n    ): AgCartesianAxisOptions[];\n    protected abstract getSeries(params: UpdateParams): AgCartesianSeriesOptions[];\n\n    protected getUpdateOptions(\n        params: UpdateParams,\n        commonChartOptions: AgCartesianChartOptions\n    ): AgCartesianChartOptions {\n        const axes = this.getAxes(params, commonChartOptions);\n\n        return {\n            ...commonChartOptions,\n            data: this.getData(params, axes),\n            axes,\n            series: this.getSeries(params),\n        };\n    }\n\n    protected getData(params: UpdateParams, axes: AgCartesianAxisOptions[]): any[] {\n        const supportsCrossFiltering = ['area', 'line'].includes(this.standaloneChartType);\n        return this.crossFiltering && supportsCrossFiltering\n            ? this.getCrossFilterData(params)\n            : this.getDataTransformedData(params, axes);\n    }\n\n    private getDataTransformedData(params: UpdateParams, axes: AgCartesianAxisOptions[]) {\n        // assumed that the first axis is always the \"category\" axis\n        const xAxisType = axes[0].type;\n        const { categories, data } = params;\n        const [category] = categories;\n        switch (xAxisType) {\n            case 'category':\n                return this.transformCategoryData(data, category.id);\n            case 'time':\n                return this.transformTimeData(data, category.id);\n            default:\n                return data;\n        }\n    }\n\n    protected getXAxisType(params: UpdateParams) {\n        if (params.grouping) {\n            return 'grouped-category';\n        } else if (this.isXAxisOfType(params, 'time', (value) => value instanceof Date)) {\n            return 'time';\n        } else if (this.isXAxisOfType(params, 'number')) {\n            return 'number';\n        }\n        return 'category';\n    }\n\n    private isXAxisOfType<T>(\n        params: UpdateParams,\n        type: AgCartesianAxisType,\n        isInstance?: (value: T) => boolean\n    ): boolean {\n        const [category] = params.categories;\n        if (category?.chartDataType) {\n            return category.chartDataType === type;\n        }\n        if (!isInstance) {\n            return false;\n        }\n        const testDatum = params.data[0];\n        if (!testDatum) {\n            return false;\n        }\n        return isInstance(testDatum[category.id]);\n    }\n\n    private transformTimeData(data: any[], categoryKey: string): any[] {\n        const firstValue = data[0]?.[categoryKey];\n        if (firstValue instanceof Date) {\n            return data;\n        }\n\n        return data.map((datum) => {\n            const value = datum[categoryKey];\n            return typeof value === 'string'\n                ? {\n                      ...datum,\n                      [categoryKey]: new Date(value),\n                  }\n                : datum;\n        });\n    }\n\n    public override crossFilteringReset(): void {\n        this.crossFilteringSelectedPoints = [];\n        this.crossFilteringAllPoints.clear();\n    }\n\n    protected crossFilteringPointSelected(point: string): boolean {\n        return this.crossFilteringSelectedPoints.length == 0 || this.crossFilteringSelectedPoints.includes(point);\n    }\n\n    protected crossFilteringDeselectedPoints(): boolean {\n        return (\n            this.crossFilteringSelectedPoints.length > 0 &&\n            this.crossFilteringAllPoints.size !== this.crossFilteringSelectedPoints.length\n        );\n    }\n\n    protected extractLineAreaCrossFilterSeries(\n        series: (AgLineSeriesOptions | AgAreaSeriesOptions)[],\n        params: UpdateParams\n    ) {\n        const [category] = params.categories;\n\n        const getYKey = (yKey: string) => {\n            if (this.standaloneChartType === 'area') {\n                const lastSelectedChartId = params.getCrossFilteringContext().lastSelectedChartId;\n                return lastSelectedChartId === params.chartId ? yKey + '-total' : yKey;\n            }\n            return yKey + '-total';\n        };\n\n        return series.map((s) => {\n            s.yKey = getYKey(s.yKey!);\n            s.listeners = {\n                nodeClick: (e: any) => {\n                    const value = e.datum![s.xKey!];\n                    const multiSelection = e.event.metaKey || e.event.ctrlKey;\n                    this.crossFilteringAddSelectedPoint(multiSelection, value);\n                    this.crossFilterCallback(e);\n                },\n            };\n            s.marker = {\n                itemStyler: (p) => {\n                    const value = p.datum[category.id];\n                    return {\n                        fill: p.highlighted ? 'yellow' : p.fill,\n                        size: p.highlighted ? 14 : this.crossFilteringPointSelected(value) ? 8 : 0,\n                    };\n                },\n            };\n            if (this.standaloneChartType === 'area') {\n                (s as AgAreaSeriesOptions).fillOpacity = this.crossFilteringDeselectedPoints() ? 0.3 : 1;\n            }\n            if (this.standaloneChartType === 'line') {\n                (s as AgLineSeriesOptions).strokeOpacity = this.crossFilteringDeselectedPoints() ? 0.3 : 1;\n            }\n\n            return s;\n        });\n    }\n\n    private getCrossFilterData(params: UpdateParams): any[] {\n        this.crossFilteringAllPoints.clear();\n        const [category] = params.categories;\n        const colId = params.fields[0].colId;\n        const filteredOutColId = `${colId}-filtered-out`;\n        const lastSelectedChartId = params.getCrossFilteringContext().lastSelectedChartId;\n\n        return params.data.map((d) => {\n            const value = d[category.id];\n            this.crossFilteringAllPoints.add(value);\n\n            const pointSelected = this.crossFilteringPointSelected(value);\n            if (this.standaloneChartType === 'area' && lastSelectedChartId === params.chartId) {\n                d[`${colId}-total`] = pointSelected ? d[colId] : d[colId] + d[filteredOutColId];\n            }\n            if (this.standaloneChartType === 'line') {\n                d[`${colId}-total`] = pointSelected ? d[colId] : d[colId] + d[filteredOutColId];\n            }\n\n            return d;\n        });\n    }\n\n    private crossFilteringAddSelectedPoint(multiSelection: boolean, value: string): void {\n        multiSelection ? this.crossFilteringSelectedPoints.push(value) : (this.crossFilteringSelectedPoints = [value]);\n    }\n\n    protected isHorizontal(commonChartOptions: AgCartesianChartOptions): boolean {\n        const seriesType = this.standaloneChartType;\n        if (seriesType !== 'waterfall' && seriesType !== 'box-plot' && seriesType !== 'range-bar') {\n            return false;\n        }\n        const theme = commonChartOptions.theme;\n        const isHorizontal = (theme?: AgChartTheme | AgChartThemeName): boolean => {\n            const direction = (\n                (theme as AgChartTheme)?.overrides?.[seriesType]?.series as AgRangeBarSeriesThemeableOptions\n            )?.direction;\n            if (direction != null) {\n                return direction === 'horizontal';\n            }\n            if (typeof (theme as AgChartTheme)?.baseTheme === 'object') {\n                return isHorizontal((theme as AgChartTheme).baseTheme as any);\n            }\n            return false;\n        };\n        return isHorizontal(theme);\n    }\n}\n", "import type { AgAreaSeriesOptions, AgCartesianAxisOptions } from 'ag-charts-community';\n\nimport type { ChartProxyParams, UpdateParams } from '../chartProxy';\nimport { CartesianChartProxy } from './cartesianChartProxy';\n\nexport class AreaChartProxy extends CartesianChartProxy<'area'> {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getAxes(params: UpdateParams): AgCartesianAxisOptions[] {\n        const axes: AgCartesianAxisOptions[] = [\n            {\n                type: this.getXAxisType(params),\n                position: 'bottom',\n            },\n            {\n                type: 'number',\n                position: 'left',\n            },\n        ];\n\n        // Add a default label formatter to show '%' for normalized charts if none is provided\n        if (this.isNormalised()) {\n            const numberAxis = axes[1];\n            numberAxis.label = { ...numberAxis.label, formatter: (params) => Math.round(params.value) + '%' };\n        }\n\n        return axes;\n    }\n\n    protected override getSeries(params: UpdateParams) {\n        const [category] = params.categories;\n        const series: AgAreaSeriesOptions[] = params.fields.map(\n            (f) =>\n                ({\n                    type: this.standaloneChartType,\n                    xKey: category.id,\n                    xName: category.name,\n                    yKey: f.colId,\n                    yName: f.displayName,\n                    normalizedTo: this.chartType === 'normalizedArea' ? 100 : undefined,\n                    stacked: ['normalizedArea', 'stackedArea'].includes(this.chartType),\n                }) as AgAreaSeriesOptions\n        );\n\n        return this.crossFiltering ? this.extractLineAreaCrossFilterSeries(series, params) : series;\n    }\n\n    private isNormalised() {\n        return !this.crossFiltering && this.chartType === 'normalizedArea';\n    }\n}\n", "import { _includes } from '@ag-grid-community/core';\nimport type { AgBarSeriesOptions, AgCartesianAxisOptions } from 'ag-charts-community';\n\nimport { hexToRGBA } from '../../utils/color';\nimport { deepMerge } from '../../utils/object';\nimport { isStacked } from '../../utils/seriesTypeMapper';\nimport type { ChartProxyParams, UpdateParams } from '../chartProxy';\nimport { CartesianChartProxy } from './cartesianChartProxy';\n\nconst HORIZONTAL_CHART_TYPES = new Set(['bar', 'groupedBar', 'stackedBar', 'normalizedBar']);\n\nexport class BarChartProxy extends CartesianChartProxy<'bar'> {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getAxes(params: UpdateParams): AgCartesianAxisOptions[] {\n        const axes: AgCartesianAxisOptions[] = [\n            {\n                type: this.getXAxisType(params),\n                position: this.isHorizontal() ? 'left' : 'bottom',\n            },\n            {\n                type: 'number',\n                position: this.isHorizontal() ? 'bottom' : 'left',\n            },\n        ];\n        // Add a default label formatter to show '%' for normalized charts if none is provided\n        if (this.isNormalised()) {\n            const numberAxis = axes[1];\n            numberAxis.label = { ...numberAxis.label, formatter: (params) => Math.round(params.value) + '%' };\n        }\n\n        return axes;\n    }\n\n    protected override getSeries(params: UpdateParams): AgBarSeriesOptions[] {\n        const [category] = params.categories;\n        const series: AgBarSeriesOptions[] = params.fields.map(\n            (f) =>\n                ({\n                    type: this.standaloneChartType,\n                    direction: this.isHorizontal() ? 'horizontal' : 'vertical',\n                    stacked: this.crossFiltering || isStacked(this.chartType),\n                    normalizedTo: this.isNormalised() ? 100 : undefined,\n                    xKey: category.id,\n                    xName: category.name,\n                    yKey: f.colId,\n                    yName: f.displayName,\n                }) as AgBarSeriesOptions\n        );\n\n        return this.crossFiltering ? this.extractCrossFilterSeries(series) : series;\n    }\n\n    private extractCrossFilterSeries(series: AgBarSeriesOptions[]): AgBarSeriesOptions[] {\n        const palette = this.getChartPalette();\n\n        const updatePrimarySeries = (seriesOptions: AgBarSeriesOptions, index: number) => {\n            return {\n                ...seriesOptions,\n                highlightStyle: { item: { fill: undefined } },\n                fill: palette?.fills?.[index],\n                stroke: palette?.strokes?.[index],\n                listeners: {\n                    nodeClick: this.crossFilterCallback,\n                },\n            };\n        };\n\n        const updateFilteredOutSeries = (seriesOptions: AgBarSeriesOptions): AgBarSeriesOptions => {\n            const yKey = seriesOptions.yKey + '-filtered-out';\n            return {\n                ...deepMerge({}, seriesOptions),\n                yKey,\n                fill: hexToRGBA(seriesOptions.fill!, '0.3'),\n                stroke: hexToRGBA(seriesOptions.stroke!, '0.3'),\n                showInLegend: false,\n            };\n        };\n\n        const allSeries: AgBarSeriesOptions[] = [];\n        for (let i = 0; i < series.length; i++) {\n            // update primary series\n            const primarySeries = updatePrimarySeries(series[i], i);\n            allSeries.push(primarySeries);\n\n            // add 'filtered-out' series\n            allSeries.push(updateFilteredOutSeries(primarySeries));\n        }\n        return allSeries;\n    }\n\n    private isNormalised() {\n        const normalisedCharts = ['normalizedColumn', 'normalizedBar'];\n        return !this.crossFiltering && _includes(normalisedCharts, this.chartType);\n    }\n\n    protected override isHorizontal(): boolean {\n        return HORIZONTAL_CHART_TYPES.has(this.chartType);\n    }\n}\n", "import { _Util } from 'ag-charts-community';\n\nexport function hexToRGBA(hex: string, alpha: string) {\n    const r = parseInt(hex.slice(1, 3), 16);\n    const g = parseInt(hex.slice(3, 5), 16);\n    const b = parseInt(hex.slice(5, 7), 16);\n    return alpha ? `rgba(${r}, ${g}, ${b}, ${alpha})` : `rgba(${r}, ${g}, ${b})`;\n}\n\nexport function changeOpacity(fills: string[], alpha: number) {\n    return fills.map((fill) => {\n        const c = _Util.Color.fromString(fill);\n        return new _Util.Color(c.r, c.g, c.b, alpha).toHexString();\n    });\n}\n", "import type { AgCartesianAxisOptions, AgHistogramSeriesOptions } from 'ag-charts-community';\n\nimport type { ChartProxyParams, UpdateParams } from '../chartProxy';\nimport { CartesianChartProxy } from './cartesianChartProxy';\n\nexport class HistogramChartProxy extends CartesianChartProxy<'histogram'> {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getSeries(params: UpdateParams): AgHistogramSeriesOptions[] {\n        const firstField = params.fields[0]; // multiple series are not supported!\n        return [\n            {\n                type: this.standaloneChartType,\n                xKey: firstField.colId,\n                xName: firstField.displayName,\n                yName: this.chartProxyParams.translate('histogramFrequency'),\n                areaPlot: false, // only constant width is supported via integrated charts\n            } as AgHistogramSeriesOptions,\n        ];\n    }\n\n    protected override getAxes(_params: UpdateParams): AgCartesianAxisOptions[] {\n        return [\n            {\n                type: 'number',\n                position: 'bottom',\n            },\n            {\n                type: 'number',\n                position: 'left',\n            },\n        ];\n    }\n}\n", "import type { AgCartesianAxisOptions, AgLineSeriesOptions } from 'ag-charts-community';\n\nimport type { ChartProxyParams, UpdateParams } from '../chartProxy';\nimport { CartesianChartProxy } from './cartesianChartProxy';\n\nexport class LineChartProxy extends CartesianChartProxy<'line'> {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getAxes(params: UpdateParams): AgCartesianAxisOptions[] {\n        return [\n            {\n                type: this.getXAxisType(params),\n                position: 'bottom',\n            },\n            {\n                type: 'number',\n                position: 'left',\n            },\n        ];\n    }\n\n    protected override getSeries(params: UpdateParams) {\n        const [category] = params.categories;\n        const series: AgLineSeriesOptions[] = params.fields.map(\n            (f) =>\n                ({\n                    type: this.standaloneChartType,\n                    xKey: category.id,\n                    xName: category.name,\n                    yKey: f.colId,\n                    yName: f.displayName,\n                }) as AgLineSeriesOptions\n        );\n\n        return this.crossFiltering ? this.extractLineAreaCrossFilterSeries(series, params) : series;\n    }\n}\n", "import type { AgBubbleSeriesOptions, AgCartesianAxisOptions, AgScatterSeriesOptions } from 'ag-charts-community';\n\nimport { ChartDataModel } from '../../model/chartDataModel';\nimport type { ChartProxyParams, FieldDefinition, UpdateParams } from '../chartProxy';\nimport { CartesianChartProxy } from './cartesianChartProxy';\n\ninterface SeriesDefinition {\n    xField: FieldDefinition;\n    yField: FieldDefinition;\n    sizeField?: FieldDefinition;\n}\n\nexport class ScatterChartProxy extends CartesianChartProxy<'scatter' | 'bubble'> {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getAxes(_params: UpdateParams): AgCartesianAxisOptions[] {\n        return [\n            {\n                type: 'number',\n                position: 'bottom',\n            },\n            {\n                type: 'number',\n                position: 'left',\n            },\n        ];\n    }\n\n    protected override getSeries(params: UpdateParams): (AgScatterSeriesOptions | AgBubbleSeriesOptions)[] {\n        const [category] = params.categories;\n        const paired = this.isPaired();\n        const seriesDefinitions = this.getSeriesDefinitions(params.fields, paired);\n        const labelFieldDefinition = category.id === ChartDataModel.DEFAULT_CATEGORY ? undefined : category;\n\n        const series = seriesDefinitions.map((seriesDefinition) => {\n            if (seriesDefinition?.sizeField) {\n                const opts: AgBubbleSeriesOptions = {\n                    type: 'bubble',\n                    xKey: seriesDefinition!.xField.colId,\n                    xName: seriesDefinition!.xField.displayName ?? undefined,\n                    yKey: seriesDefinition!.yField.colId,\n                    yName: seriesDefinition!.yField.displayName ?? undefined,\n                    title: `${seriesDefinition!.yField.displayName} vs ${seriesDefinition!.xField.displayName}`,\n                    sizeKey: seriesDefinition!.sizeField.colId,\n                    sizeName: seriesDefinition!.sizeField.displayName ?? '',\n                    labelKey: labelFieldDefinition ? labelFieldDefinition.id : seriesDefinition!.yField.colId,\n                    labelName: labelFieldDefinition ? labelFieldDefinition.name : undefined,\n                };\n                return opts;\n            }\n\n            const opts: AgScatterSeriesOptions = {\n                type: 'scatter',\n                xKey: seriesDefinition!.xField.colId,\n                xName: seriesDefinition!.xField.displayName ?? undefined,\n                yKey: seriesDefinition!.yField.colId,\n                yName: seriesDefinition!.yField.displayName ?? undefined,\n                title: `${seriesDefinition!.yField.displayName} vs ${seriesDefinition!.xField.displayName}`,\n                labelKey: labelFieldDefinition ? labelFieldDefinition.id : seriesDefinition!.yField.colId,\n                labelName: labelFieldDefinition ? labelFieldDefinition.name : undefined,\n            };\n            return opts;\n        });\n\n        return this.crossFiltering ? this.extractCrossFilterSeries(series, params) : series;\n    }\n\n    private extractCrossFilterSeries(\n        series: (AgScatterSeriesOptions | AgBubbleSeriesOptions)[],\n        params: UpdateParams\n    ): (AgScatterSeriesOptions | AgBubbleSeriesOptions)[] {\n        const { data } = params;\n        const palette = this.getChartPalette();\n\n        const filteredOutKey = (key: string) => `${key}-filtered-out`;\n\n        const calcMarkerDomain = (data: any, sizeKey?: string) => {\n            const markerDomain: [number, number] = [Infinity, -Infinity];\n            if (sizeKey != null) {\n                for (const datum of data) {\n                    const value = datum[sizeKey] ?? datum[filteredOutKey(sizeKey)];\n                    if (value < markerDomain[0]) {\n                        markerDomain[0] = value;\n                    }\n                    if (value > markerDomain[1]) {\n                        markerDomain[1] = value;\n                    }\n                }\n            }\n            if (markerDomain[0] <= markerDomain[1]) {\n                return markerDomain;\n            }\n            return undefined;\n        };\n\n        const updatePrimarySeries = <T extends AgScatterSeriesOptions | AgBubbleSeriesOptions>(\n            series: T,\n            idx: number\n        ): T => {\n            const fill = palette?.fills?.[idx];\n            const stroke = palette?.strokes?.[idx];\n\n            let markerDomain: [number, number] | undefined = undefined;\n            if (series.type === 'bubble') {\n                const { sizeKey } = series;\n                markerDomain = calcMarkerDomain(data, sizeKey);\n            }\n\n            return {\n                ...series,\n                fill,\n                stroke,\n                domain: markerDomain,\n                highlightStyle: { item: { fill: 'yellow' } },\n                listeners: {\n                    ...series.listeners,\n                    nodeClick: this.crossFilterCallback,\n                },\n            };\n        };\n\n        const updateFilteredOutSeries = <T extends AgScatterSeriesOptions | AgBubbleSeriesOptions>(series: T): T => {\n            const { yKey, xKey } = series;\n\n            let alteredSizeKey = {};\n            if (series.type === 'bubble') {\n                alteredSizeKey = { sizeKey: filteredOutKey(series.sizeKey!) };\n            }\n\n            return {\n                ...series,\n                ...alteredSizeKey,\n                yKey: filteredOutKey(yKey!),\n                xKey: filteredOutKey(xKey!),\n                fillOpacity: 0.3,\n                strokeOpacity: 0.3,\n                showInLegend: false,\n                listeners: {\n                    ...series.listeners,\n                    nodeClick: (e: any) => {\n                        const value = e.datum[filteredOutKey(xKey!)];\n\n                        // Need to remove the `-filtered-out` suffixes from the event so that\n                        // upstream processing maps the event correctly onto grid column ids.\n                        const filterableEvent = {\n                            ...e,\n                            xKey,\n                            datum: { ...e.datum, [xKey!]: value },\n                        };\n                        this.crossFilterCallback(filterableEvent);\n                    },\n                },\n            };\n        };\n\n        const updatedSeries = series.map(updatePrimarySeries);\n        return [...updatedSeries, ...updatedSeries.map(updateFilteredOutSeries)];\n    }\n\n    private getSeriesDefinitions(fields: FieldDefinition[], paired: boolean): (SeriesDefinition | null)[] {\n        if (fields.length < 2) {\n            return [];\n        }\n\n        const isBubbleChart = this.chartType === 'bubble';\n\n        if (paired) {\n            if (isBubbleChart) {\n                return fields\n                    .map((currentXField, i) =>\n                        i % 3 === 0\n                            ? {\n                                  xField: currentXField,\n                                  yField: fields[i + 1],\n                                  sizeField: fields[i + 2],\n                              }\n                            : null\n                    )\n                    .filter((x) => x && x.yField && x.sizeField);\n            }\n            return fields\n                .map((currentXField, i) =>\n                    i % 2 === 0\n                        ? {\n                              xField: currentXField,\n                              yField: fields[i + 1],\n                          }\n                        : null\n                )\n                .filter((x) => x && x.yField);\n        }\n\n        const xField = fields[0];\n\n        if (isBubbleChart) {\n            return fields\n                .map((yField, i) =>\n                    i % 2 === 1\n                        ? {\n                              xField,\n                              yField,\n                              sizeField: fields[i + 1],\n                          }\n                        : null\n                )\n                .filter((x) => x && x.sizeField);\n        }\n\n        return fields.filter((value, i) => i > 0).map((yField) => ({ xField, yField }));\n    }\n}\n", "import type { AgCartesianAxisOptions, AgCartesianChartOptions, AgWaterfallSeriesOptions } from 'ag-charts-community';\n\nimport type { ChartProxyParams, UpdateParams } from '../chartProxy';\nimport { CartesianChartProxy } from './cartesianChartProxy';\n\nexport class WaterfallChartProxy extends CartesianChartProxy<'waterfall'> {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getAxes(\n        params: UpdateParams,\n        commonChartOptions: AgCartesianChartOptions\n    ): AgCartesianAxisOptions[] {\n        return [\n            {\n                type: this.getXAxisType(params),\n                position: this.isHorizontal(commonChartOptions) ? 'left' : 'bottom',\n            },\n            {\n                type: 'number',\n                position: this.isHorizontal(commonChartOptions) ? 'bottom' : 'left',\n            },\n        ];\n    }\n\n    protected override getSeries(params: UpdateParams): AgWaterfallSeriesOptions[] {\n        const [category] = params.categories;\n        const [firstField] = params.fields;\n        const firstSeries: AgWaterfallSeriesOptions = {\n            type: this.standaloneChartType as 'waterfall',\n            xKey: category.id,\n            xName: category.name,\n            yKey: firstField.colId,\n            yName: firstField.displayName ?? undefined,\n        };\n\n        return [firstSeries]; // waterfall only supports a single series!\n    }\n}\n", "import type { ChartType, SeriesChartType } from '@ag-grid-community/core';\nimport type { AgCartesianAxisOptions } from 'ag-charts-community';\n\nimport { getSeriesType } from '../../utils/seriesTypeMapper';\nimport { CartesianChartProxy } from '../cartesian/cartesianChartProxy';\nimport type { ChartProxyParams, FieldDefinition, UpdateParams } from '../chartProxy';\n\nexport class ComboChartProxy extends CartesianChartProxy<'line' | 'bar' | 'area'> {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    public getAxes(params: UpdateParams): AgCartesianAxisOptions[] {\n        const fields = params ? params.fields : [];\n        const fieldsMap = new Map(fields.map((f) => [f.colId, f]));\n\n        const { primaryYKeys, secondaryYKeys } = this.getYKeys(fields, params.seriesChartTypes);\n\n        const axes: AgCartesianAxisOptions[] = [\n            {\n                type: this.getXAxisType(params),\n                position: 'bottom',\n            },\n        ];\n\n        if (primaryYKeys.length > 0) {\n            axes.push({\n                type: 'number',\n                keys: primaryYKeys,\n                position: 'left',\n            });\n        }\n\n        if (secondaryYKeys.length > 0) {\n            secondaryYKeys.forEach((secondaryYKey: string) => {\n                const field = fieldsMap.get(secondaryYKey);\n                const secondaryAxisIsVisible = field && field.colId === secondaryYKey;\n                if (!secondaryAxisIsVisible) {\n                    return;\n                }\n\n                const secondaryAxisOptions: AgCartesianAxisOptions = {\n                    type: 'number',\n                    keys: [secondaryYKey],\n                    position: 'right',\n                };\n\n                axes.push(secondaryAxisOptions);\n            });\n        }\n\n        return axes;\n    }\n\n    public getSeries(params: UpdateParams): any {\n        const { fields, seriesChartTypes } = params;\n        const [category] = params.categories;\n\n        return fields.map((field) => {\n            const seriesChartType = seriesChartTypes.find((s) => s.colId === field.colId);\n            if (seriesChartType) {\n                const chartType: ChartType = seriesChartType.chartType;\n                const grouped = ['groupedColumn', 'groupedBar'].includes(chartType);\n                const groupedOpts = grouped ? { grouped: true } : {};\n                return {\n                    type: getSeriesType(chartType),\n                    xKey: category.id,\n                    yKey: field.colId,\n                    yName: field.displayName,\n                    stacked: ['stackedArea', 'stackedColumn'].includes(chartType),\n                    ...groupedOpts,\n                };\n            }\n        });\n    }\n\n    private getYKeys(fields: FieldDefinition[], seriesChartTypes: SeriesChartType[]) {\n        const primaryYKeys: string[] = [];\n        const secondaryYKeys: string[] = [];\n\n        fields.forEach((field) => {\n            const colId = field.colId;\n            const seriesChartType = seriesChartTypes.find((s) => s.colId === colId);\n            if (seriesChartType) {\n                seriesChartType.secondaryAxis ? secondaryYKeys.push(colId) : primaryYKeys.push(colId);\n            }\n        });\n\n        return { primaryYKeys, secondaryYKeys };\n    }\n}\n", "import { GROUP_AUTO_COLUMN_ID } from '@ag-grid-community/core';\nimport type { AgChartThemeOverrides, AgHierarchyChartOptions, AgHierarchySeriesOptions } from 'ag-charts-community';\n\nimport type { ChartProxyParams, FieldDefinition, UpdateParams } from '../chartProxy';\nimport { ChartProxy } from '../chartProxy';\nimport { CATEGORY_LABEL_KEY, createAutoGroupHierarchy, createCategoryHierarchy } from './hierarchicalChartUtils';\n\nexport class HierarchicalChartProxy<TSeries extends 'sunburst' | 'treemap'> extends ChartProxy<\n    AgHierarchyChartOptions,\n    TSeries\n> {\n    constructor(chartProxyParams: ChartProxyParams) {\n        super(chartProxyParams);\n    }\n\n    protected override getUpdateOptions(\n        params: UpdateParams,\n        commonChartOptions: AgHierarchyChartOptions\n    ): AgHierarchyChartOptions {\n        const { fields } = params;\n        // Hierarchical charts support up to two input series, corresponding to size and color respectively\n        const [sizeField, colorField] = fields as [FieldDefinition | undefined, FieldDefinition | undefined];\n        return {\n            ...commonChartOptions,\n            series: this.getSeries(sizeField, colorField),\n            data: this.getData(params, sizeField, colorField),\n        };\n    }\n\n    protected override getSeriesChartThemeDefaults(): AgChartThemeOverrides['treemap' | 'sunburst'] {\n        return {\n            gradientLegend: {\n                gradient: {\n                    preferredLength: 200,\n                },\n            },\n        };\n    }\n\n    private getSeries(sizeField?: FieldDefinition, colorField?: FieldDefinition): AgHierarchySeriesOptions[] {\n        return [\n            {\n                type: this.standaloneChartType as AgHierarchySeriesOptions['type'],\n                labelKey: CATEGORY_LABEL_KEY,\n                // Size and color fields are inferred from the range data\n                sizeKey: sizeField?.colId,\n                sizeName: sizeField?.displayName ?? undefined,\n                colorKey: colorField?.colId,\n                colorName: colorField?.displayName ?? undefined,\n            },\n        ];\n    }\n\n    private getData(params: UpdateParams, sizeField?: FieldDefinition, colorField?: FieldDefinition): any[] {\n        const { categories, data, groupData, grouping: isGrouped } = params;\n        if (isGrouped) {\n            const processedData = colorField\n                ? data.concat(\n                      groupData?.map((groupDatum) => {\n                          const newDatum = { ...groupDatum };\n                          delete newDatum[sizeField!.colId];\n                          return newDatum;\n                      }) ?? []\n                  )\n                : data;\n            return createAutoGroupHierarchy(processedData, (item) => item[GROUP_AUTO_COLUMN_ID]?.labels ?? null);\n        } else {\n            const categoryKeys = categories.map(({ id }) => id);\n            return createCategoryHierarchy(data, categoryKeys);\n        }\n    }\n}\n", "export type CATEGORY_LABEL_KEY = 'AG-GRID-DEFAULT-LABEL-KEY';\nexport const CATEGORY_LABEL_KEY: CATEGORY_LABEL_KEY = 'AG-GRID-DEFAULT-LABEL-KEY';\n\nexport type CategoryItem<T extends object> = {\n    [CATEGORY_LABEL_KEY]: string | null;\n    children?: Array<CategoryItem<T>>;\n} & T;\n\nexport function createCategoryHierarchy<T extends object>(data: T[], categoryKeys: Array<keyof T>): CategoryItem<T>[] {\n    const hierarchy = buildNestedHierarchy(data, getItemDepth, getItemCategoryLabel);\n    return formatCategoryHierarchy(hierarchy);\n\n    function getItemDepth(item: T) {\n        return categoryKeys.length;\n    }\n\n    function getItemCategoryLabel(item: T, categoryIndex: number): string | null {\n        const categoryKey = categoryKeys[categoryIndex];\n        const categoryValue = item[categoryKey];\n        return getCategoryLabel(categoryValue);\n    }\n\n    function getCategoryLabel(value: unknown): string | null {\n        if (value == null) return null;\n        return String(value);\n    }\n}\n\nexport function createAutoGroupHierarchy<T extends object>(\n    data: T[],\n    getItemLabels: (item: T) => string[] | null\n): CategoryItem<T>[] {\n    const hierarchy = buildNestedHierarchy(data, getItemDepth, getItemGroupLabel);\n    return formatCategoryHierarchy(hierarchy);\n\n    function getItemDepth(item: T) {\n        return getItemLabels(item)?.length ?? 0;\n    }\n\n    function getItemGroupLabel(item: T, groupIndex: number): string | null {\n        const labels = getItemLabels(item);\n        if (!labels) return null;\n        // Autogroup label values are ordered from the leaf outwards\n        const labelIndex = labels.length - 1 - groupIndex;\n        return labels[labelIndex];\n    }\n}\n\n/* Utility functions for building and formatting nested category hierarchies */\n\n/** Convert an abstract nested hierarchy structure into an ag-charts-compatible 'category-grouped' data structure */\nfunction formatCategoryHierarchy<T extends object>(\n    hierarchy: Tree<T>,\n    key: string | null = null,\n    isChild?: boolean\n): CategoryItem<T>[] {\n    const { depth, rootValues, value, children: inputChildren } = hierarchy;\n    if (rootValues) {\n        return rootValues.map((item) => ({ [CATEGORY_LABEL_KEY]: key, ...item }));\n    } else if (depth === 0) {\n        return [{ [CATEGORY_LABEL_KEY]: key, ...value! }];\n    }\n\n    const children: CategoryItem<T>[] = [];\n    for (const [childKey, childHierarchy] of inputChildren.entries()) {\n        children.push(...formatCategoryHierarchy(childHierarchy, childKey, true));\n    }\n\n    return isChild\n        ? [\n              {\n                  [CATEGORY_LABEL_KEY]: key,\n                  children,\n                  ...(value ?? ({} as T)),\n              },\n          ]\n        : children;\n}\n\n/** Data structure that represents an arbitrarily deeply nested tree of keyed values */\ntype Tree<V> = {\n    /** Number of child levels nested within this path of the tree (leaves do not count towards the depth) */\n    depth: number;\n    rootValues?: V[];\n    value?: V;\n    /** Child levels contained within this path of the tree, grouped by child key */\n    children: Map<string | null, Tree<V>>;\n};\n\n/** Build an arbitrarily deeply nested hierarchy from a flat list of input items */\nfunction buildNestedHierarchy<V extends object>(\n    data: V[],\n    getItemDepth: (item: V) => number,\n    getItemGroupKey: (item: V, depthIndex: number) => string | null\n): Tree<V> {\n    const hierarchy: Tree<V> = { depth: 0, children: new Map() };\n    data.forEach((item) => {\n        const itemDepth = getItemDepth(item);\n        createNestedItemHierarchy(item, itemDepth, getItemGroupKey, 0, hierarchy);\n    });\n    return hierarchy;\n\n    function createNestedItemHierarchy(\n        item: V,\n        itemDepth: number,\n        getItemGroupKey: (item: V, depthIndex: number) => string | null,\n        currentDepth: number,\n        hierarchy: Tree<V>\n    ): Tree<V> {\n        if (currentDepth === itemDepth) {\n            if (currentDepth === 0) {\n                if (!hierarchy.rootValues) {\n                    hierarchy.rootValues = [];\n                }\n                hierarchy.rootValues.push(item);\n            } else {\n                hierarchy.value = item;\n            }\n            return hierarchy;\n        } else {\n            const key = getItemGroupKey(item, currentDepth);\n            const existingChildHierarchy = hierarchy.children.get(key);\n            const childHierarchy = createNestedItemHierarchy(\n                item,\n                itemDepth,\n                getItemGroupKey,\n                currentDepth + 1,\n                existingChildHierarchy || { depth: 0, children: new Map() }\n            );\n            hierarchy.children.set(key, childHierarchy);\n            hierarchy.depth = Math.max(1 + childHierarchy.depth, hierarchy.depth);\n            return hierarchy;\n        }\n    }\n}\n", "import type {\n    AgDonutSeriesOptions,\n    AgPieSeriesOptions,\n    AgPolarChartOptions,\n    AgPolarSeriesOptions,\n} from 'ag-charts-community';\n\nimport { changeOpacity } from '../../utils/color';\nimport { deepMerge } from '../../utils/object';\nimport type { ChartProxyParams, FieldDefinition, UpdateParams } from '../chartProxy';\nimport { ChartProxy } from '../chartProxy';\n\ninterface DonutOffset {\n    offsetAmount: number;\n    currentOffset: number;\n}\n\nfunction calculateOffsets(offset: DonutOffset) {\n    const outerRadiusOffset = offset.currentOffset;\n    offset.currentOffset -= offset.offsetAmount;\n\n    const innerRadiusOffset = offset.currentOffset;\n    offset.currentOffset -= offset.offsetAmount;\n\n    return { outerRadiusOffset, innerRadiusOffset };\n}\n\nexport class PieChartProxy extends ChartProxy<AgPolarChartOptions, 'pie' | 'donut'> {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected getUpdateOptions(params: UpdateParams, commonChartOptions: AgPolarChartOptions): AgPolarChartOptions {\n        return {\n            ...commonChartOptions,\n            data: this.crossFiltering ? this.getCrossFilterData(params) : params.data,\n            series: this.getSeries(params),\n        };\n    }\n\n    private getSeries(params: UpdateParams): AgPolarSeriesOptions[] {\n        const [category] = params.categories;\n        const numFields = params.fields.length;\n\n        const offset = {\n            currentOffset: 0,\n            offsetAmount: numFields > 1 ? 20 : 40,\n        };\n\n        const series: (AgPieSeriesOptions | AgDonutSeriesOptions)[] = this.getFields(params).map(\n            (f: FieldDefinition) => {\n                // options shared by 'pie' and 'donut' charts\n                const options = {\n                    type: this.standaloneChartType as AgPieSeriesOptions['type'],\n                    angleKey: f.colId,\n                    angleName: f.displayName!,\n                    sectorLabelKey: f.colId,\n                    calloutLabelName: category.name,\n                    calloutLabelKey: category.id,\n                };\n\n                if (this.chartType === 'donut' || this.chartType === 'doughnut') {\n                    const { outerRadiusOffset, innerRadiusOffset } = calculateOffsets(offset);\n                    const title = f.displayName\n                        ? {\n                              title: { text: f.displayName, showInLegend: numFields > 1 },\n                          }\n                        : undefined;\n\n                    // augment shared options with 'donut' specific options\n                    return {\n                        ...options,\n                        type: 'donut',\n                        outerRadiusOffset,\n                        innerRadiusOffset,\n                        ...title,\n                        calloutLine: {\n                            colors: this.getChartPalette()?.strokes,\n                        },\n                    };\n                }\n\n                return options;\n            }\n        );\n\n        return this.crossFiltering ? this.extractCrossFilterSeries(series) : series;\n    }\n\n    private getCrossFilterData(params: UpdateParams) {\n        const colId = params.fields[0].colId;\n        const filteredOutColId = `${colId}-filtered-out`;\n\n        return params.data.map((d) => {\n            const total = d[colId] + d[filteredOutColId];\n            d[`${colId}-total`] = total;\n            d[filteredOutColId] = 1; // normalise to 1\n            d[colId] = d[colId] / total; // fraction of 1\n            return d;\n        });\n    }\n\n    private extractCrossFilterSeries(series: (AgPieSeriesOptions | AgDonutSeriesOptions)[]) {\n        const palette = this.getChartPalette();\n\n        const primaryOptions = (seriesOptions: AgPieSeriesOptions | AgDonutSeriesOptions) => {\n            return {\n                ...seriesOptions,\n                legendItemKey: seriesOptions.calloutLabelKey,\n                calloutLabel: { enabled: false }, // hide labels on primary series\n                highlightStyle: { item: { fill: undefined } },\n                radiusKey: seriesOptions.angleKey,\n                angleKey: seriesOptions.angleKey + '-total',\n                radiusMin: 0,\n                radiusMax: 1,\n                listeners: {\n                    nodeClick: this.crossFilterCallback,\n                },\n            };\n        };\n\n        const filteredOutOptions = (seriesOptions: AgPieSeriesOptions | AgDonutSeriesOptions, angleKey: string) => {\n            return {\n                ...deepMerge({}, primaryOpts),\n                radiusKey: angleKey + '-filtered-out',\n                fills: changeOpacity(seriesOptions.fills ?? palette?.fills ?? [], 0.3),\n                strokes: changeOpacity(seriesOptions.strokes ?? palette?.strokes ?? [], 0.3),\n                showInLegend: false,\n            };\n        };\n\n        // currently, only single 'donut' cross-filter series are supported\n        const primarySeries = series[0];\n\n        // update primary series\n        const angleKey = primarySeries.angleKey!;\n        const primaryOpts = primaryOptions(primarySeries);\n\n        return [filteredOutOptions(primarySeries, angleKey), primaryOpts];\n    }\n\n    private getFields(params: UpdateParams): FieldDefinition[] {\n        // pie charts only support a single series, donut charts support multiple series\n        return this.chartType === 'pie' ? params.fields.slice(0, 1) : params.fields;\n    }\n}\n", "import type { SeriesGroupType } from '@ag-grid-community/core';\nimport type {\n    AgPolarAxisOptions,\n    AgPolarChartOptions,\n    AgPolarSeriesOptions,\n    AgRadarAreaSeriesOptions,\n} from 'ag-charts-community';\n\nimport type { ChartProxyParams, UpdateParams } from '../chartProxy';\nimport { ChartProxy } from '../chartProxy';\n\nexport class PolarChartProxy extends ChartProxy<\n    AgPolarChartOptions,\n    'radar-line' | 'radar-area' | 'nightingale' | 'radial-column' | 'radial-bar'\n> {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    public getAxes(_: UpdateParams): AgPolarAxisOptions[] {\n        const radialBar = this.standaloneChartType === 'radial-bar';\n        return [\n            { type: radialBar ? 'angle-number' : 'angle-category' },\n            { type: radialBar ? 'radius-category' : 'radius-number' },\n        ];\n    }\n\n    public getSeries(params: UpdateParams): AgPolarSeriesOptions[] {\n        const { fields, categories, seriesGroupType } = params;\n        const [category] = categories;\n        const radialBar = this.standaloneChartType === 'radial-bar';\n        const seriesGroupTypeOptions = this.getSeriesGroupTypeOptions(seriesGroupType);\n\n        return fields.map((f) => ({\n            type: this.standaloneChartType as AgRadarAreaSeriesOptions['type'],\n            angleKey: radialBar ? f.colId : category.id,\n            angleName: radialBar ? f.displayName ?? undefined : category.name,\n            radiusKey: radialBar ? category.id : f.colId,\n            radiusName: radialBar ? category.name : f.displayName ?? undefined,\n            ...seriesGroupTypeOptions,\n        }));\n    }\n\n    public override getSeriesGroupType(): SeriesGroupType | undefined {\n        const standaloneChartType = this.standaloneChartType;\n        if (!['nightingale', 'radial-bar', 'radial-column'].includes(standaloneChartType)) {\n            return undefined;\n        }\n        const firstSeriesProperties = this.getChart().series?.[0]?.properties.toJson();\n        const getStackedValue = () => (firstSeriesProperties.normalizedTo ? 'normalized' : 'stacked');\n        if (standaloneChartType === 'nightingale') {\n            return firstSeriesProperties.grouped ? 'grouped' : getStackedValue();\n        } else {\n            return firstSeriesProperties.stacked ? getStackedValue() : 'grouped';\n        }\n    }\n\n    protected getUpdateOptions(params: UpdateParams, commonChartOptions: AgPolarChartOptions): AgPolarChartOptions {\n        const axes = this.getAxes(params);\n\n        return {\n            ...commonChartOptions,\n            data: this.getData(params, axes),\n            axes,\n            series: this.getSeries(params),\n        };\n    }\n\n    private getData(params: UpdateParams, axes: AgPolarAxisOptions[]): any[] {\n        const isCategoryAxis = axes.some((axis) => axis.type === 'angle-category' || axis.type === 'radius-category');\n        if (isCategoryAxis) {\n            const [category] = params.categories;\n            return this.transformCategoryData(params.data, category.id);\n        } else {\n            return params.data;\n        }\n    }\n\n    private getSeriesGroupTypeOptions(seriesGroupType?: SeriesGroupType): Partial<AgPolarSeriesOptions> {\n        if (!seriesGroupType) {\n            return {};\n        }\n        return {\n            grouped: seriesGroupType === 'grouped' || undefined,\n            stacked: seriesGroupType !== 'grouped' || undefined,\n            normalizedTo: seriesGroupType === 'normalized' ? 100 : undefined,\n        };\n    }\n}\n", "export function partition<T, K>(items: T[], selector: (item: T) => K): Map<K, T[]> {\n    return items.reduce((groupedItems, item) => {\n        const key = selector(item);\n        const existingItems = groupedItems.get(key);\n        return groupedItems.set(key, existingItems ? [...existingItems, item] : [item]);\n    }, new Map<K, T[]>());\n}\n\nexport function flatMap<T, V>(items: T[], iteratee: (item: T, index: number, array: T[]) => V[]): V[] {\n    return items.reduce((acc, item, index, array) => acc.concat(iteratee(item, index, array)), new Array<V>());\n}\n", "import type {\n    AgCartesianChartOptions,\n    AgChartThemeOverrides,\n    AgHeatmapSeriesOptions,\n    AgHeatmapSeriesTooltipRendererParams,\n    AgTooltipRendererResult,\n} from 'ag-charts-community';\n\nimport { flatMap } from '../../utils/array';\nimport type { ChartProxyParams, UpdateParams } from '../chartProxy';\nimport { ChartProxy } from '../chartProxy';\n\nexport const HEATMAP_CATEGORY_KEY = 'AG-GRID-DEFAULT-HEATMAP-CATEGORY-KEY';\nexport const HEATMAP_SERIES_KEY = 'AG-GRID-DEFAULT-HEATMAP-SERIES-KEY';\nexport const HEATMAP_VALUE_KEY = 'AG-GRID-DEFAULT-HEATMAP-VALUE-KEY';\n\nexport class HeatmapChartProxy extends ChartProxy<AgCartesianChartOptions, 'heatmap'> {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected getUpdateOptions(\n        params: UpdateParams,\n        commonChartOptions: AgCartesianChartOptions\n    ): AgCartesianChartOptions {\n        const xSeriesKey = HEATMAP_SERIES_KEY;\n        const xValueKey = HEATMAP_VALUE_KEY;\n        const yKey = HEATMAP_CATEGORY_KEY;\n        return {\n            ...commonChartOptions,\n            series: this.getSeries(params, xSeriesKey, xValueKey, yKey),\n            data: this.getData(params, xSeriesKey, xValueKey, yKey),\n        };\n    }\n\n    protected getSeries(\n        params: UpdateParams,\n        xSeriesKey: string,\n        xValueKey: string,\n        yKey: string\n    ): AgHeatmapSeriesOptions[] {\n        const [category] = params.categories;\n        return [\n            {\n                type: this.standaloneChartType as AgHeatmapSeriesOptions['type'],\n                // The axis keys reference synthetic fields based on the category values and series column names\n                yKey,\n                xKey: xSeriesKey,\n                // The color key references a synthetic field based on the series column value for a specific cell\n                colorKey: xValueKey,\n                yName: category.name,\n                // We don't know how to label the 'x' series, as it is a synthetic series created from the set of all input columns\n                // In future releases we may want to consider inferring the series label from column groupings etc\n                xName: undefined,\n                colorName: undefined,\n            },\n        ];\n    }\n\n    protected getData(params: UpdateParams, xSeriesKey: string, xValueKey: string, yKey: string): any[] {\n        const [category] = params.categories;\n        // Heatmap chart expects a flat array of data, with each row representing a single cell in the heatmap\n        // This means we need to explode the list of input rows into their individual cells\n        return flatMap(params.data, (datum, index) => {\n            // We need to create a unique y value object for each row to prevent unintended category grouping\n            // when there are multiple rows with the same category value\n            const value = datum[category.id];\n            const valueString = value == null ? '' : String(value);\n            const yValue = { id: index, value, toString: () => valueString };\n            // Return a flat list of output data items corresponding to each cell,\n            // appending the synthetic series and category fields to the cell data\n            return params.fields.map(({ colId, displayName }) => ({\n                ...datum,\n                [xSeriesKey]: displayName,\n                [xValueKey]: datum[colId],\n                [yKey]: yValue,\n            }));\n        });\n    }\n\n    protected override getSeriesChartThemeDefaults(): AgChartThemeOverrides['heatmap'] {\n        return {\n            gradientLegend: {\n                gradient: {\n                    preferredLength: 200,\n                },\n            },\n            series: {\n                tooltip: {\n                    renderer: renderHeatmapTooltip,\n                },\n            },\n        };\n    }\n}\n\nfunction renderHeatmapTooltip(params: AgHeatmapSeriesTooltipRendererParams<any>): string | AgTooltipRendererResult {\n    const { xKey, yKey, colorKey, yName, datum } = params;\n    const table: Array<{ label: string; value: string | undefined }> = [\n        { label: yName, value: datum[yKey] },\n        { label: datum[xKey], value: colorKey && datum[colorKey] },\n    ];\n    const html = table\n        .map(({ label, value }) => `<b>${sanitizeHtml(String(label))}:</b> ${sanitizeHtml(String(value))}`)\n        .join('<br>');\n    return {\n        title: '',\n        content: html,\n    };\n}\n\nfunction sanitizeHtml(input: string): string {\n    const ESCAPED_CHARS = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n    };\n    const characterClass = `[${Object.keys(ESCAPED_CHARS).join('')}]`;\n    const pattern = new RegExp(characterClass, 'g');\n    return input.replace(pattern, (char: keyof typeof ESCAPED_CHARS) => ESCAPED_CHARS[char]);\n}\n", "import type { AgCartesianAxisOptions, AgCartesianChartOptions } from 'ag-charts-community';\n\nimport { ChartDataModel } from '../../model/chartDataModel';\nimport { CartesianChartProxy } from '../cartesian/cartesianChartProxy';\nimport type { ChartProxyParams, UpdateParams } from '../chartProxy';\n\nexport abstract class StatisticalChartProxy<\n    TSeries extends 'box-plot' | 'range-area' | 'range-bar',\n> extends CartesianChartProxy<TSeries> {\n    protected constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    public getAxes(params: UpdateParams, commonChartOptions: AgCartesianChartOptions): AgCartesianAxisOptions[] {\n        return [\n            {\n                type: this.getXAxisType(params),\n                position: this.isHorizontal(commonChartOptions) ? 'left' : 'bottom',\n            },\n            {\n                type: 'number',\n                position: this.isHorizontal(commonChartOptions) ? 'bottom' : 'left',\n            },\n        ];\n    }\n\n    protected computeSeriesStatistics(params: UpdateParams, computeStatsFn: (values: number[]) => any): any[] {\n        const { data, fields } = params;\n        const [category] = params.categories;\n        const categoryKey = category.id || ChartDataModel.DEFAULT_CATEGORY;\n        const groupedData = this.groupDataByCategory(categoryKey, data);\n\n        return Array.from(groupedData).map(([categoryValue, categoryData]) => {\n            const categoryResult = { [category.id]: categoryValue };\n\n            fields.forEach((field, seriesIndex) => {\n                // `null` & `NaN` values are omitted from calculations\n                const seriesValues = categoryData\n                    .map((datum) => datum[field.colId])\n                    .filter((value) => typeof value === 'number' && !isNaN(value));\n\n                Object.entries(computeStatsFn(seriesValues)).forEach(([statKey, value]) => {\n                    const propertyKey = `${statKey}:${seriesIndex}`;\n                    // when no data exists, stat properties are added to results with `null` values!\n                    categoryResult[propertyKey] = seriesValues.length > 0 ? value : null;\n                });\n            });\n\n            return categoryResult;\n        });\n    }\n\n    protected groupDataByCategory(categoryKey: string, data: any[]): Map<any, any[]> {\n        const getCategory = (datum: any) => {\n            if (categoryKey === ChartDataModel.DEFAULT_CATEGORY) {\n                return 1;\n            }\n            const categoryValue = datum[categoryKey];\n            if (categoryValue === null || categoryValue === undefined) {\n                return ''; // use a blank category for `null` or `undefined` values\n            }\n            return categoryValue instanceof Date ? categoryValue.getTime() : categoryValue;\n        };\n\n        return data.reduce((acc, datum) => {\n            const category = getCategory(datum);\n            const existingCategoryData = acc.get(category);\n            if (existingCategoryData) {\n                existingCategoryData.push(datum);\n            } else {\n                acc.set(category, [datum]);\n            }\n            return acc;\n        }, new Map<string | null, any[]>());\n    }\n}\n", "import type { AgBoxPlotSeriesOptions } from 'ag-charts-community';\n\nimport type { ChartProxyParams, UpdateParams } from '../chartProxy';\nimport { StatisticalChartProxy } from './statisticalChartProxy';\n\nexport class BoxPlotChartProxy extends StatisticalChartProxy<'box-plot'> {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    public getSeries(params: UpdateParams): AgBoxPlotSeriesOptions<any>[] {\n        const [category] = params.categories;\n        return params.fields.map((field, seriesIndex) => ({\n            type: this.standaloneChartType as AgBoxPlotSeriesOptions['type'],\n            // xKey/xName refer to category buckets\n            xKey: category.id,\n            xName: category.name,\n            // yName is used to label the series\n            yName: field.displayName ?? undefined,\n            // custom field labels shown in the tooltip\n            minName: 'Min',\n            q1Name: 'Q1',\n            medianName: 'Median',\n            q3Name: 'Q3',\n            maxName: 'Max',\n            // generated 'synthetic fields' from getData()\n            minKey: `min:${seriesIndex}`,\n            q1Key: `q1:${seriesIndex}`,\n            medianKey: `median:${seriesIndex}`,\n            q3Key: `q3:${seriesIndex}`,\n            maxKey: `max:${seriesIndex}`,\n        }));\n    }\n\n    protected override getData(params: UpdateParams): any[] {\n        return this.computeSeriesStatistics(params, (seriesValues: number[]): Record<string, number> => {\n            const sortedValues = seriesValues.sort((a, b) => a - b);\n            return {\n                min: sortedValues[0],\n                q1: this.quantile(sortedValues, 0.25),\n                median: this.quantile(sortedValues, 0.5),\n                q3: this.quantile(sortedValues, 0.75),\n                max: sortedValues[sortedValues.length - 1],\n            };\n        });\n    }\n\n    private quantile(sortedValues: number[], q: number): number {\n        const position = (sortedValues.length - 1) * q;\n        const indexBelow = Math.floor(position);\n        const aboveValue = position - indexBelow;\n        if (sortedValues[indexBelow + 1] !== undefined) {\n            return sortedValues[indexBelow] + aboveValue * (sortedValues[indexBelow + 1] - sortedValues[indexBelow]);\n        }\n        return sortedValues[indexBelow];\n    }\n}\n", "import type { AgRangeAreaSeriesOptions } from 'ag-charts-community';\n\nimport type { ChartProxyParams, UpdateParams } from '../chartProxy';\nimport { StatisticalChartProxy } from './statisticalChartProxy';\n\nexport class RangeChartProxy extends StatisticalChartProxy<'range-bar' | 'range-area'> {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    public getSeries(params: UpdateParams): AgRangeAreaSeriesOptions<any>[] {\n        const [category] = params.categories;\n        return params.fields.map((field, seriesIndex) => ({\n            type: this.standaloneChartType as AgRangeAreaSeriesOptions['type'],\n            // xKey/xName refer to category buckets\n            xKey: category.id,\n            xName: category.name,\n            // yName is used to label the series\n            yName: field.displayName ?? undefined,\n            // custom field labels shown in the tooltip\n            yLowName: 'Min',\n            yHighName: 'Max',\n            // generated 'synthetic fields' from getData()\n            yLowKey: `min:${seriesIndex}`,\n            yHighKey: `max:${seriesIndex}`,\n        }));\n    }\n\n    protected override getData(params: UpdateParams): any[] {\n        return this.computeSeriesStatistics(params, (seriesValues: number[]): Record<string, number> => {\n            return {\n                min: Math.min(...seriesValues),\n                max: Math.max(...seriesValues),\n            };\n        });\n    }\n}\n", "import type {\n    BeanCollection,\n    ChartToolPanelMenuOptions,\n    ChartToolbarMenuItemOptions,\n    Environment,\n} from '@ag-grid-community/core';\nimport { AgPromise, Component, _warnOnce } from '@ag-grid-community/core';\nimport { AgPanel } from '@ag-grid-enterprise/core';\n\nimport type { ChartController } from '../chartController';\nimport type { ExtraPaddingDirection } from '../chartProxies/chartProxy';\nimport type { ChartMenuService } from '../services/chartMenuService';\nimport type { ChartMenuContext } from './chartMenuContext';\nimport type { ChartMenuListFactory } from './chartMenuList';\nimport { ChartToolbar } from './chartToolbar';\nimport { TabbedChartMenu } from './tabbedChartMenu';\n\ntype ChartToolbarButtons = {\n    [key in ChartToolbarMenuItemOptions]: {\n        iconName: string;\n        callback: (eventSource: HTMLElement) => void;\n    };\n};\n\nexport class ChartMenu extends Component {\n    private chartMenuService: ChartMenuService;\n    private chartMenuListFactory: ChartMenuListFactory;\n    private environment: Environment;\n\n    public wireBeans(beans: BeanCollection) {\n        this.chartMenuService = beans.chartMenuService as ChartMenuService;\n        this.chartMenuListFactory = beans.chartMenuListFactory as ChartMenuListFactory;\n        this.environment = beans.environment;\n    }\n\n    private readonly chartController: ChartController;\n\n    private buttons: ChartToolbarButtons = {\n        chartLink: { iconName: 'linked', callback: () => this.chartMenuService.toggleLinked(this.chartMenuContext) },\n        chartUnlink: {\n            iconName: 'unlinked',\n            callback: () => this.chartMenuService.toggleLinked(this.chartMenuContext),\n        },\n        chartDownload: { iconName: 'save', callback: () => this.chartMenuService.downloadChart(this.chartMenuContext) },\n        chartMenu: { iconName: 'menuAlt', callback: (eventSource: HTMLElement) => this.showMenuList(eventSource) },\n    };\n\n    private panels: ChartToolPanelMenuOptions[] = [];\n    private defaultPanel: ChartToolPanelMenuOptions;\n\n    private chartToolbar: ChartToolbar;\n    private tabbedMenu: TabbedChartMenu;\n    private menuPanel?: AgPanel;\n    private menuVisible = false;\n    private chartToolbarOptions: ChartToolbarMenuItemOptions[];\n\n    constructor(\n        private readonly eChartContainer: HTMLElement,\n        private readonly eMenuPanelContainer: HTMLElement,\n        private readonly chartMenuContext: ChartMenuContext\n    ) {\n        super(/* html */ `<div class=\"ag-chart-menu-wrapper\"></div>`);\n        this.chartController = chartMenuContext.chartController;\n    }\n\n    public postConstruct(): void {\n        this.chartToolbar = this.createManagedBean(new ChartToolbar());\n        this.getGui().appendChild(this.chartToolbar.getGui());\n\n        this.refreshToolbarAndPanels();\n\n        this.addManagedEventListeners({\n            chartCreated: (e) => {\n                if (e.chartId === this.chartController.getChartId()) {\n                    const showDefaultToolPanel = Boolean(this.gos.get('chartToolPanelsDef')?.defaultToolPanel);\n                    if (showDefaultToolPanel) {\n                        this.showMenu({ panel: this.defaultPanel, suppressFocus: true });\n                    }\n                }\n            },\n        });\n        this.addManagedListeners(this.chartController, {\n            chartLinkedChanged: this.refreshToolbarAndPanels.bind(this),\n        });\n\n        this.refreshMenuClasses();\n\n        this.addManagedListeners(this.chartController, { chartApiUpdate: this.refreshToolbarAndPanels.bind(this) });\n    }\n\n    public isVisible(): boolean {\n        return this.menuVisible;\n    }\n\n    public getExtraPaddingDirections(): ExtraPaddingDirection[] {\n        return (['chartMenu', 'chartLink', 'chartUnlink', 'chartDownload'] as const).some((v) =>\n            this.chartToolbarOptions.includes(v)\n        )\n            ? ['top']\n            : [];\n    }\n\n    private refreshToolbarAndPanels(): void {\n        this.initToolbarOptionsAndPanels();\n        this.updateToolbar();\n    }\n\n    private initToolbarOptionsAndPanels(): void {\n        const { panels, defaultPanel } = this.chartMenuService.getChartToolPanels(this.chartController);\n        this.panels = panels;\n        this.defaultPanel = defaultPanel;\n        this.chartToolbarOptions = this.chartMenuService.getChartToolbarOptions();\n    }\n\n    private updateToolbar(): void {\n        const buttons = this.chartToolbarOptions.map((buttonName) => {\n            const { iconName, callback } = this.buttons[buttonName];\n            return {\n                buttonName,\n                iconName,\n                callback,\n            };\n        });\n        this.chartToolbar.updateParams({ buttons });\n    }\n\n    private createMenuPanel(defaultTab: number): AgPromise<AgPanel> {\n        const menuPanel = (this.menuPanel = this.createBean(\n            new AgPanel({\n                height: '100%',\n                closable: true,\n                hideTitleBar: true,\n                cssIdentifier: 'chart-menu',\n            })\n        ));\n\n        menuPanel.setParentComponent(this);\n        this.eMenuPanelContainer.appendChild(menuPanel.getGui());\n\n        this.tabbedMenu = this.createBean(new TabbedChartMenu(this.panels, this.chartMenuContext));\n\n        this.addManagedListeners(this.tabbedMenu, {\n            closed: () => {\n                this.hideMenu();\n            },\n        });\n\n        this.addManagedListeners(menuPanel, { destroyed: () => this.destroyBean(this.tabbedMenu) });\n\n        return new AgPromise((res: (arg0: any) => void) => {\n            window.setTimeout(() => {\n                menuPanel.setBodyComponent(this.tabbedMenu);\n                this.tabbedMenu.showTab(defaultTab);\n                res(menuPanel);\n            }, 100);\n        });\n    }\n\n    private showContainer(eventSource?: HTMLElement, suppressFocus?: boolean) {\n        if (!this.menuPanel) {\n            return;\n        }\n\n        this.menuVisible = true;\n        this.refreshMenuClasses();\n        this.tabbedMenu.showMenu(eventSource, suppressFocus);\n    }\n\n    public showMenu(params?: {\n        /**\n         * Menu panel to show. If empty, shows the existing menu, or creates the default menu if menu panel has not been created\n         */\n        panel?: ChartToolPanelMenuOptions;\n        eventSource?: HTMLElement;\n        suppressFocus?: boolean;\n    }): void {\n        const { panel, eventSource, suppressFocus } = params ?? {};\n\n        if (this.menuPanel && !panel) {\n            this.showContainer(eventSource, suppressFocus);\n        } else {\n            const menuPanel = panel || this.defaultPanel;\n            let tab = this.panels.indexOf(menuPanel);\n            if (tab < 0) {\n                _warnOnce(`'${panel}' is not a valid Chart Tool Panel name`);\n                tab = this.panels.indexOf(this.defaultPanel);\n            }\n\n            if (this.menuPanel) {\n                this.tabbedMenu.showTab(tab);\n                this.showContainer(eventSource, suppressFocus);\n            } else {\n                this.createMenuPanel(tab).then(() => this.showContainer(eventSource, suppressFocus));\n            }\n        }\n    }\n\n    public hideMenu(): void {\n        this.menuVisible = false;\n        this.refreshMenuClasses();\n    }\n\n    private refreshMenuClasses() {\n        this.eChartContainer.classList.toggle('ag-chart-menu-visible', this.menuVisible);\n        this.eChartContainer.classList.toggle('ag-chart-menu-hidden', !this.menuVisible);\n    }\n\n    private showMenuList(eventSource: HTMLElement): void {\n        this.chartMenuListFactory.showMenuList({\n            eventSource,\n            showMenu: () => this.showMenu({ eventSource }),\n            chartMenuContext: this.chartMenuContext,\n        });\n    }\n\n    public override destroy() {\n        super.destroy();\n\n        if (this.menuPanel && this.menuPanel.isAlive()) {\n            this.destroyBean(this.menuPanel);\n        }\n\n        if (this.tabbedMenu && this.tabbedMenu.isAlive()) {\n            this.destroyBean(this.tabbedMenu);\n        }\n    }\n}\n", "import type { BeanCollection, ChartToolbarMenuItemOptions } from '@ag-grid-community/core';\nimport { Component, RefPlaceholder, _clearElement, _createIconNoSpan } from '@ag-grid-community/core';\n\nimport type { ChartTranslationKey, ChartTranslationService } from '../services/chartTranslationService';\n\ninterface ChartToolbarButton {\n    buttonName: ChartToolbarMenuItemOptions;\n    iconName: string;\n    callback: (eventSource: HTMLElement) => void;\n}\n\nexport class ChartToolbar extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    private readonly eMenu: HTMLButtonElement = RefPlaceholder;\n\n    private buttonListenersDestroyFuncs: ((() => null) | undefined)[] = [];\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-chart-menu\" data-ref=\"eMenu\"></div>`);\n    }\n\n    public updateParams(params: { buttons: ChartToolbarButton[] }): void {\n        const { buttons } = params;\n        this.createButtons(buttons);\n    }\n\n    private createButtons(buttons: ChartToolbarButton[]): void {\n        this.buttonListenersDestroyFuncs.forEach((func) => func?.());\n        this.buttonListenersDestroyFuncs = [];\n\n        const menuEl = this.eMenu;\n        _clearElement(menuEl);\n\n        buttons.forEach((buttonConfig) => {\n            const { buttonName, iconName, callback } = buttonConfig;\n            const buttonEl = this.createButton(iconName);\n\n            const tooltipTitle = this.chartTranslationService.translate(\n                (buttonName + 'ToolbarTooltip') as ChartTranslationKey\n            );\n            if (tooltipTitle && buttonEl instanceof HTMLElement) {\n                buttonEl.title = tooltipTitle;\n            }\n\n            this.buttonListenersDestroyFuncs.push(\n                ...this.addManagedElementListeners(buttonEl, {\n                    click: (event: MouseEvent) => callback(event.currentTarget as HTMLElement),\n                })\n            );\n\n            menuEl.appendChild(buttonEl);\n        });\n    }\n\n    private createButton(iconName: string): Element {\n        const buttonEl = _createIconNoSpan(iconName, this.gos, undefined, true)!;\n        buttonEl.classList.add('ag-chart-menu-icon');\n\n        const wrapperEl = this.gos.getDocument().createElement('button');\n        wrapperEl.appendChild(buttonEl);\n        wrapperEl.classList.add('ag-chart-menu-toolbar-button');\n        return wrapperEl;\n    }\n\n    public override destroy(): void {\n        this.buttonListenersDestroyFuncs = [];\n        super.destroy();\n    }\n}\n", "import type { BeanCollection, ChartToolPanelMenuOptions } from '@ag-grid-community/core';\nimport { AgPromise, Component } from '@ag-grid-community/core';\nimport type { TabbedItem } from '@ag-grid-enterprise/core';\nimport { TabbedLayout } from '@ag-grid-enterprise/core';\n\nimport type { ChartTranslationKey, ChartTranslationService } from '../services/chartTranslationService';\nimport type { ChartMenuContext } from './chartMenuContext';\nimport { ChartDataPanel } from './data/chartDataPanel';\nimport { FormatPanel } from './format/formatPanel';\nimport { ChartSettingsPanel } from './settings/chartSettingsPanel';\n\nexport type TabbedChartMenuEvent = 'closed';\nexport class TabbedChartMenu extends Component<TabbedChartMenuEvent> {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    public static TAB_DATA = 'data';\n    public static TAB_FORMAT = 'format';\n\n    private tabbedLayout: TabbedLayout;\n    private tabs: TabbedItem[] = [];\n    private eventSource?: HTMLElement;\n\n    constructor(\n        private readonly panels: ChartToolPanelMenuOptions[],\n        private readonly chartMenuContext: ChartMenuContext\n    ) {\n        super();\n    }\n\n    public postConstruct(): void {\n        this.panels.forEach((panel) => {\n            const panelType = panel.replace('chart', '').toLowerCase() as 'settings' | 'data' | 'format';\n            const panelComp = this.createPanel(panelType);\n            const tabItem = this.createTab(panel, panelType, panelComp);\n\n            this.tabs.push(tabItem);\n            this.addDestroyFunc(() => this.destroyBean(panelComp));\n        });\n\n        this.tabbedLayout = new TabbedLayout({\n            items: this.tabs,\n            cssClass: 'ag-chart-tabbed-menu',\n            keepScrollPosition: true,\n            suppressFocusBodyOnOpen: true,\n            suppressTrapFocus: true,\n            enableCloseButton: true,\n            closeButtonAriaLabel: this.chartTranslationService.translate('ariaChartMenuClose'),\n            onCloseClicked: () => {\n                this.eventSource?.focus({ preventScroll: true });\n                this.dispatchLocalEvent({ type: 'closed' });\n            },\n        });\n        this.createBean(this.tabbedLayout);\n    }\n\n    private createTab(name: ChartToolPanelMenuOptions, title: ChartTranslationKey, panelComp: Component): TabbedItem {\n        const eWrapperDiv = document.createElement('div');\n        eWrapperDiv.classList.add('ag-chart-tab', `ag-chart-${title}`);\n\n        this.createBean(panelComp);\n\n        eWrapperDiv.appendChild(panelComp.getGui());\n\n        const titleEl = document.createElement('div');\n        const translatedTitle = this.chartTranslationService.translate(title);\n        titleEl.innerText = translatedTitle;\n\n        return {\n            title: titleEl,\n            titleLabel: translatedTitle,\n            bodyPromise: AgPromise.resolve(eWrapperDiv),\n            getScrollableContainer: () => {\n                const scrollableContainer = eWrapperDiv.querySelector('.ag-scrollable-container');\n                return (scrollableContainer || eWrapperDiv) as HTMLElement;\n            },\n            name,\n        };\n    }\n\n    public showTab(tab: number) {\n        const tabItem = this.tabs[tab];\n        this.tabbedLayout.showItem(tabItem);\n    }\n\n    public override getGui(): HTMLElement {\n        return this.tabbedLayout && this.tabbedLayout.getGui();\n    }\n\n    public showMenu(eventSource?: HTMLElement, suppressFocus?: boolean): void {\n        this.eventSource = eventSource;\n        if (!suppressFocus) {\n            this.tabbedLayout?.focusHeader(true);\n        }\n    }\n\n    public override destroy(): void {\n        if (this.parentComponent && this.parentComponent.isAlive()) {\n            this.destroyBean(this.parentComponent);\n        }\n        super.destroy();\n    }\n\n    private createPanel(panelType: string): Component {\n        switch (panelType) {\n            case TabbedChartMenu.TAB_DATA:\n                return new ChartDataPanel(this.chartMenuContext);\n            case TabbedChartMenu.TAB_FORMAT:\n                return new FormatPanel(this.chartMenuContext);\n            default:\n                return new ChartSettingsPanel(this.chartMenuContext.chartController);\n        }\n    }\n}\n", "import type {\n    BeanCollection,\n    ChartDataPanel as ChartDataPanelType,\n    ChartType,\n    IChartService,\n} from '@ag-grid-community/core';\nimport { AgToggleButton, Component, _setDisplayed, _warnOnce } from '@ag-grid-community/core';\n\nimport type { ChartController } from '../../chartController';\nimport type { ColState } from '../../model/chartDataModel';\nimport type { ChartTranslationService } from '../../services/chartTranslationService';\nimport { getMaxNumCategories, getMaxNumSeries, supportsInvertedCategorySeries } from '../../utils/seriesTypeMapper';\nimport type { ChartMenuContext } from '../chartMenuContext';\nimport { CategoriesDataPanel } from './categoriesDataPanel';\nimport { ChartSpecificDataPanel } from './chartSpecificDataPanel';\nimport { SeriesChartTypePanel } from './seriesChartTypePanel';\nimport { SeriesDataPanel } from './seriesDataPanel';\n\nconst DefaultDataPanelDef: ChartDataPanelType = {\n    groups: [\n        { type: 'categories', isOpen: true },\n        { type: 'series', isOpen: true },\n        { type: 'seriesChartType', isOpen: true },\n        { type: 'chartSpecific', isOpen: true },\n    ],\n};\n\nexport class ChartDataPanel extends Component {\n    protected chartTranslationService: ChartTranslationService;\n    private chartService: IChartService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n        this.chartService = beans.chartService!;\n    }\n\n    private readonly chartController: ChartController;\n    private chartType?: ChartType;\n    private isSwitchCategorySeriesToggled = false;\n    private categoriesDataPanel?: CategoriesDataPanel;\n    private seriesDataPanel?: SeriesDataPanel;\n    private seriesChartTypePanel?: SeriesChartTypePanel;\n    private chartSpecificPanel?: ChartSpecificDataPanel;\n    private switchCategorySeriesToggle: AgToggleButton;\n    private restoreSwitchCategorySeriesToggleFocus = false;\n    private panels: Component[] = [];\n\n    constructor(private readonly chartMenuContext: ChartMenuContext) {\n        super(/* html */ `<div class=\"ag-chart-data-wrapper ag-scrollable-container\"></div>`);\n\n        this.chartController = chartMenuContext.chartController;\n    }\n\n    public postConstruct() {\n        this.createSwitchCategorySeriesToggle();\n        this.isSwitchCategorySeriesToggled = this.chartController.isCategorySeriesSwitched();\n\n        this.updatePanels();\n        const listener = this.updatePanels.bind(this);\n        this.addManagedListeners(this.chartController, {\n            chartModelUpdate: listener,\n            chartApiUpdate: listener,\n        });\n    }\n\n    public override destroy(): void {\n        this.clearPanelComponents();\n        super.destroy();\n    }\n\n    private updatePanels() {\n        const currentChartType = this.chartType;\n        const isSwitchCategorySeriesToggledCurrent = this.isSwitchCategorySeriesToggled;\n        const { dimensionCols, valueCols } = this.chartController.getColStateForMenu();\n\n        this.chartType = this.chartController.getChartType();\n\n        // Determine the state of the category/series toggle\n        this.isSwitchCategorySeriesToggled = this.chartController.isCategorySeriesSwitched();\n        const hasChangedSwitchCategorySeries =\n            this.isSwitchCategorySeriesToggled !== isSwitchCategorySeriesToggledCurrent;\n\n        // Attempt to re-use existing panels where possible in order to maintain keyboard focus\n        if (this.canRefresh(currentChartType, this.chartType) && !hasChangedSwitchCategorySeries) {\n            this.categoriesDataPanel?.refresh(dimensionCols);\n            this.seriesDataPanel?.refresh(valueCols);\n            this.seriesChartTypePanel?.refresh(valueCols);\n            this.chartSpecificPanel?.refresh();\n        } else {\n            this.recreatePanels(dimensionCols, valueCols);\n        }\n\n        // Ensure the category/series toggle UI control is up-to-date\n        const isSwitchCategorySeriesDisplayed =\n            supportsInvertedCategorySeries(this.chartType) &&\n            this.chartService.isEnterprise() &&\n            !this.chartController.isGrouping();\n        _setDisplayed(this.switchCategorySeriesToggle.getGui(), isSwitchCategorySeriesDisplayed);\n        if (hasChangedSwitchCategorySeries) {\n            this.switchCategorySeriesToggle?.setValue(this.chartController.isCategorySeriesSwitched());\n        }\n        if (this.restoreSwitchCategorySeriesToggleFocus) {\n            this.restoreSwitchCategorySeriesToggleFocus = false;\n            if (isSwitchCategorySeriesDisplayed) {\n                this.switchCategorySeriesToggle.getFocusableElement().focus();\n            }\n        }\n    }\n\n    private canRefresh(oldChartType: ChartType | undefined, newChartType: ChartType): boolean {\n        if (oldChartType === undefined) return false;\n        if (oldChartType === newChartType) {\n            return true;\n        }\n        const isCombo = (chartType: ChartType) =>\n            ['columnLineCombo', 'areaColumnCombo', 'customCombo'].includes(chartType);\n        if (isCombo(oldChartType) && isCombo(newChartType)) {\n            return true;\n        }\n        return false;\n    }\n\n    private recreatePanels(dimensionCols: ColState[], valueCols: ColState[]): void {\n        this.clearPanelComponents();\n\n        const { chartType } = this;\n        if (!chartType) return;\n\n        const isCategorySeriesSwitched = this.chartController.isCategorySeriesSwitched();\n\n        this.getDataPanelDef().groups?.forEach(({ type, isOpen }) => {\n            if (type === (isCategorySeriesSwitched ? 'series' : 'categories')) {\n                this.categoriesDataPanel = this.createBean(\n                    new CategoriesDataPanel(\n                        this.chartController,\n                        this.getCategoryGroupTitle(isCategorySeriesSwitched),\n                        this.getCategoryGroupMultipleSelect(chartType, isCategorySeriesSwitched),\n                        dimensionCols,\n                        isOpen\n                    )\n                );\n                this.panels.push(this.categoriesDataPanel);\n            } else if (type === (isCategorySeriesSwitched ? 'categories' : 'series')) {\n                this.seriesDataPanel = this.createBean(\n                    new SeriesDataPanel(\n                        this.chartController,\n                        this.chartMenuContext.chartOptionsService,\n                        this.getSeriesGroupTitle(isCategorySeriesSwitched),\n                        this.getSeriesGroupMultipleSelect(chartType, isCategorySeriesSwitched),\n                        this.getSeriesGroupMaxSelection(chartType, isCategorySeriesSwitched),\n                        valueCols,\n                        isOpen\n                    )\n                );\n                this.panels.push(this.seriesDataPanel);\n            } else if (type === 'seriesChartType') {\n                if (this.chartController.isComboChart()) {\n                    this.seriesChartTypePanel = this.createBean(\n                        new SeriesChartTypePanel(this.chartController, valueCols, isOpen)\n                    );\n                    this.panels.push(this.seriesChartTypePanel);\n                }\n            } else if (type === 'chartSpecific') {\n                this.chartSpecificPanel = this.createBean(new ChartSpecificDataPanel(this.chartMenuContext, isOpen));\n                this.panels.push(this.chartSpecificPanel);\n            } else {\n                _warnOnce(`Invalid charts data panel group name supplied: '${type}'`);\n            }\n        });\n\n        (isCategorySeriesSwitched ? this.categoriesDataPanel : this.seriesDataPanel)?.addItem(\n            this.switchCategorySeriesToggle.getGui()\n        );\n\n        this.addPanelComponents();\n    }\n\n    private addPanelComponents(): void {\n        if (!this.panels.length) {\n            return;\n        }\n        const eDocument = this.gos.getDocument();\n        const fragment = eDocument.createDocumentFragment();\n        for (const panel of this.panels) {\n            panel.addCssClass('ag-chart-data-section');\n            fragment.appendChild(panel.getGui());\n        }\n        this.getGui().appendChild(fragment);\n    }\n\n    private clearPanelComponents() {\n        const eGui = this.getGui();\n\n        this.panels.forEach((panel) => {\n            eGui.removeChild(panel.getGui());\n            this.destroyBean(panel);\n        });\n        this.panels = [];\n    }\n\n    private getDataPanelDef() {\n        return this.gos.get('chartToolPanelsDef')?.dataPanel ?? DefaultDataPanelDef;\n    }\n\n    private getCategoryGroupTitle(isCategorySeriesSwitched: boolean): string {\n        if (isCategorySeriesSwitched) return this.chartTranslationService.translate('seriesLabels');\n        return this.chartTranslationService.translate(this.chartController.isActiveXYChart() ? 'labels' : 'categories');\n    }\n\n    private getCategoryGroupMultipleSelect(chartType: ChartType, isCategorySeriesSwitched: boolean): boolean {\n        if (isCategorySeriesSwitched) return false;\n        return getMaxNumCategories(chartType) !== 1;\n    }\n\n    private getSeriesGroupTitle(isCategorySeriesSwitched: boolean): string {\n        if (isCategorySeriesSwitched) return this.chartTranslationService.translate('categoryValues');\n        return this.chartTranslationService.translate(this.chartController.isActiveXYChart() ? 'xyValues' : 'series');\n    }\n\n    private getSeriesGroupMultipleSelect(chartType: ChartType, isCategorySeriesSwitched: boolean): boolean {\n        return this.getSeriesGroupMaxSelection(chartType, isCategorySeriesSwitched) !== 1;\n    }\n\n    private getSeriesGroupMaxSelection(chartType: ChartType, isCategorySeriesSwitched: boolean): number | undefined {\n        if (isCategorySeriesSwitched) return undefined;\n        return getMaxNumSeries(chartType);\n    }\n\n    private createSwitchCategorySeriesToggle(): void {\n        this.switchCategorySeriesToggle = this.createManagedBean(\n            new AgToggleButton({\n                label: this.chartTranslationService.translate('switchCategorySeries'),\n                labelAlignment: 'left',\n                labelWidth: 'flex',\n                inputWidth: 'flex',\n                value: this.chartController.isCategorySeriesSwitched(),\n                onValueChange: (value) => {\n                    this.restoreSwitchCategorySeriesToggleFocus = true;\n                    this.chartController.switchCategorySeries(value);\n                },\n            })\n        );\n    }\n}\n", "import type { IAggFunc } from '@ag-grid-community/core';\nimport { AgSelect, AgToggleButton } from '@ag-grid-community/core';\nimport { AgGroupComponent } from '@ag-grid-enterprise/core';\n\nimport type { ChartController } from '../../chartController';\nimport type { ColState } from '../../model/chartDataModel';\nimport { ChartDataModel } from '../../model/chartDataModel';\nimport { DragDataPanel } from './dragDataPanel';\n\ntype AggFuncPreset = 'count' | 'sum' | 'min' | 'max' | 'avg' | 'first' | 'last';\n\nconst DEFAULT_AGG_FUNC: AggFuncPreset = 'sum';\n\nexport class CategoriesDataPanel extends DragDataPanel {\n    private aggFuncToggle?: AgToggleButton;\n    private aggFuncSelect?: AgSelect;\n\n    constructor(\n        chartController: ChartController,\n        private readonly title: string,\n        allowMultipleSelection: boolean,\n        private dimensionCols: ColState[],\n        private isOpen?: boolean\n    ) {\n        const maxSelection = undefined;\n        super(chartController, allowMultipleSelection, maxSelection, /* html */ `<div id=\"categoriesGroup\"></div>`);\n    }\n\n    public postConstruct() {\n        this.groupComp = this.createBean(\n            new AgGroupComponent({\n                title: this.title,\n                enabled: true,\n                suppressEnabledCheckbox: true,\n                suppressOpenCloseIcons: false,\n                cssIdentifier: 'charts-data',\n                expanded: this.isOpen,\n            })\n        );\n\n        this.createGroup(\n            this.dimensionCols,\n            (col) => col.displayName ?? '',\n            'categoryAdd',\n            'categorySelect',\n            () => !this.chartController.getAggFunc()\n        );\n        this.createAggFuncControls(this.dimensionCols);\n\n        this.getGui().appendChild(this.groupComp.getGui());\n    }\n\n    public refresh(dimensionCols: ColState[]): void {\n        this.valuePillSelect?.setValues(\n            dimensionCols,\n            dimensionCols.filter((col) => col.selected)\n        );\n        this.refreshValueSelect(dimensionCols);\n        this.refreshAggFuncControls(dimensionCols, this.chartController.getAggFunc());\n    }\n\n    private createAggFuncControls(dimensionCols: ColState[]): void {\n        const aggFunc = this.chartController.getAggFunc();\n        this.groupComp.addItem(\n            (this.aggFuncToggle = this.createBean(\n                new AgToggleButton({\n                    label: this.chartTranslationService.translate('aggregate'),\n                    labelAlignment: 'left',\n                    labelWidth: 'flex',\n                    inputWidth: 'flex',\n                    value: aggFunc != undefined,\n                    onValueChange: (value) => {\n                        const aggFunc = value ? DEFAULT_AGG_FUNC : undefined;\n                        this.chartController.setAggFunc(aggFunc);\n                        this.aggFuncSelect?.setValue(aggFunc, true);\n                        this.aggFuncSelect?.setDisplayed(aggFunc != undefined);\n                    },\n                })\n            ))\n        );\n        this.groupComp.addItem(\n            (this.aggFuncSelect = this.createBean(\n                new AgSelect<AggFuncPreset>({\n                    options: [\n                        { value: 'sum', text: this.chartTranslationService.translate('sum') },\n                        { value: 'first', text: this.chartTranslationService.translate('first') },\n                        { value: 'last', text: this.chartTranslationService.translate('last') },\n                        { value: 'min', text: this.chartTranslationService.translate('min') },\n                        { value: 'max', text: this.chartTranslationService.translate('max') },\n                        { value: 'count', text: this.chartTranslationService.translate('count') },\n                        { value: 'avg', text: this.chartTranslationService.translate('avg') },\n                    ],\n                    value: typeof aggFunc === 'string' ? aggFunc : undefined,\n                    onValueChange: (value) => {\n                        this.chartController.setAggFunc(value);\n                    },\n                })\n            ))\n        );\n        this.refreshAggFuncControls(dimensionCols, aggFunc);\n    }\n\n    private refreshAggFuncControls(dimensionCols: ColState[], aggFunc: string | IAggFunc | undefined): void {\n        const selectedDimensions = dimensionCols.filter((col) => col.selected);\n        const supportsAggregation = selectedDimensions.some((col) => col.colId !== ChartDataModel.DEFAULT_CATEGORY);\n        this.aggFuncToggle?.setValue(aggFunc != undefined);\n        this.aggFuncSelect?.setValue(typeof aggFunc === 'string' ? aggFunc : undefined, true);\n        this.aggFuncToggle?.setDisplayed(supportsAggregation);\n        this.aggFuncSelect?.setDisplayed(supportsAggregation && aggFunc != undefined);\n    }\n\n    private clearAggFuncControls(): void {\n        this.aggFuncToggle = this.destroyBean(this.aggFuncToggle);\n        this.aggFuncSelect = this.destroyBean(this.aggFuncSelect);\n    }\n\n    public override destroy(): void {\n        this.clearAggFuncControls();\n        this.groupComp = this.destroyBean(this.groupComp)!;\n        super.destroy();\n    }\n}\n", "import type { AgSelectParams, BeanCollection, ListOption } from '@ag-grid-community/core';\nimport { AgSelect, Component } from '@ag-grid-community/core';\nimport type { AgGroupComponent } from '@ag-grid-enterprise/core';\n\nimport type { AgPillSelectChangeParams } from '../../../../widgets/agPillSelect';\nimport { AgPillSelect } from '../../../../widgets/agPillSelect';\nimport type { ChartController } from '../../chartController';\nimport type { ColState } from '../../model/chartDataModel';\nimport { ChartDataModel } from '../../model/chartDataModel';\nimport type { ChartTranslationKey, ChartTranslationService } from '../../services/chartTranslationService';\n\nexport abstract class DragDataPanel extends Component {\n    protected chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    protected groupComp: AgGroupComponent;\n    protected valuePillSelect?: AgPillSelect<ColState>;\n    private valueSelect?: AgSelect<ColState>;\n\n    constructor(\n        protected readonly chartController: ChartController,\n        protected readonly allowMultipleSelection: boolean,\n        private readonly maxSelection: number | undefined,\n        template?: string\n    ) {\n        super(template);\n    }\n\n    public addItem(eItem: HTMLElement): void {\n        this.groupComp.addItem(eItem);\n    }\n\n    protected createGroup(\n        columns: ColState[],\n        valueFormatter: (colState: ColState) => string,\n        selectLabelKey: ChartTranslationKey,\n        dragSourceId: string,\n        skipAnimation?: () => boolean\n    ): void {\n        if (this.allowMultipleSelection) {\n            const selectedValueList = columns.filter((col) => col.selected);\n            this.valuePillSelect = this.groupComp.createManagedBean(\n                new AgPillSelect<ColState>({\n                    valueList: columns,\n                    selectedValueList,\n                    valueFormatter,\n                    selectPlaceholder: this.chartTranslationService.translate(selectLabelKey),\n                    dragSourceId,\n                    onValuesChange: (params) => this.onValueChange(params),\n                    maxSelection: this.maxSelection,\n                })\n            );\n            this.groupComp.addItem(this.valuePillSelect);\n        } else {\n            const params: AgSelectParams<ColState> = this.createValueSelectParams(columns);\n            params.onValueChange = (updatedColState: ColState) => {\n                columns.forEach((col) => {\n                    col.selected = false;\n                });\n                updatedColState.selected = true;\n                // Clear the category aggregation function if the default ordinal category is selected\n                if (updatedColState.colId === ChartDataModel.DEFAULT_CATEGORY) {\n                    this.chartController.setAggFunc(undefined, true);\n                }\n                this.chartController.updateForPanelChange({ updatedColState, skipAnimation: skipAnimation?.() });\n            };\n            this.valueSelect = this.groupComp.createManagedBean(new AgSelect<ColState>(params));\n            this.groupComp.addItem(this.valueSelect);\n        }\n    }\n\n    protected refreshValueSelect(columns: ColState[]): void {\n        if (!this.valueSelect) {\n            return;\n        }\n        const { options, value } = this.createValueSelectParams(columns);\n        this.valueSelect.clearOptions().addOptions(options).setValue(value, true);\n    }\n\n    private createValueSelectParams(columns: ColState[]): {\n        options: ListOption<ColState>[];\n        value: ColState;\n    } {\n        let selectedValue: ColState;\n        const options = columns.map((value) => {\n            const text = value.displayName ?? '';\n            if (value.selected) {\n                selectedValue = value;\n            }\n            return {\n                value,\n                text,\n            };\n        });\n        return {\n            options,\n            value: selectedValue!,\n        };\n    }\n\n    private onValueChange({ added, updated, removed, selected }: AgPillSelectChangeParams<ColState>) {\n        let updatedColState: ColState | undefined;\n        let resetOrder: boolean | undefined;\n        const updateOrder = () => {\n            selected.forEach((col, index) => {\n                col.order = index;\n            });\n            resetOrder = true;\n        };\n        if (added.length) {\n            updatedColState = added[0];\n            updatedColState.selected = true;\n            updateOrder();\n        } else if (removed.length) {\n            updatedColState = removed[0];\n            updatedColState.selected = false;\n        } else if (updated.length) {\n            updateOrder();\n            updatedColState = updated[0];\n        }\n        if (updatedColState) {\n            this.chartController.updateForPanelChange({ updatedColState, resetOrder });\n        }\n    }\n\n    public override destroy(): void {\n        this.valuePillSelect = undefined;\n        this.valueSelect = undefined;\n        super.destroy();\n    }\n}\n", "import type { DragItem, DraggingEvent, DropTarget, ListOption } from '@ag-grid-community/core';\nimport { AgSelect, Component, DragSourceType, _escapeString, _removeFromParent } from '@ag-grid-community/core';\nimport { PillDragComp, PillDropZonePanel } from '@ag-grid-enterprise/core';\n\nexport interface AgPillSelectParams<TValue = string | null> {\n    valueList?: TValue[];\n    selectedValueList?: TValue[];\n    valueFormatter?: (value: TValue) => string;\n    ariaLabel?: string;\n    selectPlaceholder?: string;\n    onValuesChange?: (params: AgPillSelectChangeParams<TValue>) => void;\n    dragSourceId?: string;\n    maxSelection?: number;\n}\n\nexport interface AgPillSelectChangeParams<TValue> {\n    added: TValue[];\n    removed: TValue[];\n    updated: TValue[];\n    selected: TValue[];\n}\n\nexport class AgPillSelect<TValue = string | null> extends Component {\n    private dropZonePanel: PillSelectDropZonePanel<TValue>;\n    private eSelect?: AgSelect<TValue>;\n\n    private readonly config: AgPillSelectParams<TValue>;\n    private valueList: TValue[];\n    private selectedValues: TValue[];\n    private valueFormatter: (value: TValue) => string;\n    private onValuesChange?: (params: AgPillSelectChangeParams<TValue>) => void;\n\n    constructor(config?: AgPillSelectParams<TValue>) {\n        super(/* html */ `<div class=\"ag-pill-select\" role=\"presentation\"></div>`);\n        this.config = config ?? {};\n\n        const { selectedValueList, valueFormatter, valueList } = this.config;\n        this.selectedValues = selectedValueList ?? [];\n        this.valueList = valueList ?? [];\n        this.valueFormatter = valueFormatter ?? ((value) => _escapeString(value as any)!);\n    }\n\n    public postConstruct(): void {\n        const { ariaLabel, onValuesChange, dragSourceId } = this.config;\n        this.dropZonePanel = this.createManagedBean(\n            new PillSelectDropZonePanel(\n                {\n                    getValues: () => this.selectedValues,\n                    setValues: (values) => this.updateValues(values),\n                    isDraggable: () => this.selectedValues.length > 1,\n                },\n                (value) => this.valueFormatter(value),\n                ariaLabel!,\n                dragSourceId\n            )\n        );\n        const eGui = this.getGui();\n        eGui.appendChild(this.dropZonePanel.getGui());\n        this.initSelect();\n        if (onValuesChange != null) {\n            this.onValuesChange = onValuesChange;\n        }\n    }\n\n    public setValues(valueList: TValue[], selectedValues: TValue[]): this {\n        const { added, removed, updated } = this.getChanges(this.valueList, valueList);\n        let refreshSelect = false;\n        if (added.length || removed.length || updated.length) {\n            refreshSelect = true;\n        }\n        this.valueList = valueList;\n        this.updateValues(selectedValues, refreshSelect, true);\n        return this;\n    }\n\n    public setValueFormatter(valueFormatter: (value: TValue) => string): this {\n        this.valueFormatter = valueFormatter;\n        return this;\n    }\n\n    private initSelect(): boolean {\n        const options = this.createSelectOptions();\n        if (!options.length) {\n            return false;\n        }\n        const { selectPlaceholder: placeholder } = this.config;\n        this.eSelect = this.createBean(\n            new AgSelect({\n                options,\n                placeholder,\n                onValueChange: (value) => this.addValue(value),\n                pickerIcon: 'chartsMenuAdd',\n            })\n        );\n        this.getGui().appendChild(this.eSelect.getGui());\n        return true;\n    }\n\n    private createSelectOptions(): ListOption<TValue>[] {\n        const options: ListOption<TValue>[] = [];\n        const { maxSelection } = this.config;\n        if (maxSelection && this.selectedValues.length >= maxSelection) {\n            return options;\n        }\n        this.valueList.forEach((value) => {\n            if (!this.selectedValues.includes(value)) {\n                options.push({ value, text: this.valueFormatter(value) });\n            }\n        });\n        return options;\n    }\n\n    private addValue(value: TValue): void {\n        this.dropZonePanel.addItem(value);\n    }\n\n    private updateValues(values: TValue[], forceRefreshSelect?: boolean, silent?: boolean): void {\n        const previousSelectedValues = this.selectedValues;\n        this.selectedValues = values;\n        const changes = this.getChanges(previousSelectedValues, values);\n        const refreshSelect = forceRefreshSelect || changes.added.length || changes.removed.length;\n        const activeElement = this.gos.getActiveDomElement();\n        const selectHasFocus = this.eSelect?.getGui().contains(activeElement);\n        const dropZoneHasFocus = this.dropZonePanel?.getGui().contains(activeElement);\n        if (!silent) {\n            this.onValuesChange?.(changes);\n        }\n        const emptyRefreshedSelect = refreshSelect ? !this.refreshSelect() : false;\n        this.dropZonePanel.refreshGui();\n        if (refreshSelect && selectHasFocus) {\n            if (emptyRefreshedSelect) {\n                this.dropZonePanel.focusList(true);\n            } else {\n                this.eSelect?.getFocusableElement().focus();\n            }\n        }\n        if (dropZoneHasFocus && !values.length) {\n            this.eSelect?.getFocusableElement().focus();\n        }\n    }\n\n    private getChanges(\n        previousSelectedValues: TValue[],\n        newSelectedValues: TValue[]\n    ): AgPillSelectChangeParams<TValue> {\n        const added = newSelectedValues.filter((value) => !previousSelectedValues.includes(value));\n        const removed = previousSelectedValues.filter((value) => !newSelectedValues.includes(value));\n        const updated = newSelectedValues.filter((value, index) => previousSelectedValues[index] !== value);\n        return { added, removed, updated, selected: newSelectedValues };\n    }\n\n    private refreshSelect(): boolean {\n        if (!this.eSelect) {\n            return this.initSelect();\n        }\n        const options = this.createSelectOptions();\n        if (!options.length) {\n            _removeFromParent(this.eSelect.getGui());\n            this.eSelect = this.destroyBean(this.eSelect);\n            return false;\n        }\n        this.eSelect.clearOptions().addOptions(options).setValue(undefined, true);\n        return true;\n    }\n\n    public override destroy(): void {\n        this.destroyBean(this.eSelect);\n        super.destroy();\n    }\n}\n\nclass PillSelectDragComp<TValue> extends PillDragComp<TValue> {\n    constructor(\n        private readonly value: TValue,\n        dragSourceDropTarget: DropTarget,\n        ghost: boolean,\n        private readonly valueFormatter: (value: TValue) => string,\n        private readonly draggable: boolean,\n        private readonly sourceId?: string\n    ) {\n        super(dragSourceDropTarget, ghost, false);\n    }\n\n    public getItem(): TValue {\n        return this.value;\n    }\n\n    protected getDisplayName(): string {\n        return this.valueFormatter(this.value);\n    }\n\n    protected getAriaDisplayName(): string {\n        return this.getDisplayName();\n    }\n\n    protected getTooltip(): string | null | undefined {\n        return undefined;\n    }\n\n    protected createGetDragItem(): () => DragItem<TValue> {\n        return () => ({\n            value: this.value,\n        });\n    }\n\n    protected getDragSourceType(): DragSourceType {\n        return DragSourceType.ChartPanel;\n    }\n\n    protected override getDragSourceId(): string | undefined {\n        return this.sourceId;\n    }\n\n    protected override isDraggable(): boolean {\n        return this.draggable;\n    }\n}\n\nclass PillSelectDropZonePanel<TValue> extends PillDropZonePanel<PillSelectDragComp<TValue>, TValue> {\n    constructor(\n        private readonly model: {\n            getValues: () => TValue[];\n            setValues: (values: TValue[]) => void;\n            isDraggable: () => boolean;\n        },\n        private readonly valueFormatter: (value: TValue) => string,\n        private readonly ariaLabel: string,\n        private readonly sourceId?: string\n    ) {\n        super(false);\n    }\n\n    public postConstruct(): void {\n        super.init();\n    }\n\n    protected isItemDroppable(item: TValue, draggingEvent: DraggingEvent): boolean {\n        return (\n            this.isSourceEventFromTarget(draggingEvent) ||\n            (this.sourceId != null && this.sourceId === draggingEvent.dragSource.sourceId)\n        );\n    }\n\n    protected updateItems(items: TValue[]): void {\n        this.model.setValues(items);\n    }\n\n    protected getExistingItems(): TValue[] {\n        return this.model.getValues();\n    }\n\n    protected getIconName(): string {\n        return this.isPotentialDndItems() ? 'move' : 'notAllowed';\n    }\n\n    protected getAriaLabel(): string {\n        return this.ariaLabel;\n    }\n\n    protected createPillComponent(item: TValue, dropTarget: DropTarget, ghost: boolean): PillSelectDragComp<TValue> {\n        return new PillSelectDragComp(\n            item,\n            dropTarget,\n            ghost,\n            this.valueFormatter,\n            this.model.isDraggable(),\n            this.sourceId\n        );\n    }\n\n    protected getItems(dragItem: DragItem): TValue[] {\n        return [dragItem.value];\n    }\n\n    protected isInterestedIn(type: DragSourceType): boolean {\n        return type === DragSourceType.ChartPanel;\n    }\n}\n", "import type { BeanCollection, IChartService } from '@ag-grid-community/core';\nimport { AgSelect, ChartMappings, Component, RefPlaceholder } from '@ag-grid-community/core';\nimport type { AgGroupComponent, AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport type { ChartTranslationService } from '../../services/chartTranslationService';\nimport { canSwitchDirection, getFullChartNameTranslationKey, getSeriesType } from '../../utils/seriesTypeMapper';\nimport type { ChartMenuContext } from '../chartMenuContext';\nimport { ChartMenuParamsFactory } from '../chartMenuParamsFactory';\n\nexport class ChartSpecificDataPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n    private chartService: IChartService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n        this.chartService = beans.chartService!;\n    }\n\n    private readonly chartSpecificGroup: AgGroupComponent = RefPlaceholder;\n\n    private directionSelect?: AgSelect;\n    private groupTypeSelect?: AgSelect;\n    private hasContent = false;\n\n    constructor(\n        private readonly chartMenuContext: ChartMenuContext,\n        private isOpen?: boolean\n    ) {\n        super();\n    }\n\n    public postConstruct(): void {\n        const title = this.getTitle();\n        const chartSpecificGroupParams: AgGroupComponentParams = {\n            title,\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            suppressOpenCloseIcons: false,\n            cssIdentifier: 'charts-data',\n            expanded: this.isOpen,\n            items: [...this.createDirectionSelect(), this.createGroupTypeSelect()],\n        };\n        this.setTemplate(\n            /* html */ `\n            <div id=\"chartSpecificGroup\">\n                <ag-group-component data-ref=\"chartSpecificGroup\"></ag-group-component>\n            </div>`,\n            [AgGroupComponentSelector],\n            {\n                chartSpecificGroup: chartSpecificGroupParams,\n            }\n        );\n        this.setDisplayed(this.hasContent);\n    }\n\n    public refresh(): void {\n        this.hasContent = false;\n        this.chartSpecificGroup.setTitle(this.getTitle());\n        this.updateDirectionSelect();\n        this.updateGroupTypeSelect();\n        this.setDisplayed(this.hasContent);\n    }\n\n    private getTitle(): string {\n        const chartType = this.chartMenuContext.chartController.getChartType();\n        return this.chartTranslationService.translate(getFullChartNameTranslationKey(chartType));\n    }\n\n    private createDirectionSelect(): AgSelect[] {\n        if (!this.chartService.isEnterprise()) {\n            return [];\n        }\n        const { chartOptionsService, chartController } = this.chartMenuContext;\n        const chartOptionsSeriesProxy = chartOptionsService.getSeriesOptionsProxy(() =>\n            getSeriesType(chartController.getChartType())\n        );\n        const chartSeriesMenuParamsFactory = this.createManagedBean(\n            new ChartMenuParamsFactory(chartOptionsSeriesProxy)\n        );\n        const options = (['horizontal', 'vertical'] as const).map((value) => ({\n            value,\n            text: this.chartTranslationService.translate(value),\n        }));\n        const params = chartSeriesMenuParamsFactory.getDefaultSelectParams('direction', 'direction', options);\n        const onValueChange = params.onValueChange;\n        params.onValueChange = (value) => {\n            onValueChange!(value);\n            // series and axes configuration are based on direction\n            chartController.raiseChartModelUpdateEvent();\n        };\n        this.directionSelect = this.createManagedBean(new AgSelect(params));\n        this.updateDirectionSelect();\n        return [this.directionSelect];\n    }\n\n    private updateDirectionSelect(): void {\n        const isDisplayed = canSwitchDirection(this.chartMenuContext.chartController.getChartType());\n        this.updateDisplayed(this.directionSelect, isDisplayed);\n    }\n\n    private createGroupTypeSelect(): AgSelect {\n        const { chartController, chartMenuParamsFactory } = this.chartMenuContext;\n        this.groupTypeSelect = this.createManagedBean(\n            new AgSelect(\n                chartMenuParamsFactory.getDefaultSelectParamsWithoutValueParams(\n                    'seriesGroupType',\n                    ChartMappings.SERIES_GROUP_TYPES.map((value) => ({\n                        value,\n                        text: this.chartTranslationService.translate(`${value}SeriesGroupType`),\n                    })),\n                    chartController.getSeriesGroupType(),\n                    (value) => chartController.setSeriesGroupType(value)\n                )\n            )\n        );\n        this.updateGroupTypeSelect();\n        return this.groupTypeSelect;\n    }\n\n    private updateGroupTypeSelect(): void {\n        const isDisplayed = ['radialColumn', 'radialBar', 'nightingale'].includes(\n            this.chartMenuContext.chartController.getChartType()\n        );\n        this.updateDisplayed(this.groupTypeSelect, isDisplayed);\n    }\n\n    private updateDisplayed(select: AgSelect | undefined, isDisplayed: boolean): void {\n        select?.setDisplayed(isDisplayed);\n        if (select) {\n            this.hasContent = this.hasContent || isDisplayed;\n        }\n    }\n}\n", "import type {\n    AgCheckboxParams,\n    AgFieldParams,\n    AgInputNumberFieldParams,\n    AgSelectParams,\n    BeanCollection,\n    ListOption,\n} from '@ag-grid-community/core';\nimport { BeanStub } from '@ag-grid-community/core';\n\nimport type { AgColorPickerParams } from '../../../widgets/agColorPicker';\nimport type { AgSliderParams } from '../../../widgets/agSlider';\nimport type { ChartOptionsProxy } from '../services/chartOptionsService';\nimport type { ChartTranslationKey, ChartTranslationService } from '../services/chartTranslationService';\nimport type { FontPanelParams } from './format/fontPanel';\n\nexport class ChartMenuParamsFactory extends BeanStub {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    constructor(private readonly chartOptionsProxy: ChartOptionsProxy) {\n        super();\n    }\n\n    public getDefaultColorPickerParams(\n        expression: string,\n        labelKey?: ChartTranslationKey,\n        options?: {\n            parseInputValue: (value: any) => any;\n            formatInputValue: (value: any) => any;\n        }\n    ): AgColorPickerParams {\n        return this.addValueParams(\n            expression,\n            {\n                label: this.chartTranslationService.translate(labelKey ?? 'color'),\n                labelWidth: 'flex',\n                inputWidth: 'flex',\n                labelAlignment: 'top',\n                pickerGap: 6,\n            },\n            options\n        );\n    }\n\n    public getDefaultNumberInputParams(\n        expression: string,\n        labelKey: ChartTranslationKey,\n        options?: {\n            precision?: number;\n            step?: number;\n            min?: number;\n            max?: number;\n        }\n    ): AgInputNumberFieldParams {\n        return this.addValueParams<AgInputNumberFieldParams>(\n            expression,\n            {\n                label: this.chartTranslationService.translate(labelKey),\n                labelAlignment: 'top',\n                labelWidth: 'flex',\n                inputWidth: 'flex',\n                precision: options?.precision,\n                step: options?.step,\n                min: options?.min,\n                max: options?.max,\n            },\n            {\n                parseInputValue: (value) => {\n                    const numberValue = Number(value);\n                    return isNaN(numberValue) ? undefined : numberValue;\n                },\n                formatInputValue: (value) => {\n                    return value == null ? '' : `${value}`;\n                },\n            }\n        );\n    }\n\n    public getDefaultSliderParams(\n        expression: string,\n        labelKey: ChartTranslationKey,\n        defaultMaxValue: number,\n        isArray?: boolean\n    ): AgSliderParams {\n        let value = this.chartOptionsProxy.getValue<number>(expression) ?? 0;\n        if (isArray && Array.isArray(value)) {\n            value = value[0];\n        }\n        const params = this.getDefaultSliderParamsWithoutValueParams(value, labelKey, defaultMaxValue);\n        params.onValueChange = (value) => this.chartOptionsProxy.setValue(expression, isArray ? [value] : value);\n        return params;\n    }\n\n    public getDefaultSliderParamsWithoutValueParams(\n        value: number,\n        labelKey: ChartTranslationKey,\n        defaultMaxValue: number\n    ): AgSliderParams {\n        return {\n            label: this.chartTranslationService.translate(labelKey),\n            minValue: 0,\n            maxValue: Math.max(value, defaultMaxValue),\n            textFieldWidth: 45,\n            value: `${value}`,\n        };\n    }\n\n    public getDefaultCheckboxParams(\n        expression: string,\n        labelKey: ChartTranslationKey,\n        options?: {\n            readOnly?: boolean;\n            passive?: boolean;\n        }\n    ): AgCheckboxParams {\n        const value = this.chartOptionsProxy.getValue<boolean>(expression);\n        const params: AgCheckboxParams = {\n            label: this.chartTranslationService.translate(labelKey),\n            value,\n            readOnly: options?.readOnly,\n            passive: options?.passive,\n        };\n        params.onValueChange = (value) => {\n            this.chartOptionsProxy.setValue(expression, typeof value === 'boolean' ? value : undefined);\n        };\n        return params;\n    }\n\n    public getDefaultSelectParams(\n        expression: string,\n        labelKey: ChartTranslationKey,\n        dropdownOptions: Array<ListOption>\n    ): AgSelectParams {\n        return this.getDefaultSelectParamsWithoutValueParams(\n            labelKey,\n            dropdownOptions,\n            this.chartOptionsProxy.getValue(expression),\n            (value) => {\n                this.chartOptionsProxy.setValue(expression, value);\n            }\n        );\n    }\n\n    public getDefaultSelectParamsWithoutValueParams(\n        labelKey: ChartTranslationKey,\n        options: Array<ListOption>,\n        value: any,\n        onValueChange: (value: any) => void\n    ): AgSelectParams {\n        return {\n            label: this.chartTranslationService.translate(labelKey),\n            labelAlignment: 'top',\n            options,\n            pickerGap: 6,\n            value,\n            onValueChange,\n        };\n    }\n\n    public getDefaultFontPanelParams(expression: string, labelKey: ChartTranslationKey): FontPanelParams {\n        const keyMapper = (key: string) => `${expression}.${key}`;\n        return this.addEnableParams<FontPanelParams>(keyMapper('enabled'), {\n            name: this.chartTranslationService.translate(labelKey),\n            suppressEnabledCheckbox: false,\n            chartMenuParamsFactory: this,\n            keyMapper,\n        } as any);\n    }\n\n    public addValueParams<P extends AgFieldParams>(\n        expression: string,\n        params: P,\n        options?: {\n            parseInputValue: (value: any) => any;\n            formatInputValue: (value: any) => any;\n        }\n    ): P {\n        const optionsValue = this.chartOptionsProxy.getValue(expression);\n        params.value = options?.formatInputValue ? options.formatInputValue(optionsValue) : optionsValue;\n        params.onValueChange = (value) => {\n            const optionsValue = options?.parseInputValue ? options.parseInputValue(value) : value;\n            this.chartOptionsProxy.setValue(expression, optionsValue);\n        };\n        return params;\n    }\n\n    public addEnableParams<\n        P extends {\n            enabled?: boolean;\n            onEnableChange?: (value: boolean) => void;\n        },\n    >(expression: string, params: P): P {\n        params.enabled = this.chartOptionsProxy.getValue(expression) ?? false;\n        params.onEnableChange = (value) => this.chartOptionsProxy.setValue(expression, value);\n        return params;\n    }\n\n    public getChartOptions(): ChartOptionsProxy {\n        return this.chartOptionsProxy;\n    }\n}\n", "import type { BeanCollection, ChartType, SeriesChartType } from '@ag-grid-community/core';\nimport { AgCheckbox, AgSelect, Component, _areEqual, _clearElement } from '@ag-grid-community/core';\nimport { AgGroupComponent } from '@ag-grid-enterprise/core';\n\nimport type { ChartController } from '../../chartController';\nimport type { ColState } from '../../model/chartDataModel';\nimport type { ChartTranslationService } from '../../services/chartTranslationService';\n\nexport class SeriesChartTypePanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    private seriesChartTypeGroupComp: AgGroupComponent;\n    private selectedColIds: string[] = [];\n    private chartTypeComps: Map<string, AgSelect> = new Map();\n    private secondaryAxisComps: Map<string, AgCheckbox> = new Map();\n\n    constructor(\n        private readonly chartController: ChartController,\n        private columns: ColState[],\n        private isOpen?: boolean\n    ) {\n        super(/* html */ `<div id=\"seriesChartTypeGroup\"></div>`);\n    }\n\n    public postConstruct() {\n        this.createSeriesChartTypeGroup(this.columns);\n    }\n\n    public refresh(columns: ColState[]): void {\n        if (!_areEqual(this.getValidColIds(columns), this.selectedColIds)) {\n            this.recreate(columns);\n        } else {\n            this.refreshComps();\n        }\n    }\n\n    private recreate(columns: ColState[]): void {\n        this.isOpen = this.seriesChartTypeGroupComp.isExpanded();\n        _clearElement(this.getGui());\n        this.destroyBean(this.seriesChartTypeGroupComp);\n        this.columns = columns;\n        this.selectedColIds = [];\n        this.clearComps();\n        this.postConstruct();\n    }\n\n    private getValidColIds(columns: ColState[]): string[] {\n        const seriesChartTypes = this.chartController.getSeriesChartTypes();\n\n        return columns\n            .filter((col) => col.selected && !!seriesChartTypes.filter((s) => s.colId === col.colId)[0])\n            .map(({ colId }) => colId);\n    }\n\n    private createSeriesChartTypeGroup(columns: ColState[]): void {\n        this.seriesChartTypeGroupComp = this.createBean(\n            new AgGroupComponent({\n                title: this.chartTranslationService.translate('seriesChartType'),\n                enabled: true,\n                suppressEnabledCheckbox: true,\n                suppressOpenCloseIcons: false,\n                cssIdentifier: 'charts-data',\n                expanded: this.isOpen,\n            })\n        );\n\n        const seriesChartTypes = this.chartController.getSeriesChartTypes();\n\n        columns.forEach((col) => {\n            if (!col.selected) {\n                return;\n            }\n\n            const seriesChartType: SeriesChartType = seriesChartTypes.filter((s) => s.colId === col.colId)[0];\n            if (!seriesChartType) {\n                return;\n            }\n\n            this.selectedColIds.push(col.colId);\n\n            const seriesItemGroup = this.seriesChartTypeGroupComp.createManagedBean(\n                new AgGroupComponent({\n                    title: col.displayName!,\n                    enabled: true,\n                    suppressEnabledCheckbox: true,\n                    suppressOpenCloseIcons: true,\n                    cssIdentifier: 'charts-format-sub-level',\n                })\n            );\n\n            const isSecondaryAxisDisabled = (chartType: ChartType) =>\n                ['groupedColumn', 'stackedColumn', 'stackedArea'].includes(chartType);\n\n            const secondaryAxisComp = this.seriesChartTypeGroupComp.createManagedBean(\n                new AgCheckbox({\n                    label: this.chartTranslationService.translate('secondaryAxis'),\n                    labelWidth: 'flex',\n                    disabled: isSecondaryAxisDisabled(seriesChartType.chartType),\n                    value: !!seriesChartType.secondaryAxis,\n                    onValueChange: (enabled: boolean) =>\n                        this.chartController.updateSeriesChartType(col.colId, undefined, enabled),\n                })\n            );\n\n            seriesItemGroup.addItem(secondaryAxisComp);\n\n            const options = (['line', 'area', 'stackedArea', 'groupedColumn', 'stackedColumn'] as const).map(\n                (value) => ({ value, text: this.chartTranslationService.translate(value) })\n            );\n\n            const chartTypeComp = seriesItemGroup.createManagedBean(\n                new AgSelect({\n                    options,\n                    value: seriesChartType.chartType,\n                    onValueChange: (chartType: ChartType) =>\n                        this.chartController.updateSeriesChartType(col.colId, chartType),\n                })\n            );\n\n            seriesItemGroup.addItem(chartTypeComp);\n\n            this.seriesChartTypeGroupComp.addItem(seriesItemGroup);\n            this.chartTypeComps.set(col.colId, chartTypeComp);\n            this.secondaryAxisComps.set(col.colId, secondaryAxisComp);\n        });\n\n        this.getGui().appendChild(this.seriesChartTypeGroupComp.getGui());\n    }\n\n    private refreshComps(): void {\n        const seriesChartTypes = this.chartController.getSeriesChartTypes();\n        this.selectedColIds.forEach((colId) => {\n            const seriesChartType = seriesChartTypes.find((chartType) => chartType.colId === colId);\n            if (!seriesChartType) {\n                return;\n            }\n            const chartTypeComp = this.chartTypeComps.get(colId);\n            const secondaryAxisComp = this.secondaryAxisComps.get(colId);\n\n            chartTypeComp?.setValue(seriesChartType.chartType);\n            secondaryAxisComp?.setValue(!!seriesChartType.secondaryAxis);\n            secondaryAxisComp?.setDisabled(this.isSecondaryAxisDisabled(seriesChartType.chartType));\n        });\n    }\n\n    private clearComps(): void {\n        this.chartTypeComps.clear();\n        this.secondaryAxisComps.clear();\n    }\n\n    private isSecondaryAxisDisabled(chartType: ChartType): boolean {\n        return ['groupedColumn', 'stackedColumn', 'stackedArea'].includes(chartType);\n    }\n\n    public override destroy(): void {\n        this.clearComps();\n        this.seriesChartTypeGroupComp = this.destroyBean(this.seriesChartTypeGroupComp)!;\n        super.destroy();\n    }\n}\n", "import { AgToggleButton } from '@ag-grid-community/core';\nimport { AgGroupComponent } from '@ag-grid-enterprise/core';\n\nimport type { ChartController } from '../../chartController';\nimport type { ColState } from '../../model/chartDataModel';\nimport type { ChartOptionsService } from '../../services/chartOptionsService';\nimport { DragDataPanel } from './dragDataPanel';\n\nexport class SeriesDataPanel extends DragDataPanel {\n    constructor(\n        chartController: ChartController,\n        private readonly chartOptionsService: ChartOptionsService,\n        private readonly title: string,\n        allowMultipleSelect: boolean,\n        maxSelection: number | undefined,\n        private valueCols: ColState[],\n        private isOpen?: boolean\n    ) {\n        super(chartController, allowMultipleSelect, maxSelection, /* html */ `<div id=\"seriesGroup\"></div>`);\n    }\n\n    public postConstruct() {\n        this.groupComp = this.createBean(\n            new AgGroupComponent({\n                title: this.title,\n                enabled: true,\n                suppressEnabledCheckbox: true,\n                suppressOpenCloseIcons: false,\n                cssIdentifier: 'charts-data',\n                expanded: this.isOpen,\n            })\n        );\n        if (this.chartController.isActiveXYChart()) {\n            const pairedModeToggle = this.groupComp.createManagedBean(\n                new AgToggleButton({\n                    label: this.chartTranslationService.translate('paired'),\n                    labelAlignment: 'left',\n                    labelWidth: 'flex',\n                    inputWidth: 'flex',\n                    value: this.chartOptionsService.getPairedMode(),\n                    onValueChange: (newValue) => {\n                        this.chartOptionsService.setPairedMode(!!newValue);\n                        this.chartController.updateForGridChange({ maintainColState: true });\n                    },\n                })\n            );\n            this.groupComp.addItem(pairedModeToggle);\n        }\n\n        this.createGroup(this.valueCols, this.generateGetSeriesLabel(this.valueCols), 'seriesAdd', 'seriesSelect');\n\n        this.getGui().appendChild(this.groupComp.getGui());\n    }\n\n    public refresh(valueCols: ColState[]): void {\n        this.valuePillSelect?.setValueFormatter(this.generateGetSeriesLabel(valueCols));\n        this.valuePillSelect?.setValues(\n            valueCols,\n            valueCols.filter((col) => col.selected)\n        );\n        this.refreshValueSelect(valueCols);\n    }\n\n    private generateGetSeriesLabel(valueCols: ColState[]): (col: ColState) => string {\n        if (!this.chartController.isActiveXYChart()) {\n            return (col) => col.displayName ?? '';\n        }\n\n        const selectedCols = valueCols.filter((col) => col.selected);\n\n        const isBubble = this.chartController.getChartType() === 'bubble';\n        const isInPairedMode = this.chartOptionsService.getPairedMode();\n\n        const indexToAxisLabel = new Map<number, string>();\n        indexToAxisLabel.set(0, 'X');\n        indexToAxisLabel.set(1, 'Y');\n        indexToAxisLabel.set(2, 'size');\n\n        return (col: ColState): string => {\n            const escapedLabel = col.displayName ?? '';\n\n            if (!col.selected) {\n                return escapedLabel;\n            }\n\n            const index = selectedCols.indexOf(col);\n\n            if (index === -1) {\n                return escapedLabel;\n            }\n\n            let axisLabel;\n\n            if (isInPairedMode) {\n                axisLabel = indexToAxisLabel.get(index % (isBubble ? 3 : 2));\n            } else {\n                if (index === 0) {\n                    axisLabel = 'X';\n                } else {\n                    axisLabel = isBubble && index % 2 === 0 ? 'size' : 'Y';\n                }\n            }\n\n            return `${escapedLabel} (${axisLabel})`;\n        };\n    }\n\n    public override destroy(): void {\n        this.groupComp = this.destroyBean(this.groupComp)!;\n        super.destroy();\n    }\n}\n", "import type { ChartFormatPanel, ChartFormatPanelGroup } from '@ag-grid-community/core';\nimport { Component, _warnOnce } from '@ag-grid-community/core';\nimport type { AgGroupComponent } from '@ag-grid-enterprise/core';\n\nimport type { ChartSeriesType } from '../../utils/seriesTypeMapper';\nimport { isCartesian, isPolar } from '../../utils/seriesTypeMapper';\nimport type { ChartMenuContext } from '../chartMenuContext';\nimport { ChartPanelFeature } from '../chartPanelFeature';\nimport { CartesianAxisPanel } from './axis/cartesianAxisPanel';\nimport { PolarAxisPanel } from './axis/polarAxisPanel';\nimport { ChartPanel } from './chart/chartPanel';\nimport { GroupExpansionFeature } from './groupExpansionFeature';\nimport { LegendPanel } from './legend/legendPanel';\nimport { SeriesPanel } from './series/seriesPanel';\nimport { TitlesPanel } from './titles/titlesPanel';\n\nexport interface FormatPanelOptions extends ChartMenuContext {\n    isExpandedOnInit: boolean;\n    seriesType: ChartSeriesType;\n    registerGroupComponent: (groupComponent: AgGroupComponent) => void;\n}\n\nconst DefaultFormatPanelDef: ChartFormatPanel = {\n    groups: [{ type: 'chart' }, { type: 'titles' }, { type: 'legend' }, { type: 'series' }, { type: 'axis' }],\n};\n\nexport class FormatPanel extends Component {\n    private chartPanelFeature: ChartPanelFeature;\n    private groupExpansionFeature: GroupExpansionFeature;\n\n    constructor(private readonly chartMenuContext: ChartMenuContext) {\n        super(/* html */ `<div class=\"ag-chart-format-wrapper\"></div>`);\n    }\n\n    public postConstruct() {\n        this.groupExpansionFeature = this.createManagedBean(new GroupExpansionFeature(this.getGui()));\n        this.chartPanelFeature = this.createManagedBean(\n            new ChartPanelFeature(\n                this.chartMenuContext.chartController,\n                this.getGui(),\n                'ag-chart-format-section',\n                (_chartType, seriesType) => this.createPanels(seriesType)\n            )\n        );\n        this.chartPanelFeature.refreshPanels();\n    }\n\n    private createPanels(seriesType: ChartSeriesType) {\n        let panelExpandedOnInit = false;\n        this.getFormatPanelDef().groups?.forEach(({ type: group, isOpen: isExpandedOnInit = false }) => {\n            // ensure the group should be displayed for the current series type\n            if (!this.isGroupPanelShownInSeries(group, seriesType)) {\n                return;\n            }\n\n            if (isExpandedOnInit) {\n                if (panelExpandedOnInit) {\n                    _warnOnce(\n                        `As of v32, only one charts customize panel group can be expanded at a time. '${group}' will not be expanded.`\n                    );\n                }\n                panelExpandedOnInit = true;\n            }\n\n            const registerGroupComponent = (groupComponent: AgGroupComponent) =>\n                this.groupExpansionFeature.addGroupComponent(groupComponent);\n\n            const opts: FormatPanelOptions = {\n                ...this.chartMenuContext,\n                isExpandedOnInit,\n                seriesType,\n                registerGroupComponent,\n            };\n\n            switch (group) {\n                case 'chart':\n                    this.chartPanelFeature.addComponent(new ChartPanel(opts));\n                    break;\n                case 'titles':\n                    this.chartPanelFeature.addComponent(new TitlesPanel(opts));\n                    break;\n                case 'legend':\n                    this.chartPanelFeature.addComponent(new LegendPanel(opts));\n                    break;\n                case 'axis':\n                    // Polar charts have different axis options from cartesian charts, so choose the appropriate panels\n                    if (isPolar(seriesType)) {\n                        this.chartPanelFeature.addComponent(new PolarAxisPanel(opts));\n                    } else if (isCartesian(seriesType)) {\n                        this.chartPanelFeature.addComponent(new CartesianAxisPanel('xAxis', opts));\n                        this.chartPanelFeature.addComponent(new CartesianAxisPanel('yAxis', opts));\n                    }\n                    break;\n                case 'horizontalAxis':\n                    this.chartPanelFeature.addComponent(new CartesianAxisPanel('xAxis', opts));\n                    break;\n                case 'verticalAxis':\n                    this.chartPanelFeature.addComponent(new CartesianAxisPanel('yAxis', opts));\n                    break;\n                case 'series':\n                    this.chartPanelFeature.addComponent(new SeriesPanel(opts));\n                    break;\n                case 'navigator':\n                    _warnOnce(\n                        `'navigator' is now displayed in the charts advanced settings instead of the customize panel, and this setting will be ignored.`\n                    );\n                    break;\n                default:\n                    _warnOnce(`Invalid charts customize panel group name supplied: '${group}'`);\n            }\n        });\n    }\n\n    private getFormatPanelDef() {\n        const userProvidedFormatPanelDef = this.gos.get('chartToolPanelsDef')?.formatPanel;\n        return userProvidedFormatPanelDef ? userProvidedFormatPanelDef : DefaultFormatPanelDef;\n    }\n\n    private isGroupPanelShownInSeries(group: ChartFormatPanelGroup, seriesType: ChartSeriesType): boolean {\n        return (\n            ['chart', 'titles', 'legend', 'series'].includes(group) ||\n            (isCartesian(seriesType) && ['axis', 'horizontalAxis', 'verticalAxis'].includes(group)) ||\n            (isPolar(seriesType) && group === 'axis')\n        );\n    }\n}\n", "import type { AgSelect, AgSelectParams, BeanCollection, ListOption } from '@ag-grid-community/core';\nimport {\n    AgCheckbox,\n    AgSelectSelector,\n    Component,\n    RefPlaceholder,\n    _removeFromParent,\n    _setDisplayed,\n} from '@ag-grid-community/core';\nimport type { AgGroupComponent, AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\nimport type { AgCartesianAxisOptions } from 'ag-charts-community';\n\nimport { AgAngleSelect } from '../../../../../widgets/agAngleSelect';\nimport type { AgColorPickerParams } from '../../../../../widgets/agColorPicker';\nimport { AgColorPickerSelector } from '../../../../../widgets/agColorPicker';\nimport type { AgSliderParams } from '../../../../../widgets/agSlider';\nimport { AgSlider, AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartOptionsProxy } from '../../../services/chartOptionsService';\nimport type { ChartTranslationKey, ChartTranslationService } from '../../../services/chartTranslationService';\nimport { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\nimport type { FontPanelParams } from '../fontPanel';\nimport { FontPanel } from '../fontPanel';\nimport type { FormatPanelOptions } from '../formatPanel';\nimport { AxisTicksPanel } from './axisTicksPanel';\nimport { GridLinePanel } from './gridLinePanel';\n\nconst DEFAULT_TIME_AXIS_FORMAT = '%d %B %Y';\n\nexport class CartesianAxisPanel extends Component {\n    private readonly axisGroup: AgGroupComponent = RefPlaceholder;\n    private readonly axisTypeSelect: AgSelect = RefPlaceholder;\n    private readonly axisPositionSelect: AgSelect = RefPlaceholder;\n    private readonly axisTimeFormatSelect: AgSelect = RefPlaceholder;\n\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    private readonly chartOptionsSeriesProxy: ChartOptionsProxy;\n\n    private activePanels: Component[] = [];\n    private axisLabelUpdateFuncs: ((...args: any[]) => any)[] = [];\n\n    private prevRotation: number | undefined;\n\n    constructor(\n        private readonly axisType: 'xAxis' | 'yAxis',\n        private readonly options: FormatPanelOptions\n    ) {\n        super();\n\n        const { chartOptionsService, seriesType } = options;\n        this.chartOptionsSeriesProxy = chartOptionsService.getSeriesOptionsProxy(() => seriesType);\n    }\n\n    public postConstruct() {\n        const {\n            isExpandedOnInit: expanded,\n            chartOptionsService,\n            chartController,\n            registerGroupComponent,\n        } = this.options;\n        const labelKey: ChartTranslationKey = this.axisType;\n        const axisGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-top-level',\n            direction: 'vertical',\n            title: this.translate(labelKey),\n            expanded,\n            suppressEnabledCheckbox: true,\n        };\n\n        const chartAxisOptionsProxy = chartOptionsService.getCartesianAxisOptionsProxy(this.axisType);\n        const chartAxisOptions = this.createManagedBean(new ChartMenuParamsFactory(chartAxisOptionsProxy));\n        const chartAxisThemeOverrides = this.createManagedBean(\n            new ChartMenuParamsFactory(chartOptionsService.getCartesianAxisThemeOverridesProxy(this.axisType))\n        );\n\n        const axisTypeSelectParams = this.getAxisTypeSelectParams(\n            chartAxisOptions,\n            chartOptionsService.getCartesianAxisAppliedThemeOverridesProxy(this.axisType)\n        );\n        const axisPositionSelectParams = this.getAxisPositionSelectParams(chartAxisOptions);\n        const axisTimeFormatSelectParams = this.getAxisTimeFormatSelectParams(chartAxisOptions);\n        const axisColorInputParams = this.getAxisColorInputParams(chartAxisThemeOverrides);\n        const axisLineWidthSliderParams = this.getAxisLineWidthSliderParams(chartAxisThemeOverrides);\n\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"axisGroup\">\n                <ag-select data-ref=\"axisTypeSelect\"></ag-select>\n                <ag-select data-ref=\"axisTimeFormatSelect\"></ag-select>\n                <ag-select data-ref=\"axisPositionSelect\"></ag-select>\n                <ag-color-picker data-ref=\"axisColorInput\"></ag-color-picker>\n                <ag-slider data-ref=\"axisLineWidthSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgSelectSelector, AgColorPickerSelector, AgSliderSelector],\n            {\n                axisGroup: axisGroupParams,\n                axisTypeSelect: axisTypeSelectParams ?? undefined,\n                axisPositionSelect: axisPositionSelectParams ?? undefined,\n                axisTimeFormatSelect: axisTimeFormatSelectParams ?? undefined,\n                axisColorInput: axisColorInputParams,\n                axisLineWidthSlider: axisLineWidthSliderParams,\n            }\n        );\n        registerGroupComponent(this.axisGroup);\n\n        this.axisTypeSelect.setDisplayed(!!axisTypeSelectParams.options?.length);\n        if (!axisPositionSelectParams) this.removeTemplateComponent(this.axisPositionSelect);\n        const updateTimeFormatVisibility = () => {\n            const isTimeAxis = chartAxisOptionsProxy.getValue('type') === 'time';\n            _setDisplayed(this.axisTimeFormatSelect.getGui(), isTimeAxis);\n        };\n        if (!axisTimeFormatSelectParams) {\n            this.removeTemplateComponent(this.axisTimeFormatSelect);\n        } else {\n            // Conditionally hide the time format input based on the currently selected axis type\n            updateTimeFormatVisibility();\n            // Update the visibility whenever the axis type changes\n            this.addManagedEventListeners({\n                chartOptionsChanged: () => {\n                    updateTimeFormatVisibility();\n                },\n            });\n        }\n\n        this.initGridLines(chartAxisThemeOverrides);\n        this.initAxisTicks(chartAxisThemeOverrides);\n        this.initAxisLabels(chartAxisThemeOverrides);\n\n        const updateAxisLabelRotations = () => this.axisLabelUpdateFuncs.forEach((func) => func());\n        this.addManagedListeners(chartController, {\n            chartUpdated: updateAxisLabelRotations,\n            chartModelUpdate: () =>\n                setTimeout(() => {\n                    // make sure this runs after the actual chart update has happened\n                    this.refreshAxisTypeSelect(chartAxisOptions);\n                    updateTimeFormatVisibility();\n                }),\n        });\n    }\n\n    private getAxisTypeSelectParams(\n        chartAxisOptions: ChartMenuParamsFactory,\n        chartAxisAppliedThemeOverrides: ChartOptionsProxy\n    ): AgSelectParams {\n        const chartOptions = chartAxisOptions.getChartOptions();\n        const axisTypeSelectOptions = this.getAxisTypeSelectOptions();\n        const params = chartAxisOptions.getDefaultSelectParams('type', 'axisType', axisTypeSelectOptions);\n        params.onValueChange = (value: AgCartesianAxisOptions['type']): void => {\n            const previousAxisType = chartOptions.getValue<AgCartesianAxisOptions['type']>('type');\n            if (value === previousAxisType) return;\n            // If the axis type is changed, we need to carry over all the accumulated theme overrides\n            // that have been applied to the existing axis type so far\n            const previousAxisThemeOverrides = chartAxisAppliedThemeOverrides.getValue<AgCartesianAxisOptions>('*');\n            // Optionally update the axis label format when switching between time and non-time axes\n            const previousAxisIsTimeAxis = previousAxisType === 'time';\n            const updatedAxisIsTimeAxis = value === 'time';\n            const updatedLabelFormat =\n                previousAxisIsTimeAxis !== updatedAxisIsTimeAxis\n                    ? updatedAxisIsTimeAxis\n                        ? DEFAULT_TIME_AXIS_FORMAT\n                        : undefined\n                    : null;\n            // Update the axis type (and label format if necessary)\n            this.options.chartOptionsService.setCartesianCategoryAxisType(this.axisType, value);\n            if (updatedLabelFormat !== null) {\n                const existingLabel = chartOptions.getValue<AgCartesianAxisOptions['label']>('label') ?? {};\n                chartOptions.setValue<AgCartesianAxisOptions['label']>('label', {\n                    ...existingLabel,\n                    format: updatedLabelFormat,\n                });\n            }\n            // Reapply the previous theme overrides to the new axis type\n            chartAxisAppliedThemeOverrides.setValue<AgCartesianAxisOptions>('*', previousAxisThemeOverrides);\n        };\n        return params;\n    }\n\n    private refreshAxisTypeSelect(chartAxisOptions: ChartMenuParamsFactory): void {\n        const options = this.getAxisTypeSelectOptions();\n        const hasOptions = !!options.length;\n        this.axisTypeSelect.setDisplayed(hasOptions);\n\n        if (!hasOptions) {\n            return;\n        }\n\n        this.axisTypeSelect\n            .clearOptions()\n            .addOptions(options)\n            .setValue(chartAxisOptions.getChartOptions().getValue('type'));\n    }\n\n    private getAxisTypeSelectOptions(): ListOption[] {\n        const { chartController } = this.options;\n        const chartType = chartController.getChartType();\n        const supportsNumericalAxis = () => {\n            const testDatum = chartController.getChartData()[0];\n            if (!testDatum) {\n                return false;\n            }\n            return chartController.getSelectedDimensions().every((col) => !isNaN(parseFloat(testDatum[col.colId])));\n        };\n        if (\n            ['heatmap', 'histogram', 'boxPlot', 'rangeBar', 'scatter', 'bubble'].includes(chartType) ||\n            chartController.isGrouping() ||\n            !this.isCategoryAxis() ||\n            chartController.isCategorySeriesSwitched() ||\n            !supportsNumericalAxis()\n        ) {\n            return [];\n        }\n\n        return ['category', 'number', 'time'].map((value: 'category' | 'number' | 'time') => ({\n            value,\n            text: this.translate(value),\n        }));\n    }\n\n    private isCategoryAxis(): boolean {\n        const isHorizontal = this.chartOptionsSeriesProxy.getValue('direction') === 'horizontal';\n        return (isHorizontal && this.axisType === 'yAxis') || (!isHorizontal && this.axisType === 'xAxis');\n    }\n\n    private getAxisPositionSelectParams(chartAxisOptions: ChartMenuParamsFactory): AgSelectParams | null {\n        const axisPositionSelectOptions = ((chartType, axisType) => {\n            switch (chartType) {\n                // Some chart types do not support configuring the axis position\n                case 'heatmap':\n                    return null;\n                default:\n                    switch (axisType) {\n                        // Horizontal axis position can be changed between top and bottom\n                        case 'xAxis':\n                            return [\n                                { value: 'top', text: this.translate('top') },\n                                { value: 'bottom', text: this.translate('bottom') },\n                            ];\n                        // Vertical axis position can be changed between left and right\n                        case 'yAxis':\n                            return [\n                                { value: 'left', text: this.translate('left') },\n                                { value: 'right', text: this.translate('right') },\n                            ];\n                    }\n            }\n        })(this.options.chartController.getChartType(), this.axisType);\n        if (!axisPositionSelectOptions) return null;\n        return chartAxisOptions.getDefaultSelectParams('position', 'position', axisPositionSelectOptions);\n    }\n\n    private getAxisTimeFormatSelectParams(chartAxisOptions: ChartMenuParamsFactory): AgSelectParams | null {\n        if (!this.isCategoryAxis()) {\n            return null;\n        }\n\n        const axisTimeFormatSelectOptions = [\n            { value: '%d/%m/%Y', text: this.translate('timeFormatSlashesDDMMYYYY') },\n            { value: '%m/%d/%Y', text: this.translate('timeFormatSlashesMMDDYYYY') },\n            { value: '%d/%m/%y', text: this.translate('timeFormatSlashesDDMMYY') },\n            { value: '%m/%d/%y', text: this.translate('timeFormatSlashesMMDDYY') },\n            { value: '%d.%e.%y', text: this.translate('timeFormatDotsDDMYY') },\n            { value: '%e.%d.%y', text: this.translate('timeFormatDotsMDDYY') },\n            { value: '%Y-%m-%d', text: this.translate('timeFormatDashesYYYYMMDD') },\n            { value: '%d %B %Y', text: this.translate('timeFormatSpacesDDMMMMYYYY') },\n            { value: '%H:%M:%S', text: this.translate('timeFormatHHMMSS') },\n            { value: '%I:%M:%S %p', text: this.translate('timeFormatHHMMSSAmPm') },\n        ];\n\n        return chartAxisOptions.getDefaultSelectParams('label.format', 'timeFormat', axisTimeFormatSelectOptions);\n    }\n\n    private getAxisColorInputParams(chartAxisThemeOverrides: ChartMenuParamsFactory): AgColorPickerParams {\n        return chartAxisThemeOverrides.getDefaultColorPickerParams('line.stroke');\n    }\n\n    private getAxisLineWidthSliderParams(chartAxisThemeOverrides: ChartMenuParamsFactory): AgSliderParams {\n        const chartOptions = chartAxisThemeOverrides.getChartOptions();\n        // Note that there is no separate checkbox for enabling/disabling the axis line. Whenever the line width is\n        // changed, the value for `line.enabled` is inferred based on the whether the `line.width` value is non-zero.\n        const getAxisLineWidth = (): number | null => {\n            const isAxisLineEnabled = chartOptions.getValue<boolean>('line.enabled');\n            if (!isAxisLineEnabled) return null;\n            return chartOptions.getValue<number>('line.width');\n        };\n        const setAxisLineWidth = (value: number | null): void => {\n            chartOptions.setValues<number | boolean>([\n                { expression: 'line.enabled', value: value != null },\n                { expression: 'line.width', value: value ?? 0 },\n            ]);\n        };\n        const axisLineWidthSliderParams = chartAxisThemeOverrides.getDefaultSliderParamsWithoutValueParams(\n            getAxisLineWidth() ?? 0,\n            'thickness',\n            10\n        );\n        axisLineWidthSliderParams.onValueChange = (newValue) => {\n            setAxisLineWidth(newValue === 0 ? null : newValue);\n        };\n        return axisLineWidthSliderParams;\n    }\n\n    private initGridLines(chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        const chartType = this.options.chartController.getChartType();\n\n        // Some chart types do not support configuring grid lines\n        if (chartType === 'heatmap') {\n            return;\n        }\n\n        const gridLineComp = this.createBean(new GridLinePanel(chartAxisThemeOverrides));\n        this.axisGroup.addItem(gridLineComp);\n        this.activePanels.push(gridLineComp);\n    }\n\n    private initAxisTicks(chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        if (!this.hasConfigurableAxisTicks()) return;\n        const axisTicksComp = this.createBean(new AxisTicksPanel(chartAxisThemeOverrides));\n        this.axisGroup.addItem(axisTicksComp);\n        this.activePanels.push(axisTicksComp);\n    }\n\n    private hasConfigurableAxisTicks(): boolean {\n        // Axis ticks are disabled for some chart types\n        const chartType = this.options.chartController.getChartType();\n        switch (chartType) {\n            case 'radarLine':\n            case 'radarArea':\n            case 'rangeBar':\n            case 'boxPlot':\n            case 'waterfall':\n                return false;\n            default:\n                return true;\n        }\n    }\n\n    private initAxisLabels(chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        const params: FontPanelParams = {\n            name: this.translate('labels'),\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            chartMenuParamsFactory: chartAxisThemeOverrides,\n            keyMapper: (key) => `label.${key}`,\n        };\n\n        const labelPanelComp = this.createBean(new FontPanel(params));\n        this.axisGroup.addItem(labelPanelComp);\n        this.activePanels.push(labelPanelComp);\n\n        this.addAdditionalLabelComps(labelPanelComp, chartAxisThemeOverrides);\n    }\n\n    private addAdditionalLabelComps(labelPanelComp: FontPanel, chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        this.addLabelPadding(labelPanelComp, chartAxisThemeOverrides);\n\n        const rotationComp = this.createRotationWidget('labelRotation', chartAxisThemeOverrides);\n        const autoRotateCb = this.initLabelRotation(rotationComp, chartAxisThemeOverrides);\n\n        labelPanelComp.addItem(autoRotateCb);\n        labelPanelComp.addItem(rotationComp);\n    }\n\n    private initLabelRotation(rotationComp: AgAngleSelect, chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        const chartOptions = chartAxisThemeOverrides.getChartOptions();\n\n        const getLabelRotationValue = (): number | undefined => {\n            return chartOptions.getValue<number | undefined>('label.rotation');\n        };\n        const getLabelAutoRotateValue = (): boolean => {\n            return chartOptions.getValue<boolean>('label.autoRotate');\n        };\n\n        const updateAutoRotate = (autoRotate: boolean) => {\n            // Remember the existing rotation before we clear it from the options\n            if (autoRotate) this.prevRotation = getLabelRotationValue();\n\n            // For the autoRotate option to take effect, we need to additionally clear the rotation option value\n            chartOptions.setValues<boolean | number | undefined>([\n                { expression: 'label.autoRotate', value: autoRotate },\n                // Clear the rotation option when activating auto-rotate, reinstate the previous value when deactivating\n                { expression: 'label.rotation', value: autoRotate ? undefined : this.prevRotation },\n            ]);\n\n            rotationComp.setDisplayed(!autoRotate);\n        };\n\n        const rotation = getLabelRotationValue();\n        const autoRotate = typeof rotation === 'number' ? false : getLabelAutoRotateValue();\n\n        const autoRotateCheckbox = this.createBean(\n            new AgCheckbox({\n                label: this.translate('autoRotate'),\n                value: autoRotate,\n                onValueChange: updateAutoRotate,\n            })\n        );\n\n        // init rotation comp state\n        rotationComp.setDisplayed(!autoRotate);\n\n        return autoRotateCheckbox;\n    }\n\n    private createRotationWidget(labelKey: ChartTranslationKey, chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        const chartOptions = chartAxisThemeOverrides.getChartOptions();\n\n        const getLabelRotationValue = (): number | undefined => {\n            return chartOptions.getValue<number | undefined>('label.rotation');\n        };\n        const setLabelRotationValue = (value: number | undefined): void => {\n            return chartOptions.setValue<number | undefined>('label.rotation', value);\n        };\n\n        const degreesSymbol = String.fromCharCode(176);\n\n        const label = `${this.chartTranslationService.translate(labelKey)} ${degreesSymbol}`;\n        const angleSelect = new AgAngleSelect({\n            label,\n            labelWidth: 'flex',\n            value: getLabelRotationValue() ?? 0,\n            onValueChange: setLabelRotationValue,\n        });\n\n        // the axis label rotation needs to be updated when the default category changes in the data panel\n        this.axisLabelUpdateFuncs.push(() => {\n            angleSelect.setValue(getLabelRotationValue() ?? 0);\n        });\n\n        return this.createBean(angleSelect);\n    }\n\n    private addLabelPadding(labelPanelComp: FontPanel, chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        const labelPaddingSlider = this.createBean(\n            new AgSlider(chartAxisThemeOverrides.getDefaultSliderParams('label.padding', 'padding', 30))\n        );\n\n        labelPanelComp.addItem(labelPaddingSlider);\n    }\n\n    private translate(key: ChartTranslationKey) {\n        return this.chartTranslationService.translate(key);\n    }\n\n    private removeTemplateComponent(component: Component<any>): void {\n        _removeFromParent(component.getGui());\n        this.destroyBean(component);\n    }\n\n    private destroyActivePanels(): void {\n        this.activePanels.forEach((panel) => {\n            _removeFromParent(panel.getGui());\n            this.destroyBean(panel);\n        });\n    }\n\n    public override destroy(): void {\n        this.destroyActivePanels();\n        super.destroy();\n    }\n}\n", "import type {\n    AgInputNumberField,\n    AgLabelParams,\n    BeanCollection,\n    DragListenerParams,\n    DragService,\n} from '@ag-grid-community/core';\nimport {\n    AgAbstractLabel,\n    AgInputNumberFieldSelector,\n    RefPlaceholder,\n    _exists,\n    _setFixedWidth,\n} from '@ag-grid-community/core';\n\nexport interface AgAngleSelectParams extends AgLabelParams {\n    value?: number;\n    onValueChange?: (value: number) => void;\n}\n\nexport type AgAngleSelectEvent = 'fieldValueChanged';\nexport class AgAngleSelect extends AgAbstractLabel<AgAngleSelectParams, AgAngleSelectEvent> {\n    protected dragService: DragService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.dragService = beans.dragService;\n    }\n\n    protected readonly eLabel: HTMLElement = RefPlaceholder;\n    private readonly eParentCircle: HTMLElement = RefPlaceholder;\n    private readonly eChildCircle: HTMLElement = RefPlaceholder;\n    private readonly eAngleValue: AgInputNumberField = RefPlaceholder;\n\n    private parentCircleRect: ClientRect | DOMRect;\n    private degrees: number;\n    private radius: number = 0;\n    private offsetX: number = 0;\n    private offsetY: number = 0;\n    private dragListener: DragListenerParams;\n\n    constructor(config?: AgAngleSelectParams) {\n        super(\n            config,\n            /* html */ `<div class=\"ag-angle-select\">\n            <div data-ref=\"eLabel\"></div>\n            <div class=\"ag-wrapper ag-angle-select-wrapper\">\n                <div class=\"ag-angle-select-field\">\n                    <div data-ref=\"eParentCircle\" class=\"ag-angle-select-parent-circle\">\n                        <div data-ref=\"eChildCircle\" class=\"ag-angle-select-child-circle\"></div>\n                    </div>\n                </div>\n                <ag-input-number-field data-ref=\"eAngleValue\"></ag-input-number-field>\n            </div>\n        </div>`,\n            [AgInputNumberFieldSelector]\n        );\n    }\n\n    public override postConstruct() {\n        super.postConstruct();\n\n        const { value, onValueChange } = this.config;\n\n        if (value != null) {\n            this.setValue(value, undefined, true);\n        }\n        if (onValueChange != null) {\n            this.onValueChange(onValueChange);\n        }\n\n        this.dragListener = {\n            eElement: this.eParentCircle,\n            dragStartPixels: 0,\n            onDragStart: () => {\n                this.parentCircleRect = this.eParentCircle.getBoundingClientRect();\n            },\n            onDragging: (e: MouseEvent | Touch) => this.calculateAngleDrag(e),\n            onDragStop: () => {},\n        };\n\n        this.dragService.addDragSource(this.dragListener);\n\n        this.eAngleValue\n            .setLabel('')\n            .setLabelWidth(5)\n            .setInputWidth(45)\n            .setMin(0)\n            .setMax(360)\n            .setValue(`${this.degrees}`)\n            .onValueChange((value: string) => {\n                if (value == null || value === '') {\n                    value = '0';\n                }\n                value = this.eAngleValue.normalizeValue(value);\n                let floatValue = parseFloat(value);\n                if (floatValue > 180) {\n                    floatValue = floatValue - 360;\n                }\n                this.setValue(floatValue);\n            });\n\n        this.updateNumberInput();\n\n        if (_exists(this.getValue())) {\n            this.eAngleValue.setValue(this.normalizeNegativeValue(this.getValue()).toString());\n        }\n\n        this.addManagedListeners(this, {\n            fieldValueChanged: () => {\n                if (this.eAngleValue.getInputElement().contains(this.gos.getActiveDomElement())) {\n                    return;\n                }\n                this.updateNumberInput();\n            },\n        });\n    }\n\n    private updateNumberInput(): void {\n        const normalizedValue = this.normalizeNegativeValue(this.getValue());\n        this.eAngleValue.setValue(normalizedValue.toString());\n    }\n\n    private positionChildCircle(radians: number) {\n        const rect = this.parentCircleRect || { width: 24, height: 24 };\n        const eChildCircle = this.eChildCircle;\n\n        const centerX = rect.width / 2;\n        const centerY = rect.height / 2;\n\n        eChildCircle.style.left = `${centerX + Math.cos(radians) * 8}px`;\n        eChildCircle.style.top = `${centerY + Math.sin(radians) * 8}px`;\n    }\n\n    private calculatePolar() {\n        const x = this.offsetX;\n        const y = this.offsetY;\n\n        const radians = Math.atan2(y, x);\n        this.degrees = this.toDegrees(radians);\n        this.radius = Math.sqrt(x * x + y * y);\n\n        this.positionChildCircle(radians);\n    }\n\n    private calculateCartesian() {\n        const radians = this.toRadians(this.getValue());\n        const radius = this.getRadius();\n\n        this.setOffsetX(Math.cos(radians) * radius).setOffsetY(Math.sin(radians) * radius);\n    }\n\n    private setOffsetX(offset: number): this {\n        if (this.offsetX !== offset) {\n            this.offsetX = offset;\n            this.calculatePolar();\n        }\n\n        return this;\n    }\n\n    private setOffsetY(offset: number): this {\n        if (this.offsetY !== offset) {\n            this.offsetY = offset;\n            this.calculatePolar();\n        }\n        return this;\n    }\n\n    private calculateAngleDrag(e: MouseEvent | Touch) {\n        const rect = this.parentCircleRect;\n        const centerX = rect.width / 2;\n        const centerY = rect.height / 2;\n\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n\n        const dx = x - centerX;\n        const dy = y - centerY;\n\n        const radians = Math.atan2(dy, dx);\n\n        this.setValue(radians, true);\n    }\n\n    private toDegrees(radians: number): number {\n        return (radians / Math.PI) * 180;\n    }\n\n    private toRadians(degrees: number): number {\n        return (degrees / 180) * Math.PI;\n    }\n\n    private normalizeNegativeValue(degrees: number): number {\n        return degrees < 0 ? 360 + degrees : degrees;\n    }\n\n    private normalizeAngle180(radians: number): number {\n        radians %= Math.PI * 2;\n\n        if (radians < -Math.PI) {\n            radians += Math.PI * 2;\n        } else if (radians >= Math.PI) {\n            radians -= Math.PI * 2;\n        }\n\n        return radians;\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public setRadius(r: number): this {\n        if (this.radius === r) {\n            return this;\n        }\n        this.radius = r;\n        this.calculateCartesian();\n\n        return this;\n    }\n\n    public onValueChange(callbackFn: (newValue: number) => void): this {\n        this.addManagedListeners(this, {\n            fieldValueChanged: () => {\n                callbackFn(this.degrees);\n            },\n        });\n        return this;\n    }\n\n    public getValue(radians?: boolean): number {\n        return radians ? this.toRadians(this.degrees) : this.degrees;\n    }\n\n    public setValue(degrees: number, radians?: boolean, silent?: boolean): this {\n        let radiansValue: number;\n        if (!radians) {\n            radiansValue = this.normalizeAngle180(this.toRadians(degrees));\n        } else {\n            radiansValue = degrees;\n        }\n\n        degrees = this.toDegrees(radiansValue);\n\n        if (this.degrees !== degrees) {\n            this.degrees = Math.floor(degrees);\n            this.calculateCartesian();\n            this.positionChildCircle(radiansValue);\n            if (!silent) {\n                this.dispatchLocalEvent({ type: 'fieldValueChanged' });\n            }\n        }\n\n        return this;\n    }\n\n    public setWidth(width: number): this {\n        _setFixedWidth(this.getGui(), width);\n        return this;\n    }\n\n    public override setDisabled(disabled: boolean): this {\n        super.setDisabled(disabled);\n\n        this.eAngleValue.setDisabled(disabled);\n\n        return this;\n    }\n\n    public override destroy(): void {\n        this.dragService.removeDragSource(this.dragListener);\n        super.destroy();\n    }\n}\n", "import type { AgSelectParams, BeanCollection } from '@ag-grid-community/core';\nimport {\n    AgSelectSelector,\n    Component,\n    RefPlaceholder,\n    _capitalise,\n    _includes,\n    _removeFromParent,\n} from '@ag-grid-community/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport type { AgGroupComponent } from '@ag-grid-enterprise/core';\n\nimport { AgColorPickerSelector } from '../../../../widgets/agColorPicker';\nimport type { ChartOptionsProxy } from '../../services/chartOptionsService';\nimport type { ChartTranslationService } from '../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../chartMenuParamsFactory';\n\ninterface Font {\n    fontFamily?: string;\n    fontStyle?: string;\n    fontWeight?: string;\n    fontSize?: number;\n    color?: string;\n}\n\nexport interface FontPanelParams {\n    name?: string;\n    enabled: boolean;\n    suppressEnabledCheckbox?: boolean;\n    onEnableChange?: (enabled: boolean) => void;\n    chartMenuParamsFactory: ChartMenuParamsFactory;\n    keyMapper: (key: string) => string;\n    cssIdentifier?: string;\n}\n\nexport class FontPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    private readonly fontGroup: AgGroupComponent = RefPlaceholder;\n\n    private readonly chartOptions: ChartOptionsProxy;\n    private activeComps: Component[] = [];\n\n    constructor(private readonly params: FontPanelParams) {\n        super();\n        this.chartOptions = params.chartMenuParamsFactory.getChartOptions();\n    }\n\n    public postConstruct() {\n        const {\n            cssIdentifier = 'charts-format-sub-level',\n            name: title,\n            enabled,\n            onEnableChange,\n            suppressEnabledCheckbox,\n            chartMenuParamsFactory,\n            keyMapper,\n        } = this.params;\n        const fontGroupParams: AgGroupComponentParams = {\n            cssIdentifier,\n            direction: 'vertical',\n            suppressOpenCloseIcons: true,\n            title,\n            enabled,\n            suppressEnabledCheckbox: true,\n            onEnableChange: (enabled) => {\n                if (onEnableChange) {\n                    onEnableChange(enabled);\n                }\n            },\n            useToggle: !suppressEnabledCheckbox,\n        };\n        this.setTemplate(\n            /* html */ `<div class=\"ag-font-panel\">\n        <ag-group-component data-ref=\"fontGroup\">\n            <ag-select data-ref=\"familySelect\"></ag-select>\n            <ag-select data-ref=\"weightStyleSelect\"></ag-select>\n            <div class=\"ag-charts-font-size-color\">\n                <ag-select data-ref=\"sizeSelect\"></ag-select>\n                <ag-color-picker data-ref=\"colorPicker\"></ag-color-picker>\n            </div>\n        </ag-group-component>\n    </div>`,\n            [AgGroupComponentSelector, AgSelectSelector, AgColorPickerSelector],\n            {\n                fontGroup: fontGroupParams,\n                familySelect: this.getFamilySelectParams(),\n                weightStyleSelect: this.getWeightStyleSelectParams(),\n                sizeSelect: this.getSizeSelectParams(),\n                colorPicker: chartMenuParamsFactory.getDefaultColorPickerParams(keyMapper('color')),\n            }\n        );\n        this.addOrRemoveCssClass('ag-font-panel-no-header', !title);\n    }\n\n    public addItem(comp: Component<any>, prepend?: boolean) {\n        if (prepend) {\n            this.fontGroup.prependItem(comp);\n        } else {\n            this.fontGroup.addItem(comp);\n        }\n        this.activeComps.push(comp);\n    }\n\n    public setEnabled(enabled: boolean): void {\n        this.fontGroup.setEnabled(enabled);\n    }\n\n    private getFamilySelectParams(): AgSelectParams {\n        const families = [\n            'Arial, sans-serif',\n            'Aria Black, sans-serif',\n            'Book Antiqua,  serif',\n            'Charcoal, sans-serif',\n            'Comic Sans MS, cursive',\n            'Courier, monospace',\n            'Courier New, monospace',\n            'Gadget, sans-serif',\n            'Geneva, sans-serif',\n            'Helvetica, sans-serif',\n            'Impact, sans-serif',\n            'Lucida Console, monospace',\n            'Lucida Grande, sans-serif',\n            'Lucida Sans Unicode,  sans-serif',\n            'Monaco, monospace',\n            'Palatino Linotype, serif',\n            'Palatino, serif',\n            'Times New Roman, serif',\n            'Times, serif',\n            'Verdana, sans-serif',\n        ];\n\n        const family = this.getInitialFontValue('fontFamily');\n        let initialValue = families[0];\n\n        if (family) {\n            // check for known values using lowercase\n            const lowerCaseValues = families.map((f) => f.toLowerCase());\n            const valueIndex = lowerCaseValues.indexOf(family.toLowerCase());\n\n            if (valueIndex >= 0) {\n                initialValue = families[valueIndex];\n            } else {\n                // add user provided value to list\n                const capitalisedFontValue = _capitalise(family);\n\n                families.push(capitalisedFontValue);\n\n                initialValue = capitalisedFontValue;\n            }\n        }\n\n        const options = families.sort().map((value) => ({ value, text: value }));\n\n        return this.params.chartMenuParamsFactory.getDefaultSelectParamsWithoutValueParams(\n            'font',\n            options,\n            `${initialValue}`,\n            (newValue) => this.setFont({ fontFamily: newValue! })\n        );\n    }\n\n    private getSizeSelectParams(): AgSelectParams {\n        const sizes = [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36];\n        const size = this.getInitialFontValue('fontSize');\n\n        if (!_includes(sizes, size)) {\n            sizes.push(size!);\n        }\n\n        const options = sizes.sort((a, b) => a - b).map((value) => ({ value: `${value}`, text: `${value}` }));\n\n        return this.params.chartMenuParamsFactory.getDefaultSelectParamsWithoutValueParams(\n            'size',\n            options,\n            `${size}`,\n            (newValue) => this.setFont({ fontSize: parseInt(newValue!, 10) })\n        );\n    }\n\n    private getWeightStyleSelectParams(): AgSelectParams {\n        const weight = this.getInitialFontValue('fontWeight') ?? 'normal';\n        const style = this.getInitialFontValue('fontStyle') ?? 'normal';\n\n        const weightStyles: {\n            name: 'normal' | 'bold' | 'italic' | 'boldItalic' | 'predefined';\n            weight: string;\n            style: string;\n        }[] = [\n            { name: 'normal', weight: 'normal', style: 'normal' },\n            { name: 'bold', weight: 'bold', style: 'normal' },\n            { name: 'italic', weight: 'normal', style: 'italic' },\n            { name: 'boldItalic', weight: 'bold', style: 'italic' },\n        ];\n\n        let selectedOption = weightStyles.find((x) => x.weight === weight && x.style === style);\n\n        if (!selectedOption) {\n            selectedOption = { name: 'predefined', weight, style };\n            weightStyles.unshift(selectedOption);\n        }\n\n        const options = weightStyles.map((ws) => ({\n            value: ws.name,\n            text: this.chartTranslationService.translate(ws.name),\n        }));\n\n        return this.params.chartMenuParamsFactory.getDefaultSelectParamsWithoutValueParams(\n            'weight',\n            options,\n            selectedOption.name,\n            (newValue) => {\n                const selectedWeightStyle = weightStyles.find((x) => x.name === newValue);\n\n                this.setFont({ fontWeight: selectedWeightStyle!.weight, fontStyle: selectedWeightStyle!.style });\n            }\n        );\n    }\n\n    private destroyActiveComps(): void {\n        this.activeComps.forEach((comp) => {\n            _removeFromParent(comp.getGui());\n            this.destroyBean(comp);\n        });\n    }\n\n    public override destroy(): void {\n        this.destroyActiveComps();\n        super.destroy();\n    }\n\n    private setFont(font: Font): void {\n        const { keyMapper } = this.params;\n        Object.entries(font).forEach(([fontKey, value]: [keyof Font, any]) => {\n            if (value) {\n                this.chartOptions.setValue(keyMapper(fontKey), value);\n            }\n        });\n    }\n\n    private getInitialFontValue<K extends keyof Font>(fontKey: K): Font[K] {\n        const { keyMapper } = this.params;\n        return this.chartOptions.getValue(keyMapper(fontKey));\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { Component } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport { AgColorPickerSelector } from '../../../../../widgets/agColorPicker';\nimport { AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class AxisTicksPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    public postConstruct() {\n        const { chartMenuUtils } = this;\n        const axisTicksGroupParams = chartMenuUtils.addEnableParams<AgGroupComponentParams>('tick.enabled', {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            suppressOpenCloseIcons: true,\n            title: this.chartTranslationService.translate('ticks'),\n            suppressEnabledCheckbox: true,\n            useToggle: true,\n        });\n        const axisTicksColorPickerParams = chartMenuUtils.getDefaultColorPickerParams('tick.stroke');\n        const axisTicksWidthSliderParams = chartMenuUtils.getDefaultSliderParams('tick.width', 'width', 10);\n        const axisTicksSizeSliderParams = chartMenuUtils.getDefaultSliderParams('tick.size', 'length', 30);\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"axisTicksGroup\">\n                <ag-color-picker data-ref=\"axisTicksColorPicker\"></ag-color-picker>\n                <ag-slider data-ref=\"axisTicksWidthSlider\"></ag-slider>\n                <ag-slider data-ref=\"axisTicksSizeSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgColorPickerSelector, AgSliderSelector],\n            {\n                axisTicksGroup: axisTicksGroupParams,\n                axisTicksColorPicker: axisTicksColorPickerParams,\n                axisTicksWidthSlider: axisTicksWidthSliderParams,\n                axisTicksSizeSlider: axisTicksSizeSliderParams,\n            }\n        );\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { Component } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\nimport type { AgAxisGridLineOptions } from 'ag-charts-community';\n\nimport type { AgColorPickerParams } from '../../../../../widgets/agColorPicker';\nimport { AgColorPickerSelector } from '../../../../../widgets/agColorPicker';\nimport type { AgSliderParams } from '../../../../../widgets/agSlider';\nimport { AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartOptionsProxy } from '../../../services/chartOptionsService';\nimport type { ChartTranslationKey, ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class GridLinePanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    private readonly chartOptions: ChartOptionsProxy;\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n        this.chartOptions = chartMenuUtils.getChartOptions();\n    }\n\n    public postConstruct() {\n        const gridLineGroupParams = this.chartMenuUtils.addEnableParams<AgGroupComponentParams>('gridLine.enabled', {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            suppressOpenCloseIcons: true,\n            title: this.chartTranslationService.translate('gridLines'),\n            suppressEnabledCheckbox: true,\n            useToggle: true,\n        });\n        const gridLineColorPickerParams = this.getGridLineColorPickerParams('color');\n        const gridLineWidthSliderParams = this.getGridLineWidthSliderParams('thickness');\n        const gridLineLineDashSliderParams = this.getGridLineDashSliderParams('lineDash');\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"gridLineGroup\">\n                <ag-color-picker data-ref=\"gridLineColorPicker\"></ag-color-picker>\n                <ag-slider data-ref=\"gridLineWidthSlider\"></ag-slider>\n                <ag-slider data-ref=\"gridLineLineDashSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgColorPickerSelector, AgSliderSelector],\n            {\n                gridLineGroup: gridLineGroupParams,\n                gridLineColorPicker: gridLineColorPickerParams,\n                gridLineWidthSlider: gridLineWidthSliderParams,\n                gridLineLineDashSlider: gridLineLineDashSliderParams,\n            }\n        );\n    }\n\n    private getGridLineColorPickerParams(labelKey: ChartTranslationKey): AgColorPickerParams {\n        return this.chartMenuUtils.getDefaultColorPickerParams('gridLine.style', labelKey, {\n            formatInputValue: (value: AgAxisGridLineOptions['style']) => {\n                return value?.[0]?.stroke;\n            },\n            parseInputValue: (value: string) => {\n                const styles = this.chartOptions.getValue<AgAxisGridLineOptions['style']>('gridLine.style') ?? [];\n                if (styles.length === 0) return [{ stroke: value, lineDash: [] }];\n                return [{ ...styles[0], stroke: value }];\n            },\n        });\n    }\n\n    private getGridLineWidthSliderParams(labelKey: ChartTranslationKey) {\n        return this.chartMenuUtils.getDefaultSliderParams('gridLine.width', labelKey, 10);\n    }\n\n    private getGridLineDashSliderParams(labelKey: ChartTranslationKey): AgSliderParams {\n        const initialStyles = this.chartOptions.getValue<AgAxisGridLineOptions['style']>('gridLine.style');\n        const initialValue = initialStyles?.[0]?.lineDash?.[0];\n        const params = this.chartMenuUtils.getDefaultSliderParamsWithoutValueParams(initialValue ?? 0, labelKey, 30);\n        params.onValueChange = (value: number): void => {\n            const stroke = this.chartOptions.getValue('gridLine.style.0.stroke');\n            this.chartOptions.setValue<AgAxisGridLineOptions['style']>('gridLine.style', [\n                { lineDash: [value], stroke },\n            ]);\n        };\n        return params;\n    }\n}\n", "import type { BeanCollection, ListOption } from '@ag-grid-community/core';\nimport { AgSelect, Component, RefPlaceholder } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponent, AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport { AgColorPickerSelector } from '../../../../../widgets/agColorPicker';\nimport { AgSlider, AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationKey, ChartTranslationService } from '../../../services/chartTranslationService';\nimport { getSeriesType, isRadial } from '../../../utils/seriesTypeMapper';\nimport type { FontPanelParams } from '../fontPanel';\nimport { FontPanel } from '../fontPanel';\nimport type { FormatPanelOptions } from '../formatPanel';\n\nexport class PolarAxisPanel extends Component {\n    private readonly axisGroup: AgGroupComponent = RefPlaceholder;\n\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    constructor(private readonly options: FormatPanelOptions) {\n        super();\n    }\n\n    public postConstruct() {\n        const { isExpandedOnInit: expanded, chartAxisMenuParamsFactory, registerGroupComponent } = this.options;\n        const axisGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-top-level',\n            direction: 'vertical',\n            title: this.translate('polarAxis'),\n            expanded,\n            suppressEnabledCheckbox: true,\n        };\n        const axisColorInputParams = chartAxisMenuParamsFactory.getDefaultColorPickerParams('line.stroke');\n        const axisLineWidthSliderParams = chartAxisMenuParamsFactory.getDefaultSliderParams(\n            'line.width',\n            'thickness',\n            10\n        );\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"axisGroup\">\n                <ag-color-picker data-ref=\"axisColorInput\"></ag-color-picker>\n                <ag-slider data-ref=\"axisLineWidthSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgColorPickerSelector, AgSliderSelector],\n            {\n                axisGroup: axisGroupParams,\n                axisColorInput: axisColorInputParams,\n                axisLineWidthSlider: axisLineWidthSliderParams,\n            }\n        );\n        registerGroupComponent(this.axisGroup);\n\n        this.initAxis();\n        this.initAxisLabels();\n        this.initRadiusAxis();\n    }\n\n    private initAxis() {\n        const chartType = this.options.chartController.getChartType();\n        const hasConfigurableAxisShape = ['radarLine', 'radarArea'].includes(chartType);\n        if (hasConfigurableAxisShape) {\n            const options: Array<ListOption> = [\n                { value: 'circle', text: this.translate('circle') },\n                { value: 'polygon', text: this.translate('polygon') },\n            ];\n\n            this.axisGroup.addItem(\n                this.createSelect({\n                    labelKey: 'shape',\n                    options: options,\n                    property: 'shape',\n                })\n            );\n        }\n\n        if (chartType !== 'pie') {\n            this.axisGroup.addItem(\n                this.createSlider({\n                    labelKey: 'innerRadius',\n                    defaultMaxValue: 1,\n                    property: 'innerRadiusRatio',\n                })\n            );\n        }\n    }\n\n    private initAxisLabels() {\n        const params: FontPanelParams = {\n            name: this.translate('labels'),\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            chartMenuParamsFactory: this.options.chartAxisMenuParamsFactory,\n            keyMapper: (key) => `label.${key}`,\n        };\n\n        const labelPanelComp = this.createManagedBean(new FontPanel(params));\n        const labelOrientationComp = this.createOrientationWidget();\n        labelPanelComp.addItem(labelOrientationComp);\n\n        this.axisGroup.addItem(labelPanelComp);\n    }\n\n    private createOrientationWidget(): AgSelect {\n        const options: Array<ListOption> = [\n            { value: 'fixed', text: this.translate('fixed') },\n            { value: 'parallel', text: this.translate('parallel') },\n            { value: 'perpendicular', text: this.translate('perpendicular') },\n        ];\n\n        return this.createSelect({\n            labelKey: 'orientation',\n            options,\n            property: 'label.orientation',\n        });\n    }\n\n    private initRadiusAxis() {\n        const chartSeriesType = getSeriesType(this.options.chartController.getChartType());\n        if (!isRadial(chartSeriesType)) return;\n\n        const items = [\n            this.createSlider({\n                labelKey: 'groupPadding',\n                defaultMaxValue: 1,\n                property: 'paddingInner',\n            }),\n            this.createSlider({\n                labelKey: 'seriesPadding',\n                defaultMaxValue: 1,\n                property: 'groupPaddingInner',\n            }),\n        ];\n\n        const paddingPanelComp = this.createManagedBean(\n            new AgGroupComponent({\n                cssIdentifier: 'charts-format-sub-level',\n                direction: 'vertical',\n                suppressOpenCloseIcons: true,\n                enabled: true,\n                suppressEnabledCheckbox: true,\n                title: this.translate('padding'),\n                items,\n            })\n        )\n            .hideEnabledCheckbox(true)\n            .hideOpenCloseIcons(true);\n\n        this.axisGroup.addItem(paddingPanelComp);\n    }\n\n    private createSlider(config: {\n        labelKey: ChartTranslationKey;\n        defaultMaxValue: number;\n        step?: number;\n        property: string;\n    }): AgSlider {\n        const { labelKey, defaultMaxValue, step = 0.05, property } = config;\n        const params = this.options.chartAxisMenuParamsFactory.getDefaultSliderParams(\n            property,\n            labelKey,\n            defaultMaxValue\n        );\n        params.step = step;\n        return this.createManagedBean(new AgSlider(params));\n    }\n\n    private createSelect(config: {\n        labelKey: ChartTranslationKey;\n        options: Array<ListOption>;\n        property: string;\n    }): AgSelect {\n        const { labelKey, options, property } = config;\n        return this.createManagedBean(\n            new AgSelect(this.options.chartAxisMenuParamsFactory.getDefaultSelectParams(property, labelKey, options))\n        );\n    }\n\n    private translate(key: ChartTranslationKey) {\n        return this.chartTranslationService.translate(key);\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { Component, RefPlaceholder } from '@ag-grid-community/core';\nimport type { AgGroupComponent, AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { FormatPanelOptions } from '../formatPanel';\nimport { BackgroundPanel } from './backgroundPanel';\nimport { PaddingPanel } from './paddingPanel';\n\nexport class ChartPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    private readonly chartGroup: AgGroupComponent = RefPlaceholder;\n\n    constructor(private readonly options: FormatPanelOptions) {\n        super();\n    }\n\n    public postConstruct() {\n        const {\n            chartController,\n            chartMenuParamsFactory,\n            isExpandedOnInit: expanded,\n            registerGroupComponent,\n        } = this.options;\n\n        const chartGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-top-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate('chartStyle'),\n            expanded,\n            suppressEnabledCheckbox: true,\n            items: [\n                this.createManagedBean(new PaddingPanel(chartMenuParamsFactory, chartController)),\n                this.createManagedBean(new BackgroundPanel(chartMenuParamsFactory)),\n            ],\n        };\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"chartGroup\"></ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector],\n            { chartGroup: chartGroupParams }\n        );\n        registerGroupComponent(this.chartGroup);\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { Component } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport { AgColorPickerSelector } from '../../../../../widgets/agColorPicker';\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class BackgroundPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    public postConstruct() {\n        const chartBackgroundGroupParams = this.chartMenuUtils.addEnableParams<AgGroupComponentParams>(\n            'background.visible',\n            {\n                cssIdentifier: 'charts-format-sub-level',\n                direction: 'vertical',\n                suppressOpenCloseIcons: true,\n                title: this.chartTranslationService.translate('background'),\n                suppressEnabledCheckbox: true,\n                useToggle: true,\n            }\n        );\n        const colorPickerParams = this.chartMenuUtils.getDefaultColorPickerParams('background.fill');\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"chartBackgroundGroup\">\n                <ag-color-picker data-ref=\"colorPicker\"></ag-color-picker>\n            </ag-group-component>\n        <div>`,\n            [AgGroupComponentSelector, AgColorPickerSelector],\n            {\n                chartBackgroundGroup: chartBackgroundGroupParams,\n                colorPicker: colorPickerParams,\n            }\n        );\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { Component, RefPlaceholder } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\nimport type { AgChartPaddingOptions, AgChartThemeOverrides } from 'ag-charts-community';\n\nimport type { AgSlider } from '../../../../../widgets/agSlider';\nimport { AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartController } from '../../../chartController';\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartThemeOverridesSeriesType } from '../../../utils/seriesTypeMapper';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class PaddingPanel extends Component {\n    private readonly paddingTopSlider: AgSlider = RefPlaceholder;\n\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    constructor(\n        private readonly chartMenuUtils: ChartMenuParamsFactory,\n        private readonly chartController: ChartController\n    ) {\n        super();\n    }\n\n    public postConstruct() {\n        const chartPaddingGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            suppressOpenCloseIcons: true,\n            title: this.chartTranslationService.translate('padding'),\n            suppressEnabledCheckbox: true,\n        };\n        const getSliderParams = (property: keyof AgChartPaddingOptions) =>\n            this.chartMenuUtils.getDefaultSliderParams('padding.' + property, property, 200);\n\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"chartPaddingGroup\">\n                <ag-slider data-ref=\"paddingTopSlider\"></ag-slider>\n                <ag-slider data-ref=\"paddingRightSlider\"></ag-slider>\n                <ag-slider data-ref=\"paddingBottomSlider\"></ag-slider>\n                <ag-slider data-ref=\"paddingLeftSlider\"></ag-slider>\n            </ag-group-component>\n        <div>`,\n            [AgGroupComponentSelector, AgSliderSelector],\n            {\n                chartPaddingGroup: chartPaddingGroupParams,\n                paddingTopSlider: getSliderParams('top'),\n                paddingRightSlider: getSliderParams('right'),\n                paddingBottomSlider: getSliderParams('bottom'),\n                paddingLeftSlider: getSliderParams('left'),\n            }\n        );\n\n        this.addManagedEventListeners({\n            chartOptionsChanged: (e) => {\n                this.updateTopPadding(e.chartOptions);\n            },\n        });\n    }\n\n    private updateTopPadding(chartOptions: AgChartThemeOverrides) {\n        // keep 'top' padding in sync with chart as toggling chart title on / off change the 'top' padding\n        const topPadding = [...this.chartController.getChartSeriesTypes(), 'common']\n            .map((seriesType: ChartThemeOverridesSeriesType) => chartOptions[seriesType]?.padding?.top)\n            .find((value) => value != null);\n        if (topPadding != null) {\n            this.paddingTopSlider.setValue(`${topPadding}`);\n        }\n    }\n}\n", "import { BeanStub } from '@ag-grid-community/core';\nimport type { AgGroupComponent } from '@ag-grid-enterprise/core';\n\n// handles single group expansion\nexport class GroupExpansionFeature extends BeanStub {\n    private id: number = 0;\n    private groupComponents: Map<number, AgGroupComponent> = new Map();\n    private expandedGroupComponent?: number;\n\n    constructor(private readonly groupContainer: HTMLElement) {\n        super();\n    }\n\n    public addGroupComponent(groupComponent: AgGroupComponent): void {\n        const id = this.id++;\n        this.groupComponents.set(id, groupComponent);\n        if (groupComponent.isExpanded()) {\n            this.expandedGroupComponent = id;\n        }\n        groupComponent.onExpandedChange((expanded) => {\n            if (expanded) {\n                const previouslyExpandedGroupComponent = this.expandedGroupComponent;\n                this.expandedGroupComponent = id;\n                if (previouslyExpandedGroupComponent != null) {\n                    const groupComponentGui = groupComponent.getGui();\n                    const groupPositionInViewport =\n                        groupComponentGui.offsetTop - this.groupContainer.parentElement!.scrollTop;\n\n                    this.groupComponents.get(previouslyExpandedGroupComponent)?.toggleGroupExpand(false, true);\n\n                    // if the group above is collapsed, the expanded component will be in the wrong place, so scroll\n                    let newScrollTop = groupComponentGui.offsetTop - groupPositionInViewport;\n                    if (newScrollTop < 0) {\n                        newScrollTop = 0;\n                    }\n                    if (newScrollTop !== this.groupContainer.parentElement!.scrollTop) {\n                        this.groupContainer.parentElement!.scrollTop = newScrollTop;\n                    }\n                }\n            } else {\n                this.expandedGroupComponent = undefined;\n            }\n        });\n    }\n\n    public override destroy(): void {\n        this.groupComponents.clear();\n        super.destroy();\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { AgCheckbox, AgSelect, Component, RefPlaceholder } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponent, AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport { AgSlider } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationKey, ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\nimport type { FontPanelParams } from '../fontPanel';\nimport { FontPanel } from '../fontPanel';\nimport type { FormatPanelOptions } from '../formatPanel';\n\nexport class LegendPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    private readonly legendGroup: AgGroupComponent = RefPlaceholder;\n\n    private readonly key: string;\n    private readonly isGradient: boolean;\n\n    constructor(private readonly options: FormatPanelOptions) {\n        super();\n\n        this.isGradient = ['treemap', 'sunburst', 'heatmap'].includes(options.seriesType);\n        this.key = this.isGradient ? 'gradientLegend' : 'legend';\n    }\n\n    public postConstruct() {\n        const { chartMenuParamsFactory, isExpandedOnInit: expanded, registerGroupComponent } = this.options;\n        const positionSelect = this.createManagedBean(\n            new AgSelect(\n                chartMenuParamsFactory.getDefaultSelectParams(\n                    `${this.key}.position`,\n                    'position',\n                    ['top', 'right', 'bottom', 'left'].map((position: ChartTranslationKey) => ({\n                        value: position,\n                        text: this.chartTranslationService.translate(position),\n                    }))\n                )\n            )\n        );\n        const enabledGroup = this.createManagedBean(\n            new AgGroupComponent(\n                chartMenuParamsFactory.addEnableParams<AgGroupComponentParams>(`${this.key}.enabled`, {\n                    cssIdentifier: 'charts-format-sub-level',\n                    direction: 'vertical',\n                    suppressOpenCloseIcons: true,\n                    title: this.chartTranslationService.translate('legendEnabled'),\n                    suppressEnabledCheckbox: true,\n                    useToggle: true,\n                    items: [\n                        this.createLabelPanel(chartMenuParamsFactory),\n                        positionSelect,\n                        ...this.getItems(chartMenuParamsFactory),\n                    ],\n                })\n            )\n        );\n        const legendGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-top-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate('legend'),\n            suppressEnabledCheckbox: true,\n            expanded,\n            items: [enabledGroup],\n        };\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"legendGroup\">\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector],\n            {\n                legendGroup: legendGroupParams,\n            }\n        );\n        registerGroupComponent(this.legendGroup);\n    }\n\n    private getItems(chartMenuParamsFactory: ChartMenuParamsFactory): Component<any>[] {\n        const createSlider = (expression: string, labelKey: ChartTranslationKey, defaultMaxValue: number) =>\n            this.createManagedBean(\n                new AgSlider(\n                    chartMenuParamsFactory.getDefaultSliderParams(\n                        `${this.key}.${expression}`,\n                        labelKey,\n                        defaultMaxValue\n                    )\n                )\n            );\n        if (this.isGradient) {\n            return [\n                this.createManagedBean(\n                    new AgCheckbox(\n                        chartMenuParamsFactory.addValueParams('gradientLegend.reverseOrder', {\n                            label: this.chartTranslationService.translate('reverseDirection'),\n                            labelWidth: 'flex',\n                        })\n                    )\n                ),\n                createSlider('gradient.thickness', 'thickness', 40),\n                createSlider('gradient.preferredLength', 'preferredLength', 300),\n                createSlider('spacing', 'spacing', 200),\n            ];\n        }\n        return [\n            createSlider('spacing', 'spacing', 200),\n            createSlider('item.marker.size', 'markerSize', 40),\n            createSlider('item.marker.strokeWidth', 'markerStroke', 10),\n            createSlider('item.marker.padding', 'itemSpacing', 20),\n            createSlider('item.paddingX', 'layoutHorizontalSpacing', 50),\n            createSlider('item.paddingY', 'layoutVerticalSpacing', 50),\n        ];\n    }\n\n    private createLabelPanel(chartMenuParamsFactory: ChartMenuParamsFactory): FontPanel {\n        const rootKey = this.isGradient ? 'gradientLegend.scale.label' : 'legend.item.label';\n        const params: FontPanelParams = {\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            chartMenuParamsFactory,\n            keyMapper: (key) => `${rootKey}.${key}`,\n            cssIdentifier: 'charts-format-sub-level-no-header',\n        };\n\n        return this.createManagedBean(new FontPanel(params));\n    }\n}\n", "import type { AgToggleButtonParams, BeanCollection, ListOption } from '@ag-grid-community/core';\nimport {\n    AgSelect,\n    AgToggleButton,\n    Component,\n    RefPlaceholder,\n    _errorOnce,\n    _removeFromParent,\n} from '@ag-grid-community/core';\nimport type { AgGroupComponent, AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\nimport type { AgRangeBarSeriesLabelPlacement } from 'ag-charts-community';\n\nimport { AgColorPicker } from '../../../../../widgets/agColorPicker';\nimport { AgSlider } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationKey, ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartSeriesType } from '../../../utils/seriesTypeMapper';\nimport { getSeriesType, isPieChartSeries } from '../../../utils/seriesTypeMapper';\nimport { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\nimport { FontPanel } from '../fontPanel';\nimport type { FormatPanelOptions } from '../formatPanel';\nimport { CalloutPanel } from './calloutPanel';\nimport { CapsPanel } from './capsPanel';\nimport { ConnectorLinePanel } from './connectorLinePanel';\nimport { MarkersPanel } from './markersPanel';\nimport { SeriesItemsPanel } from './seriesItemsPanel';\nimport { getShapeSelectOptions } from './seriesUtils';\nimport { ShadowPanel } from './shadowPanel';\nimport { TileSpacingPanel } from './tileSpacingPanel';\nimport { WhiskersPanel } from './whiskersPanel';\n\nconst tooltips = 'tooltips';\nconst strokeWidth = 'strokeWidth';\nconst lineDash = 'lineDash';\nconst lineOpacity = 'lineOpacity';\nconst fillOpacity = 'fillOpacity';\nconst labels = 'labels';\nconst shadow = 'shadow';\n\nexport class SeriesPanel extends Component {\n    private readonly seriesGroup: AgGroupComponent = RefPlaceholder;\n\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    private chartMenuUtils: ChartMenuParamsFactory;\n\n    private activePanels: Component<any>[] = [];\n    private seriesType: ChartSeriesType;\n\n    private readonly widgetFuncs = {\n        lineWidth: () => this.initStrokeWidth('lineWidth'),\n        [strokeWidth]: () => this.initStrokeWidth('strokeWidth'),\n        lineColor: () => this.initLineColor(),\n        [lineDash]: () => this.initLineDash(),\n        [lineOpacity]: () => this.initOpacity('strokeOpacity'),\n        [fillOpacity]: () => this.initOpacity('fillOpacity'),\n        markers: () => new MarkersPanel(this.chartMenuUtils),\n        [labels]: () => this.initLabels(),\n        sectorLabels: () => this.initSectorLabels(),\n        [shadow]: () => new ShadowPanel(this.chartMenuUtils),\n        [tooltips]: () => this.initTooltips(),\n        bins: () => this.initBins(),\n        whiskers: () => new WhiskersPanel(this.chartMenuUtils),\n        caps: () => new CapsPanel(this.chartMenuUtils),\n        connectorLine: () => new ConnectorLinePanel(this.chartMenuUtils),\n        seriesItems: () => new SeriesItemsPanel(this.chartMenuUtils),\n        tileSpacing: () => new TileSpacingPanel(this.chartMenuUtils),\n        shape: () => this.initShape(),\n        size: () => this.initSize('size', 'size'),\n        minSize: () => this.initSize('size', 'minSize'),\n        maxSize: () => this.initSize('maxSize', 'maxSize'),\n    } as const;\n\n    private readonly seriesWidgetMappings: { [K in ChartSeriesType]?: (keyof typeof this.widgetFuncs)[] } = {\n        bar: [tooltips, strokeWidth, lineDash, lineOpacity, fillOpacity, labels, shadow],\n        pie: [tooltips, strokeWidth, lineOpacity, fillOpacity, labels, 'sectorLabels', shadow],\n        donut: [tooltips, strokeWidth, lineOpacity, fillOpacity, labels, 'sectorLabels', shadow],\n        line: [tooltips, 'lineWidth', lineDash, lineOpacity, 'markers', labels],\n        scatter: [tooltips, 'shape', 'size', strokeWidth, labels],\n        bubble: [tooltips, 'shape', 'minSize', 'maxSize', strokeWidth, labels],\n        area: [tooltips, 'lineWidth', lineDash, lineOpacity, fillOpacity, 'markers', labels, shadow],\n        histogram: [tooltips, 'bins', strokeWidth, lineDash, lineOpacity, fillOpacity, labels, shadow],\n        'radial-column': [tooltips, strokeWidth, lineDash, lineOpacity, fillOpacity, labels],\n        'radial-bar': [tooltips, strokeWidth, lineDash, lineOpacity, fillOpacity, labels],\n        'radar-line': [tooltips, strokeWidth, lineDash, lineOpacity, 'markers', labels],\n        'radar-area': [tooltips, strokeWidth, lineDash, lineOpacity, fillOpacity, 'markers', labels],\n        nightingale: [tooltips, strokeWidth, lineDash, lineOpacity, fillOpacity, labels],\n        'box-plot': [tooltips, strokeWidth, lineDash, lineOpacity, fillOpacity, 'whiskers', 'caps'],\n        'range-bar': [tooltips, strokeWidth, lineDash, lineOpacity, fillOpacity, labels],\n        'range-area': [tooltips, 'lineWidth', lineDash, lineOpacity, fillOpacity, 'markers', labels, shadow],\n        treemap: [tooltips, 'tileSpacing'],\n        sunburst: [tooltips],\n        heatmap: [tooltips, labels, 'lineColor', 'lineWidth', lineOpacity],\n        waterfall: [tooltips, 'connectorLine', 'seriesItems'],\n    };\n\n    constructor(private readonly options: FormatPanelOptions) {\n        super();\n        this.seriesType = options.seriesType;\n    }\n\n    public postConstruct() {\n        const {\n            isExpandedOnInit: expanded,\n            chartOptionsService,\n            chartController,\n            registerGroupComponent,\n        } = this.options;\n        const seriesGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-top-level',\n            direction: 'vertical',\n            title: this.translate('series'),\n            expanded,\n            suppressEnabledCheckbox: true,\n        };\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"seriesGroup\">\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector],\n            { seriesGroup: seriesGroupParams }\n        );\n\n        registerGroupComponent(this.seriesGroup);\n\n        this.chartMenuUtils = this.createManagedBean(\n            new ChartMenuParamsFactory(chartOptionsService.getSeriesOptionsProxy(() => this.seriesType))\n        );\n\n        this.addManagedListeners(chartController, { chartSeriesChartTypeChanged: this.refreshWidgets.bind(this) });\n\n        this.refreshWidgets();\n    }\n\n    private refreshWidgets(): void {\n        const { chartController } = this.options;\n        this.destroyActivePanels();\n\n        const chart = chartController.getChartProxy().getChart();\n        chart\n            .waitForUpdate()\n            .then(() => {\n                const componentWasRemoved = !this.isAlive();\n                if (componentWasRemoved) {\n                    // It's possible that the component was unmounted during the async delay in updating the chart.\n                    // If this is the case we want to bail out to avoid operating on stale UI components.\n                    return;\n                }\n                if (chartController.isComboChart()) {\n                    this.updateSeriesType();\n                    this.initSeriesSelect();\n                }\n\n                (this.seriesWidgetMappings[this.seriesType] ?? []).forEach((w) => {\n                    const widgetFuncResult = this.widgetFuncs[w]();\n                    let widget: Component<any>;\n                    if (Array.isArray(widgetFuncResult)) {\n                        const comp = this.createBean(widgetFuncResult[0]);\n                        widget = comp;\n                        widgetFuncResult[1](comp);\n                    } else {\n                        widget = this.createBean(widgetFuncResult);\n                    }\n                    this.seriesGroup.addItem(widget);\n                    this.activePanels.push(widget);\n                });\n            })\n            .catch((e) => _errorOnce(`chart rendering failed`, e));\n    }\n\n    private initSeriesSelect() {\n        const seriesSelect = this.createBean(\n            new AgSelect(\n                this.chartMenuUtils.getDefaultSelectParamsWithoutValueParams(\n                    'seriesType',\n                    this.getSeriesSelectOptions(),\n                    `${this.seriesType}`,\n                    (newValue: ChartSeriesType) => {\n                        this.seriesType = newValue;\n                        this.refreshWidgets();\n                    }\n                )\n            )\n        );\n\n        this.seriesGroup.addItem(seriesSelect);\n\n        this.activePanels.push(seriesSelect);\n    }\n\n    private initTooltips(): AgToggleButton {\n        return new AgToggleButton(\n            this.chartMenuUtils.addValueParams<AgToggleButtonParams>('tooltip.enabled', {\n                label: this.translate('tooltips'),\n                labelAlignment: 'left',\n                labelWidth: 'flex',\n                inputWidth: 'flex',\n            })\n        );\n    }\n\n    private initLineColor(): AgColorPicker {\n        return new AgColorPicker(this.chartMenuUtils.getDefaultColorPickerParams('stroke', 'strokeColor'));\n    }\n\n    private initStrokeWidth(labelKey: 'strokeWidth' | 'lineWidth'): AgSlider {\n        return new AgSlider(this.chartMenuUtils.getDefaultSliderParams('strokeWidth', labelKey, 10));\n    }\n\n    private initLineDash(): AgSlider {\n        return new AgSlider(this.chartMenuUtils.getDefaultSliderParams('lineDash', 'lineDash', 30, true));\n    }\n\n    private initOpacity(type: 'strokeOpacity' | 'fillOpacity'): AgSlider {\n        const params = this.chartMenuUtils.getDefaultSliderParams(type, type, 1);\n        params.step = 0.05;\n        return new AgSlider(params);\n    }\n\n    private initLabels(): [FontPanel, (fontPanel: FontPanel) => void] {\n        const isPieChart = isPieChartSeries(this.seriesType);\n        const seriesOptionLabelProperty = isPieChart ? 'calloutLabel' : 'label';\n        const labelKey = isPieChart ? 'calloutLabels' : 'labels';\n        const labelParams = this.chartMenuUtils.getDefaultFontPanelParams(seriesOptionLabelProperty, labelKey);\n        const fontPanel = new FontPanel(labelParams);\n\n        const addItems = (labelPanelComp: FontPanel) => {\n            if (isPieChart) {\n                const calloutPanelComp = labelPanelComp.createManagedBean(new CalloutPanel(this.chartMenuUtils));\n                labelPanelComp.addItem(calloutPanelComp);\n                this.activePanels.push(calloutPanelComp);\n            }\n\n            if (this.seriesType === 'range-bar') {\n                // Add label placement dropdown\n                const options: Array<ListOption<AgRangeBarSeriesLabelPlacement>> = [\n                    { value: 'inside', text: this.translate('inside') },\n                    { value: 'outside', text: this.translate('outside') },\n                ];\n                const placementSelect = labelPanelComp.createManagedBean(\n                    new AgSelect(\n                        this.chartMenuUtils.getDefaultSelectParams('label.placement', 'labelPlacement', options)\n                    )\n                );\n\n                labelPanelComp.addItem(placementSelect);\n                this.activePanels.push(placementSelect);\n\n                // Add padding slider\n                const paddingSlider = labelPanelComp.createManagedBean(\n                    new AgSlider(this.chartMenuUtils.getDefaultSliderParams('label.padding', 'padding', 200))\n                );\n\n                labelPanelComp.addItem(paddingSlider);\n                this.activePanels.push(paddingSlider);\n            }\n        };\n\n        return [fontPanel, addItems];\n    }\n\n    private initSectorLabels(): [FontPanel, (fontPanel: FontPanel) => void] {\n        const sectorParams = this.chartMenuUtils.getDefaultFontPanelParams('sectorLabel', 'sectorLabels');\n        const fontPanel = new FontPanel(sectorParams);\n\n        const addItems = (sectorPanelComp: FontPanel) => {\n            const positionRatioParams = this.chartMenuUtils.getDefaultSliderParams(\n                'sectorLabel.positionRatio',\n                'positionRatio',\n                1\n            );\n            positionRatioParams.step = 0.05;\n            const positionRatioComp = sectorPanelComp.createManagedBean(new AgSlider(positionRatioParams));\n            sectorPanelComp.addItem(positionRatioComp);\n        };\n\n        return [fontPanel, addItems];\n    }\n\n    private initBins(): AgSlider {\n        const params = this.chartMenuUtils.getDefaultSliderParams('binCount', 'histogramBinCount', 20);\n        const chartOptions = this.chartMenuUtils.getChartOptions();\n        // this needs fixing\n        const value = (chartOptions.getValue<any>('bins') ?? chartOptions.getValue<any>('calculatedBins', true)).length;\n        params.value = `${value}`;\n        params.maxValue = Math.max(value, 20);\n        return new AgSlider(params);\n    }\n\n    private initShape(): AgSelect {\n        return new AgSelect(\n            this.chartMenuUtils.getDefaultSelectParams(\n                'shape',\n                'shape',\n                getShapeSelectOptions(this.chartTranslationService)\n            )\n        );\n    }\n\n    private initSize(expression: 'size' | 'maxSize', labelKey: 'size' | 'minSize' | 'maxSize'): AgSlider {\n        return new AgSlider(this.chartMenuUtils.getDefaultSliderParams(expression, labelKey, 60));\n    }\n\n    private getSeriesSelectOptions(): ListOption[] {\n        const activeSeriesTypes = this.getActiveSeriesTypes();\n        return (['area', 'bar', 'line'] as const)\n            .filter((seriesType) => activeSeriesTypes.includes(seriesType))\n            .map((value) => ({ value, text: this.translate(value) }));\n    }\n\n    private updateSeriesType() {\n        const activeSeriesTypes = this.getActiveSeriesTypes();\n        const invalidSeriesType = !activeSeriesTypes.includes(this.seriesType);\n        if (invalidSeriesType && activeSeriesTypes.length > 0) {\n            this.seriesType = activeSeriesTypes[0]; // default to first active series type\n        }\n    }\n\n    private getActiveSeriesTypes(): ChartSeriesType[] {\n        return this.options.chartController.getActiveSeriesChartTypes().map((s) => getSeriesType(s.chartType));\n    }\n\n    private translate(key: ChartTranslationKey) {\n        return this.chartTranslationService.translate(key);\n    }\n\n    private destroyActivePanels(): void {\n        this.activePanels.forEach((panel) => {\n            _removeFromParent(panel.getGui());\n            this.destroyBean(panel);\n        });\n    }\n\n    public override destroy(): void {\n        this.destroyActivePanels();\n        super.destroy();\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { Component } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport { AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class CalloutPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    public postConstruct() {\n        const calloutGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate('callout'),\n            enabled: true,\n            suppressOpenCloseIcons: true,\n            suppressEnabledCheckbox: true,\n        };\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"calloutGroup\">\n                <ag-slider data-ref=\"calloutLengthSlider\"></ag-slider>\n                <ag-slider data-ref=\"calloutStrokeWidthSlider\"></ag-slider>\n                <ag-slider data-ref=\"labelOffsetSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgSliderSelector],\n            {\n                calloutGroup: calloutGroupParams,\n                calloutLengthSlider: this.chartMenuUtils.getDefaultSliderParams('calloutLine.length', 'length', 40),\n                calloutStrokeWidthSlider: this.chartMenuUtils.getDefaultSliderParams(\n                    'calloutLine.strokeWidth',\n                    'strokeWidth',\n                    10\n                ),\n                labelOffsetSlider: this.chartMenuUtils.getDefaultSliderParams('calloutLabel.offset', 'offset', 30),\n            }\n        );\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { Component } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport { AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class CapsPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    public postConstruct() {\n        const capsGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate('cap'),\n            enabled: true,\n            suppressOpenCloseIcons: true,\n            suppressEnabledCheckbox: true,\n        };\n        const capLengthRatioSliderParams = this.chartMenuUtils.getDefaultSliderParams(\n            'cap.lengthRatio',\n            'capLengthRatio',\n            1\n        );\n        capLengthRatioSliderParams.step = 0.05;\n\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"capsGroup\">\n                <ag-slider data-ref=\"capLengthRatioSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgSliderSelector],\n            {\n                capsGroup: capsGroupParams,\n                capLengthRatioSlider: capLengthRatioSliderParams,\n            }\n        );\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { Component } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport { AgColorPickerSelector } from '../../../../../widgets/agColorPicker';\nimport type { AgSliderParams } from '../../../../../widgets/agSlider';\nimport { AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationKey, ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class ConnectorLinePanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    public postConstruct() {\n        const lineGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate('connectorLine'),\n            enabled: true,\n            suppressOpenCloseIcons: true,\n            suppressEnabledCheckbox: true,\n        };\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"lineGroup\">\n                <ag-color-picker data-ref=\"lineColorPicker\"></ag-color-picker>\n                <ag-slider data-ref=\"lineStrokeWidthSlider\"></ag-slider>\n                <ag-slider data-ref=\"lineOpacitySlider\"></ag-slider>\n                <ag-slider data-ref=\"lineDashSlider\"></ag-slider>                \n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgColorPickerSelector, AgSliderSelector],\n            {\n                lineGroup: lineGroupParams,\n                lineColorPicker: this.chartMenuUtils.getDefaultColorPickerParams('line.stroke'),\n                lineStrokeWidthSlider: this.getSliderParams('strokeWidth', 10, 'line.strokeWidth'),\n                lineDashSlider: this.getSliderParams('lineDash', 30, 'line.lineDash', 1, true),\n                lineOpacitySlider: this.getSliderParams('strokeOpacity', 1, 'line.strokeOpacity', 0.05),\n            }\n        );\n    }\n\n    private getSliderParams(\n        labelKey: ChartTranslationKey,\n        maxValue: number,\n        seriesOptionKey: string,\n        step: number = 1,\n        isArray: boolean = false\n    ): AgSliderParams {\n        const params = this.chartMenuUtils.getDefaultSliderParams(seriesOptionKey, labelKey, maxValue, isArray);\n        params.step = step;\n        return params;\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { AgSelectSelector, Component } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport { AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\nimport { getShapeSelectOptions } from './seriesUtils';\n\nexport class MarkersPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    public postConstruct() {\n        const seriesMarkersGroupParams = this.chartMenuUtils.addEnableParams<AgGroupComponentParams>('marker.enabled', {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate('markers'),\n            suppressEnabledCheckbox: true,\n            useToggle: true,\n            suppressOpenCloseIcons: true,\n        });\n\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"seriesMarkersGroup\">\n                <ag-select data-ref=\"seriesMarkerShapeSelect\"></ag-select>\n                <ag-slider data-ref=\"seriesMarkerSizeSlider\"></ag-slider>\n                <ag-slider data-ref=\"seriesMarkerStrokeWidthSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgSelectSelector, AgSliderSelector],\n            {\n                seriesMarkersGroup: seriesMarkersGroupParams,\n                seriesMarkerShapeSelect: this.chartMenuUtils.getDefaultSelectParams(\n                    'marker.shape',\n                    'shape',\n                    getShapeSelectOptions(this.chartTranslationService)\n                ),\n                seriesMarkerSizeSlider: this.chartMenuUtils.getDefaultSliderParams('marker.size', 'size', 60),\n                seriesMarkerStrokeWidthSlider: this.chartMenuUtils.getDefaultSliderParams(\n                    'marker.strokeWidth',\n                    'strokeWidth',\n                    10\n                ),\n            }\n        );\n    }\n}\n", "import type { ListOption } from '@ag-grid-community/core';\n\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\n\nexport function getShapeSelectOptions(chartTranslationService: ChartTranslationService): ListOption[] {\n    return (['square', 'circle', 'cross', 'diamond', 'plus', 'triangle', 'heart'] as const).map((value) => ({\n        value,\n        text: chartTranslationService.translate(value),\n    }));\n}\n", "import type { AgSelectParams, BeanCollection, ListOption } from '@ag-grid-community/core';\nimport { AgSelectSelector, Component, RefPlaceholder, _removeFromParent } from '@ag-grid-community/core';\nimport type { AgGroupComponent, AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport { AgSlider } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationKey, ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\nimport { FontPanel } from '../fontPanel';\n\ntype SeriesItemType = 'positive' | 'negative';\n\nexport class SeriesItemsPanel extends Component {\n    private readonly seriesItemsGroup: AgGroupComponent = RefPlaceholder;\n\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    private activePanels: Component<any>[] = [];\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    public postConstruct() {\n        const seriesItemsGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate('seriesItems'),\n            enabled: true,\n            suppressOpenCloseIcons: true,\n            suppressEnabledCheckbox: true,\n        };\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"seriesItemsGroup\">\n                <ag-select data-ref=\"seriesItemSelect\"></ag-select>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgSelectSelector],\n            {\n                seriesItemsGroup: seriesItemsGroupParams,\n                seriesItemSelect: this.getSeriesItemsParams(),\n            }\n        );\n\n        this.initSeriesControls();\n    }\n\n    private getSeriesItemsParams(): AgSelectParams {\n        const options: ListOption<SeriesItemType>[] = [\n            { value: 'positive', text: this.chartTranslationService.translate('seriesItemPositive') },\n            { value: 'negative', text: this.chartTranslationService.translate('seriesItemNegative') },\n        ];\n\n        const seriesItemChangedCallback = (newValue: SeriesItemType) => {\n            this.destroyActivePanels();\n            this.initSeriesControls(newValue as SeriesItemType);\n        };\n\n        return this.chartMenuUtils.getDefaultSelectParamsWithoutValueParams(\n            'seriesItemType',\n            options,\n            'positive',\n            seriesItemChangedCallback\n        );\n    }\n\n    private initSeriesControls(itemType: SeriesItemType = 'positive') {\n        this.initSlider('strokeWidth', 10, `item.${itemType}.strokeWidth`);\n        this.initSlider('lineDash', 30, `item.${itemType}.lineDash`, 1, true);\n        this.initSlider('strokeOpacity', 1, `item.${itemType}.strokeOpacity`, 0.05, false);\n        this.initSlider('fillOpacity', 1, `item.${itemType}.fillOpacity`, 0.05, false);\n        this.initItemLabels(itemType);\n    }\n\n    private initSlider(\n        labelKey: ChartTranslationKey,\n        maxValue: number,\n        seriesOptionKey: string,\n        step: number = 1,\n        isArray: boolean = false\n    ) {\n        const params = this.chartMenuUtils.getDefaultSliderParams(seriesOptionKey, labelKey, maxValue, isArray);\n        params.step = step;\n\n        const itemSlider = this.seriesItemsGroup.createManagedBean(new AgSlider(params));\n\n        this.seriesItemsGroup.addItem(itemSlider);\n        this.activePanels.push(itemSlider);\n    }\n\n    private initItemLabels(itemType: 'positive' | 'negative') {\n        const sectorParams = this.chartMenuUtils.getDefaultFontPanelParams(\n            `item.${itemType}.label`,\n            'seriesItemLabels'\n        );\n\n        const labelPanelComp = this.createBean(new FontPanel(sectorParams));\n        this.seriesItemsGroup.addItem(labelPanelComp);\n        this.activePanels.push(labelPanelComp);\n    }\n\n    private destroyActivePanels(): void {\n        this.activePanels.forEach((panel) => {\n            _removeFromParent(panel.getGui());\n            this.destroyBean(panel);\n        });\n    }\n\n    public override destroy(): void {\n        this.destroyActivePanels();\n        super.destroy();\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { Component } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport { AgColorPickerSelector } from '../../../../../widgets/agColorPicker';\nimport type { AgSliderParams } from '../../../../../widgets/agSlider';\nimport { AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationKey, ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class ShadowPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    constructor(\n        private readonly chartMenuUtils: ChartMenuParamsFactory,\n        private propertyKey: string = 'shadow'\n    ) {\n        super();\n    }\n\n    public postConstruct() {\n        // Determine the path within the series options object to get/set the individual shadow options\n        const propertyNamespace = this.propertyKey;\n        const shadowGroupParams = this.chartMenuUtils.addEnableParams<AgGroupComponentParams>(\n            `${propertyNamespace}.enabled`,\n            {\n                cssIdentifier: 'charts-format-sub-level',\n                direction: 'vertical',\n                suppressOpenCloseIcons: true,\n                title: this.chartTranslationService.translate('shadow'),\n                suppressEnabledCheckbox: true,\n                useToggle: true,\n            }\n        );\n        const shadowColorPickerParams = this.chartMenuUtils.getDefaultColorPickerParams(`${propertyNamespace}.color`);\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"shadowGroup\">\n                <ag-color-picker data-ref=\"shadowColorPicker\"></ag-color-picker>\n                <ag-slider data-ref=\"shadowBlurSlider\"></ag-slider>\n                <ag-slider data-ref=\"shadowXOffsetSlider\"></ag-slider>\n                <ag-slider data-ref=\"shadowYOffsetSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgColorPickerSelector, AgSliderSelector],\n            {\n                shadowGroup: shadowGroupParams,\n                shadowColorPicker: shadowColorPickerParams,\n                shadowBlurSlider: this.getSliderParams('blur', 0, 20),\n                shadowXOffsetSlider: this.getSliderParams('xOffset', -10, 10),\n                shadowYOffsetSlider: this.getSliderParams('yOffset', -10, 10),\n            }\n        );\n    }\n\n    private getSliderParams(property: ChartTranslationKey, minValue: number, defaultMaxValue: number): AgSliderParams {\n        const expression = `${this.propertyKey}.${property}`;\n        const params = this.chartMenuUtils.getDefaultSliderParams(expression, property, defaultMaxValue);\n        params.minValue = minValue;\n        return params;\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { Component } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport type { AgSliderParams } from '../../../../../widgets/agSlider';\nimport { AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationKey, ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class TileSpacingPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    public postConstruct() {\n        const groupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            enabled: true,\n            suppressOpenCloseIcons: true,\n            suppressEnabledCheckbox: true,\n        };\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"groupSpacing\">\n                <ag-slider data-ref=\"groupPaddingSlider\"></ag-slider>\n                <ag-slider data-ref=\"groupSpacingSlider\"></ag-slider>\n            </ag-group-component>\n            <ag-group-component data-ref=\"tileSpacing\">\n                <ag-slider data-ref=\"tilePaddingSlider\"></ag-slider>\n                <ag-slider data-ref=\"tileSpacingSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgSliderSelector],\n            {\n                groupSpacing: { ...groupParams, title: this.chartTranslationService.translate('group') },\n                tileSpacing: { ...groupParams, title: this.chartTranslationService.translate('tile') },\n                groupPaddingSlider: this.getSliderParams('padding', 'group.padding'),\n                groupSpacingSlider: this.getSliderParams('spacing', 'group.gap'),\n                tilePaddingSlider: this.getSliderParams('padding', 'tile.padding'),\n                tileSpacingSlider: this.getSliderParams('spacing', 'tile.gap'),\n            }\n        );\n    }\n\n    private getSliderParams(labelKey: ChartTranslationKey, key: string): AgSliderParams {\n        return this.chartMenuUtils.getDefaultSliderParams(key, labelKey, 10);\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { Component } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport { AgColorPickerSelector } from '../../../../../widgets/agColorPicker';\nimport { AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class WhiskersPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    public postConstruct() {\n        const whiskersGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate('whisker'),\n            enabled: true,\n            suppressOpenCloseIcons: true,\n            suppressEnabledCheckbox: true,\n        };\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"whiskersGroup\">\n                <ag-color-picker data-ref=\"whiskerColorPicker\"></ag-color-picker>\n                <ag-slider data-ref=\"whiskerThicknessSlider\"></ag-slider>\n                <ag-slider data-ref=\"whiskerOpacitySlider\"></ag-slider>\n                <ag-slider data-ref=\"whiskerLineDashSlider\"></ag-slider>\n                <ag-slider data-ref=\"whiskerLineDashOffsetSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgColorPickerSelector, AgSliderSelector],\n            {\n                whiskersGroup: whiskersGroupParams,\n                whiskerColorPicker: this.chartMenuUtils.getDefaultColorPickerParams('whisker.stroke'),\n                whiskerThicknessSlider: this.chartMenuUtils.getDefaultSliderParams(\n                    'whisker.strokeWidth',\n                    'strokeWidth',\n                    10\n                ),\n                whiskerOpacitySlider: this.chartMenuUtils.getDefaultSliderParams(\n                    'whisker.strokeOpacity',\n                    'strokeOpacity',\n                    1\n                ),\n                whiskerLineDashSlider: this.chartMenuUtils.getDefaultSliderParams(\n                    'whisker.lineDash',\n                    'lineDash',\n                    30,\n                    true\n                ),\n                whiskerLineDashOffsetSlider: this.chartMenuUtils.getDefaultSliderParams(\n                    'whisker.lineDashOffset',\n                    'lineDashOffset',\n                    30\n                ),\n            }\n        );\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { Component, RefPlaceholder } from '@ag-grid-community/core';\nimport type { AgGroupComponent, AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\nimport { isCartesian, isPolar } from '../../../utils/seriesTypeMapper';\nimport { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\nimport type { FormatPanelOptions } from '../formatPanel';\nimport { ChartTitlePanel } from './chartTitlePanel';\nimport { TitlePanel } from './titlePanel';\n\nexport class TitlesPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    private readonly titleGroup: AgGroupComponent = RefPlaceholder;\n\n    constructor(private readonly options: FormatPanelOptions) {\n        super();\n    }\n\n    public postConstruct() {\n        const {\n            chartMenuParamsFactory,\n            chartAxisMenuParamsFactory,\n            chartOptionsService,\n            seriesType,\n            isExpandedOnInit: expanded = false,\n            registerGroupComponent,\n        } = this.options;\n        const axisTitlePanels: TitlePanel[] = [];\n        if (isCartesian(seriesType)) {\n            const createAxisParamsFactory = (axisType: 'xAxis' | 'yAxis') =>\n                this.createManagedBean(\n                    new ChartMenuParamsFactory(chartOptionsService.getCartesianAxisThemeOverridesProxy(axisType))\n                );\n            axisTitlePanels.push(\n                this.createManagedBean(new TitlePanel(createAxisParamsFactory('xAxis'), 'horizontalAxisTitle', 'title'))\n            );\n            axisTitlePanels.push(\n                this.createManagedBean(new TitlePanel(createAxisParamsFactory('yAxis'), 'verticalAxisTitle', 'title'))\n            );\n        } else if (isPolar(seriesType)) {\n            axisTitlePanels.push(\n                this.createManagedBean(new TitlePanel(chartAxisMenuParamsFactory, 'polarAxisTitle', 'title'))\n            );\n        }\n        const titleGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-top-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate('chartTitles'),\n            expanded,\n            suppressEnabledCheckbox: true,\n            items: [\n                this.createManagedBean(new ChartTitlePanel(chartMenuParamsFactory, 'chartTitle', 'title')),\n                this.createManagedBean(new TitlePanel(chartMenuParamsFactory, 'chartSubtitle', 'subtitle')),\n                ...axisTitlePanels,\n            ],\n        };\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"titleGroup\"></ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector],\n            { titleGroup: titleGroupParams }\n        );\n        registerGroupComponent(this.titleGroup);\n    }\n}\n", "import type { AgInputTextFieldParams, BeanCollection } from '@ag-grid-community/core';\nimport { AgInputTextField, Component } from '@ag-grid-community/core';\n\nimport type { AgSliderParams } from '../../../../../widgets/agSlider';\nimport { AgSlider } from '../../../../../widgets/agSlider';\nimport type { ChartOptionsProxy } from '../../../services/chartOptionsService';\nimport type { ChartTranslationKey, ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\nimport type { FontPanelParams } from '../fontPanel';\nimport { FontPanel } from '../fontPanel';\n\nexport class TitlePanel extends Component {\n    protected chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    protected readonly chartOptions: ChartOptionsProxy;\n\n    protected fontPanel: FontPanel;\n\n    constructor(\n        private readonly chartMenuUtils: ChartMenuParamsFactory,\n        private readonly name: ChartTranslationKey,\n        protected readonly key: string\n    ) {\n        super(/* html */ `<div></div>`);\n        this.chartOptions = chartMenuUtils.getChartOptions();\n    }\n\n    public postConstruct(): void {\n        this.initFontPanel();\n    }\n\n    protected hasTitle(): boolean {\n        const title: any = this.chartOptions.getValue(this.key);\n        return title && title.enabled && title.text && title.text.length > 0;\n    }\n\n    private initFontPanel(): void {\n        const hasTitle = this.hasTitle();\n\n        const fontPanelParams: FontPanelParams = {\n            name: this.chartTranslationService.translate(this.name),\n            enabled: hasTitle,\n            suppressEnabledCheckbox: false,\n            chartMenuParamsFactory: this.chartMenuUtils,\n            keyMapper: (key) => `${this.key}.${key}`,\n            onEnableChange: (enabled) => this.onEnableChange(enabled),\n        };\n\n        this.fontPanel = this.createManagedBean(new FontPanel(fontPanelParams));\n\n        this.fontPanel.addItem(this.createBean(new AgInputTextField(this.getTextInputParams())), true);\n        this.fontPanel.addItem(this.createBean(new AgSlider(this.getSpacingSliderParams())));\n\n        this.getGui().appendChild(this.fontPanel.getGui());\n    }\n\n    protected getTextInputParams(): AgInputTextFieldParams {\n        return this.chartMenuUtils.addValueParams(`${this.key}.text`, {\n            label: this.chartTranslationService.translate('title'),\n            labelAlignment: 'top',\n        });\n    }\n\n    protected getSpacingSliderParams(): AgSliderParams {\n        return this.chartMenuUtils.getDefaultSliderParams(`${this.key}.spacing`, 'spacing', 100);\n    }\n\n    protected onEnableChange(enabled: boolean): void {\n        this.chartOptions.setValue(`${this.key}.enabled`, enabled);\n    }\n}\n", "import type { AgInputTextFieldParams, BeanCollection } from '@ag-grid-community/core';\n\nimport type { AgSliderParams } from '../../../../../widgets/agSlider';\nimport type { ChartMenuService } from '../../../services/chartMenuService';\nimport { TitlePanel } from './titlePanel';\n\nexport class ChartTitlePanel extends TitlePanel {\n    private chartMenuService: ChartMenuService;\n\n    public override wireBeans(beans: BeanCollection): void {\n        super.wireBeans(beans);\n        this.chartMenuService = beans.chartMenuService as ChartMenuService;\n    }\n\n    private titlePlaceholder: string;\n\n    public override postConstruct(): void {\n        this.titlePlaceholder = this.chartTranslationService.translate('titlePlaceholder');\n        super.postConstruct();\n        // edits to the title can disable it, so keep the checkbox in sync:\n        this.addManagedEventListeners({\n            chartTitleEdit: () => {\n                this.fontPanel.setEnabled(this.hasTitle());\n            },\n        });\n    }\n\n    protected override getTextInputParams(): AgInputTextFieldParams {\n        const params = super.getTextInputParams();\n        if (this.shouldOverrideTextWithPlaceholder(params.value)) {\n            params.value = this.titlePlaceholder;\n        }\n        return params;\n    }\n\n    protected override getSpacingSliderParams(): AgSliderParams {\n        const params = super.getSpacingSliderParams();\n        // Default title spacing is 10, but this isn't reflected in the options - this should really be fixed there.\n        params.value = '10';\n        return params;\n    }\n\n    protected override onEnableChange(enabled: boolean): void {\n        if (this.chartMenuService.doesChartToolbarExist()) {\n            // extra padding is only included when the toolbar is present\n            const topPadding: number = this.chartOptions.getValue('padding.top');\n            this.chartOptions.setValue('padding.top', enabled ? topPadding - 20 : topPadding + 20);\n        }\n\n        this.chartOptions.setValue(`${this.key}.enabled`, enabled);\n        const currentTitleText = this.chartOptions.getValue(`${this.key}.text`);\n        if (enabled && this.shouldOverrideTextWithPlaceholder(currentTitleText)) {\n            this.chartOptions.setValue(`${this.key}.text`, this.titlePlaceholder);\n        }\n    }\n\n    private shouldOverrideTextWithPlaceholder(currentTitleText?: string): boolean {\n        return currentTitleText === 'Title' || currentTitleText?.trim().length === 0;\n    }\n}\n", "import {\n    Component,\n    RefPlaceholder,\n    _clearElement,\n    _createIconNoSpan,\n    _getAbsoluteWidth,\n    _radioCssClass,\n    _setDisplayed,\n    _shallowCompare,\n} from '@ag-grid-community/core';\nimport type { AgChartThemePalette } from 'ag-charts-community';\n\nimport type { ChartController } from '../../chartController';\nimport { isStockTheme } from '../../chartProxies/chartTheme';\nimport { MiniChartsContainer } from './miniChartsContainer';\n\ntype AnimationDirection = 'left' | 'right';\n\nexport class ChartSettingsPanel extends Component {\n    private readonly eMiniChartsContainer: HTMLElement = RefPlaceholder;\n    private readonly eNavBar: HTMLElement = RefPlaceholder;\n    private readonly eCardSelector: HTMLElement = RefPlaceholder;\n    private readonly ePrevBtn: HTMLElement = RefPlaceholder;\n    private readonly eNextBtn: HTMLElement = RefPlaceholder;\n\n    private miniChartsContainers: MiniChartsContainer[] = [];\n    private cardItems: HTMLElement[] = [];\n\n    private activePaletteIndex = 0;\n    private palettes: AgChartThemePalette[] = [];\n    private themes: string[] = [];\n\n    private isAnimating: boolean;\n\n    constructor(private readonly chartController: ChartController) {\n        super(/* html */ `<div class=\"ag-chart-settings-wrapper\">\n            <div data-ref=\"eMiniChartsContainer\" class=\"ag-chart-settings-mini-charts-container ag-scrollable-container\"></div>\n            <div data-ref=\"eNavBar\" class=\"ag-chart-settings-nav-bar\">\n                <div data-ref=\"ePrevBtn\" class=\"ag-chart-settings-prev\">\n                    <button type=\"button\" class=\"ag-button ag-chart-settings-prev-button\"></button>\n                </div>\n                <div data-ref=\"eCardSelector\" class=\"ag-chart-settings-card-selector\"></div>\n                <div data-ref=\"eNextBtn\" class=\"ag-chart-settings-next\">\n                    <button type=\"button\" class=\"ag-button ag-chart-settings-next-button\"></button>\n                </div>\n            </div>\n        </div>`);\n    }\n\n    public postConstruct() {\n        this.resetPalettes();\n\n        this.ePrevBtn.insertAdjacentElement('afterbegin', _createIconNoSpan('previous', this.gos)!);\n        this.eNextBtn.insertAdjacentElement('afterbegin', _createIconNoSpan('next', this.gos)!);\n\n        this.addManagedElementListeners(this.ePrevBtn, { click: () => this.setActivePalette(this.getPrev(), 'left') });\n        this.addManagedElementListeners(this.eNextBtn, { click: () => this.setActivePalette(this.getNext(), 'right') });\n\n        // change the selected chart when a combo chart is modified via the data panel, i.e. the custom combo should be selected\n        const reset = () => this.resetPalettes(true);\n        this.addManagedListeners(this.chartController, {\n            chartTypeChanged: reset,\n            chartApiUpdate: reset,\n        });\n\n        this.scrollSelectedIntoView();\n    }\n\n    private scrollSelectedIntoView(): void {\n        // the panel is not immediately visible due to the slide animation, so we add a\n        // setTimeout to wait until the panel animation is over and is able to scroll\n        setTimeout(() => {\n            const isMiniChartsContainerVisible = (miniChartsContainers: MiniChartsContainer) => {\n                return !miniChartsContainers.getGui().classList.contains('ag-hidden');\n            };\n            const currentMiniChartContainer = this.miniChartsContainers.find(isMiniChartsContainerVisible);\n            const currentChart = currentMiniChartContainer!.getGui().querySelector('.ag-selected') as HTMLElement;\n\n            if (currentChart) {\n                const parent = currentChart.offsetParent as HTMLElement;\n                if (parent) {\n                    this.eMiniChartsContainer.scrollTo(0, parent.offsetTop);\n                }\n            }\n        }, 250);\n    }\n\n    private resetPalettes(forceReset?: boolean): void {\n        const palettes = this.chartController.getPalettes();\n        const themeTemplateParameters = this.chartController.getThemeTemplateParameters();\n        const chartGroups = this.gos.get('chartToolPanelsDef')?.settingsPanel?.chartGroupsDef;\n\n        if ((_shallowCompare(palettes, this.palettes) && !forceReset) || this.isAnimating) {\n            return;\n        }\n\n        this.palettes = palettes;\n        this.themes = this.chartController.getThemeNames();\n        this.activePaletteIndex = this.themes.findIndex((name) => name === this.chartController.getChartThemeName());\n        this.cardItems = [];\n\n        _clearElement(this.eCardSelector);\n\n        this.destroyMiniCharts();\n\n        const { themes } = this;\n\n        this.palettes.forEach((palette, index) => {\n            const isActivePalette = this.activePaletteIndex === index;\n            const { fills = [], strokes = [] } = palette;\n            const themeName = themes[index];\n            const isCustomTheme = !isStockTheme(themeName);\n            const miniChartsContainer = this.createBean(\n                new MiniChartsContainer(\n                    this.chartController,\n                    fills,\n                    strokes,\n                    themeTemplateParameters[index],\n                    isCustomTheme,\n                    chartGroups\n                )\n            );\n\n            this.miniChartsContainers.push(miniChartsContainer);\n            this.eMiniChartsContainer.appendChild(miniChartsContainer.getGui());\n            this.addCardLink(index);\n\n            if (isActivePalette) {\n                miniChartsContainer.updateSelectedMiniChart();\n            } else {\n                miniChartsContainer.setDisplayed(false);\n            }\n        });\n\n        _setDisplayed(this.eNavBar, this.palettes.length > 1);\n        _radioCssClass(this.cardItems[this.activePaletteIndex], 'ag-selected', 'ag-not-selected');\n    }\n\n    private addCardLink(index: number): void {\n        const link = document.createElement('div');\n        link.classList.add('ag-chart-settings-card-item');\n\n        this.addManagedElementListeners(link, {\n            click: () => {\n                this.setActivePalette(index, index < this.activePaletteIndex ? 'left' : 'right');\n            },\n        });\n\n        this.eCardSelector.appendChild(link);\n        this.cardItems.push(link);\n    }\n\n    private getPrev(): number {\n        let prev = this.activePaletteIndex - 1;\n\n        if (prev < 0) {\n            prev = this.palettes.length - 1;\n        }\n\n        return prev;\n    }\n\n    private getNext(): number {\n        let next = this.activePaletteIndex + 1;\n\n        if (next >= this.palettes.length) {\n            next = 0;\n        }\n\n        return next;\n    }\n\n    private setActivePalette(index: number, animationDirection: AnimationDirection) {\n        if (this.isAnimating || this.activePaletteIndex === index) {\n            return;\n        }\n\n        _radioCssClass(this.cardItems[index], 'ag-selected', 'ag-not-selected');\n\n        const currentPalette = this.miniChartsContainers[this.activePaletteIndex];\n        const currentGui = currentPalette.getGui();\n        const futurePalette = this.miniChartsContainers[index];\n        const nextGui = futurePalette.getGui();\n\n        currentPalette.updateSelectedMiniChart();\n        futurePalette.updateSelectedMiniChart();\n\n        const multiplier = animationDirection === 'left' ? -1 : 1;\n        const final = (nextGui.style.left = `${_getAbsoluteWidth(this.getGui()) * multiplier}px`);\n\n        this.activePaletteIndex = index;\n\n        this.isAnimating = true;\n\n        const animatingClass = 'ag-animating';\n\n        futurePalette.setDisplayed(true);\n        currentPalette.addCssClass(animatingClass);\n        futurePalette.addCssClass(animatingClass);\n\n        this.chartController.setChartThemeName(this.themes[index]);\n\n        window.setTimeout(() => {\n            currentGui.style.left = `${-parseFloat(final)}px`;\n            nextGui.style.left = '0px';\n        }, 0);\n\n        window.setTimeout(() => {\n            this.isAnimating = false;\n\n            currentPalette.removeCssClass(animatingClass);\n            futurePalette.removeCssClass(animatingClass);\n            currentPalette.setDisplayed(false);\n        }, 300);\n    }\n\n    private destroyMiniCharts(): void {\n        _clearElement(this.eMiniChartsContainer);\n\n        this.miniChartsContainers = this.destroyBeans(this.miniChartsContainers);\n    }\n\n    public override destroy(): void {\n        this.destroyMiniCharts();\n        super.destroy();\n    }\n}\n", "import type { BeanCollection, ChartGroupsDef, ChartType } from '@ag-grid-community/core';\nimport { Component, KeyCode, _setAriaLabel, _warnOnce } from '@ag-grid-community/core';\nimport { AgGroupComponent } from '@ag-grid-enterprise/core';\n\nimport type { ChartController } from '../../chartController';\nimport type { ChartTranslationService } from '../../services/chartTranslationService';\nimport { getFullChartNameTranslationKey } from '../../utils/seriesTypeMapper';\nimport {\n    MiniArea,\n    MiniAreaColumnCombo,\n    MiniBar,\n    MiniBoxPlot,\n    MiniBubble,\n    MiniColumn,\n    MiniColumnLineCombo,\n    MiniCustomCombo,\n    MiniDonut,\n    MiniHeatmap,\n    MiniHistogram,\n    MiniLine,\n    MiniNightingale,\n    MiniNormalizedArea,\n    MiniNormalizedBar,\n    MiniNormalizedColumn,\n    MiniPie,\n    MiniRadarArea,\n    MiniRadarLine,\n    MiniRadialBar,\n    MiniRadialColumn,\n    MiniRangeArea,\n    MiniRangeBar,\n    MiniScatter,\n    MiniStackedArea,\n    MiniStackedBar,\n    MiniStackedColumn,\n    MiniSunburst,\n    MiniTreemap,\n    MiniWaterfall,\n} from './miniCharts/index';\n// please leave this as is - we want it to be explicit for build reasons\nimport type { MiniChart } from './miniCharts/miniChart';\n\nexport type ThemeTemplateParameters = Map<any, any>;\n\ntype MiniChartMenuMapping = {\n    [K in keyof ChartGroupsDef]-?: MiniChartMenuGroup<K>;\n};\n\ntype MiniChartMenuGroup<K extends keyof ChartGroupsDef> = {\n    [T in NonNullable<ChartGroupsDef[K]>[number]]: MiniChartMenuItem;\n};\n\ninterface MiniChartMenuItem {\n    range: boolean;\n    pivot: boolean;\n    enterprise: boolean;\n    icon: MiniChartConstructor;\n}\n\ntype MiniChartConstructor = {\n    chartType: ChartType;\n    new (...args: any[]): MiniChart;\n};\n\nconst miniChartMapping: MiniChartMenuMapping = {\n    columnGroup: {\n        column: { range: true, pivot: true, enterprise: false, icon: MiniColumn },\n        stackedColumn: { range: true, pivot: true, enterprise: false, icon: MiniStackedColumn },\n        normalizedColumn: { range: true, pivot: true, enterprise: false, icon: MiniNormalizedColumn },\n    },\n    barGroup: {\n        bar: { range: true, pivot: true, enterprise: false, icon: MiniBar },\n        stackedBar: { range: true, pivot: true, enterprise: false, icon: MiniStackedBar },\n        normalizedBar: { range: true, pivot: true, enterprise: false, icon: MiniNormalizedBar },\n    },\n    pieGroup: {\n        pie: { range: true, pivot: true, enterprise: false, icon: MiniPie },\n        donut: { range: true, pivot: true, enterprise: false, icon: MiniDonut },\n        doughnut: { range: true, pivot: true, enterprise: false, icon: MiniDonut },\n    },\n    lineGroup: { line: { range: true, pivot: true, enterprise: false, icon: MiniLine } },\n    scatterGroup: {\n        scatter: { range: true, pivot: true, enterprise: false, icon: MiniScatter },\n        bubble: { range: true, pivot: true, enterprise: false, icon: MiniBubble },\n    },\n    areaGroup: {\n        area: { range: true, pivot: true, enterprise: false, icon: MiniArea },\n        stackedArea: { range: true, pivot: true, enterprise: false, icon: MiniStackedArea },\n        normalizedArea: { range: true, pivot: true, enterprise: false, icon: MiniNormalizedArea },\n    },\n    polarGroup: {\n        radarLine: { range: true, pivot: false, enterprise: true, icon: MiniRadarLine },\n        radarArea: { range: true, pivot: false, enterprise: true, icon: MiniRadarArea },\n        nightingale: { range: true, pivot: false, enterprise: true, icon: MiniNightingale },\n        radialColumn: { range: true, pivot: false, enterprise: true, icon: MiniRadialColumn },\n        radialBar: { range: true, pivot: false, enterprise: true, icon: MiniRadialBar },\n    },\n    statisticalGroup: {\n        boxPlot: { range: true, pivot: false, enterprise: true, icon: MiniBoxPlot },\n        histogram: { range: true, pivot: false, enterprise: false, icon: MiniHistogram },\n        rangeBar: { range: true, pivot: false, enterprise: true, icon: MiniRangeBar },\n        rangeArea: { range: true, pivot: false, enterprise: true, icon: MiniRangeArea },\n    },\n    hierarchicalGroup: {\n        treemap: { range: true, pivot: true, enterprise: true, icon: MiniTreemap },\n        sunburst: { range: true, pivot: true, enterprise: true, icon: MiniSunburst },\n    },\n    specializedGroup: {\n        heatmap: { range: true, pivot: false, enterprise: true, icon: MiniHeatmap },\n        waterfall: { range: true, pivot: false, enterprise: true, icon: MiniWaterfall },\n    },\n    combinationGroup: {\n        columnLineCombo: { range: true, pivot: true, enterprise: false, icon: MiniColumnLineCombo },\n        areaColumnCombo: { range: true, pivot: true, enterprise: false, icon: MiniAreaColumnCombo },\n        customCombo: { range: true, pivot: true, enterprise: false, icon: MiniCustomCombo },\n    },\n};\n\nconst DEFAULT_CHART_GROUPS: ChartGroupsDef = {\n    columnGroup: ['column', 'stackedColumn', 'normalizedColumn'],\n    barGroup: ['bar', 'stackedBar', 'normalizedBar'],\n    pieGroup: ['pie', 'donut'],\n    lineGroup: ['line'],\n    scatterGroup: ['scatter', 'bubble'],\n    areaGroup: ['area', 'stackedArea', 'normalizedArea'],\n    polarGroup: ['radarLine', 'radarArea', 'nightingale', 'radialColumn', 'radialBar'],\n    statisticalGroup: ['boxPlot', 'histogram', 'rangeBar', 'rangeArea'],\n    hierarchicalGroup: ['treemap', 'sunburst'],\n    specializedGroup: ['heatmap', 'waterfall'],\n    combinationGroup: ['columnLineCombo', 'areaColumnCombo', 'customCombo'],\n};\n\nexport class MiniChartsContainer extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    private readonly fills: string[];\n    private readonly strokes: string[];\n    private readonly themeTemplateParameters: ThemeTemplateParameters;\n    private readonly isCustomTheme: boolean;\n    private wrappers: Map<ChartType, HTMLElement> = new Map();\n    private chartController: ChartController;\n\n    private chartGroups: ChartGroupsDef;\n\n    constructor(\n        chartController: ChartController,\n        fills: string[],\n        strokes: string[],\n        themeTemplateParameters: ThemeTemplateParameters,\n        isCustomTheme: boolean,\n        chartGroups: ChartGroupsDef = DEFAULT_CHART_GROUPS\n    ) {\n        super(/* html */ `<div class=\"ag-chart-settings-mini-wrapper\"></div>`);\n\n        this.chartController = chartController;\n        this.fills = fills;\n        this.strokes = strokes;\n        this.themeTemplateParameters = themeTemplateParameters;\n        this.isCustomTheme = isCustomTheme;\n        this.chartGroups = { ...chartGroups };\n    }\n\n    public postConstruct() {\n        // hide MiniCustomCombo if no custom combo exists\n        if (!this.chartController.customComboExists() && this.chartGroups.combinationGroup) {\n            this.chartGroups.combinationGroup = this.chartGroups.combinationGroup.filter(\n                (chartType) => chartType !== 'customCombo'\n            );\n        }\n\n        const eGui = this.getGui();\n        const isEnterprise = this.chartController.isEnterprise();\n        const isPivotChart = this.chartController.isPivotChart();\n        const isRangeChart = !isPivotChart;\n\n        // Determine the set of chart types that are specified by the chartGroupsDef config, filtering out any entries\n        // that are invalid for the current chart configuration (pivot/range) and license type\n        const displayedMenuGroups = Object.keys(this.chartGroups)\n            .map((group: keyof ChartGroupsDef) => {\n                const menuGroup =\n                    group in miniChartMapping ? miniChartMapping[group as keyof typeof miniChartMapping] : undefined;\n                if (!menuGroup) {\n                    // User has specified an invalid chart group in the chartGroupsDef config\n                    _warnOnce(`invalid chartGroupsDef config '${group}'`);\n                    return null;\n                }\n\n                // Determine the valid chart types within this group, based on the chartGroupsDef config\n                const chartGroupValues = this.chartGroups[group as keyof ChartGroupsDef] ?? [];\n                const menuItems = chartGroupValues\n                    .map((chartType) => {\n                        const menuItem =\n                            chartType in menuGroup\n                                ? (menuGroup as Record<typeof chartType, MiniChartMenuItem>)[chartType]\n                                : undefined;\n\n                        if (!menuItem) {\n                            // User has specified an invalid chart type in the chartGroupsDef config\n                            _warnOnce(`invalid chartGroupsDef config '${group}.${chartType}'`);\n                            return null;\n                        }\n\n                        if (!isEnterprise && menuItem.enterprise) {\n                            return null; // skip enterprise charts if community\n                        }\n                        // Only show the chart if it is valid for the current chart configuration (pivot/range)\n                        if (isRangeChart && menuItem.range) return menuItem;\n                        if (isPivotChart && menuItem.pivot) return menuItem;\n                        return null;\n                    })\n                    .filter((menuItem): menuItem is NonNullable<typeof menuItem> => menuItem != null);\n\n                if (menuItems.length === 0) return null; // don't render empty chart groups\n\n                return {\n                    label: this.chartTranslationService.translate(group),\n                    items: menuItems,\n                };\n            })\n            .filter((menuGroup): menuGroup is NonNullable<typeof menuGroup> => menuGroup != null);\n\n        // Render the filtered menu items\n        for (const { label, items } of displayedMenuGroups) {\n            const groupComponent = this.createBean(\n                new AgGroupComponent({\n                    title: label,\n                    suppressEnabledCheckbox: true,\n                    enabled: true,\n                    suppressOpenCloseIcons: true,\n                    cssIdentifier: 'charts-settings',\n                    direction: 'horizontal',\n                    suppressKeyboardNavigation: true,\n                })\n            );\n\n            for (const menuItem of items) {\n                const MiniClass = menuItem.icon;\n                const miniWrapper = document.createElement('div');\n                miniWrapper.classList.add('ag-chart-mini-thumbnail');\n                miniWrapper.setAttribute('tabindex', '0');\n                miniWrapper.setAttribute('role', 'button');\n\n                const miniClassChartType: ChartType = MiniClass.chartType;\n                const listener = () => {\n                    this.chartController.setChartType(miniClassChartType);\n                    this.updateSelectedMiniChart();\n                };\n                this.addManagedListeners(miniWrapper, {\n                    click: listener,\n                    keydown: (event) => {\n                        if (event.key == KeyCode.ENTER || event.key === KeyCode.SPACE) {\n                            event.preventDefault();\n                            listener();\n                        }\n                    },\n                });\n\n                this.wrappers.set(miniClassChartType, miniWrapper);\n\n                this.createBean(\n                    new MiniClass(\n                        miniWrapper,\n                        this.fills,\n                        this.strokes,\n                        this.themeTemplateParameters,\n                        this.isCustomTheme\n                    )\n                );\n                groupComponent.addItem(miniWrapper);\n            }\n\n            eGui.appendChild(groupComponent.getGui());\n        }\n\n        this.updateSelectedMiniChart();\n    }\n\n    public updateSelectedMiniChart(): void {\n        const selectedChartType = this.chartController.getChartType();\n        this.wrappers.forEach((miniChart, miniChartType) => {\n            const selected = miniChartType === selectedChartType;\n            miniChart.classList.toggle('ag-selected', selected);\n\n            const chartName = this.chartTranslationService.translate(getFullChartNameTranslationKey(miniChartType));\n            const ariaLabel = selected\n                ? `${chartName}. ${this.chartTranslationService.translate('ariaChartSelected')}`\n                : chartName;\n            _setAriaLabel(miniChart, ariaLabel);\n        });\n    }\n\n    public override destroy(): void {\n        this.wrappers.clear();\n        super.destroy();\n    }\n}\n", "import { _Scene } from 'ag-charts-community';\n\nexport interface CreateColumnRectsParams {\n    stacked: boolean;\n    root: _Scene.Group;\n    data: any;\n    size: number;\n    padding: number;\n    xScaleDomain: number[];\n    yScaleDomain: number[];\n    xScalePadding: number;\n}\n\nexport function createColumnRects(params: CreateColumnRectsParams) {\n    const { stacked, size, padding, xScalePadding, xScaleDomain, yScaleDomain } = params;\n\n    const xScale = new _Scene.BandScale<number>();\n    xScale.domain = xScaleDomain;\n    xScale.range = [padding, size - padding];\n    xScale.paddingInner = xScalePadding;\n    xScale.paddingOuter = xScalePadding;\n\n    const yScale = new _Scene.LinearScale();\n    yScale.domain = yScaleDomain;\n    yScale.range = [size - padding, padding];\n\n    const createBars = (series: number[], xScale: _Scene.BandScale<number>, yScale: _Scene.LinearScale) => {\n        return series.map((datum: number, i: number) => {\n            const top = yScale.convert(datum);\n            const rect = new _Scene.Rect();\n            rect.x = xScale.convert(i);\n            rect.y = top;\n            rect.width = xScale.bandwidth;\n            rect.height = yScale.convert(0) - top;\n            rect.strokeWidth = 0;\n            rect.crisp = true;\n\n            return rect;\n        });\n    };\n\n    if (stacked) {\n        return params.data.map((d: number[]) => createBars(d, xScale, yScale));\n    }\n\n    return createBars(params.data, xScale, yScale);\n}\n\nexport function createLinePaths(root: _Scene.Group, data: number[][], size: number, padding: number): _Scene.Path[] {\n    const xScale = new _Scene.LinearScale();\n    xScale.domain = [0, 4];\n    xScale.range = [padding, size - padding];\n\n    const yScale = new _Scene.LinearScale();\n    yScale.domain = [0, 10];\n    yScale.range = [size - padding, padding];\n\n    const lines: _Scene.Path[] = data.map((series) => {\n        const line = new _Scene.Path();\n        line.strokeWidth = 3;\n        line.lineCap = 'round';\n        line.fill = undefined;\n        series.forEach((datum: number, i: number) => {\n            line.path[i > 0 ? 'lineTo' : 'moveTo'](xScale.convert(i), yScale.convert(datum));\n        });\n\n        return line;\n    });\n\n    const linesGroup = new _Scene.Group();\n    linesGroup.setClipRectInGroupCoordinateSpace(\n        new _Scene.BBox(padding, padding, size - padding * 2, size - padding * 2)\n    );\n    linesGroup.append(lines);\n    root.append(linesGroup);\n\n    return lines;\n}\n\nexport function createPolarPaths(\n    root: _Scene.Group,\n    data: number[][],\n    size: number,\n    radius: number,\n    innerRadius: number,\n    markerSize: number = 0\n): { paths: _Scene.Path[]; markers: _Scene.Circle[] } {\n    const angleScale = new _Scene.LinearScale();\n    angleScale.domain = [0, 7];\n    angleScale.range = [-Math.PI, Math.PI].map((angle) => angle + Math.PI / 2);\n\n    const radiusScale = new _Scene.LinearScale();\n    radiusScale.domain = [0, 10];\n    radiusScale.range = [radius, innerRadius];\n\n    const markers: _Scene.Circle[] = [];\n\n    const paths: _Scene.Path[] = data.map((series) => {\n        const path = new _Scene.Path();\n        path.strokeWidth = 1;\n        path.strokeOpacity = 0.5;\n        path.lineCap = 'round';\n        path.fill = undefined;\n        path.fillOpacity = 0.8;\n        series.forEach((datum: number, i: number) => {\n            const angle = angleScale.convert(i);\n            const r = radius + innerRadius - radiusScale.convert(datum);\n\n            const x = r * Math.cos(angle);\n            const y = r * Math.sin(angle);\n\n            path.path[i > 0 ? 'lineTo' : 'moveTo'](x, y);\n\n            if (markerSize > 0) {\n                const marker = new _Scene.Circle();\n                marker.x = x;\n                marker.y = y;\n                marker.size = markerSize;\n                markers.push(marker);\n            }\n        });\n\n        path.path.closePath();\n        return path;\n    });\n\n    const group = new _Scene.Group();\n\n    const center = size / 2;\n    group.translationX = center;\n    group.translationY = center;\n\n    group.append([...paths, ...markers]);\n    root.append(group);\n\n    return { paths, markers };\n}\n\nexport function accumulateData(data: number[][]): { processedData: number[][]; min: number; max: number } {\n    let [min, max] = [Infinity, -Infinity];\n    const processedData = data.reduce((acc, curr, currIndex) => {\n        const previous = currIndex > 0 ? acc[currIndex - 1] : undefined;\n        acc[currIndex] ??= [];\n        const current = acc[currIndex];\n        curr.forEach((datum, datumIndex) => {\n            if (previous) {\n                datum += previous[datumIndex];\n            }\n\n            current[datumIndex] = datum;\n\n            if (current[datumIndex] < min) {\n                min = current[datumIndex];\n            }\n\n            if (current[datumIndex] > max) {\n                max = current[datumIndex];\n            }\n        });\n        return acc;\n    }, [] as number[][]);\n\n    return { processedData, min, max };\n}\n", "import { _Scene } from 'ag-charts-community';\n\nimport type { ChartTranslationKey } from '../../../services/chartTranslationService';\nimport { MiniChart } from './miniChart';\n\nexport abstract class MiniChartWithAxes extends MiniChart {\n    private readonly stroke = 'gray';\n    private readonly axisOvershoot = 3;\n\n    constructor(container: HTMLElement, tooltipName: ChartTranslationKey) {\n        super(container, tooltipName);\n    }\n\n    public override postConstruct() {\n        const size = this.size;\n        const padding = this.padding;\n\n        const leftAxis = new _Scene.Line();\n        leftAxis.x1 = padding;\n        leftAxis.y1 = padding;\n        leftAxis.x2 = padding;\n        leftAxis.y2 = size - padding + this.axisOvershoot;\n        leftAxis.stroke = this.stroke;\n\n        const bottomAxis = new _Scene.Line();\n        bottomAxis.x1 = padding - this.axisOvershoot + 1;\n        bottomAxis.y1 = size - padding;\n        bottomAxis.x2 = size - padding + 1;\n        bottomAxis.y2 = size - padding;\n        bottomAxis.stroke = this.stroke;\n\n        const root = this.root;\n\n        root.append(leftAxis);\n        root.append(bottomAxis);\n        super.postConstruct();\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { Component, _errorOnce } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport type { ChartTranslationKey, ChartTranslationService } from '../../../services/chartTranslationService';\n\nconst CANVAS_CLASS = 'ag-chart-mini-thumbnail-canvas';\nconst ERROR_MESSAGE = 'AG Grid - chart update failed';\n\nexport abstract class MiniChart extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    protected readonly size: number = 58;\n    protected readonly padding: number = 5;\n    protected readonly root: _Scene.Group = new _Scene.Group();\n    protected readonly scene: _Scene.Scene;\n\n    constructor(\n        container: HTMLElement,\n        protected tooltipName: ChartTranslationKey\n    ) {\n        super();\n\n        const scene = new _Scene.Scene({\n            width: this.size,\n            height: this.size,\n            domManager: {\n                addChild(type, _, child) {\n                    const newEl = child ?? container.ownerDocument.createElement(type);\n                    container.appendChild(newEl);\n                    return newEl;\n                },\n            },\n        });\n\n        scene.canvas.element.classList.add(CANVAS_CLASS);\n        scene.setRoot(this.root);\n\n        this.scene = scene;\n    }\n\n    public postConstruct(): void {\n        this.scene.canvas.element.title = this.chartTranslationService.translate(this.tooltipName);\n\n        // Necessary to force scene graph render as we are not using the standalone factory.\n        this.scene.render().catch((e: Error) => {\n            _errorOnce(`${ERROR_MESSAGE}`, e);\n        });\n    }\n\n    abstract updateColors(fills: string[], strokes: string[]): void;\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport type { _Scene } from 'ag-charts-community';\n\nimport type { CreateColumnRectsParams } from '../miniChartHelpers';\nimport { createColumnRects } from '../miniChartHelpers';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniColumn extends MiniChartWithAxes {\n    static chartType: ChartType = 'groupedColumn';\n\n    private readonly columns: _Scene.Rect[];\n\n    private columnData = [2, 3, 4];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'groupedColumnTooltip');\n\n        const { root, columnData, size, padding } = this;\n\n        this.columns = createColumnRects({\n            stacked: false,\n            root,\n            data: columnData,\n            size,\n            padding,\n            xScaleDomain: [0, 1, 2],\n            yScaleDomain: [0, 4],\n            xScalePadding: 0.3,\n        } as CreateColumnRectsParams);\n\n        root.append(this.columns);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.columns.forEach((column: _Scene.Rect, i) => {\n            column.fill = fills[i];\n            column.stroke = strokes[i];\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport type { _Scene } from 'ag-charts-community';\n\nimport type { ChartTranslationKey } from '../../../../services/chartTranslationService';\nimport type { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport type { CreateColumnRectsParams } from '../miniChartHelpers';\nimport { createColumnRects } from '../miniChartHelpers';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniStackedColumn extends MiniChartWithAxes {\n    static chartType: ChartType = 'stackedColumn';\n\n    private readonly stackedColumns: _Scene.Rect[][];\n\n    static data = [\n        [8, 12, 16],\n        [6, 9, 12],\n        [2, 3, 4],\n    ];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        _themeTemplateParameters: ThemeTemplateParameters,\n        _isCustomTheme: boolean,\n        data = MiniStackedColumn.data,\n        yScaleDomain = [0, 16],\n        tooltipName: ChartTranslationKey = 'stackedColumnTooltip'\n    ) {\n        super(container, tooltipName);\n\n        const { root, size, padding } = this;\n\n        this.stackedColumns = createColumnRects({\n            stacked: true,\n            root,\n            data,\n            size,\n            padding,\n            xScaleDomain: [0, 1, 2],\n            yScaleDomain,\n            xScalePadding: 0.3,\n        } as CreateColumnRectsParams);\n\n        root.append(([] as _Scene.Rect[]).concat.apply([], this.stackedColumns));\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.stackedColumns.forEach((series: _Scene.Rect[], i: number) =>\n            series.forEach((column) => {\n                column.fill = fills[i];\n                column.stroke = strokes[i];\n            })\n        );\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\n\nimport type { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport { MiniStackedColumn } from './miniStackedColumn';\n\nexport class MiniNormalizedColumn extends MiniStackedColumn {\n    static override chartType: ChartType = 'normalizedColumn';\n    static override data = [\n        [10, 10, 10],\n        [6, 7, 8],\n        [2, 4, 6],\n    ];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        themeTemplateParameters: ThemeTemplateParameters,\n        isCustomTheme: boolean\n    ) {\n        super(\n            container,\n            fills,\n            strokes,\n            themeTemplateParameters,\n            isCustomTheme,\n            MiniNormalizedColumn.data,\n            [0, 10],\n            'normalizedColumnTooltip'\n        );\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniBar extends MiniChartWithAxes {\n    static chartType: ChartType = 'groupedBar';\n    private readonly bars: _Scene.Rect[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'groupedBarTooltip');\n\n        const padding = this.padding;\n        const size = this.size;\n        const data = [2, 3, 4];\n\n        const yScale = new _Scene.BandScale<number>();\n        yScale.domain = [0, 1, 2];\n        yScale.range = [padding, size - padding];\n        yScale.paddingInner = 0.3;\n        yScale.paddingOuter = 0.3;\n\n        const xScale = new _Scene.LinearScale();\n        xScale.domain = [0, 4];\n        xScale.range = [size - padding, padding];\n\n        const bottom = xScale.convert(0);\n        const height = yScale.bandwidth;\n\n        this.bars = data.map((datum, i) => {\n            const rect = new _Scene.Rect();\n            rect.x = padding;\n            rect.y = yScale.convert(i);\n            rect.width = bottom - xScale.convert(datum);\n            rect.height = height;\n            rect.strokeWidth = 0;\n            rect.crisp = true;\n\n            return rect;\n        });\n\n        this.updateColors(fills, strokes);\n        this.root.append(this.bars);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.bars.forEach((bar, i) => {\n            bar.fill = fills[i];\n            bar.stroke = strokes[i];\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport type { ChartTranslationKey } from '../../../../services/chartTranslationService';\nimport type { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniStackedBar extends MiniChartWithAxes {\n    static chartType: ChartType = 'stackedBar';\n    static data = [\n        [8, 12, 16],\n        [6, 9, 12],\n        [2, 3, 4],\n    ];\n\n    private readonly bars: _Scene.Rect[][];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        _themeTemplateParameters: ThemeTemplateParameters,\n        _isCustomTheme: boolean,\n        data = MiniStackedBar.data,\n        xScaleDomain = [0, 16],\n        tooltipName: ChartTranslationKey = 'stackedBarTooltip'\n    ) {\n        super(container, tooltipName);\n\n        const size = this.size;\n        const padding = this.padding;\n\n        const yScale = new _Scene.BandScale<number>();\n        yScale.domain = [0, 1, 2];\n        yScale.range = [padding, size - padding];\n        yScale.paddingInner = 0.3;\n        yScale.paddingOuter = 0.3;\n\n        const xScale = new _Scene.LinearScale();\n        xScale.domain = xScaleDomain;\n        xScale.range = [size - padding, padding];\n\n        const bottom = xScale.convert(0);\n        const height = yScale.bandwidth;\n\n        this.bars = data.map((series) =>\n            series.map((datum, i) => {\n                const rect = new _Scene.Rect();\n                rect.x = padding;\n                rect.y = yScale.convert(i);\n                rect.width = bottom - xScale.convert(datum);\n                rect.height = height;\n                rect.strokeWidth = 0;\n                rect.crisp = true;\n\n                return rect;\n            })\n        );\n\n        this.updateColors(fills, strokes);\n        this.root.append(([] as _Scene.Rect[]).concat.apply([], this.bars));\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.bars.forEach((series, i) =>\n            series.forEach((bar) => {\n                bar.fill = fills[i];\n                bar.stroke = strokes[i];\n            })\n        );\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\n\nimport type { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport { MiniStackedBar } from './miniStackedBar';\n\nexport class MiniNormalizedBar extends MiniStackedBar {\n    static override chartType: ChartType = 'normalizedBar';\n    static override data = [\n        [10, 10, 10],\n        [6, 7, 8],\n        [2, 4, 6],\n    ];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        themeTemplateParameters: ThemeTemplateParameters,\n        isCustomTheme: boolean\n    ) {\n        super(\n            container,\n            fills,\n            strokes,\n            themeTemplateParameters,\n            isCustomTheme,\n            MiniNormalizedBar.data,\n            [0, 10],\n            'normalizedBarTooltip'\n        );\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport type { ChartTranslationKey } from '../../../../services/chartTranslationService';\nimport type { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport { MiniChart } from '../miniChart';\n\nconst toRadians = _Scene.toRadians;\nexport class MiniDonut extends MiniChart {\n    static chartType: ChartType = 'donut';\n    private readonly sectors: _Scene.Sector[];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        _themeTemplateParameters: ThemeTemplateParameters,\n        _isCustomTheme: boolean,\n        centerRadiusScaler = 0.6,\n        tooltipName: ChartTranslationKey = 'donutTooltip'\n    ) {\n        super(container, tooltipName);\n\n        const radius = (this.size - this.padding * 2) / 2;\n        const center = radius + this.padding;\n        const angles = [\n            [toRadians(-90), toRadians(30)],\n            [toRadians(30), toRadians(120)],\n            [toRadians(120), toRadians(180)],\n            [toRadians(180), toRadians(210)],\n            [toRadians(210), toRadians(240)],\n            [toRadians(240), toRadians(270)],\n        ];\n\n        this.sectors = angles.map(([startAngle, endAngle]) => {\n            const sector = new _Scene.Sector();\n            sector.centerX = center;\n            sector.centerY = center;\n            sector.innerRadius = radius * centerRadiusScaler;\n            sector.outerRadius = radius;\n            sector.startAngle = startAngle;\n            sector.endAngle = endAngle;\n            sector.stroke = undefined;\n            sector.strokeWidth = 0;\n            sector.inset = 0.75;\n            return sector;\n        });\n\n        this.updateColors(fills, strokes);\n        this.root.append(this.sectors);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.sectors.forEach((sector, i) => {\n            sector.fill = fills[i % fills.length];\n            sector.stroke = strokes[i % strokes.length];\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\n\nimport type { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport { MiniDonut } from './miniDonut';\n\nexport class MiniPie extends MiniDonut {\n    static override chartType: ChartType = 'pie';\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        themeTemplateParameters: ThemeTemplateParameters,\n        isCustomTheme: boolean\n    ) {\n        super(container, fills, strokes, themeTemplateParameters, isCustomTheme, 0, 'pieTooltip');\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport type { _Scene } from 'ag-charts-community';\n\nimport { createLinePaths } from '../miniChartHelpers';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniLine extends MiniChartWithAxes {\n    static chartType: ChartType = 'line';\n\n    private readonly lines: _Scene.Path[];\n\n    private data = [\n        [9, 7, 8, 5, 6],\n        [5, 6, 3, 4, 1],\n        [1, 3, 4, 8, 7],\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'lineTooltip');\n\n        this.lines = createLinePaths(this.root, this.data, this.size, this.padding);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.lines.forEach((line: _Scene.Path, i: number) => {\n            line.stroke = fills[i];\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniScatter extends MiniChartWithAxes {\n    static chartType: ChartType = 'scatter';\n    private readonly points: _Scene.Shape[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'scatterTooltip');\n\n        const size = this.size;\n        const padding = this.padding;\n\n        // [x, y] pairs\n        const data = [\n            [\n                [0.3, 3],\n                [1.1, 0.9],\n                [2, 0.4],\n                [3.4, 2.4],\n            ],\n            [\n                [0, 0.3],\n                [1, 2],\n                [2.4, 1.4],\n                [3, 0],\n            ],\n        ];\n\n        const xScale = new _Scene.LinearScale();\n        xScale.domain = [-0.5, 4];\n        xScale.range = [padding * 2, size - padding];\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [-0.5, 3.5];\n        yScale.range = [size - padding, padding];\n\n        const points: _Scene.Shape[] = [];\n\n        data.forEach((series) => {\n            series.forEach(([x, y]) => {\n                const arc = new _Scene.Arc();\n                arc.strokeWidth = 0;\n                arc.centerX = xScale.convert(x);\n                arc.centerY = yScale.convert(y);\n                arc.radius = 2.5;\n                points.push(arc);\n            });\n        });\n\n        this.points = points;\n        this.updateColors(fills, strokes);\n\n        const pointsGroup = new _Scene.Group();\n        pointsGroup.setClipRectInGroupCoordinateSpace(\n            new _Scene.BBox(padding, padding, size - padding * 2, size - padding * 2)\n        );\n        pointsGroup.append(this.points);\n        this.root.append(pointsGroup);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.points.forEach((line, i) => {\n            line.stroke = strokes[i % strokes.length];\n            line.fill = fills[i % fills.length];\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniBubble extends MiniChartWithAxes {\n    static chartType: ChartType = 'bubble';\n    private readonly points: _Scene.Shape[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'bubbleTooltip');\n\n        const size = this.size;\n        const padding = this.padding;\n\n        // [x, y, radius] triples\n        const data = [\n            [\n                [0.1, 0.3, 5],\n                [0.5, 0.4, 7],\n                [0.2, 0.8, 7],\n            ],\n            [\n                [0.8, 0.7, 5],\n                [0.7, 0.3, 9],\n            ],\n        ];\n\n        const xScale = new _Scene.LinearScale();\n        xScale.domain = [0, 1];\n        xScale.range = [padding * 2, size - padding];\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [0, 1];\n        yScale.range = [size - padding, padding];\n\n        const points: _Scene.Shape[] = [];\n\n        data.forEach((series) => {\n            series.forEach(([x, y, radius]) => {\n                const arc = new _Scene.Arc();\n                arc.strokeWidth = 0;\n                arc.centerX = xScale.convert(x);\n                arc.centerY = yScale.convert(y);\n                arc.radius = radius;\n                arc.fillOpacity = 0.7;\n                points.push(arc);\n            });\n        });\n\n        this.points = points;\n        this.updateColors(fills, strokes);\n\n        const pointsGroup = new _Scene.Group();\n        pointsGroup.setClipRectInGroupCoordinateSpace(\n            new _Scene.BBox(padding, padding, size - padding * 2, size - padding * 2)\n        );\n        pointsGroup.append(this.points);\n        this.root.append(pointsGroup);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.points.forEach((line, i) => {\n            line.stroke = strokes[i % strokes.length];\n            line.fill = fills[i % fills.length];\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport type { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport interface ICoordinate {\n    x: number;\n    y: number;\n}\n\nexport class MiniArea extends MiniChartWithAxes {\n    static chartType: ChartType = 'area';\n    private readonly areas: _Scene.Path[];\n\n    static readonly data = [\n        [1, 3, 5],\n        [2, 6, 4],\n        [5, 3, 1],\n    ];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        _themeTemplateParameters: ThemeTemplateParameters,\n        _isCustomTheme: boolean,\n        data: number[][] = MiniArea.data\n    ) {\n        super(container, 'groupedAreaTooltip');\n\n        const size = this.size;\n        const padding = this.padding;\n\n        const xScale = new _Scene.BandScale<number>();\n        xScale.domain = [0, 1, 2];\n        xScale.paddingInner = 1;\n        xScale.paddingOuter = 0;\n        xScale.range = [padding + 0.5, size - padding - 0.5];\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [0, 6];\n        yScale.range = [size - padding + 0.5, padding];\n\n        const xCount = data.length;\n        const last = xCount * 2 - 1;\n        const pathData: ICoordinate[][] = [];\n        const bottomY = yScale.convert(0);\n\n        data.forEach((datum, i) => {\n            const x = xScale.convert(i);\n\n            datum.forEach((yDatum, j) => {\n                const y = yScale.convert(yDatum);\n                const points = pathData[j] || (pathData[j] = []);\n\n                points[i] = {\n                    x,\n                    y,\n                };\n\n                points[last - i] = {\n                    x,\n                    y: bottomY,\n                };\n            });\n        });\n\n        this.areas = pathData.reverse().map((points) => {\n            const area = new _Scene.Path();\n            area.strokeWidth = 1;\n            area.strokeOpacity = 0.75;\n            area.fillOpacity = 0.7;\n\n            const path = area.path;\n            path.clear();\n            points.forEach((point, i) => path[i > 0 ? 'lineTo' : 'moveTo'](point.x, point.y));\n            path.closePath();\n\n            return area;\n        });\n\n        this.updateColors(fills, strokes);\n        this.root.append(this.areas);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.areas.forEach((area, i) => {\n            area.fill = fills[i];\n            area.stroke = strokes[i];\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport type { ChartTranslationKey } from '../../../../services/chartTranslationService';\nimport type { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\nimport type { ICoordinate } from './miniArea';\n\nexport class MiniStackedArea extends MiniChartWithAxes {\n    static chartType: ChartType = 'stackedArea';\n    static readonly data = [\n        [2, 3, 2],\n        [3, 6, 5],\n        [6, 2, 2],\n    ];\n\n    private readonly areas: _Scene.Path[];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        _themeTemplateParameters: ThemeTemplateParameters,\n        _isCustomTheme: boolean,\n        data: number[][] = MiniStackedArea.data,\n        tooltipName: ChartTranslationKey = 'stackedAreaTooltip'\n    ) {\n        super(container, tooltipName);\n\n        const size = this.size;\n        const padding = this.padding;\n\n        const xScale = new _Scene.BandScale<number>();\n        xScale.domain = [0, 1, 2];\n        xScale.paddingInner = 1;\n        xScale.paddingOuter = 0;\n        xScale.range = [padding + 0.5, size - padding - 0.5];\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [0, 16];\n        yScale.range = [size - padding + 0.5, padding + 0.5];\n\n        const xCount = data.length;\n        const last = xCount * 2 - 1;\n        const pathData: ICoordinate[][] = [];\n\n        data.forEach((datum, i) => {\n            const x = xScale.convert(i);\n            let total = 0;\n\n            datum.forEach((yDatum, j) => {\n                const y = yScale.convert(total + yDatum);\n                const points = pathData[j] || (pathData[j] = []);\n\n                points[i] = {\n                    x,\n                    y,\n                };\n\n                points[last - i] = {\n                    x,\n                    y: yScale.convert(total), // bottom y\n                };\n\n                total += yDatum;\n            });\n        });\n\n        this.areas = pathData.map((points) => {\n            const area = new _Scene.Path();\n            area.strokeWidth = 0;\n\n            const path = area.path;\n            path.clear();\n            points.forEach((point, i) => path[i > 0 ? 'lineTo' : 'moveTo'](point.x, point.y));\n            path.closePath();\n\n            return area;\n        });\n\n        this.updateColors(fills, strokes);\n        this.root.append(this.areas);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.areas.forEach((area, i) => {\n            area.fill = fills[i];\n            area.stroke = strokes[i];\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\n\nimport type { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport { MiniStackedArea } from './miniStackedArea';\n\nexport class MiniNormalizedArea extends MiniStackedArea {\n    static override chartType: ChartType = 'normalizedArea';\n    static override readonly data = MiniStackedArea.data.map((stack) => {\n        const sum = stack.reduce((p, c) => p + c, 0);\n        return stack.map((v) => (v / sum) * 16);\n    });\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        themeTemplateParameters: ThemeTemplateParameters,\n        isCustomTheme: boolean,\n        data: number[][] = MiniNormalizedArea.data\n    ) {\n        super(container, fills, strokes, themeTemplateParameters, isCustomTheme, data, 'normalizedAreaTooltip');\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniHistogram extends MiniChartWithAxes {\n    static chartType: ChartType = 'histogram';\n\n    private readonly bars: _Scene.Rect[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'histogramTooltip');\n\n        const padding = this.padding;\n        const size = this.size;\n\n        // approx normal curve\n        const data = [2, 5, 11, 13, 10, 6, 1];\n\n        const xScale = new _Scene.LinearScale();\n        xScale.domain = [0, data.length];\n        xScale.range = [padding, size - padding];\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [0, data.reduce((a, b) => Math.max(a, b), 0)];\n        yScale.range = [size - padding, padding];\n\n        const bottom = yScale.convert(0);\n\n        this.bars = data.map((datum, i) => {\n            const top = yScale.convert(datum);\n            const left = xScale.convert(i);\n            const right = xScale.convert(i + 1);\n\n            const rect = new _Scene.Rect();\n            rect.x = left;\n            rect.y = top;\n            rect.width = right - left;\n            rect.height = bottom - top;\n            rect.strokeWidth = 1;\n            rect.strokeOpacity = 0.75;\n            rect.crisp = true;\n\n            return rect;\n        });\n\n        this.updateColors(fills, strokes);\n        this.root.append(this.bars);\n    }\n\n    updateColors([fill]: string[], [stroke]: string[]) {\n        this.bars.forEach((bar) => {\n            bar.fill = fill;\n            bar.stroke = stroke;\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport { accumulateData } from '../miniChartHelpers';\nimport { MiniChartWithPolarAxes } from '../miniChartWithPolarAxes';\n\nexport class MiniRadialColumn extends MiniChartWithPolarAxes {\n    static chartType: ChartType = 'radialColumn';\n    private readonly series: _Scene.Group[];\n\n    private data = [\n        [6, 8, 10, 2, 6, 5],\n        [4, 4, 3, 6, 4, 4],\n        [5, 4, 2, 9, 8, 9],\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'radialColumnTooltip');\n\n        this.showRadiusAxisLine = false;\n\n        const { padding, size, data } = this;\n        const radius = (size - padding * 2) / 2;\n        const innerRadiusRatio = 0.4;\n        const axisInnerRadius = radius * innerRadiusRatio;\n\n        const angleScale = new _Scene.BandScale();\n        angleScale.domain = data[0].map((_, index) => index);\n        angleScale.range = [0, 2 * Math.PI];\n        angleScale.paddingInner = 0;\n        angleScale.paddingOuter = 0;\n        const bandwidth = angleScale.bandwidth * 0.7;\n\n        const { processedData, max } = accumulateData(data);\n\n        const radiusScale = new _Scene.LinearScale();\n        radiusScale.domain = [0, max];\n        radiusScale.range = [axisInnerRadius, radius];\n\n        const center = this.size / 2;\n        this.series = processedData.map((series, seriesIndex) => {\n            const firstSeries = seriesIndex === 0;\n            const previousSeries = firstSeries ? undefined : processedData[seriesIndex - 1];\n\n            const seriesGroup = new _Scene.Group({ zIndex: 1000_000 });\n            const seriesColumns = series.map((datum: number, i: number) => {\n                const previousDatum = previousSeries?.[i];\n                const outerRadius = radiusScale.convert(datum);\n                const innerRadius = radiusScale.convert(previousDatum ?? 0);\n                const startAngle = angleScale.convert(i);\n                const endAngle = startAngle + bandwidth;\n\n                const columnWidth = _Scene.getRadialColumnWidth(startAngle, endAngle, radius, 0.5, 0.5);\n\n                const column = new _Scene.RadialColumnShape();\n\n                column.scalingCenterX = center;\n                column.scalingCenterY = center;\n                column.columnWidth = columnWidth;\n                column.innerRadius = innerRadius;\n                column.outerRadius = outerRadius;\n                column.startAngle = startAngle;\n                column.endAngle = endAngle;\n                column.isBeveled = true;\n                column.axisInnerRadius = axisInnerRadius;\n                column.axisOuterRadius = radius;\n\n                column.stroke = undefined;\n                column.strokeWidth = 0;\n\n                return column;\n            });\n\n            seriesGroup.append(seriesColumns);\n\n            seriesGroup.translationX = center;\n            seriesGroup.translationY = center;\n\n            return seriesGroup;\n        });\n\n        this.root.append(this.series);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.series.forEach((group, i) => {\n            group.children?.forEach((sector: _Scene.Sector) => {\n                sector.fill = fills[i % fills.length];\n                sector.stroke = strokes[i % strokes.length];\n            });\n        });\n    }\n}\n", "import { _Scene } from 'ag-charts-community';\n\nimport type { ChartTranslationKey } from '../../../services/chartTranslationService';\nimport { MiniChart } from './miniChart';\n\nexport abstract class MiniChartWithPolarAxes extends MiniChart {\n    private readonly stroke = 'gray';\n    private gridLines: _Scene.Path[];\n    protected showRadiusAxisLine: boolean = true;\n    protected showAngleAxisLines: boolean = true;\n\n    constructor(container: HTMLElement, tooltipName: ChartTranslationKey) {\n        super(container, tooltipName);\n    }\n\n    public override postConstruct() {\n        const size = this.size;\n        const padding = this.padding;\n        const combinedPadding = padding * 2;\n\n        const axisLineRadius = (size - combinedPadding) / 2;\n        const gridRadii = this.showAngleAxisLines\n            ? [axisLineRadius, axisLineRadius * 0.8, axisLineRadius * 0.6, axisLineRadius * 0.4]\n            : [];\n\n        const radiusAxisLine = new _Scene.Line();\n        radiusAxisLine.x1 = size / 2;\n        radiusAxisLine.y1 = padding;\n        radiusAxisLine.x2 = size / 2;\n        radiusAxisLine.y2 = size - padding - axisLineRadius - gridRadii[gridRadii.length - 1];\n        radiusAxisLine.stroke = this.stroke;\n        radiusAxisLine.strokeOpacity = 0.5;\n        radiusAxisLine.fill = undefined;\n\n        radiusAxisLine.visible = this.showRadiusAxisLine;\n\n        const x = padding + axisLineRadius;\n        this.gridLines = gridRadii.map((radius, index) => {\n            const gridLine = new _Scene.Path();\n            gridLine.path.arc(x, x, radius, 0, 2 * Math.PI);\n            gridLine.strokeWidth = 1;\n            gridLine.stroke = this.stroke;\n            gridLine.strokeOpacity = index === 0 ? 0.5 : 0.2;\n            gridLine.fill = undefined;\n\n            return gridLine;\n        });\n\n        const root = this.root;\n\n        root.append(radiusAxisLine);\n        if (this.gridLines.length > 0) root.append(this.gridLines);\n        super.postConstruct();\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport { accumulateData } from '../miniChartHelpers';\nimport { MiniChartWithPolarAxes } from '../miniChartWithPolarAxes';\n\nexport class MiniRadialBar extends MiniChartWithPolarAxes {\n    static chartType: ChartType = 'radialBar';\n    private readonly series: _Scene.Group[];\n\n    private data = [\n        [6, 8, 10],\n        [4, 4, 3],\n        [5, 4, 2],\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'radialBarTooltip');\n\n        this.showRadiusAxisLine = false;\n\n        const radius = (this.size - this.padding) / 2;\n        const innerRadiusRatio = 0.4;\n        const innerRadius = radius * innerRadiusRatio;\n        const totalRadius = radius + innerRadius;\n\n        const radiusScale = new _Scene.BandScale();\n        radiusScale.domain = this.data[0].map((_, index) => index);\n        radiusScale.range = [radius, innerRadius];\n        radiusScale.paddingInner = 0.5;\n        radiusScale.paddingOuter = 0;\n        const bandwidth = radiusScale.bandwidth;\n\n        const { processedData, max } = accumulateData(this.data);\n\n        const angleScale = new _Scene.LinearScale();\n        angleScale.domain = [0, Math.ceil(max * 1.5)];\n        const start = (3 / 2) * Math.PI;\n        const end = start + 2 * Math.PI;\n        angleScale.range = [start, end];\n\n        const center = this.size / 2;\n        this.series = processedData.map((series, index) => {\n            const previousSeries = index < 0 ? undefined : processedData[index - 1];\n\n            const seriesGroup = new _Scene.Group({ zIndex: 1000_000 });\n            const seriesSectors = series.map((datum: number, i: number) => {\n                const previousDatum = previousSeries?.[i] ?? 0;\n\n                const innerRadius = totalRadius - radiusScale.convert(i);\n                const outerRadius = innerRadius + bandwidth;\n                const startAngle = angleScale.convert(previousDatum);\n                const endAngle = angleScale.convert(datum);\n\n                const sector = new _Scene.Sector();\n                sector.centerX = center;\n                sector.centerY = center;\n                sector.innerRadius = innerRadius;\n                sector.outerRadius = outerRadius;\n                sector.startAngle = startAngle;\n                sector.endAngle = endAngle;\n                sector.stroke = undefined;\n                sector.strokeWidth = 0;\n                return sector;\n            });\n\n            seriesGroup.append(seriesSectors);\n\n            return seriesGroup;\n        });\n\n        this.root.append(this.series);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.series.forEach((group, i) => {\n            group.children?.forEach((sector: _Scene.Sector) => {\n                sector.fill = fills[i % fills.length];\n                sector.stroke = strokes[i % strokes.length];\n            });\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport type { _Scene } from 'ag-charts-community';\n\nimport { createPolarPaths } from '../miniChartHelpers';\nimport { MiniChartWithPolarAxes } from '../miniChartWithPolarAxes';\n\nexport class MiniRadarLine extends MiniChartWithPolarAxes {\n    static chartType: ChartType = 'radarLine';\n    private readonly lines: _Scene.Path[];\n    private readonly markers: _Scene.Circle[];\n    private readonly markerSize: number = 4;\n\n    private data = [\n        [8, 7, 8, 7, 8, 8, 7, 8],\n        [6, 8, 5, 10, 6, 7, 4, 6],\n        [0, 3, 3, 5, 4, 4, 2, 0],\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'radarLineTooltip');\n\n        this.showRadiusAxisLine = false;\n\n        const radius = (this.size - this.padding * 2) / 2;\n        const innerRadius = 0;\n\n        const { paths, markers } = createPolarPaths(\n            this.root,\n            this.data,\n            this.size,\n            radius,\n            innerRadius,\n            this.markerSize\n        );\n\n        this.lines = paths;\n        this.markers = markers;\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.lines.forEach((line: _Scene.Path, i: number) => {\n            const n = this.data[i].length;\n            line.stroke = fills[i];\n            const startIdx = i * n;\n            const endIdx = startIdx + n;\n            const markers = this.markers.slice(startIdx, endIdx);\n            markers.forEach((marker) => {\n                marker.stroke = strokes[i];\n                marker.fill = fills[i];\n            });\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport type { _Scene } from 'ag-charts-community';\n\nimport { createPolarPaths } from '../miniChartHelpers';\nimport { MiniChartWithPolarAxes } from '../miniChartWithPolarAxes';\n\nexport class MiniRadarArea extends MiniChartWithPolarAxes {\n    static chartType: ChartType = 'radarArea';\n    private readonly areas: _Scene.Path[];\n\n    private data = [\n        [8, 10, 5, 7, 4, 1, 5, 8],\n        [1, 1, 2, 7, 7, 8, 10, 1],\n        [4, 5, 9, 9, 4, 2, 3, 4],\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'radarAreaTooltip');\n\n        this.showRadiusAxisLine = false;\n\n        const radius = (this.size - this.padding * 2) / 2;\n        const innerRadius = radius - this.size * 0.3;\n\n        this.areas = createPolarPaths(this.root, this.data, this.size, radius, innerRadius).paths;\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.areas.forEach((area, i) => {\n            area.fill = fills[i];\n            area.stroke = strokes[i];\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport { accumulateData } from '../miniChartHelpers';\nimport { MiniChartWithPolarAxes } from '../miniChartWithPolarAxes';\n\nexport class MiniNightingale extends MiniChartWithPolarAxes {\n    static chartType: ChartType = 'nightingale';\n    private readonly series: _Scene.Group[];\n\n    private data = [\n        [6, 10, 9, 8, 7, 8],\n        [4, 6, 5, 4, 5, 5],\n        [3, 5, 4, 3, 4, 7],\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'nightingaleTooltip');\n\n        this.showRadiusAxisLine = false;\n\n        const radius = (this.size - this.padding * 2) / 2;\n\n        const angleScale = new _Scene.BandScale();\n        angleScale.domain = this.data[0].map((_, index) => index);\n        angleScale.range = [-Math.PI, Math.PI];\n        angleScale.paddingInner = 0;\n        angleScale.paddingOuter = 0;\n        const bandwidth = angleScale.bandwidth * 0.7;\n\n        const { processedData, max } = accumulateData(this.data);\n\n        const radiusScale = new _Scene.LinearScale();\n        radiusScale.domain = [0, max];\n        radiusScale.range = [0, radius];\n\n        const center = this.size / 2;\n        this.series = processedData.map((series, index) => {\n            const previousSeries = index < 0 ? undefined : processedData[index - 1];\n\n            const seriesGroup = new _Scene.Group({ zIndex: 1000_000 });\n            const seriesSectors = series.map((datum: number, i: number) => {\n                const previousDatum = previousSeries?.[i];\n                const outerRadius = radiusScale.convert(datum);\n                const innerRadius = radiusScale.convert(previousDatum ?? 0);\n                const startAngle = angleScale.convert(i);\n                const endAngle = startAngle + bandwidth;\n\n                const sector = new _Scene.Sector();\n                sector.centerX = center;\n                sector.centerY = center;\n                sector.innerRadius = innerRadius;\n                sector.outerRadius = outerRadius;\n                sector.startAngle = startAngle;\n                sector.endAngle = endAngle;\n                sector.stroke = undefined;\n                sector.strokeWidth = 0;\n                return sector;\n            });\n\n            seriesGroup.append(seriesSectors);\n\n            return seriesGroup;\n        });\n\n        this.root.append(this.series);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.series.forEach((group, i) => {\n            group.children?.forEach((sector: _Scene.Sector) => {\n                sector.fill = fills[i % fills.length];\n                sector.stroke = strokes[i % strokes.length];\n            });\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniRangeBar extends MiniChartWithAxes {\n    static chartType: ChartType = 'rangeBar';\n\n    private readonly bars: _Scene.Rect[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'rangeBarTooltip');\n        const data = [3, 3.5, 3];\n\n        this.bars = this.createRangeBar(this.root, data, this.size, this.padding, 'vertical');\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.bars.forEach((bar, i) => {\n            bar.fill = fills[i];\n            bar.stroke = strokes[i];\n        });\n    }\n\n    createRangeBar(\n        root: _Scene.Group,\n        data: number[],\n        size: number,\n        padding: number,\n        direction: 'horizontal' | 'vertical'\n    ): _Scene.Rect[] {\n        const barAlongX = direction === 'horizontal';\n        const scalePadding = 2 * padding;\n\n        const xScale = new _Scene.BandScale<number>();\n        xScale.domain = data.map((_, index) => index);\n        xScale.range = [padding, size - padding];\n        xScale.paddingInner = 0.3;\n        xScale.paddingOuter = 0.3;\n\n        const lowRatio = 0.7;\n        const highRatio = 1.3;\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [\n            data.reduce((a, b) => Math.min(a, b), Infinity) * lowRatio,\n            data.reduce((a, b) => Math.max(a, b), 0) * highRatio,\n        ];\n        yScale.range = [scalePadding, size - scalePadding];\n\n        const width = xScale.bandwidth;\n\n        const bars = data.map((datum, i) => {\n            const [low, high] = [datum * lowRatio, datum * highRatio];\n\n            const x = xScale.convert(i);\n            const y = yScale.convert(low);\n            const height = yScale.convert(high) - y;\n\n            const rect = new _Scene.Rect();\n            rect.x = barAlongX ? y : x;\n            rect.y = barAlongX ? x : y;\n            rect.width = barAlongX ? height : width;\n            rect.height = barAlongX ? width : height;\n            rect.strokeWidth = 0;\n            rect.crisp = true;\n\n            return rect;\n        });\n\n        root.append(bars);\n\n        return bars;\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniRangeArea extends MiniChartWithAxes {\n    static chartType: ChartType = 'rangeArea';\n\n    private readonly lines: _Scene.Path[][];\n    private readonly areas: _Scene.Path[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'rangeAreaTooltip');\n\n        // Create a set of repeating zigzag-shaped data series to use as the chart data\n        const period = 4;\n        const dataSeriesMidpoints = [\n            zigzag({ offset: 0.375 * period, length: period, pattern: { low: 3, high: 5, period } }),\n            zigzag({ offset: 0.375 * period, length: period, pattern: { low: 2.25, high: 4.25, period } }),\n            zigzag({ offset: 0.75 * period, length: period, pattern: { low: 2.5, high: 4.5, period } }),\n        ];\n        const dataSeriesWidth = 1.75;\n        const data = dataSeriesMidpoints.map((series) =>\n            series.map(([x, y]) => ({\n                x,\n                low: y - 0.5 * dataSeriesWidth,\n                high: y + 0.5 * dataSeriesWidth,\n            }))\n        );\n\n        const { lines, areas } = this.createRangeArea(this.root, data, this.size, this.padding);\n        this.lines = lines;\n        this.areas = areas;\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        // Swap the secondary and tertiary colors to match the designs\n        fills = swapArrayItems(fills, 1, 2);\n        strokes = swapArrayItems(strokes, 1, 2);\n\n        this.lines.forEach(([highLine, lowLine], i) => {\n            highLine.fill = undefined;\n            highLine.stroke = strokes[i];\n            lowLine.fill = undefined;\n            lowLine.stroke = strokes[i];\n        });\n        this.areas.forEach((area, i) => {\n            area.fill = fills[i];\n        });\n    }\n\n    createRangeArea(\n        root: _Scene.Group,\n        data: Array<Array<{ x: number; low: number; high: number }>>,\n        size: number,\n        padding: number\n    ): { lines: _Scene.Path[][]; areas: _Scene.Path[] } {\n        const xMin = data.reduce((acc, series) => series.reduce((acc, { x }) => Math.min(acc, x), acc), Infinity);\n        const xMax = data.reduce((acc, series) => series.reduce((acc, { x }) => Math.max(acc, x), acc), -Infinity);\n        const yMin = data.reduce((acc, series) => series.reduce((acc, { low }) => Math.min(acc, low), acc), Infinity);\n        const yMax = data.reduce(\n            (acc, series) => series.reduce((acc, { high }) => Math.max(acc, high), acc),\n            -Infinity\n        );\n\n        const xScale = new _Scene.LinearScale();\n        xScale.domain = [xMin, xMax];\n        xScale.range = [padding, size - padding];\n\n        const scalePadding = 2 * padding;\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [yMin, yMax];\n        yScale.range = [size - scalePadding, scalePadding];\n\n        const lines: _Scene.Path[][] = [];\n        const areas: _Scene.Path[] = [];\n\n        const lowPoints = data.map((series) => {\n            const highLine = new _Scene.Path();\n            const lowLine = new _Scene.Path();\n            const area = new _Scene.Path();\n\n            lines.push([highLine, lowLine]);\n            areas.push(area);\n\n            highLine.strokeWidth = 0;\n            lowLine.strokeWidth = 0;\n            area.strokeWidth = 0;\n            area.fillOpacity = 0.8;\n\n            highLine.path.clear();\n            lowLine.path.clear();\n            area.path.clear();\n\n            return series.map((datum, datumIndex) => {\n                const { x, low, high } = datum;\n\n                const scaledX = xScale.convert(x);\n                const yLow = yScale.convert(low);\n                const yHigh = yScale.convert(high);\n\n                const command = datumIndex > 0 ? 'lineTo' : 'moveTo';\n\n                highLine.path[command](scaledX, yHigh);\n                lowLine.path[command](scaledX, yLow);\n                area.path[command](scaledX, yHigh);\n\n                return [scaledX, yLow];\n            });\n        });\n\n        lowPoints.forEach((seriesLowPoints, seriesIndex) => {\n            const n = seriesLowPoints.length - 1;\n            const area = areas[seriesIndex];\n            for (let datumIndex = n; datumIndex >= 0; datumIndex--) {\n                const [x, y] = seriesLowPoints[datumIndex];\n                area.path['lineTo'](x, y);\n            }\n        });\n\n        root.append(areas.concat(...lines));\n\n        return { lines, areas };\n    }\n}\n\ninterface ZigzagPatternOptions {\n    low: number;\n    high: number;\n    period: number;\n}\n\nfunction zigzag(options: { offset: number; length: number; pattern: ZigzagPatternOptions }): Array<[number, number]> {\n    const { offset, length, pattern } = options;\n\n    // Generate [x, y] points for all inflection points of the zigzag pattern that fall within the range\n    const points = getZigzagInflectionPoints(offset, length, pattern);\n\n    // Ensure the first and last points are clamped to the start and end of the range\n    const xMin = 0;\n    const xMax = length;\n    if (points.length === 0 || points[0][0] !== xMin) points.unshift(getZigzagPoint(xMin, offset, pattern));\n    if (points[points.length - 1][0] !== xMax) points.push(getZigzagPoint(xMax, offset, pattern));\n\n    return points;\n\n    function getZigzagInflectionPoints(\n        offset: number,\n        length: number,\n        pattern: ZigzagPatternOptions\n    ): [number, number][] {\n        const { period } = pattern;\n        const scaledOffset = offset / period;\n        const patternInflectionPoints = [0, 0.5];\n        const inflectionPoints = patternInflectionPoints\n            .map((x) => x - scaledOffset)\n            // Clamp offset points to the unit range [0, 1)\n            .map(getRemainderAbs)\n            .sort((a, b) => a - b);\n        const repeatedPoints = Array.from(\n            { length: Math.floor(inflectionPoints.length * (period / length)) },\n            (_, i) => inflectionPoints[i % inflectionPoints.length] + Math.floor(i / inflectionPoints.length)\n        );\n        return repeatedPoints.map((x) => x * period).map((x) => getZigzagPoint(x, offset, pattern));\n    }\n\n    function getZigzagPoint(x: number, offset: number, pattern: ZigzagPatternOptions): [number, number] {\n        return [x, getZigzagValue(offset + x, pattern)];\n    }\n\n    function getZigzagValue(x: number, pattern: ZigzagPatternOptions): number {\n        const { low, high, period } = pattern;\n        const scaledX = getRemainderAbs(x / period);\n        const y = scaledX > 0.5 ? 1 - 2 * (scaledX - 0.5) : 2 * scaledX;\n        return low + (high - low) * y;\n    }\n}\n\nfunction getRemainderAbs(value: number): number {\n    const remainder = value % 1;\n    return remainder < 0 ? remainder + 1 : remainder;\n}\n\nfunction swapArrayItems<T>(items: T[], leftIndex: number, rightIndex: number): T[] {\n    const results = [...items];\n    const temp = results[leftIndex];\n    results[leftIndex] = results[rightIndex];\n    results[rightIndex] = temp;\n    return results;\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene, _Theme, _Util } from 'ag-charts-community';\n\nimport type { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniBoxPlot extends MiniChartWithAxes {\n    static chartType: ChartType = 'boxPlot';\n\n    private readonly boxPlotGroups: _Scene.Group[];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        themeTemplateParameters: ThemeTemplateParameters,\n        isCustomTheme: boolean\n    ) {\n        super(container, 'boxPlotTooltip');\n\n        const padding = this.padding;\n        const size = this.size;\n\n        const data = [11, 11.5, 10.5];\n\n        const maxRatio = 1.2;\n        const q3Ratio = 1.1;\n        const q1Ratio = 0.9;\n        const minRatio = 0.8;\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [\n            data.reduce((a, b) => Math.min(a, b), Infinity) * minRatio,\n            data.reduce((a, b) => Math.max(a, b), 0) * maxRatio,\n        ];\n        yScale.range = [size - 1.5 * padding, padding];\n\n        const xScale = new _Scene.BandScale();\n        xScale.domain = data.map((_, index) => index);\n        xScale.range = [padding, size - padding];\n        xScale.paddingInner = 0.4;\n        xScale.paddingOuter = 0.2;\n\n        const bandwidth = Math.round(xScale.bandwidth);\n        const halfBandWidth = Math.round(xScale.bandwidth / 2);\n\n        this.boxPlotGroups = data.map((datum, i) => {\n            const [minValue, q1Value, q3Value, maxValue] = [\n                datum * minRatio,\n                datum * q1Ratio,\n                datum * q3Ratio,\n                datum * maxRatio,\n            ];\n\n            const top = Math.round(yScale.convert(q3Value));\n            const left = Math.round(xScale.convert(i));\n            const right = Math.round(left + bandwidth);\n            const bottom = Math.round(yScale.convert(q1Value));\n            const min = Math.round(yScale.convert(minValue));\n            const mid = Math.round(yScale.convert(datum));\n            const max = Math.round(yScale.convert(maxValue));\n            const whiskerX = left + halfBandWidth;\n\n            const boxPlotGroup = new _Scene.Group();\n\n            const box = new _Scene.Rect();\n            const median = new _Scene.Line();\n            const topWhisker = new _Scene.Line();\n            const bottomWhisker = new _Scene.Line();\n            const topCap = new _Scene.Line();\n            const bottomCap = new _Scene.Line();\n\n            box.x = left;\n            box.y = top;\n            box.width = bandwidth;\n            box.height = bottom - top;\n            box.strokeWidth = 1;\n            box.strokeOpacity = 0.75;\n            box.crisp = true;\n\n            this.setLineProperties(median, left, right, mid, mid);\n            this.setLineProperties(topWhisker, whiskerX, whiskerX, max, top);\n            this.setLineProperties(bottomWhisker, whiskerX, whiskerX, min, bottom);\n            this.setLineProperties(topCap, left, right, max, max);\n            this.setLineProperties(bottomCap, left, right, min, min);\n\n            boxPlotGroup.append([box, median, topWhisker, bottomWhisker, topCap, bottomCap]);\n            return boxPlotGroup;\n        });\n\n        this.updateColors(fills, strokes, themeTemplateParameters, isCustomTheme);\n        this.root.append(this.boxPlotGroups);\n    }\n\n    updateColors(\n        fills: string[],\n        strokes: string[],\n        themeTemplateParameters?: ThemeTemplateParameters,\n        isCustomTheme?: boolean\n    ) {\n        const themeBackgroundColor = themeTemplateParameters?.get(_Theme.DEFAULT_BACKGROUND_COLOUR);\n        const backgroundFill =\n            (Array.isArray(themeBackgroundColor) ? themeBackgroundColor[0] : themeBackgroundColor) ?? 'white';\n\n        this.boxPlotGroups.forEach((group, i) => {\n            group.children?.forEach((node: _Scene.Rect | _Scene.Line) => {\n                const fill = fills[i % fills.length];\n                node.fill = isCustomTheme ? fill : _Util.interpolateColor(fill, backgroundFill)(0.7);\n                node.stroke = strokes[i % strokes.length];\n            });\n        });\n    }\n\n    setLineProperties(line: _Scene.Line, x1: number, x2: number, y1: number, y2: number) {\n        line.x1 = x1;\n        line.x2 = x2;\n        line.y1 = y1;\n        line.y2 = y2;\n        line.strokeOpacity = 0.75;\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene, _Theme } from 'ag-charts-community';\n\nimport type { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport { MiniChart } from '../miniChart';\n\nexport class MiniTreemap extends MiniChart {\n    static chartType: ChartType = 'treemap';\n    private readonly rects: _Scene.Rect[];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        themeTemplate: ThemeTemplateParameters,\n        isCustomTheme: boolean\n    ) {\n        super(container, 'treemapTooltip');\n\n        const { size, padding } = this;\n\n        const data: number[][] = [\n            [1, 1],\n            [3, 2, 1],\n        ];\n\n        const treeSize = data.length;\n        const treePadding = treeSize % 2 === 0 ? 0.3 : 0.2;\n        const range = [padding, size - padding];\n\n        const columns = data.length;\n        const columnParts = (columns * (columns + 1)) / 2;\n        const columnPadding = treePadding / (columns - 1);\n\n        const availableRange = range[1] - range[0];\n        const availableWidth = availableRange - treePadding;\n\n        let previousX = range[0];\n        this.rects = data.reduce((rects, d, columnIndex) => {\n            rects ??= [];\n\n            const widthRatio = (columns - columnIndex) / columnParts;\n            const width = availableWidth * widthRatio;\n\n            const rows = d.length;\n            const rowParts = d.reduce((parts, ratio) => (parts += ratio), 0);\n            const rowPadding = treePadding / (rows - 1 || 1);\n            const availableHeight = rows > 1 ? availableRange - treePadding : availableRange;\n\n            let previousY = range[0];\n            const xRects = d.map((ratio) => {\n                const rect = new _Scene.Rect();\n\n                const height = (availableHeight * ratio) / rowParts;\n\n                rect.x = previousX;\n                rect.y = previousY;\n                rect.width = width;\n                rect.height = height;\n                rect.strokeWidth = 0.75;\n                rect.crisp = true;\n\n                previousY += height + rowPadding;\n                return rect;\n            });\n\n            previousX += width + columnPadding;\n\n            rects.push(...xRects);\n\n            return rects;\n        }, [] as _Scene.Rect[]);\n\n        this.updateColors(fills, strokes, themeTemplate, isCustomTheme);\n\n        const rectGroup = new _Scene.Group();\n        rectGroup.setClipRectInGroupCoordinateSpace(new _Scene.BBox(padding, padding, size - padding, size - padding));\n        rectGroup.append(this.rects);\n        this.root.append(rectGroup);\n    }\n\n    updateColors(fills: string[], strokes: string[], themeTemplate?: ThemeTemplateParameters, isCustomTheme?: boolean) {\n        const defaultBackgroundColor = themeTemplate?.get(_Theme.DEFAULT_BACKGROUND_COLOUR);\n        const backgroundFill =\n            (Array.isArray(defaultBackgroundColor) ? defaultBackgroundColor[0] : defaultBackgroundColor) ?? 'white';\n\n        this.rects.forEach((rect, i) => {\n            rect.fill = fills[i % strokes.length];\n            rect.stroke = isCustomTheme ? strokes[i % strokes.length] : backgroundFill;\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport { MiniChartWithPolarAxes } from '../miniChartWithPolarAxes';\n\nexport class MiniSunburst extends MiniChartWithPolarAxes {\n    static chartType: ChartType = 'sunburst';\n    private readonly series: _Scene.Group[];\n\n    // Hierarchical data using multidimensional array\n    private data = [\n        [[], []],\n        [[], []],\n        [[], []],\n    ];\n\n    // Rotate the chart by the given angle (-90 degrees)\n    private angleOffset = -Math.PI / 2;\n\n    private innerRadiusRatio = 0;\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'sunburstTooltip');\n\n        this.showRadiusAxisLine = false;\n        this.showAngleAxisLines = false;\n\n        const { data, size, padding, angleOffset, innerRadiusRatio } = this;\n\n        const radius = (size - padding * 2) / 2;\n\n        const angleRange = [angleOffset + 0, angleOffset + 2 * Math.PI];\n        const angleExtent = Math.abs(angleRange[1] - angleRange[0]);\n\n        const radiusRange = [radius * innerRadiusRatio, radius];\n        const radiusExtent = Math.abs(radiusRange[1] - radiusRange[0]);\n\n        let maxDepth = 0;\n        const findMaxDepth = (data: any[], parentDepth: number) => {\n            data.forEach((child) => {\n                const depth = parentDepth + 1;\n                maxDepth = Math.max(maxDepth, depth);\n                findMaxDepth(child, depth);\n            });\n        };\n\n        findMaxDepth(data, 0);\n\n        const radiusRatio = radiusExtent / maxDepth;\n        const center = this.size / 2;\n        const startAngle = angleRange[0];\n\n        this.series = [];\n\n        const createSectors = (\n            data: any[],\n            depth: number,\n            startAngle: number,\n            availableAngle: number,\n            group?: _Scene.Group\n        ) => {\n            const isArray = Array.isArray(data);\n\n            if (!isArray) {\n                return;\n            }\n\n            const childDepth = depth + 1;\n\n            let previousAngle = startAngle;\n\n            data.forEach((child, childIndex, children) => {\n                let childGroup = group;\n                if (!childGroup) {\n                    childGroup = new _Scene.Group();\n                    this.series.push(childGroup);\n                }\n\n                const innerRadius = radiusRange[0] + depth * radiusRatio;\n                const outerRadius = radiusRange[0] + childDepth * radiusRatio;\n\n                const angleRatio = 1 / children.length;\n                const start = previousAngle;\n                const end = start + availableAngle * angleRatio;\n\n                const sector = new _Scene.Sector();\n                sector.centerX = center;\n                sector.centerY = center;\n                sector.innerRadius = innerRadius;\n                sector.outerRadius = outerRadius;\n                sector.startAngle = start;\n                sector.endAngle = end;\n                sector.stroke = undefined;\n                sector.strokeWidth = 0;\n                sector.inset = 0.75;\n\n                previousAngle = end;\n\n                childGroup.append(sector);\n\n                createSectors(child, childDepth, start, Math.abs(end - start), childGroup);\n            });\n        };\n\n        createSectors(data, 0, startAngle, angleExtent);\n\n        this.root.append(this.series);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.series.forEach((group, i) => {\n            group.children?.forEach((sector: _Scene.Sector) => {\n                sector.fill = fills[i % fills.length];\n                sector.stroke = strokes[i % strokes.length];\n            });\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene, _Theme, _Util } from 'ag-charts-community';\n\nimport type { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport { MiniChart } from '../miniChart';\n\nexport class MiniHeatmap extends MiniChart {\n    static chartType: ChartType = 'heatmap';\n    private readonly rects: _Scene.Rect[];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        themeTemplate: ThemeTemplateParameters,\n        isCustomTheme: boolean\n    ) {\n        super(container, 'heatmapTooltip');\n\n        const { size, padding } = this;\n\n        const heatmapSize = 3;\n\n        const data = Array.from({ length: heatmapSize }, (_, __) =>\n            Array.from({ length: heatmapSize }, (_, yIndex) => yIndex)\n        );\n        const domain = data.map((_, index) => index);\n\n        const xScale = new _Scene.BandScale();\n        xScale.domain = domain;\n        xScale.range = [padding, size - padding];\n        xScale.paddingInner = 0.01;\n        xScale.paddingOuter = 0.1;\n\n        const yScale = new _Scene.BandScale();\n        yScale.domain = domain;\n        yScale.range = [padding, size - padding];\n        yScale.paddingInner = 0.01;\n        yScale.paddingOuter = 0.1;\n\n        const width = xScale.bandwidth ?? 0;\n        const height = yScale.bandwidth ?? 0;\n\n        this.rects = data.reduce((rects, d: [], index) => {\n            rects ??= [];\n            const xRects = d.map((_, yIndex) => {\n                const rect = new _Scene.Rect();\n                rect.x = xScale.convert(index);\n                rect.y = yScale.convert(yIndex);\n                rect.width = width;\n                rect.height = height;\n                rect.strokeWidth = 0;\n                rect.crisp = true;\n\n                return rect;\n            });\n\n            rects.push(...xRects);\n\n            return rects;\n        }, [] as _Scene.Rect[]);\n\n        this.updateColors(fills, strokes, themeTemplate, isCustomTheme);\n\n        const rectGroup = new _Scene.Group();\n        rectGroup.setClipRectInGroupCoordinateSpace(new _Scene.BBox(padding, padding, size - padding, size - padding));\n        rectGroup.append(this.rects);\n        this.root.append(rectGroup);\n    }\n\n    updateColors(fills: string[], strokes: string[], themeTemplate?: ThemeTemplateParameters, isCustomTheme?: boolean) {\n        const defaultColorRange = themeTemplate?.get(_Theme.DEFAULT_DIVERGING_SERIES_COLOUR_RANGE);\n        const defaultBackgroundColor = themeTemplate?.get(_Theme.DEFAULT_BACKGROUND_COLOUR);\n        const backgroundFill =\n            (Array.isArray(defaultBackgroundColor) ? defaultBackgroundColor[0] : defaultBackgroundColor) ?? 'white';\n\n        const colorRange = isCustomTheme ? [fills[0], fills[1]] : defaultColorRange;\n        const stroke = isCustomTheme ? strokes[0] : backgroundFill;\n\n        const fillFn = _Util.interpolateColor(colorRange[0], colorRange[1]);\n        this.rects.forEach((rect, i) => {\n            rect.fill = fillFn(i * 0.2);\n            rect.stroke = stroke;\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene, _Theme } from 'ag-charts-community';\n\nimport type { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport { accumulateData } from '../miniChartHelpers';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniWaterfall extends MiniChartWithAxes {\n    static chartType: ChartType = 'waterfall';\n\n    private readonly bars: _Scene.Rect[];\n\n    private data = [4, 3, -3, 6, -3];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        themeTemplate: ThemeTemplateParameters,\n        isCustomTheme: boolean\n    ) {\n        super(container, 'waterfallTooltip');\n\n        this.bars = this.createWaterfall(this.root, this.data, this.size, this.padding, 'vertical').bars;\n        this.updateColors(fills, strokes, themeTemplate, isCustomTheme);\n    }\n\n    updateColors(fills: string[], strokes: string[], themeTemplate?: ThemeTemplateParameters, isCustomTheme?: boolean) {\n        const { data } = this;\n        const palettePositive = {\n            fill: fills[0],\n            stroke: strokes[0],\n        };\n        const paletteNegative = {\n            fill: fills[1],\n            stroke: strokes[1],\n        };\n        const positive = isCustomTheme\n            ? palettePositive\n            : themeTemplate?.get(_Theme.PALETTE_UP_STROKE) ?? palettePositive;\n        const negative = isCustomTheme\n            ? paletteNegative\n            : themeTemplate?.get(_Theme.PALETTE_DOWN_STROKE) ?? paletteNegative;\n        this.bars.forEach((bar, i) => {\n            const isPositive = data[i] >= 0;\n            bar.fill = isPositive ? positive.fill : negative.fill;\n            bar.stroke = isPositive ? positive.stroke : negative.stroke;\n        });\n    }\n\n    createWaterfall(\n        root: _Scene.Group,\n        data: number[],\n        size: number,\n        padding: number,\n        direction: 'horizontal' | 'vertical'\n    ): { bars: _Scene.Rect[] } {\n        const scalePadding = 2 * padding;\n\n        const { processedData, min, max } = accumulateData(data.map((d) => [d]));\n        const flatData = processedData.reduce((flat, d) => flat.concat(d), []);\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [Math.min(min, 0), max];\n        yScale.range = [size - scalePadding, scalePadding];\n\n        const xScale = new _Scene.BandScale<number>();\n        xScale.domain = data.map((_, index) => index);\n        xScale.range = [padding, size - padding];\n        xScale.paddingInner = 0.2;\n        xScale.paddingOuter = 0.3;\n\n        const width = xScale.bandwidth;\n\n        const connectorLine = new _Scene.Path();\n        connectorLine.stroke = '#575757';\n        connectorLine.strokeWidth = 0;\n        const pixelAlignmentOffset = (Math.floor(connectorLine.strokeWidth) % 2) / 2;\n\n        const connectorPath = connectorLine.path;\n        connectorPath.clear();\n\n        const barAlongX = direction === 'horizontal';\n\n        const bars = flatData.map((datum, i) => {\n            const previousDatum = i > 0 ? flatData[i - 1] : 0;\n            const rawValue = data[i];\n            const isPositive = rawValue > 0;\n\n            const currY = Math.round(yScale.convert(datum));\n            const trailY = Math.round(yScale.convert(previousDatum));\n            const y = (isPositive ? currY : trailY) - pixelAlignmentOffset;\n            const bottomY = (isPositive ? trailY : currY) + pixelAlignmentOffset;\n            const height = Math.abs(bottomY - y);\n\n            const x = xScale.convert(i);\n\n            const rect = new _Scene.Rect();\n            rect.x = barAlongX ? y : x;\n            rect.y = barAlongX ? x : y;\n            rect.width = barAlongX ? height : width;\n            rect.height = barAlongX ? width : height;\n            rect.strokeWidth = 0;\n            rect.crisp = true;\n\n            const moveTo = currY + pixelAlignmentOffset;\n            const lineTo = trailY + pixelAlignmentOffset;\n\n            if (i > 0) {\n                const lineToX = barAlongX ? lineTo : rect.x;\n                const lineToY = barAlongX ? rect.y : lineTo;\n                connectorPath.lineTo(lineToX, lineToY);\n            }\n            const moveToX = barAlongX ? moveTo : rect.x;\n            const moveToY = barAlongX ? rect.y : moveTo;\n            connectorPath.moveTo(moveToX, moveToY);\n\n            return rect;\n        });\n\n        root.append([connectorLine, ...bars]);\n\n        return { bars };\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport type { _Scene } from 'ag-charts-community';\n\nimport type { CreateColumnRectsParams } from '../miniChartHelpers';\nimport { createColumnRects, createLinePaths } from '../miniChartHelpers';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniColumnLineCombo extends MiniChartWithAxes {\n    static chartType: ChartType = 'columnLineCombo';\n\n    private columns: _Scene.Rect[];\n    private lines: _Scene.Path[];\n\n    private columnData = [3, 4];\n\n    private lineData = [[5, 4, 6, 5, 4]];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'columnLineComboTooltip');\n\n        const { root, columnData, lineData, size, padding } = this;\n\n        this.columns = createColumnRects({\n            stacked: false,\n            root,\n            data: columnData,\n            size,\n            padding,\n            xScaleDomain: [0, 1],\n            yScaleDomain: [0, 4],\n            xScalePadding: 0.5,\n        } as CreateColumnRectsParams);\n\n        root.append(this.columns);\n\n        this.lines = createLinePaths(root, lineData, size, padding);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.columns.forEach((bar: _Scene.Rect, i: number) => {\n            bar.fill = fills[i];\n            bar.stroke = strokes[i];\n        });\n\n        this.lines.forEach((line: _Scene.Path, i: number) => {\n            line.stroke = fills[i + 2];\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport type { CreateColumnRectsParams } from '../miniChartHelpers';\nimport { createColumnRects } from '../miniChartHelpers';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport interface Coordinate {\n    x: number;\n    y: number;\n}\nexport class MiniAreaColumnCombo extends MiniChartWithAxes {\n    static chartType: ChartType = 'areaColumnCombo';\n\n    private columns: _Scene.Rect[];\n    private areas: _Scene.Path[];\n\n    private columnData = [3, 4.5];\n\n    private areaData = [[5, 4, 6, 5, 4]];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'areaColumnComboTooltip');\n\n        const { root, columnData, areaData, size, padding } = this;\n\n        this.columns = createColumnRects({\n            stacked: false,\n            root,\n            data: columnData,\n            size,\n            padding,\n            xScaleDomain: [0, 1],\n            yScaleDomain: [0, 6],\n            xScalePadding: 0.5,\n        } as CreateColumnRectsParams);\n\n        // scale for area series\n        const xScale = new _Scene.BandScale<number>();\n        xScale.range = [padding, size - padding];\n        xScale.domain = [0, 1, 2, 3, 4];\n        xScale.paddingInner = 1;\n        xScale.paddingOuter = 0;\n\n        const yScale = new _Scene.LinearScale();\n        yScale.range = [size - padding, padding];\n        yScale.domain = [0, 6];\n\n        const pathData: Coordinate[][] = [];\n        const yZero = yScale.convert(0);\n        const firstX = xScale.convert(0);\n\n        areaData.forEach((series, i) => {\n            const points = pathData[i] || (pathData[i] = []);\n            series.forEach((data, j) => {\n                const yDatum = data;\n                const xDatum = j;\n\n                const x = xScale.convert(xDatum);\n                const y = yScale.convert(yDatum);\n\n                points[j] = { x, y };\n            });\n\n            const lastX = xScale.convert(series.length - 1);\n\n            pathData[i].push(\n                {\n                    x: lastX,\n                    y: yZero,\n                },\n                {\n                    x: firstX,\n                    y: yZero,\n                }\n            );\n        });\n\n        this.areas = pathData.map((points) => {\n            const area = new _Scene.Path();\n            area.strokeWidth = 0;\n            area.fillOpacity = 0.8;\n\n            const path = area.path;\n            points.forEach((point, i) => path[i > 0 ? 'lineTo' : 'moveTo'](point.x, point.y));\n\n            return area;\n        });\n\n        root.append(this.areas);\n        root.append(([] as _Scene.Rect[]).concat.apply([], this.columns));\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.areas.forEach((area, i) => {\n            area.fill = fills[i];\n            area.stroke = strokes[i];\n        });\n\n        this.columns.forEach((bar: _Scene.Rect, i: number) => {\n            bar.fill = fills[i + 1];\n            bar.stroke = strokes[i + 1];\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport { MiniChart } from '../miniChart';\nimport type { CreateColumnRectsParams } from '../miniChartHelpers';\nimport { createColumnRects, createLinePaths } from '../miniChartHelpers';\n\nexport class MiniCustomCombo extends MiniChart {\n    static chartType: ChartType = 'customCombo';\n\n    private columns: _Scene.Rect[];\n    private lines: _Scene.Path[];\n\n    private columnData = [3, 4];\n\n    private lineData = [[5, 4, 6, 5, 4]];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'customComboTooltip');\n\n        const { root, columnData, lineData, size, padding } = this;\n\n        this.columns = createColumnRects({\n            stacked: false,\n            root,\n            data: columnData,\n            size,\n            padding,\n            xScaleDomain: [0, 1],\n            yScaleDomain: [0, 4],\n            xScalePadding: 0.5,\n        } as CreateColumnRectsParams);\n\n        root.append(this.columns);\n\n        this.lines = createLinePaths(root, lineData, size, padding);\n\n        const axisStroke = 'grey';\n        const axisOvershoot = 3;\n\n        const leftAxis = new _Scene.Line();\n        leftAxis.x1 = padding;\n        leftAxis.y1 = padding;\n        leftAxis.x2 = padding;\n        leftAxis.y2 = size - padding + axisOvershoot;\n        leftAxis.stroke = axisStroke;\n\n        const bottomAxis = new _Scene.Line();\n        bottomAxis.x1 = padding - axisOvershoot + 1;\n        bottomAxis.y1 = size - padding;\n        bottomAxis.x2 = size - padding + 1;\n        bottomAxis.y2 = size - padding;\n        bottomAxis.stroke = axisStroke;\n\n        const penIcon = new _Scene.Path();\n        this.buildPenIconPath(penIcon);\n        penIcon.fill = 'whitesmoke';\n        penIcon.stroke = 'darkslategrey';\n        penIcon.strokeWidth = 1;\n\n        root.append([bottomAxis, leftAxis, penIcon]);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.columns.forEach((bar: _Scene.Rect, i: number) => {\n            bar.fill = fills[i];\n            bar.stroke = strokes[i];\n        });\n\n        this.lines.forEach((line: _Scene.Path, i: number) => {\n            line.stroke = fills[i + 2];\n        });\n    }\n\n    buildPenIconPath(penIcon: _Scene.Path) {\n        const { path } = penIcon;\n        path.moveTo(25.76, 43.46);\n        path.lineTo(31.27, 48.53);\n        path.moveTo(49.86, 22);\n        path.lineTo(49.86, 22);\n        path.cubicCurveTo(49.01994659053345, 21.317514933510974, 47.89593834348529, 21.09645997825817, 46.86, 21.41);\n        path.lineTo(46.86, 21.41);\n        path.cubicCurveTo(45.55460035985361, 21.77260167850787, 44.38777081121966, 22.517979360321792, 43.51, 23.55);\n        path.lineTo(25.51, 43.8);\n        path.lineTo(25.43, 43.89);\n        path.lineTo(23.01, 51.89);\n        path.lineTo(22.83, 52.46);\n        path.lineTo(31.02, 48.86);\n        path.lineTo(49.02, 28.52);\n        path.lineTo(49.02, 28.52);\n        path.cubicCurveTo(49.940716461596224, 27.521914221246085, 50.54302631059587, 26.2720342455763, 50.75, 24.93);\n        path.lineTo(50.75, 24.93);\n        path.cubicCurveTo(50.95363374988308, 23.866379846512814, 50.62080640232334, 22.77066734274871, 49.86, 22.0);\n        path.closePath();\n        path.moveTo(41.76, 25.5);\n        path.lineTo(47.34, 30.5);\n        path.moveTo(40.74, 26.65);\n        path.lineTo(46.25, 31.71);\n    }\n}\n", "import type { ChartOptionsChangedEvent, ChartType, WithoutGridCommon } from '@ag-grid-community/core';\nimport { BeanStub, _errorOnce } from '@ag-grid-community/core';\nimport type {\n    AgBaseThemeableChartOptions,\n    AgCartesianAxesTheme,\n    AgCartesianAxisOptions,\n    AgCartesianAxisType,\n    AgCartesianChartOptions,\n    AgChartOptions,\n    AgChartThemeOverrides,\n    AgPolarAxesTheme,\n    AgPolarAxisType,\n} from 'ag-charts-community';\n\nimport type { ChartController } from '../chartController';\nimport type { AgChartActual, AgChartAxisType } from '../utils/integration';\nimport { get, set } from '../utils/object';\nimport type { ChartSeriesType, ChartThemeOverridesSeriesType } from '../utils/seriesTypeMapper';\nimport { getSeriesType, isCartesian, isSeriesType } from '../utils/seriesTypeMapper';\n\nexport interface ChartOptionsProxy {\n    getValue<T = string>(expression: string, calculated?: boolean): T;\n    setValue<T = string>(expression: string, value: T): void;\n    setValues<T = string>(properties: { expression: string; value: T }[]): void;\n}\n\ntype ChartAxis = NonNullable<AgChartActual['axes']>[number];\ntype SupportedSeries = AgChartActual['series'][number];\ntype AgPolarAxisThemeOverrides = NonNullable<AgPolarAxesTheme[keyof AgPolarAxesTheme]>;\ntype AgCartesianAxisThemeOverrides = NonNullable<AgCartesianAxesTheme[keyof AgCartesianAxesTheme]>;\ntype AgChartAxisThemeOverrides = AgCartesianAxisThemeOverrides | AgPolarAxisThemeOverrides;\n\ntype AgChartOptionsWithThemeOverrides = AgChartOptions & {\n    theme: NonNullable<Extract<AgChartOptions['theme'], object>> & {\n        overrides: NonNullable<Extract<AgChartOptions['theme'], object>['overrides']>;\n    };\n};\n\nconst CARTESIAN_AXIS_TYPES: AgCartesianAxisType[] = ['number', 'category', 'time', 'grouped-category'];\nconst POLAR_AXIS_TYPES: AgPolarAxisType[] = ['angle-category', 'angle-number', 'radius-category', 'radius-number'];\n\nconst VALID_AXIS_TYPES: (AgCartesianAxisType | AgPolarAxisType)[] = [...CARTESIAN_AXIS_TYPES, ...POLAR_AXIS_TYPES];\n\nexport class ChartOptionsService extends BeanStub {\n    private readonly chartController: ChartController;\n\n    constructor(chartController: ChartController) {\n        super();\n        this.chartController = chartController;\n    }\n\n    public getChartThemeOverridesProxy(): ChartOptionsProxy {\n        return {\n            getValue: (expression) => this.getChartOption(expression),\n            setValue: (expression, value) => this.setChartThemeOverrides([{ expression, value }]),\n            setValues: (properties) => this.setChartThemeOverrides(properties),\n        };\n    }\n\n    public getAxisThemeOverridesProxy(): ChartOptionsProxy {\n        return {\n            getValue: (expression) => this.getAxisProperty(expression),\n            setValue: (expression, value) => this.setAxisThemeOverrides([{ expression, value }]),\n            setValues: (properties) => this.setAxisThemeOverrides(properties),\n        };\n    }\n\n    public getCartesianAxisOptionsProxy(axisType: 'xAxis' | 'yAxis'): ChartOptionsProxy {\n        return {\n            getValue: (expression) => this.getCartesianAxisProperty(axisType, expression),\n            setValue: (expression, value) => this.setCartesianAxisOptions(axisType, [{ expression, value }]),\n            setValues: (properties) => this.setCartesianAxisOptions(axisType, properties),\n        };\n    }\n\n    public getCartesianAxisThemeOverridesProxy(axisType: 'xAxis' | 'yAxis'): ChartOptionsProxy {\n        return {\n            getValue: (expression) => this.getCartesianAxisProperty(axisType, expression),\n            setValue: (expression, value) => this.setCartesianAxisThemeOverrides(axisType, [{ expression, value }]),\n            setValues: (properties) => this.setCartesianAxisThemeOverrides(axisType, properties),\n        };\n    }\n\n    public getCartesianAxisAppliedThemeOverridesProxy(axisType: 'xAxis' | 'yAxis'): ChartOptionsProxy {\n        return {\n            getValue: (expression) =>\n                this.getCartesianAxisThemeOverride(\n                    axisType,\n                    // Allow the caller to specify a wildcard expression to retrieve the whole set of overrides\n                    expression === '*' ? null : expression\n                )!,\n            setValue: (expression, value) =>\n                this.setCartesianAxisThemeOverrides(\n                    axisType,\n                    // Allow the caller to specify a wildcard expression to set the whole set of overrides\n                    [{ expression: expression === '*' ? null : expression, value }]\n                ),\n            setValues: (properties) => this.setCartesianAxisThemeOverrides(axisType, properties),\n        };\n    }\n\n    public getSeriesOptionsProxy(getSelectedSeries: () => ChartSeriesType): ChartOptionsProxy {\n        return {\n            getValue: (expression, calculated) => this.getSeriesOption(getSelectedSeries(), expression, calculated),\n            setValue: (expression, value) => this.setSeriesOptions(getSelectedSeries(), [{ expression, value }]),\n            setValues: (properties) => this.setSeriesOptions(getSelectedSeries(), properties),\n        };\n    }\n\n    /**\n     * Determine the set of theme overrides that should be retained when transitioning from one chart type to another.\n     */\n    public getPersistedChartThemeOverrides(\n        existingChartOptions: AgChartOptions,\n        existingAxes: ChartAxis[] | undefined,\n        existingChartType: ChartType,\n        targetChartType: ChartType\n    ): AgChartThemeOverrides {\n        // Determine the set of theme override keys that should be retained when transitioning from one chart type to another\n        const retainedThemeOverrideKeys = this.getRetainedChartThemeOverrideKeys(existingChartType, targetChartType);\n        const retainedChartAxisThemeOverrideKeys = this.getRetainedChartAxisThemeOverrideKeys(\n            null,\n            existingChartType,\n            targetChartType\n        );\n\n        // combine the options into a single merged object\n        const targetChartOptions = this.createChartOptions();\n\n        // copy the retained theme overrides from the existing chart options to the target chart options\n        for (const expression of retainedThemeOverrideKeys) {\n            // Locate the value in the existing chart series theme overrides\n            const value = this.retrieveChartOptionsThemeOverride(existingChartOptions, existingChartType, expression);\n            if (value !== undefined) {\n                // Update the value in the target chart series theme overrides\n                this.assignChartOptionsThemeOverride(targetChartOptions, targetChartType, expression, value);\n            }\n        }\n\n        // axis theme overrides are copied to all potential target axis types\n        // (this is necessary because certain chart types auto-instantiate different axis types given the same data)\n        if (existingAxes) {\n            this.assignPersistedAxisOverrides({\n                existingAxes,\n                retainedChartAxisThemeOverrideKeys,\n                existingChartOptions,\n                targetChartOptions,\n                existingChartType,\n                targetChartType,\n            });\n        }\n\n        return targetChartOptions.theme.overrides;\n    }\n\n    public assignPersistedAxisOverrides(params: {\n        existingAxes: ChartAxis[];\n        retainedChartAxisThemeOverrideKeys: {\n            expression: keyof AgChartAxisThemeOverrides | string;\n            targetAxisTypes: AgChartAxisType[];\n        }[];\n        existingChartOptions: AgChartOptions;\n        targetChartOptions: AgChartOptions;\n        existingChartType: ChartType;\n        targetChartType: ChartType;\n    }): void {\n        const {\n            existingAxes,\n            retainedChartAxisThemeOverrideKeys,\n            existingChartOptions,\n            targetChartOptions,\n            existingChartType,\n            targetChartType,\n        } = params;\n        for (const { expression, targetAxisTypes } of retainedChartAxisThemeOverrideKeys) {\n            // Locate the value in the existing chart series theme overrides\n            for (const existingAxisType of existingAxes.map((axis) => axis.type)) {\n                const value = this.retrieveChartOptionsThemeOverride(\n                    existingChartOptions,\n                    existingChartType,\n                    ['axes', existingAxisType, expression].join('.')\n                );\n                if (value !== undefined) {\n                    // Copy the value to all potential target chart axis theme overrides\n                    // (axis theme overrides are currently only persisted across cartesian chart types)\n                    for (const targetAxisType of targetAxisTypes) {\n                        this.assignChartOptionsThemeOverride(\n                            targetChartOptions,\n                            targetChartType,\n                            ['axes', targetAxisType, expression].join('.'),\n                            value\n                        );\n                    }\n                }\n            }\n        }\n    }\n\n    private getRetainedChartThemeOverrideKeys(\n        existingChartType: ChartType,\n        targetChartType: ChartType\n    ): (keyof AgBaseThemeableChartOptions | string)[] {\n        // these theme overrides are persisted across all chart types\n        const UNIVERSAL_PERSISTED_THEME_OVERRIDES: (keyof AgBaseThemeableChartOptions)[] = ['animation'];\n\n        // these theme overrides are persisted across all cartesian chart types\n        const PERSISTED_CARTESIAN_CHART_THEME_OVERRIDES: (keyof AgCartesianChartOptions)[] = ['zoom', 'navigator'];\n\n        // other chart options will be retained depending on the specifics of the chart type from/to transition\n        const chartSpecificThemeOverrideKeys = ((previousChartType, updatedChartType) => {\n            const expressions = new Array<string>();\n            if (isCartesian(getSeriesType(previousChartType)) && isCartesian(getSeriesType(updatedChartType))) {\n                expressions.push(...PERSISTED_CARTESIAN_CHART_THEME_OVERRIDES);\n            }\n            return expressions;\n        })(existingChartType, targetChartType);\n\n        return [...UNIVERSAL_PERSISTED_THEME_OVERRIDES, ...chartSpecificThemeOverrideKeys];\n    }\n\n    private getRetainedChartAxisThemeOverrideKeys(\n        axisType: 'xAxis' | 'yAxis' | null,\n        existingChartType: ChartType,\n        targetChartType: ChartType\n    ): {\n        expression: keyof AgChartAxisThemeOverrides | string;\n        targetAxisTypes: AgChartAxisType[];\n    }[] {\n        // different axis types have different theme overrides\n        if (isCartesian(getSeriesType(existingChartType)) && isCartesian(getSeriesType(targetChartType))) {\n            const retainedKeys = this.getRetainedCartesianAxisThemeOverrideKeys(axisType);\n            return retainedKeys.map((expression) => ({ expression, targetAxisTypes: CARTESIAN_AXIS_TYPES }));\n        }\n        return [];\n    }\n\n    private getRetainedCartesianAxisThemeOverrideKeys(\n        axisType: 'xAxis' | 'yAxis' | null\n    ): (keyof AgCartesianAxisThemeOverrides | string)[] {\n        const axisPositionSuffixes =\n            axisType === 'xAxis'\n                ? ['', '.top', '.bottom']\n                : axisType === 'yAxis'\n                  ? ['', '.left', '.right']\n                  : ['', '.left', '.right', '.top', '.bottom'];\n\n        // these axis theme overrides are persisted across all cartesian chart axis types\n        const PERSISTED_CARTESIAN_AXIS_THEME_OVERRIDES: (keyof AgCartesianAxisThemeOverrides)[] = ['crosshair'];\n\n        const expressions = new Array<keyof AgBaseThemeableChartOptions | string>();\n        for (const expression of PERSISTED_CARTESIAN_AXIS_THEME_OVERRIDES) {\n            for (const axisPositionSuffix of axisPositionSuffixes) {\n                expressions.push(`${expression}${axisPositionSuffix}`);\n            }\n        }\n        return expressions;\n    }\n\n    private getChartOption<T = string>(expression: string): T {\n        return get(this.getChart(), expression, undefined) as T;\n    }\n\n    private setChartThemeOverrides<T = string>(properties: { expression: string; value: T }[]): void {\n        const chartType = this.getChartType();\n        // combine the options into a single merged object\n        const chartOptions: AgChartOptions = this.createChartOptions();\n        for (const { expression, value } of properties) {\n            this.assignChartOptionsThemeOverride(chartOptions, chartType, expression, value);\n        }\n        this.applyChartOptions(chartOptions);\n    }\n\n    private applyChartOptions(chartOptions: AgChartOptions, options?: { silent?: boolean }): void {\n        if (Object.keys(chartOptions).length === 0) return;\n        this.updateChart(chartOptions);\n        const shouldRaiseEvent = !options?.silent;\n        if (shouldRaiseEvent) this.raiseChartOptionsChangedEvent();\n    }\n\n    public awaitChartOptionUpdate(func: () => void) {\n        const chart = this.chartController.getChartProxy().getChart();\n        chart\n            .waitForUpdate()\n            .then(() => func())\n            .catch((e) => _errorOnce(`chart update failed`, e));\n    }\n\n    private getAxisProperty<T = string>(expression: string): T {\n        // Assume the property exists on the first axis\n        return get(this.getChart().axes?.[0], expression, undefined);\n    }\n\n    private setAxisThemeOverrides<T = string>(properties: { expression: string; value: T }[]): void {\n        const chart = this.getChart();\n        const chartType = this.getChartType();\n\n        // combine the options into a single merged object\n        const chartOptions = this.createChartOptions();\n        for (const { expression, value } of properties) {\n            // Only apply the property to axes that declare the property on their prototype chain\n            const relevantAxes = chart.axes?.filter((axis) => {\n                const parts = expression.split('.');\n                let current: any = axis;\n                for (const part of parts) {\n                    if (!(part in current)) {\n                        return false;\n                    }\n                    current = current[part];\n                }\n                return true;\n            });\n            if (!relevantAxes) continue;\n\n            for (const axis of relevantAxes) {\n                if (!this.isValidAxisType(axis)) continue;\n                this.assignChartAxisThemeOverride(chartOptions, chartType, axis.type, null, expression, value);\n            }\n        }\n\n        this.applyChartOptions(chartOptions);\n    }\n\n    private getCartesianAxisProperty<T = string | undefined>(axisType: 'xAxis' | 'yAxis', expression: string): T {\n        const axes = this.getChartAxes();\n        const axis = this.getCartesianAxis(axes, axisType);\n        return get(axis, expression, undefined);\n    }\n\n    private getCartesianAxisThemeOverride<T = string>(\n        axisType: 'xAxis' | 'yAxis',\n        expression: string | null\n    ): T | undefined {\n        const axes = this.getChartAxes();\n        const chartAxis = this.getCartesianAxis(axes, axisType);\n        if (!chartAxis || !this.isValidAxisType(chartAxis)) return undefined;\n        const chartType = this.getChartType();\n        const chartOptions = this.getChart().getOptions();\n\n        return this.retrieveChartAxisThemeOverride(\n            chartOptions,\n            chartType,\n            chartAxis.type,\n            axisType === 'yAxis' ? ['left', 'right'] : ['bottom', 'top'],\n            expression\n        );\n    }\n\n    private setCartesianAxisThemeOverrides<T = string>(\n        axisType: 'xAxis' | 'yAxis',\n        properties: Array<{ expression: string | null; value: T }>\n    ): void {\n        const axes = this.getChartAxes();\n        const chartAxis = this.getCartesianAxis(axes, axisType);\n        if (!chartAxis || !this.isValidAxisType(chartAxis)) return;\n        const chartType = this.getChartType();\n\n        // combine the axis options into a single merged object\n        const chartOptions = this.createChartOptions();\n        for (const { expression, value } of properties) {\n            this.assignChartAxisThemeOverride(\n                chartOptions,\n                chartType,\n                chartAxis.type,\n                axisType === 'yAxis' ? ['left', 'right'] : ['bottom', 'top'],\n                expression,\n                value\n            );\n        }\n\n        this.applyChartOptions(chartOptions);\n    }\n\n    private setCartesianAxisOptions<T = string>(\n        axisType: 'xAxis' | 'yAxis',\n        properties: Array<{ expression: string; value: T }>\n    ): void {\n        this.updateCartesianAxisOptions(axisType, (chartOptions, axes, chartAxis) => {\n            // assign the provided axis options onto the combined chart options object\n            const axisIndex = axes.indexOf(chartAxis);\n            for (const { expression, value } of properties) {\n                this.assignChartOption(chartOptions, `axes.${axisIndex}.${expression}`, value);\n            }\n        });\n    }\n\n    private updateCartesianAxisOptions(\n        axisType: 'xAxis' | 'yAxis',\n        updateFunc: (\n            chartOptions: AgChartOptions,\n            axes: ChartAxis[],\n            chartAxis: ChartAxis,\n            existingChartOptions: AgChartOptions\n        ) => void\n    ): void {\n        // get a snapshot of all existing axis options from the chart instance\n        const existingChartOptions = this.getChart().getOptions();\n        const axisOptions = 'axes' in existingChartOptions ? existingChartOptions.axes : undefined;\n        if (!existingChartOptions || !axisOptions) return;\n\n        const axes = this.getChartAxes();\n        const chartAxis = this.getCartesianAxis(axes, axisType);\n        if (!chartAxis) return;\n\n        // combine the axis options into a single merged object\n        const chartOptions = this.createChartOptions();\n        (chartOptions as Extract<AgChartOptions, { axes?: any }>).axes = axisOptions;\n\n        updateFunc(chartOptions, axes, chartAxis, existingChartOptions);\n\n        this.applyChartOptions(chartOptions);\n    }\n\n    public setCartesianCategoryAxisType(axisType: 'xAxis' | 'yAxis', value: AgCartesianAxisOptions['type']): void {\n        this.updateCartesianAxisOptions(axisType, (chartOptions, _axes, chartAxis, existingChartOptions) => {\n            const chartType = this.getChartType();\n            this.assignPersistedAxisOverrides({\n                existingAxes: [chartAxis],\n                retainedChartAxisThemeOverrideKeys: this.getRetainedChartAxisThemeOverrideKeys(\n                    axisType,\n                    chartType,\n                    chartType\n                ),\n                existingChartOptions,\n                targetChartOptions: chartOptions,\n                existingChartType: chartType,\n                targetChartType: chartType,\n            });\n            this.assignChartOption(chartOptions, `axes.0.type`, value);\n            this.chartController.setCategoryAxisType(value);\n        });\n    }\n\n    private getCartesianAxis(axes: ChartAxis[], axisType: 'xAxis' | 'yAxis'): ChartAxis | undefined {\n        if (axes.length < 2) {\n            return undefined;\n        }\n        switch (axisType) {\n            case 'xAxis':\n                return axes[0].direction === 'x' ? axes[0] : axes[1];\n            case 'yAxis':\n                return axes[1].direction === 'y' ? axes[1] : axes[0];\n        }\n    }\n\n    private getSeriesOption<T = string>(seriesType: ChartSeriesType, expression: string, calculated?: boolean): T {\n        // N.B. 'calculated' here refers to the fact that the property exists on the internal series object itself,\n        // rather than the properties object. This is due to us needing to reach inside the chart itself to retrieve\n        // the value, and will likely be cleaned up in a future release\n        const series = this.getChart().series.find((s: any) => isMatchingSeries(seriesType, s));\n        return get(calculated ? series : series?.properties.toJson(), expression, undefined) as T;\n    }\n\n    private setSeriesOptions<T = string>(\n        seriesType: ChartSeriesType,\n        properties: { expression: string; value: T }[]\n    ): void {\n        // combine the series options into a single merged object\n        const chartOptions = this.createChartOptions();\n        for (const { expression, value } of properties) {\n            this.assignChartOptionsSeriesThemeOverride(chartOptions, seriesType, `series.${expression}`, value);\n        }\n\n        this.applyChartOptions(chartOptions);\n    }\n\n    public getPairedMode(): boolean {\n        return this.chartController.getChartProxy().isPaired();\n    }\n\n    public setPairedMode(paired: boolean): void {\n        this.chartController.getChartProxy().setPaired(paired);\n    }\n\n    private getChartAxes(): Array<ChartAxis> {\n        const chart = this.getChart();\n        return chart.axes ?? [];\n    }\n\n    private retrieveChartAxisThemeOverride<T = string>(\n        chartOptions: AgChartOptions,\n        chartType: ChartType,\n        axisType: AgChartAxisType,\n        axisPositions: ('left' | 'right' | 'top' | 'bottom')[] | null,\n        expression: string | null\n    ): T | undefined {\n        // Theme overrides can be applied either to all axes simultaneously, or only to axes in a certain orientation\n        // (this allows more fine-grained control for e.g. styling horizontal / vertical axes separately)\n        if (axisPositions) {\n            for (const axisPosition of axisPositions) {\n                const value = this.retrieveChartOptionsThemeOverride<T>(\n                    chartOptions,\n                    chartType,\n                    ['axes', axisType, axisPosition, ...(expression ? [expression] : [])].join('.')\n                );\n                if (value === undefined) continue;\n                return value;\n            }\n        } else {\n            return this.retrieveChartOptionsThemeOverride<T>(\n                chartOptions,\n                chartType,\n                ['axes', axisType, ...(expression ? [expression] : [])].join('.')\n            );\n        }\n    }\n\n    private assignChartAxisThemeOverride<T = string>(\n        chartOptions: AgChartOptions,\n        chartType: ChartType,\n        axisType: AgChartAxisType,\n        axisPositions: ('left' | 'right' | 'top' | 'bottom')[] | null,\n        expression: string | null,\n        value: T\n    ): void {\n        // Theme overrides can be applied either to all axes simultaneously, or only to axes in a certain orientation\n        // (this allows more fine-grained control for e.g. styling horizontal / vertical axes separately)\n        if (axisPositions) {\n            for (const axisPosition of axisPositions) {\n                this.assignChartOptionsThemeOverride(\n                    chartOptions,\n                    chartType,\n                    ['axes', axisType, axisPosition, ...(expression ? [expression] : [])].join('.'),\n                    value\n                );\n            }\n        } else {\n            this.assignChartOptionsThemeOverride(\n                chartOptions,\n                chartType,\n                ['axes', axisType, ...(expression ? [expression] : [])].join('.'),\n                value\n            );\n        }\n    }\n\n    private isValidAxisType(chartAxis: ChartAxis): boolean {\n        return VALID_AXIS_TYPES.includes(chartAxis.type);\n    }\n\n    public getChartType(): ChartType {\n        return this.chartController.getChartType();\n    }\n\n    private getChart() {\n        return this.chartController.getChartProxy().getChart();\n    }\n\n    private updateChart(chartOptions: AgChartOptions) {\n        const chartRef = this.chartController.getChartProxy().getChartRef();\n        chartRef.skipAnimations();\n        chartRef.updateDelta(chartOptions);\n    }\n\n    private createChartOptions(): AgChartOptionsWithThemeOverrides {\n        const chartOptions = {\n            theme: {\n                overrides: {},\n            },\n        };\n        return chartOptions;\n    }\n\n    private retrieveChartOptionsThemeOverride<T>(\n        chartOptions: AgChartOptions,\n        chartType: ChartType,\n        expression: string | null\n    ): T | undefined {\n        // Determine the relevant series type theme override series keys for the current chart\n        const chartSeriesTypes = this.getChartThemeOverridesSeriesTypeKeys(chartType);\n\n        // Retrieve the first matching value\n        for (const seriesType of chartSeriesTypes) {\n            const value = this.retrieveChartOptionsSeriesThemeOverride<T>(chartOptions, seriesType, expression);\n            if (value === undefined) continue;\n            return value;\n        }\n\n        return undefined;\n    }\n\n    private assignChartOptionsThemeOverride<T>(\n        chartOptions: AgChartOptions,\n        chartType: ChartType,\n        expression: string | null,\n        value: T\n    ): void {\n        // Determine the relevant series type theme override series keys for the current chart\n        const chartSeriesTypes = this.getChartThemeOverridesSeriesTypeKeys(chartType);\n\n        // assign the relevant theme overrides for each series type\n        for (const seriesType of chartSeriesTypes) {\n            this.assignChartOptionsSeriesThemeOverride(chartOptions, seriesType, expression, value);\n        }\n    }\n\n    private retrieveChartOptionsSeriesThemeOverride<T>(\n        chartOptions: AgChartOptions,\n        seriesType: ChartThemeOverridesSeriesType,\n        expression: string | null\n    ): T | undefined {\n        return this.retrieveChartOption<T>(\n            chartOptions,\n            ['theme', 'overrides', seriesType, ...(expression ? [expression] : [])].join('.')\n        );\n    }\n\n    private assignChartOptionsSeriesThemeOverride<T>(\n        chartOptions: AgChartOptions,\n        seriesType: ChartThemeOverridesSeriesType,\n        expression: string | null,\n        value: T\n    ): void {\n        this.assignChartOption<T>(\n            chartOptions,\n            ['theme', 'overrides', seriesType, ...(expression ? [expression] : [])].join('.'),\n            value\n        );\n    }\n\n    private getChartThemeOverridesSeriesTypeKeys(chartType: ChartType): ChartThemeOverridesSeriesType[] {\n        // In the chart options API, theme overrides are categorized according to series type.\n        // Depending on the chart type, theme overrides may need to be applied to multiple series types.\n        const chartSeriesTypes: ChartThemeOverridesSeriesType[] = this.chartController.getChartSeriesTypes(chartType);\n        if (this.chartController.isComboChart()) {\n            chartSeriesTypes.push('common');\n        }\n        return chartSeriesTypes;\n    }\n\n    private retrieveChartOption<T>(chartOptions: AgChartOptions, expression: string): T | undefined {\n        return get(chartOptions, expression, undefined);\n    }\n\n    private assignChartOption<T>(chartOptions: AgChartOptions, expression: string, value: T): void {\n        set(chartOptions, expression, value);\n    }\n\n    private raiseChartOptionsChangedEvent(): void {\n        const chartModel = this.chartController.getChartModel();\n\n        const event: WithoutGridCommon<ChartOptionsChangedEvent> = {\n            type: 'chartOptionsChanged',\n            chartId: chartModel.chartId,\n            chartType: chartModel.chartType,\n            chartThemeName: this.chartController.getChartThemeName(),\n            chartOptions: chartModel.chartOptions,\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public override destroy(): void {\n        super.destroy();\n    }\n}\n\nfunction isMatchingSeries(seriesType: ChartSeriesType, series: SupportedSeries): boolean {\n    return isSeriesType(seriesType) && series.type === seriesType;\n}\n", "import type { ChartModel } from '@ag-grid-community/core';\nimport type { AgChartThemeName } from 'ag-charts-community';\n\n// @ts-ignore\nimport { VERSION } from '../version';\n// @ts-ignore\nimport { ALL_AXIS_TYPES, getLegacyAxisType } from './chartComp/utils/axisTypeMapper';\n// @ts-ignore\nimport { getCanonicalChartType, getSeriesType, isPieChartSeries } from './chartComp/utils/seriesTypeMapper';\n\nconst DEBUG = false;\n\nexport function upgradeChartModel(model: ChartModel): ChartModel {\n    const originalVersion = model.version;\n    if (model.version == null) {\n        // Try to guess the version so we can apply the right subset of migrations.\n        model.version = heuristicVersionDetection(model);\n    }\n\n    model = migrateIfBefore('23.0.0', model, migrateV23);\n    model = migrateIfBefore('24.0.0', model, migrateV24);\n    model = migrateIfBefore('25.1.0', model, migrateV25_1);\n    model = migrateIfBefore('26.0.0', model, migrateV26);\n    model = migrateIfBefore('26.1.0', model, migrateV26_1);\n    // Switch from iChartOptions to iAgChartOptions....\n    model = migrateIfBefore('26.2.0', model, migrateV26_2);\n    model = migrateIfBefore('28.0.0', model, migrateV28);\n    model = migrateIfBefore('28.2.0', model, migrateV28_2);\n    model = migrateIfBefore('29.0.0', model, migrateV29);\n    model = migrateIfBefore('29.1.0', model, migrateV29_1);\n    model = migrateIfBefore('29.2.0', model, migrateV29_2);\n    model = migrateIfBefore('30.0.0', model, migrateV30);\n    model = migrateIfBefore('31.0.0', model, migrateV31);\n    model = migrateIfBefore('32.0.0', model, migrateV32);\n    model = cleanup(model);\n\n    // Bump version to latest.\n    model = migrateIfBefore(VERSION, model, (m) => m);\n\n    if (DEBUG && originalVersion !== model.version) {\n        console.log('AG Grid: ChartModel migration complete', { model });\n    }\n\n    return model;\n}\n\nfunction migrateV23(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/76c6744ff2b732d298d1ade73c122188854b5bac\n    model = jsonRename('chartOptions.legend.item.marker.type', 'shape', model);\n    model = jsonRename('chartOptions.seriesDefaults.marker.type', 'shape', model);\n\n    // https://github.com/ag-grid/ag-grid/commit/7bdf2cfd666acda758a818733a9f9cb35ac1d7a7\n    model = jsonRename('chartOptions.legend.padding', 'spacing', model);\n\n    return model;\n}\n\nfunction migrateV24(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/f4e854e3dc459400fa00e6da2873cb8e9cfff6fe#\n    model = jsonDelete('chartOptions.seriesDefaults.marker.minSize', model);\n\n    const {\n        chartType,\n        chartPalette, // Migrate.\n        chartOptions: { xAxis, yAxis, ...chartOptions },\n        ...chartModel\n    } = model as any;\n    const axesTypes = getLegacyAxisType(chartType);\n    const axes = axesTypes?.map((type, i) => ({\n        type,\n        ...(i === 0 ? xAxis : yAxis),\n    }));\n\n    // Precise legacy palette fills/strokes can be found here for future reference:\n    // https://github.com/ag-grid/ag-grid/blob/b22.1.0/grid-enterprise-modules/charts/src/charts/chart/palettes.ts\n    const LEGACY_PALETTES: Record<string, AgChartThemeName> = {\n        borneo: 'ag-default',\n        material: 'ag-material',\n        bright: 'ag-vivid',\n    };\n\n    return {\n        chartType,\n        chartThemeName: LEGACY_PALETTES[chartPalette] ?? 'ag-default',\n        chartOptions: {\n            ...chartOptions,\n            axes,\n            xAxis,\n            yAxis,\n        },\n        ...chartModel,\n    } as ChartModel;\n}\n\nfunction migrateV25_1(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/61943f9fecbfb5ac1b9a1fd93788f9fdd8687181\n    model = jsonRename('chartOptions.seriesDefaults.label.minRequiredAngle', 'minAngle', model);\n    return model;\n}\n\nfunction migrateV26(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/df2445d88e64cb4e831d6163104a0fa60ccde3b5\n    const highlightOptUpdate = ({ dimOpacity, ...opts }: any) => ({\n        ...opts,\n        ...(dimOpacity != null ? { series: { dimOpacity } } : {}),\n    });\n    model = jsonMutate('chartOptions.seriesDefaults.highlightStyle', model, highlightOptUpdate);\n\n    // https://github.com/ag-grid/ag-grid/commit/f4e854e3dc459400fa00e6da2873cb8e9cfff6fe#\n    model = jsonDelete('chart', model);\n    model = jsonDelete('chartOptions.seriesDefaults.tooltipClass', model);\n    model = jsonDelete('chartOptions.seriesDefaults.tooltipTracking', model);\n\n    // Cleanup label.rotation === 0, which was treated as 'use the default' on reload prior to 26.\n    model = jsonDeleteDefault('chartOptions.axes[].label.rotation', 0, model);\n    model = jsonDeleteDefault('chartOptions.axes[].label.rotation', 335, model);\n    return model;\n}\n\nfunction migrateV26_1(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/df2445d88e64cb4e831d6163104a0fa60ccde3b5\n    const highlightOptUpdate = ({ item, series, ...opts }: any) => ({\n        item: { ...opts, ...item },\n        ...(series ? { series } : {}),\n    });\n    model = jsonMutate('chartOptions.seriesDefaults.highlightStyle', model, highlightOptUpdate);\n    model = jsonMutate('chartOptions.series[].highlightStyle', model, highlightOptUpdate);\n    return model;\n}\n\nfunction migrateV26_2(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/8b2e223cb1a687cb6c1d70b9f75f52fa29d00341\n    model = jsonMove('chartOptions.seriesDefaults.fill.opacity', 'chartOptions.seriesDefaults.fillOpacity', model);\n    model = jsonMove('chartOptions.seriesDefaults.stroke.opacity', 'chartOptions.seriesDefaults.strokeOpacity', model);\n    model = jsonMove('chartOptions.seriesDefaults.stroke.width', 'chartOptions.seriesDefaults.strokeWidth', model);\n    model = jsonDelete('chartOptions.seriesDefaults.fill', model);\n    model = jsonDelete('chartOptions.seriesDefaults.stroke', model);\n    model = jsonDelete('chartOptions.seriesDefaults.callout.colors', model);\n    model = jsonDelete('chartOptions.xAxis', model);\n    model = jsonDelete('chartOptions.yAxis', model);\n    const {\n        chartType: providedChartType,\n        chartOptions: { axes, series, seriesDefaults, ...otherChartOptions },\n        ...otherModelProps\n    } = model as any;\n\n    // At 26.2.0 combination charts weren't supported, so we can safely assume a single series type.\n    // We can't rely on the `series.type` field as it was incorrect (in v25.0.0 line chart has an\n    // `area` series).\n    // Note that in v31.1.0, the canonical name for the 'doughnut' chart type changed to 'donut'.\n    const chartType = getCanonicalChartType(providedChartType);\n    const seriesType = getSeriesType(chartType);\n    const seriesTypes = [seriesType];\n\n    const chartTypeMixin: any = {};\n    if (!isPieChartSeries(seriesType)) {\n        const minimalAxis = { top: {}, bottom: {}, left: {}, right: {} };\n        const updatedAxes = axes\n            .map(({ type, ...axisProps }: any) => ({\n                [type]: { ...minimalAxis, ...axisProps },\n            }))\n            .reduce(merge, {});\n        ALL_AXIS_TYPES.filter((v) => updatedAxes[v] == null).forEach((v) => {\n            updatedAxes[v] = { ...minimalAxis };\n        });\n        chartTypeMixin.axes = updatedAxes;\n    }\n\n    const updatedChartOptions = seriesTypes\n        .map((t: string) => ({\n            [t]: {\n                ...chartTypeMixin,\n                series: seriesDefaults,\n                ...otherChartOptions,\n            },\n        }))\n        .reduce(merge, {});\n\n    model = {\n        ...otherModelProps,\n        chartType,\n        chartOptions: updatedChartOptions,\n    };\n\n    return model;\n}\n\nfunction migrateV28(model: ChartModel) {\n    model = jsonDelete('chartOptions.*.title.padding', model);\n    model = jsonDelete('chartOptions.*.subtitle.padding', model);\n    model = jsonDelete('chartOptions.*.axes.*.title.padding', model);\n    model = jsonBackfill('chartOptions.*.axes.*.title.enabled', false, model);\n\n    return model;\n}\n\nfunction migrateV28_2(model: ChartModel) {\n    model = jsonRename('chartOptions.pie.series.callout', 'calloutLine', model);\n    model = jsonRename('chartOptions.pie.series.label', 'calloutLabel', model);\n    model = jsonRename('chartOptions.pie.series.labelKey', 'sectorLabelKey', model);\n    model = jsonRename('chartOptions.pie.series.labelName', 'sectorLabelName', model);\n\n    model = jsonRename('chartOptions.donut.series.callout', 'calloutLine', model);\n    model = jsonRename('chartOptions.donut.series.label', 'calloutLabel', model);\n    model = jsonRename('chartOptions.donut.series.labelKey', 'sectorLabelKey', model);\n    model = jsonRename('chartOptions.donut.series.labelName', 'sectorLabelName', model);\n\n    // series.yKeys => yKey ?\n    // series.yNames => yName ?\n\n    return model;\n}\n\nfunction migrateV29(model: ChartModel) {\n    model = jsonMoveIfMissing('chartOptions.scatter.series.fill', 'chartOptions.scatter.series.marker.fill', model);\n    model = jsonMoveIfMissing(\n        'chartOptions.scatter.series.fillOpacity',\n        'chartOptions.scatter.series.marker.fillOpacity',\n        model\n    );\n    model = jsonMoveIfMissing('chartOptions.scatter.series.stroke', 'chartOptions.scatter.series.marker.stroke', model);\n    model = jsonMoveIfMissing(\n        'chartOptions.scatter.series.strokeOpacity',\n        'chartOptions.scatter.series.marker.strokeOpacity',\n        model\n    );\n    model = jsonMoveIfMissing(\n        'chartOptions.scatter.series.strokeWidth',\n        'chartOptions.scatter.series.marker.strokeWidth',\n        model\n    );\n    model = jsonMove('chartOptions.scatter.series.paired', 'chartOptions.scatter.paired', model);\n\n    return model;\n}\n\nfunction migrateV29_1(model: ChartModel) {\n    model = jsonDelete('chartOptions.axes[].tick.count', model);\n\n    return model;\n}\n\nfunction migrateV29_2(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/ce11956492e42e845932edb4e05d7b0b21db5c61\n    const tooltipOptUpdate = ({ tracking, ...opts }: any) => {\n        const output = { ...opts };\n        if (tracking === false) {\n            output.position ??= { type: 'pointer' };\n            output.range ??= 'nearest';\n        } else if (tracking === true) {\n            output.position ??= { type: 'node' };\n            output.range ??= 'nearest';\n        }\n        return output;\n    };\n    model = jsonMutate('chartOptions.*.tooltip', model, tooltipOptUpdate);\n\n    return model;\n}\n\nfunction migrateV30(model: ChartModel) {\n    // Repeated from migrateV28_2() as they were applied retrospectively for the v30 release.\n    model = jsonRename('chartOptions.pie.series.labelKey', 'sectorLabelKey', model);\n    model = jsonRename('chartOptions.pie.series.labelName', 'sectorLabelName', model);\n    // Late-applied migrations for deprecations in the 29.x.y range.\n    model = migrateV29_1(model);\n    model = migrateV29_2(model);\n\n    // Actual v30 changes.\n    model = jsonDelete('chartOptions.*.series.flipXY', model);\n    model = jsonAdd('chartOptions.common.legend.enabled', true, model);\n    model = jsonBackfill('chartOptions.common.legend.position', 'right', model);\n\n    return model;\n}\n\nfunction migrateV31(model: ChartModel) {\n    const V30_LEGACY_PALETTES: Record<string, AgChartThemeName> = {\n        'ag-pastel': 'ag-sheets',\n        'ag-solar': 'ag-polychroma',\n    };\n\n    const updatedModel = jsonRename('chartOptions.column', 'bar', model);\n\n    const chartThemeName = V30_LEGACY_PALETTES[updatedModel.chartThemeName] || updatedModel.chartThemeName;\n\n    return {\n        ...updatedModel,\n        chartThemeName,\n    };\n}\n\nfunction migrateV32(model: ChartModel) {\n    model = jsonMutateProperty('chartOptions.*.autoSize', true, model, (parent, targetProp) => {\n        if (parent[targetProp] === true) {\n            // autoSize: true was the OOB default, so just use the new OOB default baked-in.\n        } else if (parent[targetProp] === false) {\n            // Fallback to legacy Charts defaults for autoSize: false.\n            parent['minHeight'] = 600;\n            parent['minWidth'] = 300;\n        }\n\n        delete parent[targetProp];\n    });\n\n    return model;\n}\n\nfunction cleanup(model: ChartModel) {\n    // Remove fixed width/height - this has never been supported via UI configuration.\n    model = jsonDelete('chartOptions.*.width', model);\n    model = jsonDelete('chartOptions.*.height', model);\n    model = jsonBackfill('chartOptions.*.axes.category.label.autoRotate', true, model);\n\n    return model;\n}\n\nexport function heuristicVersionDetection(model: ChartModel) {\n    const modelAny = model as any;\n\n    if (model.version != null) {\n        return model.version;\n    }\n\n    const hasKey = (obj: any, ...keys: string[]) => {\n        return Object.keys(obj || {}).some((k) => keys.includes(k));\n    };\n\n    const chartOptions = modelAny.chartOptions;\n    const seriesOptions = hasKey(chartOptions, 'seriesDefaults')\n        ? chartOptions?.seriesDefaults\n        : chartOptions?.[Object.keys(chartOptions)[0]];\n    const hints = {\n        '27.0.0': hasKey(modelAny, 'seriesChartTypes'),\n        '26.2.0': !hasKey(chartOptions, 'seriesDefaults'),\n        '26.1.0': hasKey(seriesOptions?.highlightStyle, 'item'),\n        '26.0.0': hasKey(seriesOptions?.highlightStyle, 'series'),\n        // '26.0.0': modelAny.chart === undefined,\n        '25.1.0': hasKey(seriesOptions?.label, 'minAngle'),\n        '25.0.0':\n            hasKey(modelAny, 'modelType', 'aggFunc', 'unlinkChart', 'suppressChartRanges') ||\n            hasKey(seriesOptions, 'lineDash', 'lineDashOffset'),\n        '24.0.0': hasKey(modelAny, 'chartThemeName', 'chart') || hasKey(chartOptions, 'series'),\n        '23.2.0': hasKey(chartOptions, 'navigator'),\n        '23.0.0': hasKey(chartOptions?.legend?.item?.marker, 'shape'),\n        '22.1.0': hasKey(modelAny, 'chartPalette', 'chartType'),\n    };\n\n    // Default to 27.1.0, the last version before we added `version`.\n    const defaultVersion = '27.1.0';\n    const matchingHints = Object.entries(hints).filter(([_, match]) => match);\n\n    if (DEBUG) console.log('AG Grid: ChartModel migration', { heuristicVersionCandidates: matchingHints });\n    const [heuristicVersion = defaultVersion] = matchingHints[0];\n\n    if (DEBUG) console.log('AG Grid: ChartModel migration', { heuristicVersion });\n    return heuristicVersion;\n}\n\nfunction migrateIfBefore(maxVersion: string, model: ChartModel, migration: (m: ChartModel) => ChartModel): ChartModel {\n    if (versionNumber(maxVersion) > versionNumber(model.version!)) {\n        if (DEBUG) console.log('AG Grid: ChartModel migration', { migratingTo: maxVersion });\n\n        const result = migration(model);\n        result.version = maxVersion;\n\n        if (DEBUG) console.log('AG Grid: ChartModel migration', { migratedTo: maxVersion, result });\n        return result;\n    }\n\n    return model;\n}\n\ntype VersionParts = { major: number; minor: number; patch: number };\nfunction versionParts(version: string): VersionParts {\n    const split = typeof version === 'string' ? version.split('.').map((v) => Number(v)) : [];\n    if (split.length !== 3 || split.some((v) => isNaN(v))) {\n        throw new Error('AG Grid - Illegal version string: ' + version);\n    }\n\n    return {\n        major: split[0],\n        minor: split[1],\n        patch: split[2],\n    };\n}\n\nfunction versionNumber(version: string): number {\n    const { major, minor, patch } = versionParts(version);\n\n    // Return a number of the form MMmmPP.\n    return major * 10_000 + minor * 100 + patch;\n}\n\nfunction jsonDeleteDefault(path: string | string[], defaultValue: any, json: any): any {\n    return jsonMutateProperty(path, true, json, (parent, prop) => {\n        if (parent[prop] === defaultValue) {\n            delete parent[prop];\n        }\n    });\n}\n\nfunction jsonBackfill(path: string | string[], defaultValue: any, json: any): any {\n    return jsonMutateProperty(path, false, json, (parent, prop) => {\n        if (parent[prop] == null) {\n            parent[prop] = defaultValue;\n        }\n    });\n}\n\nfunction jsonAdd(path: string | string[], value: any, json: any): any {\n    if (typeof path === 'string') {\n        path = path.split('.');\n    }\n\n    const nextPath = path[0];\n    if (path.length > 1) {\n        json[nextPath] = jsonAdd(path.slice(1), value, json[nextPath] ?? {});\n    }\n\n    const hasProperty = Object.keys(json).includes(nextPath);\n    if (!hasProperty) {\n        json[nextPath] = value;\n    }\n\n    return json;\n}\n\nfunction jsonMove(from: string, to: string, json: any): any {\n    let valueToMove: any = undefined;\n    let valueFound = false;\n    json = jsonMutateProperty(from, true, json, (parent, prop) => {\n        valueFound = true;\n        valueToMove = parent[prop];\n        delete parent[prop];\n    });\n\n    if (!valueFound) {\n        return json;\n    }\n\n    return jsonMutateProperty(to, false, json, (parent, prop) => {\n        parent[prop] = valueToMove;\n    });\n}\n\nfunction jsonMoveIfMissing(from: string, to: string, json: any): any {\n    let valueToMove: any = undefined;\n    let valueFound = false;\n    json = jsonMutateProperty(from, true, json, (parent, prop) => {\n        valueFound = true;\n        valueToMove = parent[prop];\n        delete parent[prop];\n    });\n\n    if (!valueFound) {\n        return json;\n    }\n\n    return jsonMutateProperty(to, false, json, (parent, prop) => {\n        if (parent[prop] === undefined) {\n            parent[prop] = valueToMove;\n        }\n    });\n}\n\nfunction jsonRename(path: string | string[], renameTo: string, json: any): any {\n    return jsonMutateProperty(path, true, json, (parent, prop) => {\n        parent[renameTo] = parent[prop];\n        delete parent[prop];\n    });\n}\n\nfunction jsonDelete(path: string | string[], json: any): any {\n    return jsonMutateProperty(path, true, json, (parent, prop) => delete parent[prop]);\n}\n\nfunction jsonMutateProperty(\n    path: string | string[],\n    skipMissing: boolean,\n    json: any,\n    mutator: (parent: any, targetProp: string) => any\n) {\n    const pathElements = path instanceof Array ? path : path.split('.');\n    const parentPathElements = pathElements.slice(0, pathElements.length - 1);\n    const targetName = pathElements[pathElements.length - 1];\n\n    return jsonMutate(parentPathElements, json, (parent) => {\n        const hasProperty = Object.keys(parent).includes(targetName);\n        if (skipMissing && !hasProperty) {\n            return parent;\n        }\n\n        const result = { ...parent };\n        mutator(result, targetName);\n        return result;\n    });\n}\n\nfunction jsonMutate(path: string | string[], json: any, mutator: (v: any) => any): any {\n    const pathElements = path instanceof Array ? path : path.split('.');\n\n    // Clone to avoid mutating original input.\n    json = { ...json };\n\n    if (pathElements.length === 0) {\n        return mutator(json);\n    } else if (pathElements[0].startsWith('{')) {\n        const pathOptions = pathElements[0].substring(1, pathElements[0].lastIndexOf('}')).split(',');\n        for (const pathOption of pathOptions) {\n            if (json[pathOption] != null) {\n                json[pathOption] = jsonMutate(pathElements.slice(1), json[pathOption], mutator);\n            }\n        }\n    } else if (pathElements[0].endsWith('[]')) {\n        const arrayName = pathElements[0].substring(0, path[0].indexOf('['));\n        if (json[arrayName] instanceof Array) {\n            json[arrayName] = json[arrayName].map((v: any) => jsonMutate(pathElements.slice(1), v, mutator));\n        }\n    } else if (pathElements[0] === '*') {\n        for (const jsonProp in json) {\n            json[jsonProp] = jsonMutate(pathElements.slice(1), json[jsonProp], mutator);\n        }\n    } else if (json[pathElements[0]] != null) {\n        json[pathElements[0]] = jsonMutate(pathElements.slice(1), json[pathElements[0]], mutator);\n    }\n\n    return json;\n}\n\nconst merge = (r: {}, n: {}) => ({ ...r, ...n });\n", "import type {\n    BeanCollection,\n    ChartDownloadParams,\n    ChartModel,\n    ChartRef,\n    CloseChartToolPanelParams,\n    CreateCrossFilterChartParams,\n    CreatePivotChartParams,\n    CreateRangeChartParams,\n    GetChartImageDataUrlParams,\n    OpenChartToolPanelParams,\n    UpdateChartParams,\n} from '@ag-grid-community/core';\n\nexport function getChartModels(beans: BeanCollection): ChartModel[] | undefined {\n    return beans.frameworkOverrides.wrapIncoming(() => beans.chartService?.getChartModels());\n}\n\nexport function getChartRef(beans: BeanCollection, chartId: string): ChartRef | undefined {\n    return beans.frameworkOverrides.wrapIncoming(() => beans.chartService?.getChartRef(chartId));\n}\n\nexport function getChartImageDataURL(beans: BeanCollection, params: GetChartImageDataUrlParams): string | undefined {\n    return beans.frameworkOverrides.wrapIncoming(() => beans.chartService?.getChartImageDataURL(params));\n}\n\nexport function downloadChart(beans: BeanCollection, params: ChartDownloadParams) {\n    return beans.frameworkOverrides.wrapIncoming(() => beans.chartService?.downloadChart(params));\n}\n\nexport function openChartToolPanel(beans: BeanCollection, params: OpenChartToolPanelParams) {\n    return beans.frameworkOverrides.wrapIncoming(() => beans.chartService?.openChartToolPanel(params));\n}\n\nexport function closeChartToolPanel(beans: BeanCollection, params: CloseChartToolPanelParams) {\n    return beans.frameworkOverrides.wrapIncoming(() => beans.chartService?.closeChartToolPanel(params.chartId));\n}\n\nexport function createRangeChart(beans: BeanCollection, params: CreateRangeChartParams): ChartRef | undefined {\n    return beans.frameworkOverrides.wrapIncoming(() => beans.chartService?.createRangeChart(params, true));\n}\n\nexport function createPivotChart(beans: BeanCollection, params: CreatePivotChartParams): ChartRef | undefined {\n    return beans.frameworkOverrides.wrapIncoming(() => beans.chartService?.createPivotChart(params, true));\n}\n\nexport function createCrossFilterChart(\n    beans: BeanCollection,\n    params: CreateCrossFilterChartParams\n): ChartRef | undefined {\n    return beans.frameworkOverrides.wrapIncoming(() => beans.chartService?.createCrossFilterChart(params, true));\n}\n\nexport function updateChart(beans: BeanCollection, params: UpdateChartParams): void {\n    return beans.frameworkOverrides.wrapIncoming(() => beans.chartService?.updateChart(params));\n}\n\nexport function restoreChart(\n    beans: BeanCollection,\n    chartModel: ChartModel,\n    chartContainer?: HTMLElement\n): ChartRef | undefined {\n    return beans.frameworkOverrides.wrapIncoming(() => beans.chartService?.restoreChart(chartModel, chartContainer));\n}\n", "import type { ModuleValidationResult } from '@ag-grid-community/core';\n\nconst VERSION_CHECKING_FIRST_GRID_MAJOR_VERSION = 28;\nconst VERSION_CHECKING_FIRST_CHARTS_MAJOR_VERSION = 6;\n\nfunction isValidVersion(version: string) {\n    return version && version.match(/\\d+\\.\\d+\\.\\d+/);\n}\n\nfunction isValidMajorVersion({\n    gridMajorVersion,\n    chartsMajorVersion,\n}: {\n    gridMajorVersion: string;\n    chartsMajorVersion: string;\n}): boolean {\n    const gridMajor = parseInt(gridMajorVersion, 10);\n    const chartsMajor = parseInt(chartsMajorVersion, 10);\n\n    const gridMajorDifference = gridMajor - VERSION_CHECKING_FIRST_GRID_MAJOR_VERSION;\n    const chartsMajorDifference = chartsMajor - VERSION_CHECKING_FIRST_CHARTS_MAJOR_VERSION;\n    const isFirstOrAfterVersion = gridMajorDifference >= 0;\n\n    return gridMajorDifference === chartsMajorDifference && isFirstOrAfterVersion;\n}\n\nexport function gridChartVersion(gridVersion: string):\n    | {\n          gridMajorMinor: string;\n          chartsMajorMinor: string;\n      }\n    | undefined {\n    if (!gridVersion || !isValidVersion(gridVersion)) {\n        return undefined;\n    }\n\n    const [gridMajor, gridMinor] = gridVersion.split('.') || [];\n    const gridMajorMinor = `${gridMajor}.${gridMinor}.x`;\n\n    const gridMajorNumber = parseInt(gridMajor, 10);\n    const chartsMajor =\n        gridMajorNumber - VERSION_CHECKING_FIRST_GRID_MAJOR_VERSION + VERSION_CHECKING_FIRST_CHARTS_MAJOR_VERSION;\n\n    if (chartsMajor < 0) {\n        return undefined;\n    }\n\n    const chartsMinor = gridMinor;\n    const chartsMajorMinor = `${chartsMajor}.${chartsMinor}.x`;\n\n    return {\n        gridMajorMinor,\n        chartsMajorMinor,\n    };\n}\n\nexport function validGridChartsVersionErrorMessage({\n    type,\n    gridVersion,\n    chartsVersion,\n}: {\n    type: 'incompatible' | 'invalidCharts' | 'invalidGrid' | 'invalid';\n    gridVersion?: string;\n    chartsVersion?: string;\n}): string {\n    const invalidMessage =\n        'AG Grid: AG Grid version is incompatible. Please see https://www.ag-grid.com/javascript-data-grid/modules/ for more information.';\n\n    if (!gridVersion) {\n        return invalidMessage;\n    }\n\n    const version = gridChartVersion(gridVersion);\n    if (!version) {\n        return invalidMessage;\n    }\n\n    const { gridMajorMinor, chartsMajorMinor } = version;\n\n    if (type === 'incompatible') {\n        return `AG Grid version ${gridVersion} and AG Charts version ${chartsVersion} is not supported. AG Grid version ${gridMajorMinor} should be used with AG Chart ${chartsMajorMinor}. Please see https://www.ag-grid.com/javascript-data-grid/modules/ for more information.`;\n    } else if (type === 'invalidCharts') {\n        return `AG Grid version ${gridMajorMinor} should be used with AG Chart ${chartsMajorMinor}. Please see https://www.ag-grid.com/javascript-data-grid/modules/ for more information.`;\n    }\n\n    return invalidMessage;\n}\n\nexport function validGridChartsVersion({\n    gridVersion,\n    chartsVersion,\n}: {\n    gridVersion: string;\n    chartsVersion: string;\n}): ModuleValidationResult {\n    if (!isValidVersion(chartsVersion)) {\n        return {\n            isValid: false,\n            message: validGridChartsVersionErrorMessage({ type: 'invalidCharts', gridVersion, chartsVersion }),\n        };\n    }\n    if (!isValidVersion(gridVersion)) {\n        return {\n            isValid: false,\n            message: validGridChartsVersionErrorMessage({ type: 'invalidGrid', gridVersion, chartsVersion }),\n        };\n    }\n\n    const [gridMajor, gridMinor] = gridVersion.split('.') || [];\n    const [chartsMajor, chartsMinor, chartsPatch] = chartsVersion.split('.') || [];\n    const isValidMajor = isValidMajorVersion({\n        gridMajorVersion: gridMajor,\n        chartsMajorVersion: chartsMajor,\n    });\n\n    if ((isValidMajor && gridMinor === chartsMinor) || chartsPatch.includes('beta')) {\n        return {\n            isValid: true,\n        };\n    } else if (!isValidMajor || gridMinor !== chartsMinor) {\n        return {\n            isValid: false,\n            message: validGridChartsVersionErrorMessage({ type: 'incompatible', gridVersion, chartsVersion }),\n        };\n    }\n\n    return {\n        isValid: false,\n        message: validGridChartsVersionErrorMessage({ type: 'invalid', gridVersion, chartsVersion }),\n    };\n}\n"],
  "mappings": "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",
  "names": ["import_ag_charts_community", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_ag_charts_community", "import_core", "import_ag_charts_community", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "params", "import_core", "import_core", "import_core", "import_core", "import_ag_charts_community", "import_core", "import_core", "import_ag_charts_community", "import_core", "import_ag_charts_community", "isTitleEnabled", "import_core", "import_core", "labels", "import_core", "import_core", "import_core", "import_ag_charts_community", "import_ag_charts_community", "theme", "params", "import_core", "import_ag_charts_community", "params", "opts", "data", "series", "import_core", "labels", "getItemGroupKey", "hierarchy", "angleKey", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "aggFunc", "import_core", "import_core", "value", "optionsValue", "import_core", "import_core", "import_core", "import_core", "import_core", "value", "import_core", "enabled", "import_core", "import_core", "autoRotate", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_ag_charts_community", "xScale", "yScale", "import_ag_charts_community", "import_core", "import_ag_charts_community", "import_ag_charts_community", "import_ag_charts_community", "import_ag_charts_community", "import_ag_charts_community", "import_ag_charts_community", "import_ag_charts_community", "import_ag_charts_community", "import_ag_charts_community", "import_ag_charts_community", "import_ag_charts_community", "import_ag_charts_community", "innerRadius", "import_ag_charts_community", "import_ag_charts_community", "import_ag_charts_community", "acc", "offset", "length", "pattern", "import_ag_charts_community", "import_ag_charts_community", "import_ag_charts_community", "data", "startAngle", "import_ag_charts_community", "_", "import_ag_charts_community", "import_ag_charts_community", "import_ag_charts_community", "import_core", "updatedChartType", "chartComp", "CHARTS_VERSION"]
}
