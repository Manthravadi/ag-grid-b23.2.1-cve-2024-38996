{
  "version": 3,
  "sources": ["../../src/masterDetailModule.ts", "../../src/masterDetail/detailCellRenderer.ts", "../../src/masterDetail/detailCellRendererCtrl.ts", "../../src/masterDetail/detailGridApiService.ts", "../../src/masterDetail/masterDetailApi.ts", "../../src/version.ts"],
  "sourcesContent": ["import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames } from '@ag-grid-community/core';\nimport { EnterpriseCoreModule, GroupCellRenderer, GroupCellRendererCtrl } from '@ag-grid-enterprise/core';\n\nimport { DetailCellRenderer } from './masterDetail/detailCellRenderer';\nimport { DetailCellRendererCtrl } from './masterDetail/detailCellRendererCtrl';\nimport { DetailGridApiService } from './masterDetail/detailGridApiService';\nimport {\n    addDetailGridInfo,\n    forEachDetailGridInfo,\n    getDetailGridInfo,\n    removeDetailGridInfo,\n} from './masterDetail/masterDetailApi';\nimport { VERSION } from './version';\n\nexport const MasterDetailCoreModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.MasterDetailModule}-core`,\n    userComponents: [\n        {\n            name: 'agGroupRowRenderer',\n            classImp: GroupCellRenderer,\n        },\n        {\n            name: 'agGroupCellRenderer',\n            classImp: GroupCellRenderer,\n        },\n        { name: 'agDetailCellRenderer', classImp: DetailCellRenderer },\n    ],\n    controllers: [\n        { name: 'detailCellRenderer', classImp: DetailCellRendererCtrl },\n        { name: 'groupCellRendererCtrl', classImp: GroupCellRendererCtrl },\n    ],\n    dependantModules: [EnterpriseCoreModule],\n};\n\nexport const MasterDetailApiModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.MasterDetailModule}-api`,\n    beans: [DetailGridApiService],\n    apiFunctions: {\n        addDetailGridInfo,\n        removeDetailGridInfo,\n        getDetailGridInfo,\n        forEachDetailGridInfo,\n    },\n    dependantModules: [MasterDetailCoreModule],\n};\n\nexport const MasterDetailModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.MasterDetailModule,\n    dependantModules: [MasterDetailCoreModule],\n};\n", "import type {\n    BeanCollection,\n    Context,\n    GridApi,\n    GridOptions,\n    GridParams,\n    ICellRenderer,\n    IDetailCellRenderer,\n    IDetailCellRendererParams,\n} from '@ag-grid-community/core';\nimport {\n    Component,\n    ModuleRegistry,\n    RefPlaceholder,\n    _cloneObject,\n    _missing,\n    _warnOnce,\n    createGrid,\n} from '@ag-grid-community/core';\n\nimport { DetailCellRendererCtrl } from './detailCellRendererCtrl';\n\nexport class DetailCellRenderer extends Component implements ICellRenderer {\n    private eDetailGrid: HTMLElement = RefPlaceholder;\n\n    private detailApi: GridApi;\n    private params: IDetailCellRendererParams;\n    private ctrl: DetailCellRendererCtrl;\n    private context: Context;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.context = beans.context;\n    }\n\n    public init(params: IDetailCellRendererParams): void {\n        this.params = params;\n        this.selectAndSetTemplate();\n\n        const compProxy: IDetailCellRenderer = {\n            addOrRemoveCssClass: (cssClassName: string, on: boolean) => this.addOrRemoveCssClass(cssClassName, on),\n            addOrRemoveDetailGridCssClass: (cssClassName: string, on: boolean) =>\n                this.eDetailGrid.classList.toggle(cssClassName, on),\n            setDetailGrid: (gridOptions) => this.setDetailGrid(gridOptions),\n            setRowData: (rowData) => this.setRowData(rowData),\n            getGui: () => this.eDetailGrid,\n        };\n\n        this.ctrl = this.createManagedBean(new DetailCellRendererCtrl());\n        this.ctrl.init(compProxy, params);\n    }\n\n    public refresh(): boolean {\n        return this.ctrl && this.ctrl.refresh();\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public override destroy(): void {\n        super.destroy();\n    }\n\n    private selectAndSetTemplate(): void {\n        if (this.params.pinned) {\n            this.setTemplate(/* html*/ `<div class=\"ag-details-row\"></div>`);\n            return;\n        }\n\n        const setDefaultTemplate = () => {\n            this.setTemplate(/* html */ `<div class=\"ag-details-row\" role=\"gridcell\">\n                <div data-ref=\"eDetailGrid\" class=\"ag-details-grid\" role=\"presentation\"></div>\n            </div>`);\n        };\n\n        if (_missing(this.params.template)) {\n            // use default template\n            setDefaultTemplate();\n        } else {\n            // use user provided template\n            if (typeof this.params.template === 'string') {\n                this.setTemplate(this.params.template, []);\n            } else if (typeof this.params.template === 'function') {\n                const templateFunc = this.params.template;\n                const template = templateFunc(this.params);\n                this.setTemplate(template, []);\n            } else {\n                _warnOnce('detailCellRendererParams.template should be function or string');\n                setDefaultTemplate();\n            }\n        }\n\n        if (this.eDetailGrid == null) {\n            _warnOnce(\n                'Reference to eDetailGrid was missing from the details template. ' +\n                    'Please add data-ref=\"eDetailGrid\" to the template.'\n            );\n        }\n    }\n\n    private setDetailGrid(gridOptions: GridOptions): void {\n        if (!this.eDetailGrid) {\n            return;\n        }\n\n        // AG-1715\n        // this is only needed when suppressReactUi=true, once we remove the old way\n        // of doing react, and Master / Details is all native React, then we\n        // can remove this code.\n        const agGridReact = this.context.getBean('agGridReact');\n        const agGridReactCloned = agGridReact ? _cloneObject(agGridReact) : undefined;\n\n        // when we create detail grid, the detail grid needs frameworkComponentWrapper so that\n        // it created child components correctly, ie  Angular detail grid can have Angular cell renderer.\n        // this is only used by Angular and Vue, as React uses native React AG Grid detail grids\n        const frameworkComponentWrapper = this.context.getBean('frameworkComponentWrapper');\n        const frameworkOverrides = this.getFrameworkOverrides();\n\n        const api = createGrid(this.eDetailGrid, gridOptions, {\n            frameworkOverrides,\n            providedBeanInstances: {\n                agGridReact: agGridReactCloned,\n                frameworkComponentWrapper: frameworkComponentWrapper,\n            },\n            modules: ModuleRegistry.__getGridRegisteredModules(this.params.api.getGridId()),\n        } as GridParams);\n\n        this.detailApi = api;\n        this.ctrl.registerDetailWithMaster(api);\n\n        this.addDestroyFunc(() => {\n            api?.destroy();\n        });\n    }\n\n    private setRowData(rowData: any[]): void {\n        // ensure detail grid api still exists (grid may be destroyed when async call tries to set data)\n        this.detailApi && this.detailApi.setGridOption('rowData', rowData);\n    }\n}\n", "import type {\n    BeanCollection,\n    DetailGridInfo,\n    Environment,\n    FocusService,\n    FullWidthRowFocusedEvent,\n    GridApi,\n    IDetailCellRenderer,\n    IDetailCellRendererCtrl,\n    IDetailCellRendererParams,\n    RowNode,\n    RowPositionUtils,\n} from '@ag-grid-community/core';\nimport { BeanStub, _missing, _warnOnce } from '@ag-grid-community/core';\n\nexport class DetailCellRendererCtrl extends BeanStub implements IDetailCellRendererCtrl {\n    private rowPositionUtils: RowPositionUtils;\n    private focusService: FocusService;\n    private environment: Environment;\n\n    public wireBeans(beans: BeanCollection) {\n        this.focusService = beans.focusService;\n        this.rowPositionUtils = beans.rowPositionUtils;\n        this.environment = beans.environment;\n    }\n\n    private params: IDetailCellRendererParams;\n\n    private comp: IDetailCellRenderer;\n\n    private loadRowDataVersion = 0;\n\n    private refreshStrategy: 'rows' | 'everything' | 'nothing';\n\n    public init(comp: IDetailCellRenderer, params: IDetailCellRendererParams): void {\n        this.params = params;\n        this.comp = comp;\n\n        const doNothingBecauseInsidePinnedSection = params.pinned != null;\n        if (doNothingBecauseInsidePinnedSection) {\n            return;\n        }\n\n        this.setAutoHeightClasses();\n        this.setupRefreshStrategy();\n        this.addThemeToDetailGrid();\n        this.createDetailGrid();\n        this.loadRowData();\n\n        this.addManagedEventListeners({ fullWidthRowFocused: this.onFullWidthRowFocused.bind(this) });\n    }\n\n    private onFullWidthRowFocused(e: FullWidthRowFocusedEvent): void {\n        const params = this.params;\n        const row = { rowIndex: params.node.rowIndex!, rowPinned: params.node.rowPinned! };\n        const eventRow = { rowIndex: e.rowIndex!, rowPinned: e.rowPinned! };\n        const isSameRow = this.rowPositionUtils.sameRow(row, eventRow);\n\n        if (!isSameRow) {\n            return;\n        }\n\n        this.focusService.focusInto(this.comp.getGui(), e.fromBelow);\n    }\n\n    private setAutoHeightClasses(): void {\n        const autoHeight = this.gos.get('detailRowAutoHeight');\n\n        const parentClass = autoHeight ? 'ag-details-row-auto-height' : 'ag-details-row-fixed-height';\n        const detailClass = autoHeight ? 'ag-details-grid-auto-height' : 'ag-details-grid-fixed-height';\n\n        this.comp.addOrRemoveCssClass(parentClass, true);\n        this.comp.addOrRemoveDetailGridCssClass(detailClass, true);\n    }\n\n    private setupRefreshStrategy(): void {\n        const providedStrategy = this.params.refreshStrategy;\n\n        const validSelection =\n            providedStrategy == 'everything' || providedStrategy == 'nothing' || providedStrategy == 'rows';\n        if (validSelection) {\n            this.refreshStrategy = providedStrategy;\n            return;\n        }\n\n        if (providedStrategy != null) {\n            _warnOnce(\n                \"invalid cellRendererParams.refreshStrategy = '\" +\n                    providedStrategy +\n                    \"' supplied, defaulting to refreshStrategy = 'rows'.\"\n            );\n        }\n\n        this.refreshStrategy = 'rows';\n    }\n\n    private addThemeToDetailGrid(): void {\n        // this is needed by environment service of the child grid, the class needs to be on\n        // the grid div itself - the browser's CSS on the other hand just inherits from the parent grid theme.\n        for (const themeClass of this.environment.getThemeClasses()) {\n            this.comp.addOrRemoveDetailGridCssClass(themeClass, true);\n        }\n    }\n\n    private createDetailGrid(): void {\n        if (_missing(this.params.detailGridOptions)) {\n            _warnOnce(\n                'could not find detail grid options for master detail, ' +\n                    'please set gridOptions.detailCellRendererParams.detailGridOptions'\n            );\n            return;\n        }\n\n        const autoHeight = this.gos.get('detailRowAutoHeight');\n\n        // we clone the detail grid options, as otherwise it would be shared\n        // across many instances, and that would be a problem because we set\n        // api into gridOptions\n        const gridOptions = { ...this.params.detailGridOptions };\n\n        if (autoHeight) {\n            gridOptions.domLayout = 'autoHeight';\n        }\n\n        this.comp.setDetailGrid(gridOptions);\n    }\n\n    public registerDetailWithMaster(api: GridApi): void {\n        const rowId = this.params.node.id!;\n        const masterGridApi = this.params.api;\n\n        const gridInfo: DetailGridInfo = {\n            id: rowId,\n            api: api,\n        };\n\n        const rowNode = this.params.node as RowNode;\n\n        // register with api if the master api is still alive\n        if (masterGridApi.isDestroyed()) {\n            return;\n        }\n        masterGridApi.addDetailGridInfo(rowId, gridInfo);\n\n        // register with node\n        rowNode.detailGridInfo = gridInfo;\n\n        this.addDestroyFunc(() => {\n            // the gridInfo can be stale if a refresh happens and\n            // a new row is created before the old one is destroyed.\n            if (rowNode.detailGridInfo !== gridInfo) {\n                return;\n            }\n            if (!masterGridApi.isDestroyed()) {\n                masterGridApi.removeDetailGridInfo(rowId); // unregister from api\n            }\n            rowNode.detailGridInfo = null; // unregister from node\n        });\n    }\n\n    private loadRowData(): void {\n        // in case a refresh happens before the last refresh completes (as we depend on async\n        // application logic) we keep track on what the latest call was.\n        this.loadRowDataVersion++;\n        const versionThisCall = this.loadRowDataVersion;\n\n        if (this.params.detailGridOptions?.rowModelType === 'serverSide') {\n            const node = this.params.node as RowNode;\n            node.detailGridInfo?.api?.refreshServerSide({ purge: true });\n            return;\n        }\n\n        const userFunc = this.params.getDetailRowData;\n        if (!userFunc) {\n            _warnOnce(\n                'could not find getDetailRowData for master / detail, ' +\n                    'please set gridOptions.detailCellRendererParams.getDetailRowData'\n            );\n            return;\n        }\n\n        const successCallback = (rowData: any[]) => {\n            const mostRecentCall = this.loadRowDataVersion === versionThisCall;\n            if (mostRecentCall) {\n                this.comp.setRowData(rowData);\n            }\n        };\n\n        const funcParams: any = {\n            node: this.params.node,\n            // we take data from node, rather than params.data\n            // as the data could have been updated with new instance\n            data: this.params.node.data,\n            successCallback: successCallback,\n            context: this.gos.getGridCommonParams().context,\n        };\n        userFunc(funcParams);\n    }\n\n    public refresh(): boolean {\n        const GET_GRID_TO_REFRESH = false;\n        const GET_GRID_TO_DO_NOTHING = true;\n\n        switch (this.refreshStrategy) {\n            // ignore this refresh, make grid think we've refreshed but do nothing\n            case 'nothing':\n                return GET_GRID_TO_DO_NOTHING;\n            // grid will destroy and recreate the cell\n            case 'everything':\n                return GET_GRID_TO_REFRESH;\n        }\n\n        // do the refresh here, and tell the grid to do nothing\n        this.loadRowData();\n        return GET_GRID_TO_DO_NOTHING;\n    }\n}\n", "import type { DetailGridInfo, IDetailGridApiService, NamedBean } from '@ag-grid-community/core';\nimport { BeanStub, _exists, _iterateObject } from '@ag-grid-community/core';\n\nexport class DetailGridApiService extends BeanStub implements NamedBean, IDetailGridApiService {\n    beanName = 'detailGridApiService' as const;\n\n    private detailGridInfoMap: { [id: string]: DetailGridInfo | undefined } = {};\n\n    public addDetailGridInfo(id: string, gridInfo: DetailGridInfo): void {\n        this.detailGridInfoMap[id] = gridInfo;\n    }\n\n    public removeDetailGridInfo(id: string): void {\n        delete this.detailGridInfoMap[id];\n    }\n\n    public getDetailGridInfo(id: string): DetailGridInfo | undefined {\n        return this.detailGridInfoMap[id];\n    }\n\n    public forEachDetailGridInfo(callback: (gridInfo: DetailGridInfo, index: number) => void) {\n        let index = 0;\n        _iterateObject(this.detailGridInfoMap, (id: string, gridInfo: DetailGridInfo) => {\n            // check for undefined, as old references will still be lying around\n            if (_exists(gridInfo)) {\n                callback(gridInfo, index);\n                index++;\n            }\n        });\n    }\n\n    public override destroy(): void {\n        this.detailGridInfoMap = {};\n        super.destroy();\n    }\n}\n", "import type { BeanCollection, DetailGridInfo } from '@ag-grid-community/core';\n\nexport function addDetailGridInfo(beans: BeanCollection, id: string, gridInfo: DetailGridInfo): void {\n    beans.detailGridApiService?.addDetailGridInfo(id, gridInfo);\n}\n\nexport function removeDetailGridInfo(beans: BeanCollection, id: string): void {\n    beans.detailGridApiService?.removeDetailGridInfo(id);\n}\n\nexport function getDetailGridInfo(beans: BeanCollection, id: string): DetailGridInfo | undefined {\n    return beans.detailGridApiService?.getDetailGridInfo(id);\n}\n\nexport function forEachDetailGridInfo(\n    beans: BeanCollection,\n    callback: (gridInfo: DetailGridInfo, index: number) => void\n) {\n    beans.detailGridApiService?.forEachDetailGridInfo(callback);\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.3.1';\n"],
  "mappings": ";AACA,SAAS,mBAAmB;AAC5B,SAAS,sBAAsB,mBAAmB,6BAA6B;;;ACQ/E;AAAA,EACI;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAAA;AAAA,EACA,aAAAC;AAAA,EACA;AAAA,OACG;;;ACLP,SAAS,UAAU,UAAU,iBAAiB;AAEvC,IAAM,yBAAN,cAAqC,SAA4C;AAAA,EAAjF;AAAA;AAeH,SAAQ,qBAAqB;AAAA;AAAA,EAVtB,UAAU,OAAuB;AACpC,SAAK,eAAe,MAAM;AAC1B,SAAK,mBAAmB,MAAM;AAC9B,SAAK,cAAc,MAAM;AAAA,EAC7B;AAAA,EAUO,KAAK,MAA2B,QAAyC;AAC5E,SAAK,SAAS;AACd,SAAK,OAAO;AAEZ,UAAM,sCAAsC,OAAO,UAAU;AAC7D,QAAI,qCAAqC;AACrC;AAAA,IACJ;AAEA,SAAK,qBAAqB;AAC1B,SAAK,qBAAqB;AAC1B,SAAK,qBAAqB;AAC1B,SAAK,iBAAiB;AACtB,SAAK,YAAY;AAEjB,SAAK,yBAAyB,EAAE,qBAAqB,KAAK,sBAAsB,KAAK,IAAI,EAAE,CAAC;AAAA,EAChG;AAAA,EAEQ,sBAAsB,GAAmC;AAC7D,UAAM,SAAS,KAAK;AACpB,UAAM,MAAM,EAAE,UAAU,OAAO,KAAK,UAAW,WAAW,OAAO,KAAK,UAAW;AACjF,UAAM,WAAW,EAAE,UAAU,EAAE,UAAW,WAAW,EAAE,UAAW;AAClE,UAAM,YAAY,KAAK,iBAAiB,QAAQ,KAAK,QAAQ;AAE7D,QAAI,CAAC,WAAW;AACZ;AAAA,IACJ;AAEA,SAAK,aAAa,UAAU,KAAK,KAAK,OAAO,GAAG,EAAE,SAAS;AAAA,EAC/D;AAAA,EAEQ,uBAA6B;AACjC,UAAM,aAAa,KAAK,IAAI,IAAI,qBAAqB;AAErD,UAAM,cAAc,aAAa,+BAA+B;AAChE,UAAM,cAAc,aAAa,gCAAgC;AAEjE,SAAK,KAAK,oBAAoB,aAAa,IAAI;AAC/C,SAAK,KAAK,8BAA8B,aAAa,IAAI;AAAA,EAC7D;AAAA,EAEQ,uBAA6B;AACjC,UAAM,mBAAmB,KAAK,OAAO;AAErC,UAAM,iBACF,oBAAoB,gBAAgB,oBAAoB,aAAa,oBAAoB;AAC7F,QAAI,gBAAgB;AAChB,WAAK,kBAAkB;AACvB;AAAA,IACJ;AAEA,QAAI,oBAAoB,MAAM;AAC1B;AAAA,QACI,mDACI,mBACA;AAAA,MACR;AAAA,IACJ;AAEA,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EAEQ,uBAA6B;AAGjC,eAAW,cAAc,KAAK,YAAY,gBAAgB,GAAG;AACzD,WAAK,KAAK,8BAA8B,YAAY,IAAI;AAAA,IAC5D;AAAA,EACJ;AAAA,EAEQ,mBAAyB;AAC7B,QAAI,SAAS,KAAK,OAAO,iBAAiB,GAAG;AACzC;AAAA,QACI;AAAA,MAEJ;AACA;AAAA,IACJ;AAEA,UAAM,aAAa,KAAK,IAAI,IAAI,qBAAqB;AAKrD,UAAM,cAAc,EAAE,GAAG,KAAK,OAAO,kBAAkB;AAEvD,QAAI,YAAY;AACZ,kBAAY,YAAY;AAAA,IAC5B;AAEA,SAAK,KAAK,cAAc,WAAW;AAAA,EACvC;AAAA,EAEO,yBAAyB,KAAoB;AAChD,UAAM,QAAQ,KAAK,OAAO,KAAK;AAC/B,UAAM,gBAAgB,KAAK,OAAO;AAElC,UAAM,WAA2B;AAAA,MAC7B,IAAI;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,UAAU,KAAK,OAAO;AAG5B,QAAI,cAAc,YAAY,GAAG;AAC7B;AAAA,IACJ;AACA,kBAAc,kBAAkB,OAAO,QAAQ;AAG/C,YAAQ,iBAAiB;AAEzB,SAAK,eAAe,MAAM;AAGtB,UAAI,QAAQ,mBAAmB,UAAU;AACrC;AAAA,MACJ;AACA,UAAI,CAAC,cAAc,YAAY,GAAG;AAC9B,sBAAc,qBAAqB,KAAK;AAAA,MAC5C;AACA,cAAQ,iBAAiB;AAAA,IAC7B,CAAC;AAAA,EACL;AAAA,EAEQ,cAAoB;AAGxB,SAAK;AACL,UAAM,kBAAkB,KAAK;AAE7B,QAAI,KAAK,OAAO,mBAAmB,iBAAiB,cAAc;AAC9D,YAAM,OAAO,KAAK,OAAO;AACzB,WAAK,gBAAgB,KAAK,kBAAkB,EAAE,OAAO,KAAK,CAAC;AAC3D;AAAA,IACJ;AAEA,UAAM,WAAW,KAAK,OAAO;AAC7B,QAAI,CAAC,UAAU;AACX;AAAA,QACI;AAAA,MAEJ;AACA;AAAA,IACJ;AAEA,UAAM,kBAAkB,CAAC,YAAmB;AACxC,YAAM,iBAAiB,KAAK,uBAAuB;AACnD,UAAI,gBAAgB;AAChB,aAAK,KAAK,WAAW,OAAO;AAAA,MAChC;AAAA,IACJ;AAEA,UAAM,aAAkB;AAAA,MACpB,MAAM,KAAK,OAAO;AAAA;AAAA;AAAA,MAGlB,MAAM,KAAK,OAAO,KAAK;AAAA,MACvB;AAAA,MACA,SAAS,KAAK,IAAI,oBAAoB,EAAE;AAAA,IAC5C;AACA,aAAS,UAAU;AAAA,EACvB;AAAA,EAEO,UAAmB;AACtB,UAAM,sBAAsB;AAC5B,UAAM,yBAAyB;AAE/B,YAAQ,KAAK,iBAAiB;AAAA,MAE1B,KAAK;AACD,eAAO;AAAA,MAEX,KAAK;AACD,eAAO;AAAA,IACf;AAGA,SAAK,YAAY;AACjB,WAAO;AAAA,EACX;AACJ;;;ADlMO,IAAM,qBAAN,cAAiC,UAAmC;AAAA,EAApE;AAAA;AACH,SAAQ,cAA2B;AAAA;AAAA,EAO5B,UAAU,OAA6B;AAC1C,SAAK,UAAU,MAAM;AAAA,EACzB;AAAA,EAEO,KAAK,QAAyC;AACjD,SAAK,SAAS;AACd,SAAK,qBAAqB;AAE1B,UAAM,YAAiC;AAAA,MACnC,qBAAqB,CAAC,cAAsB,OAAgB,KAAK,oBAAoB,cAAc,EAAE;AAAA,MACrG,+BAA+B,CAAC,cAAsB,OAClD,KAAK,YAAY,UAAU,OAAO,cAAc,EAAE;AAAA,MACtD,eAAe,CAAC,gBAAgB,KAAK,cAAc,WAAW;AAAA,MAC9D,YAAY,CAAC,YAAY,KAAK,WAAW,OAAO;AAAA,MAChD,QAAQ,MAAM,KAAK;AAAA,IACvB;AAEA,SAAK,OAAO,KAAK,kBAAkB,IAAI,uBAAuB,CAAC;AAC/D,SAAK,KAAK,KAAK,WAAW,MAAM;AAAA,EACpC;AAAA,EAEO,UAAmB;AACtB,WAAO,KAAK,QAAQ,KAAK,KAAK,QAAQ;AAAA,EAC1C;AAAA;AAAA;AAAA,EAIgB,UAAgB;AAC5B,UAAM,QAAQ;AAAA,EAClB;AAAA,EAEQ,uBAA6B;AACjC,QAAI,KAAK,OAAO,QAAQ;AACpB,WAAK;AAAA;AAAA,QAAsB;AAAA,MAAoC;AAC/D;AAAA,IACJ;AAEA,UAAM,qBAAqB,MAAM;AAC7B,WAAK;AAAA;AAAA,QAAuB;AAAA;AAAA;AAAA,MAErB;AAAA,IACX;AAEA,QAAIC,UAAS,KAAK,OAAO,QAAQ,GAAG;AAEhC,yBAAmB;AAAA,IACvB,OAAO;AAEH,UAAI,OAAO,KAAK,OAAO,aAAa,UAAU;AAC1C,aAAK,YAAY,KAAK,OAAO,UAAU,CAAC,CAAC;AAAA,MAC7C,WAAW,OAAO,KAAK,OAAO,aAAa,YAAY;AACnD,cAAM,eAAe,KAAK,OAAO;AACjC,cAAM,WAAW,aAAa,KAAK,MAAM;AACzC,aAAK,YAAY,UAAU,CAAC,CAAC;AAAA,MACjC,OAAO;AACH,QAAAC,WAAU,gEAAgE;AAC1E,2BAAmB;AAAA,MACvB;AAAA,IACJ;AAEA,QAAI,KAAK,eAAe,MAAM;AAC1B,MAAAA;AAAA,QACI;AAAA,MAEJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEQ,cAAc,aAAgC;AAClD,QAAI,CAAC,KAAK,aAAa;AACnB;AAAA,IACJ;AAMA,UAAM,cAAc,KAAK,QAAQ,QAAQ,aAAa;AACtD,UAAM,oBAAoB,cAAc,aAAa,WAAW,IAAI;AAKpE,UAAM,4BAA4B,KAAK,QAAQ,QAAQ,2BAA2B;AAClF,UAAM,qBAAqB,KAAK,sBAAsB;AAEtD,UAAM,MAAM,WAAW,KAAK,aAAa,aAAa;AAAA,MAClD;AAAA,MACA,uBAAuB;AAAA,QACnB,aAAa;AAAA,QACb;AAAA,MACJ;AAAA,MACA,SAAS,eAAe,2BAA2B,KAAK,OAAO,IAAI,UAAU,CAAC;AAAA,IAClF,CAAe;AAEf,SAAK,YAAY;AACjB,SAAK,KAAK,yBAAyB,GAAG;AAEtC,SAAK,eAAe,MAAM;AACtB,WAAK,QAAQ;AAAA,IACjB,CAAC;AAAA,EACL;AAAA,EAEQ,WAAW,SAAsB;AAErC,SAAK,aAAa,KAAK,UAAU,cAAc,WAAW,OAAO;AAAA,EACrE;AACJ;;;AExIA,SAAS,YAAAC,WAAU,SAAS,sBAAsB;AAE3C,IAAM,uBAAN,cAAmCA,UAAqD;AAAA,EAAxF;AAAA;AACH,oBAAW;AAEX,SAAQ,oBAAkE,CAAC;AAAA;AAAA,EAEpE,kBAAkB,IAAY,UAAgC;AACjE,SAAK,kBAAkB,EAAE,IAAI;AAAA,EACjC;AAAA,EAEO,qBAAqB,IAAkB;AAC1C,WAAO,KAAK,kBAAkB,EAAE;AAAA,EACpC;AAAA,EAEO,kBAAkB,IAAwC;AAC7D,WAAO,KAAK,kBAAkB,EAAE;AAAA,EACpC;AAAA,EAEO,sBAAsB,UAA6D;AACtF,QAAI,QAAQ;AACZ,mBAAe,KAAK,mBAAmB,CAAC,IAAY,aAA6B;AAE7E,UAAI,QAAQ,QAAQ,GAAG;AACnB,iBAAS,UAAU,KAAK;AACxB;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEgB,UAAgB;AAC5B,SAAK,oBAAoB,CAAC;AAC1B,UAAM,QAAQ;AAAA,EAClB;AACJ;;;ACjCO,SAAS,kBAAkB,OAAuB,IAAY,UAAgC;AACjG,QAAM,sBAAsB,kBAAkB,IAAI,QAAQ;AAC9D;AAEO,SAAS,qBAAqB,OAAuB,IAAkB;AAC1E,QAAM,sBAAsB,qBAAqB,EAAE;AACvD;AAEO,SAAS,kBAAkB,OAAuB,IAAwC;AAC7F,SAAO,MAAM,sBAAsB,kBAAkB,EAAE;AAC3D;AAEO,SAAS,sBACZ,OACA,UACF;AACE,QAAM,sBAAsB,sBAAsB,QAAQ;AAC9D;;;AClBO,IAAM,UAAU;;;ALchB,IAAM,yBAAiC;AAAA,EAC1C,SAAS;AAAA,EACT,YAAY,GAAG,YAAY,kBAAkB;AAAA,EAC7C,gBAAgB;AAAA,IACZ;AAAA,MACI,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,EAAE,MAAM,wBAAwB,UAAU,mBAAmB;AAAA,EACjE;AAAA,EACA,aAAa;AAAA,IACT,EAAE,MAAM,sBAAsB,UAAU,uBAAuB;AAAA,IAC/D,EAAE,MAAM,yBAAyB,UAAU,sBAAsB;AAAA,EACrE;AAAA,EACA,kBAAkB,CAAC,oBAAoB;AAC3C;AAEO,IAAM,wBAAgC;AAAA,EACzC,SAAS;AAAA,EACT,YAAY,GAAG,YAAY,kBAAkB;AAAA,EAC7C,OAAO,CAAC,oBAAoB;AAAA,EAC5B,cAAc;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAAA,EACA,kBAAkB,CAAC,sBAAsB;AAC7C;AAEO,IAAM,qBAA6B;AAAA,EACtC,SAAS;AAAA,EACT,YAAY,YAAY;AAAA,EACxB,kBAAkB,CAAC,sBAAsB;AAC7C;",
  "names": ["_missing", "_warnOnce", "_missing", "_warnOnce", "BeanStub"]
}
