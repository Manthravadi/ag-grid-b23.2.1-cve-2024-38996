{
  "version": 3,
  "sources": ["../../src/multiFilterModule.ts", "../../src/multiFilter/multiFilter.ts", "../../src/multiFilter/multiFloatingFilter.ts", "../../src/version.ts"],
  "sourcesContent": ["import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames, _ColumnFilterModule, _ReadOnlyFloatingFilterModule } from '@ag-grid-community/core';\nimport { AgMenuItemRenderer, EnterpriseCoreModule } from '@ag-grid-enterprise/core';\n\nimport { MultiFilter } from './multiFilter/multiFilter';\nimport { MultiFloatingFilterComp } from './multiFilter/multiFloatingFilter';\nimport { VERSION } from './version';\n\nexport const MultiFilterCoreModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.MultiFilterModule}-core`,\n    userComponents: [\n        { name: 'agMultiColumnFilter', classImp: MultiFilter },\n        {\n            name: 'agMenuItem',\n            classImp: AgMenuItemRenderer,\n        },\n    ],\n    dependantModules: [EnterpriseCoreModule, _ColumnFilterModule],\n};\n\nconst MultiFloatingFilterModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-enterprise/multi-floating-filter',\n    userComponents: [{ name: 'agMultiColumnFloatingFilter', classImp: MultiFloatingFilterComp }],\n    dependantModules: [MultiFilterCoreModule, _ReadOnlyFloatingFilterModule],\n};\n\nexport const MultiFilterModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.MultiFilterModule,\n    dependantModules: [MultiFilterCoreModule, MultiFloatingFilterModule],\n};\n", "import type {\n    AgColumn,\n    BeanCollection,\n    ContainerType,\n    FilterManager,\n    IAfterGuiAttachedParams,\n    IDoesFilterPassParams,\n    IFilterComp,\n    IFilterDef,\n    IFilterParams,\n    IMultiFilter,\n    IMultiFilterDef,\n    IMultiFilterModel,\n    MultiFilterParams,\n    ProvidedFilterModel,\n    RowNode,\n    UserComponentFactory,\n} from '@ag-grid-community/core';\nimport {\n    AgPromise,\n    KeyCode,\n    ProvidedFilter,\n    TabGuardComp,\n    _forEachReverse,\n    _loadTemplate,\n    _removeFromArray,\n} from '@ag-grid-community/core';\nimport type { MenuItemActivatedEvent } from '@ag-grid-enterprise/core';\nimport { AgGroupComponent, AgMenuItemComponent, AgMenuItemRenderer } from '@ag-grid-enterprise/core';\n\nexport class MultiFilter extends TabGuardComp implements IFilterComp, IMultiFilter {\n    private filterManager?: FilterManager;\n    private userComponentFactory: UserComponentFactory;\n\n    public wireBeans(beans: BeanCollection) {\n        this.filterManager = beans.filterManager;\n        this.userComponentFactory = beans.userComponentFactory;\n    }\n\n    private params: MultiFilterParams;\n    private filterDefs: IMultiFilterDef[] = [];\n    private filters: IFilterComp[] | null = [];\n    private guiDestroyFuncs: (() => void)[] = [];\n    // this could be the accordion/sub menu element depending on the display type\n    private filterGuis: HTMLElement[] = [];\n    private column: AgColumn;\n    private filterChangedCallback: ((additionalEventAttributes?: any) => void) | null;\n    private lastOpenedInContainer?: ContainerType;\n    private activeFilterIndices: number[] = [];\n    private lastActivatedMenuItem: AgMenuItemComponent | null = null;\n    private hidePopup?: () => void;\n\n    private afterFiltersReadyFuncs: (() => void)[] = [];\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-multi-filter ag-menu-list-compact\"></div>`);\n    }\n\n    public postConstruct() {\n        this.initialiseTabGuard({\n            onFocusIn: (e) => this.onFocusIn(e),\n        });\n    }\n\n    public static getFilterDefs(params: MultiFilterParams): IMultiFilterDef[] {\n        const { filters } = params;\n\n        return filters && filters.length > 0\n            ? filters\n            : [{ filter: 'agTextColumnFilter' }, { filter: 'agSetColumnFilter' }];\n    }\n\n    public init(params: MultiFilterParams): AgPromise<void> {\n        this.params = params;\n        this.filterDefs = MultiFilter.getFilterDefs(params);\n\n        const { column, filterChangedCallback } = params;\n\n        this.column = column as AgColumn;\n        this.filterChangedCallback = filterChangedCallback;\n\n        const filterPromises: AgPromise<IFilterComp>[] = [];\n\n        this.filterDefs.forEach((filterDef, index) => {\n            const filterPromise = this.createFilter(filterDef, index);\n\n            if (filterPromise != null) {\n                filterPromises.push(filterPromise);\n            }\n        });\n\n        // we have to refresh the GUI here to ensure that Angular components are not rendered in odd places\n        return new AgPromise<void>((resolve) => {\n            AgPromise.all(filterPromises).then((filters) => {\n                this.filters = filters as IFilterComp[];\n                this.refreshGui('columnMenu').then(() => {\n                    resolve();\n                });\n            });\n        }).then(() => {\n            this.afterFiltersReadyFuncs.forEach((f) => f());\n            this.afterFiltersReadyFuncs.length = 0;\n        });\n    }\n\n    private refreshGui(container: ContainerType): AgPromise<void> {\n        if (container === this.lastOpenedInContainer) {\n            return AgPromise.resolve();\n        }\n\n        this.tabGuardFeature.removeAllChildrenExceptTabGuards();\n        this.destroyChildren();\n\n        return AgPromise.all(\n            this.filters!.map((filter, index) => {\n                const filterDef = this.filterDefs[index];\n                const filterTitle = this.getFilterTitle(filter, filterDef);\n                let filterGuiPromise: AgPromise<HTMLElement>;\n\n                if (filterDef.display === 'subMenu' && container !== 'toolPanel') {\n                    // prevent sub-menu being used in tool panel\n                    filterGuiPromise = this.insertFilterMenu(filter, filterTitle).then((menuItem) =>\n                        menuItem!.getGui()\n                    );\n                } else if (filterDef.display === 'subMenu' || filterDef.display === 'accordion') {\n                    // sub-menus should appear as groups in the tool panel\n                    const group = this.insertFilterGroup(filter, filterTitle);\n\n                    filterGuiPromise = AgPromise.resolve(group.getGui());\n                } else {\n                    // display inline\n                    filterGuiPromise = AgPromise.resolve(filter.getGui());\n                }\n\n                return filterGuiPromise;\n            })\n        ).then((filterGuis) => {\n            filterGuis!.forEach((filterGui, index) => {\n                if (index > 0) {\n                    this.appendChild(_loadTemplate(/* html */ `<div class=\"ag-filter-separator\"></div>`));\n                }\n                this.appendChild(filterGui!);\n            });\n            this.filterGuis = filterGuis as HTMLElement[];\n            this.lastOpenedInContainer = container;\n        });\n    }\n\n    private getFilterTitle(filter: IFilterComp, filterDef: IMultiFilterDef): string {\n        if (filterDef.title != null) {\n            return filterDef.title;\n        }\n\n        return filter instanceof ProvidedFilter ? filter.getFilterTitle() : 'Filter';\n    }\n\n    private destroyChildren() {\n        this.guiDestroyFuncs.forEach((func) => func());\n        this.guiDestroyFuncs.length = 0;\n        this.filterGuis.length = 0;\n    }\n\n    private insertFilterMenu(filter: IFilterComp, name: string): AgPromise<AgMenuItemComponent> {\n        const menuItem = this.createBean(new AgMenuItemComponent());\n        return menuItem\n            .init({\n                menuItemDef: {\n                    name,\n                    subMenu: [],\n                    cssClasses: ['ag-multi-filter-menu-item'],\n                    menuItem: AgMenuItemRenderer,\n                    menuItemParams: {\n                        cssClassPrefix: 'ag-compact-menu-option',\n                        isCompact: true,\n                    },\n                },\n                level: 0,\n                isAnotherSubMenuOpen: () => false,\n                childComponent: filter,\n                contextParams: {\n                    column: null,\n                    node: null,\n                    value: null,\n                },\n            })\n            .then(() => {\n                menuItem.setParentComponent(this);\n\n                this.guiDestroyFuncs.push(() => this.destroyBean(menuItem));\n\n                this.addManagedListeners(menuItem, {\n                    menuItemActivated: (event: MenuItemActivatedEvent) => {\n                        if (this.lastActivatedMenuItem && this.lastActivatedMenuItem !== event.menuItem) {\n                            this.lastActivatedMenuItem.deactivate();\n                        }\n\n                        this.lastActivatedMenuItem = event.menuItem;\n                    },\n                });\n\n                const menuItemGui = menuItem.getGui();\n                menuItem.addManagedElementListeners(menuItemGui, {\n                    // `AgMenuList` normally handles keyboard navigation, so need to do here\n                    keydown: (e: KeyboardEvent) => {\n                        const { key } = e;\n                        switch (key) {\n                            case KeyCode.UP:\n                            case KeyCode.RIGHT:\n                            case KeyCode.DOWN:\n                            case KeyCode.LEFT:\n                                e.preventDefault();\n                                if (key === KeyCode.RIGHT) {\n                                    menuItem.openSubMenu(true);\n                                }\n                                break;\n                        }\n                    },\n                    focusin: () => menuItem.activate(),\n                    focusout: () => {\n                        if (!menuItem.isSubMenuOpen() && !menuItem.isSubMenuOpening()) {\n                            menuItem.deactivate();\n                        }\n                    },\n                });\n\n                return menuItem;\n            });\n    }\n\n    private insertFilterGroup(filter: IFilterComp, title: string): AgGroupComponent {\n        const group = this.createBean(\n            new AgGroupComponent({\n                title,\n                cssIdentifier: 'multi-filter',\n            })\n        );\n\n        this.guiDestroyFuncs.push(() => this.destroyBean(group));\n\n        group.addItem(filter.getGui());\n        group.toggleGroupExpand(false);\n\n        if (filter.afterGuiAttached) {\n            group.addManagedListeners(group, {\n                expanded: () =>\n                    filter.afterGuiAttached!({\n                        container: this.lastOpenedInContainer!,\n                        suppressFocus: true,\n                        hidePopup: this.hidePopup,\n                    }),\n            });\n        }\n\n        return group;\n    }\n\n    public isFilterActive(): boolean {\n        return this.filters!.some((filter) => filter.isFilterActive());\n    }\n\n    public getLastActiveFilterIndex(): number | null {\n        return this.activeFilterIndices.length > 0\n            ? this.activeFilterIndices[this.activeFilterIndices.length - 1]\n            : null;\n    }\n\n    public doesFilterPass(params: IDoesFilterPassParams, filterToSkip?: IFilterComp): boolean {\n        let rowPasses = true;\n\n        this.filters!.forEach((filter) => {\n            if (!rowPasses || filter === filterToSkip || !filter.isFilterActive()) {\n                return;\n            }\n\n            rowPasses = filter.doesFilterPass(params);\n        });\n\n        return rowPasses;\n    }\n\n    private getFilterType(): 'multi' {\n        return 'multi';\n    }\n\n    public getModelFromUi(): IMultiFilterModel | null {\n        const model: IMultiFilterModel = {\n            filterType: this.getFilterType(),\n            filterModels: this.filters!.map((filter) => {\n                const providedFilter = filter as ProvidedFilter<IMultiFilterModel, unknown>;\n\n                if (typeof providedFilter.getModelFromUi === 'function') {\n                    return providedFilter.getModelFromUi();\n                }\n\n                return null;\n            }),\n        };\n\n        return model;\n    }\n\n    public getModel(): ProvidedFilterModel | null {\n        if (!this.isFilterActive()) {\n            return null;\n        }\n\n        const model: IMultiFilterModel = {\n            filterType: this.getFilterType(),\n            filterModels: this.filters!.map((filter) => {\n                if (filter.isFilterActive()) {\n                    return filter.getModel();\n                }\n\n                return null;\n            }),\n        };\n\n        return model;\n    }\n\n    public setModel(model: IMultiFilterModel | null): AgPromise<void> {\n        const setFilterModel = (filter: IFilterComp, filterModel: any) => {\n            return new AgPromise<void>((resolve) => {\n                const promise = filter.setModel(filterModel);\n                promise ? promise.then(() => resolve()) : resolve();\n            });\n        };\n\n        let promises: AgPromise<void>[] = [];\n\n        if (model == null) {\n            promises = this.filters!.map((filter: IFilterComp, index: number) => {\n                const res = setFilterModel(filter, null).then(() => {\n                    this.updateActiveList(index);\n                });\n                return res;\n            })!;\n        } else {\n            this.filters!.forEach((filter, index) => {\n                const filterModel = model.filterModels!.length > index ? model.filterModels![index] : null;\n                const res = setFilterModel(filter, filterModel).then(() => {\n                    this.updateActiveList(index);\n                });\n                promises.push(res);\n            });\n        }\n\n        return AgPromise.all(promises).then(() => {});\n    }\n\n    public applyModel(source: 'api' | 'ui' | 'rowDataUpdated' = 'api'): boolean {\n        let result = false;\n\n        this.filters!.forEach((filter) => {\n            if (filter instanceof ProvidedFilter) {\n                result = filter.applyModel(source) || result;\n            }\n        });\n\n        return result;\n    }\n\n    public getChildFilterInstance(index: number): IFilterComp | undefined {\n        return this.filters![index];\n    }\n\n    public afterGuiAttached(params?: IAfterGuiAttachedParams): void {\n        let refreshPromise: AgPromise<void>;\n        if (params) {\n            this.hidePopup = params.hidePopup;\n            refreshPromise = this.refreshGui(params.container!);\n        } else {\n            this.hidePopup = undefined;\n            refreshPromise = AgPromise.resolve();\n        }\n\n        refreshPromise.then(() => {\n            const { filterDefs } = this;\n            let hasFocused = false;\n            if (filterDefs) {\n                _forEachReverse(filterDefs!, (filterDef, index) => {\n                    const isFirst = index === 0;\n                    const suppressFocus =\n                        params?.suppressFocus || !isFirst || (filterDef.display && filterDef.display !== 'inline');\n                    const afterGuiAttachedParams = { ...(params ?? {}), suppressFocus };\n                    const filter = this.filters?.[index];\n                    if (filter) {\n                        this.executeFunctionIfExistsOnFilter(filter, 'afterGuiAttached', afterGuiAttachedParams);\n                        if (isFirst) {\n                            hasFocused = true;\n                        }\n                    }\n                    if (isFirst && suppressFocus) {\n                        // focus the first filter container instead (accordion/sub menu)\n                        const filterGui = this.filterGuis[index];\n                        if (filterGui) {\n                            filterGui.focus();\n                            hasFocused = true;\n                        }\n                    }\n                });\n            }\n\n            const eDocument = this.gos.getDocument();\n            const activeEl = this.gos.getActiveDomElement();\n\n            // if we haven't focused the first item in the filter, we might run into two scenarios:\n            // 1 - we are loading the filter for the first time and the component isn't ready,\n            //     which means the document will have focus.\n            // 2 - The focus will be somewhere inside the component due to auto focus\n            // In both cases we need to force the focus somewhere valid but outside the filter.\n            if (!hasFocused && (!activeEl || activeEl === eDocument.body || this.getGui().contains(activeEl))) {\n                // reset focus to the top of the container, and blur\n                this.forceFocusOutOfContainer(true);\n            }\n        });\n    }\n\n    public afterGuiDetached(): void {\n        this.executeFunctionIfExists('afterGuiDetached');\n    }\n\n    public onAnyFilterChanged(): void {\n        this.executeFunctionIfExists('onAnyFilterChanged');\n    }\n\n    public onNewRowsLoaded(): void {\n        this.executeFunctionIfExists('onNewRowsLoaded');\n    }\n\n    public override destroy(): void {\n        this.filters!.forEach((filter) => this.destroyBean(filter));\n\n        this.filters!.length = 0;\n        this.destroyChildren();\n        this.hidePopup = undefined;\n\n        super.destroy();\n    }\n\n    private executeFunctionIfExists<T extends IFilterComp>(name: keyof T, ...params: any[]): void {\n        // The first filter is always the \"dominant\" one. By iterating in reverse order we ensure the first filter\n        // always gets the last say\n        _forEachReverse(this.filters!, (filter) => {\n            this.executeFunctionIfExistsOnFilter(filter as T, name, params);\n        });\n    }\n\n    private executeFunctionIfExistsOnFilter<T extends IFilterComp>(filter: T, name: keyof T, ...params: any[]): void {\n        const func = filter[name];\n\n        if (typeof func === 'function') {\n            func.apply(filter, params);\n        }\n    }\n\n    private createFilter(filterDef: IFilterDef, index: number): AgPromise<IFilterComp> | null {\n        const { filterModifiedCallback, doesRowPassOtherFilter } = this.params;\n\n        let filterInstance: IFilterComp;\n\n        const filterParams: IFilterParams = {\n            ...this.filterManager!.createFilterParams(this.column, this.column.getColDef()),\n            filterModifiedCallback,\n            filterChangedCallback: (additionalEventAttributes) => {\n                this.executeWhenAllFiltersReady(() => this.filterChanged(index, additionalEventAttributes));\n            },\n            doesRowPassOtherFilter: (node: RowNode) =>\n                doesRowPassOtherFilter(node) && this.doesFilterPass({ node, data: node.data }, filterInstance),\n        };\n\n        const compDetails = this.userComponentFactory.getFilterDetails(filterDef, filterParams, 'agTextColumnFilter');\n        if (!compDetails) {\n            return null;\n        }\n        const filterPromise = compDetails.newAgStackInstance();\n\n        if (filterPromise) {\n            filterPromise.then((filter) => (filterInstance = filter!));\n        }\n\n        return filterPromise;\n    }\n\n    private executeWhenAllFiltersReady(action: () => void): void {\n        if (this.filters && this.filters.length > 0) {\n            action();\n        } else {\n            this.afterFiltersReadyFuncs.push(action);\n        }\n    }\n\n    private updateActiveList(index: number): void {\n        const changedFilter = this.filters![index];\n\n        _removeFromArray(this.activeFilterIndices, index);\n\n        if (changedFilter.isFilterActive()) {\n            this.activeFilterIndices.push(index);\n        }\n    }\n\n    private filterChanged(index: number, additionalEventAttributes: any): void {\n        this.updateActiveList(index);\n\n        this.filterChangedCallback!(additionalEventAttributes);\n        const changedFilter = this.filters![index];\n\n        this.filters!.forEach((filter) => {\n            if (filter === changedFilter) {\n                return;\n            }\n\n            if (typeof filter.onAnyFilterChanged === 'function') {\n                filter.onAnyFilterChanged();\n            }\n        });\n    }\n\n    protected onFocusIn(e: FocusEvent): void {\n        if (\n            this.lastActivatedMenuItem != null &&\n            !this.lastActivatedMenuItem.getGui().contains(e.target as HTMLElement)\n        ) {\n            this.lastActivatedMenuItem.deactivate();\n            this.lastActivatedMenuItem = null;\n        }\n    }\n\n    getModelAsString(model: IMultiFilterModel): string {\n        if (!this.filters || !model?.filterModels?.length) {\n            return '';\n        }\n        const lastActiveIndex = this.getLastActiveFilterIndex() ?? 0;\n        const activeFilter = this.filters[lastActiveIndex];\n        return activeFilter.getModelAsString?.(model.filterModels[lastActiveIndex]) ?? '';\n    }\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    FilterChangedEvent,\n    FilterManager,\n    IFilter,\n    IFilterDef,\n    IFloatingFilterComp,\n    IFloatingFilterParams,\n    IMultiFilterModel,\n    MultiFilterParams,\n    UserCompDetails,\n    UserComponentFactory,\n} from '@ag-grid-community/core';\nimport {\n    AgPromise,\n    Component,\n    _clearElement,\n    _mergeDeep,\n    _setDisplayed,\n    getDefaultFloatingFilterType,\n} from '@ag-grid-community/core';\n\nimport { MultiFilter } from './multiFilter';\n\nexport class MultiFloatingFilterComp extends Component implements IFloatingFilterComp<MultiFilter> {\n    private userComponentFactory: UserComponentFactory;\n    private filterManager?: FilterManager;\n\n    public wireBeans(beans: BeanCollection) {\n        this.userComponentFactory = beans.userComponentFactory;\n        this.filterManager = beans.filterManager;\n    }\n\n    private floatingFilters: IFloatingFilterComp[] = [];\n    private compDetailsList: UserCompDetails[] = [];\n    private params: IFloatingFilterParams<MultiFilter>;\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-multi-floating-filter ag-floating-filter-input\"></div>`);\n    }\n\n    public init(params: IFloatingFilterParams<MultiFilter>): AgPromise<void> {\n        this.params = params;\n\n        const { compDetailsList } = this.getCompDetailsList(params);\n        return this.setParams(compDetailsList);\n    }\n\n    private setParams(compDetailsList: UserCompDetails[]): AgPromise<void> {\n        const floatingFilterPromises: AgPromise<IFloatingFilterComp>[] = [];\n\n        compDetailsList.forEach((compDetails) => {\n            const floatingFilterPromise = compDetails?.newAgStackInstance();\n\n            if (floatingFilterPromise != null) {\n                this.compDetailsList.push(compDetails!);\n                floatingFilterPromises.push(floatingFilterPromise);\n            }\n        });\n\n        return AgPromise.all(floatingFilterPromises).then((floatingFilters) => {\n            floatingFilters!.forEach((floatingFilter, index) => {\n                this.floatingFilters.push(floatingFilter!);\n\n                const gui = floatingFilter!.getGui();\n\n                this.appendChild(gui);\n\n                if (index > 0) {\n                    _setDisplayed(gui, false);\n                }\n            });\n        });\n    }\n\n    public onParamsUpdated(params: IFloatingFilterParams<MultiFilter>): void {\n        this.refresh(params);\n    }\n\n    public refresh(params: IFloatingFilterParams<MultiFilter>): void {\n        this.params = params;\n        const { compDetailsList: newCompDetailsList, floatingFilterParamsList } = this.getCompDetailsList(params);\n        const allFloatingFilterCompsUnchanged =\n            newCompDetailsList.length === this.compDetailsList.length &&\n            newCompDetailsList.every(\n                (newCompDetails, index) =>\n                    !this.filterManager?.areFilterCompsDifferent(this.compDetailsList[index], newCompDetails)\n            );\n\n        if (allFloatingFilterCompsUnchanged) {\n            floatingFilterParamsList.forEach((floatingFilterParams, index) => {\n                const floatingFilter = this.floatingFilters[index] as IFloatingFilterComp<IFilter>;\n                let hasRefreshed = false;\n                if (floatingFilter.refresh) {\n                    const result = floatingFilter.refresh(floatingFilterParams);\n                    // framework wrapper always implements optional methods, but returns null if no underlying method\n                    if (result !== null) {\n                        hasRefreshed = true;\n                    }\n                }\n                if (!hasRefreshed) {\n                    floatingFilter.onParamsUpdated?.(floatingFilterParams);\n                }\n            });\n        } else {\n            _clearElement(this.getGui());\n            this.destroyBeans(this.floatingFilters);\n            this.floatingFilters = [];\n            this.compDetailsList = [];\n            this.setParams(newCompDetailsList);\n        }\n    }\n\n    private getCompDetailsList(params: IFloatingFilterParams<MultiFilter>): {\n        compDetailsList: UserCompDetails[];\n        floatingFilterParamsList: IFloatingFilterParams<IFilter>[];\n    } {\n        const compDetailsList: UserCompDetails[] = [];\n        const floatingFilterParamsList: IFloatingFilterParams<IFilter>[] = [];\n        const filterParams = params.filterParams as MultiFilterParams;\n\n        MultiFilter.getFilterDefs(filterParams).forEach((filterDef, index) => {\n            const floatingFilterParams: IFloatingFilterParams<IFilter> = {\n                ...params,\n                // set the parent filter instance for each floating filter to the relevant child filter instance\n                parentFilterInstance: (callback) => {\n                    this.parentMultiFilterInstance((parent) => {\n                        const child = parent.getChildFilterInstance(index);\n                        if (child == null) {\n                            return;\n                        }\n\n                        callback(child);\n                    });\n                },\n            };\n            _mergeDeep(floatingFilterParams.filterParams, filterDef.filterParams);\n\n            const compDetails = this.getCompDetails(filterDef, floatingFilterParams);\n            if (compDetails) {\n                compDetailsList.push(compDetails);\n                floatingFilterParamsList.push(floatingFilterParams);\n            }\n        });\n        return { compDetailsList, floatingFilterParamsList };\n    }\n\n    public onParentModelChanged(model: IMultiFilterModel, event: FilterChangedEvent): void {\n        // We don't want to update the floating filter if the floating filter caused the change,\n        // because the UI is already in sync. if we didn't do this, the UI would behave strangely\n        // as it would be updating as the user is typing\n        if (event && event.afterFloatingFilter) {\n            return;\n        }\n\n        this.parentMultiFilterInstance((parent) => {\n            if (model == null) {\n                this.floatingFilters.forEach((filter, i) => {\n                    filter.onParentModelChanged(null, event);\n                    _setDisplayed(filter.getGui(), i === 0);\n                });\n            } else {\n                const lastActiveFloatingFilterIndex = parent.getLastActiveFilterIndex();\n\n                this.floatingFilters.forEach((filter, i) => {\n                    const filterModel = model.filterModels!.length > i ? model.filterModels![i] : null;\n\n                    filter.onParentModelChanged(filterModel, event);\n\n                    const shouldShow =\n                        lastActiveFloatingFilterIndex == null ? i === 0 : i === lastActiveFloatingFilterIndex;\n\n                    _setDisplayed(filter.getGui(), shouldShow);\n                });\n            }\n        });\n    }\n\n    public override destroy(): void {\n        this.destroyBeans(this.floatingFilters);\n        this.floatingFilters.length = 0;\n\n        super.destroy();\n    }\n\n    private getCompDetails(filterDef: IFilterDef, params: IFloatingFilterParams<IFilter>): UserCompDetails | undefined {\n        const defaultComponentName =\n            getDefaultFloatingFilterType(this.frameworkOverrides, filterDef, () =>\n                this.filterManager!.getDefaultFloatingFilter(this.params.column as AgColumn)\n            ) ?? 'agReadOnlyFloatingFilter';\n\n        return this.userComponentFactory.getFloatingFilterCompDetails(filterDef, params, defaultComponentName);\n    }\n\n    private parentMultiFilterInstance(cb: (instance: MultiFilter) => void): void {\n        this.params.parentFilterInstance((parent) => {\n            if (!(parent instanceof MultiFilter)) {\n                throw new Error('AG Grid - MultiFloatingFilterComp expects MultiFilter as its parent');\n            }\n\n            cb(parent);\n        });\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.3.1';\n"],
  "mappings": "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",
  "names": ["AgMenuItemRenderer", "AgPromise", "AgPromise", "AgMenuItemRenderer"]
}
