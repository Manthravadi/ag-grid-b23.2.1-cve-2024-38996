{
  "version": 3,
  "sources": ["../../src/menuModule.ts", "../../src/menu/chartMenuItemMapper.ts", "../../src/menu/columnChooserFactory.ts", "../../src/menu/columnMenuFactory.ts", "../../src/menu/contextMenu.ts", "../../src/menu/enterpriseMenu.ts", "../../src/menu/menuApi.ts", "../../src/menu/menuItemMapper.ts", "../../src/menu/menuUtils.ts", "../../src/version.ts"],
  "sourcesContent": ["import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames, _CommunityMenuApiModule } from '@ag-grid-community/core';\nimport { AgMenuItemRenderer, EnterpriseCoreModule } from '@ag-grid-enterprise/core';\n\nimport { ChartMenuItemMapper } from './menu/chartMenuItemMapper';\nimport { ColumnChooserFactory } from './menu/columnChooserFactory';\nimport { ColumnMenuFactory } from './menu/columnMenuFactory';\nimport { ContextMenuFactory } from './menu/contextMenu';\nimport { EnterpriseMenuFactory } from './menu/enterpriseMenu';\nimport { hideColumnChooser, showColumnChooser, showContextMenu } from './menu/menuApi';\nimport { MenuItemMapper } from './menu/menuItemMapper';\nimport { MenuUtils } from './menu/menuUtils';\nimport { VERSION } from './version';\n\nexport const MenuCoreModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.MenuModule}-core`,\n    beans: [\n        EnterpriseMenuFactory,\n        ContextMenuFactory,\n        MenuItemMapper,\n        ChartMenuItemMapper,\n        ColumnChooserFactory,\n        ColumnMenuFactory,\n        MenuUtils,\n    ],\n    dependantModules: [EnterpriseCoreModule],\n    userComponents: [\n        {\n            name: 'agMenuItem',\n            classImp: AgMenuItemRenderer,\n        },\n    ],\n};\n\nexport const MenuApiModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.MenuModule}-api`,\n    apiFunctions: {\n        showContextMenu,\n        showColumnChooser,\n        hideColumnChooser,\n    },\n    dependantModules: [MenuCoreModule, _CommunityMenuApiModule],\n};\n\nexport const MenuModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.MenuModule,\n    dependantModules: [MenuCoreModule, MenuApiModule],\n};\n", "import type {\n    BeanCollection,\n    ChartGroupsDef,\n    ChartType,\n    GridOptionsService,\n    IChartService,\n    LocaleService,\n    MenuItemDef,\n    NamedBean,\n} from '@ag-grid-community/core';\nimport { BeanStub, ModuleNames, ModuleRegistry, _createIconNoSpan, _warnOnce } from '@ag-grid-community/core';\n\nexport class ChartMenuItemMapper extends BeanStub implements NamedBean {\n    beanName = 'chartMenuItemMapper' as const;\n\n    private chartService?: IChartService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.chartService = beans.chartService;\n    }\n\n    public getChartItems(key: 'pivotChart' | 'chartRange'): MenuItemDef | undefined {\n        if (!this.chartService) {\n            ModuleRegistry.__assertRegistered(\n                ModuleNames.GridChartsModule,\n                `the Context Menu key \"${key}\"`,\n                this.gridId\n            );\n            return undefined;\n        }\n\n        const builder =\n            key === 'pivotChart'\n                ? new PivotMenuItemMapper(this.gos, this.chartService, this.localeService)\n                : new RangeMenuItemMapper(this.gos, this.chartService, this.localeService);\n\n        const isEnterprise = this.chartService.isEnterprise();\n\n        let topLevelMenuItem: MenuItemDefWithKey | undefined = builder.getMenuItem();\n\n        if (topLevelMenuItem && topLevelMenuItem.subMenu && !isEnterprise) {\n            // Filter out enterprise-only menu items if 'Community Integrated'\n            const filterEnterpriseItems = (m: MenuItemDefWithKey): MenuItemDefWithKey => ({\n                ...m,\n                subMenu: m.subMenu?.filter((menu) => !menu._enterprise).map((menu) => filterEnterpriseItems(menu)),\n            });\n            topLevelMenuItem = filterEnterpriseItems(topLevelMenuItem);\n        }\n\n        const chartGroupsDef = this.gos.get('chartToolPanelsDef')?.settingsPanel?.chartGroupsDef;\n        if (chartGroupsDef) {\n            topLevelMenuItem = ChartMenuItemMapper.filterAndOrderChartMenu(\n                topLevelMenuItem,\n                chartGroupsDef,\n                builder.getConfigLookup()\n            );\n        }\n        return this.cleanInternals(topLevelMenuItem);\n    }\n\n    // Remove our internal _key and _enterprise properties so this does not leak out of the class on the menu items.\n    private cleanInternals(menuItem: MenuItemDefWithKey | undefined): MenuItemDef | undefined {\n        if (!menuItem) {\n            return menuItem;\n        }\n\n        const removeKeys = (m: MenuItemDefWithKey | undefined) => {\n            delete m?._key;\n            delete m?._enterprise;\n            m?.subMenu?.forEach((s) => removeKeys(s));\n            return m;\n        };\n\n        return removeKeys(menuItem);\n    }\n\n    private static buildLookup<T extends MenuItemDefWithKey<any>>(menuItem: T) {\n        const itemLookup: Record<any, T> = {} as any;\n        const addItem = (item: T) => {\n            itemLookup[item._key] = item;\n            if (item.subMenu) {\n                item.subMenu.forEach((s) => addItem(s as T));\n            }\n        };\n        addItem(menuItem);\n        return itemLookup;\n    }\n\n    /**\n     * Make the MenuItem match the charts provided and their ordering on the ChartGroupsDef config object as provided by the user.\n     */\n    private static filterAndOrderChartMenu<TKeys extends string>(\n        topLevelMenuItem: MenuItemDefWithKey<TKeys>,\n        chartGroupsDef: ChartGroupsDef,\n        configLookup: ChartDefToMenuItems<TKeys>\n    ): MenuItemDefWithKey<TKeys> | undefined {\n        const menuItemLookup = this.buildLookup(topLevelMenuItem);\n        const orderedAndFiltered: MenuItemDefWithKey = { ...topLevelMenuItem, subMenu: [] };\n\n        Object.entries(chartGroupsDef).forEach(([group, chartTypes]: [keyof ChartGroupsDef, ChartType[]]) => {\n            const chartConfigGroup = configLookup[group];\n\n            // Skip any context panels that are not enabled for the current chart type\n            if (chartConfigGroup === null) return;\n\n            if (chartConfigGroup == undefined) {\n                _warnOnce(`invalid chartGroupsDef config '${group}'`);\n                return undefined;\n            }\n\n            const menuItem = menuItemLookup[chartConfigGroup._key];\n            if (menuItem) {\n                if (menuItem.subMenu) {\n                    const subMenus = chartTypes\n                        .map((chartType) => {\n                            const itemKey = (chartConfigGroup as any)[chartType];\n                            if (itemKey == undefined) {\n                                _warnOnce(`invalid chartGroupsDef config '${group}.${chartType}'`);\n                                return undefined;\n                            }\n                            return menuItemLookup[itemKey];\n                        })\n                        .filter((s) => s !== undefined) as MenuItemDefWithKey[];\n\n                    if (subMenus.length > 0) {\n                        menuItem.subMenu = subMenus;\n                        orderedAndFiltered.subMenu?.push(menuItem);\n                    }\n                } else {\n                    // Handles line case which is not actually a sub subMenu\n                    orderedAndFiltered.subMenu?.push(menuItem);\n                }\n            }\n        });\n        if (orderedAndFiltered.subMenu?.length == 0) {\n            return undefined;\n        }\n        return orderedAndFiltered;\n    }\n}\n\ninterface MenuItemBuilder<MenuItemKeys extends string> {\n    getMenuItem(): MenuItemDefWithKey<MenuItemKeys>;\n    getConfigLookup(): ChartDefToMenuItems<MenuItemKeys>;\n}\n\n/** Utility type to keep chart menu item lookups in sync with ChartGroupsDef */\ntype ChartDefToMenuItems<MenuItemKeys extends string> = {\n    [K in keyof ChartGroupsDef]-?: ChartGroupsDef[K] extends (infer P)[] | undefined\n        ? [P] extends [ChartType]\n            ? ({ [T in P]-?: MenuItemKeys | null } & { _key: MenuItemKeys }) | null\n            : never\n        : never;\n};\n\ninterface MenuItemDefWithKey<MenuItemKey extends string = any> extends MenuItemDef {\n    _key: MenuItemKey;\n    _enterprise?: boolean;\n    subMenu?: MenuItemDefWithKey<MenuItemKey>[];\n}\n\nexport type PivotMenuOptionName =\n    | 'pivotChart'\n    | 'pivotColumnChart'\n    | 'pivotGroupedColumn'\n    | 'pivotStackedColumn'\n    | 'pivotNormalizedColumn'\n    | 'pivotBarChart'\n    | 'pivotGroupedBar'\n    | 'pivotStackedBar'\n    | 'pivotNormalizedBar'\n    | 'pivotPieChart'\n    | 'pivotPie'\n    | 'pivotDonut'\n    | 'pivotLineChart'\n    | 'pivotXYChart'\n    | 'pivotScatter'\n    | 'pivotBubble'\n    | 'pivotAreaChart'\n    | 'pivotArea'\n    | 'pivotStackedArea'\n    | 'pivotNormalizedArea'\n    | 'pivotStatisticalChart'\n    | 'pivotHistogram'\n    | 'pivotHierarchicalChart'\n    | 'pivotTreemap'\n    | 'pivotSunburst'\n    | 'pivotCombinationChart'\n    | 'pivotColumnLineCombo'\n    | 'pivotAreaColumnCombo';\n\nclass PivotMenuItemMapper implements MenuItemBuilder<PivotMenuOptionName> {\n    constructor(\n        private gos: GridOptionsService,\n        private chartService: IChartService,\n        private localeService: LocaleService\n    ) {}\n\n    getMenuItem(): MenuItemDefWithKey<PivotMenuOptionName> {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const getMenuItem = (\n            localeKey: string,\n            defaultText: string,\n            chartType: ChartType,\n            key: PivotMenuOptionName,\n            enterprise = false\n        ) => {\n            return {\n                name: localeTextFunc(localeKey, defaultText),\n                action: () => this.chartService.createPivotChart({ chartType }),\n                _key: key,\n                _enterprise: enterprise,\n            };\n        };\n        return {\n            name: localeTextFunc('pivotChart', 'Pivot Chart'),\n            _key: 'pivotChart',\n            subMenu: [\n                {\n                    _key: 'pivotColumnChart',\n                    name: localeTextFunc('columnChart', 'Column'),\n                    subMenu: [\n                        getMenuItem('groupedColumn', 'Grouped&lrm;', 'groupedColumn', 'pivotGroupedColumn'),\n                        getMenuItem('stackedColumn', 'Stacked&lrm;', 'stackedColumn', 'pivotStackedColumn'),\n                        getMenuItem(\n                            'normalizedColumn',\n                            '100% Stacked&lrm;',\n                            'normalizedColumn',\n                            'pivotNormalizedColumn'\n                        ),\n                    ],\n                },\n                {\n                    _key: 'pivotBarChart',\n                    name: localeTextFunc('barChart', 'Bar'),\n                    subMenu: [\n                        getMenuItem('groupedBar', 'Grouped&lrm;', 'groupedBar', 'pivotGroupedBar'),\n                        getMenuItem('stackedBar', 'Stacked&lrm;', 'stackedBar', 'pivotStackedBar'),\n                        getMenuItem('normalizedBar', '100% Stacked&lrm;', 'normalizedBar', 'pivotNormalizedBar'),\n                    ],\n                },\n                {\n                    _key: 'pivotPieChart',\n                    name: localeTextFunc('pieChart', 'Pie'),\n                    subMenu: [\n                        getMenuItem('pie', 'Pie&lrm;', 'pie', 'pivotPie'),\n                        getMenuItem('donut', 'Donut&lrm;', 'donut', 'pivotDonut'),\n                    ],\n                },\n                getMenuItem('line', 'Line&lrm;', 'line', 'pivotLineChart'),\n                {\n                    _key: 'pivotXYChart',\n                    name: localeTextFunc('xyChart', 'X Y (Scatter)'),\n                    subMenu: [\n                        getMenuItem('scatter', 'Scatter&lrm;', 'scatter', 'pivotScatter'),\n                        getMenuItem('bubble', 'Bubble&lrm;', 'bubble', 'pivotBubble'),\n                    ],\n                },\n                {\n                    _key: 'pivotAreaChart',\n                    name: localeTextFunc('areaChart', 'Area'),\n                    subMenu: [\n                        getMenuItem('area', 'Area&lrm;', 'area', 'pivotArea'),\n                        getMenuItem('stackedArea', 'Stacked&lrm;', 'stackedArea', 'pivotStackedArea'),\n                        getMenuItem('normalizedArea', '100% Stacked&lrm;', 'normalizedArea', 'pivotNormalizedArea'),\n                    ],\n                },\n                {\n                    _key: 'pivotStatisticalChart',\n                    _enterprise: false, // histogram chart is available in both community and enterprise distributions\n                    name: localeTextFunc('statisticalChart', 'Statistical'),\n                    subMenu: [getMenuItem('histogramChart', 'Histogram&lrm;', 'histogram', 'pivotHistogram', false)],\n                },\n                {\n                    _key: 'pivotHierarchicalChart',\n                    _enterprise: true,\n                    name: localeTextFunc('hierarchicalChart', 'Hierarchical'),\n                    subMenu: [\n                        getMenuItem('treemapChart', 'Treemap&lrm;', 'treemap', 'pivotTreemap', true),\n                        getMenuItem('sunburstChart', 'Sunburst&lrm;', 'sunburst', 'pivotSunburst', true),\n                    ],\n                },\n                {\n                    _key: 'pivotCombinationChart',\n                    name: localeTextFunc('combinationChart', 'Combination'),\n                    subMenu: [\n                        getMenuItem('columnLineCombo', 'Column & Line&lrm;', 'columnLineCombo', 'pivotColumnLineCombo'),\n                        getMenuItem('AreaColumnCombo', 'Area & Column&lrm;', 'areaColumnCombo', 'pivotAreaColumnCombo'),\n                    ],\n                },\n            ],\n            icon: _createIconNoSpan('chart', this.gos, undefined),\n        };\n    }\n\n    getConfigLookup(): ChartDefToMenuItems<PivotMenuOptionName> {\n        return {\n            columnGroup: {\n                _key: 'pivotColumnChart',\n                column: 'pivotGroupedColumn',\n                stackedColumn: 'pivotStackedColumn',\n                normalizedColumn: 'pivotNormalizedColumn',\n            },\n            barGroup: {\n                _key: 'pivotBarChart',\n                bar: 'pivotGroupedBar',\n                stackedBar: 'pivotStackedBar',\n                normalizedBar: 'pivotNormalizedBar',\n            },\n            pieGroup: {\n                _key: 'pivotPieChart',\n                pie: 'pivotPie',\n                donut: 'pivotDonut',\n                doughnut: 'pivotDonut',\n            },\n            lineGroup: {\n                _key: 'pivotLineChart',\n                line: 'pivotLineChart',\n            },\n            scatterGroup: {\n                _key: 'pivotXYChart',\n                bubble: 'pivotBubble',\n                scatter: 'pivotScatter',\n            },\n            areaGroup: {\n                _key: 'pivotAreaChart',\n                area: 'pivotArea',\n                stackedArea: 'pivotStackedArea',\n                normalizedArea: 'pivotNormalizedArea',\n            },\n            combinationGroup: {\n                _key: 'pivotCombinationChart',\n                columnLineCombo: 'pivotColumnLineCombo',\n                areaColumnCombo: 'pivotAreaColumnCombo',\n                customCombo: null, // Not currently supported\n            },\n            hierarchicalGroup: {\n                _key: 'pivotHierarchicalChart',\n                treemap: 'pivotTreemap',\n                sunburst: 'pivotSunburst',\n            },\n            statisticalGroup: {\n                _key: 'pivotStatisticalChart',\n                histogram: 'pivotHistogram',\n                // Some statistical charts do not currently support pivot mode\n                rangeBar: null,\n                rangeArea: null,\n                boxPlot: null,\n            },\n            // Polar charts do not support pivot mode\n            polarGroup: null,\n            // Specialized charts do not currently support pivot mode\n            specializedGroup: null,\n        };\n    }\n}\n\nexport type RangeMenuOptionName =\n    | 'chartRange'\n    | 'rangeColumnChart'\n    | 'rangeGroupedColumn'\n    | 'rangeStackedColumn'\n    | 'rangeNormalizedColumn'\n    | 'rangeBarChart'\n    | 'rangeGroupedBar'\n    | 'rangeStackedBar'\n    | 'rangeNormalizedBar'\n    | 'rangePieChart'\n    | 'rangePie'\n    | 'rangeDonut'\n    | 'rangeLineChart'\n    | 'rangeXYChart'\n    | 'rangeScatter'\n    | 'rangeBubble'\n    | 'rangeAreaChart'\n    | 'rangeArea'\n    | 'rangeStackedArea'\n    | 'rangeNormalizedArea'\n    | 'rangePolarChart'\n    | 'rangeRadarLine'\n    | 'rangeRadarArea'\n    | 'rangeNightingale'\n    | 'rangeRadialColumn'\n    | 'rangeRadialBar'\n    | 'rangeStatisticalChart'\n    | 'rangeBoxPlot'\n    | 'rangeHistogram'\n    | 'rangeRangeBar'\n    | 'rangeRangeArea'\n    | 'rangeHierarchicalChart'\n    | 'rangeTreemap'\n    | 'rangeSunburst'\n    | 'rangeSpecializedChart'\n    | 'rangeWaterfall'\n    | 'rangeHeatmap'\n    | 'rangeCombinationChart'\n    | 'rangeColumnLineCombo'\n    | 'rangeAreaColumnCombo';\n\nclass RangeMenuItemMapper implements MenuItemBuilder<RangeMenuOptionName> {\n    constructor(\n        private gos: GridOptionsService,\n        private chartService: IChartService,\n        private localeService: LocaleService\n    ) {}\n\n    getMenuItem(): MenuItemDefWithKey<RangeMenuOptionName> {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const getMenuItem = (\n            localeKey: string,\n            defaultText: string,\n            chartType: ChartType,\n            key: RangeMenuOptionName,\n            enterprise = false\n        ) => {\n            return {\n                name: localeTextFunc(localeKey, defaultText),\n                action: () => this.chartService.createChartFromCurrentRange(chartType),\n                _key: key,\n                _enterprise: enterprise,\n            };\n        };\n\n        return {\n            name: localeTextFunc('chartRange', 'Chart Range'),\n            _key: 'chartRange',\n            subMenu: [\n                {\n                    name: localeTextFunc('columnChart', 'Column'),\n                    subMenu: [\n                        getMenuItem('groupedColumn', 'Grouped&lrm;', 'groupedColumn', 'rangeGroupedColumn'),\n                        getMenuItem('stackedColumn', 'Stacked&lrm;', 'stackedColumn', 'rangeStackedColumn'),\n                        getMenuItem(\n                            'normalizedColumn',\n                            '100% Stacked&lrm;',\n                            'normalizedColumn',\n                            'rangeNormalizedColumn'\n                        ),\n                    ],\n                    _key: 'rangeColumnChart',\n                },\n                {\n                    name: localeTextFunc('barChart', 'Bar'),\n                    subMenu: [\n                        getMenuItem('groupedBar', 'Grouped&lrm;', 'groupedBar', 'rangeGroupedBar'),\n                        getMenuItem('stackedBar', 'Stacked&lrm;', 'stackedBar', 'rangeStackedBar'),\n                        getMenuItem('normalizedBar', '100% Stacked&lrm;', 'normalizedBar', 'rangeNormalizedBar'),\n                    ],\n                    _key: 'rangeBarChart',\n                },\n                {\n                    name: localeTextFunc('pieChart', 'Pie'),\n                    subMenu: [\n                        getMenuItem('pie', 'Pie&lrm;', 'pie', 'rangePie'),\n                        getMenuItem('donut', 'Donut&lrm;', 'donut', 'rangeDonut'),\n                    ],\n                    _key: 'rangePieChart',\n                },\n                getMenuItem('line', 'Line&lrm;', 'line', 'rangeLineChart'),\n                {\n                    name: localeTextFunc('xyChart', 'X Y (Scatter)'),\n                    subMenu: [\n                        getMenuItem('scatter', 'Scatter&lrm;', 'scatter', 'rangeScatter'),\n                        getMenuItem('bubble', 'Bubble&lrm;', 'bubble', 'rangeBubble'),\n                    ],\n                    _key: 'rangeXYChart',\n                },\n                {\n                    name: localeTextFunc('areaChart', 'Area'),\n                    subMenu: [\n                        getMenuItem('area', 'Area&lrm;', 'area', 'rangeArea'),\n                        getMenuItem('stackedArea', 'Stacked&lrm;', 'stackedArea', 'rangeStackedArea'),\n                        getMenuItem('normalizedArea', '100% Stacked&lrm;', 'normalizedArea', 'rangeNormalizedArea'),\n                    ],\n                    _key: 'rangeAreaChart',\n                },\n                {\n                    name: localeTextFunc('polarChart', 'Polar'),\n                    subMenu: [\n                        getMenuItem('radarLine', 'Radar Line&lrm;', 'radarLine', 'rangeRadarLine'),\n                        getMenuItem('radarArea', 'Radar Area&lrm;', 'radarArea', 'rangeRadarArea'),\n                        getMenuItem('nightingale', 'Nightingale&lrm;', 'nightingale', 'rangeNightingale'),\n                        getMenuItem('radialColumn', 'Radial Column&lrm;', 'radialColumn', 'rangeRadialColumn'),\n                        getMenuItem('radialBar', 'Radial Bar&lrm;', 'radialBar', 'rangeRadialBar'),\n                    ],\n                    _key: 'rangePolarChart',\n                    _enterprise: true,\n                },\n                {\n                    name: localeTextFunc('statisticalChart', 'Statistical'),\n                    subMenu: [\n                        getMenuItem('boxPlot', 'Box Plot&lrm;', 'boxPlot', 'rangeBoxPlot', true),\n                        getMenuItem('histogramChart', 'Histogram&lrm;', 'histogram', 'rangeHistogram', false),\n                        getMenuItem('rangeBar', 'Range Bar&lrm;', 'rangeBar', 'rangeRangeBar', true),\n                        getMenuItem('rangeArea', 'Range Area&lrm;', 'rangeArea', 'rangeRangeArea', true),\n                    ],\n                    _key: 'rangeStatisticalChart',\n                    _enterprise: false, // histogram chart is available in both community and enterprise distributions\n                },\n                {\n                    name: localeTextFunc('hierarchicalChart', 'Hierarchical'),\n                    subMenu: [\n                        getMenuItem('treemap', 'Treemap&lrm;', 'treemap', 'rangeTreemap'),\n                        getMenuItem('sunburst', 'Sunburst&lrm;', 'sunburst', 'rangeSunburst'),\n                    ],\n                    _key: 'rangeHierarchicalChart',\n                    _enterprise: true,\n                },\n                {\n                    name: localeTextFunc('specializedChart', 'Specialized'),\n                    subMenu: [\n                        getMenuItem('heatmap', 'Heatmap&lrm;', 'heatmap', 'rangeHeatmap'),\n                        getMenuItem('waterfall', 'Waterfall&lrm;', 'waterfall', 'rangeWaterfall'),\n                    ],\n                    _key: 'rangeSpecializedChart',\n                    _enterprise: true,\n                },\n                {\n                    name: localeTextFunc('combinationChart', 'Combination'),\n                    subMenu: [\n                        getMenuItem('columnLineCombo', 'Column & Line&lrm;', 'columnLineCombo', 'rangeColumnLineCombo'),\n                        getMenuItem('AreaColumnCombo', 'Area & Column&lrm;', 'areaColumnCombo', 'rangeAreaColumnCombo'),\n                    ],\n                    _key: 'rangeCombinationChart',\n                },\n            ],\n            icon: _createIconNoSpan('chart', this.gos, undefined),\n        };\n    }\n\n    getConfigLookup(): ChartDefToMenuItems<RangeMenuOptionName> {\n        return {\n            columnGroup: {\n                _key: 'rangeColumnChart',\n                column: 'rangeGroupedColumn',\n                stackedColumn: 'rangeStackedColumn',\n                normalizedColumn: 'rangeNormalizedColumn',\n            },\n            barGroup: {\n                _key: 'rangeBarChart',\n                bar: 'rangeGroupedBar',\n                stackedBar: 'rangeStackedBar',\n                normalizedBar: 'rangeNormalizedBar',\n            },\n            pieGroup: {\n                _key: 'rangePieChart',\n                pie: 'rangePie',\n                donut: 'rangeDonut',\n                doughnut: 'rangeDonut',\n            },\n            lineGroup: {\n                _key: 'rangeLineChart',\n                line: 'rangeLineChart',\n            },\n            scatterGroup: {\n                _key: 'rangeXYChart',\n                bubble: 'rangeBubble',\n                scatter: 'rangeScatter',\n            },\n            areaGroup: {\n                _key: 'rangeAreaChart',\n                area: 'rangeArea',\n                stackedArea: 'rangeStackedArea',\n                normalizedArea: 'rangeNormalizedArea',\n            },\n            polarGroup: {\n                _key: 'rangePolarChart',\n                radarLine: 'rangeRadarLine',\n                radarArea: 'rangeRadarArea',\n                nightingale: 'rangeNightingale',\n                radialColumn: 'rangeRadialColumn',\n                radialBar: 'rangeRadialBar',\n            },\n            statisticalGroup: {\n                _key: 'rangeStatisticalChart',\n                boxPlot: 'rangeBoxPlot',\n                histogram: 'rangeHistogram',\n                rangeBar: 'rangeRangeBar',\n                rangeArea: 'rangeRangeArea',\n            },\n            hierarchicalGroup: {\n                _key: 'rangeHierarchicalChart',\n                treemap: 'rangeTreemap',\n                sunburst: 'rangeSunburst',\n            },\n            specializedGroup: {\n                _key: 'rangeSpecializedChart',\n                heatmap: 'rangeHeatmap',\n                waterfall: 'rangeWaterfall',\n            },\n            combinationGroup: {\n                _key: 'rangeCombinationChart',\n                columnLineCombo: 'rangeColumnLineCombo',\n                areaColumnCombo: 'rangeAreaColumnCombo',\n                customCombo: null, // Not currently supported\n            },\n        };\n    }\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    ColumnChooserParams,\n    ColumnMenuVisibleChangedEvent,\n    FocusService,\n    IColumnChooserFactory,\n    NamedBean,\n    ShowColumnChooserParams,\n    VisibleColsService,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { BeanStub } from '@ag-grid-community/core';\nimport { AgPrimaryCols } from '@ag-grid-enterprise/column-tool-panel';\nimport { AgDialog } from '@ag-grid-enterprise/core';\n\nimport type { MenuUtils } from './menuUtils';\n\nexport class ColumnChooserFactory extends BeanStub implements NamedBean, IColumnChooserFactory {\n    beanName = 'columnChooserFactory' as const;\n\n    private focusService: FocusService;\n    private menuUtils: MenuUtils;\n    private visibleColsService: VisibleColsService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.focusService = beans.focusService;\n        this.menuUtils = beans.menuUtils as MenuUtils;\n        this.visibleColsService = beans.visibleColsService;\n    }\n\n    private activeColumnChooser: AgPrimaryCols | undefined;\n    private activeColumnChooserDialog: AgDialog | undefined;\n\n    public createColumnSelectPanel(\n        parent: BeanStub<any>,\n        column?: AgColumn | null,\n        draggable?: boolean,\n        params?: ColumnChooserParams\n    ): AgPrimaryCols {\n        const columnSelectPanel = parent.createManagedBean(new AgPrimaryCols());\n\n        const columnChooserParams =\n            params ?? column?.getColDef().columnChooserParams ?? column?.getColDef().columnsMenuParams ?? {};\n\n        const {\n            contractColumnSelection,\n            suppressColumnExpandAll,\n            suppressColumnFilter,\n            suppressColumnSelectAll,\n            suppressSyncLayoutWithGrid,\n            columnLayout,\n        } = columnChooserParams;\n\n        columnSelectPanel.init(\n            !!draggable,\n            this.gos.addGridCommonParams({\n                suppressColumnMove: false,\n                suppressValues: false,\n                suppressPivots: false,\n                suppressRowGroups: false,\n                suppressPivotMode: false,\n                contractColumnSelection: !!contractColumnSelection,\n                suppressColumnExpandAll: !!suppressColumnExpandAll,\n                suppressColumnFilter: !!suppressColumnFilter,\n                suppressColumnSelectAll: !!suppressColumnSelectAll,\n                suppressSyncLayoutWithGrid: !!columnLayout || !!suppressSyncLayoutWithGrid,\n                onStateUpdated: () => {},\n            }),\n            'columnMenu'\n        );\n\n        if (columnLayout) {\n            columnSelectPanel.setColumnLayout(columnLayout);\n        }\n\n        return columnSelectPanel;\n    }\n\n    public showColumnChooser({ column, chooserParams, eventSource }: ShowColumnChooserParams): void {\n        this.hideActiveColumnChooser();\n\n        const columnSelectPanel = this.createColumnSelectPanel(this, column, true, chooserParams);\n        const translate = this.localeService.getLocaleTextFunc();\n        const columnIndex = this.visibleColsService.getAllCols().indexOf(column as AgColumn);\n        const headerPosition = column ? this.focusService.getFocusedHeader() : null;\n\n        this.activeColumnChooserDialog = this.createBean(\n            new AgDialog({\n                title: translate('chooseColumns', 'Choose Columns'),\n                component: columnSelectPanel,\n                width: 300,\n                height: 300,\n                resizable: true,\n                movable: true,\n                centered: true,\n                closable: true,\n                afterGuiAttached: () => {\n                    this.focusService.findNextFocusableElement(columnSelectPanel.getGui())?.focus();\n                    this.dispatchVisibleChangedEvent(true, column);\n                },\n                closedCallback: (event) => {\n                    const eComp = this.activeColumnChooser!.getGui();\n                    this.destroyBean(this.activeColumnChooser);\n                    this.activeColumnChooser = undefined;\n                    this.activeColumnChooserDialog = undefined;\n                    this.dispatchVisibleChangedEvent(false, column);\n                    if (column) {\n                        this.menuUtils.restoreFocusOnClose(\n                            { column, headerPosition, columnIndex, eventSource },\n                            eComp,\n                            event,\n                            true\n                        );\n                    }\n                },\n            })\n        );\n\n        this.activeColumnChooser = columnSelectPanel;\n    }\n\n    public hideActiveColumnChooser(): void {\n        if (this.activeColumnChooserDialog) {\n            this.destroyBean(this.activeColumnChooserDialog);\n        }\n    }\n\n    private dispatchVisibleChangedEvent(visible: boolean, column?: AgColumn | null): void {\n        const event: WithoutGridCommon<ColumnMenuVisibleChangedEvent> = {\n            type: 'columnMenuVisibleChanged',\n            visible,\n            switchingTab: false,\n            key: 'columnChooser',\n            column: column ?? null,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    ColumnModel,\n    FuncColsService,\n    IRowModel,\n    MenuItemDef,\n    MenuService,\n    NamedBean,\n} from '@ag-grid-community/core';\nimport { BeanStub, _removeRepeatsFromArray } from '@ag-grid-community/core';\nimport { AgMenuList } from '@ag-grid-enterprise/core';\n\nimport type { MenuItemMapper } from './menuItemMapper';\n\nconst MENU_ITEM_SEPARATOR = 'separator';\n\nexport class ColumnMenuFactory extends BeanStub implements NamedBean {\n    beanName = 'columnMenuFactory' as const;\n\n    private menuItemMapper: MenuItemMapper;\n    private columnModel: ColumnModel;\n    private funcColsService: FuncColsService;\n    private rowModel: IRowModel;\n    private menuService: MenuService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.menuItemMapper = beans.menuItemMapper as MenuItemMapper;\n        this.columnModel = beans.columnModel;\n        this.funcColsService = beans.funcColsService;\n        this.rowModel = beans.rowModel;\n        this.menuService = beans.menuService;\n    }\n\n    public createMenu(\n        parent: BeanStub<any>,\n        column: AgColumn | undefined,\n        sourceElement: () => HTMLElement\n    ): AgMenuList {\n        const menuList = parent.createManagedBean(\n            new AgMenuList(0, {\n                column: column ?? null,\n                node: null,\n                value: null,\n            })\n        );\n\n        const menuItems = this.getMenuItems(column);\n        const menuItemsMapped = this.menuItemMapper.mapWithStockItems(\n            menuItems,\n            column ?? null,\n            sourceElement,\n            'columnMenu'\n        );\n\n        menuList.addMenuItems(menuItemsMapped);\n\n        return menuList;\n    }\n\n    private getMenuItems(column?: AgColumn): (string | MenuItemDef)[] {\n        const defaultItems = this.getDefaultMenuOptions(column);\n        let result: (string | MenuItemDef)[];\n\n        const columnMainMenuItems = column?.getColDef().mainMenuItems;\n        if (Array.isArray(columnMainMenuItems)) {\n            result = columnMainMenuItems;\n        } else if (typeof columnMainMenuItems === 'function') {\n            result = columnMainMenuItems(\n                this.gos.addGridCommonParams({\n                    column: column!,\n                    defaultItems,\n                })\n            );\n        } else {\n            const userFunc = this.gos.getCallback('getMainMenuItems');\n            if (userFunc && column) {\n                result = userFunc({\n                    column,\n                    defaultItems,\n                });\n            } else {\n                result = defaultItems;\n            }\n        }\n\n        // GUI looks weird when two separators are side by side. this can happen accidentally\n        // if we remove items from the menu then two separators can edit up adjacent.\n        _removeRepeatsFromArray(result, MENU_ITEM_SEPARATOR);\n\n        return result;\n    }\n\n    private getDefaultMenuOptions(column?: AgColumn): string[] {\n        const result: string[] = [];\n\n        const isLegacyMenuEnabled = this.menuService.isLegacyMenuEnabled();\n\n        if (!column) {\n            if (!isLegacyMenuEnabled) {\n                result.push('columnChooser');\n            }\n            result.push('resetColumns');\n            return result;\n        }\n\n        const allowPinning = !column.getColDef().lockPinned;\n\n        const rowGroupCount = this.funcColsService.getRowGroupColumns().length;\n        const doingGrouping = rowGroupCount > 0;\n\n        const allowValue = column.isAllowValue();\n        const allowRowGroup = column.isAllowRowGroup();\n        const isPrimary = column.isPrimary();\n        const pivotModeOn = this.columnModel.isPivotMode();\n\n        const isInMemoryRowModel = this.rowModel.getType() === 'clientSide';\n\n        const usingTreeData = this.gos.get('treeData');\n\n        const allowValueAgg =\n            // if primary, then only allow aggValue if grouping and it's a value columns\n            (isPrimary && doingGrouping && allowValue) ||\n            // secondary columns can always have aggValue, as it means it's a pivot value column\n            !isPrimary;\n\n        if (!isLegacyMenuEnabled && column.isSortable()) {\n            const sort = column.getSort();\n            if (sort !== 'asc') {\n                result.push('sortAscending');\n            }\n            if (sort !== 'desc') {\n                result.push('sortDescending');\n            }\n            if (sort) {\n                result.push('sortUnSort');\n            }\n            result.push(MENU_ITEM_SEPARATOR);\n        }\n\n        if (this.menuService.isFilterMenuItemEnabled(column)) {\n            result.push('columnFilter');\n            result.push(MENU_ITEM_SEPARATOR);\n        }\n\n        if (allowPinning) {\n            result.push('pinSubMenu');\n        }\n\n        if (allowValueAgg) {\n            result.push('valueAggSubMenu');\n        }\n\n        if (allowPinning || allowValueAgg) {\n            result.push(MENU_ITEM_SEPARATOR);\n        }\n\n        result.push('autoSizeThis');\n        result.push('autoSizeAll');\n        result.push(MENU_ITEM_SEPARATOR);\n\n        const showRowGroup = column.getColDef().showRowGroup;\n        if (showRowGroup) {\n            result.push('rowUnGroup');\n        } else if (allowRowGroup && column.isPrimary()) {\n            if (column.isRowGroupActive()) {\n                const groupLocked = this.columnModel.isColGroupLocked(column);\n                if (!groupLocked) {\n                    result.push('rowUnGroup');\n                }\n            } else {\n                result.push('rowGroup');\n            }\n        }\n        result.push(MENU_ITEM_SEPARATOR);\n        if (!isLegacyMenuEnabled) {\n            result.push('columnChooser');\n        }\n        result.push('resetColumns');\n\n        // only add grouping expand/collapse if grouping in the InMemoryRowModel\n        // if pivoting, we only have expandable groups if grouping by 2 or more columns\n        // as the lowest level group is not expandable while pivoting.\n        // if not pivoting, then any active row group can be expanded.\n        const allowExpandAndContract = isInMemoryRowModel && (usingTreeData || rowGroupCount > (pivotModeOn ? 1 : 0));\n\n        if (allowExpandAndContract) {\n            result.push('expandAll');\n            result.push('contractAll');\n        }\n\n        return result;\n    }\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    CellPosition,\n    CellPositionUtils,\n    ColumnModel,\n    ContextMenuVisibleChangedEvent,\n    CtrlsService,\n    FocusService,\n    IAfterGuiAttachedParams,\n    IContextMenuFactory,\n    IRangeService,\n    MenuItemDef,\n    NamedBean,\n    PopupService,\n    RowNode,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport {\n    BeanStub,\n    Component,\n    ModuleNames,\n    ModuleRegistry,\n    _exists,\n    _isIOSUserAgent,\n    _missingOrEmpty,\n} from '@ag-grid-community/core';\nimport type { CloseMenuEvent } from '@ag-grid-enterprise/core';\nimport { AgMenuList } from '@ag-grid-enterprise/core';\n\nimport type { MenuItemMapper } from './menuItemMapper';\nimport type { MenuUtils } from './menuUtils';\n\nconst CSS_MENU = 'ag-menu';\nconst CSS_CONTEXT_MENU_OPEN = 'ag-context-menu-open';\n\nexport class ContextMenuFactory extends BeanStub implements NamedBean, IContextMenuFactory {\n    beanName = 'contextMenuFactory' as const;\n\n    private popupService: PopupService;\n    private ctrlsService: CtrlsService;\n    private columnModel: ColumnModel;\n    private menuUtils: MenuUtils;\n    private rangeService?: IRangeService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.popupService = beans.popupService;\n        this.ctrlsService = beans.ctrlsService;\n        this.columnModel = beans.columnModel;\n        this.menuUtils = beans.menuUtils as MenuUtils;\n        this.rangeService = beans.rangeService;\n    }\n\n    private activeMenu: ContextMenu | null;\n\n    public hideActiveMenu(): void {\n        this.destroyBean(this.activeMenu);\n    }\n\n    private getMenuItems(\n        node: RowNode | null,\n        column: AgColumn | null,\n        value: any\n    ): (MenuItemDef | string)[] | undefined {\n        const defaultMenuOptions: string[] = [];\n\n        if (_exists(node) && ModuleRegistry.__isRegistered(ModuleNames.ClipboardModule, this.gridId)) {\n            if (column) {\n                // only makes sense if column exists, could have originated from a row\n                if (!this.gos.get('suppressCutToClipboard')) {\n                    defaultMenuOptions.push('cut');\n                }\n                defaultMenuOptions.push('copy', 'copyWithHeaders', 'copyWithGroupHeaders', 'paste', 'separator');\n            }\n        }\n\n        if (this.gos.get('enableCharts') && ModuleRegistry.__isRegistered(ModuleNames.GridChartsModule, this.gridId)) {\n            if (this.columnModel.isPivotMode()) {\n                defaultMenuOptions.push('pivotChart');\n            }\n\n            if (this.rangeService && !this.rangeService.isEmpty()) {\n                defaultMenuOptions.push('chartRange');\n            }\n        }\n\n        if (_exists(node)) {\n            // if user clicks a cell\n            const csvModuleMissing = !ModuleRegistry.__isRegistered(ModuleNames.CsvExportModule, this.gridId);\n            const excelModuleMissing = !ModuleRegistry.__isRegistered(ModuleNames.ExcelExportModule, this.gridId);\n            const suppressExcel = this.gos.get('suppressExcelExport') || excelModuleMissing;\n            const suppressCsv = this.gos.get('suppressCsvExport') || csvModuleMissing;\n            const onIPad = _isIOSUserAgent();\n            const anyExport: boolean = !onIPad && (!suppressExcel || !suppressCsv);\n            if (anyExport) {\n                defaultMenuOptions.push('export');\n            }\n        }\n\n        const defaultItems = defaultMenuOptions.length ? defaultMenuOptions : undefined;\n        const columnContextMenuItems = column?.getColDef().contextMenuItems;\n\n        if (Array.isArray(columnContextMenuItems)) {\n            return columnContextMenuItems;\n        }\n\n        if (typeof columnContextMenuItems === 'function') {\n            return columnContextMenuItems(\n                this.gos.addGridCommonParams({\n                    column,\n                    node,\n                    value,\n                    defaultItems,\n                })\n            );\n        }\n\n        const userFunc = this.gos.getCallback('getContextMenuItems');\n        if (userFunc) {\n            return userFunc({ column, node, value, defaultItems });\n        }\n\n        return defaultMenuOptions;\n    }\n\n    public onContextMenu(\n        mouseEvent: MouseEvent | null,\n        touchEvent: TouchEvent | null,\n        rowNode: RowNode | null,\n        column: AgColumn | null,\n        value: any,\n        anchorToElement: HTMLElement\n    ): void {\n        this.menuUtils.onContextMenu(mouseEvent, touchEvent, (eventOrTouch) =>\n            this.showMenu(rowNode, column, value, eventOrTouch, anchorToElement)\n        );\n    }\n\n    public showMenu(\n        node: RowNode | null,\n        column: AgColumn | null,\n        value: any,\n        mouseEvent: MouseEvent | Touch,\n        anchorToElement: HTMLElement\n    ): boolean {\n        const menuItems = this.getMenuItems(node, column, value);\n        const eGridBodyGui = this.ctrlsService.getGridBodyCtrl().getGui();\n\n        if (menuItems === undefined || _missingOrEmpty(menuItems)) {\n            return false;\n        }\n\n        const menu = new ContextMenu(menuItems, column, node, value);\n        this.createBean(menu);\n\n        const eMenuGui = menu.getGui();\n\n        const positionParams = {\n            column: column,\n            rowNode: node,\n            type: 'contextMenu',\n            mouseEvent: mouseEvent,\n            ePopup: eMenuGui,\n            // move one pixel away so that accidentally double clicking\n            // won't show the browser's contextmenu\n            nudgeY: 1,\n        };\n\n        const translate = this.localeService.getLocaleTextFunc();\n\n        const addPopupRes = this.popupService.addPopup({\n            modal: true,\n            eChild: eMenuGui,\n            closeOnEsc: true,\n            closedCallback: (e) => {\n                eGridBodyGui.classList.remove(CSS_CONTEXT_MENU_OPEN);\n                this.destroyBean(menu);\n                this.dispatchVisibleChangedEvent(false, e === undefined ? 'api' : 'ui');\n            },\n            click: mouseEvent,\n            positionCallback: () => {\n                const isRtl = this.gos.get('enableRtl');\n                this.popupService.positionPopupUnderMouseEvent({\n                    ...positionParams,\n                    nudgeX: isRtl ? (eMenuGui.offsetWidth + 1) * -1 : 1,\n                });\n            },\n            // so when browser is scrolled down, or grid is scrolled, context menu stays with cell\n            anchorToElement: anchorToElement,\n            ariaLabel: translate('ariaLabelContextMenu', 'Context Menu'),\n        });\n\n        if (addPopupRes) {\n            eGridBodyGui.classList.add(CSS_CONTEXT_MENU_OPEN);\n            menu.afterGuiAttached({ container: 'contextMenu', hidePopup: addPopupRes.hideFunc });\n        }\n\n        // there should never be an active menu at this point, however it was found\n        // that you could right click a second time just 1 or 2 pixels from the first\n        // click, and another menu would pop up. so somehow the logic for closing the\n        // first menu (clicking outside should close it) was glitchy somehow. an easy\n        // way to avoid this is just remove the old context menu here if it exists.\n        if (this.activeMenu) {\n            this.hideActiveMenu();\n        }\n\n        this.activeMenu = menu;\n\n        menu.addEventListener('destroyed', () => {\n            if (this.activeMenu === menu) {\n                this.activeMenu = null;\n            }\n        });\n\n        // hide the popup if something gets selected\n        if (addPopupRes) {\n            menu.addEventListener('closeMenu', (e: CloseMenuEvent) =>\n                addPopupRes.hideFunc({\n                    mouseEvent: e.mouseEvent ?? undefined,\n                    keyboardEvent: e.keyboardEvent ?? undefined,\n                    forceHide: true,\n                })\n            );\n        }\n\n        // we check for a mousedown event because `gridApi.showContextMenu`\n        // generates a `mousedown` event to display the context menu.\n        const isApi = mouseEvent && mouseEvent instanceof MouseEvent && mouseEvent.type === 'mousedown';\n        this.dispatchVisibleChangedEvent(true, isApi ? 'api' : 'ui');\n\n        return true;\n    }\n\n    private dispatchVisibleChangedEvent(visible: boolean, source: 'api' | 'ui' = 'ui'): void {\n        const displayedEvent: WithoutGridCommon<ContextMenuVisibleChangedEvent> = {\n            type: 'contextMenuVisibleChanged',\n            visible,\n            source,\n        };\n        this.eventService.dispatchEvent(displayedEvent);\n    }\n}\n\nexport type ContextMenuEvent = 'closeMenu';\n\nclass ContextMenu extends Component<ContextMenuEvent> {\n    private focusService: FocusService;\n    private menuItemMapper: MenuItemMapper;\n    private cellPositionUtils: CellPositionUtils;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.focusService = beans.focusService;\n        this.menuItemMapper = beans.menuItemMapper as MenuItemMapper;\n        this.cellPositionUtils = beans.cellPositionUtils;\n    }\n\n    private menuList: AgMenuList | null = null;\n    private focusedCell: CellPosition | null = null;\n\n    constructor(\n        private readonly menuItems: (MenuItemDef | string)[],\n        private readonly column: AgColumn | null,\n        private readonly node: RowNode | null,\n        private readonly value: any\n    ) {\n        super(/* html */ `<div class=\"${CSS_MENU}\" role=\"presentation\"></div>`);\n    }\n\n    public postConstruct(): void {\n        const menuList = this.createManagedBean(\n            new AgMenuList(0, {\n                column: this.column,\n                node: this.node,\n                value: this.value,\n            })\n        );\n        const menuItemsMapped = this.menuItemMapper.mapWithStockItems(\n            this.menuItems,\n            null,\n            () => this.getGui(),\n            'contextMenu'\n        );\n\n        menuList.addMenuItems(menuItemsMapped);\n\n        this.appendChild(menuList);\n        this.menuList = menuList;\n\n        menuList.addEventListener('closeMenu', (e) => this.dispatchLocalEvent(e));\n    }\n\n    public afterGuiAttached(params: IAfterGuiAttachedParams): void {\n        if (params.hidePopup) {\n            this.addDestroyFunc(params.hidePopup);\n        }\n\n        this.focusedCell = this.focusService.getFocusedCell();\n\n        if (this.menuList) {\n            this.focusService.focusInto(this.menuList.getGui());\n        }\n    }\n\n    private restoreFocusedCell(): void {\n        const currentFocusedCell = this.focusService.getFocusedCell();\n\n        if (\n            currentFocusedCell &&\n            this.focusedCell &&\n            this.cellPositionUtils.equals(currentFocusedCell, this.focusedCell)\n        ) {\n            const { rowIndex, rowPinned, column } = this.focusedCell;\n            const doc = this.gos.getDocument();\n            const activeEl = this.gos.getActiveDomElement();\n\n            if (!activeEl || activeEl === doc.body) {\n                this.focusService.setFocusedCell({\n                    rowIndex,\n                    column,\n                    rowPinned,\n                    forceBrowserFocus: true,\n                    preventScrollOnBrowserFocus: !this.focusService.isKeyboardMode(),\n                });\n            }\n        }\n    }\n\n    public override destroy(): void {\n        this.restoreFocusedCell();\n        super.destroy();\n    }\n}\n", "import type {\n    AgColumn,\n    AgEvent,\n    Bean,\n    BeanCollection,\n    ColumnMenuTab,\n    ColumnMenuVisibleChangedEvent,\n    ComponentEvent,\n    ContainerType,\n    CtrlsService,\n    FilterManager,\n    FocusService,\n    IAfterGuiAttachedParams,\n    IMenuFactory,\n    MenuService,\n    NamedBean,\n    PopupEventParams,\n    PopupService,\n    VisibleColsService,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport {\n    AgPromise,\n    BeanStub,\n    Component,\n    FilterWrapperComp,\n    ModuleNames,\n    ModuleRegistry,\n    RefPlaceholder,\n    _createIconNoSpan,\n    _warnOnce,\n} from '@ag-grid-community/core';\nimport type { AgMenuList, CloseMenuEvent, TabbedItem } from '@ag-grid-enterprise/core';\nimport { TabbedLayout } from '@ag-grid-enterprise/core';\n\nimport type { ColumnChooserFactory } from './columnChooserFactory';\nimport type { ColumnMenuFactory } from './columnMenuFactory';\nimport type { MenuRestoreFocusParams, MenuUtils } from './menuUtils';\n\nexport interface TabSelectedEvent extends AgEvent<'tabSelected'> {\n    key: string;\n}\n\ninterface EnterpriseColumnMenu extends Bean {\n    getGui(): HTMLElement;\n    showTab?(tab: string): void;\n    afterGuiAttached(params?: IAfterGuiAttachedParams): void;\n    showTabBasedOnPreviousSelection?(): void;\n}\n\nconst TAB_FILTER = 'filterMenuTab' as const;\nconst TAB_GENERAL = 'generalMenuTab' as const;\nconst TAB_COLUMNS = 'columnsMenuTab' as const;\nconst TABS_DEFAULT: ColumnMenuTab[] = [TAB_GENERAL, TAB_FILTER, TAB_COLUMNS];\n\nexport class EnterpriseMenuFactory extends BeanStub implements NamedBean, IMenuFactory {\n    beanName = 'enterpriseMenuFactory' as const;\n\n    private popupService: PopupService;\n    private focusService: FocusService;\n    private ctrlsService: CtrlsService;\n    private visibleColsService: VisibleColsService;\n    private filterManager?: FilterManager;\n    private menuUtils: MenuUtils;\n    private menuService: MenuService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.popupService = beans.popupService;\n        this.focusService = beans.focusService;\n        this.ctrlsService = beans.ctrlsService;\n        this.visibleColsService = beans.visibleColsService;\n        this.filterManager = beans.filterManager;\n        this.menuUtils = beans.menuUtils as MenuUtils;\n        this.menuService = beans.menuService;\n    }\n\n    private lastSelectedTab: string;\n    private activeMenu: EnterpriseColumnMenu | null;\n\n    public hideActiveMenu(): void {\n        this.destroyBean(this.activeMenu);\n    }\n\n    public showMenuAfterMouseEvent(\n        column: AgColumn | undefined,\n        mouseEvent: MouseEvent | Touch,\n        containerType: ContainerType,\n        filtersOnly?: boolean\n    ): void {\n        const defaultTab = filtersOnly ? 'filterMenuTab' : undefined;\n        this.showMenu(\n            column,\n            (menu: EnterpriseColumnMenu) => {\n                const ePopup = menu.getGui();\n\n                this.popupService.positionPopupUnderMouseEvent({\n                    type: containerType,\n                    column,\n                    mouseEvent,\n                    ePopup,\n                });\n\n                if (defaultTab) {\n                    menu.showTab?.(defaultTab);\n                }\n                this.dispatchVisibleChangedEvent(true, false, column, defaultTab);\n            },\n            containerType,\n            defaultTab,\n            undefined,\n            mouseEvent.target as HTMLElement\n        );\n    }\n\n    public showMenuAfterButtonClick(\n        column: AgColumn | undefined,\n        eventSource: HTMLElement,\n        containerType: ContainerType,\n        filtersOnly?: boolean\n    ): void {\n        let multiplier = -1;\n        let alignSide: 'left' | 'right' = 'left';\n\n        if (this.gos.get('enableRtl')) {\n            multiplier = 1;\n            alignSide = 'right';\n        }\n\n        const defaultTab: ColumnMenuTab | undefined = filtersOnly ? 'filterMenuTab' : undefined;\n        const restrictToTabs = defaultTab ? [defaultTab] : undefined;\n\n        const isLegacyMenuEnabled = this.menuService.isLegacyMenuEnabled();\n        const nudgeX = (isLegacyMenuEnabled ? 9 : 4) * multiplier;\n        const nudgeY = isLegacyMenuEnabled ? -23 : 4;\n\n        this.showMenu(\n            column,\n            (menu: EnterpriseColumnMenu) => {\n                const ePopup = menu.getGui();\n\n                this.popupService.positionPopupByComponent({\n                    type: containerType,\n                    column,\n                    eventSource,\n                    ePopup,\n                    alignSide,\n                    nudgeX,\n                    nudgeY,\n                    position: 'under',\n                    keepWithinBounds: true,\n                });\n\n                if (defaultTab) {\n                    menu.showTab?.(defaultTab);\n                }\n                this.dispatchVisibleChangedEvent(true, false, column, defaultTab);\n            },\n            containerType,\n            defaultTab,\n            restrictToTabs,\n            eventSource\n        );\n    }\n\n    private showMenu(\n        column: AgColumn | undefined,\n        positionCallback: (menu: EnterpriseColumnMenu) => void,\n        containerType: ContainerType,\n        defaultTab?: string,\n        restrictToTabs?: ColumnMenuTab[],\n        eventSource?: HTMLElement\n    ): void {\n        const { menu, eMenuGui, anchorToElement, restoreFocusParams } = this.getMenuParams(\n            column,\n            restrictToTabs,\n            eventSource\n        );\n        const closedFuncs: ((e?: Event) => void)[] = [];\n\n        closedFuncs.push((e) => {\n            const eComp = menu.getGui();\n            this.destroyBean(menu);\n            if (column) {\n                column.setMenuVisible(false, 'contextMenu');\n                // if we don't have a column, then the menu wasn't launched via keyboard navigation\n                this.menuUtils.restoreFocusOnClose(restoreFocusParams, eComp, e);\n            }\n        });\n\n        const translate = this.localeService.getLocaleTextFunc();\n\n        // need to show filter before positioning, as only after filter\n        // is visible can we find out what the width of it is\n        this.popupService.addPopup({\n            modal: true,\n            eChild: eMenuGui,\n            closeOnEsc: true,\n            closedCallback: (e?: Event) => {\n                // menu closed callback\n                closedFuncs.forEach((f) => f(e));\n                this.dispatchVisibleChangedEvent(false, false, column, defaultTab);\n            },\n            afterGuiAttached: (params) =>\n                menu.afterGuiAttached(Object.assign({}, { container: containerType }, params)),\n            // if defaultTab is not present, positionCallback will be called\n            // after `showTabBasedOnPreviousSelection` is called.\n            positionCallback: defaultTab ? () => positionCallback(menu) : undefined,\n            ariaLabel: translate('ariaLabelColumnMenu', 'Column Menu'),\n        });\n\n        if (!defaultTab) {\n            menu.showTabBasedOnPreviousSelection?.();\n            // reposition the menu because the method above could load\n            // an element that is bigger than enterpriseMenu header.\n            positionCallback(menu);\n        }\n\n        if (this.menuService.isColumnMenuAnchoringEnabled()) {\n            // if user starts showing / hiding columns, or otherwise move the underlying column\n            // for this menu, we want to stop tracking the menu with the column position. otherwise\n            // the menu would move as the user is using the columns tab inside the menu.\n            const stopAnchoringPromise = this.popupService.setPopupPositionRelatedToElement(eMenuGui, anchorToElement);\n\n            if (stopAnchoringPromise && column) {\n                this.addStopAnchoring(stopAnchoringPromise, column, closedFuncs);\n            }\n        }\n\n        menu.addEventListener('tabSelected', (event: any) => {\n            this.dispatchVisibleChangedEvent(false, true, column);\n            this.lastSelectedTab = event.key;\n            this.dispatchVisibleChangedEvent(true, true, column);\n        });\n\n        column?.setMenuVisible(true, 'contextMenu');\n\n        this.activeMenu = menu;\n\n        menu.addEventListener('destroyed', () => {\n            if (this.activeMenu === menu) {\n                this.activeMenu = null;\n            }\n        });\n    }\n\n    private addStopAnchoring(\n        stopAnchoringPromise: AgPromise<() => void>,\n        column: AgColumn,\n        closedFuncsArr: (() => void)[]\n    ) {\n        stopAnchoringPromise.then((stopAnchoringFunc: () => void) => {\n            column.addEventListener('leftChanged', stopAnchoringFunc);\n            column.addEventListener('visibleChanged', stopAnchoringFunc);\n\n            closedFuncsArr.push(() => {\n                column.removeEventListener('leftChanged', stopAnchoringFunc);\n                column.removeEventListener('visibleChanged', stopAnchoringFunc);\n            });\n        });\n    }\n\n    private getMenuParams(column: AgColumn | undefined, restrictToTabs?: ColumnMenuTab[], eventSource?: HTMLElement) {\n        const restoreFocusParams = {\n            column,\n            headerPosition: this.focusService.getFocusedHeader(),\n            columnIndex: this.visibleColsService.getAllCols().indexOf(column as AgColumn),\n            eventSource,\n        };\n        const menu = this.createMenu(column, restoreFocusParams, restrictToTabs, eventSource);\n        return {\n            menu,\n            eMenuGui: menu.getGui(),\n            anchorToElement: eventSource || this.ctrlsService.getGridBodyCtrl().getGui(),\n            restoreFocusParams,\n        };\n    }\n\n    private createMenu(\n        column: AgColumn | undefined,\n        restoreFocusParams: MenuRestoreFocusParams,\n        restrictToTabs?: ColumnMenuTab[],\n        eventSource?: HTMLElement\n    ): EnterpriseColumnMenu & BeanStub<TabbedColumnMenuEvent | ComponentEvent> {\n        if (this.menuService.isLegacyMenuEnabled()) {\n            return this.createBean(\n                new TabbedColumnMenu(column, restoreFocusParams, this.lastSelectedTab, restrictToTabs, eventSource)\n            );\n        } else {\n            return this.createBean(new ColumnContextMenu(column, restoreFocusParams, eventSource));\n        }\n    }\n\n    private dispatchVisibleChangedEvent(\n        visible: boolean,\n        switchingTab: boolean,\n        column?: AgColumn,\n        defaultTab?: string\n    ): void {\n        const event: WithoutGridCommon<ColumnMenuVisibleChangedEvent> = {\n            type: 'columnMenuVisibleChanged',\n            visible,\n            switchingTab,\n            key: (this.lastSelectedTab ??\n                defaultTab ??\n                (this.menuService.isLegacyMenuEnabled() ? TAB_GENERAL : 'columnMenu')) as any,\n            column: column ?? null,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public isMenuEnabled(column: AgColumn): boolean {\n        if (!this.menuService.isLegacyMenuEnabled()) {\n            return true;\n        }\n        // Determine whether there are any tabs to show in the menu, given that the filter tab may be hidden\n        const isFilterDisabled = !this.filterManager?.isFilterAllowed(column);\n        const tabs = column.getColDef().menuTabs ?? TABS_DEFAULT;\n        const numActiveTabs = isFilterDisabled && tabs.includes(TAB_FILTER) ? tabs.length - 1 : tabs.length;\n        return numActiveTabs > 0;\n    }\n\n    public showMenuAfterContextMenuEvent(\n        column: AgColumn<any> | undefined,\n        mouseEvent?: MouseEvent | null,\n        touchEvent?: TouchEvent | null\n    ): void {\n        this.menuUtils.onContextMenu(mouseEvent, touchEvent, (eventOrTouch) => {\n            this.showMenuAfterMouseEvent(column, eventOrTouch, 'columnMenu');\n            return true;\n        });\n    }\n}\n\ntype TabbedColumnMenuEvent = 'tabSelected' | 'and';\nclass TabbedColumnMenu extends BeanStub<TabbedColumnMenuEvent> implements EnterpriseColumnMenu {\n    private filterManager?: FilterManager;\n    private columnChooserFactory: ColumnChooserFactory;\n    private columnMenuFactory: ColumnMenuFactory;\n    private menuUtils: MenuUtils;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.filterManager = beans.filterManager;\n        this.columnChooserFactory = beans.columnChooserFactory as ColumnChooserFactory;\n        this.columnMenuFactory = beans.columnMenuFactory as ColumnMenuFactory;\n        this.menuUtils = beans.menuUtils as MenuUtils;\n    }\n\n    private tabbedLayout: TabbedLayout;\n    private hidePopupFunc: (popupParams?: PopupEventParams) => void;\n    private mainMenuList: AgMenuList;\n\n    private tabItemFilter: TabbedItem;\n    private tabItemGeneral: TabbedItem;\n    private tabItemColumns: TabbedItem;\n\n    private tabFactories: { [p: string]: () => TabbedItem } = {};\n    private includeChecks: { [p: string]: () => boolean } = {};\n\n    private filterComp?: FilterWrapperComp | null;\n\n    constructor(\n        private readonly column: AgColumn | undefined,\n        private readonly restoreFocusParams: MenuRestoreFocusParams,\n        private readonly initialSelection: string,\n        private readonly restrictTo?: ColumnMenuTab[],\n        private readonly sourceElement?: HTMLElement\n    ) {\n        super();\n        this.tabFactories[TAB_GENERAL] = this.createMainPanel.bind(this);\n        this.tabFactories[TAB_FILTER] = this.createFilterPanel.bind(this);\n        this.tabFactories[TAB_COLUMNS] = this.createColumnsPanel.bind(this);\n\n        this.includeChecks[TAB_GENERAL] = () => true;\n        this.includeChecks[TAB_FILTER] = () => (column ? !!this.filterManager?.isFilterAllowed(column) : false);\n        this.includeChecks[TAB_COLUMNS] = () => true;\n    }\n\n    public postConstruct(): void {\n        const tabs = this.getTabsToCreate().map((name) => this.createTab(name));\n\n        this.tabbedLayout = new TabbedLayout({\n            items: tabs,\n            cssClass: 'ag-menu',\n            onActiveItemClicked: this.onHidePopup.bind(this),\n            onItemClicked: this.onTabItemClicked.bind(this),\n        });\n\n        this.createBean(this.tabbedLayout);\n\n        if (this.mainMenuList) {\n            this.mainMenuList.setParentComponent(this.tabbedLayout);\n        }\n\n        this.addDestroyFunc(() => this.destroyBean(this.tabbedLayout));\n    }\n\n    private getTabsToCreate() {\n        if (this.restrictTo) {\n            return this.restrictTo;\n        }\n\n        return (this.column?.getColDef().menuTabs ?? TABS_DEFAULT)\n            .filter((tabName) => this.isValidMenuTabItem(tabName))\n            .filter((tabName) => this.isNotSuppressed(tabName))\n            .filter((tabName) => this.isModuleLoaded(tabName));\n    }\n\n    private isModuleLoaded(menuTabName: string): boolean {\n        if (menuTabName === TAB_COLUMNS) {\n            return ModuleRegistry.__isRegistered(ModuleNames.ColumnsToolPanelModule, this.gridId);\n        }\n\n        return true;\n    }\n\n    private isValidMenuTabItem(menuTabName: ColumnMenuTab): boolean {\n        let isValid: boolean = true;\n        let itemsToConsider = TABS_DEFAULT;\n\n        if (this.restrictTo != null) {\n            isValid = this.restrictTo.indexOf(menuTabName) > -1;\n            itemsToConsider = this.restrictTo;\n        }\n\n        isValid = isValid && TABS_DEFAULT.indexOf(menuTabName) > -1;\n\n        if (!isValid) {\n            _warnOnce(\n                `Trying to render an invalid menu item '${menuTabName}'. Check that your 'menuTabs' contains one of [${itemsToConsider}]`\n            );\n        }\n\n        return isValid;\n    }\n\n    private isNotSuppressed(menuTabName: string): boolean {\n        return this.includeChecks[menuTabName]();\n    }\n\n    private createTab(name: string): TabbedItem {\n        return this.tabFactories[name]();\n    }\n\n    public showTabBasedOnPreviousSelection(): void {\n        // show the tab the user was on last time they had a menu open\n        this.showTab(this.initialSelection);\n    }\n\n    public showTab(toShow: string) {\n        if (this.tabItemColumns && toShow === TAB_COLUMNS) {\n            this.tabbedLayout.showItem(this.tabItemColumns);\n        } else if (this.tabItemFilter && toShow === TAB_FILTER) {\n            this.tabbedLayout.showItem(this.tabItemFilter);\n        } else if (this.tabItemGeneral && toShow === TAB_GENERAL) {\n            this.tabbedLayout.showItem(this.tabItemGeneral);\n        } else {\n            this.tabbedLayout.showFirstItem();\n        }\n    }\n\n    private onTabItemClicked(event: { item: TabbedItem }): void {\n        let key: string | null = null;\n\n        switch (event.item) {\n            case this.tabItemColumns:\n                key = TAB_COLUMNS;\n                break;\n            case this.tabItemFilter:\n                key = TAB_FILTER;\n                break;\n            case this.tabItemGeneral:\n                key = TAB_GENERAL;\n                break;\n        }\n\n        if (key) {\n            this.activateTab(key);\n        }\n    }\n\n    private activateTab(tab: string): void {\n        const ev: TabSelectedEvent = {\n            type: 'tabSelected',\n            key: tab,\n        };\n        this.dispatchLocalEvent(ev);\n    }\n\n    private createMainPanel(): TabbedItem {\n        this.mainMenuList = this.columnMenuFactory.createMenu(\n            this,\n            this.column,\n            () => this.sourceElement ?? this.getGui()\n        );\n        this.mainMenuList.addEventListener('closeMenu', this.onHidePopup.bind(this));\n\n        this.tabItemGeneral = {\n            title: _createIconNoSpan('menu', this.gos, this.column)!,\n            titleLabel: TAB_GENERAL.replace('MenuTab', ''),\n            bodyPromise: AgPromise.resolve(this.mainMenuList.getGui()),\n            name: TAB_GENERAL,\n        };\n\n        return this.tabItemGeneral;\n    }\n\n    private onHidePopup(event?: CloseMenuEvent): void {\n        this.menuUtils.closePopupAndRestoreFocusOnSelect(this.hidePopupFunc, this.restoreFocusParams, event);\n    }\n\n    private createFilterPanel(): TabbedItem {\n        const comp = this.column ? this.createBean(new FilterWrapperComp(this.column, 'COLUMN_MENU')) : null;\n        this.filterComp = comp;\n        if (!comp?.hasFilter()) {\n            throw new Error('AG Grid - Unable to instantiate filter');\n        }\n\n        const afterAttachedCallback = (params: IAfterGuiAttachedParams) => comp.afterGuiAttached(params);\n\n        const afterDetachedCallback = () => comp.afterGuiDetached();\n\n        this.tabItemFilter = {\n            title: _createIconNoSpan('filter', this.gos, this.column)!,\n            titleLabel: TAB_FILTER.replace('MenuTab', ''),\n            bodyPromise: AgPromise.resolve(comp?.getGui()) as AgPromise<HTMLElement>,\n            afterAttachedCallback,\n            afterDetachedCallback,\n            name: TAB_FILTER,\n        };\n\n        return this.tabItemFilter;\n    }\n\n    private createColumnsPanel(): TabbedItem {\n        const eWrapperDiv = document.createElement('div');\n        eWrapperDiv.classList.add('ag-menu-column-select-wrapper');\n\n        const columnSelectPanel = this.columnChooserFactory.createColumnSelectPanel(this, this.column);\n\n        const columnSelectPanelGui = columnSelectPanel.getGui();\n        columnSelectPanelGui.classList.add('ag-menu-column-select');\n        eWrapperDiv.appendChild(columnSelectPanelGui);\n\n        this.tabItemColumns = {\n            title: _createIconNoSpan('columns', this.gos, this.column)!, //createColumnsIcon(),\n            titleLabel: TAB_COLUMNS.replace('MenuTab', ''),\n            bodyPromise: AgPromise.resolve(eWrapperDiv),\n            name: TAB_COLUMNS,\n        };\n\n        return this.tabItemColumns;\n    }\n\n    public afterGuiAttached(params: IAfterGuiAttachedParams): void {\n        const { container, hidePopup } = params;\n\n        this.tabbedLayout.setAfterAttachedParams({ container, hidePopup });\n\n        if (hidePopup) {\n            this.hidePopupFunc = hidePopup;\n            this.addDestroyFunc(hidePopup);\n        }\n    }\n\n    public getGui(): HTMLElement {\n        return this.tabbedLayout.getGui();\n    }\n\n    public override destroy(): void {\n        super.destroy();\n        // Needs to be destroyed last to ensure that `afterGuiDetached` runs\n        this.destroyBean(this.filterComp);\n    }\n}\n\nclass ColumnContextMenu extends Component implements EnterpriseColumnMenu {\n    private columnMenuFactory: ColumnMenuFactory;\n    private menuUtils: MenuUtils;\n    private focusService: FocusService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnMenuFactory = beans.columnMenuFactory as ColumnMenuFactory;\n        this.menuUtils = beans.menuUtils as MenuUtils;\n        this.focusService = beans.focusService;\n    }\n\n    private readonly eColumnMenu: HTMLElement = RefPlaceholder;\n\n    private hidePopupFunc: (popupParams?: PopupEventParams) => void;\n    private mainMenuList: AgMenuList;\n\n    constructor(\n        private readonly column: AgColumn | undefined,\n        private readonly restoreFocusParams: MenuRestoreFocusParams,\n        private readonly sourceElement?: HTMLElement\n    ) {\n        super(/* html */ `\n            <div data-ref=\"eColumnMenu\" role=\"presentation\" class=\"ag-menu ag-column-menu\"></div>\n        `);\n    }\n\n    public postConstruct(): void {\n        this.mainMenuList = this.columnMenuFactory.createMenu(\n            this,\n            this.column,\n            () => this.sourceElement ?? this.getGui()\n        );\n        this.mainMenuList.addEventListener('closeMenu', this.onHidePopup.bind(this));\n        this.eColumnMenu.appendChild(this.mainMenuList.getGui());\n    }\n\n    private onHidePopup(event?: CloseMenuEvent): void {\n        this.menuUtils.closePopupAndRestoreFocusOnSelect(this.hidePopupFunc, this.restoreFocusParams, event);\n    }\n\n    public afterGuiAttached({ hidePopup }: IAfterGuiAttachedParams): void {\n        if (hidePopup) {\n            this.hidePopupFunc = hidePopup;\n            this.addDestroyFunc(hidePopup);\n        }\n        this.focusService.focusInto(this.mainMenuList.getGui());\n    }\n}\n", "import type { AgColumn, BeanCollection, ColumnChooserParams, IContextMenuParams } from '@ag-grid-community/core';\n\nexport function showContextMenu(beans: BeanCollection, params?: IContextMenuParams) {\n    const { rowNode, column, value, x, y } = params || {};\n    let { x: clientX, y: clientY } = beans.menuService.getContextMenuPosition(rowNode, column as AgColumn);\n\n    if (x != null) {\n        clientX = x;\n    }\n\n    if (y != null) {\n        clientY = y;\n    }\n\n    beans.menuService.showContextMenu({\n        mouseEvent: new MouseEvent('mousedown', { clientX, clientY }),\n        rowNode,\n        column,\n        value,\n    });\n}\n\nexport function showColumnChooser(beans: BeanCollection, params?: ColumnChooserParams): void {\n    beans.menuService.showColumnChooser({ chooserParams: params });\n}\n\nexport function hideColumnChooser(beans: BeanCollection): void {\n    beans.menuService.hideColumnChooser();\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    ColumnApplyStateService,\n    ColumnAutosizeService,\n    ColumnEventType,\n    ColumnModel,\n    ColumnNameService,\n    FocusService,\n    FuncColsService,\n    IAggFuncService,\n    IClipboardService,\n    ICsvCreator,\n    IExcelCreator,\n    IExpansionService,\n    MenuItemDef,\n    MenuService,\n    NamedBean,\n    RowPositionUtils,\n    SortController,\n} from '@ag-grid-community/core';\nimport {\n    BeanStub,\n    ModuleNames,\n    ModuleRegistry,\n    _createIconNoSpan,\n    _escapeString,\n    _exists,\n    _warnOnce,\n} from '@ag-grid-community/core';\n\nimport type { ChartMenuItemMapper } from './chartMenuItemMapper';\n\nexport class MenuItemMapper extends BeanStub implements NamedBean {\n    beanName = 'menuItemMapper' as const;\n\n    private columnModel: ColumnModel;\n    private columnNameService: ColumnNameService;\n    private columnApplyStateService: ColumnApplyStateService;\n    private funcColsService: FuncColsService;\n    private focusService: FocusService;\n    private rowPositionUtils: RowPositionUtils;\n    private chartMenuItemMapper: ChartMenuItemMapper;\n    private menuService: MenuService;\n    private sortController: SortController;\n    private columnAutosizeService: ColumnAutosizeService;\n    private expansionService: IExpansionService;\n    private clipboardService?: IClipboardService;\n    private aggFuncService?: IAggFuncService;\n    private csvCreator?: ICsvCreator;\n    private excelCreator?: IExcelCreator;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n        this.columnNameService = beans.columnNameService;\n        this.columnApplyStateService = beans.columnApplyStateService;\n        this.funcColsService = beans.funcColsService;\n        this.focusService = beans.focusService;\n        this.rowPositionUtils = beans.rowPositionUtils;\n        this.chartMenuItemMapper = beans.chartMenuItemMapper as ChartMenuItemMapper;\n        this.menuService = beans.menuService;\n        this.sortController = beans.sortController;\n        this.columnAutosizeService = beans.columnAutosizeService;\n        this.expansionService = beans.expansionService;\n        this.clipboardService = beans.clipboardService;\n        this.aggFuncService = beans.aggFuncService;\n        this.csvCreator = beans.csvCreator;\n        this.excelCreator = beans.excelCreator;\n    }\n\n    public mapWithStockItems(\n        originalList: (MenuItemDef | string)[],\n        column: AgColumn | null,\n        sourceElement: () => HTMLElement,\n        source: ColumnEventType\n    ): (MenuItemDef | string)[] {\n        if (!originalList) {\n            return [];\n        }\n\n        const resultList: (MenuItemDef | string)[] = [];\n\n        originalList.forEach((menuItemOrString) => {\n            let result: MenuItemDef | string | null;\n\n            if (typeof menuItemOrString === 'string') {\n                result = this.getStockMenuItem(menuItemOrString, column, sourceElement, source);\n            } else {\n                // Spread to prevent leaking mapped subMenus back into the original menuItem\n                result = { ...menuItemOrString };\n            }\n            // if no mapping, can happen when module is not loaded but user tries to use module anyway\n            if (!result) {\n                return;\n            }\n\n            const resultDef = result as MenuItemDef;\n            const { subMenu } = resultDef;\n\n            if (subMenu && subMenu instanceof Array) {\n                resultDef.subMenu = this.mapWithStockItems(subMenu, column, sourceElement, source);\n            }\n\n            if (result != null) {\n                resultList.push(result);\n            }\n        });\n\n        return resultList;\n    }\n\n    private getStockMenuItem(\n        key: string,\n        column: AgColumn | null,\n        sourceElement: () => HTMLElement,\n        source: ColumnEventType\n    ): MenuItemDef | string | null {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const skipHeaderOnAutoSize = this.gos.get('skipHeaderOnAutoSize');\n\n        switch (key) {\n            case 'pinSubMenu':\n                return {\n                    name: localeTextFunc('pinColumn', 'Pin Column'),\n                    icon: _createIconNoSpan('menuPin', this.gos, null),\n                    subMenu: ['clearPinned', 'pinLeft', 'pinRight'],\n                };\n            case 'pinLeft':\n                return {\n                    name: localeTextFunc('pinLeft', 'Pin Left'),\n                    action: () => this.columnModel.setColsPinned([column], 'left', source),\n                    checked: !!column && column.isPinnedLeft(),\n                };\n            case 'pinRight':\n                return {\n                    name: localeTextFunc('pinRight', 'Pin Right'),\n                    action: () => this.columnModel.setColsPinned([column], 'right', source),\n                    checked: !!column && column.isPinnedRight(),\n                };\n            case 'clearPinned':\n                return {\n                    name: localeTextFunc('noPin', 'No Pin'),\n                    action: () => this.columnModel.setColsPinned([column], null, source),\n                    checked: !!column && !column.isPinned(),\n                };\n            case 'valueAggSubMenu':\n                if (\n                    ModuleRegistry.__assertRegistered(\n                        ModuleNames.RowGroupingModule,\n                        'Aggregation from Menu',\n                        this.gridId\n                    )\n                ) {\n                    if (!column?.isPrimary() && !column?.getColDef().pivotValueColumn) {\n                        return null;\n                    }\n\n                    return {\n                        name: localeTextFunc('valueAggregation', 'Value Aggregation'),\n                        icon: _createIconNoSpan('menuValue', this.gos, null),\n                        subMenu: this.createAggregationSubMenu(column!, this.aggFuncService!),\n                    };\n                } else {\n                    return null;\n                }\n            case 'autoSizeThis':\n                return {\n                    name: localeTextFunc('autosizeThisColumn', 'Autosize This Column'),\n                    action: () => this.columnAutosizeService.autoSizeColumn(column, source, skipHeaderOnAutoSize),\n                };\n            case 'autoSizeAll':\n                return {\n                    name: localeTextFunc('autosizeAllColumns', 'Autosize All Columns'),\n                    action: () => this.columnAutosizeService.autoSizeAllColumns(source, skipHeaderOnAutoSize),\n                };\n            case 'rowGroup':\n                return {\n                    name:\n                        localeTextFunc('groupBy', 'Group by') +\n                        ' ' +\n                        _escapeString(this.columnNameService.getDisplayNameForColumn(column, 'header')),\n                    disabled:\n                        this.gos.get('functionsReadOnly') ||\n                        column?.isRowGroupActive() ||\n                        !column?.getColDef().enableRowGroup,\n                    action: () => this.funcColsService.addRowGroupColumns([column], source),\n                    icon: _createIconNoSpan('menuAddRowGroup', this.gos, null),\n                };\n            case 'rowUnGroup': {\n                const icon = _createIconNoSpan('menuRemoveRowGroup', this.gos, null);\n                const showRowGroup = column?.getColDef().showRowGroup;\n                const lockedGroups = this.gos.get('groupLockGroupColumns');\n                // Handle single auto group column\n                if (showRowGroup === true) {\n                    return {\n                        name: localeTextFunc('ungroupAll', 'Un-Group All'),\n                        disabled:\n                            this.gos.get('functionsReadOnly') ||\n                            lockedGroups === -1 ||\n                            lockedGroups >= this.funcColsService.getRowGroupColumns().length,\n                        action: () =>\n                            this.funcColsService.setRowGroupColumns(\n                                this.funcColsService.getRowGroupColumns().slice(0, lockedGroups),\n                                source\n                            ),\n                        icon: icon,\n                    };\n                }\n                // Handle multiple auto group columns\n                if (typeof showRowGroup === 'string') {\n                    const underlyingColumn = this.columnModel.getColDefCol(showRowGroup);\n                    const ungroupByName =\n                        underlyingColumn != null\n                            ? _escapeString(this.columnNameService.getDisplayNameForColumn(underlyingColumn, 'header'))\n                            : showRowGroup;\n                    return {\n                        name: localeTextFunc('ungroupBy', 'Un-Group by') + ' ' + ungroupByName,\n                        disabled:\n                            this.gos.get('functionsReadOnly') ||\n                            (underlyingColumn != null && this.columnModel.isColGroupLocked(underlyingColumn)),\n                        action: () => this.funcColsService.removeRowGroupColumns([showRowGroup], source),\n                        icon: icon,\n                    };\n                }\n                // Handle primary column\n                return {\n                    name:\n                        localeTextFunc('ungroupBy', 'Un-Group by') +\n                        ' ' +\n                        _escapeString(this.columnNameService.getDisplayNameForColumn(column, 'header')),\n                    disabled:\n                        this.gos.get('functionsReadOnly') ||\n                        !column?.isRowGroupActive() ||\n                        !column?.getColDef().enableRowGroup ||\n                        this.columnModel.isColGroupLocked(column),\n                    action: () => this.funcColsService.removeRowGroupColumns([column], source),\n                    icon: icon,\n                };\n            }\n            case 'resetColumns':\n                return {\n                    name: localeTextFunc('resetColumns', 'Reset Columns'),\n                    action: () => this.columnApplyStateService.resetColumnState(source),\n                };\n            case 'expandAll':\n                return {\n                    name: localeTextFunc('expandAll', 'Expand All Row Groups'),\n                    action: () => this.expansionService.expandAll(true),\n                };\n            case 'contractAll':\n                return {\n                    name: localeTextFunc('collapseAll', 'Collapse All Row Groups'),\n                    action: () => this.expansionService.expandAll(false),\n                };\n            case 'copy':\n                if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, 'Copy from Menu', this.gridId)) {\n                    return {\n                        name: localeTextFunc('copy', 'Copy'),\n                        shortcut: localeTextFunc('ctrlC', 'Ctrl+C'),\n                        icon: _createIconNoSpan('clipboardCopy', this.gos, null),\n                        action: () => this.clipboardService!.copyToClipboard(),\n                    };\n                } else {\n                    return null;\n                }\n            case 'copyWithHeaders':\n                if (\n                    ModuleRegistry.__assertRegistered(\n                        ModuleNames.ClipboardModule,\n                        'Copy with Headers from Menu',\n                        this.gridId\n                    )\n                ) {\n                    return {\n                        name: localeTextFunc('copyWithHeaders', 'Copy with Headers'),\n                        // shortcut: localeTextFunc('ctrlC','Ctrl+C'),\n                        icon: _createIconNoSpan('clipboardCopy', this.gos, null),\n                        action: () => this.clipboardService!.copyToClipboard({ includeHeaders: true }),\n                    };\n                } else {\n                    return null;\n                }\n            case 'copyWithGroupHeaders':\n                if (\n                    ModuleRegistry.__assertRegistered(\n                        ModuleNames.ClipboardModule,\n                        'Copy with Group Headers from Menu',\n                        this.gridId\n                    )\n                ) {\n                    return {\n                        name: localeTextFunc('copyWithGroupHeaders', 'Copy with Group Headers'),\n                        // shortcut: localeTextFunc('ctrlC','Ctrl+C'),\n                        icon: _createIconNoSpan('clipboardCopy', this.gos, null),\n                        action: () =>\n                            this.clipboardService!.copyToClipboard({ includeHeaders: true, includeGroupHeaders: true }),\n                    };\n                } else {\n                    return null;\n                }\n            case 'cut':\n                if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, 'Cut from Menu', this.gridId)) {\n                    const focusedCell = this.focusService.getFocusedCell();\n                    const rowNode = focusedCell ? this.rowPositionUtils.getRowNode(focusedCell) : null;\n                    const isEditable = rowNode ? focusedCell?.column.isCellEditable(rowNode) : false;\n                    return {\n                        name: localeTextFunc('cut', 'Cut'),\n                        shortcut: localeTextFunc('ctrlX', 'Ctrl+X'),\n                        icon: _createIconNoSpan('clipboardCut', this.gos, null),\n                        disabled: !isEditable || this.gos.get('suppressCutToClipboard'),\n                        action: () => this.clipboardService!.cutToClipboard(undefined, 'contextMenu'),\n                    };\n                } else {\n                    return null;\n                }\n            case 'paste':\n                if (\n                    ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, 'Paste from Clipboard', this.gridId)\n                ) {\n                    return {\n                        name: localeTextFunc('paste', 'Paste'),\n                        shortcut: localeTextFunc('ctrlV', 'Ctrl+V'),\n                        disabled: true,\n                        icon: _createIconNoSpan('clipboardPaste', this.gos, null),\n                        action: () => this.clipboardService!.pasteFromClipboard(),\n                    };\n                } else {\n                    return null;\n                }\n            case 'export': {\n                const exportSubMenuItems: string[] = [];\n\n                const csvModuleLoaded = ModuleRegistry.__isRegistered(ModuleNames.CsvExportModule, this.gridId);\n                const excelModuleLoaded = ModuleRegistry.__isRegistered(ModuleNames.ExcelExportModule, this.gridId);\n\n                if (!this.gos.get('suppressCsvExport') && csvModuleLoaded) {\n                    exportSubMenuItems.push('csvExport');\n                }\n                if (!this.gos.get('suppressExcelExport') && excelModuleLoaded) {\n                    exportSubMenuItems.push('excelExport');\n                }\n                return {\n                    name: localeTextFunc('export', 'Export'),\n                    subMenu: exportSubMenuItems,\n                    icon: _createIconNoSpan('save', this.gos, null),\n                };\n            }\n            case 'csvExport':\n                return {\n                    name: localeTextFunc('csvExport', 'CSV Export'),\n                    icon: _createIconNoSpan('csvExport', this.gos, null),\n                    action: () => this.csvCreator?.exportDataAsCsv(),\n                };\n            case 'excelExport':\n                return {\n                    name: localeTextFunc('excelExport', 'Excel Export'),\n                    icon: _createIconNoSpan('excelExport', this.gos, null),\n                    action: () => this.excelCreator?.exportDataAsExcel(),\n                };\n            case 'separator':\n                return 'separator';\n            case 'pivotChart':\n            case 'chartRange':\n                return this.chartMenuItemMapper.getChartItems(key) ?? null;\n            case 'columnFilter':\n                if (column) {\n                    return {\n                        name: localeTextFunc('columnFilter', 'Column Filter'),\n                        icon: _createIconNoSpan('filter', this.gos, null),\n                        action: () =>\n                            this.menuService.showFilterMenu({\n                                column,\n                                buttonElement: sourceElement(),\n                                containerType: 'columnFilter',\n                                positionBy: 'button',\n                            }),\n                    };\n                } else {\n                    return null;\n                }\n            case 'columnChooser':\n                if (ModuleRegistry.__isRegistered(ModuleNames.ColumnsToolPanelModule, this.gridId)) {\n                    return {\n                        name: localeTextFunc('columnChooser', 'Choose Columns'),\n                        icon: _createIconNoSpan('columns', this.gos, null),\n                        action: () => this.menuService.showColumnChooser({ column, eventSource: sourceElement() }),\n                    };\n                } else {\n                    return null;\n                }\n            case 'sortAscending':\n                return {\n                    name: localeTextFunc('sortAscending', 'Sort Ascending'),\n                    icon: _createIconNoSpan('sortAscending', this.gos, null),\n                    action: () => this.sortController.setSortForColumn(column!, 'asc', false, source),\n                };\n            case 'sortDescending':\n                return {\n                    name: localeTextFunc('sortDescending', 'Sort Descending'),\n                    icon: _createIconNoSpan('sortDescending', this.gos, null),\n                    action: () => this.sortController.setSortForColumn(column!, 'desc', false, source),\n                };\n            case 'sortUnSort':\n                return {\n                    name: localeTextFunc('sortUnSort', 'Clear Sort'),\n                    icon: _createIconNoSpan('sortUnSort', this.gos, null),\n                    action: () => this.sortController.setSortForColumn(column!, null, false, source),\n                };\n            default: {\n                _warnOnce(`unknown menu item type ${key}`);\n                return null;\n            }\n        }\n    }\n\n    private createAggregationSubMenu(column: AgColumn, aggFuncService: IAggFuncService): MenuItemDef[] {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n\n        let columnToUse: AgColumn | undefined;\n        if (column.isPrimary()) {\n            columnToUse = column;\n        } else {\n            const pivotValueColumn = column.getColDef().pivotValueColumn as AgColumn;\n            columnToUse = _exists(pivotValueColumn) ? pivotValueColumn : undefined;\n        }\n\n        const result: MenuItemDef[] = [];\n        if (columnToUse) {\n            const columnIsAlreadyAggValue = columnToUse.isValueActive();\n            const funcNames = aggFuncService.getFuncNames(columnToUse);\n\n            result.push({\n                name: localeTextFunc('noAggregation', 'None'),\n                action: () => {\n                    this.funcColsService.removeValueColumns([columnToUse!], 'contextMenu');\n                    this.funcColsService.setColumnAggFunc(columnToUse, undefined, 'contextMenu');\n                },\n                checked: !columnIsAlreadyAggValue,\n            });\n\n            funcNames.forEach((funcName) => {\n                result.push({\n                    name: localeTextFunc(funcName, aggFuncService.getDefaultFuncLabel(funcName)),\n                    action: () => {\n                        this.funcColsService.setColumnAggFunc(columnToUse, funcName, 'contextMenu');\n                        this.funcColsService.addValueColumns([columnToUse!], 'contextMenu');\n                    },\n                    checked: columnIsAlreadyAggValue && columnToUse!.getAggFunc() === funcName,\n                });\n            });\n        }\n\n        return result;\n    }\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    FocusService,\n    HeaderNavigationService,\n    HeaderPosition,\n    NamedBean,\n    PopupEventParams,\n    VisibleColsService,\n} from '@ag-grid-community/core';\nimport { BeanStub, _isVisible, _last } from '@ag-grid-community/core';\nimport type { CloseMenuEvent } from '@ag-grid-enterprise/core';\n\nexport interface MenuRestoreFocusParams {\n    column: AgColumn | undefined;\n    headerPosition: HeaderPosition | null;\n    columnIndex: number;\n    eventSource?: HTMLElement;\n}\n\nexport class MenuUtils extends BeanStub implements NamedBean {\n    beanName = 'menuUtils' as const;\n\n    private focusService: FocusService;\n    private headerNavigationService: HeaderNavigationService;\n    private visibleColsService: VisibleColsService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.focusService = beans.focusService;\n        this.headerNavigationService = beans.headerNavigationService;\n        this.visibleColsService = beans.visibleColsService;\n    }\n\n    public restoreFocusOnClose(\n        restoreFocusParams: MenuRestoreFocusParams,\n        eComp: HTMLElement,\n        e?: Event,\n        restoreIfMouseEvent?: boolean\n    ): void {\n        const { eventSource } = restoreFocusParams;\n        const isKeyboardEvent = e instanceof KeyboardEvent;\n        if ((!restoreIfMouseEvent && !isKeyboardEvent) || !eventSource) {\n            return;\n        }\n\n        const eDocument = this.gos.getDocument();\n        const activeEl = this.gos.getActiveDomElement();\n        if (!eComp.contains(activeEl) && activeEl !== eDocument.body) {\n            // something else has focus, so don't return focus to the header\n            return;\n        }\n\n        this.focusHeaderCell(restoreFocusParams);\n    }\n\n    public closePopupAndRestoreFocusOnSelect(\n        hidePopupFunc: (popupParams?: PopupEventParams) => void,\n        restoreFocusParams: MenuRestoreFocusParams,\n        event?: CloseMenuEvent\n    ): void {\n        let keyboardEvent: KeyboardEvent | undefined;\n\n        if (event && event.keyboardEvent) {\n            keyboardEvent = event.keyboardEvent;\n        }\n\n        hidePopupFunc(keyboardEvent && { keyboardEvent });\n\n        // this method only gets called when the menu was closed by selecting an option\n        // in this case we focus the cell that was previously focused, otherwise the header\n        const focusedCell = this.focusService.getFocusedCell();\n        const eDocument = this.gos.getDocument();\n        const activeEl = this.gos.getActiveDomElement();\n\n        if (!activeEl || activeEl === eDocument.body) {\n            if (focusedCell) {\n                const { rowIndex, rowPinned, column } = focusedCell;\n                this.focusService.setFocusedCell({\n                    rowIndex,\n                    column,\n                    rowPinned,\n                    forceBrowserFocus: true,\n                    preventScrollOnBrowserFocus: true,\n                });\n            } else {\n                this.focusHeaderCell(restoreFocusParams);\n            }\n        }\n    }\n\n    public onContextMenu(\n        mouseEvent: MouseEvent | null | undefined,\n        touchEvent: TouchEvent | null | undefined,\n        showMenuCallback: (eventOrTouch: MouseEvent | Touch) => boolean\n    ): void {\n        // to allow us to debug in chrome, we ignore the event if ctrl is pressed.\n        // not everyone wants this, so first 'if' below allows to turn this hack off.\n        if (!this.gos.get('allowContextMenuWithControlKey')) {\n            // then do the check\n            if (mouseEvent && (mouseEvent.ctrlKey || mouseEvent.metaKey)) {\n                return;\n            }\n        }\n\n        // need to do this regardless of context menu showing or not, so doing\n        // before the isSuppressContextMenu() check\n        if (mouseEvent) {\n            this.blockMiddleClickScrollsIfNeeded(mouseEvent);\n        }\n\n        if (this.gos.get('suppressContextMenu')) {\n            return;\n        }\n\n        const eventOrTouch: MouseEvent | Touch = mouseEvent ?? touchEvent!.touches[0];\n        if (showMenuCallback(eventOrTouch)) {\n            const event = mouseEvent ?? touchEvent;\n\n            if (event && event.cancelable) {\n                event.preventDefault();\n            }\n        }\n    }\n\n    private focusHeaderCell(restoreFocusParams: MenuRestoreFocusParams): void {\n        const { column, columnIndex, headerPosition, eventSource } = restoreFocusParams;\n\n        const isColumnStillVisible = this.visibleColsService.getAllCols().some((col) => col === column);\n\n        if (isColumnStillVisible && eventSource && _isVisible(eventSource)) {\n            const focusableEl = this.focusService.findTabbableParent(eventSource);\n            if (focusableEl) {\n                if (column) {\n                    this.headerNavigationService.scrollToColumn(column);\n                }\n                focusableEl.focus();\n            }\n        }\n        // if the focusEl is no longer in the DOM, we try to focus\n        // the header that is closest to the previous header position\n        else if (headerPosition && columnIndex !== -1) {\n            const allColumns = this.visibleColsService.getAllCols();\n            const columnToFocus = allColumns[columnIndex] || _last(allColumns);\n\n            if (columnToFocus) {\n                this.focusService.focusHeaderPosition({\n                    headerPosition: {\n                        headerRowIndex: headerPosition.headerRowIndex,\n                        column: columnToFocus,\n                    },\n                });\n            }\n        }\n    }\n\n    private blockMiddleClickScrollsIfNeeded(mouseEvent: MouseEvent): void {\n        // if we don't do this, then middle click will never result in a 'click' event, as 'mousedown'\n        // will be consumed by the browser to mean 'scroll' (as you can scroll with the middle mouse\n        // button in the browser). so this property allows the user to receive middle button clicks if\n        // they want.\n        if (this.gos.get('suppressMiddleClickScrolls') && mouseEvent.which === 2) {\n            mouseEvent.preventDefault();\n        }\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.3.1';\n"],
  "mappings": "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",
  "names": ["ModuleNames", "BeanStub", "BeanStub", "BeanStub", "ModuleNames", "ModuleRegistry", "AgMenuList", "BeanStub", "Component", "ModuleNames", "ModuleRegistry", "_createIconNoSpan", "_warnOnce", "BeanStub", "ModuleNames", "ModuleRegistry", "_createIconNoSpan", "_exists", "_warnOnce", "BeanStub", "ModuleNames"]
}
