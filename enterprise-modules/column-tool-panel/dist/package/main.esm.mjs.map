{
  "version": 3,
  "sources": ["../../src/columnsToolPanelModule.ts", "../../src/columnToolPanel/columnToolPanel.ts", "../../src/columnToolPanel/agPrimaryCols.ts", "../../src/columnToolPanel/agPrimaryColsHeader.ts", "../../src/columnToolPanel/agPrimaryColsList.ts", "../../src/columnToolPanel/columnModelItem.ts", "../../src/columnToolPanel/primaryColsListPanelItemDragFeature.ts", "../../src/columnToolPanel/toolPanelColumnGroupComp.ts", "../../src/columnToolPanel/toolPanelContextMenu.ts", "../../src/columnToolPanel/toolPanelColumnComp.ts", "../../src/columnToolPanel/pivotModePanel.ts", "../../src/columnToolPanel/modelItemUtils.ts", "../../src/version.ts"],
  "sourcesContent": ["import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames } from '@ag-grid-community/core';\nimport { AgMenuItemRenderer, EnterpriseCoreModule } from '@ag-grid-enterprise/core';\nimport { RowGroupingModule } from '@ag-grid-enterprise/row-grouping';\nimport { SideBarModule } from '@ag-grid-enterprise/side-bar';\n\nimport { ColumnToolPanel } from './columnToolPanel/columnToolPanel';\nimport { ModelItemUtils } from './columnToolPanel/modelItemUtils';\nimport { VERSION } from './version';\n\nexport const ColumnsToolPanelModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.ColumnsToolPanelModule,\n    beans: [ModelItemUtils],\n    userComponents: [\n        { name: 'agColumnsToolPanel', classImp: ColumnToolPanel },\n        {\n            name: 'agMenuItem',\n            classImp: AgMenuItemRenderer,\n        },\n    ],\n    dependantModules: [EnterpriseCoreModule, RowGroupingModule, SideBarModule],\n};\n", "import type {\n    ColDef,\n    ColGroupDef,\n    ColumnToolPanelState,\n    IColumnToolPanel,\n    IToolPanelColumnCompParams,\n    IToolPanelComp,\n    IToolPanelParams,\n} from '@ag-grid-community/core';\nimport { Component, ModuleNames, ModuleRegistry, _clearElement, _last } from '@ag-grid-community/core';\nimport { PivotDropZonePanel, RowGroupDropZonePanel, ValuesDropZonePanel } from '@ag-grid-enterprise/row-grouping';\n\nimport { AgPrimaryCols } from './agPrimaryCols';\nimport { PivotModePanel } from './pivotModePanel';\n\nexport interface ToolPanelColumnCompParams<TData = any, TContext = any>\n    extends IToolPanelParams<TData, TContext, ColumnToolPanelState>,\n        IToolPanelColumnCompParams {}\n\nexport class ColumnToolPanel extends Component implements IColumnToolPanel, IToolPanelComp {\n    private initialised = false;\n    private params: ToolPanelColumnCompParams;\n\n    private childDestroyFuncs: (() => void)[] = [];\n\n    private pivotModePanel: PivotModePanel;\n    private primaryColsPanel: AgPrimaryCols;\n    private rowGroupDropZonePanel: RowGroupDropZonePanel;\n    private valuesDropZonePanel: ValuesDropZonePanel;\n    private pivotDropZonePanel: PivotDropZonePanel;\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-column-panel\"></div>`);\n    }\n\n    // lazy initialise the panel\n    public override setVisible(visible: boolean): void {\n        super.setDisplayed(visible);\n        if (visible && !this.initialised) {\n            this.init(this.params);\n        }\n    }\n\n    public init(params: ToolPanelColumnCompParams): void {\n        const defaultParams: Partial<ToolPanelColumnCompParams> = this.gos.addGridCommonParams({\n            suppressColumnMove: false,\n            suppressColumnSelectAll: false,\n            suppressColumnFilter: false,\n            suppressColumnExpandAll: false,\n            contractColumnSelection: false,\n            suppressPivotMode: false,\n            suppressRowGroups: false,\n            suppressValues: false,\n            suppressPivots: false,\n            suppressSyncLayoutWithGrid: false,\n        });\n        this.params = {\n            ...defaultParams,\n            ...params,\n        };\n\n        if (this.isRowGroupingModuleLoaded() && !this.params.suppressPivotMode) {\n            // DO NOT CHANGE TO createManagedBean\n            this.pivotModePanel = this.createBean(new PivotModePanel());\n            this.childDestroyFuncs.push(() => this.destroyBean(this.pivotModePanel));\n            this.appendChild(this.pivotModePanel);\n        }\n\n        // DO NOT CHANGE TO createManagedBean\n        this.primaryColsPanel = this.createBean(new AgPrimaryCols());\n        this.childDestroyFuncs.push(() => this.destroyBean(this.primaryColsPanel));\n\n        this.primaryColsPanel.init(true, this.params, 'toolPanelUi');\n        this.primaryColsPanel.addCssClass('ag-column-panel-column-select');\n        this.appendChild(this.primaryColsPanel);\n\n        if (this.isRowGroupingModuleLoaded()) {\n            if (!this.params.suppressRowGroups) {\n                // DO NOT CHANGE TO createManagedBean\n                this.rowGroupDropZonePanel = this.createBean(new RowGroupDropZonePanel(false));\n                this.childDestroyFuncs.push(() => this.destroyBean(this.rowGroupDropZonePanel));\n                this.appendChild(this.rowGroupDropZonePanel);\n            }\n\n            if (!this.params.suppressValues) {\n                // DO NOT CHANGE TO createManagedBean\n                this.valuesDropZonePanel = this.createBean(new ValuesDropZonePanel(false));\n                this.childDestroyFuncs.push(() => this.destroyBean(this.valuesDropZonePanel));\n                this.appendChild(this.valuesDropZonePanel);\n            }\n\n            if (!this.params.suppressPivots) {\n                // DO NOT CHANGE TO createManagedBean\n                this.pivotDropZonePanel = this.createBean(new PivotDropZonePanel(false));\n                this.childDestroyFuncs.push(() => this.destroyBean(this.pivotDropZonePanel));\n                this.appendChild(this.pivotDropZonePanel);\n            }\n\n            this.setLastVisible();\n            const [pivotModeListener] = this.addManagedEventListeners({\n                columnPivotModeChanged: () => {\n                    this.resetChildrenHeight();\n                    this.setLastVisible();\n                },\n            });\n            this.childDestroyFuncs.push(() => pivotModeListener!());\n        }\n\n        this.initialised = true;\n    }\n\n    public setPivotModeSectionVisible(visible: boolean): void {\n        if (!this.isRowGroupingModuleLoaded()) {\n            return;\n        }\n\n        if (this.pivotModePanel) {\n            this.pivotModePanel.setDisplayed(visible);\n        } else if (visible) {\n            this.pivotModePanel = this.createBean(new PivotModePanel());\n\n            // ensure pivot mode panel is positioned at the top of the columns tool panel\n            this.getGui().insertBefore(this.pivotModePanel.getGui(), this.getGui().firstChild);\n            this.childDestroyFuncs.push(() => this.destroyBean(this.pivotModePanel));\n        }\n        this.setLastVisible();\n    }\n\n    public setRowGroupsSectionVisible(visible: boolean): void {\n        if (!this.isRowGroupingModuleLoaded()) {\n            return;\n        }\n\n        if (this.rowGroupDropZonePanel) {\n            this.rowGroupDropZonePanel.setDisplayed(visible);\n        } else if (visible) {\n            this.rowGroupDropZonePanel = this.createManagedBean(new RowGroupDropZonePanel(false));\n            this.appendChild(this.rowGroupDropZonePanel);\n        }\n        this.setLastVisible();\n    }\n\n    public setValuesSectionVisible(visible: boolean): void {\n        if (!this.isRowGroupingModuleLoaded()) {\n            return;\n        }\n\n        if (this.valuesDropZonePanel) {\n            this.valuesDropZonePanel.setDisplayed(visible);\n        } else if (visible) {\n            this.valuesDropZonePanel = this.createManagedBean(new ValuesDropZonePanel(false));\n            this.appendChild(this.valuesDropZonePanel);\n        }\n        this.setLastVisible();\n    }\n\n    public setPivotSectionVisible(visible: boolean): void {\n        if (!this.isRowGroupingModuleLoaded()) {\n            return;\n        }\n\n        if (this.pivotDropZonePanel) {\n            this.pivotDropZonePanel.setDisplayed(visible);\n        } else if (visible) {\n            this.pivotDropZonePanel = this.createManagedBean(new PivotDropZonePanel(false));\n            this.appendChild(this.pivotDropZonePanel);\n            this.pivotDropZonePanel.setDisplayed(visible);\n        }\n        this.setLastVisible();\n    }\n\n    private setResizers(): void {\n        [this.primaryColsPanel, this.rowGroupDropZonePanel, this.valuesDropZonePanel, this.pivotDropZonePanel].forEach(\n            (panel) => {\n                if (!panel) {\n                    return;\n                }\n                const eGui = panel.getGui();\n                panel.toggleResizable(\n                    !eGui.classList.contains('ag-last-column-drop') && !eGui.classList.contains('ag-hidden')\n                );\n            }\n        );\n    }\n\n    private setLastVisible(): void {\n        const eGui = this.getGui();\n\n        const columnDrops: HTMLElement[] = Array.prototype.slice.call(eGui.querySelectorAll('.ag-column-drop'));\n\n        columnDrops.forEach((columnDrop) => columnDrop.classList.remove('ag-last-column-drop'));\n\n        const columnDropEls = eGui.querySelectorAll('.ag-column-drop:not(.ag-hidden)');\n        const lastVisible = _last(columnDropEls) as HTMLElement;\n\n        if (lastVisible) {\n            lastVisible.classList.add('ag-last-column-drop');\n        }\n\n        this.setResizers();\n    }\n\n    private resetChildrenHeight(): void {\n        const eGui = this.getGui();\n        const children = eGui.children;\n\n        for (let i = 0; i < children.length; i++) {\n            const child = children[i] as HTMLElement;\n            child.style.removeProperty('height');\n            child.style.removeProperty('flex');\n        }\n    }\n\n    private isRowGroupingModuleLoaded(): boolean {\n        return ModuleRegistry.__assertRegistered(ModuleNames.RowGroupingModule, 'Row Grouping', this.gridId);\n    }\n\n    public expandColumnGroups(groupIds?: string[]): void {\n        this.primaryColsPanel.expandGroups(groupIds);\n    }\n\n    public collapseColumnGroups(groupIds?: string[]): void {\n        this.primaryColsPanel.collapseGroups(groupIds);\n    }\n\n    public setColumnLayout(colDefs: (ColDef | ColGroupDef)[]): void {\n        this.primaryColsPanel.setColumnLayout(colDefs);\n    }\n\n    public syncLayoutWithGrid(): void {\n        this.primaryColsPanel.syncLayoutWithGrid();\n    }\n\n    public destroyChildren(): void {\n        this.childDestroyFuncs.forEach((func) => func());\n        this.childDestroyFuncs.length = 0;\n        _clearElement(this.getGui());\n    }\n\n    public refresh(params: ToolPanelColumnCompParams): boolean {\n        this.destroyChildren();\n        this.init(params);\n        return true;\n    }\n\n    public getState(): ColumnToolPanelState {\n        return {\n            expandedGroupIds: this.primaryColsPanel.getExpandedGroups(),\n        };\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so this must be public.\n    public override destroy(): void {\n        this.destroyChildren();\n        super.destroy();\n    }\n}\n", "import type {\n    ColDef,\n    ColGroupDef,\n    ColumnEventType,\n    ComponentSelector,\n    ToolPanelColumnCompParams,\n} from '@ag-grid-community/core';\nimport { Component, PositionableFeature, RefPlaceholder } from '@ag-grid-community/core';\n\nimport type { AgPrimaryColsHeader } from './agPrimaryColsHeader';\nimport { AgPrimaryColsHeaderSelector } from './agPrimaryColsHeader';\nimport type { AgPrimaryColsList } from './agPrimaryColsList';\nimport { AgPrimaryColsListSelector } from './agPrimaryColsList';\n\nexport class AgPrimaryCols extends Component {\n    private readonly primaryColsHeaderPanel: AgPrimaryColsHeader = RefPlaceholder;\n    private readonly primaryColsListPanel: AgPrimaryColsList = RefPlaceholder;\n\n    private allowDragging: boolean;\n    private params: ToolPanelColumnCompParams;\n    private eventType: ColumnEventType;\n    private positionableFeature: PositionableFeature;\n\n    constructor() {\n        super(\n            /* html */ `<div class=\"ag-column-select\">\n            <ag-primary-cols-header data-ref=\"primaryColsHeaderPanel\"></ag-primary-cols-header>\n            <ag-primary-cols-list data-ref=\"primaryColsListPanel\"></ag-primary-cols-list>\n        </div>`,\n            [AgPrimaryColsHeaderSelector, AgPrimaryColsListSelector]\n        );\n    }\n\n    // we allow dragging in the toolPanel, but not when this component appears in the column menu\n    public init(allowDragging: boolean, params: ToolPanelColumnCompParams, eventType: ColumnEventType): void {\n        this.allowDragging = allowDragging;\n        this.params = params;\n        this.eventType = eventType;\n\n        this.primaryColsHeaderPanel.init(this.params);\n\n        const hideFilter = this.params.suppressColumnFilter;\n        const hideSelect = this.params.suppressColumnSelectAll;\n        const hideExpand = this.params.suppressColumnExpandAll;\n\n        if (hideExpand && hideFilter && hideSelect) {\n            this.primaryColsHeaderPanel.setDisplayed(false);\n        }\n\n        this.addManagedListeners(this.primaryColsListPanel, {\n            groupExpanded: this.onGroupExpanded.bind(this),\n            selectionChanged: this.onSelectionChange.bind(this),\n        });\n\n        this.primaryColsListPanel.init(this.params, this.allowDragging, this.eventType);\n\n        this.addManagedListeners(this.primaryColsHeaderPanel, {\n            expandAll: this.onExpandAll.bind(this),\n            collapseAll: this.onCollapseAll.bind(this),\n            selectAll: this.onSelectAll.bind(this),\n            unselectAll: this.onUnselectAll.bind(this),\n            filterChanged: this.onFilterChanged.bind(this),\n        });\n\n        this.positionableFeature = new PositionableFeature(this.getGui(), { minHeight: 100 });\n        this.createManagedBean(this.positionableFeature);\n    }\n\n    public toggleResizable(resizable: boolean) {\n        this.positionableFeature.setResizable(resizable ? { bottom: true } : false);\n    }\n\n    public onExpandAll(): void {\n        this.primaryColsListPanel.doSetExpandedAll(true);\n    }\n\n    public onCollapseAll(): void {\n        this.primaryColsListPanel.doSetExpandedAll(false);\n    }\n\n    public expandGroups(groupIds?: string[]): void {\n        this.primaryColsListPanel.setGroupsExpanded(true, groupIds);\n    }\n\n    public collapseGroups(groupIds?: string[]): void {\n        this.primaryColsListPanel.setGroupsExpanded(false, groupIds);\n    }\n\n    public setColumnLayout(colDefs: (ColDef | ColGroupDef)[]): void {\n        this.primaryColsListPanel.setColumnLayout(colDefs);\n    }\n\n    private onFilterChanged(event: any): void {\n        this.primaryColsListPanel.setFilterText(event.filterText);\n    }\n\n    public syncLayoutWithGrid(): void {\n        this.primaryColsListPanel.onColumnsChanged();\n    }\n\n    private onSelectAll(): void {\n        this.primaryColsListPanel.doSetSelectedAll(true);\n    }\n\n    private onUnselectAll(): void {\n        this.primaryColsListPanel.doSetSelectedAll(false);\n    }\n\n    private onGroupExpanded(event: any): void {\n        this.primaryColsHeaderPanel.setExpandState(event.state);\n        this.params.onStateUpdated();\n    }\n\n    private onSelectionChange(event: any): void {\n        this.primaryColsHeaderPanel.setSelectionState(event.state);\n    }\n\n    public getExpandedGroups(): string[] {\n        return this.primaryColsListPanel.getExpandedGroups();\n    }\n}\n\nexport const AgPrimaryColsSelector: ComponentSelector = {\n    selector: 'AG-PRIMARY-COLS',\n    component: AgPrimaryCols,\n};\n", "import type {\n    AgCheckbox,\n    AgInputTextField,\n    BeanCollection,\n    ColumnModel,\n    ComponentSelector,\n} from '@ag-grid-community/core';\nimport {\n    AgCheckboxSelector,\n    AgInputTextFieldSelector,\n    Component,\n    KeyCode,\n    RefPlaceholder,\n    _createIconNoSpan,\n    _debounce,\n    _setDisplayed,\n} from '@ag-grid-community/core';\n\nimport type { ToolPanelColumnCompParams } from './columnToolPanel';\n\nexport enum ExpandState {\n    EXPANDED,\n    COLLAPSED,\n    INDETERMINATE,\n}\n\nconst DEBOUNCE_DELAY = 300;\nexport type AgPrimaryColsHeaderEvent = 'unselectAll' | 'selectAll' | 'collapseAll' | 'expandAll' | 'filterChanged';\nexport class AgPrimaryColsHeader extends Component<AgPrimaryColsHeaderEvent> {\n    private columnModel: ColumnModel;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n    }\n\n    private readonly eExpand: Element = RefPlaceholder;\n    private readonly eSelect: AgCheckbox = RefPlaceholder;\n    private readonly eFilterTextField: AgInputTextField = RefPlaceholder;\n\n    private eExpandChecked: Element;\n    private eExpandUnchecked: Element;\n    private eExpandIndeterminate: Element;\n\n    private expandState: ExpandState;\n    private selectState?: boolean;\n\n    private onFilterTextChangedDebounced: () => void;\n\n    private params: ToolPanelColumnCompParams;\n\n    constructor() {\n        super(\n            /* html */ `<div class=\"ag-column-select-header\" role=\"presentation\">\n            <div data-ref=\"eExpand\" class=\"ag-column-select-header-icon\"></div>\n            <ag-checkbox data-ref=\"eSelect\" class=\"ag-column-select-header-checkbox\"></ag-checkbox>\n            <ag-input-text-field class=\"ag-column-select-header-filter-wrapper\" data-ref=\"eFilterTextField\"></ag-input-text-field>\n        </div>`,\n            [AgCheckboxSelector, AgInputTextFieldSelector]\n        );\n    }\n\n    public postConstruct(): void {\n        this.createExpandIcons();\n\n        this.addManagedListeners(this.eExpand, {\n            click: this.onExpandClicked.bind(this),\n            keydown: (e: KeyboardEvent) => {\n                if (e.key === KeyCode.SPACE) {\n                    e.preventDefault();\n                    this.onExpandClicked();\n                }\n            },\n        });\n\n        this.addManagedElementListeners(this.eSelect.getInputElement(), { click: this.onSelectClicked.bind(this) });\n        this.addManagedPropertyListener('functionsReadOnly', () => this.onFunctionsReadOnlyPropChanged());\n\n        this.eFilterTextField.setAutoComplete(false).onValueChange(() => this.onFilterTextChanged());\n\n        this.addManagedElementListeners(this.eFilterTextField.getInputElement(), {\n            keydown: this.onMiniFilterKeyDown.bind(this),\n        });\n\n        this.addManagedEventListeners({ newColumnsLoaded: this.showOrHideOptions.bind(this) });\n\n        const translate = this.localeService.getLocaleTextFunc();\n\n        this.eSelect.setInputAriaLabel(translate('ariaColumnSelectAll', 'Toggle Select All Columns'));\n        this.eFilterTextField.setInputAriaLabel(translate('ariaFilterColumnsInput', 'Filter Columns Input'));\n\n        this.activateTabIndex([this.eExpand]);\n    }\n\n    private onFunctionsReadOnlyPropChanged(): void {\n        const readOnly = this.gos.get('functionsReadOnly');\n        this.eSelect.setReadOnly(readOnly);\n        this.eSelect.addOrRemoveCssClass('ag-column-select-column-readonly', readOnly);\n    }\n\n    public init(params: ToolPanelColumnCompParams): void {\n        this.params = params;\n\n        const readOnly = this.gos.get('functionsReadOnly');\n        this.eSelect.setReadOnly(readOnly);\n        this.eSelect.addOrRemoveCssClass('ag-column-select-column-readonly', readOnly);\n\n        if (this.columnModel.isReady()) {\n            this.showOrHideOptions();\n        }\n    }\n\n    private createExpandIcons() {\n        this.eExpand.appendChild((this.eExpandChecked = _createIconNoSpan('columnSelectOpen', this.gos)!));\n\n        this.eExpand.appendChild((this.eExpandUnchecked = _createIconNoSpan('columnSelectClosed', this.gos)!));\n\n        this.eExpand.appendChild(\n            (this.eExpandIndeterminate = _createIconNoSpan('columnSelectIndeterminate', this.gos)!)\n        );\n\n        this.setExpandState(ExpandState.EXPANDED);\n    }\n\n    // we only show expand / collapse if we are showing columns\n    private showOrHideOptions(): void {\n        const showFilter = !this.params.suppressColumnFilter;\n        const showSelect = !this.params.suppressColumnSelectAll;\n        const showExpand = !this.params.suppressColumnExpandAll;\n        const groupsPresent = this.columnModel.isProvidedColGroupsPresent();\n        const translate = this.localeService.getLocaleTextFunc();\n\n        this.eFilterTextField.setInputPlaceholder(translate('searchOoo', 'Search...'));\n\n        _setDisplayed(this.eFilterTextField.getGui(), showFilter);\n        _setDisplayed(this.eSelect.getGui(), showSelect);\n        _setDisplayed(this.eExpand, showExpand && groupsPresent);\n    }\n\n    private onFilterTextChanged(): void {\n        if (!this.onFilterTextChangedDebounced) {\n            this.onFilterTextChangedDebounced = _debounce(() => {\n                const filterText = this.eFilterTextField.getValue();\n                this.dispatchLocalEvent({ type: 'filterChanged', filterText: filterText });\n            }, DEBOUNCE_DELAY);\n        }\n\n        this.onFilterTextChangedDebounced();\n    }\n\n    private onMiniFilterKeyDown(e: KeyboardEvent): void {\n        if (e.key === KeyCode.ENTER) {\n            // we need to add a delay that corresponds to the filter text debounce delay to ensure\n            // the text filtering has happened, otherwise all columns will be deselected\n            setTimeout(() => this.onSelectClicked(), DEBOUNCE_DELAY);\n        }\n    }\n\n    private onSelectClicked(): void {\n        this.dispatchLocalEvent({ type: this.selectState ? 'unselectAll' : 'selectAll' });\n    }\n\n    private onExpandClicked(): void {\n        this.dispatchLocalEvent({ type: this.expandState === ExpandState.EXPANDED ? 'collapseAll' : 'expandAll' });\n    }\n\n    public setExpandState(state: ExpandState): void {\n        this.expandState = state;\n\n        _setDisplayed(this.eExpandChecked, this.expandState === ExpandState.EXPANDED);\n        _setDisplayed(this.eExpandUnchecked, this.expandState === ExpandState.COLLAPSED);\n        _setDisplayed(this.eExpandIndeterminate, this.expandState === ExpandState.INDETERMINATE);\n    }\n\n    public setSelectionState(state?: boolean): void {\n        this.selectState = state;\n        this.eSelect.setValue(this.selectState);\n    }\n}\n\nexport const AgPrimaryColsHeaderSelector: ComponentSelector = {\n    selector: 'AG-PRIMARY-COLS-HEADER',\n    component: AgPrimaryColsHeader,\n};\n", "import type {\n    AbstractColDef,\n    AgColumn,\n    AgProvidedColumnGroup,\n    BeanCollection,\n    ColGroupDef,\n    ColumnEventType,\n    ColumnModel,\n    ColumnNameService,\n    ColumnToolPanelState,\n    ComponentSelector,\n} from '@ag-grid-community/core';\nimport {\n    Component,\n    _exists,\n    _includes,\n    _setAriaLabel,\n    _setAriaLevel,\n    _warnOnce,\n    isProvidedColumnGroup,\n} from '@ag-grid-community/core';\nimport { VirtualList } from '@ag-grid-enterprise/core';\nimport type { VirtualListModel } from '@ag-grid-enterprise/core';\nimport type { ToolPanelColDefService } from '@ag-grid-enterprise/side-bar';\n\nimport { ExpandState } from './agPrimaryColsHeader';\nimport { ColumnModelItem } from './columnModelItem';\nimport type { ToolPanelColumnCompParams } from './columnToolPanel';\nimport type { ModelItemUtils } from './modelItemUtils';\nimport { PrimaryColsListPanelItemDragFeature } from './primaryColsListPanelItemDragFeature';\nimport { ToolPanelColumnComp } from './toolPanelColumnComp';\nimport { ToolPanelColumnGroupComp } from './toolPanelColumnGroupComp';\n\nclass UIColumnModel implements VirtualListModel {\n    private readonly items: ColumnModelItem[];\n\n    constructor(items: ColumnModelItem[]) {\n        this.items = items;\n    }\n\n    public getRowCount(): number {\n        return this.items.length;\n    }\n\n    public getRow(index: number): ColumnModelItem {\n        return this.items[index];\n    }\n}\n\nconst PRIMARY_COLS_LIST_PANEL_CLASS = 'ag-column-select-list';\n\nexport type AgPrimaryColsListEvent = 'groupExpanded' | 'selectionChanged';\nexport class AgPrimaryColsList extends Component<AgPrimaryColsListEvent> {\n    private columnModel: ColumnModel;\n    private columnNameService: ColumnNameService;\n    private colDefService: ToolPanelColDefService;\n    private modelItemUtils: ModelItemUtils;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n        this.columnNameService = beans.columnNameService;\n        this.colDefService = beans.toolPanelColDefService as ToolPanelColDefService;\n        this.modelItemUtils = beans.modelItemUtils as ModelItemUtils;\n    }\n\n    private allowDragging: boolean;\n    private filterText: string | null;\n    private expandGroupsByDefault: boolean;\n    private params: ToolPanelColumnCompParams;\n    private eventType: ColumnEventType;\n\n    private groupsExist: boolean;\n\n    private virtualList: VirtualList;\n\n    private allColsTree: ColumnModelItem[];\n    private displayedColsList: ColumnModelItem[];\n    private destroyColumnItemFuncs: (() => void)[] = [];\n    private hasLoadedInitialState: boolean = false;\n    private isInitialState: boolean = false;\n\n    constructor() {\n        super(/* html */ `<div class=\"${PRIMARY_COLS_LIST_PANEL_CLASS}\" role=\"presentation\"></div>`);\n    }\n\n    public override destroy(): void {\n        this.destroyColumnTree();\n        super.destroy();\n    }\n\n    private destroyColumnTree(): void {\n        this.allColsTree = [];\n        this.destroyColumnItemFuncs.forEach((f) => f());\n        this.destroyColumnItemFuncs = [];\n    }\n\n    public init(params: ToolPanelColumnCompParams, allowDragging: boolean, eventType: ColumnEventType): void {\n        this.params = params;\n        this.allowDragging = allowDragging;\n        this.eventType = eventType;\n\n        if (!this.params.suppressSyncLayoutWithGrid) {\n            this.addManagedEventListeners({ columnMoved: this.onColumnsChanged.bind(this) });\n        }\n\n        this.addManagedEventListeners({\n            newColumnsLoaded: this.onColumnsChanged.bind(this),\n        });\n\n        const listener = this.fireSelectionChangedEvent.bind(this);\n        this.addManagedEventListeners({\n            columnPivotChanged: listener,\n            columnPivotModeChanged: listener,\n            columnRowGroupChanged: listener,\n            columnValueChanged: listener,\n            columnVisible: listener,\n            newColumnsLoaded: listener,\n        });\n\n        this.expandGroupsByDefault = !this.params.contractColumnSelection;\n\n        this.virtualList = this.createManagedBean(\n            new VirtualList({\n                cssIdentifier: 'column-select',\n                ariaRole: 'tree',\n            })\n        );\n\n        this.appendChild(this.virtualList.getGui());\n\n        this.virtualList.setComponentCreator((item: ColumnModelItem, listItemElement: HTMLElement) => {\n            _setAriaLevel(listItemElement, item.getDept() + 1);\n            return this.createComponentFromItem(item, listItemElement);\n        });\n\n        if (this.columnModel.isReady()) {\n            this.onColumnsChanged();\n        }\n\n        if (this.params.suppressColumnMove) {\n            return;\n        }\n\n        this.createManagedBean(new PrimaryColsListPanelItemDragFeature(this, this.virtualList));\n    }\n\n    private createComponentFromItem(item: ColumnModelItem, listItemElement: HTMLElement): Component {\n        if (item.isGroup()) {\n            const renderedGroup = new ToolPanelColumnGroupComp(\n                item,\n                this.allowDragging,\n                this.eventType,\n                listItemElement\n            );\n            this.createBean(renderedGroup);\n\n            return renderedGroup;\n        }\n\n        const columnComp = new ToolPanelColumnComp(item, this.allowDragging, this.groupsExist, listItemElement);\n        this.createBean(columnComp);\n\n        return columnComp;\n    }\n\n    public onColumnsChanged(): void {\n        if (!this.hasLoadedInitialState) {\n            this.hasLoadedInitialState = true;\n            this.isInitialState = !!this.params.initialState;\n        }\n\n        const expandedStates = this.getExpandedStates();\n\n        const pivotModeActive = this.columnModel.isPivotMode();\n        const shouldSyncColumnLayoutWithGrid = !this.params.suppressSyncLayoutWithGrid && !pivotModeActive;\n\n        if (shouldSyncColumnLayoutWithGrid) {\n            this.buildTreeFromWhatGridIsDisplaying();\n        } else {\n            this.buildTreeFromProvidedColumnDefs();\n        }\n\n        this.setExpandedStates(expandedStates);\n\n        this.markFilteredColumns();\n        this.flattenAndFilterModel();\n\n        this.isInitialState = false;\n    }\n\n    public getDisplayedColsList(): ColumnModelItem[] {\n        return this.displayedColsList;\n    }\n\n    private getExpandedStates(): { [key: string]: boolean } {\n        const res: { [id: string]: boolean } = {};\n\n        if (this.isInitialState) {\n            const { expandedGroupIds } = this.params.initialState as ColumnToolPanelState;\n            expandedGroupIds.forEach((id) => {\n                res[id] = true;\n            });\n            return res;\n        }\n\n        if (!this.allColsTree) {\n            return {};\n        }\n\n        this.forEachItem((item) => {\n            if (!item.isGroup()) {\n                return;\n            }\n            const colGroup = item.getColumnGroup();\n            if (colGroup) {\n                // group should always exist, this is defensive\n                res[colGroup.getId()] = item.isExpanded();\n            }\n        });\n\n        return res;\n    }\n\n    private setExpandedStates(states: { [key: string]: boolean }): void {\n        if (!this.allColsTree) {\n            return;\n        }\n\n        const { isInitialState } = this;\n        this.forEachItem((item) => {\n            if (!item.isGroup()) {\n                return;\n            }\n            const colGroup = item.getColumnGroup();\n            if (colGroup) {\n                // group should always exist, this is defensive\n                const expanded = states[colGroup.getId()];\n                const groupExistedLastTime = expanded != null;\n                if (groupExistedLastTime || isInitialState) {\n                    item.setExpanded(!!expanded);\n                }\n            }\n        });\n    }\n\n    private buildTreeFromWhatGridIsDisplaying(): void {\n        this.colDefService.syncLayoutWithGrid(this.setColumnLayout.bind(this));\n    }\n\n    public setColumnLayout(colDefs: AbstractColDef[]): void {\n        const columnTree = this.colDefService.createColumnTree(colDefs);\n        this.buildListModel(columnTree);\n\n        // using col defs to check if groups exist as it could be a custom layout\n        this.groupsExist = colDefs.some((colDef) => {\n            return colDef && typeof (colDef as ColGroupDef).children !== 'undefined';\n        });\n\n        this.markFilteredColumns();\n        this.flattenAndFilterModel();\n    }\n\n    private buildTreeFromProvidedColumnDefs(): void {\n        // add column / group comps to tool panel\n        this.buildListModel(this.columnModel.getColDefColTree());\n        this.groupsExist = this.columnModel.isProvidedColGroupsPresent();\n    }\n\n    private buildListModel(columnTree: (AgColumn | AgProvidedColumnGroup)[]): void {\n        const columnExpandedListener = this.onColumnExpanded.bind(this);\n        const addListeners = (item: ColumnModelItem) => {\n            item.addEventListener('expandedChanged', columnExpandedListener);\n            const removeFunc = item.removeEventListener.bind(item, 'expandedChanged', columnExpandedListener);\n            this.destroyColumnItemFuncs.push(removeFunc);\n        };\n\n        const recursivelyBuild = (\n            tree: (AgColumn | AgProvidedColumnGroup)[],\n            dept: number,\n            parentList: ColumnModelItem[]\n        ): void => {\n            tree.forEach((child) => {\n                if (isProvidedColumnGroup(child)) {\n                    createGroupItem(child, dept, parentList);\n                } else {\n                    createColumnItem(child, dept, parentList);\n                }\n            });\n        };\n\n        const createGroupItem = (\n            columnGroup: AgProvidedColumnGroup,\n            dept: number,\n            parentList: ColumnModelItem[]\n        ): void => {\n            const columnGroupDef = columnGroup.getColGroupDef();\n            const skipThisGroup = columnGroupDef && columnGroupDef.suppressColumnsToolPanel;\n            if (skipThisGroup) {\n                return;\n            }\n\n            if (columnGroup.isPadding()) {\n                recursivelyBuild(columnGroup.getChildren(), dept, parentList);\n                return;\n            }\n\n            const displayName = this.columnNameService.getDisplayNameForProvidedColumnGroup(\n                null,\n                columnGroup,\n                'columnToolPanel'\n            );\n            const item: ColumnModelItem = new ColumnModelItem(\n                displayName,\n                columnGroup,\n                dept,\n                true,\n                this.expandGroupsByDefault\n            );\n\n            parentList.push(item);\n            addListeners(item);\n\n            recursivelyBuild(columnGroup.getChildren(), dept + 1, item.getChildren());\n        };\n\n        const createColumnItem = (column: AgColumn, dept: number, parentList: ColumnModelItem[]): void => {\n            const skipThisColumn = column.getColDef() && column.getColDef().suppressColumnsToolPanel;\n\n            if (skipThisColumn) {\n                return;\n            }\n\n            const displayName = this.columnNameService.getDisplayNameForColumn(column, 'columnToolPanel');\n\n            parentList.push(new ColumnModelItem(displayName, column, dept));\n        };\n\n        this.destroyColumnTree();\n        recursivelyBuild(columnTree, 0, this.allColsTree);\n    }\n\n    private onColumnExpanded(): void {\n        this.flattenAndFilterModel();\n    }\n\n    private flattenAndFilterModel(): void {\n        this.displayedColsList = [];\n\n        const recursiveFunc = (item: ColumnModelItem) => {\n            if (!item.isPassesFilter()) {\n                return;\n            }\n            this.displayedColsList.push(item);\n            if (item.isGroup() && item.isExpanded()) {\n                item.getChildren().forEach(recursiveFunc);\n            }\n        };\n\n        this.allColsTree.forEach(recursiveFunc);\n        this.virtualList.setModel(new UIColumnModel(this.displayedColsList));\n\n        const focusedRow = this.virtualList.getLastFocusedRow();\n        this.virtualList.refresh();\n\n        if (focusedRow != null) {\n            this.focusRowIfAlive(focusedRow);\n        }\n\n        this.notifyListeners();\n\n        this.refreshAriaLabel();\n    }\n\n    private refreshAriaLabel(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const columnListName = translate('ariaColumnPanelList', 'Column List');\n        const localeColumns = translate('columns', 'Columns');\n        const items = this.displayedColsList.length;\n\n        _setAriaLabel(this.virtualList.getAriaElement(), `${columnListName} ${items} ${localeColumns}`);\n    }\n\n    private focusRowIfAlive(rowIndex: number): void {\n        window.setTimeout(() => {\n            if (this.isAlive()) {\n                this.virtualList.focusRow(rowIndex);\n            }\n        }, 0);\n    }\n\n    private forEachItem(callback: (item: ColumnModelItem) => void): void {\n        const recursiveFunc = (items: ColumnModelItem[]) => {\n            items.forEach((item) => {\n                callback(item);\n                if (item.isGroup()) {\n                    recursiveFunc(item.getChildren());\n                }\n            });\n        };\n\n        if (!this.allColsTree) {\n            return;\n        }\n\n        recursiveFunc(this.allColsTree);\n    }\n\n    public doSetExpandedAll(value: boolean): void {\n        this.forEachItem((item) => {\n            if (item.isGroup()) {\n                item.setExpanded(value);\n            }\n        });\n    }\n\n    public setGroupsExpanded(expand: boolean, groupIds?: string[]): void {\n        if (!groupIds) {\n            this.doSetExpandedAll(expand);\n            return;\n        }\n\n        const expandedGroupIds: string[] = [];\n\n        this.forEachItem((item) => {\n            if (!item.isGroup()) {\n                return;\n            }\n\n            const groupId = item.getColumnGroup().getId();\n            if (groupIds.indexOf(groupId) >= 0) {\n                item.setExpanded(expand);\n                expandedGroupIds.push(groupId);\n            }\n        });\n\n        const unrecognisedGroupIds = groupIds.filter((groupId) => !_includes(expandedGroupIds, groupId));\n        if (unrecognisedGroupIds.length > 0) {\n            _warnOnce('unable to find group(s) for supplied groupIds:', unrecognisedGroupIds);\n        }\n    }\n\n    private getExpandState(): ExpandState {\n        let expandedCount = 0;\n        let notExpandedCount = 0;\n\n        this.forEachItem((item) => {\n            if (!item.isGroup()) {\n                return;\n            }\n            if (item.isExpanded()) {\n                expandedCount++;\n            } else {\n                notExpandedCount++;\n            }\n        });\n\n        if (expandedCount > 0 && notExpandedCount > 0) {\n            return ExpandState.INDETERMINATE;\n        }\n\n        if (notExpandedCount > 0) {\n            return ExpandState.COLLAPSED;\n        }\n\n        return ExpandState.EXPANDED;\n    }\n\n    public doSetSelectedAll(selectAllChecked: boolean): void {\n        this.modelItemUtils.selectAllChildren(this.allColsTree, selectAllChecked, this.eventType);\n    }\n\n    private getSelectionState(): boolean | undefined {\n        let checkedCount = 0;\n        let uncheckedCount = 0;\n\n        const pivotMode = this.columnModel.isPivotMode();\n\n        this.forEachItem((item) => {\n            if (item.isGroup()) {\n                return;\n            }\n            if (!item.isPassesFilter()) {\n                return;\n            }\n\n            const column = item.getColumn();\n            const colDef = column.getColDef();\n\n            let checked: boolean;\n\n            if (pivotMode) {\n                const noPivotModeOptionsAllowed =\n                    !column.isAllowPivot() && !column.isAllowRowGroup() && !column.isAllowValue();\n                if (noPivotModeOptionsAllowed) {\n                    return;\n                }\n                checked = column.isValueActive() || column.isPivotActive() || column.isRowGroupActive();\n            } else {\n                if (colDef.lockVisible) {\n                    return;\n                }\n\n                checked = column.isVisible();\n            }\n\n            checked ? checkedCount++ : uncheckedCount++;\n        });\n\n        if (checkedCount > 0 && uncheckedCount > 0) {\n            return undefined;\n        }\n\n        return !(checkedCount === 0 || uncheckedCount > 0);\n    }\n\n    public setFilterText(filterText: string) {\n        this.filterText = _exists(filterText) ? filterText.toLowerCase() : null;\n        this.markFilteredColumns();\n        this.flattenAndFilterModel();\n    }\n\n    private markFilteredColumns(): void {\n        const passesFilter = (item: ColumnModelItem) => {\n            if (!_exists(this.filterText)) {\n                return true;\n            }\n\n            const displayName = item.getDisplayName();\n\n            return displayName == null || displayName.toLowerCase().indexOf(this.filterText) !== -1;\n        };\n\n        const recursivelyCheckFilter = (item: ColumnModelItem, parentPasses: boolean): boolean => {\n            let atLeastOneChildPassed = false;\n            if (item.isGroup()) {\n                const groupPasses = passesFilter(item);\n                item.getChildren().forEach((child) => {\n                    const childPasses = recursivelyCheckFilter(child, groupPasses || parentPasses);\n                    if (childPasses) {\n                        atLeastOneChildPassed = childPasses;\n                    }\n                });\n            }\n\n            const filterPasses = parentPasses || atLeastOneChildPassed ? true : passesFilter(item);\n            item.setPassesFilter(filterPasses);\n            return filterPasses;\n        };\n\n        this.allColsTree.forEach((item) => recursivelyCheckFilter(item, false));\n    }\n\n    private notifyListeners(): void {\n        this.fireGroupExpandedEvent();\n        this.fireSelectionChangedEvent();\n    }\n\n    private fireGroupExpandedEvent(): void {\n        const expandState = this.getExpandState();\n        this.dispatchLocalEvent({ type: 'groupExpanded', state: expandState });\n    }\n\n    private fireSelectionChangedEvent(): void {\n        if (!this.allColsTree) {\n            return;\n        }\n        const selectionState = this.getSelectionState();\n        this.dispatchLocalEvent({ type: 'selectionChanged', state: selectionState });\n    }\n\n    public getExpandedGroups(): string[] {\n        const expandedGroupIds: string[] = [];\n\n        if (!this.allColsTree) {\n            return expandedGroupIds;\n        }\n\n        this.forEachItem((item) => {\n            if (item.isGroup() && item.isExpanded()) {\n                expandedGroupIds.push(item.getColumnGroup().getId());\n            }\n        });\n\n        return expandedGroupIds;\n    }\n}\n\nexport const AgPrimaryColsListSelector: ComponentSelector = {\n    selector: 'AG-PRIMARY-COLS-LIST',\n    component: AgPrimaryColsList,\n};\n", "import type { AgColumn, AgProvidedColumnGroup, IEventEmitter, IEventListener } from '@ag-grid-community/core';\nimport { LocalEventService } from '@ag-grid-community/core';\n\nexport type ColumnModelItemEvent = 'expandedChanged';\nexport class ColumnModelItem implements IEventEmitter<ColumnModelItemEvent> {\n    private localEventService: LocalEventService<ColumnModelItemEvent> = new LocalEventService();\n\n    private readonly group: boolean;\n    private readonly displayName: string | null;\n    private readonly columnGroup: AgProvidedColumnGroup;\n    private readonly column: AgColumn;\n    private readonly dept: number;\n    private readonly children: ColumnModelItem[];\n\n    private expanded: boolean | undefined;\n    private passesFilter: boolean;\n\n    constructor(\n        displayName: string | null,\n        columnOrGroup: AgColumn | AgProvidedColumnGroup,\n        dept: number,\n        group = false,\n        expanded?: boolean\n    ) {\n        this.displayName = displayName;\n        this.dept = dept;\n        this.group = group;\n\n        if (group) {\n            this.columnGroup = columnOrGroup as AgProvidedColumnGroup;\n            this.expanded = expanded;\n            this.children = [];\n        } else {\n            this.column = columnOrGroup as AgColumn;\n        }\n    }\n\n    public isGroup(): boolean {\n        return this.group;\n    }\n    public getDisplayName(): string | null {\n        return this.displayName;\n    }\n    public getColumnGroup(): AgProvidedColumnGroup {\n        return this.columnGroup;\n    }\n    public getColumn(): AgColumn {\n        return this.column;\n    }\n    public getDept(): number {\n        return this.dept;\n    }\n    public isExpanded(): boolean {\n        return !!this.expanded;\n    }\n    public getChildren(): ColumnModelItem[] {\n        return this.children;\n    }\n    public isPassesFilter(): boolean {\n        return this.passesFilter;\n    }\n\n    public setExpanded(expanded: boolean): void {\n        if (expanded === this.expanded) {\n            return;\n        }\n        this.expanded = expanded;\n        this.localEventService.dispatchEvent({ type: 'expandedChanged' });\n    }\n\n    public setPassesFilter(passesFilter: boolean): void {\n        this.passesFilter = passesFilter;\n    }\n\n    public addEventListener<T extends ColumnModelItemEvent>(\n        eventType: T,\n        listener: IEventListener<ColumnModelItemEvent>\n    ): void {\n        this.localEventService.addEventListener(eventType, listener);\n    }\n\n    public removeEventListener<T extends ColumnModelItemEvent>(\n        eventType: T,\n        listener: IEventListener<ColumnModelItemEvent>\n    ): void {\n        this.localEventService.removeEventListener(eventType, listener);\n    }\n}\n", "import type {\n    AgColumn,\n    AgProvidedColumnGroup,\n    BeanCollection,\n    ColumnModel,\n    ColumnMoveService,\n    ColumnPanelItemDragStartEvent,\n} from '@ag-grid-community/core';\nimport { BeanStub, DragSourceType, isProvidedColumnGroup } from '@ag-grid-community/core';\nimport { VirtualListDragFeature } from '@ag-grid-enterprise/core';\nimport type { VirtualList, VirtualListDragItem } from '@ag-grid-enterprise/core';\n\nimport type { AgPrimaryColsList } from './agPrimaryColsList';\nimport type { ToolPanelColumnComp } from './toolPanelColumnComp';\nimport { ToolPanelColumnGroupComp } from './toolPanelColumnGroupComp';\n\nexport class PrimaryColsListPanelItemDragFeature extends BeanStub {\n    private columnModel: ColumnModel;\n    private columnMoveService: ColumnMoveService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n        this.columnMoveService = beans.columnMoveService;\n    }\n\n    constructor(\n        private readonly comp: AgPrimaryColsList,\n        private readonly virtualList: VirtualList\n    ) {\n        super();\n    }\n\n    public postConstruct(): void {\n        this.createManagedBean(\n            new VirtualListDragFeature<\n                AgPrimaryColsList,\n                ToolPanelColumnGroupComp | ToolPanelColumnComp,\n                AgColumn | AgProvidedColumnGroup,\n                ColumnPanelItemDragStartEvent\n            >(this.comp, this.virtualList, {\n                dragSourceType: DragSourceType.ToolPanel,\n                listItemDragStartEvent: 'columnPanelItemDragStart',\n                listItemDragEndEvent: 'columnPanelItemDragEnd',\n                eventSource: this.eventService,\n                getCurrentDragValue: (listItemDragStartEvent: ColumnPanelItemDragStartEvent) =>\n                    this.getCurrentDragValue(listItemDragStartEvent),\n                isMoveBlocked: (currentDragValue: AgColumn | AgProvidedColumnGroup | null) =>\n                    this.isMoveBlocked(currentDragValue),\n                getNumRows: (comp: AgPrimaryColsList) => comp.getDisplayedColsList().length,\n                moveItem: (\n                    currentDragValue: AgColumn | AgProvidedColumnGroup | null,\n                    lastHoveredListItem: VirtualListDragItem<ToolPanelColumnGroupComp | ToolPanelColumnComp> | null\n                ) => this.moveItem(currentDragValue, lastHoveredListItem),\n            })\n        );\n    }\n\n    private getCurrentDragValue(\n        listItemDragStartEvent: ColumnPanelItemDragStartEvent\n    ): AgColumn | AgProvidedColumnGroup {\n        return listItemDragStartEvent.column as AgColumn | AgProvidedColumnGroup;\n    }\n\n    private isMoveBlocked(currentDragValue: AgColumn | AgProvidedColumnGroup | null): boolean {\n        const preventMoving = this.gos.get('suppressMovableColumns');\n        if (preventMoving) {\n            return true;\n        }\n\n        const currentColumns = this.getCurrentColumns(currentDragValue);\n        const hasNotMovable = currentColumns.find((col) => {\n            const colDef = col.getColDef();\n            return !!colDef.suppressMovable || !!colDef.lockPosition;\n        });\n\n        return !!hasNotMovable;\n    }\n\n    private moveItem(\n        currentDragValue: AgColumn | AgProvidedColumnGroup | null,\n        lastHoveredListItem: VirtualListDragItem<ToolPanelColumnGroupComp | ToolPanelColumnComp> | null\n    ): void {\n        const targetIndex: number | null = this.getTargetIndex(currentDragValue, lastHoveredListItem);\n\n        const columnsToMove: AgColumn[] = this.getCurrentColumns(currentDragValue);\n\n        if (targetIndex != null) {\n            this.columnMoveService.moveColumns(columnsToMove, targetIndex, 'toolPanelUi');\n        }\n    }\n\n    private getMoveDiff(currentDragValue: AgColumn | AgProvidedColumnGroup | null, end: number): number {\n        const allColumns = this.columnModel.getCols();\n        const currentColumns = this.getCurrentColumns(currentDragValue);\n        const currentColumn = currentColumns[0];\n        const span = currentColumns.length;\n\n        const currentIndex = allColumns.indexOf(currentColumn as AgColumn);\n\n        if (currentIndex < end) {\n            return span;\n        }\n\n        return 0;\n    }\n\n    private getCurrentColumns(currentDragValue: AgColumn | AgProvidedColumnGroup | null): AgColumn[] {\n        if (isProvidedColumnGroup(currentDragValue)) {\n            return currentDragValue.getLeafColumns();\n        }\n        return [currentDragValue!];\n    }\n\n    private getTargetIndex(\n        currentDragValue: AgColumn | AgProvidedColumnGroup | null,\n        lastHoveredListItem: VirtualListDragItem<ToolPanelColumnGroupComp | ToolPanelColumnComp> | null\n    ): number | null {\n        if (!lastHoveredListItem) {\n            return null;\n        }\n        const columnItemComponent = lastHoveredListItem.component;\n        let isBefore = lastHoveredListItem.position === 'top';\n\n        let targetColumn: AgColumn;\n\n        if (columnItemComponent instanceof ToolPanelColumnGroupComp) {\n            const columns = columnItemComponent.getColumns();\n            targetColumn = columns[0];\n            isBefore = true;\n        } else {\n            targetColumn = columnItemComponent.getColumn();\n        }\n\n        // if the target col is in the cols to be moved, no index to move.\n        const movingCols = this.getCurrentColumns(currentDragValue);\n        if (movingCols.indexOf(targetColumn) !== -1) {\n            return null;\n        }\n\n        const targetColumnIndex = this.columnModel.getCols().indexOf(targetColumn as AgColumn);\n        const adjustedTarget = isBefore ? targetColumnIndex : targetColumnIndex + 1;\n        const diff = this.getMoveDiff(currentDragValue, adjustedTarget);\n\n        return adjustedTarget - diff;\n    }\n}\n", "import type {\n    AgCheckbox,\n    AgColumn,\n    AgProvidedColumnGroup,\n    BeanCollection,\n    ColumnEventType,\n    ColumnModel,\n    ColumnPanelItemDragEndEvent,\n    ColumnPanelItemDragStartEvent,\n    DragAndDropService,\n    DragItem,\n    DragSource,\n    IAggFunc,\n    ITooltipParams,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport {\n    AgCheckboxSelector,\n    Component,\n    DragSourceType,\n    KeyCode,\n    RefPlaceholder,\n    TouchListener,\n    _createIcon,\n    _createIconNoSpan,\n    _getToolPanelClassesFromColDef,\n    _setAriaDescribedBy,\n    _setAriaExpanded,\n    _setAriaLabel,\n    _setDisplayed,\n} from '@ag-grid-community/core';\n\nimport type { ColumnModelItem } from './columnModelItem';\nimport type { ModelItemUtils } from './modelItemUtils';\nimport { ToolPanelContextMenu } from './toolPanelContextMenu';\n\nexport class ToolPanelColumnGroupComp extends Component {\n    private columnModel: ColumnModel;\n    private dragAndDropService: DragAndDropService;\n    private modelItemUtils: ModelItemUtils;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n        this.dragAndDropService = beans.dragAndDropService;\n        this.modelItemUtils = beans.modelItemUtils as ModelItemUtils;\n    }\n\n    private readonly cbSelect: AgCheckbox = RefPlaceholder;\n    private readonly eLabel: HTMLElement = RefPlaceholder;\n\n    private readonly eGroupOpenedIcon: Element = RefPlaceholder;\n    private readonly eGroupClosedIcon: Element = RefPlaceholder;\n    private readonly eColumnGroupIcons: Element = RefPlaceholder;\n\n    private eDragHandle: Element;\n\n    private readonly columnGroup: AgProvidedColumnGroup;\n    private readonly columnDept: number;\n\n    private displayName: string | null;\n    private processingColumnStateChange = false;\n\n    constructor(\n        private readonly modelItem: ColumnModelItem,\n        private readonly allowDragging: boolean,\n        private readonly eventType: ColumnEventType,\n        private readonly focusWrapper: HTMLElement\n    ) {\n        super();\n        this.modelItem = modelItem;\n        this.columnGroup = modelItem.getColumnGroup();\n        this.columnDept = modelItem.getDept();\n        this.displayName = modelItem.getDisplayName();\n        this.allowDragging = allowDragging;\n    }\n\n    public postConstruct(): void {\n        this.setTemplate(\n            /* html */ `<div class=\"ag-column-select-column-group\" aria-hidden=\"true\">\n            <span class=\"ag-column-group-icons\" data-ref=\"eColumnGroupIcons\" >\n                <span class=\"ag-column-group-closed-icon\" data-ref=\"eGroupClosedIcon\"></span>\n                <span class=\"ag-column-group-opened-icon\" data-ref=\"eGroupOpenedIcon\"></span>\n            </span>\n            <ag-checkbox data-ref=\"cbSelect\" class=\"ag-column-select-checkbox\"></ag-checkbox>\n            <span class=\"ag-column-select-column-label\" data-ref=\"eLabel\"></span>\n        </div>`,\n            [AgCheckboxSelector]\n        );\n\n        this.eDragHandle = _createIconNoSpan('columnDrag', this.gos)!;\n        this.eDragHandle.classList.add('ag-drag-handle', 'ag-column-select-column-group-drag-handle');\n\n        const checkboxGui = this.cbSelect.getGui();\n        const checkboxInput = this.cbSelect.getInputElement();\n\n        checkboxGui.insertAdjacentElement('afterend', this.eDragHandle);\n        checkboxInput.setAttribute('tabindex', '-1');\n\n        this.eLabel.innerHTML = this.displayName ? this.displayName : '';\n        this.setupExpandContract();\n\n        this.addCssClass('ag-column-select-indent-' + this.columnDept);\n        this.getGui().style.setProperty('--ag-indentation-level', String(this.columnDept));\n\n        this.addManagedEventListeners({ columnPivotModeChanged: this.onColumnStateChanged.bind(this) });\n\n        this.addManagedElementListeners(this.eLabel, { click: this.onLabelClicked.bind(this) });\n        this.addManagedListeners(this.cbSelect, { fieldValueChanged: this.onCheckboxChanged.bind(this) });\n        this.addManagedListeners(this.modelItem, { expandedChanged: this.onExpandChanged.bind(this) });\n        this.addManagedListeners(this.focusWrapper, {\n            keydown: this.handleKeyDown.bind(this),\n            contextmenu: this.onContextMenu.bind(this),\n        });\n\n        this.setOpenClosedIcons();\n        this.setupDragging();\n        this.onColumnStateChanged();\n        this.addVisibilityListenersToAllChildren();\n        this.refreshAriaExpanded();\n        this.refreshAriaLabel();\n        this.setupTooltip();\n\n        const classes = _getToolPanelClassesFromColDef(\n            this.columnGroup.getColGroupDef(),\n            this.gos,\n            null,\n            this.columnGroup\n        );\n        classes.forEach((c) => this.addOrRemoveCssClass(c, true));\n    }\n\n    public getColumns(): AgColumn[] {\n        return this.columnGroup.getLeafColumns();\n    }\n\n    private setupTooltip(): void {\n        const colGroupDef = this.columnGroup.getColGroupDef();\n\n        if (!colGroupDef) {\n            return;\n        }\n\n        const isTooltipWhenTruncated = this.gos.get('tooltipShowMode') === 'whenTruncated';\n\n        let shouldDisplayTooltip: (() => boolean) | undefined;\n\n        if (isTooltipWhenTruncated) {\n            shouldDisplayTooltip = () => this.eLabel.scrollWidth > this.eLabel.clientWidth;\n        }\n\n        const refresh = () => {\n            const newTooltipText = colGroupDef.headerTooltip;\n            this.setTooltip({ newTooltipText, location: 'columnToolPanelColumnGroup', shouldDisplayTooltip });\n        };\n\n        refresh();\n\n        this.addManagedEventListeners({ newColumnsLoaded: refresh });\n    }\n\n    public override getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        const res = super.getTooltipParams();\n        res.location = 'columnToolPanelColumnGroup';\n        return res;\n    }\n\n    private handleKeyDown(e: KeyboardEvent): void {\n        switch (e.key) {\n            case KeyCode.LEFT:\n                e.preventDefault();\n                this.modelItem.setExpanded(false);\n                break;\n            case KeyCode.RIGHT:\n                e.preventDefault();\n                this.modelItem.setExpanded(true);\n                break;\n            case KeyCode.SPACE:\n                e.preventDefault();\n                if (this.isSelectable()) {\n                    this.onSelectAllChanged(!this.isSelected());\n                }\n                break;\n        }\n    }\n\n    private onContextMenu(e: MouseEvent): void {\n        const { columnGroup, gos } = this;\n\n        if (gos.get('functionsReadOnly')) {\n            return;\n        }\n\n        const contextMenu = this.createBean(new ToolPanelContextMenu(columnGroup, e, this.focusWrapper));\n        this.addDestroyFunc(() => {\n            if (contextMenu.isAlive()) {\n                this.destroyBean(contextMenu);\n            }\n        });\n    }\n\n    private addVisibilityListenersToAllChildren(): void {\n        const listener = this.onColumnStateChanged.bind(this);\n        this.columnGroup.getLeafColumns().forEach((column) => {\n            this.addManagedListeners(column, {\n                visibleChanged: listener,\n                columnValueChanged: listener,\n                columnPivotChanged: listener,\n                columnRowGroupChanged: listener,\n            });\n        });\n    }\n\n    private setupDragging(): void {\n        if (!this.allowDragging) {\n            _setDisplayed(this.eDragHandle, false);\n            return;\n        }\n\n        let hideColumnOnExit = !this.gos.get('suppressDragLeaveHidesColumns');\n        const dragSource: DragSource = {\n            type: DragSourceType.ToolPanel,\n            eElement: this.eDragHandle,\n            dragItemName: this.displayName,\n            getDefaultIconName: () => (hideColumnOnExit ? 'hide' : 'notAllowed'),\n            getDragItem: () => this.createDragItem(),\n            onDragStarted: () => {\n                hideColumnOnExit = !this.gos.get('suppressDragLeaveHidesColumns');\n                const event: WithoutGridCommon<ColumnPanelItemDragStartEvent> = {\n                    type: 'columnPanelItemDragStart',\n                    column: this.columnGroup,\n                };\n                this.eventService.dispatchEvent(event);\n            },\n            onDragStopped: () => {\n                const event: WithoutGridCommon<ColumnPanelItemDragEndEvent> = {\n                    type: 'columnPanelItemDragEnd',\n                };\n                this.eventService.dispatchEvent(event);\n            },\n            onGridEnter: (dragItem: DragItem | null) => {\n                if (hideColumnOnExit) {\n                    // when dragged into the grid, restore the state that was active pre-drag\n                    this.modelItemUtils.updateColumns({\n                        columns: this.columnGroup.getLeafColumns(),\n                        visibleState: dragItem?.visibleState,\n                        pivotState: dragItem?.pivotState,\n                        eventType: this.eventType,\n                    });\n                }\n            },\n            onGridExit: () => {\n                if (hideColumnOnExit) {\n                    // when dragged outside of the grid, mimic what happens when checkbox is disabled\n                    // this handles the behaviour for pivot which is different to just hiding a column.\n                    this.onChangeCommon(false);\n                }\n            },\n        };\n\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => this.dragAndDropService.removeDragSource(dragSource));\n    }\n\n    private createDragItem() {\n        const columns = this.columnGroup.getLeafColumns();\n        const visibleState: { [key: string]: boolean } = {};\n        const pivotState: {\n            [key: string]: {\n                pivot?: boolean;\n                rowGroup?: boolean;\n                aggFunc?: string | IAggFunc | null;\n            };\n        } = {};\n        columns.forEach((col) => {\n            const colId = col.getId();\n            visibleState[colId] = col.isVisible();\n            pivotState[colId] = this.modelItemUtils.createPivotState(col);\n        });\n\n        return {\n            columns,\n            visibleState,\n            pivotState,\n        };\n    }\n\n    private setupExpandContract(): void {\n        this.eGroupClosedIcon.appendChild(_createIcon('columnSelectClosed', this.gos, null));\n        this.eGroupOpenedIcon.appendChild(_createIcon('columnSelectOpen', this.gos, null));\n\n        const listener = this.onExpandOrContractClicked.bind(this);\n        this.addManagedElementListeners(this.eGroupClosedIcon, { click: listener });\n        this.addManagedElementListeners(this.eGroupOpenedIcon, { click: listener });\n\n        const touchListener = new TouchListener(this.eColumnGroupIcons, true);\n        this.addManagedListeners(touchListener, { tap: listener });\n        this.addDestroyFunc(touchListener.destroy.bind(touchListener));\n    }\n\n    private onLabelClicked(): void {\n        const nextState = !this.cbSelect.getValue();\n        this.onChangeCommon(nextState);\n    }\n\n    private onCheckboxChanged(event: any): void {\n        this.onChangeCommon(event.selected);\n    }\n\n    private getVisibleLeafColumns(): AgColumn[] {\n        const childColumns: AgColumn[] = [];\n\n        const extractCols = (children: ColumnModelItem[]) => {\n            children.forEach((child) => {\n                if (!child.isPassesFilter()) {\n                    return;\n                }\n                if (child.isGroup()) {\n                    extractCols(child.getChildren());\n                } else {\n                    childColumns.push(child.getColumn());\n                }\n            });\n        };\n\n        extractCols(this.modelItem.getChildren());\n\n        return childColumns;\n    }\n\n    private onChangeCommon(nextState: boolean): void {\n        this.refreshAriaLabel();\n\n        if (this.processingColumnStateChange) {\n            return;\n        }\n\n        this.modelItemUtils.selectAllChildren(this.modelItem.getChildren(), nextState, this.eventType);\n    }\n\n    private refreshAriaLabel(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const columnLabel = translate('ariaColumnGroup', 'Column Group');\n        const checkboxValue = this.cbSelect.getValue();\n        const state =\n            checkboxValue === undefined\n                ? translate('ariaIndeterminate', 'indeterminate')\n                : checkboxValue\n                  ? translate('ariaVisible', 'visible')\n                  : translate('ariaHidden', 'hidden');\n        const visibilityLabel = translate('ariaToggleVisibility', 'Press SPACE to toggle visibility');\n\n        _setAriaLabel(this.focusWrapper, `${this.displayName} ${columnLabel}`);\n        this.cbSelect.setInputAriaLabel(`${visibilityLabel} (${state})`);\n        _setAriaDescribedBy(this.focusWrapper, this.cbSelect.getInputElement().id);\n    }\n\n    public onColumnStateChanged(): void {\n        const selectedValue = this.workOutSelectedValue();\n        const readOnlyValue = this.workOutReadOnlyValue();\n        this.processingColumnStateChange = true;\n        this.cbSelect.setValue(selectedValue);\n        this.cbSelect.setReadOnly(readOnlyValue);\n        this.addOrRemoveCssClass('ag-column-select-column-group-readonly', readOnlyValue);\n        this.processingColumnStateChange = false;\n    }\n\n    private workOutSelectedValue(): boolean | undefined {\n        const pivotMode = this.columnModel.isPivotMode();\n\n        const visibleLeafColumns = this.getVisibleLeafColumns();\n\n        let checkedCount = 0;\n        let uncheckedCount = 0;\n\n        visibleLeafColumns.forEach((column) => {\n            if (!pivotMode && column.getColDef().lockVisible) {\n                return;\n            }\n\n            if (this.isColumnChecked(column, pivotMode)) {\n                checkedCount++;\n            } else {\n                uncheckedCount++;\n            }\n        });\n\n        if (checkedCount > 0 && uncheckedCount > 0) {\n            return undefined;\n        }\n\n        return checkedCount > 0;\n    }\n\n    private workOutReadOnlyValue(): boolean {\n        const pivotMode = this.columnModel.isPivotMode();\n\n        let colsThatCanAction = 0;\n\n        this.columnGroup.getLeafColumns().forEach((col) => {\n            if (pivotMode) {\n                if (col.isAnyFunctionAllowed()) {\n                    colsThatCanAction++;\n                }\n            } else {\n                if (!col.getColDef().lockVisible) {\n                    colsThatCanAction++;\n                }\n            }\n        });\n\n        return colsThatCanAction === 0;\n    }\n\n    private isColumnChecked(column: AgColumn, pivotMode: boolean): boolean {\n        if (pivotMode) {\n            const pivoted = column.isPivotActive();\n            const grouped = column.isRowGroupActive();\n            const aggregated = column.isValueActive();\n            return pivoted || grouped || aggregated;\n        }\n\n        return column.isVisible();\n    }\n\n    private onExpandOrContractClicked(): void {\n        const oldState = this.modelItem.isExpanded();\n        this.modelItem.setExpanded(!oldState);\n    }\n\n    private onExpandChanged() {\n        this.setOpenClosedIcons();\n        this.refreshAriaExpanded();\n    }\n\n    private setOpenClosedIcons(): void {\n        const folderOpen = this.modelItem.isExpanded();\n        _setDisplayed(this.eGroupClosedIcon, !folderOpen);\n        _setDisplayed(this.eGroupOpenedIcon, folderOpen);\n    }\n\n    private refreshAriaExpanded(): void {\n        _setAriaExpanded(this.focusWrapper, this.modelItem.isExpanded());\n    }\n\n    public getDisplayName(): string | null {\n        return this.displayName;\n    }\n\n    public onSelectAllChanged(value: boolean): void {\n        const cbValue = this.cbSelect.getValue();\n        const readOnly = this.cbSelect.isReadOnly();\n\n        if (!readOnly && ((value && !cbValue) || (!value && cbValue))) {\n            this.cbSelect.toggle();\n        }\n    }\n\n    public isSelected(): boolean | undefined {\n        return this.cbSelect.getValue();\n    }\n\n    public isSelectable(): boolean {\n        return !this.cbSelect.isReadOnly();\n    }\n\n    public setSelected(selected: boolean) {\n        this.cbSelect.setValue(selected, true);\n    }\n}\n", "import type {\n    AgColumn,\n    AgProvidedColumnGroup,\n    BeanCollection,\n    ColumnModel,\n    ColumnNameService,\n    FocusService,\n    FuncColsService,\n    MenuItemDef,\n    PopupService,\n} from '@ag-grid-community/core';\nimport { Component, _createIconNoSpan, isColumn, isProvidedColumnGroup } from '@ag-grid-community/core';\nimport { AgMenuList } from '@ag-grid-enterprise/core';\n\ntype MenuItemName = 'rowGroup' | 'value' | 'pivot';\n\ntype MenuItemProperty = {\n    allowedFunction: (col: AgColumn) => boolean;\n    activeFunction: (col: AgColumn) => boolean;\n    activateLabel: (name: string) => string;\n    deactivateLabel: (name: string) => string;\n    activateFunction: () => void;\n    deActivateFunction: () => void;\n    addIcon: string;\n    removeIcon: string;\n};\n\nexport class ToolPanelContextMenu extends Component {\n    private columnModel: ColumnModel;\n    private columnNameService: ColumnNameService;\n    private funcColsService: FuncColsService;\n    private popupService: PopupService;\n    private focusService: FocusService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n        this.columnNameService = beans.columnNameService;\n        this.funcColsService = beans.funcColsService;\n        this.popupService = beans.popupService;\n        this.focusService = beans.focusService;\n    }\n\n    private columns: AgColumn[];\n    private allowGrouping: boolean;\n    private allowValues: boolean;\n    private allowPivoting: boolean;\n    private menuItemMap: Map<MenuItemName, MenuItemProperty>;\n    private displayName: string | null = null;\n\n    constructor(\n        private readonly column: AgColumn | AgProvidedColumnGroup,\n        private readonly mouseEvent: MouseEvent,\n        private readonly parentEl: HTMLElement\n    ) {\n        super(/* html */ `<div class=\"ag-menu\"></div>`);\n    }\n\n    public postConstruct(): void {\n        this.initializeProperties(this.column);\n        this.buildMenuItemMap();\n\n        if (isColumn(this.column)) {\n            this.displayName = this.columnNameService.getDisplayNameForColumn(this.column, 'columnToolPanel');\n        } else {\n            this.displayName = this.columnNameService.getDisplayNameForProvidedColumnGroup(\n                null,\n                this.column,\n                'columnToolPanel'\n            );\n        }\n\n        if (this.isActive()) {\n            this.mouseEvent.preventDefault();\n            const menuItemsMapped: MenuItemDef[] = this.getMappedMenuItems();\n            if (menuItemsMapped.length === 0) {\n                return;\n            }\n\n            this.displayContextMenu(menuItemsMapped);\n        }\n    }\n\n    private initializeProperties(column: AgColumn | AgProvidedColumnGroup): void {\n        if (isProvidedColumnGroup(column)) {\n            this.columns = column.getLeafColumns();\n        } else {\n            this.columns = [column];\n        }\n\n        this.allowGrouping = this.columns.some((col) => col.isPrimary() && col.isAllowRowGroup());\n        this.allowValues = this.columns.some((col) => col.isPrimary() && col.isAllowValue());\n        this.allowPivoting =\n            this.columnModel.isPivotMode() && this.columns.some((col) => col.isPrimary() && col.isAllowPivot());\n    }\n\n    private buildMenuItemMap(): void {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n\n        this.menuItemMap = new Map<MenuItemName, MenuItemProperty>();\n        this.menuItemMap.set('rowGroup', {\n            allowedFunction: (col) =>\n                col.isPrimary() && col.isAllowRowGroup() && !this.columnModel.isColGroupLocked(col),\n            activeFunction: (col) => col.isRowGroupActive(),\n            activateLabel: () => `${localeTextFunc('groupBy', 'Group by')} ${this.displayName}`,\n            deactivateLabel: () => `${localeTextFunc('ungroupBy', 'Un-Group by')} ${this.displayName}`,\n            activateFunction: () => {\n                const groupedColumns = this.funcColsService.getRowGroupColumns();\n                this.funcColsService.setRowGroupColumns(this.addColumnsToList(groupedColumns), 'toolPanelUi');\n            },\n            deActivateFunction: () => {\n                const groupedColumns = this.funcColsService.getRowGroupColumns();\n                this.funcColsService.setRowGroupColumns(this.removeColumnsFromList(groupedColumns), 'toolPanelUi');\n            },\n            addIcon: 'menuAddRowGroup',\n            removeIcon: 'menuRemoveRowGroup',\n        });\n\n        this.menuItemMap.set('value', {\n            allowedFunction: (col) => col.isPrimary() && col.isAllowValue(),\n            activeFunction: (col) => col.isValueActive(),\n            activateLabel: () =>\n                localeTextFunc('addToValues', `Add ${this.displayName} to values`, [this.displayName!]),\n            deactivateLabel: () =>\n                localeTextFunc('removeFromValues', `Remove ${this.displayName} from values`, [this.displayName!]),\n            activateFunction: () => {\n                const valueColumns = this.funcColsService.getValueColumns();\n                this.funcColsService.setValueColumns(this.addColumnsToList(valueColumns), 'toolPanelUi');\n            },\n            deActivateFunction: () => {\n                const valueColumns = this.funcColsService.getValueColumns();\n                this.funcColsService.setValueColumns(this.removeColumnsFromList(valueColumns), 'toolPanelUi');\n            },\n            addIcon: 'valuePanel',\n            removeIcon: 'valuePanel',\n        });\n\n        this.menuItemMap.set('pivot', {\n            allowedFunction: (col) => this.columnModel.isPivotMode() && col.isPrimary() && col.isAllowPivot(),\n            activeFunction: (col) => col.isPivotActive(),\n            activateLabel: () =>\n                localeTextFunc('addToLabels', `Add ${this.displayName} to labels`, [this.displayName!]),\n            deactivateLabel: () =>\n                localeTextFunc('removeFromLabels', `Remove ${this.displayName} from labels`, [this.displayName!]),\n            activateFunction: () => {\n                const pivotColumns = this.funcColsService.getPivotColumns();\n                this.funcColsService.setPivotColumns(this.addColumnsToList(pivotColumns), 'toolPanelUi');\n            },\n            deActivateFunction: () => {\n                const pivotColumns = this.funcColsService.getPivotColumns();\n                this.funcColsService.setPivotColumns(this.removeColumnsFromList(pivotColumns), 'toolPanelUi');\n            },\n            addIcon: 'pivotPanel',\n            removeIcon: 'pivotPanel',\n        });\n    }\n\n    private addColumnsToList(columnList: AgColumn[]): AgColumn[] {\n        return [...columnList].concat(this.columns.filter((col) => columnList.indexOf(col) === -1));\n    }\n\n    private removeColumnsFromList(columnList: AgColumn[]): AgColumn[] {\n        return columnList.filter((col) => this.columns.indexOf(col) === -1);\n    }\n\n    private displayContextMenu(menuItemsMapped: MenuItemDef[]): void {\n        const eGui = this.getGui();\n        const menuList = this.createBean(new AgMenuList());\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n\n        let hideFunc = () => {};\n\n        eGui.appendChild(menuList.getGui());\n        menuList.addMenuItems(menuItemsMapped);\n        menuList.addManagedListeners(menuList, {\n            closeMenu: () => {\n                this.parentEl.focus();\n                hideFunc();\n            },\n        });\n\n        const addPopupRes = this.popupService.addPopup({\n            modal: true,\n            eChild: eGui,\n            closeOnEsc: true,\n            afterGuiAttached: () => this.focusService.focusInto(menuList.getGui()),\n            ariaLabel: localeTextFunc('ariaLabelContextMenu', 'Context Menu'),\n            closedCallback: (e: KeyboardEvent) => {\n                if (e instanceof KeyboardEvent) {\n                    this.parentEl.focus();\n                }\n                this.destroyBean(menuList);\n            },\n        });\n\n        if (addPopupRes) {\n            hideFunc = addPopupRes.hideFunc;\n        }\n\n        this.popupService.positionPopupUnderMouseEvent({\n            type: 'columnContextMenu',\n            mouseEvent: this.mouseEvent,\n            ePopup: eGui,\n        });\n    }\n\n    private isActive(): boolean {\n        return this.allowGrouping || this.allowValues || this.allowPivoting;\n    }\n\n    private getMappedMenuItems(): MenuItemDef[] {\n        const ret: MenuItemDef[] = [];\n        for (const val of this.menuItemMap.values()) {\n            const isInactive = this.columns.some((col) => val.allowedFunction(col) && !val.activeFunction(col));\n            const isActive = this.columns.some((col) => val.allowedFunction(col) && val.activeFunction(col));\n\n            if (isInactive) {\n                ret.push({\n                    name: val.activateLabel(this.displayName!),\n                    icon: _createIconNoSpan(val.addIcon, this.gos, null),\n                    action: () => val.activateFunction(),\n                });\n            }\n\n            if (isActive) {\n                ret.push({\n                    name: val.deactivateLabel(this.displayName!),\n                    icon: _createIconNoSpan(val.removeIcon, this.gos, null),\n                    action: () => val.deActivateFunction(),\n                });\n            }\n        }\n\n        return ret;\n    }\n}\n", "import type {\n    AgCheckbox,\n    AgColumn,\n    BeanCollection,\n    ColumnModel,\n    ColumnPanelItemDragEndEvent,\n    ColumnPanelItemDragStartEvent,\n    DragAndDropService,\n    DragItem,\n    DragSource,\n    ITooltipParams,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport {\n    AgCheckboxSelector,\n    Component,\n    DragSourceType,\n    KeyCode,\n    RefPlaceholder,\n    _createIconNoSpan,\n    _escapeString,\n    _getToolPanelClassesFromColDef,\n    _setAriaDescribedBy,\n    _setAriaLabel,\n    _setDisplayed,\n    _warnOnce,\n} from '@ag-grid-community/core';\n\nimport type { ColumnModelItem } from './columnModelItem';\nimport type { ModelItemUtils } from './modelItemUtils';\nimport { ToolPanelContextMenu } from './toolPanelContextMenu';\n\nexport class ToolPanelColumnComp extends Component {\n    private columnModel: ColumnModel;\n    private dragAndDropService: DragAndDropService;\n    private modelItemUtils: ModelItemUtils;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n        this.dragAndDropService = beans.dragAndDropService;\n        this.modelItemUtils = beans.modelItemUtils as ModelItemUtils;\n    }\n\n    private readonly eLabel: HTMLElement = RefPlaceholder;\n    private readonly cbSelect: AgCheckbox = RefPlaceholder;\n\n    private column: AgColumn;\n    private columnDept: number;\n    private eDragHandle: Element;\n    private displayName: string | null;\n    private processingColumnStateChange = false;\n\n    constructor(\n        modelItem: ColumnModelItem,\n        private readonly allowDragging: boolean,\n        private readonly groupsExist: boolean,\n        private readonly focusWrapper: HTMLElement\n    ) {\n        super();\n        this.column = modelItem.getColumn();\n        this.columnDept = modelItem.getDept();\n        this.displayName = modelItem.getDisplayName();\n    }\n\n    public postConstruct(): void {\n        this.setTemplate(\n            /* html */ `<div class=\"ag-column-select-column\" aria-hidden=\"true\">\n            <ag-checkbox data-ref=\"cbSelect\" class=\"ag-column-select-checkbox\"></ag-checkbox>\n            <span class=\"ag-column-select-column-label\" data-ref=\"eLabel\"></span>\n        </div>`,\n            [AgCheckboxSelector]\n        );\n        this.eDragHandle = _createIconNoSpan('columnDrag', this.gos)!;\n        this.eDragHandle.classList.add('ag-drag-handle', 'ag-column-select-column-drag-handle');\n\n        const checkboxGui = this.cbSelect.getGui();\n        const checkboxInput = this.cbSelect.getInputElement();\n\n        checkboxGui.insertAdjacentElement('afterend', this.eDragHandle);\n        checkboxInput.setAttribute('tabindex', '-1');\n\n        const displayNameSanitised: any = _escapeString(this.displayName);\n        this.eLabel.innerHTML = displayNameSanitised;\n\n        // if grouping, we add an extra level of indent, to cater for expand/contract icons we need to indent for\n        const indent = this.columnDept;\n        if (this.groupsExist) {\n            this.addCssClass('ag-column-select-add-group-indent');\n        }\n        this.addCssClass(`ag-column-select-indent-${indent}`);\n        this.getGui().style.setProperty('--ag-indentation-level', String(indent));\n\n        this.setupDragging();\n\n        const onColStateChanged = this.onColumnStateChanged.bind(this);\n        this.addManagedEventListeners({ columnPivotModeChanged: onColStateChanged });\n\n        this.addManagedListeners(this.column, {\n            columnValueChanged: onColStateChanged,\n            columnPivotChanged: onColStateChanged,\n            columnRowGroupChanged: onColStateChanged,\n            visibleChanged: onColStateChanged,\n        });\n        this.addManagedListeners(this.focusWrapper, {\n            keydown: this.handleKeyDown.bind(this),\n            contextmenu: this.onContextMenu.bind(this),\n        });\n\n        this.addManagedPropertyListener('functionsReadOnly', this.onColumnStateChanged.bind(this));\n\n        this.addManagedListeners(this.cbSelect, { fieldValueChanged: this.onCheckboxChanged.bind(this) });\n        this.addManagedElementListeners(this.eLabel, { click: this.onLabelClicked.bind(this) });\n\n        this.onColumnStateChanged();\n        this.refreshAriaLabel();\n\n        this.setupTooltip();\n\n        const classes = _getToolPanelClassesFromColDef(this.column.getColDef(), this.gos, this.column, null);\n        classes.forEach((c) => this.addOrRemoveCssClass(c, true));\n    }\n\n    public getColumn(): AgColumn {\n        return this.column;\n    }\n\n    private setupTooltip(): void {\n        const isTooltipWhenTruncated = this.gos.get('tooltipShowMode') === 'whenTruncated';\n        let shouldDisplayTooltip: (() => boolean) | undefined;\n\n        if (isTooltipWhenTruncated) {\n            shouldDisplayTooltip = () => this.eLabel.scrollWidth > this.eLabel.clientWidth;\n        }\n        const refresh = () => {\n            const newTooltipText = this.column.getColDef().headerTooltip;\n            this.setTooltip({ newTooltipText, location: 'columnToolPanelColumn', shouldDisplayTooltip });\n        };\n\n        refresh();\n\n        this.addManagedEventListeners({ newColumnsLoaded: refresh });\n    }\n\n    public override getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        const res = super.getTooltipParams();\n        res.location = 'columnToolPanelColumn';\n        res.colDef = this.column.getColDef();\n        return res;\n    }\n\n    private onContextMenu(e: MouseEvent): void {\n        const { column, gos } = this;\n\n        if (gos.get('functionsReadOnly')) {\n            return;\n        }\n\n        const contextMenu = this.createBean(new ToolPanelContextMenu(column, e, this.focusWrapper));\n        this.addDestroyFunc(() => {\n            if (contextMenu.isAlive()) {\n                this.destroyBean(contextMenu);\n            }\n        });\n    }\n\n    protected handleKeyDown(e: KeyboardEvent): void {\n        if (e.key === KeyCode.SPACE) {\n            e.preventDefault();\n            if (this.isSelectable()) {\n                this.onSelectAllChanged(!this.isSelected());\n            }\n        }\n    }\n\n    private onLabelClicked(): void {\n        if (this.gos.get('functionsReadOnly')) {\n            return;\n        }\n\n        const nextState = !this.cbSelect.getValue();\n        this.onChangeCommon(nextState);\n    }\n\n    private onCheckboxChanged(event: any): void {\n        this.onChangeCommon(event.selected);\n    }\n\n    private onChangeCommon(nextState: boolean): void {\n        // ignore lock visible columns\n        if (this.cbSelect.isReadOnly()) {\n            return;\n        }\n\n        this.refreshAriaLabel();\n\n        // only want to action if the user clicked the checkbox, not if we are setting the checkbox because\n        // of a change in the model\n        if (this.processingColumnStateChange) {\n            return;\n        }\n\n        this.modelItemUtils.setColumn(this.column, nextState, 'toolPanelUi');\n    }\n\n    private refreshAriaLabel(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const columnLabel = translate('ariaColumn', 'Column');\n        const state = this.cbSelect.getValue()\n            ? translate('ariaVisible', 'visible')\n            : translate('ariaHidden', 'hidden');\n        const visibilityLabel = translate('ariaToggleVisibility', 'Press SPACE to toggle visibility');\n\n        _setAriaLabel(this.focusWrapper, `${this.displayName} ${columnLabel}`);\n        this.cbSelect.setInputAriaLabel(`${visibilityLabel} (${state})`);\n        _setAriaDescribedBy(this.focusWrapper, this.cbSelect.getInputElement().id);\n    }\n\n    private setupDragging(): void {\n        if (!this.allowDragging) {\n            _setDisplayed(this.eDragHandle, false);\n            return;\n        }\n\n        let hideColumnOnExit = !this.gos.get('suppressDragLeaveHidesColumns');\n        const dragSource: DragSource = {\n            type: DragSourceType.ToolPanel,\n            eElement: this.eDragHandle,\n            dragItemName: this.displayName,\n            getDefaultIconName: () => (hideColumnOnExit ? 'hide' : 'notAllowed'),\n            getDragItem: () => this.createDragItem(),\n            onDragStarted: () => {\n                hideColumnOnExit = !this.gos.get('suppressDragLeaveHidesColumns');\n                const event: WithoutGridCommon<ColumnPanelItemDragStartEvent> = {\n                    type: 'columnPanelItemDragStart',\n                    column: this.column,\n                };\n                this.eventService.dispatchEvent(event);\n            },\n            onDragStopped: () => {\n                const event: WithoutGridCommon<ColumnPanelItemDragEndEvent> = {\n                    type: 'columnPanelItemDragEnd',\n                };\n                this.eventService.dispatchEvent(event);\n            },\n            onGridEnter: (dragItem: DragItem | null) => {\n                if (hideColumnOnExit) {\n                    // when dragged into the grid, restore the state that was active pre-drag\n                    this.modelItemUtils.updateColumns({\n                        columns: [this.column],\n                        visibleState: dragItem?.visibleState,\n                        pivotState: dragItem?.pivotState,\n                        eventType: 'toolPanelUi',\n                    });\n                }\n            },\n            onGridExit: () => {\n                if (hideColumnOnExit) {\n                    // when dragged outside of the grid, mimic what happens when checkbox is disabled\n                    // this handles the behaviour for pivot which is different to just hiding a column.\n                    this.onChangeCommon(false);\n                }\n            },\n        };\n\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => this.dragAndDropService.removeDragSource(dragSource));\n    }\n\n    private createDragItem() {\n        const colId = this.column.getColId();\n        const visibleState = { [colId]: this.column.isVisible() };\n        const pivotState = { [colId]: this.modelItemUtils.createPivotState(this.column) };\n        return {\n            columns: [this.column],\n            visibleState,\n            pivotState,\n        };\n    }\n\n    private onColumnStateChanged(): void {\n        this.processingColumnStateChange = true;\n        const isPivotMode = this.columnModel.isPivotMode();\n        if (isPivotMode) {\n            // if reducing, checkbox means column is one of pivot, value or group\n            const anyFunctionActive = this.column.isAnyFunctionActive();\n            this.cbSelect.setValue(anyFunctionActive);\n        } else {\n            // if not reducing, the checkbox tells us if column is visible or not\n            this.cbSelect.setValue(this.column.isVisible());\n        }\n\n        let canBeToggled = true;\n        let canBeDragged = true;\n        if (isPivotMode) {\n            // when in pivot mode, the item should be read only if:\n            //  a) gui is not allowed make any changes\n            const functionsReadOnly = this.gos.get('functionsReadOnly');\n            //  b) column is not allow any functions on it\n            const noFunctionsAllowed = !this.column.isAnyFunctionAllowed();\n            canBeToggled = !functionsReadOnly && !noFunctionsAllowed;\n            canBeDragged = canBeToggled;\n        } else {\n            const { enableRowGroup, enableValue, lockPosition, suppressMovable, lockVisible } = this.column.getColDef();\n            const forceDraggable = !!enableRowGroup || !!enableValue;\n            const disableDraggable = !!lockPosition || !!suppressMovable;\n            canBeToggled = !lockVisible;\n            canBeDragged = forceDraggable || !disableDraggable;\n        }\n\n        this.cbSelect.setReadOnly(!canBeToggled);\n        this.eDragHandle.classList.toggle('ag-column-select-column-readonly', !canBeDragged);\n        this.addOrRemoveCssClass('ag-column-select-column-readonly', !canBeDragged && !canBeToggled);\n\n        this.cbSelect.setPassive(false);\n\n        this.processingColumnStateChange = false;\n    }\n\n    public getDisplayName(): string | null {\n        return this.displayName;\n    }\n\n    public onSelectAllChanged(value: boolean): void {\n        if (value !== this.cbSelect.getValue()) {\n            if (!this.cbSelect.isReadOnly()) {\n                this.cbSelect.toggle();\n            }\n        }\n    }\n\n    public isSelected(): boolean | undefined {\n        return this.cbSelect.getValue();\n    }\n\n    public isSelectable(): boolean {\n        return !this.cbSelect.isReadOnly();\n    }\n\n    public isExpandable(): boolean {\n        return false;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public setExpanded(_value: boolean): void {\n        _warnOnce('can not expand a column item that does not represent a column group header');\n    }\n}\n", "import type { AgCheckbox, BeanCollection, ColumnModel, CtrlsService } from '@ag-grid-community/core';\nimport { AgToggleButtonSelector, Component, RefPlaceholder } from '@ag-grid-community/core';\n\nexport class PivotModePanel extends Component {\n    private columnModel: ColumnModel;\n    private ctrlsService: CtrlsService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n        this.ctrlsService = beans.ctrlsService;\n    }\n\n    private readonly cbPivotMode: AgCheckbox = RefPlaceholder;\n\n    private createTemplate(): string {\n        return /* html */ `<div class=\"ag-pivot-mode-panel\">\n                <ag-toggle-button data-ref=\"cbPivotMode\" class=\"ag-pivot-mode-select\"></ag-toggle-button>\n            </div>`;\n    }\n\n    public postConstruct(): void {\n        this.setTemplate(this.createTemplate(), [AgToggleButtonSelector]);\n\n        this.cbPivotMode.setValue(this.columnModel.isPivotMode());\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        this.cbPivotMode.setLabel(localeTextFunc('pivotMode', 'Pivot Mode'));\n\n        this.addManagedListeners(this.cbPivotMode, { fieldValueChanged: this.onBtPivotMode.bind(this) });\n        const listener = this.onPivotModeChanged.bind(this);\n        this.addManagedEventListeners({\n            newColumnsLoaded: listener,\n            columnPivotModeChanged: listener,\n        });\n    }\n\n    private onBtPivotMode(): void {\n        const newValue = !!this.cbPivotMode.getValue();\n        if (newValue !== this.columnModel.isPivotMode()) {\n            this.gos.updateGridOptions({ options: { pivotMode: newValue }, source: 'toolPanelUi' as any });\n            this.ctrlsService.getHeaderRowContainerCtrls().forEach((c) => c.refresh());\n        }\n    }\n\n    private onPivotModeChanged(): void {\n        const pivotModeActive = this.columnModel.isPivotMode();\n        this.cbPivotMode.setValue(pivotModeActive);\n    }\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    ColumnApplyStateService,\n    ColumnEventType,\n    ColumnModel,\n    ColumnState,\n    IAggFunc,\n    IAggFuncService,\n    NamedBean,\n} from '@ag-grid-community/core';\nimport { BeanStub } from '@ag-grid-community/core';\n\nimport type { ColumnModelItem } from './columnModelItem';\n\nexport class ModelItemUtils extends BeanStub implements NamedBean {\n    beanName = 'modelItemUtils' as const;\n\n    private aggFuncService?: IAggFuncService;\n    private columnModel: ColumnModel;\n    private columnApplyStateService: ColumnApplyStateService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.aggFuncService = beans.aggFuncService;\n        this.columnModel = beans.columnModel;\n        this.columnApplyStateService = beans.columnApplyStateService;\n    }\n\n    public selectAllChildren(colTree: ColumnModelItem[], selectAllChecked: boolean, eventType: ColumnEventType): void {\n        const cols = this.extractAllLeafColumns(colTree);\n        this.setAllColumns(cols, selectAllChecked, eventType);\n    }\n\n    public setColumn(col: AgColumn, selectAllChecked: boolean, eventType: ColumnEventType): void {\n        this.setAllColumns([col], selectAllChecked, eventType);\n    }\n\n    public setAllColumns(cols: AgColumn[], selectAllChecked: boolean, eventType: ColumnEventType): void {\n        if (this.columnModel.isPivotMode()) {\n            this.setAllPivot(cols, selectAllChecked, eventType);\n        } else {\n            this.setAllVisible(cols, selectAllChecked, eventType);\n        }\n    }\n\n    private extractAllLeafColumns(allItems: ColumnModelItem[]): AgColumn[] {\n        const res: AgColumn[] = [];\n\n        const recursiveFunc = (items: ColumnModelItem[]) => {\n            items.forEach((item) => {\n                if (!item.isPassesFilter()) {\n                    return;\n                }\n                if (item.isGroup()) {\n                    recursiveFunc(item.getChildren());\n                } else {\n                    res.push(item.getColumn());\n                }\n            });\n        };\n\n        recursiveFunc(allItems);\n\n        return res;\n    }\n\n    private setAllVisible(columns: AgColumn[], visible: boolean, eventType: ColumnEventType): void {\n        const colStateItems: ColumnState[] = [];\n\n        columns.forEach((col) => {\n            if (col.getColDef().lockVisible) {\n                return;\n            }\n            if (col.isVisible() != visible) {\n                colStateItems.push({\n                    colId: col.getId(),\n                    hide: !visible,\n                });\n            }\n        });\n\n        if (colStateItems.length > 0) {\n            this.columnApplyStateService.applyColumnState({ state: colStateItems }, eventType);\n        }\n    }\n\n    private setAllPivot(columns: AgColumn[], value: boolean, eventType: ColumnEventType): void {\n        this.setAllPivotActive(columns, value, eventType);\n    }\n\n    private setAllPivotActive(columns: AgColumn[], value: boolean, eventType: ColumnEventType): void {\n        const colStateItems: ColumnState[] = [];\n\n        const turnOnAction = (col: AgColumn) => {\n            // don't change any column that's already got a function active\n            if (col.isAnyFunctionActive()) {\n                return;\n            }\n\n            if (col.isAllowValue()) {\n                const aggFunc =\n                    typeof col.getAggFunc() === 'string'\n                        ? col.getAggFunc()\n                        : this.aggFuncService?.getDefaultAggFunc(col);\n                colStateItems.push({\n                    colId: col.getId(),\n                    aggFunc: aggFunc,\n                });\n            } else if (col.isAllowRowGroup()) {\n                colStateItems.push({\n                    colId: col.getId(),\n                    rowGroup: true,\n                });\n            } else if (col.isAllowPivot()) {\n                colStateItems.push({\n                    colId: col.getId(),\n                    pivot: true,\n                });\n            }\n        };\n\n        const turnOffAction = (col: AgColumn) => {\n            const isActive = col.isPivotActive() || col.isRowGroupActive() || col.isValueActive();\n            if (isActive) {\n                colStateItems.push({\n                    colId: col.getId(),\n                    pivot: false,\n                    rowGroup: false,\n                    aggFunc: null,\n                });\n            }\n        };\n\n        const action = value ? turnOnAction : turnOffAction;\n\n        columns.forEach(action);\n\n        if (colStateItems.length > 0) {\n            this.columnApplyStateService.applyColumnState({ state: colStateItems }, eventType);\n        }\n    }\n\n    public updateColumns(params: {\n        columns: AgColumn[];\n        visibleState?: { [key: string]: boolean };\n        pivotState?: {\n            [key: string]: {\n                pivot?: boolean;\n                rowGroup?: boolean;\n                aggFunc?: string | IAggFunc | null;\n            };\n        };\n        eventType: ColumnEventType;\n    }): void {\n        const { columns, visibleState, pivotState, eventType } = params;\n        const state: ColumnState[] = columns.map((column) => {\n            const colId = column.getColId();\n            if (this.columnModel.isPivotMode()) {\n                const pivotStateForColumn = pivotState?.[colId];\n                return {\n                    colId,\n                    pivot: pivotStateForColumn?.pivot,\n                    rowGroup: pivotStateForColumn?.rowGroup,\n                    aggFunc: pivotStateForColumn?.aggFunc,\n                };\n            } else {\n                return {\n                    colId,\n                    hide: !visibleState?.[colId],\n                };\n            }\n        });\n        this.columnApplyStateService.applyColumnState({ state }, eventType);\n    }\n\n    public createPivotState(column: AgColumn): {\n        pivot?: boolean;\n        rowGroup?: boolean;\n        aggFunc?: string | IAggFunc | null;\n    } {\n        return {\n            pivot: column.isPivotActive(),\n            rowGroup: column.isRowGroupActive(),\n            aggFunc: column.isValueActive() ? column.getAggFunc() : undefined,\n        };\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.3.1';\n"],
  "mappings": "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",
  "names": ["ModuleNames", "Component", "Component", "RefPlaceholder", "Component", "_setAriaLabel", "_warnOnce", "isProvidedColumnGroup", "DragSourceType", "isProvidedColumnGroup", "AgCheckboxSelector", "Component", "KeyCode", "RefPlaceholder", "_createIconNoSpan", "_setDisplayed", "Component", "_createIconNoSpan", "Component", "RefPlaceholder", "AgCheckboxSelector", "_createIconNoSpan", "KeyCode", "_setDisplayed", "DragSourceType", "isProvidedColumnGroup", "AgCheckboxSelector", "Component", "DragSourceType", "KeyCode", "RefPlaceholder", "_createIconNoSpan", "_getToolPanelClassesFromColDef", "_setAriaDescribedBy", "_setAriaLabel", "_setDisplayed", "Component", "RefPlaceholder", "AgCheckboxSelector", "_createIconNoSpan", "_getToolPanelClassesFromColDef", "KeyCode", "_setAriaLabel", "_setAriaDescribedBy", "_setDisplayed", "DragSourceType", "Component", "isProvidedColumnGroup", "_setAriaLabel", "_warnOnce", "Component", "RefPlaceholder", "Component", "RefPlaceholder", "Component", "BeanStub", "ModuleNames"]
}
