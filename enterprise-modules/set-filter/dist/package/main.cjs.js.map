{
  "version": 3,
  "sources": ["../../src/main.ts", "../../src/setFilterModule.ts", "../../src/setFilter/setFilter.ts", "../../src/setFilter/iSetDisplayValueModel.ts", "../../src/setFilter/localeText.ts", "../../src/setFilter/setFilterListItem.ts", "../../src/setFilter/setFilterModelFormatter.ts", "../../src/setFilter/setValueModel.ts", "../../src/clientSideValueExtractor.ts", "../../src/setFilter/filteringKeys.ts", "../../src/setFilter/flatSetDisplayValueModel.ts", "../../src/setFilter/treeSetDisplayValueModel.ts", "../../src/setFilter/setFloatingFilter.ts", "../../src/version.ts"],
  "sourcesContent": ["export { SetFilterModule } from './setFilterModule';\nexport { SetFilter } from './setFilter/setFilter';\n", "import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames, _ColumnFilterModule, _FloatingFilterModule } from '@ag-grid-community/core';\nimport { EnterpriseCoreModule } from '@ag-grid-enterprise/core';\n\nimport { SetFilter } from './setFilter/setFilter';\nimport { SetFloatingFilterComp } from './setFilter/setFloatingFilter';\nimport { VERSION } from './version';\n\nexport const SetFilterCoreModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.SetFilterModule}-core`,\n    userComponents: [{ name: 'agSetColumnFilter', classImp: SetFilter }],\n    dependantModules: [EnterpriseCoreModule, _ColumnFilterModule],\n};\n\nconst SetFloatingFilterModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-enterprise/set-floating-filter',\n    userComponents: [{ name: 'agSetColumnFloatingFilter', classImp: SetFloatingFilterComp }],\n    dependantModules: [SetFilterCoreModule, _FloatingFilterModule],\n};\n\nexport const SetFilterModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.SetFilterModule,\n    dependantModules: [SetFilterCoreModule, SetFloatingFilterModule],\n};\n", "import type {\n    AgColumn,\n    AgInputTextField,\n    BeanCollection,\n    ComponentSelector,\n    DataTypeService,\n    FuncColsService,\n    GetDataPath,\n    IAfterGuiAttachedParams,\n    IDoesFilterPassParams,\n    IRowNode,\n    ISetFilter,\n    KeyCreatorParams,\n    SetFilterModel,\n    SetFilterModelValue,\n    SetFilterParams,\n    ValueFormatterParams,\n    ValueService,\n} from '@ag-grid-community/core';\nimport {\n    AgInputTextFieldSelector,\n    AgPromise,\n    GROUP_AUTO_COLUMN_ID,\n    KeyCode,\n    ProvidedFilter,\n    RefPlaceholder,\n    _areEqual,\n    _last,\n    _makeNull,\n    _setDisplayed,\n    _toStringOrNull,\n    _warnOnce,\n} from '@ag-grid-community/core';\nimport { VirtualList } from '@ag-grid-enterprise/core';\nimport type { VirtualListModel } from '@ag-grid-enterprise/core';\n\nimport type { SetFilterModelTreeItem } from './iSetDisplayValueModel';\nimport { SetFilterDisplayValue } from './iSetDisplayValueModel';\nimport type { ISetFilterLocaleText } from './localeText';\nimport { DEFAULT_LOCALE_TEXT } from './localeText';\nimport type {\n    SetFilterListItemExpandedChangedEvent,\n    SetFilterListItemParams,\n    SetFilterListItemSelectionChangedEvent,\n} from './setFilterListItem';\nimport { SetFilterListItem } from './setFilterListItem';\nimport { SetFilterModelFormatter } from './setFilterModelFormatter';\nimport { SetFilterModelValuesType, SetValueModel } from './setValueModel';\n\n/** @param V type of value in the Set Filter */\nexport class SetFilter<V = string> extends ProvidedFilter<SetFilterModel, V> implements ISetFilter<V> {\n    private funcColsService: FuncColsService;\n    private valueService: ValueService;\n    private dataTypeService?: DataTypeService;\n\n    public override wireBeans(beans: BeanCollection) {\n        super.wireBeans(beans);\n        this.funcColsService = beans.funcColsService;\n        this.valueService = beans.valueService;\n        this.dataTypeService = beans.dataTypeService;\n    }\n\n    private readonly eMiniFilter: AgInputTextField = RefPlaceholder;\n    private readonly eFilterLoading: HTMLElement = RefPlaceholder;\n    private readonly eSetFilterList: HTMLElement = RefPlaceholder;\n    private readonly eFilterNoMatches: HTMLElement = RefPlaceholder;\n\n    private valueModel: SetValueModel<V> | null = null;\n    private setFilterParams: SetFilterParams<any, V> | null = null;\n    private virtualList: VirtualList<any> | null = null;\n    private caseSensitive: boolean = false;\n    private treeDataTreeList = false;\n    private getDataPath?: GetDataPath<any>;\n    private groupingTreeList = false;\n    private hardRefreshVirtualList = false;\n    private noValueFormatterSupplied = false;\n\n    private createKey: (value: V | null | undefined, node?: IRowNode | null) => string | null;\n\n    private valueFormatter?: (params: ValueFormatterParams) => string;\n    private readonly filterModelFormatter = new SetFilterModelFormatter();\n\n    constructor() {\n        super('setFilter');\n    }\n\n    public override postConstruct() {\n        super.postConstruct();\n    }\n\n    // unlike the simple filters, nothing in the set filter UI shows/hides.\n    // maybe this method belongs in abstractSimpleFilter???\n    protected updateUiVisibility(): void {}\n\n    protected createBodyTemplate(): string {\n        return /* html */ `\n            <div class=\"ag-set-filter\">\n                <div data-ref=\"eFilterLoading\" class=\"ag-filter-loading ag-hidden\">${this.translateForSetFilter('loadingOoo')}</div>\n                <ag-input-text-field class=\"ag-mini-filter\" data-ref=\"eMiniFilter\"></ag-input-text-field>\n                <div data-ref=\"eFilterNoMatches\" class=\"ag-filter-no-matches ag-hidden\">${this.translateForSetFilter('noMatches')}</div>\n                <div data-ref=\"eSetFilterList\" class=\"ag-set-filter-list\" role=\"presentation\"></div>\n            </div>`;\n    }\n    protected getAgComponents(): ComponentSelector[] {\n        return [AgInputTextFieldSelector];\n    }\n\n    protected override handleKeyDown(e: KeyboardEvent): void {\n        super.handleKeyDown(e);\n\n        if (e.defaultPrevented) {\n            return;\n        }\n\n        switch (e.key) {\n            case KeyCode.SPACE:\n                this.handleKeySpace(e);\n                break;\n            case KeyCode.ENTER:\n                this.handleKeyEnter(e);\n                break;\n            case KeyCode.LEFT:\n                this.handleKeyLeft(e);\n                break;\n            case KeyCode.RIGHT:\n                this.handleKeyRight(e);\n                break;\n        }\n    }\n\n    private handleKeySpace(e: KeyboardEvent): void {\n        this.getComponentForKeyEvent(e)?.toggleSelected();\n    }\n\n    private handleKeyEnter(e: KeyboardEvent): void {\n        if (!this.setFilterParams) {\n            return;\n        }\n\n        const { excelMode, readOnly } = this.setFilterParams || {};\n        if (!excelMode || !!readOnly) {\n            return;\n        }\n\n        e.preventDefault();\n\n        // in Excel Mode, hitting Enter is the same as pressing the Apply button\n        this.onBtApply(false, false, e);\n\n        if (this.setFilterParams.excelMode === 'mac') {\n            // in Mac version, select all the input text\n            this.eMiniFilter.getInputElement().select();\n        }\n    }\n\n    private handleKeyLeft(e: KeyboardEvent): void {\n        this.getComponentForKeyEvent(e)?.setExpanded(false);\n    }\n\n    private handleKeyRight(e: KeyboardEvent): void {\n        this.getComponentForKeyEvent(e)?.setExpanded(true);\n    }\n\n    private getComponentForKeyEvent(e: KeyboardEvent): SetFilterListItem<V> | undefined {\n        if (!this.eSetFilterList.contains(this.gos.getActiveDomElement()) || !this.virtualList) {\n            return;\n        }\n\n        const currentItem = this.virtualList.getLastFocusedRow();\n        if (currentItem == null) {\n            return;\n        }\n\n        const component = this.virtualList.getComponentAt(currentItem) as SetFilterListItem<V>;\n        if (component == null) {\n            return;\n        }\n\n        e.preventDefault();\n\n        const { readOnly } = this.setFilterParams ?? {};\n        if (readOnly) {\n            return;\n        }\n        return component;\n    }\n\n    protected getCssIdentifier(): string {\n        return 'set-filter';\n    }\n\n    public override setModel(model: SetFilterModel | null): AgPromise<void> {\n        if (model == null && this.valueModel?.getModel() == null) {\n            // refreshing is expensive. if new and old model are both null (e.g. nothing set), skip.\n            // mini filter isn't contained within the model, so always reset\n            this.setMiniFilter(null);\n            return AgPromise.resolve();\n        }\n        return super.setModel(model);\n    }\n\n    override refresh(params: SetFilterParams<any, V>): boolean {\n        this.applyExcelModeOptions(params);\n\n        if (!super.refresh(params)) {\n            return false;\n        }\n\n        // Those params have a large impact and should trigger a reload when they change.\n        const paramsThatForceReload: (keyof SetFilterParams<any, V>)[] = [\n            'treeList',\n            'treeListFormatter',\n            'treeListPathGetter',\n            'caseSensitive',\n            'comparator',\n            'suppressSelectAll',\n            'excelMode',\n        ];\n\n        if (paramsThatForceReload.some((param) => params[param] !== this.setFilterParams?.[param])) {\n            return false;\n        }\n\n        if (this.haveColDefParamsChanged(params)) {\n            return false;\n        }\n\n        super.updateParams(params);\n        this.updateSetFilterOnParamsChange(params);\n        this.updateMiniFilter();\n\n        if (\n            params.cellRenderer !== this.setFilterParams?.cellRenderer ||\n            params.valueFormatter !== this.setFilterParams?.valueFormatter\n        ) {\n            this.checkAndRefreshVirtualList();\n        }\n\n        this.valueModel?.updateOnParamsChange(params).then(() => {\n            if (this.valueModel?.hasSelections()) {\n                this.refreshFilterValues();\n            }\n        });\n\n        return true;\n    }\n\n    private haveColDefParamsChanged(params: SetFilterParams<any, V>): boolean {\n        const { colDef, keyCreator } = params;\n        const { colDef: existingColDef, keyCreator: existingKeyCreator } = this.setFilterParams ?? {};\n        const processedKeyCreator = keyCreator ?? colDef.keyCreator;\n        return (\n            colDef.filterValueGetter !== existingColDef?.filterValueGetter ||\n            processedKeyCreator !== (existingKeyCreator ?? existingColDef?.keyCreator) ||\n            (!!this.dataTypeService &&\n                this.dataTypeService.getFormatValue(colDef.cellDataType as string) === processedKeyCreator &&\n                colDef.valueFormatter !== existingColDef?.valueFormatter)\n        );\n    }\n\n    private setModelAndRefresh(values: SetFilterModelValue | null): AgPromise<void> {\n        return this.valueModel\n            ? this.valueModel.setModel(values).then(() => this.checkAndRefreshVirtualList())\n            : AgPromise.resolve();\n    }\n\n    protected resetUiToDefaults(): AgPromise<void> {\n        this.setMiniFilter(null);\n\n        return this.setModelAndRefresh(null);\n    }\n\n    protected setModelIntoUi(model: SetFilterModel | null): AgPromise<void> {\n        this.setMiniFilter(null);\n\n        const values = model == null ? null : model.values;\n        return this.setModelAndRefresh(values);\n    }\n\n    public getModelFromUi(): SetFilterModel | null {\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        const values = this.valueModel.getModel();\n\n        if (!values) {\n            return null;\n        }\n\n        return { values, filterType: this.getFilterType() };\n    }\n\n    public getFilterType(): 'set' {\n        return 'set';\n    }\n\n    public getValueModel(): SetValueModel<V> | null {\n        return this.valueModel;\n    }\n\n    protected areModelsEqual(a: SetFilterModel, b: SetFilterModel): boolean {\n        // both are missing\n        if (a == null && b == null) {\n            return true;\n        }\n\n        return a != null && b != null && _areEqual(a.values, b.values);\n    }\n\n    private updateSetFilterOnParamsChange = (newParams: SetFilterParams<any, V>) => {\n        this.setFilterParams = newParams;\n        this.caseSensitive = !!newParams.caseSensitive;\n        const keyCreator = newParams.keyCreator ?? newParams.colDef.keyCreator;\n        this.setValueFormatter(newParams.valueFormatter, keyCreator, !!newParams.treeList, !!newParams.colDef.refData);\n        const isGroupCol = newParams.column.getId().startsWith(GROUP_AUTO_COLUMN_ID);\n        this.treeDataTreeList = this.gos.get('treeData') && !!newParams.treeList && isGroupCol;\n        this.getDataPath = this.gos.get('getDataPath');\n        this.groupingTreeList =\n            !!this.funcColsService.getRowGroupColumns().length && !!newParams.treeList && isGroupCol;\n        this.createKey = this.generateCreateKey(keyCreator, this.treeDataTreeList || this.groupingTreeList);\n    };\n\n    public override setParams(params: SetFilterParams<any, V>): void {\n        this.applyExcelModeOptions(params);\n\n        super.setParams(params);\n\n        this.updateSetFilterOnParamsChange(params);\n\n        const keyCreator = params.keyCreator ?? params.colDef.keyCreator;\n\n        this.valueModel = new SetValueModel({\n            filterParams: params,\n            setIsLoading: (loading) => this.setIsLoading(loading),\n            translate: (key) => this.translateForSetFilter(key),\n            caseFormat: (v) => this.caseFormat(v),\n            createKey: this.createKey,\n            valueFormatter: this.valueFormatter,\n            usingComplexObjects: !!keyCreator,\n            gos: this.gos,\n            funcColsService: this.funcColsService,\n            valueService: this.valueService,\n            treeDataTreeList: this.treeDataTreeList,\n            groupingTreeList: this.groupingTreeList,\n            addManagedEventListeners: (handlers) => this.addManagedEventListeners(handlers),\n        });\n\n        this.initialiseFilterBodyUi();\n\n        this.addEventListenersForDataChanges();\n    }\n\n    private onAddCurrentSelectionToFilterChange(newValue: boolean) {\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n        this.valueModel.setAddCurrentSelectionToFilter(newValue);\n    }\n\n    private setValueFormatter(\n        providedValueFormatter: ((params: ValueFormatterParams) => string) | undefined,\n        keyCreator: ((params: KeyCreatorParams<any, any>) => string) | undefined,\n        treeList: boolean,\n        isRefData: boolean\n    ) {\n        let valueFormatter = providedValueFormatter;\n        if (!valueFormatter) {\n            if (keyCreator && !treeList) {\n                throw new Error('AG Grid: Must supply a Value Formatter in Set Filter params when using a Key Creator');\n            }\n            this.noValueFormatterSupplied = true;\n            // ref data is handled by ValueService\n            if (!isRefData) {\n                valueFormatter = (params) => _toStringOrNull(params.value)!;\n            }\n        }\n        this.valueFormatter = valueFormatter;\n    }\n\n    private generateCreateKey(\n        keyCreator: ((params: KeyCreatorParams<any, any>) => string) | undefined,\n        treeDataOrGrouping: boolean\n    ): (value: V | null | undefined, node?: IRowNode | null) => string | null {\n        if (treeDataOrGrouping && !keyCreator) {\n            throw new Error(\n                'AG Grid: Must supply a Key Creator in Set Filter params when `treeList = true` on a group column, and Tree Data or Row Grouping is enabled.'\n            );\n        }\n        if (keyCreator) {\n            return (value, node = null) => {\n                const params = this.getKeyCreatorParams(value, node);\n                return _makeNull(keyCreator!(params));\n            };\n        }\n        return (value) => _makeNull(_toStringOrNull(value));\n    }\n\n    public getFormattedValue(key: string | null): string | null {\n        let value: V | string | null = this.valueModel!.getValue(key);\n        if (this.noValueFormatterSupplied && (this.treeDataTreeList || this.groupingTreeList) && Array.isArray(value)) {\n            // essentially get back the cell value\n            value = _last(value) as string;\n        }\n\n        const formattedValue = this.valueService.formatValue(\n            this.setFilterParams!.column as AgColumn,\n            null,\n            value,\n            this.valueFormatter,\n            false\n        );\n\n        return (\n            (formattedValue == null ? _toStringOrNull(value) : formattedValue) ?? this.translateForSetFilter('blanks')\n        );\n    }\n\n    private applyExcelModeOptions(params: SetFilterParams<any, V>): void {\n        // apply default options to match Excel behaviour, unless they have already been specified\n        if (params.excelMode === 'windows') {\n            if (!params.buttons) {\n                params.buttons = ['apply', 'cancel'];\n            }\n\n            if (params.closeOnApply == null) {\n                params.closeOnApply = true;\n            }\n        } else if (params.excelMode === 'mac') {\n            if (!params.buttons) {\n                params.buttons = ['reset'];\n            }\n\n            if (params.applyMiniFilterWhileTyping == null) {\n                params.applyMiniFilterWhileTyping = true;\n            }\n\n            if (params.debounceMs == null) {\n                params.debounceMs = 500;\n            }\n        }\n        if (params.excelMode && params.defaultToNothingSelected) {\n            params.defaultToNothingSelected = false;\n            _warnOnce(\n                'The Set Filter Parameter \"defaultToNothingSelected\" value was ignored because it does not work when \"excelMode\" is used.'\n            );\n        }\n    }\n\n    private addEventListenersForDataChanges(): void {\n        if (!this.isValuesTakenFromGrid()) {\n            return;\n        }\n\n        this.addManagedEventListeners({\n            cellValueChanged: (event) => {\n                // only interested in changes to do with this column\n                if (this.setFilterParams && event.column === this.setFilterParams.column) {\n                    this.syncAfterDataChange();\n                }\n            },\n        });\n\n        this.addManagedPropertyListeners(['treeData', 'getDataPath', 'groupAllowUnbalanced'], () => {\n            this.syncAfterDataChange();\n        });\n    }\n\n    private syncAfterDataChange(): AgPromise<void> {\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        const promise = this.valueModel.refreshValues();\n\n        return promise.then(() => {\n            this.checkAndRefreshVirtualList();\n            this.onBtApply(false, true);\n        });\n    }\n\n    private setIsLoading(isLoading: boolean): void {\n        _setDisplayed(this.eFilterLoading, isLoading);\n        if (!isLoading) {\n            // hard refresh when async data received\n            this.hardRefreshVirtualList = true;\n        }\n    }\n\n    private initialiseFilterBodyUi(): void {\n        this.initVirtualList();\n        this.initMiniFilter();\n    }\n\n    private initVirtualList(): void {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        const translate = this.localeService.getLocaleTextFunc();\n        const filterListName = translate('ariaFilterList', 'Filter List');\n        const isTree = !!this.setFilterParams.treeList;\n\n        const virtualList = (this.virtualList = this.createBean(\n            new VirtualList({\n                cssIdentifier: 'filter',\n                ariaRole: isTree ? 'tree' : 'listbox',\n                listName: filterListName,\n            })\n        ));\n        const eSetFilterList = this.eSetFilterList;\n\n        if (isTree) {\n            eSetFilterList.classList.add('ag-set-filter-tree-list');\n        }\n\n        if (eSetFilterList) {\n            eSetFilterList.appendChild(virtualList.getGui());\n        }\n\n        const { cellHeight } = this.setFilterParams;\n\n        if (cellHeight != null) {\n            virtualList.setRowHeight(cellHeight);\n        }\n\n        const componentCreator = (item: SetFilterModelTreeItem | string | null, listItemElement: HTMLElement) =>\n            this.createSetListItem(item, isTree, listItemElement);\n        virtualList.setComponentCreator(componentCreator);\n\n        const componentUpdater = (\n            item: SetFilterModelTreeItem | string | null,\n            component: SetFilterListItem<V | string | null>\n        ) => this.updateSetListItem(item, component);\n        virtualList.setComponentUpdater(componentUpdater);\n\n        let model: VirtualListModel;\n\n        if (this.setFilterParams.suppressSelectAll) {\n            model = new ModelWrapper(this.valueModel);\n        } else {\n            model = new ModelWrapperWithSelectAll(this.valueModel, () => this.isSelectAllSelected());\n        }\n        if (isTree) {\n            model = new TreeModelWrapper(model);\n        }\n\n        virtualList.setModel(model);\n    }\n\n    private getSelectAllLabel(): string {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        const key =\n            this.valueModel.getMiniFilter() == null || !this.setFilterParams.excelMode\n                ? 'selectAll'\n                : 'selectAllSearchResults';\n\n        return this.translateForSetFilter(key);\n    }\n\n    private getAddSelectionToFilterLabel(): string {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        return this.translateForSetFilter('addCurrentSelectionToFilter');\n    }\n\n    private createSetListItem(\n        item: SetFilterModelTreeItem | string | null,\n        isTree: boolean,\n        focusWrapper: HTMLElement\n    ): SetFilterListItem<V | string | null> {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        const groupsExist = this.valueModel.hasGroups();\n        const { isSelected, isExpanded } = this.isSelectedExpanded(item);\n\n        const { value, depth, isGroup, hasIndeterminateExpandState, selectedListener, expandedListener } =\n            this.newSetListItemAttributes(item);\n\n        const itemParams: SetFilterListItemParams<V | string | null> = {\n            focusWrapper,\n            value,\n            params: this.setFilterParams,\n            translate: (translateKey: any) => this.translateForSetFilter(translateKey),\n            valueFormatter: this.valueFormatter,\n            item,\n            isSelected,\n            isTree,\n            depth,\n            groupsExist,\n            isGroup,\n            isExpanded,\n            hasIndeterminateExpandState,\n        };\n        const listItem = this.createBean(new SetFilterListItem<V | string | null>(itemParams));\n\n        listItem.addEventListener('selectionChanged', selectedListener as any);\n        if (expandedListener) {\n            listItem.addEventListener('expandedChanged', expandedListener as any);\n        }\n\n        return listItem;\n    }\n\n    private newSetTreeItemAttributes(item: SetFilterModelTreeItem): {\n        value: V | string | (() => string) | null;\n        depth?: number | undefined;\n        isGroup?: boolean | undefined;\n        hasIndeterminateExpandState?: boolean | undefined;\n        selectedListener: (e: SetFilterListItemSelectionChangedEvent) => void;\n        expandedListener?: (e: SetFilterListItemExpandedChangedEvent) => void;\n    } {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        const groupsExist = this.valueModel.hasGroups();\n\n        // Select all option\n        if (item.key === SetFilterDisplayValue.SELECT_ALL) {\n            return {\n                value: () => this.getSelectAllLabel(),\n                isGroup: groupsExist,\n                depth: item.depth,\n                hasIndeterminateExpandState: true,\n                selectedListener: (e: SetFilterListItemSelectionChangedEvent) => this.onSelectAll(e.isSelected),\n                expandedListener: (e: SetFilterListItemExpandedChangedEvent<SetFilterModelTreeItem>) =>\n                    this.onExpandAll(e.item, e.isExpanded),\n            };\n        }\n\n        // Add selection to filter option\n        if (item.key === SetFilterDisplayValue.ADD_SELECTION_TO_FILTER) {\n            return {\n                value: () => this.getAddSelectionToFilterLabel(),\n                depth: item.depth,\n                isGroup: false,\n                hasIndeterminateExpandState: false,\n                selectedListener: (e: SetFilterListItemSelectionChangedEvent) => {\n                    this.onAddCurrentSelectionToFilterChange(e.isSelected);\n                },\n            };\n        }\n\n        // Group\n        if (item.children) {\n            return {\n                value:\n                    this.setFilterParams.treeListFormatter?.(item.treeKey, item.depth, item.parentTreeKeys) ??\n                    item.treeKey,\n                depth: item.depth,\n                isGroup: true,\n                selectedListener: (e: SetFilterListItemSelectionChangedEvent<SetFilterModelTreeItem>) =>\n                    this.onGroupItemSelected(e.item, e.isSelected),\n                expandedListener: (e: SetFilterListItemExpandedChangedEvent<SetFilterModelTreeItem>) =>\n                    this.onExpandedChanged(e.item, e.isExpanded),\n            };\n        }\n\n        // Leaf\n        return {\n            value:\n                this.setFilterParams.treeListFormatter?.(item.treeKey, item.depth, item.parentTreeKeys) ?? item.treeKey,\n            depth: item.depth,\n            selectedListener: (e: SetFilterListItemSelectionChangedEvent<SetFilterModelTreeItem>) =>\n                this.onItemSelected(e.item.key!, e.isSelected),\n        };\n    }\n\n    private newSetListItemAttributes(item: SetFilterModelTreeItem | string | null): {\n        value: V | string | (() => string) | null;\n        depth?: number | undefined;\n        isGroup?: boolean | undefined;\n        hasIndeterminateExpandState?: boolean | undefined;\n        selectedListener: (e: SetFilterListItemSelectionChangedEvent) => void;\n        expandedListener?: (e: SetFilterListItemExpandedChangedEvent) => void;\n    } {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        // Tree item\n        if (this.isSetFilterModelTreeItem(item)) {\n            return this.newSetTreeItemAttributes(item);\n        }\n\n        // List item - 'Select All'\n        if (item === SetFilterDisplayValue.SELECT_ALL) {\n            return {\n                value: () => this.getSelectAllLabel(),\n                selectedListener: (e: SetFilterListItemSelectionChangedEvent<string>) => this.onSelectAll(e.isSelected),\n            };\n        }\n\n        // List item - 'Add selection to filter'\n        if (item === SetFilterDisplayValue.ADD_SELECTION_TO_FILTER) {\n            return {\n                value: () => this.getAddSelectionToFilterLabel(),\n                selectedListener: (e: SetFilterListItemSelectionChangedEvent<string | null>) => {\n                    this.onAddCurrentSelectionToFilterChange(e.isSelected);\n                },\n            };\n        }\n\n        // List item\n        return {\n            value: this.valueModel.getValue(item),\n            selectedListener: (e: SetFilterListItemSelectionChangedEvent<string | null>) =>\n                this.onItemSelected(e.item, e.isSelected),\n        };\n    }\n\n    private updateSetListItem(\n        item: SetFilterModelTreeItem | string | null,\n        component: SetFilterListItem<V | string | null>\n    ): void {\n        const { isSelected, isExpanded } = this.isSelectedExpanded(item);\n        component.refresh(item, isSelected, isExpanded);\n    }\n\n    private isSelectedExpanded(item: SetFilterModelTreeItem | string | null): {\n        isSelected: boolean | undefined;\n        isExpanded: boolean | undefined;\n    } {\n        let isSelected: boolean | undefined;\n        let isExpanded: boolean | undefined;\n        if (this.isSetFilterModelTreeItem(item)) {\n            isExpanded = item.expanded;\n            if (item.key === SetFilterDisplayValue.SELECT_ALL) {\n                isSelected = this.isSelectAllSelected();\n            } else if (item.key === SetFilterDisplayValue.ADD_SELECTION_TO_FILTER) {\n                isSelected = this.valueModel!.isAddCurrentSelectionToFilterChecked();\n            } else if (item.children) {\n                isSelected = this.areAllChildrenSelected(item);\n            } else {\n                isSelected = this.valueModel!.isKeySelected(item.key!);\n            }\n        } else {\n            if (item === SetFilterDisplayValue.SELECT_ALL) {\n                isSelected = this.isSelectAllSelected();\n            } else if (item === SetFilterDisplayValue.ADD_SELECTION_TO_FILTER) {\n                isSelected = this.valueModel!.isAddCurrentSelectionToFilterChecked();\n            } else {\n                isSelected = this.valueModel!.isKeySelected(item);\n            }\n        }\n        return { isSelected, isExpanded };\n    }\n\n    private isSetFilterModelTreeItem(item: any): item is SetFilterModelTreeItem {\n        return item?.treeKey !== undefined;\n    }\n\n    private initMiniFilter() {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        const { eMiniFilter, localeService } = this;\n        const translate = localeService.getLocaleTextFunc();\n\n        eMiniFilter.setDisplayed(!this.setFilterParams.suppressMiniFilter);\n        eMiniFilter.setValue(this.valueModel.getMiniFilter());\n        eMiniFilter.onValueChange(() => this.onMiniFilterInput());\n        eMiniFilter.setInputAriaLabel(translate('ariaSearchFilterValues', 'Search filter values'));\n\n        this.addManagedElementListeners(eMiniFilter.getInputElement(), {\n            keydown: (e) => this.onMiniFilterKeyDown(e!),\n        });\n    }\n\n    private updateMiniFilter() {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        const { eMiniFilter } = this;\n\n        if (eMiniFilter.isDisplayed() !== !this.setFilterParams.suppressMiniFilter) {\n            eMiniFilter.setDisplayed(!this.setFilterParams.suppressMiniFilter);\n        }\n\n        const miniFilterValue = this.valueModel.getMiniFilter();\n        if (eMiniFilter.getValue() !== miniFilterValue) {\n            eMiniFilter.setValue(miniFilterValue);\n        }\n    }\n\n    // we need to have the GUI attached before we can draw the virtual rows, as the\n    // virtual row logic needs info about the GUI state\n    public override afterGuiAttached(params?: IAfterGuiAttachedParams): void {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n\n        super.afterGuiAttached(params);\n\n        // collapse all tree list items (if tree list)\n        this.resetExpansion();\n\n        this.refreshVirtualList();\n\n        const { eMiniFilter } = this;\n\n        eMiniFilter.setInputPlaceholder(this.translateForSetFilter('searchOoo'));\n\n        if (!params || !params.suppressFocus) {\n            eMiniFilter.getFocusableElement().focus();\n        }\n    }\n\n    public override afterGuiDetached(): void {\n        super.afterGuiDetached();\n\n        // discard any unapplied UI state (reset to model)\n        if (this.setFilterParams?.excelMode) {\n            this.resetMiniFilter();\n        }\n        const appliedModel = this.getModel();\n        if (this.setFilterParams?.excelMode || !this.areModelsEqual(appliedModel!, this.getModelFromUi()!)) {\n            this.resetUiToActiveModel(appliedModel);\n            this.showOrHideResults();\n        }\n    }\n\n    public override applyModel(source: 'api' | 'ui' | 'rowDataUpdated' = 'api'): boolean {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        if (\n            this.setFilterParams.excelMode &&\n            source !== 'rowDataUpdated' &&\n            this.valueModel.isEverythingVisibleSelected()\n        ) {\n            // In Excel, if the filter is applied with all visible values selected, then any active filter on the\n            // column is removed. This ensures the filter is removed in this situation.\n            this.valueModel.selectAllMatchingMiniFilter();\n        }\n\n        // Here we implement AG-9090 TC2\n        // When 'Add current selection to filter' is visible and checked, but no filter is applied:\n        // Do NOT apply the current selection as filter.\n        const shouldKeepCurrentSelection =\n            this.valueModel!.showAddCurrentSelectionToFilter() &&\n            this.valueModel!.isAddCurrentSelectionToFilterChecked();\n        if (shouldKeepCurrentSelection && !this.getModel()) {\n            return false;\n        }\n\n        const result = super.applyModel(source);\n\n        // keep appliedModelKeys in sync with the applied model\n        const appliedModel = this.getModel();\n\n        if (appliedModel) {\n            if (!shouldKeepCurrentSelection) {\n                this.valueModel.setAppliedModelKeys(new Set());\n            }\n\n            appliedModel.values.forEach((key) => {\n                this.valueModel!.addToAppliedModelKeys(key);\n            });\n        } else {\n            if (!shouldKeepCurrentSelection) {\n                this.valueModel.setAppliedModelKeys(null);\n            }\n        }\n\n        return result;\n    }\n\n    protected override isModelValid(model: SetFilterModel): boolean {\n        return this.setFilterParams && this.setFilterParams.excelMode ? model == null || model.values.length > 0 : true;\n    }\n\n    public doesFilterPass(params: IDoesFilterPassParams): boolean {\n        if (!this.setFilterParams || !this.valueModel || !this.valueModel.getCaseFormattedAppliedModelKeys()) {\n            return true;\n        }\n\n        // if nothing selected, don't need to check value\n        if (!this.valueModel.hasAnyAppliedModelKey()) {\n            return false;\n        }\n\n        const { node, data } = params;\n        if (this.treeDataTreeList) {\n            return this.doesFilterPassForTreeData(node, data);\n        }\n        if (this.groupingTreeList) {\n            return this.doesFilterPassForGrouping(node);\n        }\n\n        const value = this.getValueFromNode(node);\n\n        if (value != null && Array.isArray(value)) {\n            if (value.length === 0) {\n                return this.valueModel!.hasAppliedModelKey(null);\n            }\n            return value.some((v) => this.isInAppliedModel(this.createKey(v, node)));\n        }\n\n        return this.isInAppliedModel(this.createKey(value, node));\n    }\n\n    private doesFilterPassForTreeData(node: IRowNode, data: any): boolean {\n        if (node.childrenAfterGroup?.length) {\n            // only perform checking on leaves. The core filtering logic for tree data won't work properly otherwise\n            return false;\n        }\n        return this.isInAppliedModel(this.createKey(this.checkMakeNullDataPath(this.getDataPath!(data)) as any) as any);\n    }\n\n    private doesFilterPassForGrouping(node: IRowNode): boolean {\n        const dataPath = this.funcColsService\n            .getRowGroupColumns()\n            .map((groupCol) => this.valueService.getKeyForNode(groupCol, node));\n        dataPath.push(this.getValueFromNode(node));\n        return this.isInAppliedModel(this.createKey(this.checkMakeNullDataPath(dataPath) as any) as any);\n    }\n\n    private checkMakeNullDataPath(dataPath: string[] | null): string[] | null {\n        if (dataPath) {\n            dataPath = dataPath.map((treeKey) => _toStringOrNull(_makeNull(treeKey))) as any;\n        }\n        if (dataPath?.some((treeKey) => treeKey == null)) {\n            if (this.gos.get('groupAllowUnbalanced') && _last(dataPath) != null) {\n                return dataPath.filter((treeKey) => treeKey != null);\n            }\n            return null;\n        }\n        return dataPath;\n    }\n\n    private isInAppliedModel(key: string | null): boolean {\n        return this.valueModel!.hasAppliedModelKey(key);\n    }\n\n    private getValueFromNode(node: IRowNode): V | null | undefined {\n        return this.setFilterParams!.getValue(node);\n    }\n\n    private getKeyCreatorParams(value: V | null | undefined, node: IRowNode | null = null): KeyCreatorParams {\n        return {\n            value,\n            colDef: this.setFilterParams!.colDef,\n            column: this.setFilterParams!.column,\n            node: node,\n            data: node?.data,\n            api: this.setFilterParams!.api,\n            context: this.setFilterParams!.context,\n        };\n    }\n\n    public override onNewRowsLoaded(): void {\n        if (!this.isValuesTakenFromGrid()) {\n            return;\n        }\n        this.syncAfterDataChange();\n    }\n\n    private isValuesTakenFromGrid(): boolean {\n        if (!this.valueModel) {\n            return false;\n        }\n        const valuesType = this.valueModel.getValuesType();\n        return valuesType === SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES;\n    }\n\n    //noinspection JSUnusedGlobalSymbols\n    /**\n     * Public method provided so the user can change the value of the filter once\n     * the filter has been already started\n     * @param values The values to use.\n     */\n    public setFilterValues(values: (V | null)[]): void {\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        this.valueModel.overrideValues(values).then(() => {\n            this.checkAndRefreshVirtualList();\n            this.onUiChanged();\n        });\n    }\n\n    //noinspection JSUnusedGlobalSymbols\n    /**\n     * Public method provided so the user can reset the values of the filter once that it has started.\n     */\n    public resetFilterValues(): void {\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        this.valueModel.setValuesType(SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES);\n        this.syncAfterDataChange();\n    }\n\n    public refreshFilterValues(): void {\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        // the model is still being initialised\n        if (!this.valueModel.isInitialised()) {\n            return;\n        }\n\n        this.valueModel.refreshValues().then(() => {\n            this.checkAndRefreshVirtualList();\n            this.onUiChanged();\n        });\n    }\n\n    public onAnyFilterChanged(): void {\n        // don't block the current action when updating the values for this filter\n        setTimeout(() => {\n            if (!this.isAlive()) {\n                return;\n            }\n\n            if (!this.valueModel) {\n                throw new Error('Value model has not been created.');\n            }\n\n            this.valueModel.refreshAfterAnyFilterChanged().then((refresh) => {\n                if (refresh) {\n                    this.checkAndRefreshVirtualList();\n                    this.showOrHideResults();\n                }\n            });\n        }, 0);\n    }\n\n    private onMiniFilterInput() {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        if (!this.valueModel.setMiniFilter(this.eMiniFilter.getValue())) {\n            return;\n        }\n\n        const { applyMiniFilterWhileTyping, readOnly } = this.setFilterParams || {};\n        if (!readOnly && applyMiniFilterWhileTyping) {\n            this.filterOnAllVisibleValues(false);\n        } else {\n            this.updateUiAfterMiniFilterChange();\n        }\n    }\n\n    private updateUiAfterMiniFilterChange(): void {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        const { excelMode, readOnly } = this.setFilterParams || {};\n        if (excelMode == null || !!readOnly) {\n            this.checkAndRefreshVirtualList();\n        } else if (this.valueModel.getMiniFilter() == null) {\n            this.resetUiToActiveModel(this.getModel());\n        } else {\n            this.valueModel.selectAllMatchingMiniFilter(true);\n            this.checkAndRefreshVirtualList();\n            this.onUiChanged();\n        }\n\n        this.showOrHideResults();\n    }\n\n    private showOrHideResults(): void {\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        const hideResults = this.valueModel.getMiniFilter() != null && this.valueModel.getDisplayedValueCount() < 1;\n\n        _setDisplayed(this.eFilterNoMatches, hideResults);\n        _setDisplayed(this.eSetFilterList, !hideResults);\n    }\n\n    private resetMiniFilter(): void {\n        this.eMiniFilter.setValue(null, true);\n        this.valueModel?.setMiniFilter(null);\n    }\n\n    protected override resetUiToActiveModel(\n        currentModel: SetFilterModel | null,\n        afterUiUpdatedFunc?: () => void\n    ): void {\n        // override the default behaviour as we don't always want to clear the mini filter\n        this.setModelAndRefresh(currentModel == null ? null : currentModel.values).then(() => {\n            this.onUiChanged(false, 'prevent');\n\n            afterUiUpdatedFunc?.();\n        });\n    }\n\n    protected override handleCancelEnd(e: Event): void {\n        this.setMiniFilter(null);\n        super.handleCancelEnd(e);\n    }\n\n    private onMiniFilterKeyDown(e: KeyboardEvent): void {\n        const { excelMode, readOnly } = this.setFilterParams || {};\n        if (e.key === KeyCode.ENTER && !excelMode && !readOnly) {\n            this.filterOnAllVisibleValues();\n        }\n    }\n\n    private filterOnAllVisibleValues(applyImmediately = true): void {\n        const { readOnly } = this.setFilterParams || {};\n\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n        if (readOnly) {\n            throw new Error('Unable to filter in readOnly mode.');\n        }\n\n        this.valueModel.selectAllMatchingMiniFilter(true);\n        this.checkAndRefreshVirtualList();\n        this.onUiChanged(false, applyImmediately ? 'immediately' : 'debounce');\n        this.showOrHideResults();\n    }\n\n    private focusRowIfAlive(rowIndex: number | null): void {\n        if (rowIndex == null) {\n            return;\n        }\n\n        window.setTimeout(() => {\n            if (!this.virtualList) {\n                throw new Error('Virtual list has not been created.');\n            }\n\n            if (this.isAlive()) {\n                this.virtualList.focusRow(rowIndex);\n            }\n        }, 0);\n    }\n\n    private onSelectAll(isSelected: boolean): void {\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n        if (!this.virtualList) {\n            throw new Error('Virtual list has not been created.');\n        }\n\n        if (isSelected) {\n            this.valueModel.selectAllMatchingMiniFilter();\n        } else {\n            this.valueModel.deselectAllMatchingMiniFilter();\n        }\n\n        this.refreshAfterSelection();\n    }\n\n    private onGroupItemSelected(item: SetFilterModelTreeItem, isSelected: boolean): void {\n        const recursiveGroupSelection = (i: SetFilterModelTreeItem) => {\n            if (i.children) {\n                i.children.forEach((childItem) => recursiveGroupSelection(childItem));\n            } else {\n                this.selectItem(i.key!, isSelected);\n            }\n        };\n\n        recursiveGroupSelection(item);\n\n        this.refreshAfterSelection();\n    }\n\n    private onItemSelected(key: string | null, isSelected: boolean): void {\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n        if (!this.virtualList) {\n            throw new Error('Virtual list has not been created.');\n        }\n\n        this.selectItem(key, isSelected);\n\n        this.refreshAfterSelection();\n    }\n\n    private selectItem(key: string | null, isSelected: boolean): void {\n        if (isSelected) {\n            this.valueModel!.selectKey(key);\n        } else {\n            this.valueModel!.deselectKey(key);\n        }\n    }\n\n    private onExpandAll(item: SetFilterModelTreeItem, isExpanded: boolean): void {\n        const recursiveExpansion = (i: SetFilterModelTreeItem) => {\n            if (i.filterPasses && i.available && i.children) {\n                i.children.forEach((childItem) => recursiveExpansion(childItem));\n                i.expanded = isExpanded;\n            }\n        };\n\n        recursiveExpansion(item);\n\n        this.refreshAfterExpansion();\n    }\n\n    private onExpandedChanged(item: SetFilterModelTreeItem, isExpanded: boolean): void {\n        item.expanded = isExpanded;\n\n        this.refreshAfterExpansion();\n    }\n\n    private refreshAfterExpansion(): void {\n        const focusedRow = this.virtualList!.getLastFocusedRow();\n\n        this.valueModel!.updateDisplayedValues('expansion');\n\n        this.checkAndRefreshVirtualList();\n        this.focusRowIfAlive(focusedRow);\n    }\n\n    private refreshAfterSelection(): void {\n        const focusedRow = this.virtualList!.getLastFocusedRow();\n\n        this.checkAndRefreshVirtualList();\n        this.onUiChanged();\n        this.focusRowIfAlive(focusedRow);\n    }\n\n    public setMiniFilter(newMiniFilter: string | null): void {\n        this.eMiniFilter.setValue(newMiniFilter);\n        this.onMiniFilterInput();\n    }\n\n    public getMiniFilter(): string | null {\n        return this.valueModel ? this.valueModel.getMiniFilter() : null;\n    }\n\n    private checkAndRefreshVirtualList() {\n        if (!this.virtualList) {\n            throw new Error('Virtual list has not been created.');\n        }\n\n        this.virtualList.refresh(!this.hardRefreshVirtualList);\n\n        if (this.hardRefreshVirtualList) {\n            this.hardRefreshVirtualList = false;\n        }\n    }\n\n    public getFilterKeys(): SetFilterModelValue {\n        return this.valueModel ? this.valueModel.getKeys() : [];\n    }\n\n    public getFilterValues(): (V | null)[] {\n        return this.valueModel ? this.valueModel.getValues() : [];\n    }\n\n    public getValues(): SetFilterModelValue {\n        return this.getFilterKeys();\n    }\n\n    public refreshVirtualList(): void {\n        if (this.setFilterParams && this.setFilterParams.refreshValuesOnOpen) {\n            this.refreshFilterValues();\n        } else {\n            this.checkAndRefreshVirtualList();\n        }\n    }\n\n    private translateForSetFilter(key: keyof ISetFilterLocaleText): string {\n        const translate = this.localeService.getLocaleTextFunc();\n\n        return translate(key, DEFAULT_LOCALE_TEXT[key]);\n    }\n\n    private isSelectAllSelected(): boolean | undefined {\n        if (!this.setFilterParams || !this.valueModel) {\n            return false;\n        }\n\n        if (!this.setFilterParams.defaultToNothingSelected) {\n            // everything selected by default\n            if (this.valueModel.hasSelections() && this.valueModel.isNothingVisibleSelected()) {\n                return false;\n            }\n\n            if (this.valueModel.isEverythingVisibleSelected()) {\n                return true;\n            }\n        } else {\n            // nothing selected by default\n            if (this.valueModel.hasSelections() && this.valueModel.isEverythingVisibleSelected()) {\n                return true;\n            }\n\n            if (this.valueModel.isNothingVisibleSelected()) {\n                return false;\n            }\n        }\n        // returning `undefined` means the checkbox status is indeterminate.\n        return undefined;\n    }\n\n    private areAllChildrenSelected(item: SetFilterModelTreeItem): boolean | undefined {\n        const recursiveChildSelectionCheck = (i: SetFilterModelTreeItem): boolean | undefined => {\n            if (i.children) {\n                let someTrue = false;\n                let someFalse = false;\n                const mixed = i.children.some((child) => {\n                    if (!child.filterPasses || !child.available) {\n                        return false;\n                    }\n                    const childSelected = recursiveChildSelectionCheck(child);\n                    if (childSelected === undefined) {\n                        return true;\n                    }\n                    if (childSelected) {\n                        someTrue = true;\n                    } else {\n                        someFalse = true;\n                    }\n                    return someTrue && someFalse;\n                });\n                // returning `undefined` means the checkbox status is indeterminate.\n                // if not mixed and some true, all must be true\n                return mixed ? undefined : someTrue;\n            } else {\n                return this.valueModel!.isKeySelected(i.key!);\n            }\n        };\n\n        if (!this.setFilterParams!.defaultToNothingSelected) {\n            // everything selected by default\n            return recursiveChildSelectionCheck(item);\n        } else {\n            // nothing selected by default\n            return this.valueModel!.hasSelections() && recursiveChildSelectionCheck(item);\n        }\n    }\n\n    public override destroy(): void {\n        if (this.virtualList != null) {\n            this.virtualList.destroy();\n            this.virtualList = null;\n        }\n\n        super.destroy();\n    }\n\n    private caseFormat<T extends string | number | null>(valueToFormat: T): typeof valueToFormat {\n        if (valueToFormat == null || typeof valueToFormat !== 'string') {\n            return valueToFormat;\n        }\n        return this.caseSensitive ? valueToFormat : (valueToFormat.toUpperCase() as T);\n    }\n\n    private resetExpansion(): void {\n        if (!this.setFilterParams?.treeList) {\n            return;\n        }\n\n        const selectAllItem = this.valueModel?.getSelectAllItem();\n\n        if (this.isSetFilterModelTreeItem(selectAllItem)) {\n            const recursiveCollapse = (i: SetFilterModelTreeItem) => {\n                if (i.children) {\n                    i.children.forEach((childItem) => recursiveCollapse(childItem));\n                    i.expanded = false;\n                }\n            };\n            recursiveCollapse(selectAllItem);\n            this.valueModel!.updateDisplayedValues('expansion');\n        }\n    }\n\n    public getModelAsString(model: SetFilterModel): string {\n        return this.filterModelFormatter.getModelAsString(model, this);\n    }\n\n    protected override getPositionableElement(): HTMLElement {\n        return this.eSetFilterList;\n    }\n}\n\nclass ModelWrapper<V> implements VirtualListModel {\n    constructor(private readonly model: SetValueModel<V>) {}\n\n    public getRowCount(): number {\n        return this.model.getDisplayedValueCount();\n    }\n\n    public getRow(index: number): string | null {\n        return this.model.getDisplayedItem(index) as any;\n    }\n\n    public areRowsEqual(oldRow: string | null, newRow: string | null): boolean {\n        return oldRow === newRow;\n    }\n}\n\nclass ModelWrapperWithSelectAll<V> implements VirtualListModel {\n    constructor(\n        private readonly model: SetValueModel<V>,\n        private readonly isSelectAllSelected: () => boolean | undefined\n    ) {}\n\n    public getRowCount(): number {\n        const showAddCurrentSelectionToFilter = this.model.showAddCurrentSelectionToFilter();\n        const outboundItems = showAddCurrentSelectionToFilter ? 2 : 1;\n        return this.model.getDisplayedValueCount() + outboundItems;\n    }\n\n    public getRow(index: number): string | null {\n        if (index === 0) {\n            return this.model.getSelectAllItem() as any;\n        }\n\n        const showAddCurrentSelectionToFilter = this.model.showAddCurrentSelectionToFilter();\n        const outboundItems = showAddCurrentSelectionToFilter ? 2 : 1;\n        if (index === 1 && showAddCurrentSelectionToFilter) {\n            return this.model.getAddSelectionToFilterItem() as any;\n        }\n\n        return this.model.getDisplayedItem(index - outboundItems) as any;\n    }\n\n    public areRowsEqual(oldRow: string | null, newRow: string | null): boolean {\n        return oldRow === newRow;\n    }\n}\n\n// isRowSelected is used by VirtualList to add aria tags for flat lists. We want to suppress this when using trees\nclass TreeModelWrapper implements VirtualListModel {\n    constructor(private readonly model: VirtualListModel) {}\n\n    public getRowCount(): number {\n        return this.model.getRowCount();\n    }\n\n    public getRow(index: number): SetFilterModelTreeItem | null {\n        return this.model.getRow(index);\n    }\n\n    public areRowsEqual(oldRow: SetFilterModelTreeItem | null, newRow: SetFilterModelTreeItem | null): boolean {\n        if (oldRow == null && newRow == null) {\n            return true;\n        }\n        return oldRow != null && newRow != null && oldRow.treeKey === newRow.treeKey && oldRow.depth === newRow.depth;\n    }\n}\n", "export interface ISetDisplayValueModel<V> {\n    updateDisplayedValuesToAllAvailable(\n        getValue: (key: string | null) => V | null,\n        allKeys: Iterable<string | null> | undefined,\n        availableKeys: Set<string | null>,\n        source: 'reload' | 'otherFilter' | 'miniFilter'\n    ): void;\n\n    updateDisplayedValuesToMatchMiniFilter(\n        getValue: (key: string | null) => V | null,\n        allKeys: Iterable<string | null> | undefined,\n        availableKeys: Set<string | null>,\n        matchesFilter: (valueToCheck: string | null) => boolean,\n        nullMatchesFilter: boolean,\n        source: 'reload' | 'otherFilter' | 'miniFilter'\n    ): void;\n\n    getDisplayedValueCount(): number;\n\n    getDisplayedItem(index: number): string | SetFilterModelTreeItem | null;\n\n    getSelectAllItem(): string | SetFilterModelTreeItem;\n\n    getAddSelectionToFilterItem(): string | SetFilterModelTreeItem;\n\n    getDisplayedKeys(): (string | null)[];\n\n    forEachDisplayedKey(func: (key: string | null) => void): void;\n\n    someDisplayedKey(func: (key: string | null) => boolean): boolean;\n\n    hasGroups(): boolean;\n\n    refresh(): void;\n}\n\nexport class SetFilterDisplayValue {\n    public static readonly SELECT_ALL = '__AG_SELECT_ALL__';\n    public static readonly ADD_SELECTION_TO_FILTER = '__AG_ADD_SELECTION_TO_FILTER__';\n}\n\nexport interface SetFilterModelTreeItem {\n    treeKey: string | null;\n    depth: number;\n    filterPasses: boolean;\n    available: boolean;\n    expanded?: boolean;\n    children?: SetFilterModelTreeItem[];\n    key?: string | null;\n    parentTreeKeys: (string | null)[];\n}\n", "export interface ISetFilterLocaleText {\n    loadingOoo: string;\n    blanks: string;\n    searchOoo: string;\n    selectAll: string;\n    selectAllSearchResults: string;\n    addCurrentSelectionToFilter: string;\n    noMatches: string;\n}\n\nexport const DEFAULT_LOCALE_TEXT: ISetFilterLocaleText = {\n    loadingOoo: 'Loading...',\n    blanks: '(Blanks)',\n    searchOoo: 'Search...',\n    selectAll: '(Select All)',\n    selectAllSearchResults: '(Select All Search Results)',\n    addCurrentSelectionToFilter: 'Add current selection to filter',\n    noMatches: 'No matches.',\n};\n", "import type {\n    AgCheckbox,\n    AgColumn,\n    AgEvent,\n    BeanCollection,\n    ColDef,\n    ICellRendererComp,\n    ISetFilterCellRendererParams,\n    ISetFilterTreeListTooltipParams,\n    ITooltipParams,\n    SetFilterParams,\n    UserComponentFactory,\n    ValueFormatterParams,\n    ValueService,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport {\n    AgCheckboxSelector,\n    Component,\n    RefPlaceholder,\n    _createIcon,\n    _setAriaChecked,\n    _setAriaDescribedBy,\n    _setAriaExpanded,\n    _setAriaLabel,\n    _setAriaLabelledBy,\n    _setAriaLevel,\n    _setDisplayed,\n    _toStringOrNull,\n    _warnOnce,\n} from '@ag-grid-community/core';\n\nimport type { SetFilterModelTreeItem } from './iSetDisplayValueModel';\nimport type { ISetFilterLocaleText } from './localeText';\n\nexport interface SetFilterListItemSelectionChangedEvent<\n    I extends SetFilterModelTreeItem | string | null = SetFilterModelTreeItem | string | null,\n> extends AgEvent<'selectionChanged'> {\n    isSelected: boolean;\n    item: I;\n}\n\nexport interface SetFilterListItemExpandedChangedEvent<\n    I extends SetFilterModelTreeItem | string | null = SetFilterModelTreeItem | string | null,\n> extends AgEvent<'expandedChanged'> {\n    isExpanded: boolean;\n    item: I;\n}\n\nexport interface SetFilterListItemParams<V> {\n    focusWrapper: HTMLElement;\n    value: V | null | (() => string);\n    params: SetFilterParams<any, V>;\n    translate: (key: keyof ISetFilterLocaleText) => string;\n    valueFormatter?: (params: ValueFormatterParams) => string;\n    item: SetFilterModelTreeItem | string | null;\n    isSelected: boolean | undefined;\n    isTree?: boolean;\n    depth?: number;\n    groupsExist?: boolean;\n    isGroup?: boolean;\n    isExpanded?: boolean;\n    hasIndeterminateExpandState?: boolean;\n}\n\nexport type SetFilterListItemEvent = 'selectionChanged' | 'expandedChanged';\n/** @param V type of value in the Set Filter */\nexport class SetFilterListItem<V> extends Component<SetFilterListItemEvent> {\n    private valueService: ValueService;\n    private userComponentFactory: UserComponentFactory;\n\n    public wireBeans(beans: BeanCollection) {\n        this.valueService = beans.valueService;\n        this.userComponentFactory = beans.userComponentFactory;\n    }\n\n    private readonly eCheckbox: AgCheckbox = RefPlaceholder;\n\n    private readonly eGroupOpenedIcon: HTMLElement = RefPlaceholder;\n    private readonly eGroupClosedIcon: HTMLElement = RefPlaceholder;\n    private readonly eGroupIndeterminateIcon: HTMLElement = RefPlaceholder;\n\n    private readonly focusWrapper: HTMLElement;\n    private readonly value: V | null | (() => string);\n    private readonly params: SetFilterParams<any, V>;\n    private readonly translate: (key: keyof ISetFilterLocaleText) => string;\n    private readonly valueFormatter?: (params: ValueFormatterParams) => string;\n    private readonly isTree?: boolean;\n    private readonly depth: number;\n    private readonly isGroup?: boolean;\n    private readonly groupsExist?: boolean;\n    private readonly hasIndeterminateExpandState?: boolean;\n\n    private item: SetFilterModelTreeItem | string | null;\n    private isSelected: boolean | undefined;\n    private isExpanded: boolean | undefined;\n    // only used for select all\n    private valueFunction?: () => string;\n\n    private cellRendererParams: ISetFilterCellRendererParams;\n    private cellRendererComponent?: ICellRendererComp;\n    private destroyCellRendererComponent?: () => void;\n\n    constructor(params: SetFilterListItemParams<V>) {\n        super(\n            params.isGroup\n                ? /* html */ `\n            <div class=\"ag-set-filter-item\" aria-hidden=\"true\">\n                <span class=\"ag-set-filter-group-icons\">\n                    <span class=\"ag-set-filter-group-closed-icon\" data-ref=\"eGroupClosedIcon\"></span>\n                    <span class=\"ag-set-filter-group-opened-icon\" data-ref=\"eGroupOpenedIcon\"></span>\n                    <span class=\"ag-set-filter-group-indeterminate-icon\" data-ref=\"eGroupIndeterminateIcon\"></span>\n                </span>\n                <ag-checkbox data-ref=\"eCheckbox\" class=\"ag-set-filter-item-checkbox\"></ag-checkbox>\n            </div>`\n                : /* html */ `\n            <div class=\"ag-set-filter-item\">\n                <ag-checkbox data-ref=\"eCheckbox\" class=\"ag-set-filter-item-checkbox\"></ag-checkbox>\n            </div>`,\n            [AgCheckboxSelector]\n        );\n        this.focusWrapper = params.focusWrapper;\n        this.value = params.value;\n        this.params = params.params;\n        this.translate = params.translate;\n        this.valueFormatter = params.valueFormatter;\n        this.item = params.item;\n        this.isSelected = params.isSelected;\n        this.isTree = params.isTree;\n        this.depth = params.depth ?? 0;\n        this.isGroup = params.isGroup;\n        this.groupsExist = params.groupsExist;\n        this.isExpanded = params.isExpanded;\n        this.hasIndeterminateExpandState = params.hasIndeterminateExpandState;\n    }\n\n    public postConstruct(): void {\n        this.addDestroyFunc(() => this.destroyCellRendererComponent?.());\n\n        this.render();\n\n        this.eCheckbox\n            .setLabelEllipsis(true)\n            .setValue(this.isSelected, true)\n            .setDisabled(!!this.params.readOnly)\n            .getInputElement()\n            .setAttribute('tabindex', '-1');\n\n        this.refreshVariableAriaLabels();\n\n        if (this.isTree) {\n            if (this.depth > 0) {\n                this.addCssClass('ag-set-filter-indent-' + this.depth);\n                this.getGui().style.setProperty('--ag-indentation-level', String(this.depth));\n            }\n            if (this.isGroup) {\n                this.setupExpansion();\n            } else {\n                if (this.groupsExist) {\n                    this.addCssClass('ag-set-filter-add-group-indent');\n                }\n            }\n\n            _setAriaLevel(this.getAriaElement(), this.depth + 1);\n        }\n\n        this.refreshAriaChecked();\n\n        if (this.params.readOnly) {\n            // Don't add event listeners if we're read-only.\n            return;\n        }\n\n        this.eCheckbox.onValueChange((value) => this.onCheckboxChanged(!!value));\n    }\n\n    public override getFocusableElement(): HTMLElement {\n        return this.focusWrapper;\n    }\n\n    private setupExpansion(): void {\n        this.eGroupClosedIcon.appendChild(_createIcon('setFilterGroupClosed', this.gos, null));\n        this.eGroupOpenedIcon.appendChild(_createIcon('setFilterGroupOpen', this.gos, null));\n        const listener = this.onExpandOrContractClicked.bind(this);\n        this.addManagedElementListeners(this.eGroupClosedIcon, { click: listener });\n        this.addManagedElementListeners(this.eGroupOpenedIcon, { click: listener });\n\n        if (this.hasIndeterminateExpandState) {\n            this.eGroupIndeterminateIcon.appendChild(_createIcon('setFilterGroupIndeterminate', this.gos, null));\n            this.addManagedElementListeners(this.eGroupIndeterminateIcon, {\n                click: listener,\n            });\n        }\n\n        this.setExpandedIcons();\n        this.refreshAriaExpanded();\n    }\n\n    private onExpandOrContractClicked(): void {\n        this.setExpanded(!this.isExpanded);\n    }\n\n    public setExpanded(isExpanded: boolean | undefined, silent?: boolean): void {\n        if (this.isGroup && isExpanded !== this.isExpanded) {\n            this.isExpanded = isExpanded;\n\n            const event: SetFilterListItemExpandedChangedEvent = {\n                type: 'expandedChanged',\n                isExpanded: !!isExpanded,\n                item: this.item,\n            };\n\n            if (!silent) {\n                this.dispatchLocalEvent(event);\n            }\n\n            this.setExpandedIcons();\n            this.refreshAriaExpanded();\n        }\n    }\n\n    private setExpandedIcons(): void {\n        _setDisplayed(\n            this.eGroupClosedIcon,\n            this.hasIndeterminateExpandState ? this.isExpanded === false : !this.isExpanded\n        );\n        _setDisplayed(this.eGroupOpenedIcon, this.isExpanded === true);\n        if (this.hasIndeterminateExpandState) {\n            _setDisplayed(this.eGroupIndeterminateIcon, this.isExpanded === undefined);\n        }\n    }\n\n    private onCheckboxChanged(isSelected: boolean): void {\n        this.isSelected = isSelected;\n\n        const event: SetFilterListItemSelectionChangedEvent = {\n            type: 'selectionChanged',\n            isSelected,\n            item: this.item,\n        };\n\n        this.dispatchLocalEvent(event);\n        this.refreshVariableAriaLabels();\n        this.refreshAriaChecked();\n    }\n\n    public toggleSelected(): void {\n        if (this.params.readOnly) {\n            return;\n        }\n\n        this.setSelected(!this.isSelected);\n    }\n\n    private setSelected(isSelected: boolean | undefined, silent?: boolean) {\n        this.isSelected = isSelected;\n        this.eCheckbox.setValue(isSelected, silent);\n        this.refreshAriaChecked();\n    }\n\n    private refreshVariableAriaLabels(): void {\n        if (!this.isTree) {\n            return;\n        }\n        const translate = this.localeService.getLocaleTextFunc();\n        const checkboxValue = this.eCheckbox.getValue();\n        const state =\n            checkboxValue === undefined\n                ? translate('ariaIndeterminate', 'indeterminate')\n                : checkboxValue\n                  ? translate('ariaVisible', 'visible')\n                  : translate('ariaHidden', 'hidden');\n        const visibilityLabel = translate('ariaToggleVisibility', 'Press SPACE to toggle visibility');\n        _setAriaLabelledBy(this.eCheckbox.getInputElement(), undefined as any);\n        this.eCheckbox.setInputAriaLabel(`${visibilityLabel} (${state})`);\n    }\n\n    private setupFixedAriaLabels(value: any): void {\n        if (!this.isTree) {\n            return;\n        }\n        const translate = this.localeService.getLocaleTextFunc();\n        const itemLabel = translate('ariaFilterValue', 'Filter Value');\n        const ariaEl = this.getAriaElement();\n        _setAriaLabel(ariaEl, `${value} ${itemLabel}`);\n        _setAriaDescribedBy(ariaEl, this.eCheckbox.getInputElement().id);\n    }\n\n    private refreshAriaChecked(): void {\n        const ariaEl = this.getAriaElement();\n\n        _setAriaChecked(ariaEl, this.eCheckbox.getValue());\n    }\n\n    private refreshAriaExpanded(): void {\n        _setAriaExpanded(this.getAriaElement(), !!this.isExpanded);\n    }\n\n    public refresh(\n        item: SetFilterModelTreeItem | string | null,\n        isSelected: boolean | undefined,\n        isExpanded: boolean | undefined\n    ): void {\n        this.item = item;\n        // setExpanded checks if value has changed, setSelected does not\n        if (isSelected !== this.isSelected) {\n            this.setSelected(isSelected, true);\n        }\n        this.setExpanded(isExpanded, true);\n        if (this.valueFunction) {\n            // underlying value might have changed, so call again and re-render\n            const value = this.valueFunction();\n            this.setTooltipAndCellRendererParams(value as any, value);\n            if (!this.cellRendererComponent) {\n                this.renderCellWithoutCellRenderer();\n            }\n        }\n        if (this.cellRendererComponent) {\n            const success = this.cellRendererComponent.refresh?.(this.cellRendererParams as any);\n            if (!success) {\n                const oldComponent = this.cellRendererComponent;\n                this.renderCell();\n                this.destroyBean(oldComponent);\n            }\n        }\n    }\n\n    public render(): void {\n        const {\n            params: { column },\n        } = this;\n\n        let { value } = this;\n        let formattedValue: string | null = null;\n\n        if (typeof value === 'function') {\n            this.valueFunction = value as () => string;\n            formattedValue = this.valueFunction();\n            // backwards compatibility for select all in value\n            value = formattedValue as any;\n        } else if (this.isTree) {\n            // tree values are already formatted via treeListFormatter\n            formattedValue = _toStringOrNull(value);\n        } else {\n            formattedValue = this.getFormattedValue(column as AgColumn, value);\n        }\n\n        this.setTooltipAndCellRendererParams(value, formattedValue);\n\n        this.renderCell();\n    }\n\n    private setTooltipAndCellRendererParams(value: V | null | (() => string), formattedValue: string | null): void {\n        const isTooltipWhenTruncated = this.gos.get('tooltipShowMode') === 'whenTruncated';\n\n        if (this.params.showTooltips && (!isTooltipWhenTruncated || !this.params.cellRenderer)) {\n            const newTooltipText = formattedValue != null ? formattedValue : _toStringOrNull(value);\n            let shouldDisplayTooltip: (() => boolean) | undefined;\n\n            if (isTooltipWhenTruncated) {\n                shouldDisplayTooltip = () => {\n                    const el = this.eCheckbox.getGui().querySelector('.ag-label');\n                    if (!el) {\n                        return true;\n                    } // show label by default\n                    return el.scrollWidth > el.clientWidth;\n                };\n            }\n            this.setTooltip({\n                newTooltipText,\n                location: 'setFilterValue',\n                getColDef: () => this.params.colDef,\n                getColumn: () => this.params.column as AgColumn,\n                shouldDisplayTooltip,\n            });\n        }\n\n        this.cellRendererParams = this.gos.addGridCommonParams({\n            value,\n            valueFormatted: formattedValue,\n            colDef: this.params.colDef,\n            column: this.params.column,\n            setTooltip: (value: string, shouldDisplayTooltip: () => boolean) => {\n                this.setTooltip({\n                    newTooltipText: value,\n                    getColDef: () => this.params.colDef,\n                    getColumn: () => this.params.column as AgColumn,\n                    location: 'setFilterValue',\n                    shouldDisplayTooltip,\n                });\n            },\n        });\n    }\n\n    public override getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        const res = super.getTooltipParams();\n        res.location = 'setFilterValue';\n        res.colDef = this.getComponentHolder();\n        if (this.isTree) {\n            (res as ISetFilterTreeListTooltipParams).level = this.depth;\n        }\n        return res;\n    }\n\n    private getFormattedValue(column: AgColumn, value: any) {\n        return this.valueService.formatValue(column, null, value, this.valueFormatter, false);\n    }\n\n    private renderCell(): void {\n        const compDetails = this.userComponentFactory.getSetFilterCellRendererDetails(\n            this.params,\n            this.cellRendererParams\n        );\n        const cellRendererPromise = compDetails ? compDetails.newAgStackInstance() : undefined;\n\n        if (cellRendererPromise == null) {\n            this.renderCellWithoutCellRenderer();\n            return;\n        }\n\n        cellRendererPromise.then((component) => {\n            if (component) {\n                this.cellRendererComponent = component;\n                this.eCheckbox.setLabel(component.getGui());\n                this.destroyCellRendererComponent = () => this.destroyBean(component);\n            }\n        });\n    }\n\n    private renderCellWithoutCellRenderer(): void {\n        let valueToRender =\n            (this.cellRendererParams.valueFormatted == null\n                ? this.cellRendererParams.value\n                : this.cellRendererParams.valueFormatted) ?? this.translate('blanks');\n        if (typeof valueToRender !== 'string') {\n            _warnOnce(\n                `Set Filter Value Formatter must return string values. Please ensure the Set Filter Value Formatter returns string values for complex objects. See ${this.getFrameworkOverrides().getDocLink('filter-set-filter-list/#filter-value-types')}`\n            );\n            valueToRender = '';\n        }\n\n        this.eCheckbox.setLabel(valueToRender);\n        this.setupFixedAriaLabels(valueToRender);\n    }\n\n    public getComponentHolder(): ColDef {\n        return this.params.column.getColDef();\n    }\n}\n", "import type { SetFilterModel } from '@ag-grid-community/core';\n\nimport type { SetFilter } from './setFilter';\n\nexport class SetFilterModelFormatter {\n    public getModelAsString<V>(model: SetFilterModel | null | undefined, setFilter: SetFilter<V>): string {\n        const { values } = model || setFilter.getModel() || {};\n        const valueModel = setFilter.getValueModel();\n\n        if (values == null || valueModel == null) {\n            return '';\n        }\n\n        const availableKeys = values.filter((v) => valueModel.isKeyAvailable(v));\n        const numValues = availableKeys.length;\n\n        const formattedValues = availableKeys.slice(0, 10).map((key) => setFilter.getFormattedValue(key));\n\n        return `(${numValues}) ${formattedValues.join(',')}${numValues > 10 ? ',...' : ''}`;\n    }\n}\n", "import type {\n    AgColumn,\n    AgEventType,\n    FuncColsService,\n    GridOptionsService,\n    IClientSideRowModel,\n    IEventEmitter,\n    IEventListener,\n    RowNode,\n    SetFilterModelValue,\n    SetFilterParams,\n    SetFilterValues,\n    SetFilterValuesFunc,\n    SetFilterValuesFuncParams,\n    TextFormatter,\n    ValueFormatterParams,\n    ValueService,\n} from '@ag-grid-community/core';\nimport {\n    AgPromise,\n    LocalEventService,\n    _defaultComparator,\n    _errorOnce,\n    _exists,\n    _makeNull,\n    _warnOnce,\n} from '@ag-grid-community/core';\n\nimport { ClientSideValuesExtractor } from '../clientSideValueExtractor';\nimport { SetValueModelFilteringKeys } from './filteringKeys';\nimport { FlatSetDisplayValueModel } from './flatSetDisplayValueModel';\nimport type { ISetDisplayValueModel, SetFilterModelTreeItem } from './iSetDisplayValueModel';\nimport type { ISetFilterLocaleText } from './localeText';\nimport { TreeSetDisplayValueModel } from './treeSetDisplayValueModel';\n\nexport enum SetFilterModelValuesType {\n    PROVIDED_LIST,\n    PROVIDED_CALLBACK,\n    TAKEN_FROM_GRID_VALUES,\n}\n\nexport interface SetValueModelParams<V> {\n    gos: GridOptionsService;\n    funcColsService: FuncColsService;\n    valueService: ValueService;\n    filterParams: SetFilterParams<any, V>;\n    setIsLoading: (loading: boolean) => void;\n    translate: (key: keyof ISetFilterLocaleText) => string;\n    caseFormat: <T extends string | null>(valueToFormat: T) => typeof valueToFormat;\n    createKey: (value: V | null | undefined, node?: RowNode) => string | null;\n    valueFormatter?: (params: ValueFormatterParams) => string;\n    usingComplexObjects?: boolean;\n    treeDataTreeList?: boolean;\n    groupingTreeList?: boolean;\n    addManagedEventListeners: (handlers: Partial<Record<AgEventType, (event?: any) => void>>) => (() => null)[];\n}\n\nexport type SetValueModelEvent = 'availableValuesChanged';\n/** @param V type of value in the Set Filter */\nexport class SetValueModel<V> implements IEventEmitter<SetValueModelEvent> {\n    private readonly gos: GridOptionsService;\n    private readonly localEventService = new LocalEventService<SetValueModelEvent>();\n    private formatter: TextFormatter;\n    private suppressSorting: boolean;\n    private readonly clientSideValuesExtractor: ClientSideValuesExtractor<V>;\n    private readonly doesRowPassOtherFilters: (node: RowNode) => boolean;\n    private readonly keyComparator: (a: string | null, b: string | null) => number;\n    private readonly entryComparator: (a: [string | null, V | null], b: [string | null, V | null]) => number;\n    private readonly compareByValue: boolean;\n    private readonly caseSensitive: boolean;\n    private displayValueModel: ISetDisplayValueModel<V>;\n    private filterParams: SetFilterParams<any, V>;\n    private readonly setIsLoading: (loading: boolean) => void;\n    private readonly translate: (key: keyof ISetFilterLocaleText) => string;\n    private readonly caseFormat: <T extends string | null>(valueToFormat: T) => typeof valueToFormat;\n    private readonly createKey: (value: V | null | undefined, node?: RowNode) => string | null;\n    private readonly usingComplexObjects: boolean;\n\n    private valuesType: SetFilterModelValuesType;\n    private miniFilterText: string | null = null;\n\n    /** When true, in excelMode = 'windows', it adds previously selected filter items to newly checked filter selection */\n    private addCurrentSelectionToFilter: boolean = false;\n\n    /** Values provided to the filter for use. */\n    private providedValues: SetFilterValues<any, V> | null = null;\n\n    /** Values can be loaded asynchronously, so wait on this promise if you need to ensure values have been loaded. */\n    private allValuesPromise: AgPromise<(string | null)[]>;\n\n    /** All possible values for the filter, sorted if required. */\n    private allValues: Map<string | null, V | null> = new Map();\n\n    /** Remaining keys when filters from other columns have been applied. */\n    private availableKeys = new Set<string | null>();\n\n    /** Keys that have been selected for this filter. */\n    private selectedKeys = new Set<string | null>();\n\n    /**\n     * Here we keep track of the keys that are currently being used for filtering.\n     * In most cases, the filtering keys are the same as the selected keys,\n     * but for the specific case when excelMode = 'windows' and the user has ticked 'Add current selection to filter',\n     * the filtering keys can be different from the selected keys.\n     */\n    private filteringKeys: SetValueModelFilteringKeys;\n\n    private initialised: boolean = false;\n\n    constructor(params: SetValueModelParams<V>) {\n        const {\n            usingComplexObjects,\n            funcColsService,\n            valueService,\n            treeDataTreeList,\n            groupingTreeList,\n            filterParams,\n            gos,\n            valueFormatter,\n            addManagedEventListeners,\n        } = params;\n        const {\n            column,\n            colDef,\n            textFormatter,\n            doesRowPassOtherFilter,\n            suppressSorting,\n            comparator,\n            rowModel,\n            values,\n            caseSensitive,\n            treeList,\n            treeListPathGetter,\n            treeListFormatter,\n        } = filterParams;\n\n        this.filterParams = filterParams;\n        this.gos = gos;\n        this.setIsLoading = params.setIsLoading;\n        this.translate = params.translate;\n        this.caseFormat = params.caseFormat;\n        this.createKey = params.createKey;\n        this.usingComplexObjects = !!params.usingComplexObjects;\n        this.formatter = textFormatter ?? ((value) => value ?? null);\n        this.doesRowPassOtherFilters = doesRowPassOtherFilter;\n        this.suppressSorting = suppressSorting || false;\n        this.filteringKeys = new SetValueModelFilteringKeys({ caseFormat: this.caseFormat });\n        const keyComparator = comparator ?? (colDef.comparator as (a: any, b: any) => number);\n        const treeDataOrGrouping = !!treeDataTreeList || !!groupingTreeList;\n        // If using complex objects and a comparator is provided, sort by values, otherwise need to sort by the string keys.\n        // Also if tree data, grouping, or date with tree list, then need to do value sort\n        this.compareByValue = !!(\n            (usingComplexObjects && keyComparator) ||\n            treeDataOrGrouping ||\n            (treeList && !treeListPathGetter)\n        );\n        if (treeDataOrGrouping && !keyComparator) {\n            this.entryComparator = this.createTreeDataOrGroupingComparator() as any;\n        } else if (treeList && !treeListPathGetter && !keyComparator) {\n            this.entryComparator = (\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                [_aKey, aValue]: [string | null, V | null],\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                [_bKey, bValue]: [string | null, V | null]\n            ) => _defaultComparator(aValue, bValue);\n        } else {\n            this.entryComparator = (\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                [_aKey, aValue]: [string | null, V | null],\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                [_bKey, bValue]: [string | null, V | null]\n            ) => keyComparator(aValue, bValue);\n        }\n        this.keyComparator = (keyComparator as any) ?? _defaultComparator;\n        this.caseSensitive = !!caseSensitive;\n        const getDataPath = gos.get('getDataPath');\n        const groupAllowUnbalanced = gos.get('groupAllowUnbalanced');\n\n        if (rowModel.getType() === 'clientSide') {\n            this.clientSideValuesExtractor = new ClientSideValuesExtractor(\n                rowModel as IClientSideRowModel,\n                this.filterParams,\n                this.createKey,\n                this.caseFormat,\n                funcColsService,\n                valueService,\n                treeDataOrGrouping,\n                !!treeDataTreeList,\n                getDataPath,\n                groupAllowUnbalanced,\n                addManagedEventListeners\n            );\n        }\n\n        if (values == null) {\n            this.valuesType = SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES;\n        } else {\n            this.valuesType = Array.isArray(values)\n                ? SetFilterModelValuesType.PROVIDED_LIST\n                : SetFilterModelValuesType.PROVIDED_CALLBACK;\n\n            this.providedValues = values;\n        }\n\n        this.displayValueModel = treeList\n            ? new TreeSetDisplayValueModel(\n                  this.formatter,\n                  treeListPathGetter,\n                  treeListFormatter,\n                  treeDataTreeList || groupingTreeList\n              )\n            : (new FlatSetDisplayValueModel<V>(\n                  valueService,\n                  valueFormatter,\n                  this.formatter,\n                  column as AgColumn\n              ) as any);\n\n        this.updateAllValues().then((updatedKeys) => this.resetSelectionState(updatedKeys || []));\n    }\n\n    public addEventListener<T extends SetValueModelEvent>(\n        eventType: T,\n        listener: IEventListener<T>,\n        async?: boolean\n    ): void {\n        this.localEventService.addEventListener(eventType, listener, async);\n    }\n\n    public removeEventListener<T extends SetValueModelEvent>(\n        eventType: T,\n        listener: IEventListener<T>,\n        async?: boolean\n    ): void {\n        this.localEventService.removeEventListener(eventType, listener, async);\n    }\n\n    public updateOnParamsChange(filterParams: SetFilterParams<any, V>): AgPromise<void> {\n        return new AgPromise<void>((resolve) => {\n            const { values, textFormatter, suppressSorting } = filterParams;\n\n            const currentProvidedValues = this.providedValues;\n            const currentSuppressSorting = this.suppressSorting;\n\n            this.filterParams = filterParams;\n            this.formatter = textFormatter ?? ((value) => value ?? null);\n\n            this.suppressSorting = suppressSorting || false;\n            this.providedValues = values ?? null;\n\n            // Rebuild values when values or their sort order changes\n            if (this.providedValues !== currentProvidedValues || this.suppressSorting !== currentSuppressSorting) {\n                if (!values || values.length === 0) {\n                    this.valuesType = SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES;\n                    this.providedValues = null;\n                } else {\n                    this.valuesType = Array.isArray(values)\n                        ? SetFilterModelValuesType.PROVIDED_LIST\n                        : SetFilterModelValuesType.PROVIDED_CALLBACK;\n                }\n\n                const currentModel = this.getModel();\n                this.updateAllValues().then(() => {\n                    this.setModel(currentModel).then(() => resolve());\n                });\n            } else {\n                resolve();\n            }\n        });\n    }\n\n    /**\n     * Re-fetches the values used in the filter from the value source.\n     * If keepSelection is false, the filter selection will be reset to everything selected,\n     * otherwise the current selection will be preserved.\n     */\n    public refreshValues(): AgPromise<void> {\n        return new AgPromise<void>((resolve) => {\n            // don't get the model until values are resolved, as there could be queued setModel calls\n            this.allValuesPromise.then(() => {\n                const currentModel = this.getModel();\n\n                this.updateAllValues();\n\n                // ensure model is updated for new values\n                this.setModel(currentModel).then(() => resolve());\n            });\n        });\n    }\n\n    /**\n     * Overrides the current values being used for the set filter.\n     * If keepSelection is false, the filter selection will be reset to everything selected,\n     * otherwise the current selection will be preserved.\n     */\n    public overrideValues(valuesToUse: (V | null)[]): AgPromise<void> {\n        return new AgPromise<void>((resolve) => {\n            // wait for any existing values to be populated before overriding\n            this.allValuesPromise.then(() => {\n                this.valuesType = SetFilterModelValuesType.PROVIDED_LIST;\n                this.providedValues = valuesToUse;\n                this.refreshValues().then(() => resolve());\n            });\n        });\n    }\n\n    /** @return has anything been updated */\n    public refreshAfterAnyFilterChanged(): AgPromise<boolean> {\n        if (this.showAvailableOnly()) {\n            return this.allValuesPromise.then((keys) => {\n                this.updateAvailableKeys(keys ?? [], 'otherFilter');\n                return true;\n            });\n        }\n        return AgPromise.resolve(false);\n    }\n\n    public isInitialised(): boolean {\n        return this.initialised;\n    }\n\n    private updateAllValues(): AgPromise<(string | null)[]> {\n        this.allValuesPromise = new AgPromise<(string | null)[]>((resolve) => {\n            switch (this.valuesType) {\n                case SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES:\n                    this.getValuesFromRowsAsync(false).then((values) => resolve(this.processAllValues(values)));\n\n                    break;\n                case SetFilterModelValuesType.PROVIDED_LIST: {\n                    resolve(\n                        this.processAllValues(\n                            this.uniqueValues(this.validateProvidedValues(this.providedValues as (V | null)[]))\n                        )\n                    );\n\n                    break;\n                }\n\n                case SetFilterModelValuesType.PROVIDED_CALLBACK: {\n                    this.setIsLoading(true);\n\n                    const callback = this.providedValues as SetFilterValuesFunc<any, V>;\n                    const { column, colDef } = this.filterParams;\n                    const params: SetFilterValuesFuncParams<any, V> = this.gos.addGridCommonParams({\n                        success: (values) => {\n                            this.setIsLoading(false);\n\n                            resolve(this.processAllValues(this.uniqueValues(this.validateProvidedValues(values))));\n                        },\n                        colDef,\n                        column,\n                    });\n\n                    window.setTimeout(() => callback(params), 0);\n\n                    break;\n                }\n\n                default:\n                    throw new Error('Unrecognised valuesType');\n            }\n        });\n\n        this.allValuesPromise\n            .then((values) => this.updateAvailableKeys(values || [], 'reload'))\n            .then(() => (this.initialised = true));\n\n        return this.allValuesPromise;\n    }\n\n    private processAllValues(values: Map<string | null, V | null> | null): (string | null)[] {\n        const sortedKeys = this.sortKeys(values);\n\n        this.allValues = values ?? new Map();\n\n        return sortedKeys;\n    }\n\n    private validateProvidedValues(values: (V | null)[]): (V | null)[] {\n        if (this.usingComplexObjects && values?.length) {\n            const firstValue = values[0];\n            if (firstValue && typeof firstValue !== 'object' && typeof firstValue !== 'function') {\n                const firstKey = this.createKey(firstValue);\n                if (firstKey == null) {\n                    _warnOnce(\n                        'Set Filter Key Creator is returning null for provided values and provided values are primitives. Please provide complex objects. See https://www.ag-grid.com/javascript-data-grid/filter-set-filter-list/#filter-value-types'\n                    );\n                } else {\n                    _warnOnce(\n                        'Set Filter has a Key Creator, but provided values are primitives. Did you mean to provide complex objects?'\n                    );\n                }\n            }\n        }\n        return values;\n    }\n\n    public setValuesType(value: SetFilterModelValuesType) {\n        this.valuesType = value;\n    }\n\n    public getValuesType(): SetFilterModelValuesType {\n        return this.valuesType;\n    }\n\n    public isKeyAvailable(key: string | null): boolean {\n        return this.availableKeys.has(key);\n    }\n\n    private showAvailableOnly(): boolean {\n        return this.valuesType === SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES;\n    }\n\n    private updateAvailableKeys(allKeys: (string | null)[], source: 'reload' | 'otherFilter'): void {\n        const availableKeys = this.showAvailableOnly() ? this.sortKeys(this.getValuesFromRows(true)) : allKeys;\n\n        this.availableKeys = new Set(availableKeys);\n        this.localEventService.dispatchEvent({ type: 'availableValuesChanged' });\n\n        this.updateDisplayedValues(source, allKeys);\n    }\n\n    public sortKeys(nullableValues: Map<string | null, V | null> | null): (string | null)[] {\n        const values = nullableValues ?? new Map();\n\n        if (this.suppressSorting) {\n            return Array.from(values.keys());\n        }\n\n        let sortedKeys;\n        if (this.compareByValue) {\n            sortedKeys = Array.from(values.entries())\n                .sort(this.entryComparator)\n                .map(([key]) => key);\n        } else {\n            sortedKeys = Array.from(values.keys()).sort(this.keyComparator);\n        }\n\n        if (this.filterParams.excelMode && values.has(null)) {\n            // ensure the blank value always appears last\n            sortedKeys = sortedKeys.filter((v) => v != null);\n            sortedKeys.push(null);\n        }\n\n        return sortedKeys;\n    }\n\n    private getParamsForValuesFromRows(removeUnavailableValues = false): {\n        predicate: (node: RowNode) => boolean;\n        existingValues?: Map<string | null, V | null>;\n    } | null {\n        if (!this.clientSideValuesExtractor) {\n            _errorOnce(\n                'Set Filter cannot initialise because you are using a row model that does not contain all rows in the browser. Either use a different filter type, or configure Set Filter such that you provide it with values'\n            );\n            return null;\n        }\n\n        const predicate = (node: RowNode) => !removeUnavailableValues || this.doesRowPassOtherFilters(node);\n\n        const existingValues = removeUnavailableValues && !this.caseSensitive ? this.allValues : undefined;\n\n        return { predicate, existingValues };\n    }\n\n    private getValuesFromRows(removeUnavailableValues = false): Map<string | null, V | null> | null {\n        const params = this.getParamsForValuesFromRows(removeUnavailableValues);\n        if (!params) {\n            return null;\n        }\n\n        return this.clientSideValuesExtractor.extractUniqueValues(params.predicate, params.existingValues);\n    }\n\n    private getValuesFromRowsAsync(removeUnavailableValues = false): AgPromise<Map<string | null, V | null> | null> {\n        const params = this.getParamsForValuesFromRows(removeUnavailableValues);\n        if (!params) {\n            return AgPromise.resolve(null);\n        }\n\n        return this.clientSideValuesExtractor.extractUniqueValuesAsync(params.predicate, params.existingValues);\n    }\n\n    /** Sets mini filter value. Returns true if it changed from last value, otherwise false. */\n    public setMiniFilter(value?: string | null): boolean {\n        value = _makeNull(value);\n\n        if (this.miniFilterText === value) {\n            //do nothing if filter has not changed\n            return false;\n        }\n\n        if (value === null) {\n            // Reset 'Add current selection to filter' checkbox when clearing mini filter\n            this.setAddCurrentSelectionToFilter(false);\n        }\n\n        this.miniFilterText = value;\n        this.updateDisplayedValues('miniFilter');\n\n        return true;\n    }\n\n    public getMiniFilter(): string | null {\n        return this.miniFilterText;\n    }\n\n    public updateDisplayedValues(\n        source: 'reload' | 'otherFilter' | 'miniFilter' | 'expansion',\n        allKeys?: (string | null)[]\n    ): void {\n        if (source === 'expansion') {\n            this.displayValueModel.refresh();\n            return;\n        }\n\n        // if no filter, just display all available values\n        if (this.miniFilterText == null) {\n            this.displayValueModel.updateDisplayedValuesToAllAvailable(\n                (key: string | null) => this.getValue(key),\n                allKeys,\n                this.availableKeys,\n                source\n            );\n            return;\n        }\n\n        // if filter present, we filter down the list\n        // to allow for case insensitive searches, upper-case both filter text and value\n        const formattedFilterText = this.caseFormat(this.formatter(this.miniFilterText) || '');\n\n        const matchesFilter = (valueToCheck: string | null): boolean =>\n            valueToCheck != null && this.caseFormat(valueToCheck).indexOf(formattedFilterText) >= 0;\n\n        const nullMatchesFilter = !!this.filterParams.excelMode && matchesFilter(this.translate('blanks'));\n\n        this.displayValueModel.updateDisplayedValuesToMatchMiniFilter(\n            (key: string | null) => this.getValue(key),\n            allKeys,\n            this.availableKeys,\n            matchesFilter,\n            nullMatchesFilter,\n            source\n        );\n    }\n\n    public getDisplayedValueCount(): number {\n        return this.displayValueModel.getDisplayedValueCount();\n    }\n\n    public getDisplayedItem(index: number): string | SetFilterModelTreeItem | null {\n        return this.displayValueModel.getDisplayedItem(index);\n    }\n\n    public getSelectAllItem(): string | SetFilterModelTreeItem {\n        return this.displayValueModel.getSelectAllItem();\n    }\n\n    public getAddSelectionToFilterItem(): string | SetFilterModelTreeItem {\n        return this.displayValueModel.getAddSelectionToFilterItem();\n    }\n\n    public hasSelections(): boolean {\n        return this.filterParams.defaultToNothingSelected\n            ? this.selectedKeys.size > 0\n            : this.allValues.size !== this.selectedKeys.size;\n    }\n\n    public getKeys(): SetFilterModelValue {\n        return Array.from(this.allValues.keys());\n    }\n\n    public getValues(): (V | null)[] {\n        return Array.from(this.allValues.values());\n    }\n\n    public getValue(key: string | null): V | null {\n        return this.allValues.get(key)!;\n    }\n\n    public setAddCurrentSelectionToFilter(value: boolean) {\n        this.addCurrentSelectionToFilter = value;\n    }\n\n    private isInWindowsExcelMode(): boolean {\n        return this.filterParams.excelMode === 'windows';\n    }\n\n    public isAddCurrentSelectionToFilterChecked(): boolean {\n        return this.isInWindowsExcelMode() && this.addCurrentSelectionToFilter;\n    }\n\n    public showAddCurrentSelectionToFilter(): boolean {\n        // We only show the 'Add current selection to filter' option\n        // when excel mode is enabled with 'windows' mode\n        // and when the users types a value in the mini filter.\n        return this.isInWindowsExcelMode() && _exists(this.miniFilterText) && this.miniFilterText.length > 0;\n    }\n\n    public selectAllMatchingMiniFilter(clearExistingSelection = false): void {\n        if (this.miniFilterText == null) {\n            // ensure everything is selected\n            this.selectedKeys = new Set(this.allValues.keys());\n        } else {\n            // ensure everything that matches the mini filter is selected\n            if (clearExistingSelection) {\n                this.selectedKeys.clear();\n            }\n\n            this.displayValueModel.forEachDisplayedKey((key) => this.selectedKeys.add(key));\n        }\n    }\n\n    public deselectAllMatchingMiniFilter(): void {\n        if (this.miniFilterText == null) {\n            // ensure everything is deselected\n            this.selectedKeys.clear();\n        } else {\n            // ensure everything that matches the mini filter is deselected\n            this.displayValueModel.forEachDisplayedKey((key) => this.selectedKeys.delete(key));\n        }\n    }\n\n    public selectKey(key: string | null): void {\n        this.selectedKeys.add(key);\n    }\n\n    public deselectKey(key: string | null): void {\n        if (this.filterParams.excelMode && this.isEverythingVisibleSelected()) {\n            // ensure we're starting from the correct \"everything selected\" state\n            this.resetSelectionState(this.displayValueModel.getDisplayedKeys());\n        }\n\n        this.selectedKeys.delete(key);\n    }\n\n    public isKeySelected(key: string | null): boolean {\n        return this.selectedKeys.has(key);\n    }\n\n    public isEverythingVisibleSelected(): boolean {\n        return !this.displayValueModel.someDisplayedKey((it) => !this.isKeySelected(it));\n    }\n\n    public isNothingVisibleSelected(): boolean {\n        return !this.displayValueModel.someDisplayedKey((it) => this.isKeySelected(it));\n    }\n\n    public getModel(): SetFilterModelValue | null {\n        if (!this.hasSelections()) {\n            return null;\n        }\n\n        // When excelMode = 'windows' and the user has ticked 'Add current selection to filter'\n        // the filtering keys can be different from the selected keys, and they should be included\n        // in the model.\n        const filteringKeys = this.isAddCurrentSelectionToFilterChecked()\n            ? this.filteringKeys.allFilteringKeys()\n            : null;\n\n        if (filteringKeys && filteringKeys.size > 0) {\n            if (this.selectedKeys) {\n                // When existing filtering keys are present along with selected keys,\n                // we combine them and return the result.\n                // We use a set structure to avoid duplicates\n                const modelKeys = new Set<string | null>([\n                    ...Array.from(filteringKeys),\n                    ...Array.from(this.selectedKeys).filter((key) => !filteringKeys.has(key)),\n                ]);\n                return Array.from(modelKeys);\n            }\n\n            return Array.from(filteringKeys);\n        }\n\n        // No extra filtering keys are present - so just return the selected keys\n        return Array.from(this.selectedKeys);\n    }\n\n    public setModel(model: SetFilterModelValue | null): AgPromise<void> {\n        return this.allValuesPromise.then((keys) => {\n            if (model == null) {\n                this.resetSelectionState(keys ?? []);\n            } else {\n                // select all values from the model that exist in the filter\n                this.selectedKeys.clear();\n\n                const existingFormattedKeys: Map<string | null, string | null> = new Map();\n                this.allValues.forEach((_value, key) => {\n                    existingFormattedKeys.set(this.caseFormat(key), key);\n                });\n\n                model.forEach((unformattedKey) => {\n                    const formattedKey = this.caseFormat(_makeNull(unformattedKey));\n                    const existingUnformattedKey = existingFormattedKeys.get(formattedKey);\n                    if (existingUnformattedKey !== undefined) {\n                        this.selectKey(existingUnformattedKey);\n                    }\n                });\n            }\n        });\n    }\n\n    private uniqueValues(values: (V | null)[] | null): Map<string | null, V | null> {\n        const uniqueValues: Map<string | null, V | null> = new Map();\n        const formattedKeys: Set<string | null> = new Set();\n        (values ?? []).forEach((value) => {\n            const valueToUse = _makeNull(value);\n            const unformattedKey = this.createKey(valueToUse);\n            const formattedKey = this.caseFormat(unformattedKey);\n            if (!formattedKeys.has(formattedKey)) {\n                formattedKeys.add(formattedKey);\n                uniqueValues.set(unformattedKey, valueToUse);\n            }\n        });\n\n        return uniqueValues;\n    }\n\n    private resetSelectionState(keys: (string | null)[]): void {\n        if (this.filterParams.defaultToNothingSelected) {\n            this.selectedKeys.clear();\n        } else {\n            this.selectedKeys = new Set(keys);\n        }\n    }\n\n    public hasGroups(): boolean {\n        return this.displayValueModel.hasGroups();\n    }\n\n    private createTreeDataOrGroupingComparator(): (\n        a: [string | null, string[] | null],\n        b: [string | null, string[] | null]\n    ) => number {\n        return (\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            [_aKey, aValue]: [string | null, string[] | null],\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            [_bKey, bValue]: [string | null, string[] | null]\n        ) => {\n            if (aValue == null) {\n                return bValue == null ? 0 : -1;\n            } else if (bValue == null) {\n                return 1;\n            }\n            for (let i = 0; i < aValue.length; i++) {\n                if (i >= bValue.length) {\n                    return 1;\n                }\n                const diff = _defaultComparator(aValue[i], bValue[i]);\n                if (diff !== 0) {\n                    return diff;\n                }\n            }\n            return 0;\n        };\n    }\n\n    public setAppliedModelKeys(appliedModelKeys: Set<string | null> | null): void {\n        this.filteringKeys.setFilteringKeys(appliedModelKeys);\n    }\n\n    public addToAppliedModelKeys(appliedModelKey: string | null): void {\n        this.filteringKeys.addFilteringKey(appliedModelKey);\n    }\n\n    public getAppliedModelKeys(): Set<string | null> | null {\n        return this.filteringKeys.allFilteringKeys();\n    }\n\n    public getCaseFormattedAppliedModelKeys(): Set<string | null> | null {\n        return this.filteringKeys.allFilteringKeysCaseFormatted();\n    }\n\n    public hasAppliedModelKey(appliedModelKey: string | null): boolean {\n        return this.filteringKeys.hasCaseFormattedFilteringKey(appliedModelKey);\n    }\n\n    public hasAnyAppliedModelKey(): boolean {\n        return !this.filteringKeys.noAppliedFilteringKeys();\n    }\n}\n", "import type {\n    AgColumn,\n    AgEventType,\n    FuncColsService,\n    GetDataPath,\n    IClientSideRowModel,\n    RowNode,\n    SetFilterParams,\n    ValueService,\n} from '@ag-grid-community/core';\nimport { AgPromise, _makeNull, _toStringOrNull } from '@ag-grid-community/core';\n\n/** @param V type of value in the Set Filter */\nexport class ClientSideValuesExtractor<V> {\n    constructor(\n        private readonly rowModel: IClientSideRowModel,\n        private readonly filterParams: SetFilterParams<any, V>,\n        private readonly createKey: (value: V | null | undefined, node?: RowNode) => string | null,\n        private readonly caseFormat: <T extends string | null>(valueToFormat: T) => typeof valueToFormat,\n        private readonly funcColsService: FuncColsService,\n        private readonly valueService: ValueService,\n        private readonly treeDataOrGrouping: boolean,\n        private readonly treeData: boolean,\n        private readonly getDataPath: GetDataPath | undefined,\n        private readonly groupAllowUnbalanced: boolean,\n        private readonly addManagedEventListeners: (\n            handlers: Partial<Record<AgEventType, (event?: any) => void>>\n        ) => (() => null)[]\n    ) {}\n\n    public extractUniqueValuesAsync(\n        predicate: (node: RowNode) => boolean,\n        existingValues?: Map<string | null, V | null>\n    ): AgPromise<Map<string | null, V | null>> {\n        return new AgPromise((resolve) => {\n            if (this.rowModel.isRowDataLoaded()) {\n                resolve(this.extractUniqueValues(predicate, existingValues));\n            } else {\n                const [destroyFunc] = this.addManagedEventListeners({\n                    rowCountReady: () => {\n                        destroyFunc?.();\n                        resolve(this.extractUniqueValues(predicate, existingValues));\n                    },\n                });\n            }\n        });\n    }\n\n    public extractUniqueValues(\n        predicate: (node: RowNode) => boolean,\n        existingValues?: Map<string | null, V | null>\n    ): Map<string | null, V | null> {\n        const values: Map<string | null, V | null> = new Map();\n        const existingFormattedKeys = this.extractExistingFormattedKeys(existingValues);\n        const formattedKeys: Set<string | null> = new Set();\n        const treeData = this.treeData && !!this.getDataPath;\n        const groupedCols = this.funcColsService.getRowGroupColumns();\n\n        const addValue = (unformattedKey: string | null, value: V | null | undefined) => {\n            const formattedKey = this.caseFormat(unformattedKey);\n            if (!formattedKeys.has(formattedKey)) {\n                formattedKeys.add(formattedKey);\n                let keyToAdd = unformattedKey;\n                let valueToAdd = _makeNull(value);\n                // when case insensitive, we pick the first value to use. if this is later filtered out,\n                // we still want to use the original value and not one with a different case\n                const existingUnformattedKey = existingFormattedKeys?.get(formattedKey);\n                if (existingUnformattedKey != null) {\n                    keyToAdd = existingUnformattedKey;\n                    valueToAdd = existingValues!.get(existingUnformattedKey)!;\n                }\n                values.set(keyToAdd, valueToAdd);\n            }\n        };\n\n        this.rowModel.forEachLeafNode((node) => {\n            // only pull values from rows that have data. this means we skip filler group nodes.\n            if (!node.data || !predicate(node)) {\n                return;\n            }\n            if (this.treeDataOrGrouping) {\n                this.addValueForTreeDataOrGrouping(node, treeData, groupedCols, addValue);\n                return;\n            }\n\n            const value = this.getValue(node);\n\n            if (value != null && Array.isArray(value)) {\n                value.forEach((x) => {\n                    addValue(this.createKey(x, node), x);\n                });\n                if (value.length === 0) {\n                    addValue(null, null);\n                }\n            } else {\n                addValue(this.createKey(value, node), value);\n            }\n        });\n\n        return values;\n    }\n\n    private addValueForTreeDataOrGrouping(\n        node: RowNode,\n        treeData: boolean,\n        groupedCols: AgColumn[],\n        addValue: (unformattedKey: string | null, value: V | null) => void\n    ): void {\n        let dataPath: string[] | null;\n        if (treeData) {\n            if (node.childrenAfterGroup?.length) {\n                return;\n            }\n            dataPath = this.getDataPath!(node.data);\n        } else {\n            dataPath = groupedCols.map((groupCol) => this.valueService.getKeyForNode(groupCol, node));\n            dataPath.push(this.getValue(node) as any);\n        }\n        if (dataPath) {\n            dataPath = dataPath.map((treeKey) => _toStringOrNull(_makeNull(treeKey))) as any;\n        }\n        if (!treeData && this.groupAllowUnbalanced && dataPath?.some((treeKey) => treeKey == null)) {\n            dataPath = dataPath.filter((treeKey) => treeKey != null);\n        }\n        addValue(this.createKey(dataPath as any), dataPath as any);\n    }\n\n    private getValue(node: RowNode): V | null | undefined {\n        return this.filterParams.getValue(node);\n    }\n\n    private extractExistingFormattedKeys(\n        existingValues?: Map<string | null, V | null>\n    ): Map<string | null, string | null> | null {\n        if (!existingValues) {\n            return null;\n        }\n        const existingFormattedKeys: Map<string | null, string | null> = new Map();\n        existingValues.forEach((_value, key) => {\n            existingFormattedKeys.set(this.caseFormat(key), key);\n        });\n        return existingFormattedKeys;\n    }\n}\n", "export class SetValueModelFilteringKeys {\n    // To make the filtering fast, we store the keys in a Set rather than using the default array.\n    private filteringKeys: Set<string | null> | null = null;\n\n    // This attribute contains keys that are actually used for filtering.\n    // These keys take into account case sensitivity:\n    // - When filtering is case-insensitive, all filtering keys are converted to upper case and stored here.\n    // - When filtering is case-sensitive, this is the same as filteringKeys.\n    private filteringKeysCaseFormatted: Set<string | null> | null = null;\n\n    private hasNoAppliedFilteringKeys: boolean = false;\n\n    // Function responsible for formatting the filtering keys.\n    private readonly caseFormat: <T extends string | null>(valueToFormat: T) => typeof valueToFormat;\n\n    constructor({ caseFormat }: { caseFormat: <T extends string | null>(valueToFormat: T) => typeof valueToFormat }) {\n        this.caseFormat = caseFormat;\n    }\n\n    public allFilteringKeys(): Set<string | null> | null {\n        return this.filteringKeys;\n    }\n\n    public allFilteringKeysCaseFormatted(): Set<string | null> | null {\n        return this.filteringKeysCaseFormatted;\n    }\n\n    public noAppliedFilteringKeys(): boolean {\n        return this.hasNoAppliedFilteringKeys;\n    }\n\n    public setFilteringKeys(filteringKeys: Set<string | null> | null): void {\n        this.filteringKeys = new Set(filteringKeys);\n        this.hasNoAppliedFilteringKeys = !this.filteringKeys || this.filteringKeys.size === 0;\n\n        this.filteringKeysCaseFormatted = new Set<string | null>();\n        this.filteringKeys.forEach((key) => this.filteringKeysCaseFormatted!.add(this.caseFormat(key)));\n    }\n\n    public addFilteringKey(key: string | null): void {\n        if (this.filteringKeys == null) {\n            this.filteringKeys = new Set<string | null>();\n            this.filteringKeysCaseFormatted = new Set<string | null>();\n        }\n\n        this.filteringKeys.add(key);\n        this.filteringKeysCaseFormatted!.add(this.caseFormat(key));\n\n        if (this.hasNoAppliedFilteringKeys) {\n            this.hasNoAppliedFilteringKeys = false;\n        }\n    }\n\n    public hasCaseFormattedFilteringKey(key: string | null): boolean {\n        return this.filteringKeysCaseFormatted!.has(this.caseFormat(key));\n    }\n\n    public hasFilteringKey(key: string | null): boolean {\n        return this.filteringKeys!.has(key);\n    }\n\n    public reset() {\n        this.filteringKeys = null;\n        this.filteringKeysCaseFormatted = null;\n        this.hasNoAppliedFilteringKeys = false;\n    }\n}\n", "import type { AgColumn, TextFormatter, ValueFormatterParams, ValueService } from '@ag-grid-community/core';\n\nimport type { ISetDisplayValueModel } from './iSetDisplayValueModel';\nimport { SetFilterDisplayValue } from './iSetDisplayValueModel';\n\nexport class FlatSetDisplayValueModel<V> implements ISetDisplayValueModel<V> {\n    /** All keys that are currently displayed, after the mini-filter has been applied. */\n    private displayedKeys: (string | null)[] = [];\n\n    constructor(\n        private readonly valueService: ValueService,\n        private readonly valueFormatter: ((params: ValueFormatterParams) => string) | undefined,\n        private readonly formatter: TextFormatter,\n        private readonly column: AgColumn\n    ) {}\n\n    public updateDisplayedValuesToAllAvailable(\n        _getValue: (key: string | null) => V | null,\n        _allKeys: Iterable<string | null> | undefined,\n        availableKeys: Set<string | null>\n    ): void {\n        this.displayedKeys = Array.from(availableKeys);\n    }\n\n    public updateDisplayedValuesToMatchMiniFilter(\n        getValue: (key: string | null) => V | null,\n        _allKeys: Iterable<string | null> | undefined,\n        availableKeys: Set<string | null>,\n        matchesFilter: (valueToCheck: string | null) => boolean,\n        nullMatchesFilter: boolean\n    ): void {\n        this.displayedKeys = [];\n\n        for (const key of availableKeys) {\n            if (key == null) {\n                if (nullMatchesFilter) {\n                    this.displayedKeys.push(key);\n                }\n            } else {\n                const value = getValue(key);\n                const valueFormatterValue = this.valueService.formatValue(\n                    this.column,\n                    null,\n                    value,\n                    this.valueFormatter,\n                    false\n                );\n\n                const textFormatterValue = this.formatter(valueFormatterValue);\n\n                if (matchesFilter(textFormatterValue)) {\n                    this.displayedKeys.push(key);\n                }\n            }\n        }\n    }\n\n    public getDisplayedValueCount(): number {\n        return this.displayedKeys.length;\n    }\n\n    public getDisplayedItem(index: number): string | null {\n        return this.displayedKeys[index];\n    }\n\n    getSelectAllItem(): string {\n        return SetFilterDisplayValue.SELECT_ALL;\n    }\n\n    getAddSelectionToFilterItem(): string {\n        return SetFilterDisplayValue.ADD_SELECTION_TO_FILTER;\n    }\n\n    public getDisplayedKeys(): (string | null)[] {\n        return this.displayedKeys;\n    }\n\n    public forEachDisplayedKey(func: (key: string | null) => void): void {\n        this.displayedKeys.forEach(func);\n    }\n\n    public someDisplayedKey(func: (key: string | null) => boolean): boolean {\n        return this.displayedKeys.some(func);\n    }\n\n    public hasGroups(): boolean {\n        return false;\n    }\n\n    public refresh(): void {\n        // not used\n    }\n}\n", "import type { TextFormatter } from '@ag-grid-community/core';\nimport { _warnOnce } from '@ag-grid-community/core';\n\nimport type { ISetDisplayValueModel, SetFilterModelTreeItem } from './iSetDisplayValueModel';\nimport { SetFilterDisplayValue } from './iSetDisplayValueModel';\n\nconst DATE_TREE_LIST_PATH_GETTER = (date: Date | null) =>\n    date ? [String(date.getFullYear()), String(date.getMonth() + 1), String(date.getDate())] : null;\nexport class TreeSetDisplayValueModel<V> implements ISetDisplayValueModel<V> {\n    /** all displayed items in a tree structure */\n    private allDisplayedItemsTree: SetFilterModelTreeItem[] = [];\n    /** all displayed items flattened and filtered */\n    private activeDisplayedItemsFlat: SetFilterModelTreeItem[] = [];\n\n    private groupsExist: boolean;\n\n    private readonly selectAllItem: SetFilterModelTreeItem = {\n        depth: 0,\n        filterPasses: true,\n        available: true,\n        treeKey: SetFilterDisplayValue.SELECT_ALL,\n        children: this.allDisplayedItemsTree,\n        expanded: true,\n        key: SetFilterDisplayValue.SELECT_ALL,\n        parentTreeKeys: [],\n    };\n\n    private readonly addSelectionToFilterItem: SetFilterModelTreeItem = {\n        depth: 0,\n        filterPasses: true,\n        available: true,\n        treeKey: SetFilterDisplayValue.ADD_SELECTION_TO_FILTER,\n        expanded: true,\n        key: SetFilterDisplayValue.ADD_SELECTION_TO_FILTER,\n        parentTreeKeys: [],\n    };\n\n    constructor(\n        private readonly formatter: TextFormatter,\n        private readonly treeListPathGetter?: (value: V | null) => string[] | null,\n        private readonly treeListFormatter?: (\n            pathKey: string | null,\n            level: number,\n            parentPathKeys: (string | null)[]\n        ) => string,\n        private readonly treeDataOrGrouping?: boolean\n    ) {}\n\n    public updateDisplayedValuesToAllAvailable(\n        getValue: (key: string | null) => V | null,\n        allKeys: Iterable<string | null> | undefined,\n        availableKeys: Set<string | null>,\n        source: 'reload' | 'otherFilter' | 'miniFilter'\n    ): void {\n        if (source === 'reload') {\n            this.generateItemTree(getValue, allKeys!, availableKeys);\n        } else if (source === 'otherFilter') {\n            this.updateAvailable(availableKeys);\n            this.updateExpandAll();\n        } else if (source === 'miniFilter') {\n            this.resetFilter();\n            this.updateExpandAll();\n        }\n\n        this.flattenItems();\n    }\n\n    public updateDisplayedValuesToMatchMiniFilter(\n        getValue: (key: string | null) => V | null,\n        allKeys: Iterable<string | null> | undefined,\n        availableKeys: Set<string | null>,\n        matchesFilter: (valueToCheck: string | null) => boolean,\n        nullMatchesFilter: boolean,\n        source: 'reload' | 'otherFilter' | 'miniFilter'\n    ): void {\n        if (source === 'reload') {\n            this.generateItemTree(getValue, allKeys!, availableKeys);\n        } else if (source === 'otherFilter') {\n            this.updateAvailable(availableKeys);\n        }\n\n        this.updateFilter(matchesFilter, nullMatchesFilter);\n        this.updateExpandAll();\n\n        this.flattenItems();\n    }\n\n    private generateItemTree(\n        getValue: (key: string | null) => V | null,\n        allKeys: Iterable<string | null>,\n        availableKeys: Set<string | null>\n    ): void {\n        this.allDisplayedItemsTree = [];\n        this.groupsExist = false;\n\n        const treeListPathGetter = this.getTreeListPathGetter(getValue, availableKeys);\n        for (const key of allKeys) {\n            const value = getValue(key)!;\n            const dataPath = treeListPathGetter(value) ?? [null];\n            if (dataPath.length > 1) {\n                this.groupsExist = true;\n            }\n            const available = availableKeys.has(key);\n            let children: SetFilterModelTreeItem[] | undefined = this.allDisplayedItemsTree;\n            let item: SetFilterModelTreeItem | undefined;\n            let parentTreeKeys: (string | null)[] = [];\n            dataPath.forEach((treeKey: string | null, depth: number) => {\n                if (!children) {\n                    children = [];\n                    item!.children = children;\n                }\n                item = children.find((child) => child.treeKey?.toUpperCase() === treeKey?.toUpperCase());\n                if (!item) {\n                    item = { treeKey, depth, filterPasses: true, expanded: false, available, parentTreeKeys };\n                    if (depth === dataPath.length - 1) {\n                        item.key = key;\n                    }\n                    children.push(item);\n                }\n                children = item.children;\n                parentTreeKeys = [...parentTreeKeys, treeKey];\n            });\n        }\n        // update the parent availability based on the children\n        this.updateAvailable(availableKeys);\n\n        this.selectAllItem.children = this.allDisplayedItemsTree;\n        this.selectAllItem.expanded = false;\n    }\n\n    private getTreeListPathGetter(\n        getValue: (key: string | null) => V | null,\n        availableKeys: Set<string | null>\n    ): (value: V | null) => string[] | null {\n        if (this.treeListPathGetter) {\n            return this.treeListPathGetter;\n        }\n        if (this.treeDataOrGrouping) {\n            return (value) => value as any;\n        }\n        // infer from data\n        let isDate = false;\n        for (const availableKey of availableKeys) {\n            // find the first non-null value\n            const value = getValue(availableKey);\n            if (value instanceof Date) {\n                isDate = true;\n                break;\n            } else if (value != null) {\n                break;\n            }\n        }\n        if (isDate) {\n            return DATE_TREE_LIST_PATH_GETTER as any;\n        }\n        _warnOnce(\n            'property treeList=true for Set Filter params, but you did not provide a treeListPathGetter or values of type Date.'\n        );\n        return (value) => [String(value)];\n    }\n\n    private flattenItems(): void {\n        this.activeDisplayedItemsFlat = [];\n        const recursivelyFlattenDisplayedItems = (items: SetFilterModelTreeItem[]) => {\n            items.forEach((item) => {\n                if (!item.filterPasses || !item.available) {\n                    return;\n                }\n                this.activeDisplayedItemsFlat.push(item);\n                if (item.children && item.expanded) {\n                    recursivelyFlattenDisplayedItems(item.children);\n                }\n            });\n        };\n        recursivelyFlattenDisplayedItems(this.allDisplayedItemsTree);\n    }\n\n    private resetFilter(): void {\n        const recursiveFilterReset = (item: SetFilterModelTreeItem) => {\n            if (item.children) {\n                item.children.forEach((child) => {\n                    recursiveFilterReset(child);\n                });\n            }\n\n            item.filterPasses = true;\n        };\n\n        this.allDisplayedItemsTree.forEach((item) => recursiveFilterReset(item));\n    }\n\n    private updateFilter(matchesFilter: (valueToCheck: string | null) => boolean, nullMatchesFilter: boolean): void {\n        const passesFilter = (item: SetFilterModelTreeItem) => {\n            if (!item.available) {\n                return false;\n            }\n            if (item.treeKey == null) {\n                return nullMatchesFilter;\n            }\n\n            return matchesFilter(\n                this.formatter(\n                    this.treeListFormatter\n                        ? this.treeListFormatter(item.treeKey, item.depth, item.parentTreeKeys)\n                        : item.treeKey\n                )\n            );\n        };\n\n        this.allDisplayedItemsTree.forEach((item) =>\n            this.recursiveItemCheck(item, false, passesFilter, 'filterPasses')\n        );\n    }\n\n    public getDisplayedValueCount(): number {\n        return this.activeDisplayedItemsFlat.length;\n    }\n\n    public getDisplayedItem(index: number): SetFilterModelTreeItem | null {\n        return this.activeDisplayedItemsFlat[index];\n    }\n\n    public getSelectAllItem(): SetFilterModelTreeItem {\n        return this.selectAllItem;\n    }\n\n    public getAddSelectionToFilterItem(): string | SetFilterModelTreeItem {\n        return this.addSelectionToFilterItem;\n    }\n\n    public getDisplayedKeys(): (string | null)[] {\n        const displayedKeys: (string | null)[] = [];\n        this.forEachDisplayedKey((key) => displayedKeys.push(key));\n        return displayedKeys;\n    }\n\n    public forEachDisplayedKey(func: (key: string | null) => void): void {\n        const recursiveForEachItem = (item: SetFilterModelTreeItem, topParentExpanded: boolean) => {\n            if (item.children) {\n                if (!item.expanded || !topParentExpanded) {\n                    // if the parent is not expanded, we need to iterate the entire tree\n                    item.children.forEach((child) => {\n                        if (child.filterPasses) {\n                            recursiveForEachItem(child, false);\n                        }\n                    });\n                }\n            } else {\n                func(item.key!);\n            }\n        };\n\n        this.activeDisplayedItemsFlat.forEach((item) => recursiveForEachItem(item, true));\n    }\n\n    public someDisplayedKey(func: (key: string | null) => boolean): boolean {\n        const recursiveSomeItem = (item: SetFilterModelTreeItem, topParentExpanded: boolean): boolean => {\n            if (item.children) {\n                if (!item.expanded || !topParentExpanded) {\n                    // if the parent is not expanded, we need to iterate the entire tree\n                    return item.children.some((child) => {\n                        if (child.filterPasses) {\n                            return recursiveSomeItem(child, false);\n                        }\n                        return false;\n                    });\n                }\n            } else {\n                return func(item.key!);\n            }\n            return false;\n        };\n\n        return this.activeDisplayedItemsFlat.some((item) => recursiveSomeItem(item, true));\n    }\n\n    public hasGroups(): boolean {\n        return this.groupsExist;\n    }\n\n    public refresh(): void {\n        this.updateExpandAll();\n        this.flattenItems();\n    }\n\n    private updateExpandAll(): void {\n        const recursiveExpansionCheck = (\n            items: SetFilterModelTreeItem[],\n            someTrue: boolean,\n            someFalse: boolean\n        ): boolean | undefined => {\n            for (const item of items) {\n                if (!item.filterPasses || !item.available || !item.children) {\n                    continue;\n                }\n                // indeterminate state only exists for expand all, so don't need to check for the current item\n                someTrue = someTrue || !!item.expanded;\n                someFalse = someFalse || !item.expanded;\n                if (someTrue && someFalse) {\n                    // already indeterminate. No need to check the children\n                    return undefined;\n                }\n                const childExpanded = recursiveExpansionCheck(item.children, someTrue, someFalse);\n                if (childExpanded === undefined) {\n                    return undefined;\n                } else if (childExpanded) {\n                    someTrue = true;\n                } else {\n                    someFalse = true;\n                }\n            }\n            return someTrue && someFalse ? undefined : someTrue;\n        };\n\n        const item = this.getSelectAllItem();\n        item.expanded = recursiveExpansionCheck(item.children!, false, false);\n    }\n\n    private recursiveItemCheck(\n        item: SetFilterModelTreeItem,\n        parentPasses: boolean,\n        checkFunction: (item: SetFilterModelTreeItem) => boolean,\n        itemProp: 'filterPasses' | 'available'\n    ): boolean {\n        let atLeastOneChildPassed = false;\n        if (item.children) {\n            item.children.forEach((child) => {\n                const childPasses = this.recursiveItemCheck(\n                    child,\n                    parentPasses || checkFunction(item),\n                    checkFunction,\n                    itemProp\n                );\n                atLeastOneChildPassed = atLeastOneChildPassed || childPasses;\n            });\n        }\n\n        const itemPasses = parentPasses || atLeastOneChildPassed || checkFunction(item);\n        item[itemProp] = itemPasses;\n        return itemPasses;\n    }\n\n    private updateAvailable(availableKeys: Set<string | null>) {\n        const isAvailable = (item: SetFilterModelTreeItem) => availableKeys.has(item.key!);\n\n        this.allDisplayedItemsTree.forEach((item) => this.recursiveItemCheck(item, false, isAvailable, 'available'));\n    }\n}\n", "import type {\n    AgColumn,\n    AgInputTextField,\n    BeanCollection,\n    ColumnNameService,\n    IFloatingFilter,\n    IFloatingFilterParams,\n    SetFilterModel,\n} from '@ag-grid-community/core';\nimport { AgInputTextFieldSelector, Component, RefPlaceholder } from '@ag-grid-community/core';\n\nimport { SetFilter } from './setFilter';\nimport { SetFilterModelFormatter } from './setFilterModelFormatter';\n\nexport class SetFloatingFilterComp<V = string> extends Component implements IFloatingFilter {\n    private columnNameService: ColumnNameService;\n    private readonly eFloatingFilterText: AgInputTextField = RefPlaceholder;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnNameService = beans.columnNameService;\n    }\n\n    private params: IFloatingFilterParams;\n    private availableValuesListenerAdded = false;\n    private readonly filterModelFormatter = new SetFilterModelFormatter();\n\n    constructor() {\n        super(\n            /* html */ `\n            <div class=\"ag-floating-filter-input ag-set-floating-filter-input\" role=\"presentation\">\n                <ag-input-text-field data-ref=\"eFloatingFilterText\"></ag-input-text-field>\n            </div>`,\n            [AgInputTextFieldSelector]\n        );\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public override destroy(): void {\n        super.destroy();\n    }\n\n    public init(params: IFloatingFilterParams): void {\n        this.params = params;\n\n        this.eFloatingFilterText.setDisabled(true).addGuiEventListener('click', () => this.params.showParentFilter());\n\n        this.setParams(params);\n    }\n\n    private setParams(params: IFloatingFilterParams): void {\n        const displayName = this.columnNameService.getDisplayNameForColumn(params.column as AgColumn, 'header', true);\n        const translate = this.localeService.getLocaleTextFunc();\n\n        this.eFloatingFilterText.setInputAriaLabel(`${displayName} ${translate('ariaFilterInput', 'Filter Input')}`);\n    }\n\n    public onParamsUpdated(params: IFloatingFilterParams): void {\n        this.refresh(params);\n    }\n\n    public refresh(params: IFloatingFilterParams): void {\n        this.params = params;\n        this.setParams(params);\n    }\n\n    public onParentModelChanged(parentModel: SetFilterModel): void {\n        this.updateFloatingFilterText(parentModel);\n    }\n\n    private parentSetFilterInstance(cb: (instance: SetFilter<V>) => void): void {\n        this.params.parentFilterInstance((filter) => {\n            if (!(filter instanceof SetFilter)) {\n                throw new Error('AG Grid - SetFloatingFilter expects SetFilter as its parent');\n            }\n\n            cb(filter);\n        });\n    }\n\n    private addAvailableValuesListener(): void {\n        this.parentSetFilterInstance((setFilter) => {\n            const setValueModel = setFilter.getValueModel();\n\n            if (!setValueModel) {\n                return;\n            }\n\n            // unlike other filters, what we show in the floating filter can be different, even\n            // if another filter changes. this is due to how set filter restricts its values based\n            // on selections in other filters, e.g. if you filter Language to English, then the set filter\n            // on Country will only show English speaking countries. Thus the list of items to show\n            // in the floating filter can change.\n            this.addManagedListeners(setValueModel, { availableValuesChanged: () => this.updateFloatingFilterText() });\n        });\n\n        this.availableValuesListenerAdded = true;\n    }\n\n    private updateFloatingFilterText(parentModel?: SetFilterModel | null): void {\n        if (!this.availableValuesListenerAdded) {\n            this.addAvailableValuesListener();\n        }\n\n        this.parentSetFilterInstance((setFilter) => {\n            this.eFloatingFilterText.setValue(this.filterModelFormatter.getModelAsString(parentModel, setFilter));\n        });\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.3.1';\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACCA,IAAAA,eAAwE;AACxE,IAAAA,eAAqC;;;ACiBrC,IAAAC,eAaO;AACP,IAAAA,eAA4B;;;ACGrB,IAAM,wBAAN,MAA4B;AAGnC;AAHa,sBACc,aAAa;AAD3B,sBAEc,0BAA0B;;;AC5B9C,IAAM,sBAA4C;AAAA,EACrD,YAAY;AAAA,EACZ,QAAQ;AAAA,EACR,WAAW;AAAA,EACX,WAAW;AAAA,EACX,wBAAwB;AAAA,EACxB,6BAA6B;AAAA,EAC7B,WAAW;AACf;;;ACFA,kBAcO;AAqCA,IAAM,oBAAN,cAAmC,sBAAkC;AAAA,EAoCxE,YAAY,QAAoC;AAC5C;AAAA,MACI,OAAO;AAAA;AAAA,QACU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QASA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIjB,CAAC,8BAAkB;AAAA,IACvB;AA5CJ,SAAiB,YAAwB;AAEzC,SAAiB,mBAAgC;AACjD,SAAiB,mBAAgC;AACjD,SAAiB,0BAAuC;AAyCpD,SAAK,eAAe,OAAO;AAC3B,SAAK,QAAQ,OAAO;AACpB,SAAK,SAAS,OAAO;AACrB,SAAK,YAAY,OAAO;AACxB,SAAK,iBAAiB,OAAO;AAC7B,SAAK,OAAO,OAAO;AACnB,SAAK,aAAa,OAAO;AACzB,SAAK,SAAS,OAAO;AACrB,SAAK,QAAQ,OAAO,SAAS;AAC7B,SAAK,UAAU,OAAO;AACtB,SAAK,cAAc,OAAO;AAC1B,SAAK,aAAa,OAAO;AACzB,SAAK,8BAA8B,OAAO;AAAA,EAC9C;AAAA,EA/DO,UAAU,OAAuB;AACpC,SAAK,eAAe,MAAM;AAC1B,SAAK,uBAAuB,MAAM;AAAA,EACtC;AAAA,EA8DO,gBAAsB;AACzB,SAAK,eAAe,MAAM,KAAK,+BAA+B,CAAC;AAE/D,SAAK,OAAO;AAEZ,SAAK,UACA,iBAAiB,IAAI,EACrB,SAAS,KAAK,YAAY,IAAI,EAC9B,YAAY,CAAC,CAAC,KAAK,OAAO,QAAQ,EAClC,gBAAgB,EAChB,aAAa,YAAY,IAAI;AAElC,SAAK,0BAA0B;AAE/B,QAAI,KAAK,QAAQ;AACb,UAAI,KAAK,QAAQ,GAAG;AAChB,aAAK,YAAY,0BAA0B,KAAK,KAAK;AACrD,aAAK,OAAO,EAAE,MAAM,YAAY,0BAA0B,OAAO,KAAK,KAAK,CAAC;AAAA,MAChF;AACA,UAAI,KAAK,SAAS;AACd,aAAK,eAAe;AAAA,MACxB,OAAO;AACH,YAAI,KAAK,aAAa;AAClB,eAAK,YAAY,gCAAgC;AAAA,QACrD;AAAA,MACJ;AAEA,qCAAc,KAAK,eAAe,GAAG,KAAK,QAAQ,CAAC;AAAA,IACvD;AAEA,SAAK,mBAAmB;AAExB,QAAI,KAAK,OAAO,UAAU;AAEtB;AAAA,IACJ;AAEA,SAAK,UAAU,cAAc,CAAC,UAAU,KAAK,kBAAkB,CAAC,CAAC,KAAK,CAAC;AAAA,EAC3E;AAAA,EAEgB,sBAAmC;AAC/C,WAAO,KAAK;AAAA,EAChB;AAAA,EAEQ,iBAAuB;AAC3B,SAAK,iBAAiB,gBAAY,yBAAY,wBAAwB,KAAK,KAAK,IAAI,CAAC;AACrF,SAAK,iBAAiB,gBAAY,yBAAY,sBAAsB,KAAK,KAAK,IAAI,CAAC;AACnF,UAAM,WAAW,KAAK,0BAA0B,KAAK,IAAI;AACzD,SAAK,2BAA2B,KAAK,kBAAkB,EAAE,OAAO,SAAS,CAAC;AAC1E,SAAK,2BAA2B,KAAK,kBAAkB,EAAE,OAAO,SAAS,CAAC;AAE1E,QAAI,KAAK,6BAA6B;AAClC,WAAK,wBAAwB,gBAAY,yBAAY,+BAA+B,KAAK,KAAK,IAAI,CAAC;AACnG,WAAK,2BAA2B,KAAK,yBAAyB;AAAA,QAC1D,OAAO;AAAA,MACX,CAAC;AAAA,IACL;AAEA,SAAK,iBAAiB;AACtB,SAAK,oBAAoB;AAAA,EAC7B;AAAA,EAEQ,4BAAkC;AACtC,SAAK,YAAY,CAAC,KAAK,UAAU;AAAA,EACrC;AAAA,EAEO,YAAY,YAAiC,QAAwB;AACxE,QAAI,KAAK,WAAW,eAAe,KAAK,YAAY;AAChD,WAAK,aAAa;AAElB,YAAM,QAA+C;AAAA,QACjD,MAAM;AAAA,QACN,YAAY,CAAC,CAAC;AAAA,QACd,MAAM,KAAK;AAAA,MACf;AAEA,UAAI,CAAC,QAAQ;AACT,aAAK,mBAAmB,KAAK;AAAA,MACjC;AAEA,WAAK,iBAAiB;AACtB,WAAK,oBAAoB;AAAA,IAC7B;AAAA,EACJ;AAAA,EAEQ,mBAAyB;AAC7B;AAAA,MACI,KAAK;AAAA,MACL,KAAK,8BAA8B,KAAK,eAAe,QAAQ,CAAC,KAAK;AAAA,IACzE;AACA,mCAAc,KAAK,kBAAkB,KAAK,eAAe,IAAI;AAC7D,QAAI,KAAK,6BAA6B;AAClC,qCAAc,KAAK,yBAAyB,KAAK,eAAe,MAAS;AAAA,IAC7E;AAAA,EACJ;AAAA,EAEQ,kBAAkB,YAA2B;AACjD,SAAK,aAAa;AAElB,UAAM,QAAgD;AAAA,MAClD,MAAM;AAAA,MACN;AAAA,MACA,MAAM,KAAK;AAAA,IACf;AAEA,SAAK,mBAAmB,KAAK;AAC7B,SAAK,0BAA0B;AAC/B,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EAEO,iBAAuB;AAC1B,QAAI,KAAK,OAAO,UAAU;AACtB;AAAA,IACJ;AAEA,SAAK,YAAY,CAAC,KAAK,UAAU;AAAA,EACrC;AAAA,EAEQ,YAAY,YAAiC,QAAkB;AACnE,SAAK,aAAa;AAClB,SAAK,UAAU,SAAS,YAAY,MAAM;AAC1C,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EAEQ,4BAAkC;AACtC,QAAI,CAAC,KAAK,QAAQ;AACd;AAAA,IACJ;AACA,UAAM,YAAY,KAAK,cAAc,kBAAkB;AACvD,UAAM,gBAAgB,KAAK,UAAU,SAAS;AAC9C,UAAM,QACF,kBAAkB,SACZ,UAAU,qBAAqB,eAAe,IAC9C,gBACE,UAAU,eAAe,SAAS,IAClC,UAAU,cAAc,QAAQ;AAC5C,UAAM,kBAAkB,UAAU,wBAAwB,kCAAkC;AAC5F,wCAAmB,KAAK,UAAU,gBAAgB,GAAG,MAAgB;AACrE,SAAK,UAAU,kBAAkB,GAAG,eAAe,KAAK,KAAK,GAAG;AAAA,EACpE;AAAA,EAEQ,qBAAqB,OAAkB;AAC3C,QAAI,CAAC,KAAK,QAAQ;AACd;AAAA,IACJ;AACA,UAAM,YAAY,KAAK,cAAc,kBAAkB;AACvD,UAAM,YAAY,UAAU,mBAAmB,cAAc;AAC7D,UAAM,SAAS,KAAK,eAAe;AACnC,mCAAc,QAAQ,GAAG,KAAK,IAAI,SAAS,EAAE;AAC7C,yCAAoB,QAAQ,KAAK,UAAU,gBAAgB,EAAE,EAAE;AAAA,EACnE;AAAA,EAEQ,qBAA2B;AAC/B,UAAM,SAAS,KAAK,eAAe;AAEnC,qCAAgB,QAAQ,KAAK,UAAU,SAAS,CAAC;AAAA,EACrD;AAAA,EAEQ,sBAA4B;AAChC,sCAAiB,KAAK,eAAe,GAAG,CAAC,CAAC,KAAK,UAAU;AAAA,EAC7D;AAAA,EAEO,QACH,MACA,YACA,YACI;AACJ,SAAK,OAAO;AAEZ,QAAI,eAAe,KAAK,YAAY;AAChC,WAAK,YAAY,YAAY,IAAI;AAAA,IACrC;AACA,SAAK,YAAY,YAAY,IAAI;AACjC,QAAI,KAAK,eAAe;AAEpB,YAAM,QAAQ,KAAK,cAAc;AACjC,WAAK,gCAAgC,OAAc,KAAK;AACxD,UAAI,CAAC,KAAK,uBAAuB;AAC7B,aAAK,8BAA8B;AAAA,MACvC;AAAA,IACJ;AACA,QAAI,KAAK,uBAAuB;AAC5B,YAAM,UAAU,KAAK,sBAAsB,UAAU,KAAK,kBAAyB;AACnF,UAAI,CAAC,SAAS;AACV,cAAM,eAAe,KAAK;AAC1B,aAAK,WAAW;AAChB,aAAK,YAAY,YAAY;AAAA,MACjC;AAAA,IACJ;AAAA,EACJ;AAAA,EAEO,SAAe;AAClB,UAAM;AAAA,MACF,QAAQ,EAAE,OAAO;AAAA,IACrB,IAAI;AAEJ,QAAI,EAAE,MAAM,IAAI;AAChB,QAAI,iBAAgC;AAEpC,QAAI,OAAO,UAAU,YAAY;AAC7B,WAAK,gBAAgB;AACrB,uBAAiB,KAAK,cAAc;AAEpC,cAAQ;AAAA,IACZ,WAAW,KAAK,QAAQ;AAEpB,2BAAiB,6BAAgB,KAAK;AAAA,IAC1C,OAAO;AACH,uBAAiB,KAAK,kBAAkB,QAAoB,KAAK;AAAA,IACrE;AAEA,SAAK,gCAAgC,OAAO,cAAc;AAE1D,SAAK,WAAW;AAAA,EACpB;AAAA,EAEQ,gCAAgC,OAAkC,gBAAqC;AAC3G,UAAM,yBAAyB,KAAK,IAAI,IAAI,iBAAiB,MAAM;AAEnE,QAAI,KAAK,OAAO,iBAAiB,CAAC,0BAA0B,CAAC,KAAK,OAAO,eAAe;AACpF,YAAM,iBAAiB,kBAAkB,OAAO,qBAAiB,6BAAgB,KAAK;AACtF,UAAI;AAEJ,UAAI,wBAAwB;AACxB,+BAAuB,MAAM;AACzB,gBAAM,KAAK,KAAK,UAAU,OAAO,EAAE,cAAc,WAAW;AAC5D,cAAI,CAAC,IAAI;AACL,mBAAO;AAAA,UACX;AACA,iBAAO,GAAG,cAAc,GAAG;AAAA,QAC/B;AAAA,MACJ;AACA,WAAK,WAAW;AAAA,QACZ;AAAA,QACA,UAAU;AAAA,QACV,WAAW,MAAM,KAAK,OAAO;AAAA,QAC7B,WAAW,MAAM,KAAK,OAAO;AAAA,QAC7B;AAAA,MACJ,CAAC;AAAA,IACL;AAEA,SAAK,qBAAqB,KAAK,IAAI,oBAAoB;AAAA,MACnD;AAAA,MACA,gBAAgB;AAAA,MAChB,QAAQ,KAAK,OAAO;AAAA,MACpB,QAAQ,KAAK,OAAO;AAAA,MACpB,YAAY,CAACC,QAAe,yBAAwC;AAChE,aAAK,WAAW;AAAA,UACZ,gBAAgBA;AAAA,UAChB,WAAW,MAAM,KAAK,OAAO;AAAA,UAC7B,WAAW,MAAM,KAAK,OAAO;AAAA,UAC7B,UAAU;AAAA,UACV;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEgB,mBAAsD;AAClE,UAAM,MAAM,MAAM,iBAAiB;AACnC,QAAI,WAAW;AACf,QAAI,SAAS,KAAK,mBAAmB;AACrC,QAAI,KAAK,QAAQ;AACb,MAAC,IAAwC,QAAQ,KAAK;AAAA,IAC1D;AACA,WAAO;AAAA,EACX;AAAA,EAEQ,kBAAkB,QAAkB,OAAY;AACpD,WAAO,KAAK,aAAa,YAAY,QAAQ,MAAM,OAAO,KAAK,gBAAgB,KAAK;AAAA,EACxF;AAAA,EAEQ,aAAmB;AACvB,UAAM,cAAc,KAAK,qBAAqB;AAAA,MAC1C,KAAK;AAAA,MACL,KAAK;AAAA,IACT;AACA,UAAM,sBAAsB,cAAc,YAAY,mBAAmB,IAAI;AAE7E,QAAI,uBAAuB,MAAM;AAC7B,WAAK,8BAA8B;AACnC;AAAA,IACJ;AAEA,wBAAoB,KAAK,CAAC,cAAc;AACpC,UAAI,WAAW;AACX,aAAK,wBAAwB;AAC7B,aAAK,UAAU,SAAS,UAAU,OAAO,CAAC;AAC1C,aAAK,+BAA+B,MAAM,KAAK,YAAY,SAAS;AAAA,MACxE;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEQ,gCAAsC;AAC1C,QAAI,iBACC,KAAK,mBAAmB,kBAAkB,OACrC,KAAK,mBAAmB,QACxB,KAAK,mBAAmB,mBAAmB,KAAK,UAAU,QAAQ;AAC5E,QAAI,OAAO,kBAAkB,UAAU;AACnC;AAAA,QACI,qJAAqJ,KAAK,sBAAsB,EAAE,WAAW,4CAA4C,CAAC;AAAA,MAC9O;AACA,sBAAgB;AAAA,IACpB;AAEA,SAAK,UAAU,SAAS,aAAa;AACrC,SAAK,qBAAqB,aAAa;AAAA,EAC3C;AAAA,EAEO,qBAA6B;AAChC,WAAO,KAAK,OAAO,OAAO,UAAU;AAAA,EACxC;AACJ;;;AC5bO,IAAM,0BAAN,MAA8B;AAAA,EAC1B,iBAAoB,OAA0C,WAAiC;AAClG,UAAM,EAAE,OAAO,IAAI,SAAS,UAAU,SAAS,KAAK,CAAC;AACrD,UAAM,aAAa,UAAU,cAAc;AAE3C,QAAI,UAAU,QAAQ,cAAc,MAAM;AACtC,aAAO;AAAA,IACX;AAEA,UAAM,gBAAgB,OAAO,OAAO,CAAC,MAAM,WAAW,eAAe,CAAC,CAAC;AACvE,UAAM,YAAY,cAAc;AAEhC,UAAM,kBAAkB,cAAc,MAAM,GAAG,EAAE,EAAE,IAAI,CAAC,QAAQ,UAAU,kBAAkB,GAAG,CAAC;AAEhG,WAAO,IAAI,SAAS,KAAK,gBAAgB,KAAK,GAAG,CAAC,GAAG,YAAY,KAAK,SAAS,EAAE;AAAA,EACrF;AACJ;;;ACFA,IAAAC,eAQO;;;AChBP,IAAAC,eAAsD;AAG/C,IAAM,4BAAN,MAAmC;AAAA,EACtC,YACqB,UACA,cACA,WACA,YACA,iBACA,cACA,oBACA,UACA,aACA,sBACA,0BAGnB;AAbmB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,EAGlB;AAAA,EAEI,yBACH,WACA,gBACuC;AACvC,WAAO,IAAI,uBAAU,CAAC,YAAY;AAC9B,UAAI,KAAK,SAAS,gBAAgB,GAAG;AACjC,gBAAQ,KAAK,oBAAoB,WAAW,cAAc,CAAC;AAAA,MAC/D,OAAO;AACH,cAAM,CAAC,WAAW,IAAI,KAAK,yBAAyB;AAAA,UAChD,eAAe,MAAM;AACjB,0BAAc;AACd,oBAAQ,KAAK,oBAAoB,WAAW,cAAc,CAAC;AAAA,UAC/D;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEO,oBACH,WACA,gBAC4B;AAC5B,UAAM,SAAuC,oBAAI,IAAI;AACrD,UAAM,wBAAwB,KAAK,6BAA6B,cAAc;AAC9E,UAAM,gBAAoC,oBAAI,IAAI;AAClD,UAAM,WAAW,KAAK,YAAY,CAAC,CAAC,KAAK;AACzC,UAAM,cAAc,KAAK,gBAAgB,mBAAmB;AAE5D,UAAM,WAAW,CAAC,gBAA+B,UAAgC;AAC7E,YAAM,eAAe,KAAK,WAAW,cAAc;AACnD,UAAI,CAAC,cAAc,IAAI,YAAY,GAAG;AAClC,sBAAc,IAAI,YAAY;AAC9B,YAAI,WAAW;AACf,YAAI,iBAAa,wBAAU,KAAK;AAGhC,cAAM,yBAAyB,uBAAuB,IAAI,YAAY;AACtE,YAAI,0BAA0B,MAAM;AAChC,qBAAW;AACX,uBAAa,eAAgB,IAAI,sBAAsB;AAAA,QAC3D;AACA,eAAO,IAAI,UAAU,UAAU;AAAA,MACnC;AAAA,IACJ;AAEA,SAAK,SAAS,gBAAgB,CAAC,SAAS;AAEpC,UAAI,CAAC,KAAK,QAAQ,CAAC,UAAU,IAAI,GAAG;AAChC;AAAA,MACJ;AACA,UAAI,KAAK,oBAAoB;AACzB,aAAK,8BAA8B,MAAM,UAAU,aAAa,QAAQ;AACxE;AAAA,MACJ;AAEA,YAAM,QAAQ,KAAK,SAAS,IAAI;AAEhC,UAAI,SAAS,QAAQ,MAAM,QAAQ,KAAK,GAAG;AACvC,cAAM,QAAQ,CAAC,MAAM;AACjB,mBAAS,KAAK,UAAU,GAAG,IAAI,GAAG,CAAC;AAAA,QACvC,CAAC;AACD,YAAI,MAAM,WAAW,GAAG;AACpB,mBAAS,MAAM,IAAI;AAAA,QACvB;AAAA,MACJ,OAAO;AACH,iBAAS,KAAK,UAAU,OAAO,IAAI,GAAG,KAAK;AAAA,MAC/C;AAAA,IACJ,CAAC;AAED,WAAO;AAAA,EACX;AAAA,EAEQ,8BACJ,MACA,UACA,aACA,UACI;AACJ,QAAI;AACJ,QAAI,UAAU;AACV,UAAI,KAAK,oBAAoB,QAAQ;AACjC;AAAA,MACJ;AACA,iBAAW,KAAK,YAAa,KAAK,IAAI;AAAA,IAC1C,OAAO;AACH,iBAAW,YAAY,IAAI,CAAC,aAAa,KAAK,aAAa,cAAc,UAAU,IAAI,CAAC;AACxF,eAAS,KAAK,KAAK,SAAS,IAAI,CAAQ;AAAA,IAC5C;AACA,QAAI,UAAU;AACV,iBAAW,SAAS,IAAI,CAAC,gBAAY,kCAAgB,wBAAU,OAAO,CAAC,CAAC;AAAA,IAC5E;AACA,QAAI,CAAC,YAAY,KAAK,wBAAwB,UAAU,KAAK,CAAC,YAAY,WAAW,IAAI,GAAG;AACxF,iBAAW,SAAS,OAAO,CAAC,YAAY,WAAW,IAAI;AAAA,IAC3D;AACA,aAAS,KAAK,UAAU,QAAe,GAAG,QAAe;AAAA,EAC7D;AAAA,EAEQ,SAAS,MAAqC;AAClD,WAAO,KAAK,aAAa,SAAS,IAAI;AAAA,EAC1C;AAAA,EAEQ,6BACJ,gBACwC;AACxC,QAAI,CAAC,gBAAgB;AACjB,aAAO;AAAA,IACX;AACA,UAAM,wBAA2D,oBAAI,IAAI;AACzE,mBAAe,QAAQ,CAAC,QAAQ,QAAQ;AACpC,4BAAsB,IAAI,KAAK,WAAW,GAAG,GAAG,GAAG;AAAA,IACvD,CAAC;AACD,WAAO;AAAA,EACX;AACJ;;;AC/IO,IAAM,6BAAN,MAAiC;AAAA,EAepC,YAAY,EAAE,WAAW,GAAwF;AAbjH;AAAA,SAAQ,gBAA2C;AAMnD;AAAA;AAAA;AAAA;AAAA,SAAQ,6BAAwD;AAEhE,SAAQ,4BAAqC;AAMzC,SAAK,aAAa;AAAA,EACtB;AAAA,EAEO,mBAA8C;AACjD,WAAO,KAAK;AAAA,EAChB;AAAA,EAEO,gCAA2D;AAC9D,WAAO,KAAK;AAAA,EAChB;AAAA,EAEO,yBAAkC;AACrC,WAAO,KAAK;AAAA,EAChB;AAAA,EAEO,iBAAiB,eAAgD;AACpE,SAAK,gBAAgB,IAAI,IAAI,aAAa;AAC1C,SAAK,4BAA4B,CAAC,KAAK,iBAAiB,KAAK,cAAc,SAAS;AAEpF,SAAK,6BAA6B,oBAAI,IAAmB;AACzD,SAAK,cAAc,QAAQ,CAAC,QAAQ,KAAK,2BAA4B,IAAI,KAAK,WAAW,GAAG,CAAC,CAAC;AAAA,EAClG;AAAA,EAEO,gBAAgB,KAA0B;AAC7C,QAAI,KAAK,iBAAiB,MAAM;AAC5B,WAAK,gBAAgB,oBAAI,IAAmB;AAC5C,WAAK,6BAA6B,oBAAI,IAAmB;AAAA,IAC7D;AAEA,SAAK,cAAc,IAAI,GAAG;AAC1B,SAAK,2BAA4B,IAAI,KAAK,WAAW,GAAG,CAAC;AAEzD,QAAI,KAAK,2BAA2B;AAChC,WAAK,4BAA4B;AAAA,IACrC;AAAA,EACJ;AAAA,EAEO,6BAA6B,KAA6B;AAC7D,WAAO,KAAK,2BAA4B,IAAI,KAAK,WAAW,GAAG,CAAC;AAAA,EACpE;AAAA,EAEO,gBAAgB,KAA6B;AAChD,WAAO,KAAK,cAAe,IAAI,GAAG;AAAA,EACtC;AAAA,EAEO,QAAQ;AACX,SAAK,gBAAgB;AACrB,SAAK,6BAA6B;AAClC,SAAK,4BAA4B;AAAA,EACrC;AACJ;;;AC7DO,IAAM,2BAAN,MAAsE;AAAA,EAIzE,YACqB,cACA,gBACA,WACA,QACnB;AAJmB;AACA;AACA;AACA;AANrB;AAAA,SAAQ,gBAAmC,CAAC;AAAA,EAOzC;AAAA,EAEI,oCACH,WACA,UACA,eACI;AACJ,SAAK,gBAAgB,MAAM,KAAK,aAAa;AAAA,EACjD;AAAA,EAEO,uCACH,UACA,UACA,eACA,eACA,mBACI;AACJ,SAAK,gBAAgB,CAAC;AAEtB,eAAW,OAAO,eAAe;AAC7B,UAAI,OAAO,MAAM;AACb,YAAI,mBAAmB;AACnB,eAAK,cAAc,KAAK,GAAG;AAAA,QAC/B;AAAA,MACJ,OAAO;AACH,cAAM,QAAQ,SAAS,GAAG;AAC1B,cAAM,sBAAsB,KAAK,aAAa;AAAA,UAC1C,KAAK;AAAA,UACL;AAAA,UACA;AAAA,UACA,KAAK;AAAA,UACL;AAAA,QACJ;AAEA,cAAM,qBAAqB,KAAK,UAAU,mBAAmB;AAE7D,YAAI,cAAc,kBAAkB,GAAG;AACnC,eAAK,cAAc,KAAK,GAAG;AAAA,QAC/B;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEO,yBAAiC;AACpC,WAAO,KAAK,cAAc;AAAA,EAC9B;AAAA,EAEO,iBAAiB,OAA8B;AAClD,WAAO,KAAK,cAAc,KAAK;AAAA,EACnC;AAAA,EAEA,mBAA2B;AACvB,WAAO,sBAAsB;AAAA,EACjC;AAAA,EAEA,8BAAsC;AAClC,WAAO,sBAAsB;AAAA,EACjC;AAAA,EAEO,mBAAsC;AACzC,WAAO,KAAK;AAAA,EAChB;AAAA,EAEO,oBAAoB,MAA0C;AACjE,SAAK,cAAc,QAAQ,IAAI;AAAA,EACnC;AAAA,EAEO,iBAAiB,MAAgD;AACpE,WAAO,KAAK,cAAc,KAAK,IAAI;AAAA,EACvC;AAAA,EAEO,YAAqB;AACxB,WAAO;AAAA,EACX;AAAA,EAEO,UAAgB;AAAA,EAEvB;AACJ;;;AC3FA,IAAAC,eAA0B;AAK1B,IAAM,6BAA6B,CAAC,SAChC,OAAO,CAAC,OAAO,KAAK,YAAY,CAAC,GAAG,OAAO,KAAK,SAAS,IAAI,CAAC,GAAG,OAAO,KAAK,QAAQ,CAAC,CAAC,IAAI;AACxF,IAAM,2BAAN,MAAsE;AAAA,EA6BzE,YACqB,WACA,oBACA,mBAKA,oBACnB;AARmB;AACA;AACA;AAKA;AAnCrB;AAAA,SAAQ,wBAAkD,CAAC;AAE3D;AAAA,SAAQ,2BAAqD,CAAC;AAI9D,SAAiB,gBAAwC;AAAA,MACrD,OAAO;AAAA,MACP,cAAc;AAAA,MACd,WAAW;AAAA,MACX,SAAS,sBAAsB;AAAA,MAC/B,UAAU,KAAK;AAAA,MACf,UAAU;AAAA,MACV,KAAK,sBAAsB;AAAA,MAC3B,gBAAgB,CAAC;AAAA,IACrB;AAEA,SAAiB,2BAAmD;AAAA,MAChE,OAAO;AAAA,MACP,cAAc;AAAA,MACd,WAAW;AAAA,MACX,SAAS,sBAAsB;AAAA,MAC/B,UAAU;AAAA,MACV,KAAK,sBAAsB;AAAA,MAC3B,gBAAgB,CAAC;AAAA,IACrB;AAAA,EAWG;AAAA,EAEI,oCACH,UACA,SACA,eACA,QACI;AACJ,QAAI,WAAW,UAAU;AACrB,WAAK,iBAAiB,UAAU,SAAU,aAAa;AAAA,IAC3D,WAAW,WAAW,eAAe;AACjC,WAAK,gBAAgB,aAAa;AAClC,WAAK,gBAAgB;AAAA,IACzB,WAAW,WAAW,cAAc;AAChC,WAAK,YAAY;AACjB,WAAK,gBAAgB;AAAA,IACzB;AAEA,SAAK,aAAa;AAAA,EACtB;AAAA,EAEO,uCACH,UACA,SACA,eACA,eACA,mBACA,QACI;AACJ,QAAI,WAAW,UAAU;AACrB,WAAK,iBAAiB,UAAU,SAAU,aAAa;AAAA,IAC3D,WAAW,WAAW,eAAe;AACjC,WAAK,gBAAgB,aAAa;AAAA,IACtC;AAEA,SAAK,aAAa,eAAe,iBAAiB;AAClD,SAAK,gBAAgB;AAErB,SAAK,aAAa;AAAA,EACtB;AAAA,EAEQ,iBACJ,UACA,SACA,eACI;AACJ,SAAK,wBAAwB,CAAC;AAC9B,SAAK,cAAc;AAEnB,UAAM,qBAAqB,KAAK,sBAAsB,UAAU,aAAa;AAC7E,eAAW,OAAO,SAAS;AACvB,YAAM,QAAQ,SAAS,GAAG;AAC1B,YAAM,WAAW,mBAAmB,KAAK,KAAK,CAAC,IAAI;AACnD,UAAI,SAAS,SAAS,GAAG;AACrB,aAAK,cAAc;AAAA,MACvB;AACA,YAAM,YAAY,cAAc,IAAI,GAAG;AACvC,UAAI,WAAiD,KAAK;AAC1D,UAAI;AACJ,UAAI,iBAAoC,CAAC;AACzC,eAAS,QAAQ,CAAC,SAAwB,UAAkB;AACxD,YAAI,CAAC,UAAU;AACX,qBAAW,CAAC;AACZ,eAAM,WAAW;AAAA,QACrB;AACA,eAAO,SAAS,KAAK,CAAC,UAAU,MAAM,SAAS,YAAY,MAAM,SAAS,YAAY,CAAC;AACvF,YAAI,CAAC,MAAM;AACP,iBAAO,EAAE,SAAS,OAAO,cAAc,MAAM,UAAU,OAAO,WAAW,eAAe;AACxF,cAAI,UAAU,SAAS,SAAS,GAAG;AAC/B,iBAAK,MAAM;AAAA,UACf;AACA,mBAAS,KAAK,IAAI;AAAA,QACtB;AACA,mBAAW,KAAK;AAChB,yBAAiB,CAAC,GAAG,gBAAgB,OAAO;AAAA,MAChD,CAAC;AAAA,IACL;AAEA,SAAK,gBAAgB,aAAa;AAElC,SAAK,cAAc,WAAW,KAAK;AACnC,SAAK,cAAc,WAAW;AAAA,EAClC;AAAA,EAEQ,sBACJ,UACA,eACoC;AACpC,QAAI,KAAK,oBAAoB;AACzB,aAAO,KAAK;AAAA,IAChB;AACA,QAAI,KAAK,oBAAoB;AACzB,aAAO,CAAC,UAAU;AAAA,IACtB;AAEA,QAAI,SAAS;AACb,eAAW,gBAAgB,eAAe;AAEtC,YAAM,QAAQ,SAAS,YAAY;AACnC,UAAI,iBAAiB,MAAM;AACvB,iBAAS;AACT;AAAA,MACJ,WAAW,SAAS,MAAM;AACtB;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,QAAQ;AACR,aAAO;AAAA,IACX;AACA;AAAA,MACI;AAAA,IACJ;AACA,WAAO,CAAC,UAAU,CAAC,OAAO,KAAK,CAAC;AAAA,EACpC;AAAA,EAEQ,eAAqB;AACzB,SAAK,2BAA2B,CAAC;AACjC,UAAM,mCAAmC,CAAC,UAAoC;AAC1E,YAAM,QAAQ,CAAC,SAAS;AACpB,YAAI,CAAC,KAAK,gBAAgB,CAAC,KAAK,WAAW;AACvC;AAAA,QACJ;AACA,aAAK,yBAAyB,KAAK,IAAI;AACvC,YAAI,KAAK,YAAY,KAAK,UAAU;AAChC,2CAAiC,KAAK,QAAQ;AAAA,QAClD;AAAA,MACJ,CAAC;AAAA,IACL;AACA,qCAAiC,KAAK,qBAAqB;AAAA,EAC/D;AAAA,EAEQ,cAAoB;AACxB,UAAM,uBAAuB,CAAC,SAAiC;AAC3D,UAAI,KAAK,UAAU;AACf,aAAK,SAAS,QAAQ,CAAC,UAAU;AAC7B,+BAAqB,KAAK;AAAA,QAC9B,CAAC;AAAA,MACL;AAEA,WAAK,eAAe;AAAA,IACxB;AAEA,SAAK,sBAAsB,QAAQ,CAAC,SAAS,qBAAqB,IAAI,CAAC;AAAA,EAC3E;AAAA,EAEQ,aAAa,eAAyD,mBAAkC;AAC5G,UAAM,eAAe,CAAC,SAAiC;AACnD,UAAI,CAAC,KAAK,WAAW;AACjB,eAAO;AAAA,MACX;AACA,UAAI,KAAK,WAAW,MAAM;AACtB,eAAO;AAAA,MACX;AAEA,aAAO;AAAA,QACH,KAAK;AAAA,UACD,KAAK,oBACC,KAAK,kBAAkB,KAAK,SAAS,KAAK,OAAO,KAAK,cAAc,IACpE,KAAK;AAAA,QACf;AAAA,MACJ;AAAA,IACJ;AAEA,SAAK,sBAAsB;AAAA,MAAQ,CAAC,SAChC,KAAK,mBAAmB,MAAM,OAAO,cAAc,cAAc;AAAA,IACrE;AAAA,EACJ;AAAA,EAEO,yBAAiC;AACpC,WAAO,KAAK,yBAAyB;AAAA,EACzC;AAAA,EAEO,iBAAiB,OAA8C;AAClE,WAAO,KAAK,yBAAyB,KAAK;AAAA,EAC9C;AAAA,EAEO,mBAA2C;AAC9C,WAAO,KAAK;AAAA,EAChB;AAAA,EAEO,8BAA+D;AAClE,WAAO,KAAK;AAAA,EAChB;AAAA,EAEO,mBAAsC;AACzC,UAAM,gBAAmC,CAAC;AAC1C,SAAK,oBAAoB,CAAC,QAAQ,cAAc,KAAK,GAAG,CAAC;AACzD,WAAO;AAAA,EACX;AAAA,EAEO,oBAAoB,MAA0C;AACjE,UAAM,uBAAuB,CAAC,MAA8B,sBAA+B;AACvF,UAAI,KAAK,UAAU;AACf,YAAI,CAAC,KAAK,YAAY,CAAC,mBAAmB;AAEtC,eAAK,SAAS,QAAQ,CAAC,UAAU;AAC7B,gBAAI,MAAM,cAAc;AACpB,mCAAqB,OAAO,KAAK;AAAA,YACrC;AAAA,UACJ,CAAC;AAAA,QACL;AAAA,MACJ,OAAO;AACH,aAAK,KAAK,GAAI;AAAA,MAClB;AAAA,IACJ;AAEA,SAAK,yBAAyB,QAAQ,CAAC,SAAS,qBAAqB,MAAM,IAAI,CAAC;AAAA,EACpF;AAAA,EAEO,iBAAiB,MAAgD;AACpE,UAAM,oBAAoB,CAAC,MAA8B,sBAAwC;AAC7F,UAAI,KAAK,UAAU;AACf,YAAI,CAAC,KAAK,YAAY,CAAC,mBAAmB;AAEtC,iBAAO,KAAK,SAAS,KAAK,CAAC,UAAU;AACjC,gBAAI,MAAM,cAAc;AACpB,qBAAO,kBAAkB,OAAO,KAAK;AAAA,YACzC;AACA,mBAAO;AAAA,UACX,CAAC;AAAA,QACL;AAAA,MACJ,OAAO;AACH,eAAO,KAAK,KAAK,GAAI;AAAA,MACzB;AACA,aAAO;AAAA,IACX;AAEA,WAAO,KAAK,yBAAyB,KAAK,CAAC,SAAS,kBAAkB,MAAM,IAAI,CAAC;AAAA,EACrF;AAAA,EAEO,YAAqB;AACxB,WAAO,KAAK;AAAA,EAChB;AAAA,EAEO,UAAgB;AACnB,SAAK,gBAAgB;AACrB,SAAK,aAAa;AAAA,EACtB;AAAA,EAEQ,kBAAwB;AAC5B,UAAM,0BAA0B,CAC5B,OACA,UACA,cACsB;AACtB,iBAAWC,SAAQ,OAAO;AACtB,YAAI,CAACA,MAAK,gBAAgB,CAACA,MAAK,aAAa,CAACA,MAAK,UAAU;AACzD;AAAA,QACJ;AAEA,mBAAW,YAAY,CAAC,CAACA,MAAK;AAC9B,oBAAY,aAAa,CAACA,MAAK;AAC/B,YAAI,YAAY,WAAW;AAEvB,iBAAO;AAAA,QACX;AACA,cAAM,gBAAgB,wBAAwBA,MAAK,UAAU,UAAU,SAAS;AAChF,YAAI,kBAAkB,QAAW;AAC7B,iBAAO;AAAA,QACX,WAAW,eAAe;AACtB,qBAAW;AAAA,QACf,OAAO;AACH,sBAAY;AAAA,QAChB;AAAA,MACJ;AACA,aAAO,YAAY,YAAY,SAAY;AAAA,IAC/C;AAEA,UAAM,OAAO,KAAK,iBAAiB;AACnC,SAAK,WAAW,wBAAwB,KAAK,UAAW,OAAO,KAAK;AAAA,EACxE;AAAA,EAEQ,mBACJ,MACA,cACA,eACA,UACO;AACP,QAAI,wBAAwB;AAC5B,QAAI,KAAK,UAAU;AACf,WAAK,SAAS,QAAQ,CAAC,UAAU;AAC7B,cAAM,cAAc,KAAK;AAAA,UACrB;AAAA,UACA,gBAAgB,cAAc,IAAI;AAAA,UAClC;AAAA,UACA;AAAA,QACJ;AACA,gCAAwB,yBAAyB;AAAA,MACrD,CAAC;AAAA,IACL;AAEA,UAAM,aAAa,gBAAgB,yBAAyB,cAAc,IAAI;AAC9E,SAAK,QAAQ,IAAI;AACjB,WAAO;AAAA,EACX;AAAA,EAEQ,gBAAgB,eAAmC;AACvD,UAAM,cAAc,CAAC,SAAiC,cAAc,IAAI,KAAK,GAAI;AAEjF,SAAK,sBAAsB,QAAQ,CAAC,SAAS,KAAK,mBAAmB,MAAM,OAAO,aAAa,WAAW,CAAC;AAAA,EAC/G;AACJ;;;AJhSO,IAAM,gBAAN,MAAoE;AAAA,EAkDvE,YAAY,QAAgC;AAhD5C,SAAiB,oBAAoB,IAAI,+BAAsC;AAkB/E,SAAQ,iBAAgC;AAGxC;AAAA,SAAQ,8BAAuC;AAG/C;AAAA,SAAQ,iBAAiD;AAMzD;AAAA,SAAQ,YAA0C,oBAAI,IAAI;AAG1D;AAAA,SAAQ,gBAAgB,oBAAI,IAAmB;AAG/C;AAAA,SAAQ,eAAe,oBAAI,IAAmB;AAU9C,SAAQ,cAAuB;AAG3B,UAAM;AAAA,MACF;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAI;AACJ,UAAM;AAAA,MACF;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAI;AAEJ,SAAK,eAAe;AACpB,SAAK,MAAM;AACX,SAAK,eAAe,OAAO;AAC3B,SAAK,YAAY,OAAO;AACxB,SAAK,aAAa,OAAO;AACzB,SAAK,YAAY,OAAO;AACxB,SAAK,sBAAsB,CAAC,CAAC,OAAO;AACpC,SAAK,YAAY,kBAAkB,CAAC,UAAU,SAAS;AACvD,SAAK,0BAA0B;AAC/B,SAAK,kBAAkB,mBAAmB;AAC1C,SAAK,gBAAgB,IAAI,2BAA2B,EAAE,YAAY,KAAK,WAAW,CAAC;AACnF,UAAM,gBAAgB,cAAe,OAAO;AAC5C,UAAM,qBAAqB,CAAC,CAAC,oBAAoB,CAAC,CAAC;AAGnD,SAAK,iBAAiB,CAAC,EAClB,uBAAuB,iBACxB,sBACC,YAAY,CAAC;AAElB,QAAI,sBAAsB,CAAC,eAAe;AACtC,WAAK,kBAAkB,KAAK,mCAAmC;AAAA,IACnE,WAAW,YAAY,CAAC,sBAAsB,CAAC,eAAe;AAC1D,WAAK,kBAAkB,CAEnB,CAAC,OAAO,MAAM,GAEd,CAAC,OAAO,MAAM,UACb,iCAAmB,QAAQ,MAAM;AAAA,IAC1C,OAAO;AACH,WAAK,kBAAkB,CAEnB,CAAC,OAAO,MAAM,GAEd,CAAC,OAAO,MAAM,MACb,cAAc,QAAQ,MAAM;AAAA,IACrC;AACA,SAAK,gBAAiB,iBAAyB;AAC/C,SAAK,gBAAgB,CAAC,CAAC;AACvB,UAAM,cAAc,IAAI,IAAI,aAAa;AACzC,UAAM,uBAAuB,IAAI,IAAI,sBAAsB;AAE3D,QAAI,SAAS,QAAQ,MAAM,cAAc;AACrC,WAAK,4BAA4B,IAAI;AAAA,QACjC;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,QACA,CAAC,CAAC;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAEA,QAAI,UAAU,MAAM;AAChB,WAAK,aAAa;AAAA,IACtB,OAAO;AACH,WAAK,aAAa,MAAM,QAAQ,MAAM,IAChC,wBACA;AAEN,WAAK,iBAAiB;AAAA,IAC1B;AAEA,SAAK,oBAAoB,WACnB,IAAI;AAAA,MACA,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACA,oBAAoB;AAAA,IACxB,IACC,IAAI;AAAA,MACD;AAAA,MACA;AAAA,MACA,KAAK;AAAA,MACL;AAAA,IACJ;AAEN,SAAK,gBAAgB,EAAE,KAAK,CAAC,gBAAgB,KAAK,oBAAoB,eAAe,CAAC,CAAC,CAAC;AAAA,EAC5F;AAAA,EAEO,iBACH,WACA,UACA,OACI;AACJ,SAAK,kBAAkB,iBAAiB,WAAW,UAAU,KAAK;AAAA,EACtE;AAAA,EAEO,oBACH,WACA,UACA,OACI;AACJ,SAAK,kBAAkB,oBAAoB,WAAW,UAAU,KAAK;AAAA,EACzE;AAAA,EAEO,qBAAqB,cAAwD;AAChF,WAAO,IAAI,uBAAgB,CAAC,YAAY;AACpC,YAAM,EAAE,QAAQ,eAAe,gBAAgB,IAAI;AAEnD,YAAM,wBAAwB,KAAK;AACnC,YAAM,yBAAyB,KAAK;AAEpC,WAAK,eAAe;AACpB,WAAK,YAAY,kBAAkB,CAAC,UAAU,SAAS;AAEvD,WAAK,kBAAkB,mBAAmB;AAC1C,WAAK,iBAAiB,UAAU;AAGhC,UAAI,KAAK,mBAAmB,yBAAyB,KAAK,oBAAoB,wBAAwB;AAClG,YAAI,CAAC,UAAU,OAAO,WAAW,GAAG;AAChC,eAAK,aAAa;AAClB,eAAK,iBAAiB;AAAA,QAC1B,OAAO;AACH,eAAK,aAAa,MAAM,QAAQ,MAAM,IAChC,wBACA;AAAA,QACV;AAEA,cAAM,eAAe,KAAK,SAAS;AACnC,aAAK,gBAAgB,EAAE,KAAK,MAAM;AAC9B,eAAK,SAAS,YAAY,EAAE,KAAK,MAAM,QAAQ,CAAC;AAAA,QACpD,CAAC;AAAA,MACL,OAAO;AACH,gBAAQ;AAAA,MACZ;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,gBAAiC;AACpC,WAAO,IAAI,uBAAgB,CAAC,YAAY;AAEpC,WAAK,iBAAiB,KAAK,MAAM;AAC7B,cAAM,eAAe,KAAK,SAAS;AAEnC,aAAK,gBAAgB;AAGrB,aAAK,SAAS,YAAY,EAAE,KAAK,MAAM,QAAQ,CAAC;AAAA,MACpD,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,eAAe,aAA4C;AAC9D,WAAO,IAAI,uBAAgB,CAAC,YAAY;AAEpC,WAAK,iBAAiB,KAAK,MAAM;AAC7B,aAAK,aAAa;AAClB,aAAK,iBAAiB;AACtB,aAAK,cAAc,EAAE,KAAK,MAAM,QAAQ,CAAC;AAAA,MAC7C,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAAA;AAAA,EAGO,+BAAmD;AACtD,QAAI,KAAK,kBAAkB,GAAG;AAC1B,aAAO,KAAK,iBAAiB,KAAK,CAAC,SAAS;AACxC,aAAK,oBAAoB,QAAQ,CAAC,GAAG,aAAa;AAClD,eAAO;AAAA,MACX,CAAC;AAAA,IACL;AACA,WAAO,uBAAU,QAAQ,KAAK;AAAA,EAClC;AAAA,EAEO,gBAAyB;AAC5B,WAAO,KAAK;AAAA,EAChB;AAAA,EAEQ,kBAAgD;AACpD,SAAK,mBAAmB,IAAI,uBAA6B,CAAC,YAAY;AAClE,cAAQ,KAAK,YAAY;AAAA,QACrB,KAAK;AACD,eAAK,uBAAuB,KAAK,EAAE,KAAK,CAAC,WAAW,QAAQ,KAAK,iBAAiB,MAAM,CAAC,CAAC;AAE1F;AAAA,QACJ,KAAK,uBAAwC;AACzC;AAAA,YACI,KAAK;AAAA,cACD,KAAK,aAAa,KAAK,uBAAuB,KAAK,cAA8B,CAAC;AAAA,YACtF;AAAA,UACJ;AAEA;AAAA,QACJ;AAAA,QAEA,KAAK,2BAA4C;AAC7C,eAAK,aAAa,IAAI;AAEtB,gBAAM,WAAW,KAAK;AACtB,gBAAM,EAAE,QAAQ,OAAO,IAAI,KAAK;AAChC,gBAAM,SAA4C,KAAK,IAAI,oBAAoB;AAAA,YAC3E,SAAS,CAAC,WAAW;AACjB,mBAAK,aAAa,KAAK;AAEvB,sBAAQ,KAAK,iBAAiB,KAAK,aAAa,KAAK,uBAAuB,MAAM,CAAC,CAAC,CAAC;AAAA,YACzF;AAAA,YACA;AAAA,YACA;AAAA,UACJ,CAAC;AAED,iBAAO,WAAW,MAAM,SAAS,MAAM,GAAG,CAAC;AAE3C;AAAA,QACJ;AAAA,QAEA;AACI,gBAAM,IAAI,MAAM,yBAAyB;AAAA,MACjD;AAAA,IACJ,CAAC;AAED,SAAK,iBACA,KAAK,CAAC,WAAW,KAAK,oBAAoB,UAAU,CAAC,GAAG,QAAQ,CAAC,EACjE,KAAK,MAAO,KAAK,cAAc,IAAK;AAEzC,WAAO,KAAK;AAAA,EAChB;AAAA,EAEQ,iBAAiB,QAAgE;AACrF,UAAM,aAAa,KAAK,SAAS,MAAM;AAEvC,SAAK,YAAY,UAAU,oBAAI,IAAI;AAEnC,WAAO;AAAA,EACX;AAAA,EAEQ,uBAAuB,QAAoC;AAC/D,QAAI,KAAK,uBAAuB,QAAQ,QAAQ;AAC5C,YAAM,aAAa,OAAO,CAAC;AAC3B,UAAI,cAAc,OAAO,eAAe,YAAY,OAAO,eAAe,YAAY;AAClF,cAAM,WAAW,KAAK,UAAU,UAAU;AAC1C,YAAI,YAAY,MAAM;AAClB;AAAA,YACI;AAAA,UACJ;AAAA,QACJ,OAAO;AACH;AAAA,YACI;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAEO,cAAc,OAAiC;AAClD,SAAK,aAAa;AAAA,EACtB;AAAA,EAEO,gBAA0C;AAC7C,WAAO,KAAK;AAAA,EAChB;AAAA,EAEO,eAAe,KAA6B;AAC/C,WAAO,KAAK,cAAc,IAAI,GAAG;AAAA,EACrC;AAAA,EAEQ,oBAA6B;AACjC,WAAO,KAAK,eAAe;AAAA,EAC/B;AAAA,EAEQ,oBAAoB,SAA4B,QAAwC;AAC5F,UAAM,gBAAgB,KAAK,kBAAkB,IAAI,KAAK,SAAS,KAAK,kBAAkB,IAAI,CAAC,IAAI;AAE/F,SAAK,gBAAgB,IAAI,IAAI,aAAa;AAC1C,SAAK,kBAAkB,cAAc,EAAE,MAAM,yBAAyB,CAAC;AAEvE,SAAK,sBAAsB,QAAQ,OAAO;AAAA,EAC9C;AAAA,EAEO,SAAS,gBAAwE;AACpF,UAAM,SAAS,kBAAkB,oBAAI,IAAI;AAEzC,QAAI,KAAK,iBAAiB;AACtB,aAAO,MAAM,KAAK,OAAO,KAAK,CAAC;AAAA,IACnC;AAEA,QAAI;AACJ,QAAI,KAAK,gBAAgB;AACrB,mBAAa,MAAM,KAAK,OAAO,QAAQ,CAAC,EACnC,KAAK,KAAK,eAAe,EACzB,IAAI,CAAC,CAAC,GAAG,MAAM,GAAG;AAAA,IAC3B,OAAO;AACH,mBAAa,MAAM,KAAK,OAAO,KAAK,CAAC,EAAE,KAAK,KAAK,aAAa;AAAA,IAClE;AAEA,QAAI,KAAK,aAAa,aAAa,OAAO,IAAI,IAAI,GAAG;AAEjD,mBAAa,WAAW,OAAO,CAAC,MAAM,KAAK,IAAI;AAC/C,iBAAW,KAAK,IAAI;AAAA,IACxB;AAEA,WAAO;AAAA,EACX;AAAA,EAEQ,2BAA2B,0BAA0B,OAGpD;AACL,QAAI,CAAC,KAAK,2BAA2B;AACjC;AAAA,QACI;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAEA,UAAM,YAAY,CAAC,SAAkB,CAAC,2BAA2B,KAAK,wBAAwB,IAAI;AAElG,UAAM,iBAAiB,2BAA2B,CAAC,KAAK,gBAAgB,KAAK,YAAY;AAEzF,WAAO,EAAE,WAAW,eAAe;AAAA,EACvC;AAAA,EAEQ,kBAAkB,0BAA0B,OAA4C;AAC5F,UAAM,SAAS,KAAK,2BAA2B,uBAAuB;AACtE,QAAI,CAAC,QAAQ;AACT,aAAO;AAAA,IACX;AAEA,WAAO,KAAK,0BAA0B,oBAAoB,OAAO,WAAW,OAAO,cAAc;AAAA,EACrG;AAAA,EAEQ,uBAAuB,0BAA0B,OAAuD;AAC5G,UAAM,SAAS,KAAK,2BAA2B,uBAAuB;AACtE,QAAI,CAAC,QAAQ;AACT,aAAO,uBAAU,QAAQ,IAAI;AAAA,IACjC;AAEA,WAAO,KAAK,0BAA0B,yBAAyB,OAAO,WAAW,OAAO,cAAc;AAAA,EAC1G;AAAA;AAAA,EAGO,cAAc,OAAgC;AACjD,gBAAQ,wBAAU,KAAK;AAEvB,QAAI,KAAK,mBAAmB,OAAO;AAE/B,aAAO;AAAA,IACX;AAEA,QAAI,UAAU,MAAM;AAEhB,WAAK,+BAA+B,KAAK;AAAA,IAC7C;AAEA,SAAK,iBAAiB;AACtB,SAAK,sBAAsB,YAAY;AAEvC,WAAO;AAAA,EACX;AAAA,EAEO,gBAA+B;AAClC,WAAO,KAAK;AAAA,EAChB;AAAA,EAEO,sBACH,QACA,SACI;AACJ,QAAI,WAAW,aAAa;AACxB,WAAK,kBAAkB,QAAQ;AAC/B;AAAA,IACJ;AAGA,QAAI,KAAK,kBAAkB,MAAM;AAC7B,WAAK,kBAAkB;AAAA,QACnB,CAAC,QAAuB,KAAK,SAAS,GAAG;AAAA,QACzC;AAAA,QACA,KAAK;AAAA,QACL;AAAA,MACJ;AACA;AAAA,IACJ;AAIA,UAAM,sBAAsB,KAAK,WAAW,KAAK,UAAU,KAAK,cAAc,KAAK,EAAE;AAErF,UAAM,gBAAgB,CAAC,iBACnB,gBAAgB,QAAQ,KAAK,WAAW,YAAY,EAAE,QAAQ,mBAAmB,KAAK;AAE1F,UAAM,oBAAoB,CAAC,CAAC,KAAK,aAAa,aAAa,cAAc,KAAK,UAAU,QAAQ,CAAC;AAEjG,SAAK,kBAAkB;AAAA,MACnB,CAAC,QAAuB,KAAK,SAAS,GAAG;AAAA,MACzC;AAAA,MACA,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EAEO,yBAAiC;AACpC,WAAO,KAAK,kBAAkB,uBAAuB;AAAA,EACzD;AAAA,EAEO,iBAAiB,OAAuD;AAC3E,WAAO,KAAK,kBAAkB,iBAAiB,KAAK;AAAA,EACxD;AAAA,EAEO,mBAAoD;AACvD,WAAO,KAAK,kBAAkB,iBAAiB;AAAA,EACnD;AAAA,EAEO,8BAA+D;AAClE,WAAO,KAAK,kBAAkB,4BAA4B;AAAA,EAC9D;AAAA,EAEO,gBAAyB;AAC5B,WAAO,KAAK,aAAa,2BACnB,KAAK,aAAa,OAAO,IACzB,KAAK,UAAU,SAAS,KAAK,aAAa;AAAA,EACpD;AAAA,EAEO,UAA+B;AAClC,WAAO,MAAM,KAAK,KAAK,UAAU,KAAK,CAAC;AAAA,EAC3C;AAAA,EAEO,YAA0B;AAC7B,WAAO,MAAM,KAAK,KAAK,UAAU,OAAO,CAAC;AAAA,EAC7C;AAAA,EAEO,SAAS,KAA8B;AAC1C,WAAO,KAAK,UAAU,IAAI,GAAG;AAAA,EACjC;AAAA,EAEO,+BAA+B,OAAgB;AAClD,SAAK,8BAA8B;AAAA,EACvC;AAAA,EAEQ,uBAAgC;AACpC,WAAO,KAAK,aAAa,cAAc;AAAA,EAC3C;AAAA,EAEO,uCAAgD;AACnD,WAAO,KAAK,qBAAqB,KAAK,KAAK;AAAA,EAC/C;AAAA,EAEO,kCAA2C;AAI9C,WAAO,KAAK,qBAAqB,SAAK,sBAAQ,KAAK,cAAc,KAAK,KAAK,eAAe,SAAS;AAAA,EACvG;AAAA,EAEO,4BAA4B,yBAAyB,OAAa;AACrE,QAAI,KAAK,kBAAkB,MAAM;AAE7B,WAAK,eAAe,IAAI,IAAI,KAAK,UAAU,KAAK,CAAC;AAAA,IACrD,OAAO;AAEH,UAAI,wBAAwB;AACxB,aAAK,aAAa,MAAM;AAAA,MAC5B;AAEA,WAAK,kBAAkB,oBAAoB,CAAC,QAAQ,KAAK,aAAa,IAAI,GAAG,CAAC;AAAA,IAClF;AAAA,EACJ;AAAA,EAEO,gCAAsC;AACzC,QAAI,KAAK,kBAAkB,MAAM;AAE7B,WAAK,aAAa,MAAM;AAAA,IAC5B,OAAO;AAEH,WAAK,kBAAkB,oBAAoB,CAAC,QAAQ,KAAK,aAAa,OAAO,GAAG,CAAC;AAAA,IACrF;AAAA,EACJ;AAAA,EAEO,UAAU,KAA0B;AACvC,SAAK,aAAa,IAAI,GAAG;AAAA,EAC7B;AAAA,EAEO,YAAY,KAA0B;AACzC,QAAI,KAAK,aAAa,aAAa,KAAK,4BAA4B,GAAG;AAEnE,WAAK,oBAAoB,KAAK,kBAAkB,iBAAiB,CAAC;AAAA,IACtE;AAEA,SAAK,aAAa,OAAO,GAAG;AAAA,EAChC;AAAA,EAEO,cAAc,KAA6B;AAC9C,WAAO,KAAK,aAAa,IAAI,GAAG;AAAA,EACpC;AAAA,EAEO,8BAAuC;AAC1C,WAAO,CAAC,KAAK,kBAAkB,iBAAiB,CAAC,OAAO,CAAC,KAAK,cAAc,EAAE,CAAC;AAAA,EACnF;AAAA,EAEO,2BAAoC;AACvC,WAAO,CAAC,KAAK,kBAAkB,iBAAiB,CAAC,OAAO,KAAK,cAAc,EAAE,CAAC;AAAA,EAClF;AAAA,EAEO,WAAuC;AAC1C,QAAI,CAAC,KAAK,cAAc,GAAG;AACvB,aAAO;AAAA,IACX;AAKA,UAAM,gBAAgB,KAAK,qCAAqC,IAC1D,KAAK,cAAc,iBAAiB,IACpC;AAEN,QAAI,iBAAiB,cAAc,OAAO,GAAG;AACzC,UAAI,KAAK,cAAc;AAInB,cAAM,YAAY,oBAAI,IAAmB;AAAA,UACrC,GAAG,MAAM,KAAK,aAAa;AAAA,UAC3B,GAAG,MAAM,KAAK,KAAK,YAAY,EAAE,OAAO,CAAC,QAAQ,CAAC,cAAc,IAAI,GAAG,CAAC;AAAA,QAC5E,CAAC;AACD,eAAO,MAAM,KAAK,SAAS;AAAA,MAC/B;AAEA,aAAO,MAAM,KAAK,aAAa;AAAA,IACnC;AAGA,WAAO,MAAM,KAAK,KAAK,YAAY;AAAA,EACvC;AAAA,EAEO,SAAS,OAAoD;AAChE,WAAO,KAAK,iBAAiB,KAAK,CAAC,SAAS;AACxC,UAAI,SAAS,MAAM;AACf,aAAK,oBAAoB,QAAQ,CAAC,CAAC;AAAA,MACvC,OAAO;AAEH,aAAK,aAAa,MAAM;AAExB,cAAM,wBAA2D,oBAAI,IAAI;AACzE,aAAK,UAAU,QAAQ,CAAC,QAAQ,QAAQ;AACpC,gCAAsB,IAAI,KAAK,WAAW,GAAG,GAAG,GAAG;AAAA,QACvD,CAAC;AAED,cAAM,QAAQ,CAAC,mBAAmB;AAC9B,gBAAM,eAAe,KAAK,eAAW,wBAAU,cAAc,CAAC;AAC9D,gBAAM,yBAAyB,sBAAsB,IAAI,YAAY;AACrE,cAAI,2BAA2B,QAAW;AACtC,iBAAK,UAAU,sBAAsB;AAAA,UACzC;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEQ,aAAa,QAA2D;AAC5E,UAAM,eAA6C,oBAAI,IAAI;AAC3D,UAAM,gBAAoC,oBAAI,IAAI;AAClD,KAAC,UAAU,CAAC,GAAG,QAAQ,CAAC,UAAU;AAC9B,YAAM,iBAAa,wBAAU,KAAK;AAClC,YAAM,iBAAiB,KAAK,UAAU,UAAU;AAChD,YAAM,eAAe,KAAK,WAAW,cAAc;AACnD,UAAI,CAAC,cAAc,IAAI,YAAY,GAAG;AAClC,sBAAc,IAAI,YAAY;AAC9B,qBAAa,IAAI,gBAAgB,UAAU;AAAA,MAC/C;AAAA,IACJ,CAAC;AAED,WAAO;AAAA,EACX;AAAA,EAEQ,oBAAoB,MAA+B;AACvD,QAAI,KAAK,aAAa,0BAA0B;AAC5C,WAAK,aAAa,MAAM;AAAA,IAC5B,OAAO;AACH,WAAK,eAAe,IAAI,IAAI,IAAI;AAAA,IACpC;AAAA,EACJ;AAAA,EAEO,YAAqB;AACxB,WAAO,KAAK,kBAAkB,UAAU;AAAA,EAC5C;AAAA,EAEQ,qCAGI;AACR,WAAO,CAEH,CAAC,OAAO,MAAM,GAEd,CAAC,OAAO,MAAM,MACb;AACD,UAAI,UAAU,MAAM;AAChB,eAAO,UAAU,OAAO,IAAI;AAAA,MAChC,WAAW,UAAU,MAAM;AACvB,eAAO;AAAA,MACX;AACA,eAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,YAAI,KAAK,OAAO,QAAQ;AACpB,iBAAO;AAAA,QACX;AACA,cAAM,WAAO,iCAAmB,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;AACpD,YAAI,SAAS,GAAG;AACZ,iBAAO;AAAA,QACX;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEO,oBAAoB,kBAAmD;AAC1E,SAAK,cAAc,iBAAiB,gBAAgB;AAAA,EACxD;AAAA,EAEO,sBAAsB,iBAAsC;AAC/D,SAAK,cAAc,gBAAgB,eAAe;AAAA,EACtD;AAAA,EAEO,sBAAiD;AACpD,WAAO,KAAK,cAAc,iBAAiB;AAAA,EAC/C;AAAA,EAEO,mCAA8D;AACjE,WAAO,KAAK,cAAc,8BAA8B;AAAA,EAC5D;AAAA,EAEO,mBAAmB,iBAAyC;AAC/D,WAAO,KAAK,cAAc,6BAA6B,eAAe;AAAA,EAC1E;AAAA,EAEO,wBAAiC;AACpC,WAAO,CAAC,KAAK,cAAc,uBAAuB;AAAA,EACtD;AACJ;;;AL5tBO,IAAM,YAAN,cAAoC,4BAA2D;AAAA,EAgClG,cAAc;AACV,UAAM,WAAW;AArBrB,SAAiB,cAAgC;AACjD,SAAiB,iBAA8B;AAC/C,SAAiB,iBAA8B;AAC/C,SAAiB,mBAAgC;AAEjD,SAAQ,aAAsC;AAC9C,SAAQ,kBAAkD;AAC1D,SAAQ,cAAuC;AAC/C,SAAQ,gBAAyB;AACjC,SAAQ,mBAAmB;AAE3B,SAAQ,mBAAmB;AAC3B,SAAQ,yBAAyB;AACjC,SAAQ,2BAA2B;AAKnC,SAAiB,uBAAuB,IAAI,wBAAwB;AAsOpE,SAAQ,gCAAgC,CAAC,cAAuC;AAC5E,WAAK,kBAAkB;AACvB,WAAK,gBAAgB,CAAC,CAAC,UAAU;AACjC,YAAM,aAAa,UAAU,cAAc,UAAU,OAAO;AAC5D,WAAK,kBAAkB,UAAU,gBAAgB,YAAY,CAAC,CAAC,UAAU,UAAU,CAAC,CAAC,UAAU,OAAO,OAAO;AAC7G,YAAM,aAAa,UAAU,OAAO,MAAM,EAAE,WAAW,iCAAoB;AAC3E,WAAK,mBAAmB,KAAK,IAAI,IAAI,UAAU,KAAK,CAAC,CAAC,UAAU,YAAY;AAC5E,WAAK,cAAc,KAAK,IAAI,IAAI,aAAa;AAC7C,WAAK,mBACD,CAAC,CAAC,KAAK,gBAAgB,mBAAmB,EAAE,UAAU,CAAC,CAAC,UAAU,YAAY;AAClF,WAAK,YAAY,KAAK,kBAAkB,YAAY,KAAK,oBAAoB,KAAK,gBAAgB;AAAA,IACtG;AAAA,EA7OA;AAAA,EA7BgB,UAAU,OAAuB;AAC7C,UAAM,UAAU,KAAK;AACrB,SAAK,kBAAkB,MAAM;AAC7B,SAAK,eAAe,MAAM;AAC1B,SAAK,kBAAkB,MAAM;AAAA,EACjC;AAAA,EA0BgB,gBAAgB;AAC5B,UAAM,cAAc;AAAA,EACxB;AAAA;AAAA;AAAA,EAIU,qBAA2B;AAAA,EAAC;AAAA,EAE5B,qBAA6B;AACnC;AAAA;AAAA,MAAkB;AAAA;AAAA,qFAE2D,KAAK,sBAAsB,YAAY,CAAC;AAAA;AAAA,0FAEnC,KAAK,sBAAsB,WAAW,CAAC;AAAA;AAAA;AAAA;AAAA,EAG7H;AAAA,EACU,kBAAuC;AAC7C,WAAO,CAAC,qCAAwB;AAAA,EACpC;AAAA,EAEmB,cAAc,GAAwB;AACrD,UAAM,cAAc,CAAC;AAErB,QAAI,EAAE,kBAAkB;AACpB;AAAA,IACJ;AAEA,YAAQ,EAAE,KAAK;AAAA,MACX,KAAK,qBAAQ;AACT,aAAK,eAAe,CAAC;AACrB;AAAA,MACJ,KAAK,qBAAQ;AACT,aAAK,eAAe,CAAC;AACrB;AAAA,MACJ,KAAK,qBAAQ;AACT,aAAK,cAAc,CAAC;AACpB;AAAA,MACJ,KAAK,qBAAQ;AACT,aAAK,eAAe,CAAC;AACrB;AAAA,IACR;AAAA,EACJ;AAAA,EAEQ,eAAe,GAAwB;AAC3C,SAAK,wBAAwB,CAAC,GAAG,eAAe;AAAA,EACpD;AAAA,EAEQ,eAAe,GAAwB;AAC3C,QAAI,CAAC,KAAK,iBAAiB;AACvB;AAAA,IACJ;AAEA,UAAM,EAAE,WAAW,SAAS,IAAI,KAAK,mBAAmB,CAAC;AACzD,QAAI,CAAC,aAAa,CAAC,CAAC,UAAU;AAC1B;AAAA,IACJ;AAEA,MAAE,eAAe;AAGjB,SAAK,UAAU,OAAO,OAAO,CAAC;AAE9B,QAAI,KAAK,gBAAgB,cAAc,OAAO;AAE1C,WAAK,YAAY,gBAAgB,EAAE,OAAO;AAAA,IAC9C;AAAA,EACJ;AAAA,EAEQ,cAAc,GAAwB;AAC1C,SAAK,wBAAwB,CAAC,GAAG,YAAY,KAAK;AAAA,EACtD;AAAA,EAEQ,eAAe,GAAwB;AAC3C,SAAK,wBAAwB,CAAC,GAAG,YAAY,IAAI;AAAA,EACrD;AAAA,EAEQ,wBAAwB,GAAoD;AAChF,QAAI,CAAC,KAAK,eAAe,SAAS,KAAK,IAAI,oBAAoB,CAAC,KAAK,CAAC,KAAK,aAAa;AACpF;AAAA,IACJ;AAEA,UAAM,cAAc,KAAK,YAAY,kBAAkB;AACvD,QAAI,eAAe,MAAM;AACrB;AAAA,IACJ;AAEA,UAAM,YAAY,KAAK,YAAY,eAAe,WAAW;AAC7D,QAAI,aAAa,MAAM;AACnB;AAAA,IACJ;AAEA,MAAE,eAAe;AAEjB,UAAM,EAAE,SAAS,IAAI,KAAK,mBAAmB,CAAC;AAC9C,QAAI,UAAU;AACV;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAEU,mBAA2B;AACjC,WAAO;AAAA,EACX;AAAA,EAEgB,SAAS,OAA+C;AACpE,QAAI,SAAS,QAAQ,KAAK,YAAY,SAAS,KAAK,MAAM;AAGtD,WAAK,cAAc,IAAI;AACvB,aAAO,uBAAU,QAAQ;AAAA,IAC7B;AACA,WAAO,MAAM,SAAS,KAAK;AAAA,EAC/B;AAAA,EAES,QAAQ,QAA0C;AACvD,SAAK,sBAAsB,MAAM;AAEjC,QAAI,CAAC,MAAM,QAAQ,MAAM,GAAG;AACxB,aAAO;AAAA,IACX;AAGA,UAAM,wBAA2D;AAAA,MAC7D;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAEA,QAAI,sBAAsB,KAAK,CAAC,UAAU,OAAO,KAAK,MAAM,KAAK,kBAAkB,KAAK,CAAC,GAAG;AACxF,aAAO;AAAA,IACX;AAEA,QAAI,KAAK,wBAAwB,MAAM,GAAG;AACtC,aAAO;AAAA,IACX;AAEA,UAAM,aAAa,MAAM;AACzB,SAAK,8BAA8B,MAAM;AACzC,SAAK,iBAAiB;AAEtB,QACI,OAAO,iBAAiB,KAAK,iBAAiB,gBAC9C,OAAO,mBAAmB,KAAK,iBAAiB,gBAClD;AACE,WAAK,2BAA2B;AAAA,IACpC;AAEA,SAAK,YAAY,qBAAqB,MAAM,EAAE,KAAK,MAAM;AACrD,UAAI,KAAK,YAAY,cAAc,GAAG;AAClC,aAAK,oBAAoB;AAAA,MAC7B;AAAA,IACJ,CAAC;AAED,WAAO;AAAA,EACX;AAAA,EAEQ,wBAAwB,QAA0C;AACtE,UAAM,EAAE,QAAQ,WAAW,IAAI;AAC/B,UAAM,EAAE,QAAQ,gBAAgB,YAAY,mBAAmB,IAAI,KAAK,mBAAmB,CAAC;AAC5F,UAAM,sBAAsB,cAAc,OAAO;AACjD,WACI,OAAO,sBAAsB,gBAAgB,qBAC7C,yBAAyB,sBAAsB,gBAAgB,eAC9D,CAAC,CAAC,KAAK,mBACJ,KAAK,gBAAgB,eAAe,OAAO,YAAsB,MAAM,uBACvE,OAAO,mBAAmB,gBAAgB;AAAA,EAEtD;AAAA,EAEQ,mBAAmB,QAAqD;AAC5E,WAAO,KAAK,aACN,KAAK,WAAW,SAAS,MAAM,EAAE,KAAK,MAAM,KAAK,2BAA2B,CAAC,IAC7E,uBAAU,QAAQ;AAAA,EAC5B;AAAA,EAEU,oBAAqC;AAC3C,SAAK,cAAc,IAAI;AAEvB,WAAO,KAAK,mBAAmB,IAAI;AAAA,EACvC;AAAA,EAEU,eAAe,OAA+C;AACpE,SAAK,cAAc,IAAI;AAEvB,UAAM,SAAS,SAAS,OAAO,OAAO,MAAM;AAC5C,WAAO,KAAK,mBAAmB,MAAM;AAAA,EACzC;AAAA,EAEO,iBAAwC;AAC3C,QAAI,CAAC,KAAK,YAAY;AAClB,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACvD;AAEA,UAAM,SAAS,KAAK,WAAW,SAAS;AAExC,QAAI,CAAC,QAAQ;AACT,aAAO;AAAA,IACX;AAEA,WAAO,EAAE,QAAQ,YAAY,KAAK,cAAc,EAAE;AAAA,EACtD;AAAA,EAEO,gBAAuB;AAC1B,WAAO;AAAA,EACX;AAAA,EAEO,gBAAyC;AAC5C,WAAO,KAAK;AAAA,EAChB;AAAA,EAEU,eAAe,GAAmB,GAA4B;AAEpE,QAAI,KAAK,QAAQ,KAAK,MAAM;AACxB,aAAO;AAAA,IACX;AAEA,WAAO,KAAK,QAAQ,KAAK,YAAQ,wBAAU,EAAE,QAAQ,EAAE,MAAM;AAAA,EACjE;AAAA,EAegB,UAAU,QAAuC;AAC7D,SAAK,sBAAsB,MAAM;AAEjC,UAAM,UAAU,MAAM;AAEtB,SAAK,8BAA8B,MAAM;AAEzC,UAAM,aAAa,OAAO,cAAc,OAAO,OAAO;AAEtD,SAAK,aAAa,IAAI,cAAc;AAAA,MAChC,cAAc;AAAA,MACd,cAAc,CAAC,YAAY,KAAK,aAAa,OAAO;AAAA,MACpD,WAAW,CAAC,QAAQ,KAAK,sBAAsB,GAAG;AAAA,MAClD,YAAY,CAAC,MAAM,KAAK,WAAW,CAAC;AAAA,MACpC,WAAW,KAAK;AAAA,MAChB,gBAAgB,KAAK;AAAA,MACrB,qBAAqB,CAAC,CAAC;AAAA,MACvB,KAAK,KAAK;AAAA,MACV,iBAAiB,KAAK;AAAA,MACtB,cAAc,KAAK;AAAA,MACnB,kBAAkB,KAAK;AAAA,MACvB,kBAAkB,KAAK;AAAA,MACvB,0BAA0B,CAAC,aAAa,KAAK,yBAAyB,QAAQ;AAAA,IAClF,CAAC;AAED,SAAK,uBAAuB;AAE5B,SAAK,gCAAgC;AAAA,EACzC;AAAA,EAEQ,oCAAoC,UAAmB;AAC3D,QAAI,CAAC,KAAK,YAAY;AAClB,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACvD;AACA,SAAK,WAAW,+BAA+B,QAAQ;AAAA,EAC3D;AAAA,EAEQ,kBACJ,wBACA,YACA,UACA,WACF;AACE,QAAI,iBAAiB;AACrB,QAAI,CAAC,gBAAgB;AACjB,UAAI,cAAc,CAAC,UAAU;AACzB,cAAM,IAAI,MAAM,sFAAsF;AAAA,MAC1G;AACA,WAAK,2BAA2B;AAEhC,UAAI,CAAC,WAAW;AACZ,yBAAiB,CAAC,eAAW,8BAAgB,OAAO,KAAK;AAAA,MAC7D;AAAA,IACJ;AACA,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EAEQ,kBACJ,YACA,oBACsE;AACtE,QAAI,sBAAsB,CAAC,YAAY;AACnC,YAAM,IAAI;AAAA,QACN;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,YAAY;AACZ,aAAO,CAAC,OAAO,OAAO,SAAS;AAC3B,cAAM,SAAS,KAAK,oBAAoB,OAAO,IAAI;AACnD,mBAAO,wBAAU,WAAY,MAAM,CAAC;AAAA,MACxC;AAAA,IACJ;AACA,WAAO,CAAC,cAAU,4BAAU,8BAAgB,KAAK,CAAC;AAAA,EACtD;AAAA,EAEO,kBAAkB,KAAmC;AACxD,QAAI,QAA2B,KAAK,WAAY,SAAS,GAAG;AAC5D,QAAI,KAAK,6BAA6B,KAAK,oBAAoB,KAAK,qBAAqB,MAAM,QAAQ,KAAK,GAAG;AAE3G,kBAAQ,oBAAM,KAAK;AAAA,IACvB;AAEA,UAAM,iBAAiB,KAAK,aAAa;AAAA,MACrC,KAAK,gBAAiB;AAAA,MACtB;AAAA,MACA;AAAA,MACA,KAAK;AAAA,MACL;AAAA,IACJ;AAEA,YACK,kBAAkB,WAAO,8BAAgB,KAAK,IAAI,mBAAmB,KAAK,sBAAsB,QAAQ;AAAA,EAEjH;AAAA,EAEQ,sBAAsB,QAAuC;AAEjE,QAAI,OAAO,cAAc,WAAW;AAChC,UAAI,CAAC,OAAO,SAAS;AACjB,eAAO,UAAU,CAAC,SAAS,QAAQ;AAAA,MACvC;AAEA,UAAI,OAAO,gBAAgB,MAAM;AAC7B,eAAO,eAAe;AAAA,MAC1B;AAAA,IACJ,WAAW,OAAO,cAAc,OAAO;AACnC,UAAI,CAAC,OAAO,SAAS;AACjB,eAAO,UAAU,CAAC,OAAO;AAAA,MAC7B;AAEA,UAAI,OAAO,8BAA8B,MAAM;AAC3C,eAAO,6BAA6B;AAAA,MACxC;AAEA,UAAI,OAAO,cAAc,MAAM;AAC3B,eAAO,aAAa;AAAA,MACxB;AAAA,IACJ;AACA,QAAI,OAAO,aAAa,OAAO,0BAA0B;AACrD,aAAO,2BAA2B;AAClC;AAAA,QACI;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEQ,kCAAwC;AAC5C,QAAI,CAAC,KAAK,sBAAsB,GAAG;AAC/B;AAAA,IACJ;AAEA,SAAK,yBAAyB;AAAA,MAC1B,kBAAkB,CAAC,UAAU;AAEzB,YAAI,KAAK,mBAAmB,MAAM,WAAW,KAAK,gBAAgB,QAAQ;AACtE,eAAK,oBAAoB;AAAA,QAC7B;AAAA,MACJ;AAAA,IACJ,CAAC;AAED,SAAK,4BAA4B,CAAC,YAAY,eAAe,sBAAsB,GAAG,MAAM;AACxF,WAAK,oBAAoB;AAAA,IAC7B,CAAC;AAAA,EACL;AAAA,EAEQ,sBAAuC;AAC3C,QAAI,CAAC,KAAK,YAAY;AAClB,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACvD;AAEA,UAAM,UAAU,KAAK,WAAW,cAAc;AAE9C,WAAO,QAAQ,KAAK,MAAM;AACtB,WAAK,2BAA2B;AAChC,WAAK,UAAU,OAAO,IAAI;AAAA,IAC9B,CAAC;AAAA,EACL;AAAA,EAEQ,aAAa,WAA0B;AAC3C,oCAAc,KAAK,gBAAgB,SAAS;AAC5C,QAAI,CAAC,WAAW;AAEZ,WAAK,yBAAyB;AAAA,IAClC;AAAA,EACJ;AAAA,EAEQ,yBAA+B;AACnC,SAAK,gBAAgB;AACrB,SAAK,eAAe;AAAA,EACxB;AAAA,EAEQ,kBAAwB;AAC5B,QAAI,CAAC,KAAK,iBAAiB;AACvB,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC/D;AACA,QAAI,CAAC,KAAK,YAAY;AAClB,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACvD;AAEA,UAAM,YAAY,KAAK,cAAc,kBAAkB;AACvD,UAAM,iBAAiB,UAAU,kBAAkB,aAAa;AAChE,UAAM,SAAS,CAAC,CAAC,KAAK,gBAAgB;AAEtC,UAAM,cAAe,KAAK,cAAc,KAAK;AAAA,MACzC,IAAI,yBAAY;AAAA,QACZ,eAAe;AAAA,QACf,UAAU,SAAS,SAAS;AAAA,QAC5B,UAAU;AAAA,MACd,CAAC;AAAA,IACL;AACA,UAAM,iBAAiB,KAAK;AAE5B,QAAI,QAAQ;AACR,qBAAe,UAAU,IAAI,yBAAyB;AAAA,IAC1D;AAEA,QAAI,gBAAgB;AAChB,qBAAe,YAAY,YAAY,OAAO,CAAC;AAAA,IACnD;AAEA,UAAM,EAAE,WAAW,IAAI,KAAK;AAE5B,QAAI,cAAc,MAAM;AACpB,kBAAY,aAAa,UAAU;AAAA,IACvC;AAEA,UAAM,mBAAmB,CAAC,MAA8C,oBACpE,KAAK,kBAAkB,MAAM,QAAQ,eAAe;AACxD,gBAAY,oBAAoB,gBAAgB;AAEhD,UAAM,mBAAmB,CACrB,MACA,cACC,KAAK,kBAAkB,MAAM,SAAS;AAC3C,gBAAY,oBAAoB,gBAAgB;AAEhD,QAAI;AAEJ,QAAI,KAAK,gBAAgB,mBAAmB;AACxC,cAAQ,IAAI,aAAa,KAAK,UAAU;AAAA,IAC5C,OAAO;AACH,cAAQ,IAAI,0BAA0B,KAAK,YAAY,MAAM,KAAK,oBAAoB,CAAC;AAAA,IAC3F;AACA,QAAI,QAAQ;AACR,cAAQ,IAAI,iBAAiB,KAAK;AAAA,IACtC;AAEA,gBAAY,SAAS,KAAK;AAAA,EAC9B;AAAA,EAEQ,oBAA4B;AAChC,QAAI,CAAC,KAAK,iBAAiB;AACvB,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC/D;AACA,QAAI,CAAC,KAAK,YAAY;AAClB,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACvD;AAEA,UAAM,MACF,KAAK,WAAW,cAAc,KAAK,QAAQ,CAAC,KAAK,gBAAgB,YAC3D,cACA;AAEV,WAAO,KAAK,sBAAsB,GAAG;AAAA,EACzC;AAAA,EAEQ,+BAAuC;AAC3C,QAAI,CAAC,KAAK,iBAAiB;AACvB,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC/D;AACA,QAAI,CAAC,KAAK,YAAY;AAClB,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACvD;AAEA,WAAO,KAAK,sBAAsB,6BAA6B;AAAA,EACnE;AAAA,EAEQ,kBACJ,MACA,QACA,cACoC;AACpC,QAAI,CAAC,KAAK,iBAAiB;AACvB,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC/D;AACA,QAAI,CAAC,KAAK,YAAY;AAClB,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACvD;AAEA,UAAM,cAAc,KAAK,WAAW,UAAU;AAC9C,UAAM,EAAE,YAAY,WAAW,IAAI,KAAK,mBAAmB,IAAI;AAE/D,UAAM,EAAE,OAAO,OAAO,SAAS,6BAA6B,kBAAkB,iBAAiB,IAC3F,KAAK,yBAAyB,IAAI;AAEtC,UAAM,aAAyD;AAAA,MAC3D;AAAA,MACA;AAAA,MACA,QAAQ,KAAK;AAAA,MACb,WAAW,CAAC,iBAAsB,KAAK,sBAAsB,YAAY;AAAA,MACzE,gBAAgB,KAAK;AAAA,MACrB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AACA,UAAM,WAAW,KAAK,WAAW,IAAI,kBAAqC,UAAU,CAAC;AAErF,aAAS,iBAAiB,oBAAoB,gBAAuB;AACrE,QAAI,kBAAkB;AAClB,eAAS,iBAAiB,mBAAmB,gBAAuB;AAAA,IACxE;AAEA,WAAO;AAAA,EACX;AAAA,EAEQ,yBAAyB,MAO/B;AACE,QAAI,CAAC,KAAK,iBAAiB;AACvB,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC/D;AACA,QAAI,CAAC,KAAK,YAAY;AAClB,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACvD;AAEA,UAAM,cAAc,KAAK,WAAW,UAAU;AAG9C,QAAI,KAAK,QAAQ,sBAAsB,YAAY;AAC/C,aAAO;AAAA,QACH,OAAO,MAAM,KAAK,kBAAkB;AAAA,QACpC,SAAS;AAAA,QACT,OAAO,KAAK;AAAA,QACZ,6BAA6B;AAAA,QAC7B,kBAAkB,CAAC,MAA8C,KAAK,YAAY,EAAE,UAAU;AAAA,QAC9F,kBAAkB,CAAC,MACf,KAAK,YAAY,EAAE,MAAM,EAAE,UAAU;AAAA,MAC7C;AAAA,IACJ;AAGA,QAAI,KAAK,QAAQ,sBAAsB,yBAAyB;AAC5D,aAAO;AAAA,QACH,OAAO,MAAM,KAAK,6BAA6B;AAAA,QAC/C,OAAO,KAAK;AAAA,QACZ,SAAS;AAAA,QACT,6BAA6B;AAAA,QAC7B,kBAAkB,CAAC,MAA8C;AAC7D,eAAK,oCAAoC,EAAE,UAAU;AAAA,QACzD;AAAA,MACJ;AAAA,IACJ;AAGA,QAAI,KAAK,UAAU;AACf,aAAO;AAAA,QACH,OACI,KAAK,gBAAgB,oBAAoB,KAAK,SAAS,KAAK,OAAO,KAAK,cAAc,KACtF,KAAK;AAAA,QACT,OAAO,KAAK;AAAA,QACZ,SAAS;AAAA,QACT,kBAAkB,CAAC,MACf,KAAK,oBAAoB,EAAE,MAAM,EAAE,UAAU;AAAA,QACjD,kBAAkB,CAAC,MACf,KAAK,kBAAkB,EAAE,MAAM,EAAE,UAAU;AAAA,MACnD;AAAA,IACJ;AAGA,WAAO;AAAA,MACH,OACI,KAAK,gBAAgB,oBAAoB,KAAK,SAAS,KAAK,OAAO,KAAK,cAAc,KAAK,KAAK;AAAA,MACpG,OAAO,KAAK;AAAA,MACZ,kBAAkB,CAAC,MACf,KAAK,eAAe,EAAE,KAAK,KAAM,EAAE,UAAU;AAAA,IACrD;AAAA,EACJ;AAAA,EAEQ,yBAAyB,MAO/B;AACE,QAAI,CAAC,KAAK,iBAAiB;AACvB,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC/D;AACA,QAAI,CAAC,KAAK,YAAY;AAClB,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACvD;AAGA,QAAI,KAAK,yBAAyB,IAAI,GAAG;AACrC,aAAO,KAAK,yBAAyB,IAAI;AAAA,IAC7C;AAGA,QAAI,SAAS,sBAAsB,YAAY;AAC3C,aAAO;AAAA,QACH,OAAO,MAAM,KAAK,kBAAkB;AAAA,QACpC,kBAAkB,CAAC,MAAsD,KAAK,YAAY,EAAE,UAAU;AAAA,MAC1G;AAAA,IACJ;AAGA,QAAI,SAAS,sBAAsB,yBAAyB;AACxD,aAAO;AAAA,QACH,OAAO,MAAM,KAAK,6BAA6B;AAAA,QAC/C,kBAAkB,CAAC,MAA6D;AAC5E,eAAK,oCAAoC,EAAE,UAAU;AAAA,QACzD;AAAA,MACJ;AAAA,IACJ;AAGA,WAAO;AAAA,MACH,OAAO,KAAK,WAAW,SAAS,IAAI;AAAA,MACpC,kBAAkB,CAAC,MACf,KAAK,eAAe,EAAE,MAAM,EAAE,UAAU;AAAA,IAChD;AAAA,EACJ;AAAA,EAEQ,kBACJ,MACA,WACI;AACJ,UAAM,EAAE,YAAY,WAAW,IAAI,KAAK,mBAAmB,IAAI;AAC/D,cAAU,QAAQ,MAAM,YAAY,UAAU;AAAA,EAClD;AAAA,EAEQ,mBAAmB,MAGzB;AACE,QAAI;AACJ,QAAI;AACJ,QAAI,KAAK,yBAAyB,IAAI,GAAG;AACrC,mBAAa,KAAK;AAClB,UAAI,KAAK,QAAQ,sBAAsB,YAAY;AAC/C,qBAAa,KAAK,oBAAoB;AAAA,MAC1C,WAAW,KAAK,QAAQ,sBAAsB,yBAAyB;AACnE,qBAAa,KAAK,WAAY,qCAAqC;AAAA,MACvE,WAAW,KAAK,UAAU;AACtB,qBAAa,KAAK,uBAAuB,IAAI;AAAA,MACjD,OAAO;AACH,qBAAa,KAAK,WAAY,cAAc,KAAK,GAAI;AAAA,MACzD;AAAA,IACJ,OAAO;AACH,UAAI,SAAS,sBAAsB,YAAY;AAC3C,qBAAa,KAAK,oBAAoB;AAAA,MAC1C,WAAW,SAAS,sBAAsB,yBAAyB;AAC/D,qBAAa,KAAK,WAAY,qCAAqC;AAAA,MACvE,OAAO;AACH,qBAAa,KAAK,WAAY,cAAc,IAAI;AAAA,MACpD;AAAA,IACJ;AACA,WAAO,EAAE,YAAY,WAAW;AAAA,EACpC;AAAA,EAEQ,yBAAyB,MAA2C;AACxE,WAAO,MAAM,YAAY;AAAA,EAC7B;AAAA,EAEQ,iBAAiB;AACrB,QAAI,CAAC,KAAK,iBAAiB;AACvB,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC/D;AACA,QAAI,CAAC,KAAK,YAAY;AAClB,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACvD;AAEA,UAAM,EAAE,aAAa,cAAc,IAAI;AACvC,UAAM,YAAY,cAAc,kBAAkB;AAElD,gBAAY,aAAa,CAAC,KAAK,gBAAgB,kBAAkB;AACjE,gBAAY,SAAS,KAAK,WAAW,cAAc,CAAC;AACpD,gBAAY,cAAc,MAAM,KAAK,kBAAkB,CAAC;AACxD,gBAAY,kBAAkB,UAAU,0BAA0B,sBAAsB,CAAC;AAEzF,SAAK,2BAA2B,YAAY,gBAAgB,GAAG;AAAA,MAC3D,SAAS,CAAC,MAAM,KAAK,oBAAoB,CAAE;AAAA,IAC/C,CAAC;AAAA,EACL;AAAA,EAEQ,mBAAmB;AACvB,QAAI,CAAC,KAAK,iBAAiB;AACvB,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC/D;AACA,QAAI,CAAC,KAAK,YAAY;AAClB,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACvD;AAEA,UAAM,EAAE,YAAY,IAAI;AAExB,QAAI,YAAY,YAAY,MAAM,CAAC,KAAK,gBAAgB,oBAAoB;AACxE,kBAAY,aAAa,CAAC,KAAK,gBAAgB,kBAAkB;AAAA,IACrE;AAEA,UAAM,kBAAkB,KAAK,WAAW,cAAc;AACtD,QAAI,YAAY,SAAS,MAAM,iBAAiB;AAC5C,kBAAY,SAAS,eAAe;AAAA,IACxC;AAAA,EACJ;AAAA;AAAA;AAAA,EAIgB,iBAAiB,QAAwC;AACrE,QAAI,CAAC,KAAK,iBAAiB;AACvB,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC/D;AAEA,UAAM,iBAAiB,MAAM;AAG7B,SAAK,eAAe;AAEpB,SAAK,mBAAmB;AAExB,UAAM,EAAE,YAAY,IAAI;AAExB,gBAAY,oBAAoB,KAAK,sBAAsB,WAAW,CAAC;AAEvE,QAAI,CAAC,UAAU,CAAC,OAAO,eAAe;AAClC,kBAAY,oBAAoB,EAAE,MAAM;AAAA,IAC5C;AAAA,EACJ;AAAA,EAEgB,mBAAyB;AACrC,UAAM,iBAAiB;AAGvB,QAAI,KAAK,iBAAiB,WAAW;AACjC,WAAK,gBAAgB;AAAA,IACzB;AACA,UAAM,eAAe,KAAK,SAAS;AACnC,QAAI,KAAK,iBAAiB,aAAa,CAAC,KAAK,eAAe,cAAe,KAAK,eAAe,CAAE,GAAG;AAChG,WAAK,qBAAqB,YAAY;AACtC,WAAK,kBAAkB;AAAA,IAC3B;AAAA,EACJ;AAAA,EAEgB,WAAW,SAA0C,OAAgB;AACjF,QAAI,CAAC,KAAK,iBAAiB;AACvB,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC/D;AACA,QAAI,CAAC,KAAK,YAAY;AAClB,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACvD;AAEA,QACI,KAAK,gBAAgB,aACrB,WAAW,oBACX,KAAK,WAAW,4BAA4B,GAC9C;AAGE,WAAK,WAAW,4BAA4B;AAAA,IAChD;AAKA,UAAM,6BACF,KAAK,WAAY,gCAAgC,KACjD,KAAK,WAAY,qCAAqC;AAC1D,QAAI,8BAA8B,CAAC,KAAK,SAAS,GAAG;AAChD,aAAO;AAAA,IACX;AAEA,UAAM,SAAS,MAAM,WAAW,MAAM;AAGtC,UAAM,eAAe,KAAK,SAAS;AAEnC,QAAI,cAAc;AACd,UAAI,CAAC,4BAA4B;AAC7B,aAAK,WAAW,oBAAoB,oBAAI,IAAI,CAAC;AAAA,MACjD;AAEA,mBAAa,OAAO,QAAQ,CAAC,QAAQ;AACjC,aAAK,WAAY,sBAAsB,GAAG;AAAA,MAC9C,CAAC;AAAA,IACL,OAAO;AACH,UAAI,CAAC,4BAA4B;AAC7B,aAAK,WAAW,oBAAoB,IAAI;AAAA,MAC5C;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAEmB,aAAa,OAAgC;AAC5D,WAAO,KAAK,mBAAmB,KAAK,gBAAgB,YAAY,SAAS,QAAQ,MAAM,OAAO,SAAS,IAAI;AAAA,EAC/G;AAAA,EAEO,eAAe,QAAwC;AAC1D,QAAI,CAAC,KAAK,mBAAmB,CAAC,KAAK,cAAc,CAAC,KAAK,WAAW,iCAAiC,GAAG;AAClG,aAAO;AAAA,IACX;AAGA,QAAI,CAAC,KAAK,WAAW,sBAAsB,GAAG;AAC1C,aAAO;AAAA,IACX;AAEA,UAAM,EAAE,MAAM,KAAK,IAAI;AACvB,QAAI,KAAK,kBAAkB;AACvB,aAAO,KAAK,0BAA0B,MAAM,IAAI;AAAA,IACpD;AACA,QAAI,KAAK,kBAAkB;AACvB,aAAO,KAAK,0BAA0B,IAAI;AAAA,IAC9C;AAEA,UAAM,QAAQ,KAAK,iBAAiB,IAAI;AAExC,QAAI,SAAS,QAAQ,MAAM,QAAQ,KAAK,GAAG;AACvC,UAAI,MAAM,WAAW,GAAG;AACpB,eAAO,KAAK,WAAY,mBAAmB,IAAI;AAAA,MACnD;AACA,aAAO,MAAM,KAAK,CAAC,MAAM,KAAK,iBAAiB,KAAK,UAAU,GAAG,IAAI,CAAC,CAAC;AAAA,IAC3E;AAEA,WAAO,KAAK,iBAAiB,KAAK,UAAU,OAAO,IAAI,CAAC;AAAA,EAC5D;AAAA,EAEQ,0BAA0B,MAAgB,MAAoB;AAClE,QAAI,KAAK,oBAAoB,QAAQ;AAEjC,aAAO;AAAA,IACX;AACA,WAAO,KAAK,iBAAiB,KAAK,UAAU,KAAK,sBAAsB,KAAK,YAAa,IAAI,CAAC,CAAQ,CAAQ;AAAA,EAClH;AAAA,EAEQ,0BAA0B,MAAyB;AACvD,UAAM,WAAW,KAAK,gBACjB,mBAAmB,EACnB,IAAI,CAAC,aAAa,KAAK,aAAa,cAAc,UAAU,IAAI,CAAC;AACtE,aAAS,KAAK,KAAK,iBAAiB,IAAI,CAAC;AACzC,WAAO,KAAK,iBAAiB,KAAK,UAAU,KAAK,sBAAsB,QAAQ,CAAQ,CAAQ;AAAA,EACnG;AAAA,EAEQ,sBAAsB,UAA4C;AACtE,QAAI,UAAU;AACV,iBAAW,SAAS,IAAI,CAAC,gBAAY,kCAAgB,wBAAU,OAAO,CAAC,CAAC;AAAA,IAC5E;AACA,QAAI,UAAU,KAAK,CAAC,YAAY,WAAW,IAAI,GAAG;AAC9C,UAAI,KAAK,IAAI,IAAI,sBAAsB,SAAK,oBAAM,QAAQ,KAAK,MAAM;AACjE,eAAO,SAAS,OAAO,CAAC,YAAY,WAAW,IAAI;AAAA,MACvD;AACA,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EAEQ,iBAAiB,KAA6B;AAClD,WAAO,KAAK,WAAY,mBAAmB,GAAG;AAAA,EAClD;AAAA,EAEQ,iBAAiB,MAAsC;AAC3D,WAAO,KAAK,gBAAiB,SAAS,IAAI;AAAA,EAC9C;AAAA,EAEQ,oBAAoB,OAA6B,OAAwB,MAAwB;AACrG,WAAO;AAAA,MACH;AAAA,MACA,QAAQ,KAAK,gBAAiB;AAAA,MAC9B,QAAQ,KAAK,gBAAiB;AAAA,MAC9B;AAAA,MACA,MAAM,MAAM;AAAA,MACZ,KAAK,KAAK,gBAAiB;AAAA,MAC3B,SAAS,KAAK,gBAAiB;AAAA,IACnC;AAAA,EACJ;AAAA,EAEgB,kBAAwB;AACpC,QAAI,CAAC,KAAK,sBAAsB,GAAG;AAC/B;AAAA,IACJ;AACA,SAAK,oBAAoB;AAAA,EAC7B;AAAA,EAEQ,wBAAiC;AACrC,QAAI,CAAC,KAAK,YAAY;AAClB,aAAO;AAAA,IACX;AACA,UAAM,aAAa,KAAK,WAAW,cAAc;AACjD,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,gBAAgB,QAA4B;AAC/C,QAAI,CAAC,KAAK,YAAY;AAClB,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACvD;AAEA,SAAK,WAAW,eAAe,MAAM,EAAE,KAAK,MAAM;AAC9C,WAAK,2BAA2B;AAChC,WAAK,YAAY;AAAA,IACrB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,oBAA0B;AAC7B,QAAI,CAAC,KAAK,YAAY;AAClB,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACvD;AAEA,SAAK,WAAW,4CAA6D;AAC7E,SAAK,oBAAoB;AAAA,EAC7B;AAAA,EAEO,sBAA4B;AAC/B,QAAI,CAAC,KAAK,YAAY;AAClB,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACvD;AAGA,QAAI,CAAC,KAAK,WAAW,cAAc,GAAG;AAClC;AAAA,IACJ;AAEA,SAAK,WAAW,cAAc,EAAE,KAAK,MAAM;AACvC,WAAK,2BAA2B;AAChC,WAAK,YAAY;AAAA,IACrB,CAAC;AAAA,EACL;AAAA,EAEO,qBAA2B;AAE9B,eAAW,MAAM;AACb,UAAI,CAAC,KAAK,QAAQ,GAAG;AACjB;AAAA,MACJ;AAEA,UAAI,CAAC,KAAK,YAAY;AAClB,cAAM,IAAI,MAAM,mCAAmC;AAAA,MACvD;AAEA,WAAK,WAAW,6BAA6B,EAAE,KAAK,CAAC,YAAY;AAC7D,YAAI,SAAS;AACT,eAAK,2BAA2B;AAChC,eAAK,kBAAkB;AAAA,QAC3B;AAAA,MACJ,CAAC;AAAA,IACL,GAAG,CAAC;AAAA,EACR;AAAA,EAEQ,oBAAoB;AACxB,QAAI,CAAC,KAAK,iBAAiB;AACvB,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC/D;AACA,QAAI,CAAC,KAAK,YAAY;AAClB,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACvD;AAEA,QAAI,CAAC,KAAK,WAAW,cAAc,KAAK,YAAY,SAAS,CAAC,GAAG;AAC7D;AAAA,IACJ;AAEA,UAAM,EAAE,4BAA4B,SAAS,IAAI,KAAK,mBAAmB,CAAC;AAC1E,QAAI,CAAC,YAAY,4BAA4B;AACzC,WAAK,yBAAyB,KAAK;AAAA,IACvC,OAAO;AACH,WAAK,8BAA8B;AAAA,IACvC;AAAA,EACJ;AAAA,EAEQ,gCAAsC;AAC1C,QAAI,CAAC,KAAK,iBAAiB;AACvB,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC/D;AACA,QAAI,CAAC,KAAK,YAAY;AAClB,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACvD;AAEA,UAAM,EAAE,WAAW,SAAS,IAAI,KAAK,mBAAmB,CAAC;AACzD,QAAI,aAAa,QAAQ,CAAC,CAAC,UAAU;AACjC,WAAK,2BAA2B;AAAA,IACpC,WAAW,KAAK,WAAW,cAAc,KAAK,MAAM;AAChD,WAAK,qBAAqB,KAAK,SAAS,CAAC;AAAA,IAC7C,OAAO;AACH,WAAK,WAAW,4BAA4B,IAAI;AAChD,WAAK,2BAA2B;AAChC,WAAK,YAAY;AAAA,IACrB;AAEA,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EAEQ,oBAA0B;AAC9B,QAAI,CAAC,KAAK,YAAY;AAClB,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACvD;AAEA,UAAM,cAAc,KAAK,WAAW,cAAc,KAAK,QAAQ,KAAK,WAAW,uBAAuB,IAAI;AAE1G,oCAAc,KAAK,kBAAkB,WAAW;AAChD,oCAAc,KAAK,gBAAgB,CAAC,WAAW;AAAA,EACnD;AAAA,EAEQ,kBAAwB;AAC5B,SAAK,YAAY,SAAS,MAAM,IAAI;AACpC,SAAK,YAAY,cAAc,IAAI;AAAA,EACvC;AAAA,EAEmB,qBACf,cACA,oBACI;AAEJ,SAAK,mBAAmB,gBAAgB,OAAO,OAAO,aAAa,MAAM,EAAE,KAAK,MAAM;AAClF,WAAK,YAAY,OAAO,SAAS;AAEjC,2BAAqB;AAAA,IACzB,CAAC;AAAA,EACL;AAAA,EAEmB,gBAAgB,GAAgB;AAC/C,SAAK,cAAc,IAAI;AACvB,UAAM,gBAAgB,CAAC;AAAA,EAC3B;AAAA,EAEQ,oBAAoB,GAAwB;AAChD,UAAM,EAAE,WAAW,SAAS,IAAI,KAAK,mBAAmB,CAAC;AACzD,QAAI,EAAE,QAAQ,qBAAQ,SAAS,CAAC,aAAa,CAAC,UAAU;AACpD,WAAK,yBAAyB;AAAA,IAClC;AAAA,EACJ;AAAA,EAEQ,yBAAyB,mBAAmB,MAAY;AAC5D,UAAM,EAAE,SAAS,IAAI,KAAK,mBAAmB,CAAC;AAE9C,QAAI,CAAC,KAAK,YAAY;AAClB,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACvD;AACA,QAAI,UAAU;AACV,YAAM,IAAI,MAAM,oCAAoC;AAAA,IACxD;AAEA,SAAK,WAAW,4BAA4B,IAAI;AAChD,SAAK,2BAA2B;AAChC,SAAK,YAAY,OAAO,mBAAmB,gBAAgB,UAAU;AACrE,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EAEQ,gBAAgB,UAA+B;AACnD,QAAI,YAAY,MAAM;AAClB;AAAA,IACJ;AAEA,WAAO,WAAW,MAAM;AACpB,UAAI,CAAC,KAAK,aAAa;AACnB,cAAM,IAAI,MAAM,oCAAoC;AAAA,MACxD;AAEA,UAAI,KAAK,QAAQ,GAAG;AAChB,aAAK,YAAY,SAAS,QAAQ;AAAA,MACtC;AAAA,IACJ,GAAG,CAAC;AAAA,EACR;AAAA,EAEQ,YAAY,YAA2B;AAC3C,QAAI,CAAC,KAAK,YAAY;AAClB,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACvD;AACA,QAAI,CAAC,KAAK,aAAa;AACnB,YAAM,IAAI,MAAM,oCAAoC;AAAA,IACxD;AAEA,QAAI,YAAY;AACZ,WAAK,WAAW,4BAA4B;AAAA,IAChD,OAAO;AACH,WAAK,WAAW,8BAA8B;AAAA,IAClD;AAEA,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EAEQ,oBAAoB,MAA8B,YAA2B;AACjF,UAAM,0BAA0B,CAAC,MAA8B;AAC3D,UAAI,EAAE,UAAU;AACZ,UAAE,SAAS,QAAQ,CAAC,cAAc,wBAAwB,SAAS,CAAC;AAAA,MACxE,OAAO;AACH,aAAK,WAAW,EAAE,KAAM,UAAU;AAAA,MACtC;AAAA,IACJ;AAEA,4BAAwB,IAAI;AAE5B,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EAEQ,eAAe,KAAoB,YAA2B;AAClE,QAAI,CAAC,KAAK,YAAY;AAClB,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACvD;AACA,QAAI,CAAC,KAAK,aAAa;AACnB,YAAM,IAAI,MAAM,oCAAoC;AAAA,IACxD;AAEA,SAAK,WAAW,KAAK,UAAU;AAE/B,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EAEQ,WAAW,KAAoB,YAA2B;AAC9D,QAAI,YAAY;AACZ,WAAK,WAAY,UAAU,GAAG;AAAA,IAClC,OAAO;AACH,WAAK,WAAY,YAAY,GAAG;AAAA,IACpC;AAAA,EACJ;AAAA,EAEQ,YAAY,MAA8B,YAA2B;AACzE,UAAM,qBAAqB,CAAC,MAA8B;AACtD,UAAI,EAAE,gBAAgB,EAAE,aAAa,EAAE,UAAU;AAC7C,UAAE,SAAS,QAAQ,CAAC,cAAc,mBAAmB,SAAS,CAAC;AAC/D,UAAE,WAAW;AAAA,MACjB;AAAA,IACJ;AAEA,uBAAmB,IAAI;AAEvB,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EAEQ,kBAAkB,MAA8B,YAA2B;AAC/E,SAAK,WAAW;AAEhB,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EAEQ,wBAA8B;AAClC,UAAM,aAAa,KAAK,YAAa,kBAAkB;AAEvD,SAAK,WAAY,sBAAsB,WAAW;AAElD,SAAK,2BAA2B;AAChC,SAAK,gBAAgB,UAAU;AAAA,EACnC;AAAA,EAEQ,wBAA8B;AAClC,UAAM,aAAa,KAAK,YAAa,kBAAkB;AAEvD,SAAK,2BAA2B;AAChC,SAAK,YAAY;AACjB,SAAK,gBAAgB,UAAU;AAAA,EACnC;AAAA,EAEO,cAAc,eAAoC;AACrD,SAAK,YAAY,SAAS,aAAa;AACvC,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EAEO,gBAA+B;AAClC,WAAO,KAAK,aAAa,KAAK,WAAW,cAAc,IAAI;AAAA,EAC/D;AAAA,EAEQ,6BAA6B;AACjC,QAAI,CAAC,KAAK,aAAa;AACnB,YAAM,IAAI,MAAM,oCAAoC;AAAA,IACxD;AAEA,SAAK,YAAY,QAAQ,CAAC,KAAK,sBAAsB;AAErD,QAAI,KAAK,wBAAwB;AAC7B,WAAK,yBAAyB;AAAA,IAClC;AAAA,EACJ;AAAA,EAEO,gBAAqC;AACxC,WAAO,KAAK,aAAa,KAAK,WAAW,QAAQ,IAAI,CAAC;AAAA,EAC1D;AAAA,EAEO,kBAAgC;AACnC,WAAO,KAAK,aAAa,KAAK,WAAW,UAAU,IAAI,CAAC;AAAA,EAC5D;AAAA,EAEO,YAAiC;AACpC,WAAO,KAAK,cAAc;AAAA,EAC9B;AAAA,EAEO,qBAA2B;AAC9B,QAAI,KAAK,mBAAmB,KAAK,gBAAgB,qBAAqB;AAClE,WAAK,oBAAoB;AAAA,IAC7B,OAAO;AACH,WAAK,2BAA2B;AAAA,IACpC;AAAA,EACJ;AAAA,EAEQ,sBAAsB,KAAyC;AACnE,UAAM,YAAY,KAAK,cAAc,kBAAkB;AAEvD,WAAO,UAAU,KAAK,oBAAoB,GAAG,CAAC;AAAA,EAClD;AAAA,EAEQ,sBAA2C;AAC/C,QAAI,CAAC,KAAK,mBAAmB,CAAC,KAAK,YAAY;AAC3C,aAAO;AAAA,IACX;AAEA,QAAI,CAAC,KAAK,gBAAgB,0BAA0B;AAEhD,UAAI,KAAK,WAAW,cAAc,KAAK,KAAK,WAAW,yBAAyB,GAAG;AAC/E,eAAO;AAAA,MACX;AAEA,UAAI,KAAK,WAAW,4BAA4B,GAAG;AAC/C,eAAO;AAAA,MACX;AAAA,IACJ,OAAO;AAEH,UAAI,KAAK,WAAW,cAAc,KAAK,KAAK,WAAW,4BAA4B,GAAG;AAClF,eAAO;AAAA,MACX;AAEA,UAAI,KAAK,WAAW,yBAAyB,GAAG;AAC5C,eAAO;AAAA,MACX;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAEQ,uBAAuB,MAAmD;AAC9E,UAAM,+BAA+B,CAAC,MAAmD;AACrF,UAAI,EAAE,UAAU;AACZ,YAAI,WAAW;AACf,YAAI,YAAY;AAChB,cAAM,QAAQ,EAAE,SAAS,KAAK,CAAC,UAAU;AACrC,cAAI,CAAC,MAAM,gBAAgB,CAAC,MAAM,WAAW;AACzC,mBAAO;AAAA,UACX;AACA,gBAAM,gBAAgB,6BAA6B,KAAK;AACxD,cAAI,kBAAkB,QAAW;AAC7B,mBAAO;AAAA,UACX;AACA,cAAI,eAAe;AACf,uBAAW;AAAA,UACf,OAAO;AACH,wBAAY;AAAA,UAChB;AACA,iBAAO,YAAY;AAAA,QACvB,CAAC;AAGD,eAAO,QAAQ,SAAY;AAAA,MAC/B,OAAO;AACH,eAAO,KAAK,WAAY,cAAc,EAAE,GAAI;AAAA,MAChD;AAAA,IACJ;AAEA,QAAI,CAAC,KAAK,gBAAiB,0BAA0B;AAEjD,aAAO,6BAA6B,IAAI;AAAA,IAC5C,OAAO;AAEH,aAAO,KAAK,WAAY,cAAc,KAAK,6BAA6B,IAAI;AAAA,IAChF;AAAA,EACJ;AAAA,EAEgB,UAAgB;AAC5B,QAAI,KAAK,eAAe,MAAM;AAC1B,WAAK,YAAY,QAAQ;AACzB,WAAK,cAAc;AAAA,IACvB;AAEA,UAAM,QAAQ;AAAA,EAClB;AAAA,EAEQ,WAA6C,eAAwC;AACzF,QAAI,iBAAiB,QAAQ,OAAO,kBAAkB,UAAU;AAC5D,aAAO;AAAA,IACX;AACA,WAAO,KAAK,gBAAgB,gBAAiB,cAAc,YAAY;AAAA,EAC3E;AAAA,EAEQ,iBAAuB;AAC3B,QAAI,CAAC,KAAK,iBAAiB,UAAU;AACjC;AAAA,IACJ;AAEA,UAAM,gBAAgB,KAAK,YAAY,iBAAiB;AAExD,QAAI,KAAK,yBAAyB,aAAa,GAAG;AAC9C,YAAM,oBAAoB,CAAC,MAA8B;AACrD,YAAI,EAAE,UAAU;AACZ,YAAE,SAAS,QAAQ,CAAC,cAAc,kBAAkB,SAAS,CAAC;AAC9D,YAAE,WAAW;AAAA,QACjB;AAAA,MACJ;AACA,wBAAkB,aAAa;AAC/B,WAAK,WAAY,sBAAsB,WAAW;AAAA,IACtD;AAAA,EACJ;AAAA,EAEO,iBAAiB,OAA+B;AACnD,WAAO,KAAK,qBAAqB,iBAAiB,OAAO,IAAI;AAAA,EACjE;AAAA,EAEmB,yBAAsC;AACrD,WAAO,KAAK;AAAA,EAChB;AACJ;AAEA,IAAM,eAAN,MAAkD;AAAA,EAC9C,YAA6B,OAAyB;AAAzB;AAAA,EAA0B;AAAA,EAEhD,cAAsB;AACzB,WAAO,KAAK,MAAM,uBAAuB;AAAA,EAC7C;AAAA,EAEO,OAAO,OAA8B;AACxC,WAAO,KAAK,MAAM,iBAAiB,KAAK;AAAA,EAC5C;AAAA,EAEO,aAAa,QAAuB,QAAgC;AACvE,WAAO,WAAW;AAAA,EACtB;AACJ;AAEA,IAAM,4BAAN,MAA+D;AAAA,EAC3D,YACqB,OACA,qBACnB;AAFmB;AACA;AAAA,EAClB;AAAA,EAEI,cAAsB;AACzB,UAAM,kCAAkC,KAAK,MAAM,gCAAgC;AACnF,UAAM,gBAAgB,kCAAkC,IAAI;AAC5D,WAAO,KAAK,MAAM,uBAAuB,IAAI;AAAA,EACjD;AAAA,EAEO,OAAO,OAA8B;AACxC,QAAI,UAAU,GAAG;AACb,aAAO,KAAK,MAAM,iBAAiB;AAAA,IACvC;AAEA,UAAM,kCAAkC,KAAK,MAAM,gCAAgC;AACnF,UAAM,gBAAgB,kCAAkC,IAAI;AAC5D,QAAI,UAAU,KAAK,iCAAiC;AAChD,aAAO,KAAK,MAAM,4BAA4B;AAAA,IAClD;AAEA,WAAO,KAAK,MAAM,iBAAiB,QAAQ,aAAa;AAAA,EAC5D;AAAA,EAEO,aAAa,QAAuB,QAAgC;AACvE,WAAO,WAAW;AAAA,EACtB;AACJ;AAGA,IAAM,mBAAN,MAAmD;AAAA,EAC/C,YAA6B,OAAyB;AAAzB;AAAA,EAA0B;AAAA,EAEhD,cAAsB;AACzB,WAAO,KAAK,MAAM,YAAY;AAAA,EAClC;AAAA,EAEO,OAAO,OAA8C;AACxD,WAAO,KAAK,MAAM,OAAO,KAAK;AAAA,EAClC;AAAA,EAEO,aAAa,QAAuC,QAAgD;AACvG,QAAI,UAAU,QAAQ,UAAU,MAAM;AAClC,aAAO;AAAA,IACX;AACA,WAAO,UAAU,QAAQ,UAAU,QAAQ,OAAO,YAAY,OAAO,WAAW,OAAO,UAAU,OAAO;AAAA,EAC5G;AACJ;;;AU58CA,IAAAC,eAAoE;AAK7D,IAAM,wBAAN,cAAgD,uBAAqC;AAAA,EAYxF,cAAc;AACV;AAAA;AAAA,MACe;AAAA;AAAA;AAAA;AAAA,MAIX,CAAC,qCAAwB;AAAA,IAC7B;AAjBJ,SAAiB,sBAAwC;AAOzD,SAAQ,+BAA+B;AACvC,SAAiB,uBAAuB,IAAI,wBAAwB;AAAA,EAUpE;AAAA,EAhBO,UAAU,OAAuB;AACpC,SAAK,oBAAoB,MAAM;AAAA,EACnC;AAAA;AAAA;AAAA,EAkBgB,UAAgB;AAC5B,UAAM,QAAQ;AAAA,EAClB;AAAA,EAEO,KAAK,QAAqC;AAC7C,SAAK,SAAS;AAEd,SAAK,oBAAoB,YAAY,IAAI,EAAE,oBAAoB,SAAS,MAAM,KAAK,OAAO,iBAAiB,CAAC;AAE5G,SAAK,UAAU,MAAM;AAAA,EACzB;AAAA,EAEQ,UAAU,QAAqC;AACnD,UAAM,cAAc,KAAK,kBAAkB,wBAAwB,OAAO,QAAoB,UAAU,IAAI;AAC5G,UAAM,YAAY,KAAK,cAAc,kBAAkB;AAEvD,SAAK,oBAAoB,kBAAkB,GAAG,WAAW,IAAI,UAAU,mBAAmB,cAAc,CAAC,EAAE;AAAA,EAC/G;AAAA,EAEO,gBAAgB,QAAqC;AACxD,SAAK,QAAQ,MAAM;AAAA,EACvB;AAAA,EAEO,QAAQ,QAAqC;AAChD,SAAK,SAAS;AACd,SAAK,UAAU,MAAM;AAAA,EACzB;AAAA,EAEO,qBAAqB,aAAmC;AAC3D,SAAK,yBAAyB,WAAW;AAAA,EAC7C;AAAA,EAEQ,wBAAwB,IAA4C;AACxE,SAAK,OAAO,qBAAqB,CAAC,WAAW;AACzC,UAAI,EAAE,kBAAkB,YAAY;AAChC,cAAM,IAAI,MAAM,6DAA6D;AAAA,MACjF;AAEA,SAAG,MAAM;AAAA,IACb,CAAC;AAAA,EACL;AAAA,EAEQ,6BAAmC;AACvC,SAAK,wBAAwB,CAAC,cAAc;AACxC,YAAM,gBAAgB,UAAU,cAAc;AAE9C,UAAI,CAAC,eAAe;AAChB;AAAA,MACJ;AAOA,WAAK,oBAAoB,eAAe,EAAE,wBAAwB,MAAM,KAAK,yBAAyB,EAAE,CAAC;AAAA,IAC7G,CAAC;AAED,SAAK,+BAA+B;AAAA,EACxC;AAAA,EAEQ,yBAAyB,aAA2C;AACxE,QAAI,CAAC,KAAK,8BAA8B;AACpC,WAAK,2BAA2B;AAAA,IACpC;AAEA,SAAK,wBAAwB,CAAC,cAAc;AACxC,WAAK,oBAAoB,SAAS,KAAK,qBAAqB,iBAAiB,aAAa,SAAS,CAAC;AAAA,IACxG,CAAC;AAAA,EACL;AACJ;;;AC3GO,IAAM,UAAU;;;AZOhB,IAAM,sBAA8B;AAAA,EACvC,SAAS;AAAA,EACT,YAAY,GAAG,yBAAY,eAAe;AAAA,EAC1C,gBAAgB,CAAC,EAAE,MAAM,qBAAqB,UAAU,UAAU,CAAC;AAAA,EACnE,kBAAkB,CAAC,mCAAsB,gCAAmB;AAChE;AAEA,IAAM,0BAAkC;AAAA,EACpC,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,gBAAgB,CAAC,EAAE,MAAM,6BAA6B,UAAU,sBAAsB,CAAC;AAAA,EACvF,kBAAkB,CAAC,qBAAqB,kCAAqB;AACjE;AAEO,IAAM,kBAA0B;AAAA,EACnC,SAAS;AAAA,EACT,YAAY,yBAAY;AAAA,EACxB,kBAAkB,CAAC,qBAAqB,uBAAuB;AACnE;",
  "names": ["import_core", "import_core", "value", "import_core", "import_core", "import_core", "item", "import_core"]
}
