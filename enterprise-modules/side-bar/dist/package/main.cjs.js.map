{
  "version": 3,
  "sources": ["../../src/main.ts", "../../src/sideBarModule.ts", "../../src/sideBar/common/toolPanelColDefService.ts", "../../src/sideBar/sideBarApi.ts", "../../src/sideBar/sideBarService.ts", "../../src/sideBar/agSideBar.ts", "../../src/sideBar/agSideBarButtons.ts", "../../src/sideBar/sideBarButtonComp.ts", "../../src/sideBar/sideBarDefParser.ts", "../../src/sideBar/toolPanelWrapper.ts", "../../src/sideBar/agHorizontalResize.ts", "../../src/version.ts"],
  "sourcesContent": ["export { SideBarModule } from './sideBarModule';\nexport { ToolPanelColDefService } from './sideBar/common/toolPanelColDefService';\n", "import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames } from '@ag-grid-community/core';\nimport { EnterpriseCoreModule } from '@ag-grid-enterprise/core';\n\nimport { ToolPanelColDefService } from './sideBar/common/toolPanelColDefService';\nimport {\n    closeToolPanel,\n    getOpenedToolPanel,\n    getSideBar,\n    getToolPanelInstance,\n    isSideBarVisible,\n    isToolPanelShowing,\n    openToolPanel,\n    refreshToolPanel,\n    setSideBarPosition,\n    setSideBarVisible,\n} from './sideBar/sideBarApi';\nimport { SideBarService } from './sideBar/sideBarService';\nimport { VERSION } from './version';\n\nexport const SideBarCoreModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.SideBarModule}-core`,\n    beans: [ToolPanelColDefService, SideBarService],\n    dependantModules: [EnterpriseCoreModule],\n};\n\nexport const SideBarApiModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.SideBarModule}-api`,\n    apiFunctions: {\n        isSideBarVisible,\n        setSideBarVisible,\n        setSideBarPosition,\n        openToolPanel,\n        closeToolPanel,\n        getOpenedToolPanel,\n        refreshToolPanel,\n        isToolPanelShowing,\n        getToolPanelInstance,\n        getSideBar,\n    },\n    dependantModules: [SideBarCoreModule],\n};\n\nexport const SideBarModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.SideBarModule,\n    dependantModules: [SideBarCoreModule, SideBarApiModule],\n};\n", "import type {\n    AbstractColDef,\n    AgColumn,\n    BeanCollection,\n    ColDef,\n    ColGroupDef,\n    ColumnModel,\n    NamedBean,\n} from '@ag-grid-community/core';\nimport {\n    AgProvidedColumnGroup,\n    BeanStub,\n    _includes,\n    _last,\n    _warnOnce,\n    isProvidedColumnGroup,\n} from '@ag-grid-community/core';\n\nexport class ToolPanelColDefService extends BeanStub implements NamedBean {\n    beanName = 'toolPanelColDefService' as const;\n\n    private columnModel: ColumnModel;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n    }\n\n    public createColumnTree(colDefs: AbstractColDef[]): (AgColumn | AgProvidedColumnGroup)[] {\n        const invalidColIds: AbstractColDef[] = [];\n\n        const createDummyColGroup = (\n            abstractColDef: AbstractColDef,\n            depth: number\n        ): AgColumn | AgProvidedColumnGroup => {\n            if (this.isColGroupDef(abstractColDef)) {\n                // creating 'dummy' group which is not associated with grid column group\n                const groupDef = abstractColDef as ColGroupDef;\n                const groupId = typeof groupDef.groupId !== 'undefined' ? groupDef.groupId : groupDef.headerName;\n                const group = new AgProvidedColumnGroup(groupDef, groupId!, false, depth);\n                const children: (AgColumn | AgProvidedColumnGroup)[] = [];\n                groupDef.children.forEach((def) => {\n                    const child = createDummyColGroup(def, depth + 1);\n                    // check column exists in case invalid colDef is supplied for primary column\n                    if (child) {\n                        children.push(child);\n                    }\n                });\n                group.setChildren(children);\n\n                return group;\n            } else {\n                const colDef = abstractColDef as ColDef;\n                const key = colDef.colId ? colDef.colId : colDef.field;\n                const column = this.columnModel.getColDefCol(key!)!;\n\n                if (!column) {\n                    invalidColIds.push(colDef);\n                }\n\n                return column;\n            }\n        };\n\n        const mappedResults: (AgColumn | AgProvidedColumnGroup)[] = [];\n        colDefs.forEach((colDef) => {\n            const result = createDummyColGroup(colDef, 0);\n            if (result) {\n                // only return correctly mapped colDef results\n                mappedResults.push(result);\n            }\n        });\n\n        if (invalidColIds.length > 0) {\n            _warnOnce('unable to find grid columns for the supplied colDef(s):', invalidColIds);\n        }\n\n        return mappedResults;\n    }\n\n    public syncLayoutWithGrid(syncLayoutCallback: (colDefs: AbstractColDef[]) => void): void {\n        // extract ordered list of leaf path trees (column group hierarchy for each individual leaf column)\n        const leafPathTrees: AbstractColDef[] = this.getLeafPathTrees();\n\n        // merge leaf path tree taking split column groups into account\n        const mergedColumnTrees = this.mergeLeafPathTrees(leafPathTrees);\n\n        // sync layout with merged column trees\n        syncLayoutCallback(mergedColumnTrees);\n    }\n\n    private getLeafPathTrees(): AbstractColDef[] {\n        // leaf tree paths are obtained by walking up the tree starting at a column until we reach the top level group.\n        const getLeafPathTree = (node: AgColumn | AgProvidedColumnGroup, childDef: AbstractColDef): AbstractColDef => {\n            let leafPathTree: AbstractColDef;\n\n            // build up tree in reverse order\n            if (isProvidedColumnGroup(node)) {\n                if (node.isPadding()) {\n                    // skip over padding groups\n                    leafPathTree = childDef;\n                } else {\n                    const groupDef = Object.assign({}, node.getColGroupDef());\n                    // ensure group contains groupId\n                    groupDef.groupId = node.getGroupId();\n                    groupDef.children = [childDef];\n                    leafPathTree = groupDef;\n                }\n            } else {\n                const colDef = Object.assign({}, node.getColDef());\n                // ensure col contains colId\n                colDef.colId = node.getColId();\n                leafPathTree = colDef;\n            }\n\n            // walk tree\n            const parent = node.getOriginalParent();\n            if (parent) {\n                // keep walking up the tree until we reach the root\n                return getLeafPathTree(parent, leafPathTree);\n            } else {\n                // we have reached the root - exit with resulting leaf path tree\n                return leafPathTree;\n            }\n        };\n\n        // obtain a sorted list of all grid columns\n        const allGridColumns = this.columnModel.getCols();\n\n        // only primary columns and non row group columns should appear in the tool panel\n        const allPrimaryGridColumns = allGridColumns.filter((column) => {\n            const colDef = column.getColDef();\n            return column.isPrimary() && !colDef.showRowGroup;\n        });\n\n        // construct a leaf path tree for each column\n        return allPrimaryGridColumns.map((col) => getLeafPathTree(col, col.getColDef()));\n    }\n\n    private mergeLeafPathTrees(leafPathTrees: AbstractColDef[]) {\n        const matchingRootGroupIds = (pathA: AbstractColDef, pathB: AbstractColDef) => {\n            const bothPathsAreGroups = this.isColGroupDef(pathA) && this.isColGroupDef(pathB);\n            return bothPathsAreGroups && this.getId(pathA) === this.getId(pathB);\n        };\n\n        const mergeTrees = (treeA: AbstractColDef, treeB: AbstractColDef): AbstractColDef => {\n            if (!this.isColGroupDef(treeB)) {\n                return treeA;\n            }\n\n            const mergeResult = treeA;\n            const groupToMerge = treeB as ColGroupDef;\n\n            if (groupToMerge.children && groupToMerge.groupId) {\n                const added = this.addChildrenToGroup(mergeResult, groupToMerge.groupId, groupToMerge.children[0]);\n                if (added) {\n                    return mergeResult;\n                }\n            }\n\n            groupToMerge.children.forEach((child) => mergeTrees(mergeResult, child));\n\n            return mergeResult;\n        };\n\n        // we can't just merge the leaf path trees as groups can be split apart - instead only merge if leaf\n        // path groups with the same root group id are contiguous.\n        const mergeColDefs: AbstractColDef[] = [];\n        for (let i = 1; i <= leafPathTrees.length; i++) {\n            const first = leafPathTrees[i - 1];\n            const second = leafPathTrees[i];\n\n            if (matchingRootGroupIds(first, second)) {\n                leafPathTrees[i] = mergeTrees(first, second);\n            } else {\n                mergeColDefs.push(first);\n            }\n        }\n\n        return mergeColDefs;\n    }\n\n    private addChildrenToGroup(tree: AbstractColDef, groupId: string, colDef: AbstractColDef): boolean {\n        const subGroupIsSplit = (currentSubGroup: ColGroupDef, currentSubGroupToAdd: ColGroupDef) => {\n            const existingChildIds = currentSubGroup.children.map(this.getId);\n            const childGroupAlreadyExists = _includes(existingChildIds, this.getId(currentSubGroupToAdd));\n            const lastChild = _last(currentSubGroup.children);\n            const lastChildIsDifferent = lastChild && this.getId(lastChild) !== this.getId(currentSubGroupToAdd);\n            return childGroupAlreadyExists && lastChildIsDifferent;\n        };\n\n        if (!this.isColGroupDef(tree)) {\n            return true;\n        }\n\n        const currentGroup = tree as ColGroupDef;\n        const groupToAdd = colDef as ColGroupDef;\n\n        if (subGroupIsSplit(currentGroup, groupToAdd)) {\n            currentGroup.children.push(groupToAdd);\n            return true;\n        }\n\n        if (currentGroup.groupId === groupId) {\n            // add children that don't already exist to group\n            const existingChildIds = currentGroup.children.map(this.getId);\n            const colDefAlreadyPresent = _includes(existingChildIds, this.getId(groupToAdd));\n            if (!colDefAlreadyPresent) {\n                currentGroup.children.push(groupToAdd);\n                return true;\n            }\n        }\n\n        // recurse until correct group is found to add children\n        currentGroup.children.forEach((subGroup) => this.addChildrenToGroup(subGroup, groupId, colDef));\n        return false;\n    }\n\n    private isColGroupDef = (colDef: AbstractColDef) =>\n        colDef && typeof (colDef as ColGroupDef).children !== 'undefined';\n\n    private getId = (colDef: AbstractColDef): string | undefined => {\n        return this.isColGroupDef(colDef) ? (colDef as ColGroupDef).groupId : (colDef as ColDef).colId;\n    };\n}\n", "import type { BeanCollection, IToolPanel, SideBarDef } from '@ag-grid-community/core';\nimport { _unwrapUserComp } from '@ag-grid-community/core';\n\nexport function isSideBarVisible(beans: BeanCollection): boolean {\n    return beans.sideBarService?.getSideBarComp().isDisplayed() ?? false;\n}\n\nexport function setSideBarVisible(beans: BeanCollection, show: boolean) {\n    beans.sideBarService?.getSideBarComp().setDisplayed(show);\n}\n\nexport function setSideBarPosition(beans: BeanCollection, position: 'left' | 'right') {\n    beans.sideBarService?.getSideBarComp().setSideBarPosition(position);\n}\n\nexport function openToolPanel(beans: BeanCollection, key: string) {\n    beans.sideBarService?.getSideBarComp().openToolPanel(key, 'api');\n}\n\nexport function closeToolPanel(beans: BeanCollection) {\n    beans.sideBarService?.getSideBarComp().close('api');\n}\n\nexport function getOpenedToolPanel(beans: BeanCollection): string | null {\n    return beans.sideBarService?.getSideBarComp().openedItem() ?? null;\n}\n\nexport function refreshToolPanel(beans: BeanCollection): void {\n    beans.sideBarService?.getSideBarComp().refresh();\n}\n\nexport function isToolPanelShowing(beans: BeanCollection): boolean {\n    return beans.sideBarService?.getSideBarComp().isToolPanelShowing() ?? false;\n}\n\nexport function getToolPanelInstance<TToolPanel = IToolPanel>(\n    beans: BeanCollection,\n    id: string\n): TToolPanel | undefined {\n    const comp = beans.sideBarService?.getSideBarComp().getToolPanelInstance(id);\n    return _unwrapUserComp(comp) as any;\n}\n\nexport function getSideBar(beans: BeanCollection): SideBarDef | undefined {\n    return beans.sideBarService?.getSideBarComp().getDef();\n}\n", "import type { ComponentSelector, ISideBar, ISideBarService, NamedBean } from '@ag-grid-community/core';\nimport { BeanStub } from '@ag-grid-community/core';\n\nimport { AgSideBarSelector } from './agSideBar';\n\nexport class SideBarService extends BeanStub implements NamedBean, ISideBarService {\n    beanName = 'sideBarService' as const;\n\n    private sideBarComp: ISideBar;\n\n    public registerSideBarComp(sideBarComp: ISideBar): void {\n        this.sideBarComp = sideBarComp;\n    }\n\n    public getSideBarComp(): ISideBar {\n        return this.sideBarComp;\n    }\n\n    public getSideBarSelector(): ComponentSelector {\n        return AgSideBarSelector;\n    }\n}\n", "import type {\n    BeanCollection,\n    ComponentSelector,\n    FilterManager,\n    FocusService,\n    ISideBar,\n    IToolPanel,\n    IToolPanelParams,\n    SideBarDef,\n    SideBarState,\n    ToolPanelDef,\n    ToolPanelVisibleChangedEvent,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport {\n    Component,\n    KeyCode,\n    ManagedFocusFeature,\n    ModuleNames,\n    ModuleRegistry,\n    RefPlaceholder,\n    _addFocusableContainerListener,\n    _removeFromParent,\n    _setAriaControls,\n    _warnOnce,\n} from '@ag-grid-community/core';\n\nimport { AgSideBarButtonsSelector } from './agSideBarButtons';\nimport type { SideBarButtonClickedEvent } from './agSideBarButtons';\nimport type { AgSideBarButtons } from './agSideBarButtons';\nimport { parseSideBarDef } from './sideBarDefParser';\nimport type { SideBarService } from './sideBarService';\nimport { ToolPanelWrapper } from './toolPanelWrapper';\n\nexport class AgSideBar extends Component implements ISideBar {\n    private focusService: FocusService;\n    private filterManager?: FilterManager;\n    private sideBarService: SideBarService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.focusService = beans.focusService;\n        this.filterManager = beans.filterManager;\n        this.sideBarService = beans.sideBarService as SideBarService;\n    }\n\n    private readonly sideBarButtons: AgSideBarButtons = RefPlaceholder;\n\n    private toolPanelWrappers: ToolPanelWrapper[] = [];\n    private sideBar: SideBarDef | undefined;\n    private position: 'left' | 'right';\n\n    constructor() {\n        super(\n            /* html */ `<div class=\"ag-side-bar ag-unselectable\">\n            <ag-side-bar-buttons data-ref=\"sideBarButtons\"></ag-side-bar-buttons>\n        </div>`,\n            [AgSideBarButtonsSelector]\n        );\n    }\n\n    public postConstruct(): void {\n        this.sideBarButtons.addEventListener('sideBarButtonClicked', this.onToolPanelButtonClicked.bind(this));\n        const { sideBar: sideBarState } = this.gos.get('initialState') ?? {};\n        this.setSideBarDef({\n            sideBarDef: parseSideBarDef(this.gos.get('sideBar')),\n            sideBarState,\n        });\n\n        this.addManagedPropertyListener('sideBar', this.onSideBarUpdated.bind(this));\n\n        this.sideBarService.registerSideBarComp(this);\n        const eGui = this.getFocusableElement();\n        this.createManagedBean(\n            new ManagedFocusFeature(eGui, {\n                onTabKeyDown: this.onTabKeyDown.bind(this),\n                handleKeyDown: this.handleKeyDown.bind(this),\n            })\n        );\n\n        _addFocusableContainerListener(this, eGui, this.focusService);\n    }\n\n    protected onTabKeyDown(e: KeyboardEvent) {\n        if (e.defaultPrevented) {\n            return;\n        }\n\n        const { focusService, sideBarButtons } = this;\n        const eGui = this.getGui();\n        const sideBarGui = sideBarButtons.getGui();\n        const activeElement = this.gos.getActiveDomElement() as HTMLElement;\n        const openPanel = eGui.querySelector('.ag-tool-panel-wrapper:not(.ag-hidden)') as HTMLElement;\n        const target = e.target as HTMLElement;\n\n        if (!openPanel) {\n            return;\n        }\n\n        if (sideBarGui.contains(activeElement)) {\n            if (focusService.focusInto(openPanel, e.shiftKey)) {\n                e.preventDefault();\n            }\n            return;\n        }\n\n        // only handle backwards focus to target the sideBar buttons\n        if (!e.shiftKey) {\n            return;\n        }\n\n        let nextEl: HTMLElement | null = null;\n\n        if (openPanel.contains(activeElement)) {\n            nextEl = this.focusService.findNextFocusableElement(openPanel, undefined, true);\n        } else if (focusService.isTargetUnderManagedComponent(openPanel, target) && e.shiftKey) {\n            nextEl = this.focusService.findFocusableElementBeforeTabGuard(openPanel, target);\n        }\n\n        if (!nextEl) {\n            nextEl = sideBarGui.querySelector('.ag-selected button') as HTMLElement;\n        }\n\n        if (nextEl && nextEl !== e.target) {\n            e.preventDefault();\n            nextEl.focus();\n        }\n    }\n\n    protected handleKeyDown(e: KeyboardEvent): void {\n        const currentButton = this.gos.getActiveDomElement();\n\n        if (!this.sideBarButtons.getGui().contains(currentButton)) {\n            return;\n        }\n\n        const sideBarGui = this.sideBarButtons.getGui();\n        const buttons: HTMLElement[] = Array.prototype.slice.call(sideBarGui.querySelectorAll('.ag-side-button'));\n\n        const currentPos = buttons.findIndex((button) => button.contains(currentButton));\n        let nextPos: number | null = null;\n\n        switch (e.key) {\n            case KeyCode.LEFT:\n            case KeyCode.UP:\n                nextPos = Math.max(0, currentPos - 1);\n                break;\n            case KeyCode.RIGHT:\n            case KeyCode.DOWN:\n                nextPos = Math.min(currentPos + 1, buttons.length - 1);\n                break;\n        }\n\n        if (nextPos === null) {\n            return;\n        }\n\n        const innerButton = buttons[nextPos].querySelector('button');\n\n        if (innerButton) {\n            innerButton.focus();\n            e.preventDefault();\n        }\n    }\n\n    private onToolPanelButtonClicked(event: SideBarButtonClickedEvent): void {\n        const id = event.toolPanelId;\n        const openedItem = this.openedItem();\n\n        // if item was already open, we close it\n        if (openedItem === id) {\n            this.openToolPanel(undefined, 'sideBarButtonClicked'); // passing undefined closes\n        } else {\n            this.openToolPanel(id, 'sideBarButtonClicked');\n        }\n    }\n\n    private clearDownUi(): void {\n        this.sideBarButtons.clearButtons();\n        this.destroyToolPanelWrappers();\n    }\n\n    private setSideBarDef({\n        sideBarDef,\n        sideBarState,\n        existingToolPanelWrappers,\n    }: {\n        sideBarDef?: SideBarDef;\n        sideBarState?: SideBarState;\n        existingToolPanelWrappers?: { [id: string]: ToolPanelWrapper };\n    }): void {\n        // initially hide side bar\n        this.setDisplayed(false);\n\n        this.sideBar = sideBarDef;\n\n        if (!!this.sideBar && !!this.sideBar.toolPanels) {\n            const toolPanelDefs = this.sideBar.toolPanels as ToolPanelDef[];\n            this.createToolPanelsAndSideButtons(toolPanelDefs, sideBarState, existingToolPanelWrappers);\n            if (!this.toolPanelWrappers.length) {\n                return;\n            }\n\n            const shouldDisplaySideBar = sideBarState ? sideBarState.visible : !this.sideBar.hiddenByDefault;\n            this.setDisplayed(shouldDisplaySideBar);\n\n            this.setSideBarPosition(sideBarState ? sideBarState.position : this.sideBar.position);\n\n            if (shouldDisplaySideBar) {\n                if (sideBarState) {\n                    const { openToolPanel } = sideBarState;\n                    if (openToolPanel) {\n                        this.openToolPanel(openToolPanel, 'sideBarInitializing');\n                    }\n                } else {\n                    this.openToolPanel(this.sideBar.defaultToolPanel, 'sideBarInitializing');\n                }\n            }\n        }\n    }\n\n    public getDef() {\n        return this.sideBar;\n    }\n\n    public setSideBarPosition(position?: 'left' | 'right'): this {\n        if (!position) {\n            position = 'right';\n        }\n\n        this.position = position;\n\n        const isLeft = position === 'left';\n        const resizerSide = isLeft ? 'right' : 'left';\n\n        this.addOrRemoveCssClass('ag-side-bar-left', isLeft);\n        this.addOrRemoveCssClass('ag-side-bar-right', !isLeft);\n\n        this.toolPanelWrappers.forEach((wrapper) => {\n            wrapper.setResizerSizerSide(resizerSide);\n        });\n\n        this.eventService.dispatchEvent({ type: 'sideBarUpdated' });\n\n        return this;\n    }\n\n    public override setDisplayed(\n        displayed: boolean,\n        options?: { skipAriaHidden?: boolean | undefined } | undefined\n    ): void {\n        super.setDisplayed(displayed, options);\n        this.eventService.dispatchEvent({ type: 'sideBarUpdated' });\n    }\n\n    public getState(): SideBarState {\n        const toolPanels: { [id: string]: any } = {};\n        this.toolPanelWrappers.forEach((wrapper) => {\n            toolPanels[wrapper.getToolPanelId()] = wrapper.getToolPanelInstance()?.getState?.();\n        });\n        return {\n            visible: this.isDisplayed(),\n            position: this.position,\n            openToolPanel: this.openedItem(),\n            toolPanels,\n        };\n    }\n\n    private createToolPanelsAndSideButtons(\n        defs: ToolPanelDef[],\n        sideBarState?: SideBarState,\n        existingToolPanelWrappers?: { [id: string]: ToolPanelWrapper }\n    ): void {\n        for (const def of defs) {\n            this.createToolPanelAndSideButton(\n                def,\n                sideBarState?.toolPanels?.[def.id],\n                existingToolPanelWrappers?.[def.id]\n            );\n        }\n    }\n\n    private validateDef(def: ToolPanelDef): boolean {\n        if (def.id == null) {\n            _warnOnce(\n                `please review all your toolPanel components, it seems like at least one of them doesn't have an id`\n            );\n            return false;\n        }\n\n        // helpers, in case user doesn't have the right module loaded\n        if (def.toolPanel === 'agColumnsToolPanel') {\n            const moduleMissing = !ModuleRegistry.__assertRegistered(\n                ModuleNames.ColumnsToolPanelModule,\n                'Column Tool Panel',\n                this.gridId\n            );\n            if (moduleMissing) {\n                return false;\n            }\n        }\n\n        if (def.toolPanel === 'agFiltersToolPanel') {\n            const moduleMissing = !ModuleRegistry.__assertRegistered(\n                ModuleNames.FiltersToolPanelModule,\n                'Filters Tool Panel',\n                this.gridId\n            );\n            if (moduleMissing) {\n                return false;\n            }\n            if (this.filterManager?.isAdvancedFilterEnabled()) {\n                _warnOnce(\n                    'Advanced Filter does not work with Filters Tool Panel. Filters Tool Panel has been disabled.'\n                );\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private createToolPanelAndSideButton(\n        def: ToolPanelDef,\n        initialState?: any,\n        existingToolPanelWrapper?: ToolPanelWrapper\n    ): void {\n        if (!this.validateDef(def)) {\n            return;\n        }\n        const button = this.sideBarButtons.addButtonComp(def);\n        let wrapper: ToolPanelWrapper;\n        if (existingToolPanelWrapper) {\n            wrapper = existingToolPanelWrapper;\n        } else {\n            wrapper = this.createBean(new ToolPanelWrapper());\n\n            wrapper.setToolPanelDef(def, {\n                initialState,\n                onStateUpdated: () => this.eventService.dispatchEvent({ type: 'sideBarUpdated' }),\n            });\n        }\n        wrapper.setDisplayed(false);\n\n        const wrapperGui = wrapper.getGui();\n        this.appendChild(wrapperGui);\n\n        this.toolPanelWrappers.push(wrapper);\n\n        _setAriaControls(button.getButtonElement(), wrapperGui);\n    }\n\n    public refresh(): void {\n        this.toolPanelWrappers.forEach((wrapper) => wrapper.refresh());\n    }\n\n    public openToolPanel(\n        key: string | undefined,\n        source: 'sideBarButtonClicked' | 'sideBarInitializing' | 'api' = 'api'\n    ): void {\n        const currentlyOpenedKey = this.openedItem();\n        if (currentlyOpenedKey === key) {\n            return;\n        }\n\n        this.toolPanelWrappers.forEach((wrapper) => {\n            const show = key === wrapper.getToolPanelId();\n            wrapper.setDisplayed(show);\n        });\n\n        const newlyOpenedKey = this.openedItem();\n        const openToolPanelChanged = currentlyOpenedKey !== newlyOpenedKey;\n        if (openToolPanelChanged) {\n            this.sideBarButtons.setActiveButton(key);\n            this.raiseToolPanelVisibleEvent(key, currentlyOpenedKey ?? undefined, source);\n        }\n    }\n\n    public getToolPanelInstance(key: string): IToolPanel | undefined {\n        const toolPanelWrapper = this.toolPanelWrappers.filter((toolPanel) => toolPanel.getToolPanelId() === key)[0];\n\n        if (!toolPanelWrapper) {\n            _warnOnce(`unable to lookup Tool Panel as invalid key supplied: ${key}`);\n            return;\n        }\n\n        return toolPanelWrapper.getToolPanelInstance();\n    }\n\n    private raiseToolPanelVisibleEvent(\n        key: string | undefined,\n        previousKey: string | undefined,\n        source: 'sideBarButtonClicked' | 'sideBarInitializing' | 'api'\n    ): void {\n        const switchingToolPanel = !!key && !!previousKey;\n        if (previousKey) {\n            const event: WithoutGridCommon<ToolPanelVisibleChangedEvent> = {\n                type: 'toolPanelVisibleChanged',\n                source,\n                key: previousKey,\n                visible: false,\n                switchingToolPanel,\n            };\n            this.eventService.dispatchEvent(event);\n        }\n        if (key) {\n            const event: WithoutGridCommon<ToolPanelVisibleChangedEvent> = {\n                type: 'toolPanelVisibleChanged',\n                source,\n                key,\n                visible: true,\n                switchingToolPanel,\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    public close(source: 'sideBarButtonClicked' | 'sideBarInitializing' | 'api' = 'api'): void {\n        this.openToolPanel(undefined, source);\n    }\n\n    public isToolPanelShowing(): boolean {\n        return !!this.openedItem();\n    }\n\n    public openedItem(): string | null {\n        let activeToolPanel: string | null = null;\n        this.toolPanelWrappers.forEach((wrapper) => {\n            if (wrapper.isDisplayed()) {\n                activeToolPanel = wrapper.getToolPanelId();\n            }\n        });\n        return activeToolPanel;\n    }\n\n    private onSideBarUpdated(): void {\n        const sideBarDef = parseSideBarDef(this.gos.get('sideBar'));\n\n        const existingToolPanelWrappers: { [id: string]: ToolPanelWrapper } = {};\n        if (sideBarDef && this.sideBar) {\n            sideBarDef.toolPanels?.forEach((toolPanelDef: ToolPanelDef) => {\n                const { id } = toolPanelDef;\n                if (!id) {\n                    return;\n                }\n                const existingToolPanelDef = this.sideBar!.toolPanels?.find(\n                    (toolPanelDefToCheck: ToolPanelDef) => toolPanelDefToCheck.id === id\n                ) as ToolPanelDef | undefined;\n                if (!existingToolPanelDef || toolPanelDef.toolPanel !== existingToolPanelDef.toolPanel) {\n                    return;\n                }\n                const toolPanelWrapper = this.toolPanelWrappers.find((toolPanel) => toolPanel.getToolPanelId() === id);\n                if (!toolPanelWrapper) {\n                    return;\n                }\n                const params = this.gos.addGridCommonParams<IToolPanelParams>({\n                    ...(toolPanelDef.toolPanelParams ?? {}),\n                    onStateUpdated: () => this.eventService.dispatchEvent({ type: 'sideBarUpdated' }),\n                });\n                const hasRefreshed = toolPanelWrapper.getToolPanelInstance()?.refresh(params);\n                if (hasRefreshed !== true) {\n                    return;\n                }\n                this.toolPanelWrappers = this.toolPanelWrappers.filter((toolPanel) => toolPanel !== toolPanelWrapper);\n                _removeFromParent(toolPanelWrapper.getGui());\n                existingToolPanelWrappers[id] = toolPanelWrapper;\n            });\n        }\n\n        this.clearDownUi();\n\n        // don't re-assign initial state\n        this.setSideBarDef({ sideBarDef, existingToolPanelWrappers });\n    }\n\n    private destroyToolPanelWrappers(): void {\n        this.toolPanelWrappers.forEach((wrapper) => {\n            _removeFromParent(wrapper.getGui());\n            this.destroyBean(wrapper);\n        });\n        this.toolPanelWrappers.length = 0;\n    }\n\n    public override destroy(): void {\n        this.destroyToolPanelWrappers();\n        super.destroy();\n    }\n}\n\nexport const AgSideBarSelector: ComponentSelector = {\n    selector: 'AG-SIDE-BAR',\n    component: AgSideBar,\n};\n", "import type {\n    AgEvent,\n    BeanCollection,\n    ComponentSelector,\n    FocusService,\n    ToolPanelDef,\n    VisibleColsService,\n} from '@ag-grid-community/core';\nimport { Component, KeyCode, _clearElement, _last } from '@ag-grid-community/core';\n\nimport { SideBarButtonComp } from './sideBarButtonComp';\n\nexport interface SideBarButtonClickedEvent extends AgEvent<'sideBarButtonClicked'> {\n    toolPanelId: string;\n}\n\nexport type AgSideBarButtonsEvent = 'sideBarButtonClicked';\nexport class AgSideBarButtons extends Component<AgSideBarButtonsEvent> {\n    private focusService: FocusService;\n    private visibleColsService: VisibleColsService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.focusService = beans.focusService;\n        this.visibleColsService = beans.visibleColsService;\n    }\n\n    private buttonComps: SideBarButtonComp[] = [];\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-side-buttons\" role=\"tablist\"></div>`);\n    }\n\n    public postConstruct(): void {\n        this.addManagedElementListeners(this.getFocusableElement(), { keydown: this.handleKeyDown.bind(this) });\n    }\n\n    private handleKeyDown(e: KeyboardEvent): void {\n        if (e.key !== KeyCode.TAB || !e.shiftKey) {\n            return;\n        }\n\n        const lastColumn = _last(this.visibleColsService.getAllCols());\n\n        if (this.focusService.focusGridView(lastColumn, true)) {\n            e.preventDefault();\n        }\n    }\n\n    public setActiveButton(id: string | undefined): void {\n        this.buttonComps.forEach((comp) => {\n            comp.setSelected(id === comp.getToolPanelId());\n        });\n    }\n\n    public addButtonComp(def: ToolPanelDef): SideBarButtonComp {\n        const buttonComp = this.createBean(new SideBarButtonComp(def));\n        this.buttonComps.push(buttonComp);\n        this.appendChild(buttonComp);\n\n        buttonComp.addEventListener('toggleButtonClicked', () => {\n            this.dispatchLocalEvent({\n                type: 'sideBarButtonClicked',\n                toolPanelId: def.id,\n            });\n        });\n\n        return buttonComp;\n    }\n\n    public clearButtons(): void {\n        this.buttonComps = this.destroyBeans(this.buttonComps);\n        _clearElement(this.getGui());\n        super.destroy();\n    }\n\n    public override destroy(): void {\n        this.clearButtons();\n        super.destroy();\n    }\n}\n\nexport const AgSideBarButtonsSelector: ComponentSelector = {\n    selector: 'AG-SIDE-BAR-BUTTONS',\n    component: AgSideBarButtons,\n};\n", "import type { ToolPanelDef } from '@ag-grid-community/core';\nimport { Component, RefPlaceholder, _createIconNoSpan, _setAriaExpanded } from '@ag-grid-community/core';\n\nexport type SideBarButtonCompEvent = 'toggleButtonClicked';\nexport class SideBarButtonComp extends Component<SideBarButtonCompEvent> {\n    private readonly eToggleButton: HTMLButtonElement = RefPlaceholder;\n    private readonly eIconWrapper: HTMLElement = RefPlaceholder;\n    private readonly eLabel: HTMLElement = RefPlaceholder;\n\n    private readonly toolPanelDef: ToolPanelDef;\n\n    constructor(toolPanelDef: ToolPanelDef) {\n        super();\n        this.toolPanelDef = toolPanelDef;\n    }\n\n    public getToolPanelId(): string {\n        return this.toolPanelDef.id;\n    }\n\n    public postConstruct(): void {\n        const template = this.createTemplate();\n        this.setTemplate(template, []);\n        this.setLabel();\n        this.setIcon();\n        this.addManagedElementListeners(this.eToggleButton, { click: this.onButtonPressed.bind(this) });\n        this.eToggleButton.setAttribute('id', `ag-${this.getCompId()}-button`);\n    }\n\n    private createTemplate(): string {\n        const res =\n            /* html */\n            `<div class=\"ag-side-button\" role=\"presentation\">\n                <button type=\"button\" data-ref=\"eToggleButton\" tabindex=\"-1\" role=\"tab\" aria-expanded=\"false\" class=\"ag-button ag-side-button-button\">\n                    <div data-ref=\"eIconWrapper\" class=\"ag-side-button-icon-wrapper\" aria-hidden=\"true\"></div>\n                    <span data-ref=\"eLabel\" class=\"ag-side-button-label\"></span>\n                </button>\n            </div>`;\n        return res;\n    }\n\n    private setLabel(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const def = this.toolPanelDef;\n        const label = translate(def.labelKey, def.labelDefault);\n\n        this.eLabel.innerText = label;\n    }\n\n    private setIcon(): void {\n        this.eIconWrapper.insertAdjacentElement('afterbegin', _createIconNoSpan(this.toolPanelDef.iconKey, this.gos)!);\n    }\n\n    private onButtonPressed(): void {\n        this.dispatchLocalEvent({ type: 'toggleButtonClicked' });\n    }\n\n    public setSelected(selected: boolean): void {\n        this.addOrRemoveCssClass('ag-selected', selected);\n        _setAriaExpanded(this.eToggleButton, selected);\n    }\n\n    public getButtonElement(): Element {\n        return this.eToggleButton;\n    }\n}\n", "import { _warnOnce } from '@ag-grid-community/core';\nimport type { SideBarDef, ToolPanelDef } from '@ag-grid-community/core';\n\nconst DEFAULT_COLUMN_COMP: ToolPanelDef = {\n    id: 'columns',\n    labelDefault: 'Columns',\n    labelKey: 'columns',\n    iconKey: 'columns',\n    toolPanel: 'agColumnsToolPanel',\n};\n\nconst DEFAULT_FILTER_COMP: ToolPanelDef = {\n    id: 'filters',\n    labelDefault: 'Filters',\n    labelKey: 'filters',\n    iconKey: 'filter',\n    toolPanel: 'agFiltersToolPanel',\n};\n\nconst DEFAULT_BY_KEY: { [p: string]: ToolPanelDef } = {\n    columns: DEFAULT_COLUMN_COMP,\n    filters: DEFAULT_FILTER_COMP,\n};\n\nexport function parseSideBarDef(\n    toParse: SideBarDef | string | string[] | boolean | null | undefined\n): SideBarDef | undefined {\n    if (!toParse) {\n        return undefined;\n    }\n    if (toParse === true) {\n        return {\n            toolPanels: [DEFAULT_COLUMN_COMP, DEFAULT_FILTER_COMP],\n            defaultToolPanel: 'columns',\n        };\n    }\n\n    if (typeof toParse === 'string') {\n        return parseSideBarDef([toParse]);\n    }\n\n    if (Array.isArray(toParse)) {\n        const comps: ToolPanelDef[] = [];\n        toParse.forEach((key) => {\n            const lookupResult = DEFAULT_BY_KEY[key];\n            if (!lookupResult) {\n                logMissingKey(key);\n                return;\n            }\n\n            comps.push(lookupResult);\n        });\n\n        if (comps.length === 0) {\n            return undefined;\n        }\n\n        return {\n            toolPanels: comps,\n            defaultToolPanel: comps[0].id,\n        };\n    }\n\n    const result: SideBarDef = {\n        toolPanels: parseComponents(toParse.toolPanels),\n        defaultToolPanel: toParse.defaultToolPanel,\n        hiddenByDefault: toParse.hiddenByDefault,\n        position: toParse.position,\n    };\n\n    return result;\n}\n\nfunction logMissingKey(key: string) {\n    _warnOnce(\n        `the key ${key} is not a valid key for specifying a tool panel, valid keys are: ${Object.keys(DEFAULT_BY_KEY).join(',')}`\n    );\n}\n\nfunction parseComponents(from?: (ToolPanelDef | string)[]): ToolPanelDef[] {\n    const result: ToolPanelDef[] = [];\n\n    if (!from) {\n        return result;\n    }\n\n    from.forEach((it: ToolPanelDef | string) => {\n        let toAdd: ToolPanelDef | null = null;\n        if (typeof it === 'string') {\n            const lookupResult = DEFAULT_BY_KEY[it];\n            if (!lookupResult) {\n                logMissingKey(it);\n                return;\n            }\n\n            toAdd = lookupResult;\n        } else {\n            toAdd = it;\n        }\n\n        result.push(toAdd);\n    });\n\n    return result;\n}\n", "import type {\n    BeanCollection,\n    IToolPanelComp,\n    IToolPanelParams,\n    ToolPanelDef,\n    UserComponentFactory,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { Component, _warnOnce } from '@ag-grid-community/core';\n\nimport { AgHorizontalResize } from './agHorizontalResize';\n\nexport class ToolPanelWrapper extends Component {\n    private userComponentFactory: UserComponentFactory;\n\n    public wireBeans(beans: BeanCollection) {\n        this.userComponentFactory = beans.userComponentFactory;\n    }\n\n    private toolPanelCompInstance: IToolPanelComp | undefined;\n    private toolPanelId: string;\n    private resizeBar: AgHorizontalResize;\n    private width: number | undefined;\n    private params: IToolPanelParams;\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-tool-panel-wrapper\" role=\"tabpanel\"/>`);\n    }\n\n    public postConstruct(): void {\n        const eGui = this.getGui();\n        const resizeBar = (this.resizeBar = this.createManagedBean(new AgHorizontalResize()));\n\n        eGui.setAttribute('id', `ag-${this.getCompId()}`);\n\n        resizeBar.setElementToResize(eGui);\n        this.appendChild(resizeBar);\n    }\n\n    public getToolPanelId(): string {\n        return this.toolPanelId;\n    }\n\n    public setToolPanelDef(toolPanelDef: ToolPanelDef, params: WithoutGridCommon<IToolPanelParams>): void {\n        const { id, minWidth, maxWidth, width } = toolPanelDef;\n\n        this.toolPanelId = id;\n        this.width = width;\n\n        const compDetails = this.userComponentFactory.getToolPanelCompDetails(toolPanelDef, params);\n        const componentPromise = compDetails.newAgStackInstance();\n\n        this.params = compDetails.params;\n\n        if (componentPromise == null) {\n            _warnOnce(`error processing tool panel component ${id}. You need to specify 'toolPanel'`);\n            return;\n        }\n        componentPromise.then(this.setToolPanelComponent.bind(this));\n\n        if (minWidth != null) {\n            this.resizeBar.setMinWidth(minWidth);\n        }\n\n        if (maxWidth != null) {\n            this.resizeBar.setMaxWidth(maxWidth);\n        }\n    }\n\n    private setToolPanelComponent(compInstance: IToolPanelComp): void {\n        this.toolPanelCompInstance = compInstance;\n\n        this.appendChild(compInstance.getGui());\n        this.addDestroyFunc(() => {\n            this.destroyBean(compInstance);\n        });\n\n        if (this.width) {\n            this.getGui().style.width = `${this.width}px`;\n        }\n    }\n\n    public getToolPanelInstance(): IToolPanelComp | undefined {\n        return this.toolPanelCompInstance;\n    }\n\n    public setResizerSizerSide(side: 'right' | 'left') {\n        const isRtl = this.gos.get('enableRtl');\n        const isLeft = side === 'left';\n        const inverted = isRtl ? isLeft : !isLeft;\n\n        this.resizeBar.setInverted(inverted);\n    }\n\n    public refresh(): void {\n        this.toolPanelCompInstance?.refresh(this.params);\n    }\n}\n", "import type {\n    BeanCollection,\n    HorizontalResizeService,\n    ToolPanelSizeChangedEvent,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { Component } from '@ag-grid-community/core';\n\nexport class AgHorizontalResize extends Component {\n    private horizontalResizeService: HorizontalResizeService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.horizontalResizeService = beans.horizontalResizeService;\n    }\n\n    private startingWidth: number;\n    private elementToResize: HTMLElement;\n    private inverted: boolean;\n    private minWidth: number = 100;\n    private maxWidth: number | null = null;\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-tool-panel-horizontal-resize\"></div>`);\n    }\n\n    public setElementToResize(elementToResize: HTMLElement): void {\n        this.elementToResize = elementToResize;\n    }\n\n    public postConstruct(): void {\n        const finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({\n            eResizeBar: this.getGui(),\n            dragStartPixels: 1,\n            onResizeStart: this.onResizeStart.bind(this),\n            onResizing: this.onResizing.bind(this),\n            onResizeEnd: this.onResizeEnd.bind(this),\n        });\n\n        this.addDestroyFunc(finishedWithResizeFunc);\n        this.setInverted(this.gos.get('enableRtl'));\n    }\n\n    private dispatchResizeEvent(start: boolean, end: boolean, width: number) {\n        const event: WithoutGridCommon<ToolPanelSizeChangedEvent> = {\n            type: 'toolPanelSizeChanged',\n            width: width,\n            started: start,\n            ended: end,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private onResizeStart(): void {\n        this.startingWidth = this.elementToResize.offsetWidth;\n        this.dispatchResizeEvent(true, false, this.startingWidth);\n    }\n\n    private onResizeEnd(delta: number): void {\n        return this.onResizing(delta, true);\n    }\n\n    private onResizing(delta: number, isEnd: boolean = false): void {\n        const direction = this.inverted ? -1 : 1;\n        let newWidth = Math.max(this.minWidth, Math.floor(this.startingWidth - delta * direction));\n\n        if (this.maxWidth != null) {\n            newWidth = Math.min(this.maxWidth, newWidth);\n        }\n        this.elementToResize.style.width = `${newWidth}px`;\n        this.dispatchResizeEvent(false, isEnd, newWidth);\n    }\n\n    public setInverted(inverted: boolean) {\n        this.inverted = inverted;\n    }\n\n    public setMaxWidth(value: number | null) {\n        this.maxWidth = value;\n    }\n\n    public setMinWidth(value: number | null) {\n        if (value != null) {\n            this.minWidth = value;\n        } else {\n            this.minWidth = 100;\n        }\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.3.1';\n"],
  "mappings": "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",
  "names": ["import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "openToolPanel"]
}
