{
  "version": 3,
  "sources": ["../../src/main.ts", "../../src/viewportRowModelModule.ts", "../../src/version.ts", "../../src/viewportRowModel/viewportRowModel.ts"],
  "sourcesContent": ["export { ViewportRowModelModule } from './viewportRowModelModule';\n", "import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames } from '@ag-grid-community/core';\nimport { EnterpriseCoreModule } from '@ag-grid-enterprise/core';\n\nimport { VERSION } from './version';\nimport { ViewportRowModel } from './viewportRowModel/viewportRowModel';\n\nexport const ViewportRowModelModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.ViewportRowModelModule,\n    rowModel: 'viewport',\n    beans: [ViewportRowModel],\n    dependantModules: [EnterpriseCoreModule],\n};\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.3.1';\n", "import type {\n    BeanCollection,\n    FocusService,\n    IRowModel,\n    IViewportDatasource,\n    ModelUpdatedEvent,\n    NamedBean,\n    RowBounds,\n    RowModelType,\n    RowRenderer,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { BeanStub, RowNode, _iterateObject, _missing, _warnOnce } from '@ag-grid-community/core';\n\nexport class ViewportRowModel extends BeanStub implements NamedBean, IRowModel {\n    beanName = 'rowModel' as const;\n\n    private rowRenderer: RowRenderer;\n    private focusService: FocusService;\n    private beans: BeanCollection;\n\n    public wireBeans(beans: BeanCollection) {\n        this.rowRenderer = beans.rowRenderer;\n        this.focusService = beans.focusService;\n        this.beans = beans;\n    }\n\n    // rowRenderer tells us these\n    private firstRow = -1;\n    private lastRow = -1;\n\n    // datasource tells us this\n    private rowCount = -1;\n    private rowNodesByIndex: { [index: number]: RowNode } = {};\n    private rowHeight: number;\n    private viewportDatasource: IViewportDatasource;\n\n    // we don't implement as lazy row heights is not supported in this row model\n    public ensureRowHeightsValid(\n        startPixel: number,\n        endPixel: number,\n        startLimitIndex: number,\n        endLimitIndex: number\n    ): boolean {\n        return false;\n    }\n\n    public postConstruct(): void {\n        this.rowHeight = this.gos.getRowHeightAsNumber();\n        this.addManagedEventListeners({ viewportChanged: this.onViewportChanged.bind(this) });\n        this.addManagedPropertyListener('viewportDatasource', () => this.updateDatasource());\n        this.addManagedPropertyListener('rowHeight', () => {\n            this.rowHeight = this.gos.getRowHeightAsNumber();\n            this.updateRowHeights();\n        });\n    }\n\n    public start(): void {\n        this.updateDatasource();\n    }\n\n    public isLastRowIndexKnown(): boolean {\n        return true;\n    }\n\n    public override destroy(): void {\n        this.destroyDatasource();\n        super.destroy();\n    }\n\n    private destroyDatasource(): void {\n        if (!this.viewportDatasource) {\n            return;\n        }\n\n        if (this.viewportDatasource.destroy) {\n            this.viewportDatasource.destroy();\n        }\n\n        this.rowRenderer.datasourceChanged();\n        this.firstRow = -1;\n        this.lastRow = -1;\n    }\n\n    private updateDatasource(): void {\n        const datasource = this.gos.get('viewportDatasource');\n        if (datasource) {\n            this.setViewportDatasource(datasource);\n        }\n    }\n\n    private getViewportRowModelPageSize(): number | undefined {\n        return this.gos.get('viewportRowModelPageSize');\n    }\n\n    private getViewportRowModelBufferSize(): number {\n        return this.gos.get('viewportRowModelBufferSize');\n    }\n\n    private calculateFirstRow(firstRenderedRow: number): number {\n        const bufferSize = this.getViewportRowModelBufferSize();\n        const pageSize = this.getViewportRowModelPageSize()!;\n        const afterBuffer = firstRenderedRow - bufferSize;\n\n        if (afterBuffer < 0) {\n            return 0;\n        }\n\n        return Math.floor(afterBuffer / pageSize) * pageSize;\n    }\n\n    private calculateLastRow(lastRenderedRow: number): number {\n        if (lastRenderedRow === -1) {\n            return lastRenderedRow;\n        }\n\n        const bufferSize = this.getViewportRowModelBufferSize();\n        const pageSize = this.getViewportRowModelPageSize()!;\n        const afterBuffer = lastRenderedRow + bufferSize;\n        const result = Math.ceil(afterBuffer / pageSize) * pageSize;\n        const lastRowIndex = this.rowCount - 1;\n\n        return Math.min(result, lastRowIndex);\n    }\n\n    private onViewportChanged(event: any): void {\n        const newFirst = this.calculateFirstRow(event.firstRow);\n        const newLast = this.calculateLastRow(event.lastRow);\n\n        if (this.firstRow !== newFirst || this.lastRow !== newLast) {\n            this.firstRow = newFirst;\n            this.lastRow = newLast;\n            this.purgeRowsNotInViewport();\n            if (this.viewportDatasource) {\n                this.viewportDatasource.setViewportRange(this.firstRow, this.lastRow);\n            }\n        }\n    }\n\n    public purgeRowsNotInViewport(): void {\n        Object.keys(this.rowNodesByIndex).forEach((indexStr) => {\n            const index = parseInt(indexStr, 10);\n            if (index < this.firstRow || index > this.lastRow) {\n                if (this.isRowFocused(index)) {\n                    return;\n                }\n\n                delete this.rowNodesByIndex[index];\n            }\n        });\n    }\n\n    private isRowFocused(rowIndex: number): boolean {\n        const focusedCell = this.focusService.getFocusCellToUseAfterRefresh();\n        if (!focusedCell) {\n            return false;\n        }\n        if (focusedCell.rowPinned != null) {\n            return false;\n        }\n\n        const hasFocus = focusedCell.rowIndex === rowIndex;\n        return hasFocus;\n    }\n\n    public setViewportDatasource(viewportDatasource: IViewportDatasource): void {\n        this.destroyDatasource();\n\n        this.viewportDatasource = viewportDatasource;\n        this.rowCount = -1;\n\n        if (!viewportDatasource.init) {\n            _warnOnce('viewport is missing init method.');\n        } else {\n            viewportDatasource.init({\n                setRowCount: this.setRowCount.bind(this),\n                setRowData: this.setRowData.bind(this),\n                getRow: this.getRow.bind(this),\n            });\n        }\n    }\n\n    public getType(): RowModelType {\n        return 'viewport';\n    }\n\n    public getRow(rowIndex: number): RowNode {\n        if (!this.rowNodesByIndex[rowIndex]) {\n            this.rowNodesByIndex[rowIndex] = this.createBlankRowNode(rowIndex);\n        }\n\n        return this.rowNodesByIndex[rowIndex];\n    }\n\n    public getRowNode(id: string): RowNode | undefined {\n        let result: RowNode | undefined;\n        this.forEachNode((rowNode) => {\n            if (rowNode.id === id) {\n                result = rowNode;\n            }\n        });\n        return result;\n    }\n\n    public getRowCount(): number {\n        return this.rowCount === -1 ? 0 : this.rowCount;\n    }\n\n    public getRowIndexAtPixel(pixel: number): number {\n        if (this.rowHeight !== 0) {\n            // avoid divide by zero error\n            return Math.floor(pixel / this.rowHeight);\n        }\n\n        return 0;\n    }\n\n    public getRowBounds(index: number): RowBounds {\n        return {\n            rowHeight: this.rowHeight,\n            rowTop: this.rowHeight * index,\n        };\n    }\n\n    private updateRowHeights() {\n        this.forEachNode((node) => {\n            node.setRowHeight(this.rowHeight);\n            node.setRowTop(this.rowHeight * node.rowIndex!);\n        });\n\n        const event: WithoutGridCommon<ModelUpdatedEvent> = {\n            type: 'modelUpdated',\n            newData: false,\n            newPage: false,\n            keepRenderedRows: true,\n            animate: false,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public getTopLevelRowCount(): number {\n        return this.getRowCount();\n    }\n\n    public getTopLevelRowDisplayedIndex(topLevelIndex: number): number {\n        return topLevelIndex;\n    }\n\n    public isEmpty(): boolean {\n        return this.rowCount > 0;\n    }\n\n    public isRowsToRender(): boolean {\n        return this.rowCount > 0;\n    }\n\n    public getNodesInRangeForSelection(firstInRange: RowNode, lastInRange: RowNode): RowNode[] {\n        const firstIndex = firstInRange.rowIndex!;\n        const lastIndex = lastInRange.rowIndex!;\n\n        const firstNodeOutOfRange = firstIndex < this.firstRow || firstIndex > this.lastRow;\n        const lastNodeOutOfRange = lastIndex < this.firstRow || lastIndex > this.lastRow;\n\n        if (firstNodeOutOfRange || lastNodeOutOfRange) {\n            return [];\n        }\n\n        const result: RowNode[] = [];\n\n        const startIndex = firstIndex <= lastIndex ? firstIndex : lastIndex;\n        const endIndex = firstIndex <= lastIndex ? lastIndex : firstIndex;\n\n        for (let i = startIndex; i <= endIndex; i++) {\n            result.push(this.rowNodesByIndex[i]);\n        }\n\n        return result;\n    }\n\n    public forEachNode(callback: (rowNode: RowNode, index: number) => void): void {\n        let callbackCount = 0;\n\n        Object.keys(this.rowNodesByIndex).forEach((indexStr) => {\n            const index = parseInt(indexStr, 10);\n            const rowNode: RowNode = this.rowNodesByIndex[index];\n            callback(rowNode, callbackCount);\n            callbackCount++;\n        });\n    }\n\n    private setRowData(rowData: { [key: number]: any }): void {\n        _iterateObject(rowData, (indexStr: string, dataItem: any) => {\n            const index = parseInt(indexStr, 10);\n            // we should never keep rows that we didn't specifically ask for, this\n            // guarantees the contract we have with the server.\n            if (index >= this.firstRow && index <= this.lastRow) {\n                let rowNode = this.rowNodesByIndex[index];\n\n                // the abnormal case is we requested a row even though the grid didn't need it\n                // as a result of the paging and buffer (ie the row is off screen), in which\n                // case we need to create a new node now\n                if (_missing(rowNode)) {\n                    rowNode = this.createBlankRowNode(index);\n                    this.rowNodesByIndex[index] = rowNode;\n                }\n\n                // now we deffo have a row node, so set in the details\n                // if the grid already asked for this row (the normal case), then we would\n                // of put a placeholder node in place.\n                rowNode.setDataAndId(dataItem, index.toString());\n            }\n        });\n    }\n\n    private createBlankRowNode(rowIndex: number): RowNode {\n        const rowNode = new RowNode(this.beans);\n\n        rowNode.setRowHeight(this.rowHeight);\n        rowNode.setRowTop(this.rowHeight * rowIndex);\n        rowNode.setRowIndex(rowIndex);\n\n        return rowNode;\n    }\n\n    public setRowCount(rowCount: number, keepRenderedRows = false): void {\n        if (rowCount === this.rowCount) {\n            return;\n        }\n\n        this.rowCount = rowCount;\n\n        this.eventService.dispatchEventOnce({\n            type: 'rowCountReady',\n        });\n\n        const event: WithoutGridCommon<ModelUpdatedEvent> = {\n            type: 'modelUpdated',\n            newData: false,\n            newPage: false,\n            keepRenderedRows: keepRenderedRows,\n            animate: false,\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public isRowPresent(rowNode: RowNode): boolean {\n        const foundRowNode = this.getRowNode(rowNode.id!);\n        return !!foundRowNode;\n    }\n}\n"],
  "mappings": "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",
  "names": ["import_core"]
}
