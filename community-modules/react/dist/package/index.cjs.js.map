{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/agGridReact.tsx", "../../src/reactUi/agGridReactUi.tsx", "../../src/reactUi/cellRenderer/groupCellRenderer.tsx", "../../src/reactUi/beansContext.tsx", "../../src/reactUi/jsComp.tsx", "../../src/reactUi/utils.tsx", "../../src/shared/customComp/customComponentWrapper.ts", "../../src/reactUi/customComp/customWrapperComp.tsx", "../../src/shared/customComp/customContext.ts", "../../src/shared/reactComponent.ts", "../../src/shared/keyGenerator.ts", "../../src/shared/customComp/cellRendererComponentWrapper.ts", "../../src/shared/customComp/dateComponentWrapper.ts", "../../src/shared/customComp/filterComponentWrapper.ts", "../../src/shared/customComp/floatingFilterComponentProxy.ts", "../../src/shared/customComp/floatingFilterComponentWrapper.ts", "../../src/shared/customComp/loadingOverlayComponentWrapper.ts", "../../src/shared/customComp/menuItemComponentWrapper.ts", "../../src/shared/customComp/noRowsOverlayComponentWrapper.ts", "../../src/shared/customComp/statusPanelComponentWrapper.ts", "../../src/shared/customComp/toolPanelComponentWrapper.ts", "../../src/shared/customComp/util.ts", "../../src/shared/portalManager.ts", "../../src/reactUi/gridComp.tsx", "../../src/reactUi/gridBodyComp.tsx", "../../src/reactUi/header/gridHeaderComp.tsx", "../../src/reactUi/header/headerRowContainerComp.tsx", "../../src/reactUi/header/headerRowComp.tsx", "../../src/reactUi/header/headerCellComp.tsx", "../../src/reactUi/header/headerFilterCellComp.tsx", "../../src/reactUi/header/headerGroupCellComp.tsx", "../../src/reactUi/reactComment.tsx", "../../src/reactUi/rows/rowContainerComp.tsx", "../../src/reactUi/rows/rowComp.tsx", "../../src/reactUi/cells/cellComp.tsx", "../../src/shared/customComp/cellEditorComponentProxy.ts", "../../src/reactUi/cells/popupEditorComp.tsx", "../../src/reactUi/useEffectOnce.tsx", "../../src/reactUi/cells/showJsRenderer.tsx", "../../src/reactUi/tabGuardComp.tsx", "../../src/reactUi/renderStatusService.tsx", "../../src/shared/customComp/interfaces.ts"],
  "sourcesContent": ["export { AgGridReact } from './agGridReact';\nexport * from './shared/interfaces';\nexport * from './shared/customComp/interfaces';\nexport * from './shared/customComp/util';\nexport { CustomContext as CustomComponentContext } from './shared/customComp/customContext';\n", "import type { GridApi } from '@ag-grid-community/core';\nimport React, { Component } from 'react';\n\nimport { AgGridReactUi } from './reactUi/agGridReactUi';\nimport type { AgGridReactProps, AgReactUiProps } from './shared/interfaces';\n\nexport class AgGridReact<TData = any> extends Component<AgGridReactProps<TData> | AgReactUiProps<TData>, object> {\n    /** Grid Api available after onGridReady event has fired. */\n    public api!: GridApi<TData>;\n    private apiListeners: Array<(params: any) => void> = [];\n\n    public registerApiListener(listener: (api: GridApi) => void) {\n        this.apiListeners.push(listener);\n    }\n\n    private setGridApi = (api: GridApi) => {\n        this.api = api;\n        this.apiListeners.forEach((listener) => listener(api));\n    };\n\n    override componentWillUnmount() {\n        this.apiListeners.length = 0;\n    }\n\n    override render() {\n        return <AgGridReactUi<TData> {...this.props} setGridApi={this.setGridApi} />;\n    }\n}\n", "import type {\n    ComponentType,\n    Context,\n    FrameworkComponentWrapper,\n    FrameworkOverridesIncomingSource,\n    GridApi,\n    GridOptions,\n    GridParams,\n    IClientSideRowModel,\n    IDetailCellRenderer,\n    IDetailCellRendererCtrl,\n    IDetailCellRendererParams,\n    IServerSideRowModel,\n    WrappableInterface,\n} from '@ag-grid-community/core';\nimport {\n    BaseComponentWrapper,\n    GridCoreCreator,\n    ModuleRegistry,\n    VanillaFrameworkOverrides,\n    _combineAttributesAndGridOptions,\n    _processOnChange,\n    _warnOnce,\n} from '@ag-grid-community/core';\nimport React, {\n    forwardRef,\n    useCallback,\n    useContext,\n    useEffect,\n    useImperativeHandle,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\n\nimport GroupCellRenderer from '../reactUi/cellRenderer/groupCellRenderer';\nimport { CellRendererComponentWrapper } from '../shared/customComp/cellRendererComponentWrapper';\nimport { DateComponentWrapper } from '../shared/customComp/dateComponentWrapper';\nimport { FilterComponentWrapper } from '../shared/customComp/filterComponentWrapper';\nimport { FloatingFilterComponentWrapper } from '../shared/customComp/floatingFilterComponentWrapper';\nimport { LoadingOverlayComponentWrapper } from '../shared/customComp/loadingOverlayComponentWrapper';\nimport { MenuItemComponentWrapper } from '../shared/customComp/menuItemComponentWrapper';\nimport { NoRowsOverlayComponentWrapper } from '../shared/customComp/noRowsOverlayComponentWrapper';\nimport { StatusPanelComponentWrapper } from '../shared/customComp/statusPanelComponentWrapper';\nimport { ToolPanelComponentWrapper } from '../shared/customComp/toolPanelComponentWrapper';\nimport { warnReactiveCustomComponents } from '../shared/customComp/util';\nimport type { AgGridReactProps } from '../shared/interfaces';\nimport { PortalManager } from '../shared/portalManager';\nimport { ReactComponent } from '../shared/reactComponent';\nimport { BeansContext } from './beansContext';\nimport GridComp from './gridComp';\nimport { RenderStatusService } from './renderStatusService';\nimport { CssClasses, isReact17Minus, runWithoutFlushSync } from './utils';\n\nexport const AgGridReactUi = <TData,>(props: AgGridReactProps<TData>) => {\n    const apiRef = useRef<GridApi<TData>>();\n    const eGui = useRef<HTMLDivElement | null>(null);\n    const portalManager = useRef<PortalManager | null>(null);\n    const destroyFuncs = useRef<(() => void)[]>([]);\n    const whenReadyFuncs = useRef<(() => void)[]>([]);\n    const prevProps = useRef<AgGridReactProps<any>>(props);\n    const frameworkOverridesRef = useRef<ReactFrameworkOverrides>();\n\n    const ready = useRef<boolean>(false);\n\n    const [context, setContext] = useState<Context | undefined>(undefined);\n\n    // Hook to enable Portals to be displayed via the PortalManager\n    const [, setPortalRefresher] = useState(0);\n\n    const setRef = useCallback((e: HTMLDivElement) => {\n        eGui.current = e;\n        if (!eGui.current) {\n            destroyFuncs.current.forEach((f) => f());\n            destroyFuncs.current.length = 0;\n\n            return;\n        }\n\n        const modules = props.modules || [];\n\n        if (!portalManager.current) {\n            portalManager.current = new PortalManager(\n                () => setPortalRefresher((prev) => prev + 1),\n                props.componentWrappingElement,\n                props.maxComponentCreationTimeMs\n            );\n            destroyFuncs.current.push(() => {\n                portalManager.current?.destroy();\n                portalManager.current = null;\n            });\n        }\n\n        const mergedGridOps = _combineAttributesAndGridOptions(props.gridOptions, props);\n\n        const processQueuedUpdates = () => {\n            if (ready.current) {\n                const getFn = () =>\n                    frameworkOverridesRef.current?.shouldQueueUpdates() ? undefined : whenReadyFuncs.current.shift();\n                let fn = getFn();\n                while (fn) {\n                    fn();\n                    fn = getFn();\n                }\n            }\n        };\n\n        const frameworkOverrides = isReact17Minus()\n            ? new React17MinusFrameworkOverrides(processQueuedUpdates)\n            : new ReactFrameworkOverrides();\n        frameworkOverridesRef.current = frameworkOverrides;\n        const renderStatusService = new RenderStatusService();\n        const gridParams: GridParams = {\n            providedBeanInstances: {\n                frameworkComponentWrapper: new ReactFrameworkComponentWrapper(\n                    portalManager.current,\n                    mergedGridOps.reactiveCustomComponents ?? true\n                ),\n                renderStatusService,\n            },\n            modules,\n            frameworkOverrides,\n        };\n\n        const createUiCallback = (context: Context) => {\n            setContext(context);\n            context.createBean(renderStatusService);\n\n            destroyFuncs.current.push(() => {\n                context.destroy();\n            });\n\n            // because React is Async, we need to wait for the UI to be initialised before exposing the API's\n            const ctrlsService = context.getBean('ctrlsService');\n            ctrlsService.whenReady(() => {\n                if (context.isDestroyed()) {\n                    return;\n                }\n\n                const api = apiRef.current;\n                if (api) {\n                    if (props.setGridApi) {\n                        props.setGridApi(api);\n                    }\n                }\n            });\n        };\n\n        // this callback adds to ctrlsService.whenReady(), just like above, however because whenReady() executes\n        // funcs in the order they were received, we know adding items here will be AFTER the grid has set columns\n        // and data. this is because GridCoreCreator sets these between calling createUiCallback and acceptChangesCallback\n        const acceptChangesCallback = (context: Context) => {\n            const ctrlsService = context.getBean('ctrlsService');\n            ctrlsService.whenReady(() => {\n                whenReadyFuncs.current.forEach((f) => f());\n                whenReadyFuncs.current.length = 0;\n                ready.current = true;\n            });\n        };\n\n        const gridCoreCreator = new GridCoreCreator();\n        apiRef.current = gridCoreCreator.create(\n            eGui.current,\n            mergedGridOps,\n            createUiCallback,\n            acceptChangesCallback,\n            gridParams\n        );\n    }, []);\n\n    const style = useMemo(() => {\n        return {\n            height: '100%',\n            ...(props.containerStyle || {}),\n        };\n    }, [props.containerStyle]);\n\n    const processWhenReady = useCallback((func: () => void) => {\n        if (ready.current && !frameworkOverridesRef.current?.shouldQueueUpdates()) {\n            func();\n        } else {\n            whenReadyFuncs.current.push(func);\n        }\n    }, []);\n\n    useEffect(() => {\n        const changes = extractGridPropertyChanges(prevProps.current, props);\n        prevProps.current = props;\n        processWhenReady(() => {\n            if (apiRef.current) {\n                _processOnChange(changes, apiRef.current);\n            }\n        });\n    }, [props]);\n\n    return (\n        <div style={style} className={props.className} ref={setRef}>\n            {context && !context.isDestroyed() ? <GridComp context={context} /> : null}\n            {portalManager.current?.getPortals() ?? null}\n        </div>\n    );\n};\n\nfunction extractGridPropertyChanges(prevProps: any, nextProps: any): { [p: string]: any } {\n    const changes: { [p: string]: any } = {};\n    Object.keys(nextProps).forEach((propKey) => {\n        const propValue = nextProps[propKey];\n        if (prevProps[propKey] !== propValue) {\n            changes[propKey] = propValue;\n        }\n    });\n\n    return changes;\n}\n\nclass ReactFrameworkComponentWrapper\n    extends BaseComponentWrapper<WrappableInterface>\n    implements FrameworkComponentWrapper\n{\n    constructor(\n        private readonly parent: PortalManager,\n        private readonly reactiveCustomComponents?: boolean\n    ) {\n        super();\n    }\n\n    createWrapper(UserReactComponent: { new (): any }, componentType: ComponentType): WrappableInterface {\n        if (this.reactiveCustomComponents) {\n            const getComponentClass = (propertyName: string) => {\n                switch (propertyName) {\n                    case 'filter':\n                        return FilterComponentWrapper;\n                    case 'floatingFilterComponent':\n                        return FloatingFilterComponentWrapper;\n                    case 'dateComponent':\n                        return DateComponentWrapper;\n                    case 'loadingOverlayComponent':\n                        return LoadingOverlayComponentWrapper;\n                    case 'noRowsOverlayComponent':\n                        return NoRowsOverlayComponentWrapper;\n                    case 'statusPanel':\n                        return StatusPanelComponentWrapper;\n                    case 'toolPanel':\n                        return ToolPanelComponentWrapper;\n                    case 'menuItem':\n                        return MenuItemComponentWrapper;\n                    case 'cellRenderer':\n                        return CellRendererComponentWrapper;\n                }\n            };\n            const ComponentClass = getComponentClass(componentType.propertyName);\n            if (ComponentClass) {\n                return new ComponentClass(UserReactComponent, this.parent, componentType);\n            }\n        } else {\n            switch (componentType.propertyName) {\n                case 'filter':\n                case 'floatingFilterComponent':\n                case 'dateComponent':\n                case 'loadingOverlayComponent':\n                case 'noRowsOverlayComponent':\n                case 'statusPanel':\n                case 'toolPanel':\n                case 'menuItem':\n                case 'cellRenderer':\n                    warnReactiveCustomComponents();\n                    break;\n            }\n        }\n        // only cell renderers and tool panel should use fallback methods\n        const suppressFallbackMethods = !componentType.cellRenderer && componentType.propertyName !== 'toolPanel';\n        return new ReactComponent(UserReactComponent, this.parent, componentType, suppressFallbackMethods);\n    }\n}\n\n// Define DetailCellRenderer and ReactFrameworkOverrides here to avoid circular dependency\nconst DetailCellRenderer = forwardRef((props: IDetailCellRendererParams, ref: any) => {\n    const { ctrlsFactory, context, gos, resizeObserverService, rowModel } = useContext(BeansContext);\n\n    const [cssClasses, setCssClasses] = useState<CssClasses>(() => new CssClasses());\n    const [gridCssClasses, setGridCssClasses] = useState<CssClasses>(() => new CssClasses());\n    const [detailGridOptions, setDetailGridOptions] = useState<GridOptions>();\n    const [detailRowData, setDetailRowData] = useState<any[]>();\n\n    const ctrlRef = useRef<IDetailCellRendererCtrl>();\n    const eGuiRef = useRef<HTMLDivElement | null>(null);\n\n    const resizeObserverDestroyFunc = useRef<() => void>();\n\n    const parentModules = useMemo(() => ModuleRegistry.__getGridRegisteredModules(props.api.getGridId()), [props]);\n    const topClassName = useMemo(() => cssClasses.toString() + ' ag-details-row', [cssClasses]);\n    const gridClassName = useMemo(() => gridCssClasses.toString() + ' ag-details-grid', [gridCssClasses]);\n\n    if (ref) {\n        useImperativeHandle(ref, () => ({\n            refresh() {\n                return ctrlRef.current?.refresh() ?? false;\n            },\n        }));\n    }\n\n    if (props.template) {\n        _warnOnce(\n            'detailCellRendererParams.template is not supported by AG Grid React. To change the template, provide a Custom Detail Cell Renderer. See https://ag-grid.com/react-data-grid/master-detail-custom-detail/'\n        );\n    }\n\n    const setRef = useCallback((e: HTMLDivElement) => {\n        eGuiRef.current = e;\n\n        if (!eGuiRef.current) {\n            context.destroyBean(ctrlRef.current);\n            if (resizeObserverDestroyFunc.current) {\n                resizeObserverDestroyFunc.current();\n            }\n            return;\n        }\n\n        const compProxy: IDetailCellRenderer = {\n            addOrRemoveCssClass: (name: string, on: boolean) => setCssClasses((prev) => prev.setClass(name, on)),\n            addOrRemoveDetailGridCssClass: (name: string, on: boolean) =>\n                setGridCssClasses((prev) => prev.setClass(name, on)),\n            setDetailGrid: (gridOptions) => setDetailGridOptions(gridOptions),\n            setRowData: (rowData) => setDetailRowData(rowData),\n            getGui: () => eGuiRef.current!,\n        };\n\n        const ctrl = ctrlsFactory.getInstance('detailCellRenderer') as IDetailCellRendererCtrl;\n        if (!ctrl) {\n            return;\n        } // should never happen, means master/detail module not loaded\n        context.createBean(ctrl);\n\n        ctrl.init(compProxy, props);\n\n        ctrlRef.current = ctrl;\n\n        if (gos.get('detailRowAutoHeight')) {\n            const checkRowSizeFunc = () => {\n                // when disposed, current is null, so nothing to do, and the resize observer will\n                // be disposed of soon\n                if (eGuiRef.current == null) {\n                    return;\n                }\n\n                const clientHeight = eGuiRef.current.clientHeight;\n\n                // if the UI is not ready, the height can be 0, which we ignore, as otherwise a flicker will occur\n                // as UI goes from the default height, to 0, then to the real height as UI becomes ready. this means\n                // it's not possible for have 0 as auto-height, however this is an improbable use case, as even an\n                // empty detail grid would still have some styling around it giving at least a few pixels.\n                if (clientHeight != null && clientHeight > 0) {\n                    // we do the update in a timeout, to make sure we are not calling from inside the grid\n                    // doing another update\n                    const updateRowHeightFunc = () => {\n                        props.node.setRowHeight(clientHeight);\n                        if (rowModel.getType() === 'clientSide') {\n                            (rowModel as unknown as IClientSideRowModel).onRowHeightChanged();\n                        } else if (rowModel.getType() === 'serverSide') {\n                            (rowModel as unknown as IServerSideRowModel).onRowHeightChanged();\n                        }\n                    };\n                    setTimeout(updateRowHeightFunc, 0);\n                }\n            };\n\n            resizeObserverDestroyFunc.current = resizeObserverService.observeResize(eGuiRef.current, checkRowSizeFunc);\n            checkRowSizeFunc();\n        }\n    }, []);\n\n    const setGridApi = useCallback((api: GridApi) => {\n        ctrlRef.current?.registerDetailWithMaster(api);\n    }, []);\n\n    return (\n        <div className={topClassName} ref={setRef}>\n            {detailGridOptions && (\n                <AgGridReactUi\n                    className={gridClassName}\n                    {...detailGridOptions}\n                    modules={parentModules}\n                    rowData={detailRowData}\n                    setGridApi={setGridApi}\n                />\n            )}\n        </div>\n    );\n});\n\nclass ReactFrameworkOverrides extends VanillaFrameworkOverrides {\n    constructor() {\n        super('react');\n        this.renderingEngine = 'react';\n    }\n\n    private frameworkComponents: any = {\n        agGroupCellRenderer: GroupCellRenderer,\n        agGroupRowRenderer: GroupCellRenderer,\n        agDetailCellRenderer: DetailCellRenderer,\n    };\n\n    public override frameworkComponent(name: string): any {\n        return this.frameworkComponents[name];\n    }\n\n    override isFrameworkComponent(comp: any): boolean {\n        if (!comp) {\n            return false;\n        }\n        const prototype = comp.prototype;\n        const isJsComp = prototype && 'getGui' in prototype;\n        return !isJsComp;\n    }\n\n    override wrapIncoming: <T>(callback: () => T, source?: FrameworkOverridesIncomingSource) => T = (\n        callback,\n        source\n    ) => {\n        if (source === 'ensureVisible') {\n            // As ensureVisible could easily be called from an effect which is already running inside a React render\n            // we need to run it without flushSync to avoid the DEV error from React when calling flushSync inside a render.\n            // This does mean there will be a flicker as the grid redraws the cells in the new location but this is deemed\n            // less of an issue then the error in the console for devs.\n            return runWithoutFlushSync(callback);\n        }\n        return callback();\n    };\n\n    shouldQueueUpdates(): boolean {\n        return false;\n    }\n\n    getLockOnRefreshError(): string {\n        return ` This error can also occur if using 'ReactDOM.render' instead of 'createRoot'. If so, please upgrade to 'createRoot'.`;\n    }\n}\n\nclass React17MinusFrameworkOverrides extends ReactFrameworkOverrides {\n    private queueUpdates = false;\n\n    constructor(private readonly processQueuedUpdates: () => void) {\n        super();\n    }\n\n    getLockOnRefresh(): void {\n        this.queueUpdates = true;\n    }\n\n    releaseLockOnRefresh(): void {\n        this.queueUpdates = false;\n        this.processQueuedUpdates();\n    }\n\n    override shouldQueueUpdates(): boolean {\n        return this.queueUpdates;\n    }\n\n    override getLockOnRefreshError(): string {\n        return '';\n    }\n}\n", "import type {\n    GroupCellRendererParams,\n    IGroupCellRenderer,\n    IGroupCellRendererCtrl,\n    UserCompDetails,\n} from '@ag-grid-community/core';\nimport { _escapeString } from '@ag-grid-community/core';\nimport React, {\n    forwardRef,\n    useCallback,\n    useContext,\n    useImperativeHandle,\n    useLayoutEffect,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\n\nimport { BeansContext } from '../beansContext';\nimport { showJsComp } from '../jsComp';\nimport { CssClasses } from '../utils';\n\nconst GroupCellRenderer = forwardRef((props: GroupCellRendererParams, ref) => {\n    const { ctrlsFactory, context } = useContext(BeansContext);\n\n    const eGui = useRef<HTMLElement | null>(null);\n    const eValueRef = useRef<HTMLElement>(null);\n    const eCheckboxRef = useRef<HTMLElement>(null);\n    const eExpandedRef = useRef<HTMLElement>(null);\n    const eContractedRef = useRef<HTMLElement>(null);\n    const ctrlRef = useRef<IGroupCellRendererCtrl | null>();\n\n    const [innerCompDetails, setInnerCompDetails] = useState<UserCompDetails>();\n    const [childCount, setChildCount] = useState<string>();\n    const [value, setValue] = useState<any>();\n    const [cssClasses, setCssClasses] = useState<CssClasses>(() => new CssClasses());\n    const [expandedCssClasses, setExpandedCssClasses] = useState<CssClasses>(() => new CssClasses('ag-hidden'));\n    const [contractedCssClasses, setContractedCssClasses] = useState<CssClasses>(() => new CssClasses('ag-hidden'));\n    const [checkboxCssClasses, setCheckboxCssClasses] = useState<CssClasses>(() => new CssClasses('ag-invisible'));\n\n    useImperativeHandle(ref, () => {\n        return {\n            // force new instance when grid tries to refresh\n            refresh() {\n                return false;\n            },\n        };\n    });\n\n    useLayoutEffect(() => {\n        return showJsComp(innerCompDetails, context, eValueRef.current!);\n    }, [innerCompDetails]);\n\n    const setRef = useCallback((ref: HTMLDivElement) => {\n        eGui.current = ref;\n        if (!eGui.current) {\n            context.destroyBean(ctrlRef.current);\n            ctrlRef.current = null;\n            return;\n        }\n        const compProxy: IGroupCellRenderer = {\n            setInnerRenderer: (details, valueToDisplay) => {\n                setInnerCompDetails(details);\n                setValue(valueToDisplay);\n            },\n            setChildCount: (count) => setChildCount(count),\n            addOrRemoveCssClass: (name, on) => setCssClasses((prev) => prev.setClass(name, on)),\n            setContractedDisplayed: (displayed) =>\n                setContractedCssClasses((prev) => prev.setClass('ag-hidden', !displayed)),\n            setExpandedDisplayed: (displayed) =>\n                setExpandedCssClasses((prev) => prev.setClass('ag-hidden', !displayed)),\n            setCheckboxVisible: (visible) => setCheckboxCssClasses((prev) => prev.setClass('ag-invisible', !visible)),\n        };\n\n        const groupCellRendererCtrl = ctrlsFactory.getInstance('groupCellRendererCtrl') as IGroupCellRendererCtrl;\n        if (groupCellRendererCtrl) {\n            ctrlRef.current = context.createBean(groupCellRendererCtrl);\n            ctrlRef.current.init(\n                compProxy,\n                eGui.current,\n                eCheckboxRef.current!,\n                eExpandedRef.current!,\n                eContractedRef.current!,\n                GroupCellRenderer,\n                props\n            );\n        }\n    }, []);\n\n    const className = useMemo(() => `ag-cell-wrapper ${cssClasses.toString()}`, [cssClasses]);\n    const expandedClassName = useMemo(() => `ag-group-expanded ${expandedCssClasses.toString()}`, [expandedCssClasses]);\n    const contractedClassName = useMemo(\n        () => `ag-group-contracted ${contractedCssClasses.toString()}`,\n        [contractedCssClasses]\n    );\n    const checkboxClassName = useMemo(() => `ag-group-checkbox ${checkboxCssClasses.toString()}`, [checkboxCssClasses]);\n\n    const useFwRenderer = innerCompDetails && innerCompDetails.componentFromFramework;\n    const FwRenderer = useFwRenderer ? innerCompDetails!.componentClass : undefined;\n    const useValue = innerCompDetails == null && value != null;\n    const escapedValue = _escapeString(value, true);\n\n    // if there is no ColDef, it means this is a Full Width Group, then we need to add `role=\"gridcell\"`.\n    return (\n        <span\n            className={className}\n            ref={setRef}\n            {...(!props.colDef ? { role: ctrlRef.current?.getCellAriaRole() } : {})}\n        >\n            <span className={expandedClassName} ref={eExpandedRef}></span>\n            <span className={contractedClassName} ref={eContractedRef}></span>\n            <span className={checkboxClassName} ref={eCheckboxRef}></span>\n            <span className=\"ag-group-value\" ref={eValueRef}>\n                {useValue && <>{escapedValue}</>}\n                {useFwRenderer && <FwRenderer {...innerCompDetails!.params} />}\n            </span>\n            <span className=\"ag-group-child-count\">{childCount}</span>\n        </span>\n    );\n});\n\n// we do not memo() here, as it would stop the forwardRef working\nexport default GroupCellRenderer;\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport React from 'react';\n\nexport const BeansContext = React.createContext<BeanCollection>({} as BeanCollection);\n", "import type { Context, UserCompDetails } from '@ag-grid-community/core';\nimport type { MutableRefObject } from 'react';\n\n/**\n * Show a JS Component\n * @returns Effect Cleanup function\n */\nexport const showJsComp = (\n    compDetails: UserCompDetails | undefined | null,\n    context: Context,\n    eParent: HTMLElement,\n    ref?: MutableRefObject<any> | ((ref: any) => void)\n) => {\n    const doNothing = !compDetails || compDetails.componentFromFramework || context.isDestroyed();\n    if (doNothing) {\n        return;\n    }\n\n    const promise = compDetails!.newAgStackInstance();\n    if (promise == null) {\n        return;\n    }\n\n    // almost all JS Comps are NOT async, however the Floating Multi Filter is Async as it could\n    // be wrapping a React filter, so we need to cater for async comps here.\n\n    let comp: any;\n    let compGui: HTMLElement;\n    let destroyed = false;\n\n    promise.then((c) => {\n        if (destroyed) {\n            context.destroyBean(c);\n            return;\n        }\n\n        comp = c;\n        compGui = comp.getGui();\n        eParent.appendChild(compGui);\n        setRef(ref, comp);\n    });\n\n    return () => {\n        destroyed = true;\n        if (!comp) {\n            return;\n        } // in case we were destroyed before async comp was returned\n\n        if (compGui && compGui.parentElement) {\n            compGui.parentElement.removeChild(compGui);\n        }\n\n        context.destroyBean(comp);\n\n        if (ref) {\n            setRef(ref, undefined);\n        }\n    };\n};\n\nconst setRef = (ref: MutableRefObject<any> | ((ref: any) => void) | undefined, value: any) => {\n    if (!ref) {\n        return;\n    }\n\n    if (ref instanceof Function) {\n        const refCallback = ref as (ref: any) => void;\n        refCallback(value);\n    } else {\n        const refObj = ref as MutableRefObject<any>;\n        refObj.current = value;\n    }\n};\n", "import ReactDOM from 'react-dom';\n\nexport const classesList = (...list: (string | null | undefined)[]): string => {\n    const filtered = list.filter((s) => s != null && s !== '');\n\n    return filtered.join(' ');\n};\n\nexport class CssClasses {\n    private classesMap: { [name: string]: boolean } = {};\n\n    constructor(...initialClasses: string[]) {\n        initialClasses.forEach((className) => {\n            this.classesMap[className] = true;\n        });\n    }\n\n    public setClass(className: string, on: boolean): CssClasses {\n        // important to not make a copy if nothing has changed, so react\n        // won't trigger a render cycle on new object instance\n        const nothingHasChanged = !!this.classesMap[className] == on;\n        if (nothingHasChanged) {\n            return this;\n        }\n\n        const res = new CssClasses();\n        res.classesMap = { ...this.classesMap };\n        res.classesMap[className] = on;\n        return res;\n    }\n\n    public toString(): string {\n        const res = Object.keys(this.classesMap)\n            .filter((key) => this.classesMap[key])\n            .join(' ');\n        return res;\n    }\n}\n\nexport const isComponentStateless = (Component: any) => {\n    const hasSymbol = () => typeof Symbol === 'function' && Symbol.for;\n    const getMemoType = () => (hasSymbol() ? Symbol.for('react.memo') : 0xead3);\n\n    return (\n        (typeof Component === 'function' && !(Component.prototype && Component.prototype.isReactComponent)) ||\n        (typeof Component === 'object' && Component.$$typeof === getMemoType())\n    );\n};\n\n// CreateRoot is only available from React 18, which if used requires us to use flushSync.\nconst createRootAndFlushSyncAvailable = (ReactDOM as any).createRoot != null && (ReactDOM as any).flushSync != null;\n\nexport function isReact17Minus(): boolean {\n    return !createRootAndFlushSyncAvailable;\n}\n\nlet disableFlushSync = false;\n/** Enable flushSync to be disabled for the callback and the next frame (via setTimeout 0) to prevent flushSync during an existing render.\n * Provides an alternative to the more fine grained useFlushSync boolean param to agFlushSync.\n */\nexport function runWithoutFlushSync<T>(func: () => T) {\n    if (!disableFlushSync) {\n        // We only re-enable flushSync asynchronously to avoid re-enabling it while React is still triggering renders related to the original call.\n        setTimeout(() => (disableFlushSync = false), 0);\n    }\n    disableFlushSync = true;\n    return func();\n}\n\n/**\n * Wrapper around flushSync to provide backwards compatibility with React 16-17\n * Also allows us to control via the `useFlushSync` param whether we want to use flushSync or not\n * as we do not want to use flushSync when we are likely to already be in a render cycle\n */\nexport const agFlushSync = (useFlushSync: boolean, fn: () => void) => {\n    if (createRootAndFlushSyncAvailable && useFlushSync && !disableFlushSync) {\n        (ReactDOM as any).flushSync(fn);\n    } else {\n        fn();\n    }\n};\n\n/**\n * The aim of this function is to maintain references to prev or next values where possible.\n * If there are not real changes then return the prev value to avoid unnecessary renders.\n * @param maintainOrder If we want to maintain the order of the elements in the dom in line with the next array\n * @returns\n */\nexport function getNextValueIfDifferent<T extends { getInstanceId: () => string }>(\n    prev: T[] | null,\n    next: T[] | null,\n    maintainOrder: boolean\n): T[] | null {\n    if (next == null || prev == null) {\n        return next;\n    }\n\n    // If same array instance nothing to do.\n    // If both empty arrays maintain reference of prev.\n    if (prev === next || (next.length === 0 && prev.length === 0)) {\n        return prev;\n    }\n\n    // If maintaining dom order just return next\n    // If prev is empty just return next immediately as no previous order to maintain\n    // If prev was not empty but next is empty return next immediately\n    if (maintainOrder || (prev.length === 0 && next.length > 0) || (prev.length > 0 && next.length === 0)) {\n        return next;\n    }\n\n    // if dom order not important, we don't want to change the order\n    // of the elements in the dom, as this would break transition styles\n    const oldValues: T[] = [];\n    const newValues: T[] = [];\n    const prevMap: Map<string, T> = new Map();\n    const nextMap: Map<string, T> = new Map();\n\n    for (let i = 0; i < next.length; i++) {\n        const c = next[i];\n        nextMap.set(c.getInstanceId(), c);\n    }\n\n    for (let i = 0; i < prev.length; i++) {\n        const c = prev[i];\n        prevMap.set(c.getInstanceId(), c);\n        if (nextMap.has(c.getInstanceId())) {\n            oldValues.push(c);\n        }\n    }\n\n    for (let i = 0; i < next.length; i++) {\n        const c = next[i];\n        const instanceId = c.getInstanceId();\n\n        if (!prevMap.has(instanceId)) {\n            newValues.push(c);\n        }\n    }\n\n    // All the same values exist just maybe in a different order so maintain the existing reference\n    if (oldValues.length === prev.length && newValues.length === 0) {\n        return prev;\n    }\n\n    // All new values so avoid spreading the new array to maintain the reference\n    if (oldValues.length === 0 && newValues.length === next.length) {\n        return next;\n    }\n    // Spread as required to combine the old and new values\n    if (oldValues.length === 0) {\n        return newValues;\n    }\n\n    if (newValues.length === 0) {\n        return oldValues;\n    }\n\n    return [...oldValues, ...newValues];\n}\n", "import { AgPromise } from '@ag-grid-community/core';\n\nimport customWrapperComp from '../../reactUi/customComp/customWrapperComp';\nimport { ReactComponent } from '../reactComponent';\n\nexport type WrapperParams<P, M> = {\n    initialProps: P;\n    CustomComponentClass: any;\n    setMethods: (methods: M) => void;\n    addUpdateCallback: (callback: (props: P) => void) => void;\n};\n\nexport function addOptionalMethods<M, C>(optionalMethodNames: string[], providedMethods: M, component: C): void {\n    optionalMethodNames.forEach((methodName) => {\n        const providedMethod = (providedMethods as any)[methodName];\n        if (providedMethod) {\n            (component as any)[methodName] = providedMethod;\n        }\n    });\n}\n\nexport class CustomComponentWrapper<TInputParams, TOutputParams, TMethods> extends ReactComponent {\n    private updateCallback?: () => AgPromise<void>;\n    private resolveUpdateCallback!: () => void;\n    private awaitUpdateCallback = new AgPromise<void>((resolve) => {\n        this.resolveUpdateCallback = resolve;\n    });\n\n    protected providedMethods!: TMethods;\n\n    protected wrapperComponent: any = customWrapperComp;\n\n    protected sourceParams!: TInputParams;\n\n    public override init(params: TInputParams): AgPromise<void> {\n        this.sourceParams = params;\n        return super.init(this.getProps());\n    }\n\n    public override addMethod(): void {\n        // do nothing\n    }\n\n    public getInstance(): AgPromise<any> {\n        return this.instanceCreated.then(() => this.componentInstance);\n    }\n\n    public override getFrameworkComponentInstance(): any {\n        return this;\n    }\n\n    protected override createElement(reactComponent: any, props: TOutputParams): any {\n        return super.createElement(this.wrapperComponent, {\n            initialProps: props,\n            CustomComponentClass: reactComponent,\n            setMethods: (methods: TMethods) => this.setMethods(methods),\n            addUpdateCallback: (callback: (props: TOutputParams) => void) => {\n                // this hooks up `CustomWrapperComp` to allow props updates to be pushed to the custom component\n                this.updateCallback = () => {\n                    callback(this.getProps());\n                    return new AgPromise<void>((resolve) => {\n                        // ensure prop updates have happened\n                        setTimeout(() => {\n                            resolve();\n                        });\n                    });\n                };\n                this.resolveUpdateCallback();\n            },\n        });\n    }\n\n    protected setMethods(methods: TMethods): void {\n        this.providedMethods = methods;\n        addOptionalMethods(this.getOptionalMethods(), this.providedMethods, this);\n    }\n\n    protected getOptionalMethods(): string[] {\n        return [];\n    }\n\n    protected getProps(): TOutputParams {\n        return {\n            ...this.sourceParams,\n            key: this.key,\n            ref: this.ref,\n        } as any;\n    }\n\n    protected refreshProps(): AgPromise<void> {\n        if (this.updateCallback) {\n            return this.updateCallback();\n        }\n        // `refreshProps` is assigned in an effect. It's possible it hasn't been run before the first usage, so wait.\n        return new AgPromise<void>((resolve) =>\n            this.awaitUpdateCallback.then(() => {\n                this.updateCallback!().then(() => resolve());\n            })\n        );\n    }\n}\n", "import React, { memo, useEffect, useState } from 'react';\n\nimport type { WrapperParams } from '../../shared/customComp/customComponentWrapper';\nimport { CustomContext } from '../../shared/customComp/customContext';\n\nconst CustomWrapperComp = <P, M>(params: WrapperParams<P, M>) => {\n    const { initialProps, addUpdateCallback, CustomComponentClass, setMethods } = params;\n\n    const [props, setProps] = useState(initialProps);\n\n    useEffect(() => {\n        // this allows the ts wrapper component to update the props passed into the custom component\n        addUpdateCallback((newProps) => setProps(newProps));\n    }, []);\n\n    return (\n        <CustomContext.Provider value={{ setMethods }}>\n            <CustomComponentClass {...props} />\n        </CustomContext.Provider>\n    );\n};\n\nexport default memo(CustomWrapperComp);\n", "import { createContext } from 'react';\n\ntype CustomContextParams<M> = {\n    setMethods: (methods: M) => void;\n};\n\nexport const CustomContext = createContext<CustomContextParams<any>>({\n    setMethods: () => {},\n});\n", "import type { ComponentType, IComponent, WrappableInterface } from '@ag-grid-community/core';\nimport { AgPromise, _warnOnce } from '@ag-grid-community/core';\nimport type { ReactPortal } from 'react';\nimport { createElement } from 'react';\nimport { createPortal } from 'react-dom';\n\nimport generateNewKey from './keyGenerator';\nimport type { PortalManager } from './portalManager';\n\nexport class ReactComponent implements IComponent<any>, WrappableInterface {\n    protected eParentElement!: HTMLElement;\n    protected componentInstance: any;\n    protected reactComponent: any;\n    protected portalManager: PortalManager;\n    protected portal: ReactPortal | null = null;\n    protected statelessComponent: boolean;\n    protected componentType: ComponentType;\n\n    protected key: string;\n    protected ref?: (element: any) => void;\n    private portalKey: string;\n    private oldPortal: ReactPortal | null = null;\n    private reactElement: any;\n    private params: any;\n    protected instanceCreated: AgPromise<boolean> | AgPromise<false>;\n    private resolveInstanceCreated?: (value: boolean) => void;\n    private suppressFallbackMethods: boolean;\n\n    constructor(\n        reactComponent: any,\n        portalManager: PortalManager,\n        componentType: ComponentType,\n        suppressFallbackMethods?: boolean\n    ) {\n        this.reactComponent = reactComponent;\n        this.portalManager = portalManager;\n        this.componentType = componentType;\n        this.suppressFallbackMethods = !!suppressFallbackMethods;\n\n        this.statelessComponent = this.isStateless(this.reactComponent);\n\n        this.key = generateNewKey();\n        this.portalKey = generateNewKey();\n\n        this.instanceCreated = this.isStatelessComponent()\n            ? AgPromise.resolve(false)\n            : new AgPromise((resolve) => {\n                  this.resolveInstanceCreated = resolve;\n              });\n    }\n\n    public getGui(): HTMLElement {\n        return this.eParentElement;\n    }\n\n    /** `getGui()` returns the parent element. This returns the actual root element. */\n    public getRootElement(): HTMLElement {\n        const firstChild = this.eParentElement.firstChild;\n        return firstChild as HTMLElement;\n    }\n\n    public destroy(): void {\n        if (this.componentInstance && typeof this.componentInstance.destroy == 'function') {\n            this.componentInstance.destroy();\n        }\n        const portal = this.portal;\n        if (portal) {\n            this.portalManager.destroyPortal(portal);\n        }\n    }\n\n    protected createParentElement(params: any) {\n        const componentWrappingElement = this.portalManager.getComponentWrappingElement();\n        const eParentElement = document.createElement(componentWrappingElement || 'div');\n\n        (eParentElement as HTMLElement).classList.add('ag-react-container');\n\n        /** @deprecated v21.2 */\n        params.reactContainer = eParentElement;\n\n        return eParentElement;\n    }\n\n    protected addParentContainerStyleAndClasses() {\n        if (!this.componentInstance) {\n            return;\n        }\n\n        if (this.componentInstance.getReactContainerStyle && this.componentInstance.getReactContainerStyle()) {\n            _warnOnce(\n                'Since v31.1 \"getReactContainerStyle\" is deprecated. Apply styling directly to \".ag-react-container\" if needed.'\n            );\n            Object.assign(this.eParentElement.style, this.componentInstance.getReactContainerStyle());\n        }\n\n        if (this.componentInstance.getReactContainerClasses && this.componentInstance.getReactContainerClasses()) {\n            _warnOnce(\n                'Since v31.1 \"getReactContainerClasses\" is deprecated. Apply styling directly to \".ag-react-container\" if needed.'\n            );\n            const parentContainerClasses: string[] = this.componentInstance.getReactContainerClasses();\n            parentContainerClasses.forEach((className) => this.eParentElement.classList.add(className));\n        }\n    }\n\n    public statelessComponentRendered(): boolean {\n        // fixed fragmentsFuncRendererCreateDestroy funcRendererWithNan (changeDetectionService too for NaN)\n        return this.eParentElement.childElementCount > 0 || this.eParentElement.childNodes.length > 0;\n    }\n\n    public getFrameworkComponentInstance(): any {\n        return this.componentInstance;\n    }\n\n    public isStatelessComponent(): boolean {\n        return this.statelessComponent;\n    }\n\n    public getReactComponentName(): string {\n        return this.reactComponent.name;\n    }\n\n    public getMemoType() {\n        return this.hasSymbol() ? Symbol.for('react.memo') : 0xead3;\n    }\n\n    private hasSymbol() {\n        return typeof Symbol === 'function' && Symbol.for;\n    }\n\n    protected isStateless(Component: any) {\n        return (\n            (typeof Component === 'function' && !(Component.prototype && Component.prototype.isReactComponent)) ||\n            (typeof Component === 'object' && Component.$$typeof === this.getMemoType())\n        );\n    }\n\n    public hasMethod(name: string): boolean {\n        const frameworkComponentInstance = this.getFrameworkComponentInstance();\n        return (\n            (!!frameworkComponentInstance && frameworkComponentInstance[name] != null) ||\n            this.fallbackMethodAvailable(name)\n        );\n    }\n\n    public callMethod(name: string, args: IArguments): void {\n        const frameworkComponentInstance = this.getFrameworkComponentInstance();\n\n        if (this.isStatelessComponent()) {\n            return this.fallbackMethod(name, !!args && args[0] ? args[0] : {});\n        } else if (!frameworkComponentInstance) {\n            // instance not ready yet - wait for it\n            setTimeout(() => this.callMethod(name, args));\n            return;\n        }\n\n        const method = frameworkComponentInstance[name];\n\n        if (method) {\n            return method.apply(frameworkComponentInstance, args);\n        }\n\n        if (this.fallbackMethodAvailable(name)) {\n            return this.fallbackMethod(name, !!args && args[0] ? args[0] : {});\n        }\n    }\n\n    public addMethod(name: string, callback: (...args: any[]) => any): void {\n        (this as any)[name] = callback;\n    }\n\n    public init(params: any): AgPromise<void> {\n        this.eParentElement = this.createParentElement(params);\n        this.params = params;\n\n        this.createOrUpdatePortal(params);\n\n        return new AgPromise<void>((resolve) => this.createReactComponent(resolve));\n    }\n\n    private createOrUpdatePortal(params: any) {\n        if (!this.isStatelessComponent()) {\n            // grab hold of the actual instance created\n            this.ref = (element: any) => {\n                this.componentInstance = element;\n                this.addParentContainerStyleAndClasses();\n                this.resolveInstanceCreated?.(true);\n                this.resolveInstanceCreated = undefined;\n            };\n            params.ref = this.ref;\n        }\n\n        this.reactElement = this.createElement(this.reactComponent, { ...params, key: this.key });\n\n        this.portal = createPortal(\n            this.reactElement,\n            this.eParentElement as any,\n            this.portalKey // fixed deltaRowModeRefreshCompRenderer\n        );\n    }\n\n    protected createElement(reactComponent: any, props: any): any {\n        return createElement(reactComponent, props);\n    }\n\n    private createReactComponent(resolve: (value: any) => void) {\n        this.portalManager.mountReactPortal(this.portal!, this, resolve);\n    }\n\n    public rendered(): boolean {\n        return (\n            (this.isStatelessComponent() && this.statelessComponentRendered()) ||\n            !!(!this.isStatelessComponent() && this.getFrameworkComponentInstance())\n        );\n    }\n\n    /*\n     * fallback methods - these will be invoked if a corresponding instance method is not present\n     * for example if refresh is called and is not available on the component instance, then refreshComponent on this\n     * class will be invoked instead\n     *\n     * Currently only refresh is supported\n     */\n    protected refreshComponent(args: any): void {\n        this.oldPortal = this.portal;\n        this.createOrUpdatePortal(args);\n        this.portalManager.updateReactPortal(this.oldPortal!, this.portal!);\n    }\n\n    protected fallbackMethod(name: string, params: any): any {\n        const method = (this as any)[`${name}Component`];\n        if (!this.suppressFallbackMethods && !!method) {\n            return method.bind(this)(params);\n        }\n    }\n\n    protected fallbackMethodAvailable(name: string): boolean {\n        if (this.suppressFallbackMethods) {\n            return false;\n        }\n        const method = (this as any)[`${name}Component`];\n        return !!method;\n    }\n}\n", "let counter = 0;\nexport default function generateNewKey() {\n    return `agPortalKey_${++counter}`;\n}\n", "import type { ICellRenderer, ICellRendererParams } from '@ag-grid-community/core';\n\nimport { CustomComponentWrapper } from './customComponentWrapper';\nimport type { CustomCellRendererProps } from './interfaces';\n\n// used for set filter and rich select\nexport class CellRendererComponentWrapper\n    extends CustomComponentWrapper<ICellRendererParams, CustomCellRendererProps, object>\n    implements ICellRenderer\n{\n    public refresh(params: ICellRendererParams): boolean {\n        this.sourceParams = params;\n        this.refreshProps();\n        return true;\n    }\n}\n", "import type { IDate, IDateParams } from '@ag-grid-community/core';\n\nimport { CustomComponentWrapper } from './customComponentWrapper';\nimport type { CustomDateCallbacks, CustomDateProps } from './interfaces';\n\nexport class DateComponentWrapper\n    extends CustomComponentWrapper<IDateParams, CustomDateProps, CustomDateCallbacks>\n    implements IDate\n{\n    private date: Date | null = null;\n    private readonly onDateChange = (date: Date | null) => this.updateDate(date);\n\n    public getDate(): Date | null {\n        return this.date;\n    }\n\n    public setDate(date: Date | null): void {\n        this.date = date;\n        this.refreshProps();\n    }\n\n    public refresh(params: IDateParams): void {\n        this.sourceParams = params;\n        this.refreshProps();\n    }\n\n    protected override getOptionalMethods(): string[] {\n        return ['afterGuiAttached', 'setInputPlaceholder', 'setInputAriaLabel', 'setDisabled'];\n    }\n\n    private updateDate(date: Date | null): void {\n        this.setDate(date);\n        // don't need to wait on `refreshProps` as not reliant on state maintained inside React\n        this.sourceParams.onDateChanged();\n    }\n\n    protected override getProps(): CustomDateProps {\n        const props = super.getProps();\n        props.date = this.date;\n        props.onDateChange = this.onDateChange;\n        // remove props in IDataParams but not BaseDateParams\n        delete (props as any).onDateChanged;\n        return props;\n    }\n}\n", "import type { AgPromise, IDoesFilterPassParams, IFilter, IFilterParams } from '@ag-grid-community/core';\n\nimport { CustomComponentWrapper } from './customComponentWrapper';\nimport type { CustomFilterCallbacks, CustomFilterProps } from './interfaces';\n\nexport class FilterComponentWrapper\n    extends CustomComponentWrapper<IFilterParams, CustomFilterProps, CustomFilterCallbacks>\n    implements IFilter\n{\n    private model: any = null;\n    private readonly onModelChange = (model: any) => this.updateModel(model);\n    private readonly onUiChange = () => this.sourceParams.filterChangedCallback();\n    private expectingNewMethods = true;\n\n    public isFilterActive(): boolean {\n        return this.model != null;\n    }\n\n    public doesFilterPass(params: IDoesFilterPassParams<any>): boolean {\n        return this.providedMethods.doesFilterPass(params);\n    }\n\n    public getModel(): any {\n        return this.model;\n    }\n\n    public setModel(model: any): AgPromise<void> {\n        this.expectingNewMethods = true;\n        this.model = model;\n        return this.refreshProps();\n    }\n\n    public refresh(newParams: IFilterParams): boolean {\n        this.sourceParams = newParams;\n        this.refreshProps();\n        return true;\n    }\n\n    protected override getOptionalMethods(): string[] {\n        return ['afterGuiAttached', 'afterGuiDetached', 'onNewRowsLoaded', 'getModelAsString', 'onAnyFilterChanged'];\n    }\n\n    protected override setMethods(methods: CustomFilterCallbacks): void {\n        // filtering is run after the component's `doesFilterPass` receives the new `model`.\n        // However, if `doesFilterPass` is using a state variable derived from `model` (via effect),\n        // it won't have updated in time when filtering runs.\n        // We catch this use case here, and re-run filtering\n        if (this.expectingNewMethods === false && this.providedMethods?.doesFilterPass !== methods?.doesFilterPass) {\n            setTimeout(() => {\n                this.sourceParams.filterChangedCallback();\n            });\n        }\n        this.expectingNewMethods = false;\n        super.setMethods(methods);\n    }\n\n    private updateModel(model: any): void {\n        this.setModel(model).then(() => this.sourceParams.filterChangedCallback());\n    }\n\n    protected override getProps(): CustomFilterProps {\n        const props = super.getProps();\n        props.model = this.model;\n        props.onModelChange = this.onModelChange;\n        props.onUiChange = this.onUiChange;\n        // remove props in IFilterParams but not CustomFilterProps\n        delete (props as any).filterChangedCallback;\n        delete (props as any).filterModifiedCallback;\n        delete (props as any).valueGetter;\n        return props;\n    }\n}\n", "import type { IFloatingFilter, IFloatingFilterParams } from '@ag-grid-community/core';\nimport { AgPromise } from '@ag-grid-community/core';\n\nimport { addOptionalMethods } from './customComponentWrapper';\nimport type { CustomFloatingFilterCallbacks, CustomFloatingFilterProps } from './interfaces';\n\nexport function updateFloatingFilterParent(params: IFloatingFilterParams, model: any): void {\n    params.parentFilterInstance((instance) => {\n        (instance.setModel(model) || AgPromise.resolve()).then(() => {\n            params.filterParams.filterChangedCallback();\n        });\n    });\n}\n\nexport class FloatingFilterComponentProxy implements IFloatingFilter {\n    private model: any = null;\n    private readonly onModelChange = (model: any) => this.updateModel(model);\n\n    constructor(\n        private floatingFilterParams: IFloatingFilterParams,\n        private readonly refreshProps: () => void\n    ) {}\n\n    public getProps(): CustomFloatingFilterProps {\n        return {\n            ...this.floatingFilterParams,\n            model: this.model,\n            onModelChange: this.onModelChange,\n        };\n    }\n\n    public onParentModelChanged(parentModel: any): void {\n        this.model = parentModel;\n        this.refreshProps();\n    }\n\n    public refresh(params: IFloatingFilterParams): void {\n        this.floatingFilterParams = params;\n        this.refreshProps();\n    }\n\n    public setMethods(methods: CustomFloatingFilterCallbacks): void {\n        addOptionalMethods(this.getOptionalMethods(), methods, this);\n    }\n\n    private getOptionalMethods(): string[] {\n        return ['afterGuiAttached'];\n    }\n\n    private updateModel(model: any): void {\n        this.model = model;\n        this.refreshProps();\n        updateFloatingFilterParent(this.floatingFilterParams, model);\n    }\n}\n", "import type { IFloatingFilter, IFloatingFilterParams } from '@ag-grid-community/core';\n\nimport { CustomComponentWrapper } from './customComponentWrapper';\nimport { updateFloatingFilterParent } from './floatingFilterComponentProxy';\nimport type { CustomFloatingFilterCallbacks, CustomFloatingFilterProps } from './interfaces';\n\n// floating filter is normally instantiated via react header filter cell comp, but not in the case of multi filter\nexport class FloatingFilterComponentWrapper\n    extends CustomComponentWrapper<IFloatingFilterParams, CustomFloatingFilterProps, CustomFloatingFilterCallbacks>\n    implements IFloatingFilter\n{\n    private model: any = null;\n    private readonly onModelChange = (model: any) => this.updateModel(model);\n\n    public onParentModelChanged(parentModel: any): void {\n        this.model = parentModel;\n        this.refreshProps();\n    }\n\n    public refresh(newParams: IFloatingFilterParams): void {\n        this.sourceParams = newParams;\n        this.refreshProps();\n    }\n\n    protected override getOptionalMethods(): string[] {\n        return ['afterGuiAttached'];\n    }\n\n    private updateModel(model: any): void {\n        this.model = model;\n        this.refreshProps();\n        // don't need to wait on `refreshProps` as not reliant on state maintained inside React\n        updateFloatingFilterParent(this.sourceParams, model);\n    }\n\n    protected override getProps(): CustomFloatingFilterProps {\n        const props = super.getProps();\n        props.model = this.model;\n        props.onModelChange = this.onModelChange;\n        return props;\n    }\n}\n", "import type { ILoadingOverlay, ILoadingOverlayParams } from '@ag-grid-community/core';\n\nimport { CustomComponentWrapper } from './customComponentWrapper';\nimport type { CustomLoadingOverlayProps } from './interfaces';\n\nexport class LoadingOverlayComponentWrapper\n    extends CustomComponentWrapper<ILoadingOverlayParams, CustomLoadingOverlayProps, object>\n    implements ILoadingOverlay\n{\n    public refresh(params: ILoadingOverlayParams): void {\n        this.sourceParams = params;\n        this.refreshProps();\n    }\n}\n", "import type { AgPromise, IMenuItem, IMenuItemParams } from '@ag-grid-community/core';\n\nimport { CustomComponentWrapper } from './customComponentWrapper';\nimport type { CustomMenuItemCallbacks, CustomMenuItemProps } from './interfaces';\n\nexport class MenuItemComponentWrapper\n    extends CustomComponentWrapper<IMenuItemParams, CustomMenuItemProps, CustomMenuItemCallbacks>\n    implements IMenuItem\n{\n    private active: boolean = false;\n    private expanded: boolean = false;\n    private readonly onActiveChange = (active: boolean) => this.updateActive(active);\n\n    public setActive(active: boolean): void {\n        this.awaitSetActive(active);\n    }\n\n    public setExpanded(expanded: boolean): void {\n        this.expanded = expanded;\n        this.refreshProps();\n    }\n\n    protected override getOptionalMethods(): string[] {\n        return ['select', 'configureDefaults'];\n    }\n\n    private awaitSetActive(active: boolean): AgPromise<void> {\n        this.active = active;\n        return this.refreshProps();\n    }\n\n    private updateActive(active: boolean): void {\n        const result = this.awaitSetActive(active);\n        if (active) {\n            result.then(() => this.sourceParams.onItemActivated());\n        }\n    }\n\n    protected override getProps(): CustomMenuItemProps {\n        const props = super.getProps();\n        props.active = this.active;\n        props.expanded = this.expanded;\n        props.onActiveChange = this.onActiveChange;\n        // remove props in IMenuItemParams but not CustomMenuItemProps\n        delete (props as any).onItemActivated;\n        return props;\n    }\n}\n", "import type { INoRowsOverlay, INoRowsOverlayParams } from '@ag-grid-community/core';\n\nimport { CustomComponentWrapper } from './customComponentWrapper';\nimport type { CustomNoRowsOverlayProps } from './interfaces';\n\nexport class NoRowsOverlayComponentWrapper\n    extends CustomComponentWrapper<INoRowsOverlayParams, CustomNoRowsOverlayProps, object>\n    implements INoRowsOverlay\n{\n    public refresh(params: INoRowsOverlayParams): void {\n        this.sourceParams = params;\n        this.refreshProps();\n    }\n}\n", "import type { IStatusPanel, IStatusPanelParams } from '@ag-grid-community/core';\n\nimport { CustomComponentWrapper } from './customComponentWrapper';\nimport type { CustomStatusPanelProps } from './interfaces';\n\nexport class StatusPanelComponentWrapper\n    extends CustomComponentWrapper<IStatusPanelParams, CustomStatusPanelProps, object>\n    implements IStatusPanel\n{\n    public refresh(params: IStatusPanelParams): boolean {\n        this.sourceParams = params;\n        this.refreshProps();\n        return true;\n    }\n}\n", "import type { IToolPanel, IToolPanelParams } from '@ag-grid-community/core';\n\nimport { CustomComponentWrapper } from './customComponentWrapper';\nimport type { CustomToolPanelProps } from './interfaces';\n\nexport class ToolPanelComponentWrapper\n    extends CustomComponentWrapper<IToolPanelParams, CustomToolPanelProps, object>\n    implements IToolPanel\n{\n    private state: any;\n    private readonly onStateChange = (state: any) => this.updateState(state);\n\n    public refresh(params: IToolPanelParams): boolean {\n        this.sourceParams = params;\n        this.refreshProps();\n        return true;\n    }\n\n    public getState(): any {\n        return this.state;\n    }\n\n    private updateState(state: any): void {\n        this.state = state;\n        this.refreshProps();\n        // don't need to wait on `refreshProps` as not reliant on state maintained inside React\n        this.sourceParams.onStateUpdated();\n    }\n\n    protected override getProps(): CustomToolPanelProps {\n        const props = super.getProps();\n        props.state = this.state;\n        props.onStateChange = this.onStateChange;\n        return props;\n    }\n}\n", "import type { ICellEditor, IFilter, IStatusPanel, IToolPanel } from '@ag-grid-community/core';\nimport { AgPromise, _warnOnce } from '@ag-grid-community/core';\n\n/**\n * Function to retrieve the React component from an instance returned by the grid.\n * @param wrapperComponent Instance component from the grid\n * @param callback Callback which is provided the underlying React custom component\n */\nexport function getInstance<\n    TGridComponent extends IFilter | IToolPanel | ICellEditor | IStatusPanel =\n        | IFilter\n        | IToolPanel\n        | ICellEditor\n        | IStatusPanel,\n    TCustomComponent extends TGridComponent = TGridComponent,\n>(wrapperComponent: TGridComponent, callback: (customComponent: TCustomComponent | undefined) => void): void {\n    const promise = (wrapperComponent as any)?.getInstance?.() ?? AgPromise.resolve(undefined);\n    promise.then((comp: TCustomComponent | undefined) => callback(comp));\n}\n\nexport function warnReactiveCustomComponents(): void {\n    _warnOnce('As of v32, using custom components with `reactiveCustomComponents = false` is deprecated.');\n}\n", "import { _errorOnce } from '@ag-grid-community/core';\nimport type { ReactPortal } from 'react';\n\nimport type { ReactComponent } from './reactComponent';\n\nconst MAX_COMPONENT_CREATION_TIME_IN_MS: number = 1000; // a second should be more than enough to instantiate a component\nexport class PortalManager {\n    private refresher: () => void;\n    private wrappingElement: string;\n    private destroyed = false;\n\n    private portals: ReactPortal[] = [];\n    private hasPendingPortalUpdate = false;\n\n    private maxComponentCreationTimeMs: number;\n\n    constructor(refresher: () => void, wrappingElement?: string, maxComponentCreationTimeMs?: number) {\n        this.wrappingElement = wrappingElement ? wrappingElement : 'div';\n        this.refresher = refresher;\n        this.maxComponentCreationTimeMs = maxComponentCreationTimeMs\n            ? maxComponentCreationTimeMs\n            : MAX_COMPONENT_CREATION_TIME_IN_MS;\n    }\n\n    public getPortals(): ReactPortal[] {\n        return this.portals;\n    }\n\n    public destroy(): void {\n        this.destroyed = true;\n    }\n\n    public destroyPortal(portal: ReactPortal): void {\n        this.portals = this.portals.filter((curPortal) => curPortal !== portal);\n        this.batchUpdate();\n    }\n\n    public getComponentWrappingElement(): string | undefined {\n        return this.wrappingElement;\n    }\n\n    public mountReactPortal(portal: ReactPortal, reactComponent: ReactComponent, resolve: (value: any) => void): void {\n        this.portals = [...this.portals, portal];\n        this.waitForInstance(reactComponent, resolve);\n        this.batchUpdate();\n    }\n\n    public updateReactPortal(oldPortal: ReactPortal, newPortal: ReactPortal): void {\n        this.portals[this.portals.indexOf(oldPortal)] = newPortal;\n        this.batchUpdate();\n    }\n\n    private batchUpdate(): void {\n        if (this.hasPendingPortalUpdate) {\n            return;\n        }\n\n        setTimeout(() => {\n            if (!this.destroyed) {\n                // destroyed?\n                this.refresher();\n                this.hasPendingPortalUpdate = false;\n            }\n        });\n\n        this.hasPendingPortalUpdate = true;\n    }\n\n    waitForInstance(reactComponent: ReactComponent, resolve: (value: any) => void, startTime = Date.now()): void {\n        // if the grid has been destroyed in the meantime just resolve\n        if (this.destroyed) {\n            resolve(null);\n            return;\n        }\n\n        if (reactComponent.rendered()) {\n            resolve(reactComponent);\n        } else {\n            if (Date.now() - startTime >= this.maxComponentCreationTimeMs! && !this.hasPendingPortalUpdate) {\n                _errorOnce(\n                    `React Component '${reactComponent.getReactComponentName()}' not created within ${this.maxComponentCreationTimeMs}ms.`\n                );\n                _errorOnce(\n                    '    If the component is using `forwardRef` but not `useImperativeHandle`, add the following: `useImperativeHandle(ref, () => ({}));`'\n                );\n                return;\n            }\n\n            window.setTimeout(() => {\n                this.waitForInstance(reactComponent, resolve, startTime);\n            });\n        }\n    }\n}\n", "import type {\n    Component,\n    ComponentSelector,\n    Context,\n    FocusableContainer,\n    IGridComp,\n    TabGuardComp as JsTabGuardComp,\n} from '@ag-grid-community/core';\nimport { GridCtrl } from '@ag-grid-community/core';\nimport React, { memo, useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { BeansContext } from './beansContext';\nimport GridBodyComp from './gridBodyComp';\nimport useReactCommentEffect from './reactComment';\nimport type { TabGuardCompCallback } from './tabGuardComp';\nimport TabGuardComp from './tabGuardComp';\nimport { classesList } from './utils';\n\ninterface GridCompProps {\n    context: Context;\n}\n\nconst GridComp = ({ context }: GridCompProps) => {\n    const [rtlClass, setRtlClass] = useState<string>('');\n    const [layoutClass, setLayoutClass] = useState<string>('');\n    const [cursor, setCursor] = useState<string | null>(null);\n    const [userSelect, setUserSelect] = useState<string | null>(null);\n    const [initialised, setInitialised] = useState<boolean>(false);\n    const [tabGuardReady, setTabGuardReady] = useState<any>();\n\n    const gridCtrlRef = useRef<GridCtrl | null>(null);\n    const eRootWrapperRef = useRef<HTMLDivElement | null>(null);\n    const tabGuardRef = useRef<TabGuardCompCallback>();\n    // eGridBodyParent is state as we use it in render\n    const [eGridBodyParent, setGridBodyParent] = useState<HTMLDivElement | null>(null);\n\n    const focusInnerElementRef = useRef<(fromBottom?: boolean) => void>(() => undefined);\n    const paginationCompRef = useRef<JsTabGuardComp | undefined>();\n    const focusableContainersRef = useRef<Component[]>([]);\n\n    const onTabKeyDown = useCallback(() => undefined, []);\n\n    const beans = useMemo(() => {\n        if (context.isDestroyed()) {\n            return null;\n        }\n        return context.getBeans();\n    }, [context]);\n\n    useReactCommentEffect(' AG Grid ', eRootWrapperRef);\n\n    const setRef = useCallback((e: HTMLDivElement) => {\n        eRootWrapperRef.current = e;\n\n        if (!eRootWrapperRef.current) {\n            context.destroyBean(gridCtrlRef.current);\n            gridCtrlRef.current = null;\n            return;\n        }\n\n        if (context.isDestroyed()) {\n            return;\n        }\n\n        gridCtrlRef.current = context.createBean(new GridCtrl());\n        const gridCtrl = gridCtrlRef.current;\n\n        focusInnerElementRef.current = gridCtrl.focusInnerElement.bind(gridCtrl);\n\n        const compProxy: IGridComp = {\n            destroyGridUi: () => {}, // do nothing, as framework users destroy grid by removing the comp\n            setRtlClass: setRtlClass,\n            forceFocusOutOfContainer: (up?: boolean) => {\n                if (!up && paginationCompRef.current?.isDisplayed()) {\n                    paginationCompRef.current.forceFocusOutOfContainer(up);\n                    return;\n                }\n                tabGuardRef.current?.forceFocusOutOfContainer(up);\n            },\n            updateLayoutClasses: setLayoutClass,\n            getFocusableContainers: () => {\n                const comps: FocusableContainer[] = [];\n                const gridBodyCompEl = eRootWrapperRef.current?.querySelector('.ag-root');\n                if (gridBodyCompEl) {\n                    comps.push({ getGui: () => gridBodyCompEl as HTMLElement });\n                }\n                focusableContainersRef.current.forEach((comp) => {\n                    if (comp.isDisplayed()) {\n                        comps.push(comp);\n                    }\n                });\n                return comps;\n            },\n            setCursor,\n            setUserSelect,\n        };\n\n        gridCtrl.setComp(compProxy, eRootWrapperRef.current, eRootWrapperRef.current);\n\n        setInitialised(true);\n    }, []);\n\n    // initialise the extra components\n    useEffect(() => {\n        if (!tabGuardReady || !beans || !gridCtrlRef.current || !eGridBodyParent || !eRootWrapperRef.current) {\n            return;\n        }\n\n        const gridCtrl = gridCtrlRef.current;\n        const beansToDestroy: any[] = [];\n\n        // these components are optional, so we check if they are registered before creating them\n        const {\n            watermarkSelector,\n            paginationSelector,\n            sideBarSelector,\n            statusBarSelector,\n            gridHeaderDropZonesSelector,\n        } = gridCtrl.getOptionalSelectors();\n        const additionalEls: HTMLElement[] = [];\n        const eRootWrapper = eRootWrapperRef.current;\n\n        if (gridHeaderDropZonesSelector) {\n            const headerDropZonesComp = context.createBean(new gridHeaderDropZonesSelector.component());\n            const eGui = headerDropZonesComp.getGui();\n            eRootWrapper.insertAdjacentElement('afterbegin', eGui);\n            additionalEls.push(eGui);\n            beansToDestroy.push(headerDropZonesComp);\n        }\n\n        if (sideBarSelector) {\n            const sideBarComp = context.createBean(new sideBarSelector.component());\n            const eGui = sideBarComp.getGui();\n            const bottomTabGuard = eGridBodyParent.querySelector('.ag-tab-guard-bottom');\n            if (bottomTabGuard) {\n                bottomTabGuard.insertAdjacentElement('beforebegin', eGui);\n                additionalEls.push(eGui);\n            }\n\n            beansToDestroy.push(sideBarComp);\n            focusableContainersRef.current.push(sideBarComp);\n        }\n\n        const addComponentToDom = (component: ComponentSelector['component']) => {\n            const comp = context.createBean(new component());\n            const eGui = comp.getGui();\n            eRootWrapper.insertAdjacentElement('beforeend', eGui);\n            additionalEls.push(eGui);\n            beansToDestroy.push(comp);\n            return comp;\n        };\n\n        if (statusBarSelector) {\n            addComponentToDom(statusBarSelector.component);\n        }\n\n        if (paginationSelector) {\n            const paginationComp = addComponentToDom(paginationSelector.component);\n            paginationCompRef.current = paginationComp as JsTabGuardComp;\n            focusableContainersRef.current.push(paginationComp);\n        }\n\n        if (watermarkSelector) {\n            addComponentToDom(watermarkSelector.component);\n        }\n\n        return () => {\n            context.destroyBeans(beansToDestroy);\n            additionalEls.forEach((el) => {\n                if (el.parentElement) {\n                    el.parentElement.removeChild(el);\n                }\n            });\n        };\n    }, [tabGuardReady, eGridBodyParent, beans]);\n\n    const rootWrapperClasses = useMemo(\n        () => classesList('ag-root-wrapper', rtlClass, layoutClass),\n        [rtlClass, layoutClass]\n    );\n    const rootWrapperBodyClasses = useMemo(\n        () => classesList('ag-root-wrapper-body', 'ag-focus-managed', layoutClass),\n        [layoutClass]\n    );\n\n    const topStyle: React.CSSProperties = useMemo(\n        () => ({\n            userSelect: userSelect != null ? (userSelect as any) : '',\n            WebkitUserSelect: userSelect != null ? (userSelect as any) : '',\n            cursor: cursor != null ? cursor : '',\n        }),\n        [userSelect, cursor]\n    );\n\n    const setTabGuardCompRef = useCallback((ref: TabGuardCompCallback) => {\n        tabGuardRef.current = ref;\n        setTabGuardReady(ref !== null);\n    }, []);\n\n    return (\n        <div ref={setRef} className={rootWrapperClasses} style={topStyle} role=\"presentation\">\n            <div className={rootWrapperBodyClasses} ref={setGridBodyParent} role=\"presentation\">\n                {initialised && eGridBodyParent && beans && (\n                    <BeansContext.Provider value={beans}>\n                        <TabGuardComp\n                            ref={setTabGuardCompRef}\n                            eFocusableElement={eGridBodyParent}\n                            onTabKeyDown={onTabKeyDown}\n                            gridCtrl={gridCtrlRef.current!}\n                            forceFocusOutWhenTabGuardsAreEmpty={true}\n                        >\n                            {\n                                // we wait for initialised before rending the children, so GridComp has created and registered with it's\n                                // GridCtrl before we create the child GridBodyComp. Otherwise the GridBodyComp would initialise first,\n                                // before we have set the the Layout CSS classes, causing the GridBodyComp to render rows to a grid that\n                                // doesn't have it's height specified, which would result if all the rows getting rendered (and if many rows,\n                                // hangs the UI)\n                                <GridBodyComp />\n                            }\n                        </TabGuardComp>\n                    </BeansContext.Provider>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default memo(GridComp);\n", "import type { ComponentSelector, IGridBodyComp, RowContainerName } from '@ag-grid-community/core';\nimport {\n    CssClassManager,\n    FakeHScrollComp,\n    FakeVScrollComp,\n    GridBodyCtrl,\n    OverlayWrapperComponent,\n    _setAriaColCount,\n    _setAriaRowCount,\n} from '@ag-grid-community/core';\nimport React, { memo, useCallback, useContext, useMemo, useRef, useState } from 'react';\n\nimport { BeansContext } from './beansContext';\nimport GridHeaderComp from './header/gridHeaderComp';\nimport useReactCommentEffect from './reactComment';\nimport RowContainerComp from './rows/rowContainerComp';\nimport { classesList } from './utils';\n\ninterface SectionProperties {\n    section: React.RefObject<HTMLDivElement>;\n    className: string;\n    style?: React.CSSProperties;\n}\n\nconst GridBodyComp = () => {\n    const { context, resizeObserverService } = useContext(BeansContext);\n\n    const [rowAnimationClass, setRowAnimationClass] = useState<string>('');\n    const [topHeight, setTopHeight] = useState<number>(0);\n    const [bottomHeight, setBottomHeight] = useState<number>(0);\n    const [stickyTopHeight, setStickyTopHeight] = useState<string>('0px');\n    const [stickyTopTop, setStickyTopTop] = useState<string>('0px');\n    const [stickyTopWidth, setStickyTopWidth] = useState<string>('100%');\n    const [stickyBottomHeight, setStickyBottomHeight] = useState<string>('0px');\n    const [stickyBottomBottom, setStickyBottomBottom] = useState<string>('0px');\n    const [stickyBottomWidth, setStickyBottomWidth] = useState<string>('100%');\n    const [topDisplay, setTopDisplay] = useState<string>('');\n    const [bottomDisplay, setBottomDisplay] = useState<string>('');\n\n    const [forceVerticalScrollClass, setForceVerticalScrollClass] = useState<string | null>(null);\n    const [topAndBottomOverflowY, setTopAndBottomOverflowY] = useState<string>('');\n    const [cellSelectableCss, setCellSelectableCss] = useState<string | null>(null);\n\n    // we initialise layoutClass to 'ag-layout-normal', because if we don't, the comp will initially\n    // render with no width (as ag-layout-normal sets width to 0, which is needed for flex) which\n    // gives the grid a massive width, which then renders a massive amount of columns. this problem\n    // is due to React been async, for the non-async version (ie when not using React) this is not a\n    // problem as the UI will finish initialising before we set data.\n    const [layoutClass, setLayoutClass] = useState<string>('ag-layout-normal');\n\n    const cssClassManager = useRef<CssClassManager>();\n    if (!cssClassManager.current) {\n        cssClassManager.current = new CssClassManager(() => eRoot.current);\n    }\n\n    const eRoot = useRef<HTMLDivElement | null>(null);\n    const eTop = useRef<HTMLDivElement>(null);\n    const eStickyTop = useRef<HTMLDivElement>(null);\n    const eStickyBottom = useRef<HTMLDivElement>(null);\n    const eBody = useRef<HTMLDivElement>(null);\n    const eBodyViewport = useRef<HTMLDivElement>(null);\n    const eBottom = useRef<HTMLDivElement>(null);\n\n    const beansToDestroy = useRef<any[]>([]);\n    const destroyFuncs = useRef<(() => void)[]>([]);\n\n    useReactCommentEffect(' AG Grid Body ', eRoot);\n    useReactCommentEffect(' AG Pinned Top ', eTop);\n    useReactCommentEffect(' AG Sticky Top ', eStickyTop);\n    useReactCommentEffect(' AG Middle ', eBodyViewport);\n    useReactCommentEffect(' AG Pinned Bottom ', eBottom);\n\n    const setRef = useCallback((e: HTMLDivElement) => {\n        eRoot.current = e;\n        if (!eRoot.current) {\n            context.destroyBeans(beansToDestroy.current);\n            destroyFuncs.current.forEach((f) => f());\n\n            beansToDestroy.current = [];\n            destroyFuncs.current = [];\n\n            return;\n        }\n\n        if (!context) {\n            return;\n        }\n\n        const attachToDom = (eParent: HTMLElement, eChild: HTMLElement | Comment) => {\n            eParent.appendChild(eChild);\n            destroyFuncs.current.push(() => eParent.removeChild(eChild));\n        };\n        const newComp = (compClass: ComponentSelector['component']) => {\n            const comp = context.createBean(new compClass());\n            beansToDestroy.current.push(comp);\n            return comp;\n        };\n        const addComp = (eParent: HTMLElement, compClass: ComponentSelector['component'], comment: string) => {\n            attachToDom(eParent, document.createComment(comment));\n            attachToDom(eParent, newComp(compClass).getGui());\n        };\n\n        addComp(eRoot.current, FakeHScrollComp, ' AG Fake Horizontal Scroll ');\n        addComp(eRoot.current, OverlayWrapperComponent, ' AG Overlay Wrapper ');\n\n        if (eBody.current) {\n            addComp(eBody.current, FakeVScrollComp, ' AG Fake Vertical Scroll ');\n        }\n        const compProxy: IGridBodyComp = {\n            setRowAnimationCssOnBodyViewport: setRowAnimationClass,\n            setColumnCount: (count: number) => {\n                if (eRoot.current) {\n                    _setAriaColCount(eRoot.current, count);\n                }\n            },\n            setRowCount: (count: number) => {\n                if (eRoot.current) {\n                    _setAriaRowCount(eRoot.current, count);\n                }\n            },\n            setTopHeight,\n            setBottomHeight,\n            setStickyTopHeight,\n            setStickyTopTop,\n            setStickyTopWidth,\n            setTopDisplay,\n            setBottomDisplay,\n            setColumnMovingCss: (cssClass: string, flag: boolean) =>\n                cssClassManager.current!.addOrRemoveCssClass(cssClass, flag),\n            updateLayoutClasses: setLayoutClass,\n            setAlwaysVerticalScrollClass: setForceVerticalScrollClass,\n            setPinnedTopBottomOverflowY: setTopAndBottomOverflowY,\n            setCellSelectableCss: (cssClass: string, flag: boolean) => setCellSelectableCss(flag ? cssClass : null),\n            setBodyViewportWidth: (width: string) => {\n                if (eBodyViewport.current) {\n                    eBodyViewport.current.style.width = width;\n                }\n            },\n            registerBodyViewportResizeListener: (listener: () => void) => {\n                if (eBodyViewport.current) {\n                    const unsubscribeFromResize = resizeObserverService.observeResize(eBodyViewport.current, listener);\n                    destroyFuncs.current.push(() => unsubscribeFromResize());\n                }\n            },\n            setStickyBottomHeight,\n            setStickyBottomBottom,\n            setStickyBottomWidth,\n        };\n\n        const ctrl = context.createBean(new GridBodyCtrl());\n        beansToDestroy.current.push(ctrl);\n        ctrl.setComp(\n            compProxy,\n            eRoot.current,\n            eBodyViewport.current!,\n            eTop.current!,\n            eBottom.current!,\n            eStickyTop.current!,\n            eStickyBottom.current!\n        );\n    }, []);\n\n    const rootClasses = useMemo(() => classesList('ag-root', 'ag-unselectable', layoutClass), [layoutClass]);\n    const bodyViewportClasses = useMemo(\n        () =>\n            classesList(\n                'ag-body-viewport',\n                rowAnimationClass,\n                layoutClass,\n                forceVerticalScrollClass,\n                cellSelectableCss\n            ),\n        [rowAnimationClass, layoutClass, forceVerticalScrollClass, cellSelectableCss]\n    );\n    const bodyClasses = useMemo(() => classesList('ag-body', layoutClass), [layoutClass]);\n    const topClasses = useMemo(() => classesList('ag-floating-top', cellSelectableCss), [cellSelectableCss]);\n    const stickyTopClasses = useMemo(() => classesList('ag-sticky-top', cellSelectableCss), [cellSelectableCss]);\n    const stickyBottomClasses = useMemo(() => classesList('ag-sticky-bottom', cellSelectableCss), [cellSelectableCss]);\n    const bottomClasses = useMemo(() => classesList('ag-floating-bottom', cellSelectableCss), [cellSelectableCss]);\n\n    const topStyle: React.CSSProperties = useMemo(\n        () => ({\n            height: topHeight,\n            minHeight: topHeight,\n            display: topDisplay,\n            overflowY: topAndBottomOverflowY as any,\n        }),\n        [topHeight, topDisplay, topAndBottomOverflowY]\n    );\n\n    const stickyTopStyle: React.CSSProperties = useMemo(\n        () => ({\n            height: stickyTopHeight,\n            top: stickyTopTop,\n            width: stickyTopWidth,\n        }),\n        [stickyTopHeight, stickyTopTop, stickyTopWidth]\n    );\n\n    const stickyBottomStyle: React.CSSProperties = useMemo(\n        () => ({\n            height: stickyBottomHeight,\n            bottom: stickyBottomBottom,\n            width: stickyBottomWidth,\n        }),\n        [stickyBottomHeight, stickyBottomBottom, stickyBottomWidth]\n    );\n\n    const bottomStyle: React.CSSProperties = useMemo(\n        () => ({\n            height: bottomHeight,\n            minHeight: bottomHeight,\n            display: bottomDisplay,\n            overflowY: topAndBottomOverflowY as any,\n        }),\n        [bottomHeight, bottomDisplay, topAndBottomOverflowY]\n    );\n\n    const createRowContainer = (container: RowContainerName) => (\n        <RowContainerComp name={container} key={`${container}-container`} />\n    );\n    const createSection = ({\n        section,\n        children,\n        className,\n        style,\n    }: SectionProperties & { children: RowContainerName[] }) => (\n        <div ref={section} className={className} role=\"presentation\" style={style}>\n            {children.map(createRowContainer)}\n        </div>\n    );\n\n    return (\n        <div ref={setRef} className={rootClasses} role=\"treegrid\">\n            <GridHeaderComp />\n            {createSection({\n                section: eTop,\n                className: topClasses,\n                style: topStyle,\n                children: ['topLeft', 'topCenter', 'topRight', 'topFullWidth'],\n            })}\n            <div className={bodyClasses} ref={eBody} role=\"presentation\">\n                {createSection({\n                    section: eBodyViewport,\n                    className: bodyViewportClasses,\n                    children: ['left', 'center', 'right', 'fullWidth'],\n                })}\n            </div>\n            {createSection({\n                section: eStickyTop,\n                className: stickyTopClasses,\n                style: stickyTopStyle,\n                children: ['stickyTopLeft', 'stickyTopCenter', 'stickyTopRight', 'stickyTopFullWidth'],\n            })}\n            {createSection({\n                section: eStickyBottom,\n                className: stickyBottomClasses,\n                style: stickyBottomStyle,\n                children: ['stickyBottomLeft', 'stickyBottomCenter', 'stickyBottomRight', 'stickyBottomFullWidth'],\n            })}\n            {createSection({\n                section: eBottom,\n                className: bottomClasses,\n                style: bottomStyle,\n                children: ['bottomLeft', 'bottomCenter', 'bottomRight', 'bottomFullWidth'],\n            })}\n        </div>\n    );\n};\n\nexport default memo(GridBodyComp);\n", "import type { IGridHeaderComp } from '@ag-grid-community/core';\nimport { GridHeaderCtrl } from '@ag-grid-community/core';\nimport React, { memo, useCallback, useContext, useMemo, useRef, useState } from 'react';\n\nimport { BeansContext } from '../beansContext';\nimport { CssClasses } from '../utils';\nimport HeaderRowContainerComp from './headerRowContainerComp';\n\nconst GridHeaderComp = () => {\n    const [cssClasses, setCssClasses] = useState<CssClasses>(() => new CssClasses());\n    const [height, setHeight] = useState<string>();\n\n    const { context } = useContext(BeansContext);\n    const eGui = useRef<HTMLDivElement | null>(null);\n    const gridCtrlRef = useRef<GridHeaderCtrl | null>(null);\n\n    const setRef = useCallback((e: HTMLDivElement) => {\n        eGui.current = e;\n        if (!e) {\n            context.destroyBean(gridCtrlRef.current!);\n            gridCtrlRef.current = null;\n            return;\n        }\n        const compProxy: IGridHeaderComp = {\n            addOrRemoveCssClass: (name, on) => setCssClasses((prev) => prev.setClass(name, on)),\n            setHeightAndMinHeight: (height) => setHeight(height),\n        };\n\n        gridCtrlRef.current = context.createBean(new GridHeaderCtrl());\n        gridCtrlRef.current.setComp(compProxy, eGui.current, eGui.current);\n    }, []);\n\n    const className = useMemo(() => {\n        const res = cssClasses.toString();\n        return 'ag-header ' + res;\n    }, [cssClasses]);\n\n    const style = useMemo(\n        () => ({\n            height: height,\n            minHeight: height,\n        }),\n        [height]\n    );\n\n    return (\n        <div ref={setRef} className={className} style={style} role=\"presentation\">\n            <HeaderRowContainerComp pinned={'left'} />\n            <HeaderRowContainerComp pinned={null} />\n            <HeaderRowContainerComp pinned={'right'} />\n        </div>\n    );\n};\n\nexport default memo(GridHeaderComp);\n", "import type { ColumnPinnedType, HeaderRowCtrl, IHeaderRowContainerComp } from '@ag-grid-community/core';\nimport { HeaderRowContainerCtrl } from '@ag-grid-community/core';\nimport React, { memo, useCallback, useContext, useRef, useState } from 'react';\n\nimport { BeansContext } from '../beansContext';\nimport HeaderRowComp from './headerRowComp';\n\nconst HeaderRowContainerComp = (props: { pinned: ColumnPinnedType }) => {\n    const [displayed, setDisplayed] = useState<true | false>(true);\n    const [headerRowCtrls, setHeaderRowCtrls] = useState<HeaderRowCtrl[]>([]);\n\n    const { context } = useContext(BeansContext);\n    const eGui = useRef<HTMLDivElement | null>(null);\n    const eCenterContainer = useRef<HTMLDivElement>(null);\n    const headerRowCtrlRef = useRef<HeaderRowContainerCtrl | null>(null);\n\n    const pinnedLeft = props.pinned === 'left';\n    const pinnedRight = props.pinned === 'right';\n    const centre = !pinnedLeft && !pinnedRight;\n\n    const setRef = useCallback((e: HTMLDivElement) => {\n        eGui.current = e;\n        if (!eGui.current) {\n            context.destroyBean(headerRowCtrlRef.current);\n            headerRowCtrlRef.current = null;\n            return;\n        }\n\n        const compProxy: IHeaderRowContainerComp = {\n            setDisplayed,\n            setCtrls: (ctrls) => setHeaderRowCtrls(ctrls),\n\n            // centre only\n            setCenterWidth: (width) => {\n                if (eCenterContainer.current) {\n                    eCenterContainer.current.style.width = width;\n                }\n            },\n            setViewportScrollLeft: (left) => {\n                if (eGui.current) {\n                    eGui.current.scrollLeft = left;\n                }\n            },\n\n            // pinned only\n            setPinnedContainerWidth: (width) => {\n                if (eGui.current) {\n                    eGui.current.style.width = width;\n                    eGui.current.style.minWidth = width;\n                    eGui.current.style.maxWidth = width;\n                }\n            },\n        };\n\n        headerRowCtrlRef.current = context.createBean(new HeaderRowContainerCtrl(props.pinned));\n        headerRowCtrlRef.current.setComp(compProxy, eGui.current);\n    }, []);\n\n    const className = !displayed ? 'ag-hidden' : '';\n\n    const insertRowsJsx = () => headerRowCtrls.map((ctrl) => <HeaderRowComp ctrl={ctrl} key={ctrl.getInstanceId()} />);\n\n    return (\n        <>\n            {pinnedLeft && (\n                <div\n                    ref={setRef}\n                    className={'ag-pinned-left-header ' + className}\n                    aria-hidden={!displayed}\n                    role=\"rowgroup\"\n                >\n                    {insertRowsJsx()}\n                </div>\n            )}\n            {pinnedRight && (\n                <div\n                    ref={setRef}\n                    className={'ag-pinned-right-header ' + className}\n                    aria-hidden={!displayed}\n                    role=\"rowgroup\"\n                >\n                    {insertRowsJsx()}\n                </div>\n            )}\n            {centre && (\n                <div ref={setRef} className={'ag-header-viewport ' + className} role=\"presentation\">\n                    <div ref={eCenterContainer} className={'ag-header-container'} role=\"rowgroup\">\n                        {insertRowsJsx()}\n                    </div>\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default memo(HeaderRowContainerComp);\n", "import type {\n    AbstractHeaderCellCtrl,\n    HeaderCellCtrl,\n    HeaderFilterCellCtrl,\n    HeaderGroupCellCtrl,\n    HeaderRowCtrl,\n    IHeaderRowComp,\n} from '@ag-grid-community/core';\nimport { HeaderRowType } from '@ag-grid-community/core';\nimport React, { memo, useCallback, useMemo, useRef, useState } from 'react';\n\nimport { agFlushSync, getNextValueIfDifferent } from '../utils';\nimport HeaderCellComp from './headerCellComp';\nimport HeaderFilterCellComp from './headerFilterCellComp';\nimport HeaderGroupCellComp from './headerGroupCellComp';\n\nconst HeaderRowComp = (props: { ctrl: HeaderRowCtrl }) => {\n    const { ctrl } = props;\n\n    const { topOffset, rowHeight } = useMemo(() => ctrl.getTopAndHeight(), []);\n    const ariaRowIndex = ctrl.getAriaRowIndex();\n    const className = ctrl.getHeaderRowClass();\n\n    const [height, setHeight] = useState<string>(() => rowHeight + 'px');\n    const [top, setTop] = useState<string>(() => topOffset + 'px');\n\n    const cellCtrlsRef = useRef<AbstractHeaderCellCtrl[] | null>(null);\n    const prevCellCtrlsRef = useRef<AbstractHeaderCellCtrl[] | null>(null);\n    const [cellCtrls, setCellCtrls] = useState<AbstractHeaderCellCtrl[]>(() => ctrl.getHeaderCtrls());\n\n    const eGui = useRef<HTMLDivElement | null>(null);\n\n    const setRef = useCallback((e: HTMLDivElement) => {\n        eGui.current = e;\n        if (!e) {\n            return;\n        }\n\n        const compProxy: IHeaderRowComp = {\n            setHeight: (height: string) => setHeight(height),\n            setTop: (top: string) => setTop(top),\n            setHeaderCtrls: (ctrls: AbstractHeaderCellCtrl[], forceOrder: boolean, afterScroll: boolean) => {\n                prevCellCtrlsRef.current = cellCtrlsRef.current;\n                cellCtrlsRef.current = ctrls;\n\n                const next = getNextValueIfDifferent(prevCellCtrlsRef.current, ctrls, forceOrder)!;\n                if (next !== prevCellCtrlsRef.current) {\n                    agFlushSync(afterScroll, () => setCellCtrls(next));\n                }\n            },\n            setWidth: (width: string) => {\n                if (eGui.current) {\n                    eGui.current.style.width = width;\n                }\n            },\n        };\n\n        ctrl.setComp(compProxy, false);\n    }, []);\n\n    const style = useMemo(\n        () => ({\n            height: height,\n            top: top,\n        }),\n        [height, top]\n    );\n\n    const createCellJsx = useCallback((cellCtrl: AbstractHeaderCellCtrl) => {\n        switch (ctrl.getType()) {\n            case HeaderRowType.COLUMN_GROUP:\n                return <HeaderGroupCellComp ctrl={cellCtrl as HeaderGroupCellCtrl} key={cellCtrl.getInstanceId()} />;\n\n            case HeaderRowType.FLOATING_FILTER:\n                return <HeaderFilterCellComp ctrl={cellCtrl as HeaderFilterCellCtrl} key={cellCtrl.getInstanceId()} />;\n\n            default:\n                return <HeaderCellComp ctrl={cellCtrl as HeaderCellCtrl} key={cellCtrl.getInstanceId()} />;\n        }\n    }, []);\n\n    return (\n        <div ref={setRef} className={className} role=\"row\" style={style} aria-rowindex={ariaRowIndex}>\n            {cellCtrls.map(createCellJsx)}\n        </div>\n    );\n};\n\nexport default memo(HeaderRowComp);\n", "import type {\n    ColumnSortState,\n    HeaderCellCtrl,\n    IHeader,\n    IHeaderCellComp,\n    UserCompDetails,\n} from '@ag-grid-community/core';\nimport { CssClassManager, _removeAriaSort, _setAriaSort } from '@ag-grid-community/core';\nimport React, { memo, useCallback, useContext, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\n\nimport { BeansContext } from '../beansContext';\nimport { showJsComp } from '../jsComp';\nimport { isComponentStateless } from '../utils';\n\nconst HeaderCellComp = (props: { ctrl: HeaderCellCtrl }) => {\n    const { ctrl } = props;\n    const isAlive = ctrl.isAlive();\n\n    const { context } = useContext(BeansContext);\n    const colId = isAlive ? ctrl.getColId() : undefined;\n    const [userCompDetails, setUserCompDetails] = useState<UserCompDetails>();\n\n    const eGui = useRef<HTMLDivElement | null>(null);\n    const eResize = useRef<HTMLDivElement>(null);\n    const eHeaderCompWrapper = useRef<HTMLDivElement>(null);\n    const userCompRef = useRef<IHeader>();\n\n    const cssClassManager = useRef<CssClassManager>();\n    if (isAlive && !cssClassManager.current) {\n        cssClassManager.current = new CssClassManager(() => eGui.current);\n    }\n    const setRef = useCallback((e: HTMLDivElement) => {\n        eGui.current = e;\n        if (!eGui.current || !isAlive) {\n            return;\n        }\n\n        const compProxy: IHeaderCellComp = {\n            setWidth: (width: string) => {\n                if (eGui.current) {\n                    eGui.current.style.width = width;\n                }\n            },\n            addOrRemoveCssClass: (name: string, on: boolean) => cssClassManager.current!.addOrRemoveCssClass(name, on),\n            setAriaSort: (sort?: ColumnSortState) => {\n                if (eGui.current) {\n                    sort ? _setAriaSort(eGui.current, sort) : _removeAriaSort(eGui.current);\n                }\n            },\n            setUserCompDetails: (compDetails: UserCompDetails) => setUserCompDetails(compDetails),\n            getUserCompInstance: () => userCompRef.current || undefined,\n        };\n\n        ctrl.setComp(compProxy, eGui.current, eResize.current!, eHeaderCompWrapper.current!);\n\n        const selectAllGui = ctrl.getSelectAllGui();\n        eResize.current?.insertAdjacentElement('afterend', selectAllGui);\n    }, []);\n\n    // js comps\n    useLayoutEffect(\n        () => showJsComp(userCompDetails, context, eHeaderCompWrapper.current!, userCompRef),\n        [userCompDetails]\n    );\n\n    // add drag handling, must be done after component is added to the dom\n    useEffect(() => {\n        ctrl.setDragSource(eGui.current!);\n    }, [userCompDetails]);\n\n    const userCompStateless = useMemo(() => {\n        const res = userCompDetails?.componentFromFramework && isComponentStateless(userCompDetails.componentClass);\n        return !!res;\n    }, [userCompDetails]);\n\n    const reactUserComp = userCompDetails && userCompDetails.componentFromFramework;\n    const UserCompClass = userCompDetails && userCompDetails.componentClass;\n\n    return (\n        <div ref={setRef} className=\"ag-header-cell\" col-id={colId} role=\"columnheader\">\n            <div ref={eResize} className=\"ag-header-cell-resize\" role=\"presentation\"></div>\n            <div ref={eHeaderCompWrapper} className=\"ag-header-cell-comp-wrapper\" role=\"presentation\">\n                {reactUserComp && userCompStateless && <UserCompClass {...userCompDetails!.params} />}\n                {reactUserComp && !userCompStateless && (\n                    <UserCompClass {...userCompDetails!.params} ref={userCompRef} />\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default memo(HeaderCellComp);\n", "import type {\n    HeaderFilterCellCtrl,\n    IFloatingFilter,\n    IHeaderFilterCellComp,\n    UserCompDetails,\n} from '@ag-grid-community/core';\nimport { AgPromise } from '@ag-grid-community/core';\nimport React, { memo, useCallback, useContext, useLayoutEffect, useMemo, useRef, useState } from 'react';\n\nimport { CustomContext } from '../../shared/customComp/customContext';\nimport { FloatingFilterComponentProxy } from '../../shared/customComp/floatingFilterComponentProxy';\nimport type { CustomFloatingFilterCallbacks } from '../../shared/customComp/interfaces';\nimport { warnReactiveCustomComponents } from '../../shared/customComp/util';\nimport { BeansContext } from '../beansContext';\nimport { showJsComp } from '../jsComp';\nimport { CssClasses, isComponentStateless } from '../utils';\n\nconst HeaderFilterCellComp = (props: { ctrl: HeaderFilterCellCtrl }) => {\n    const { context, gos } = useContext(BeansContext);\n\n    const [cssClasses, setCssClasses] = useState<CssClasses>(\n        () => new CssClasses('ag-header-cell', 'ag-floating-filter')\n    );\n    const [cssBodyClasses, setBodyCssClasses] = useState<CssClasses>(() => new CssClasses());\n    const [cssButtonWrapperClasses, setButtonWrapperCssClasses] = useState<CssClasses>(\n        () => new CssClasses('ag-floating-filter-button', 'ag-hidden')\n    );\n    const [buttonWrapperAriaHidden, setButtonWrapperAriaHidden] = useState<'true' | 'false'>('false');\n    const [userCompDetails, setUserCompDetails] = useState<UserCompDetails | null>();\n    const [, setRenderKey] = useState<number>(1);\n\n    const eGui = useRef<HTMLDivElement | null>(null);\n    const eFloatingFilterBody = useRef<HTMLDivElement>(null);\n    const eButtonWrapper = useRef<HTMLDivElement>(null);\n    const eButtonShowMainFilter = useRef<HTMLButtonElement>(null);\n\n    const userCompResolve = useRef<(value: IFloatingFilter) => void>();\n    const userCompPromise = useRef<AgPromise<IFloatingFilter>>();\n\n    const userCompRef = (value: IFloatingFilter) => {\n        // We skip when it's un-setting\n        if (value == null) {\n            return;\n        }\n\n        userCompResolve.current && userCompResolve.current(value);\n    };\n\n    const { ctrl } = props;\n\n    const setRef = useCallback((e: HTMLDivElement) => {\n        eGui.current = e;\n        if (!eGui.current) {\n            return;\n        }\n\n        userCompPromise.current = new AgPromise<IFloatingFilter>((resolve) => {\n            userCompResolve.current = resolve;\n        });\n\n        const compProxy: IHeaderFilterCellComp = {\n            addOrRemoveCssClass: (name, on) => setCssClasses((prev) => prev.setClass(name, on)),\n            addOrRemoveBodyCssClass: (name, on) => setBodyCssClasses((prev) => prev.setClass(name, on)),\n            setButtonWrapperDisplayed: (displayed) => {\n                setButtonWrapperCssClasses((prev) => prev.setClass('ag-hidden', !displayed));\n                setButtonWrapperAriaHidden(!displayed ? 'true' : 'false');\n            },\n            setWidth: (width) => {\n                if (eGui.current) {\n                    eGui.current.style.width = width;\n                }\n            },\n            setCompDetails: (compDetails) => setUserCompDetails(compDetails),\n            getFloatingFilterComp: () => (userCompPromise.current ? userCompPromise.current : null),\n            setMenuIcon: (eIcon) => eButtonShowMainFilter.current?.appendChild(eIcon),\n        };\n\n        ctrl.setComp(compProxy, eGui.current, eButtonShowMainFilter.current!, eFloatingFilterBody.current!);\n    }, []);\n\n    // js comps\n    useLayoutEffect(\n        () => showJsComp(userCompDetails, context, eFloatingFilterBody.current!, userCompRef),\n        [userCompDetails]\n    );\n\n    const className = useMemo(() => cssClasses.toString(), [cssClasses]);\n    const bodyClassName = useMemo(() => cssBodyClasses.toString(), [cssBodyClasses]);\n    const buttonWrapperClassName = useMemo(() => cssButtonWrapperClasses.toString(), [cssButtonWrapperClasses]);\n\n    const userCompStateless = useMemo(() => {\n        const res =\n            userCompDetails &&\n            userCompDetails.componentFromFramework &&\n            isComponentStateless(userCompDetails.componentClass);\n        return !!res;\n    }, [userCompDetails]);\n\n    const reactiveCustomComponents = useMemo(() => gos.get('reactiveCustomComponents'), []);\n    const floatingFilterCompProxy = useMemo(() => {\n        if (userCompDetails) {\n            if (reactiveCustomComponents) {\n                const compProxy = new FloatingFilterComponentProxy(userCompDetails!.params, () =>\n                    setRenderKey((prev) => prev + 1)\n                );\n                userCompRef(compProxy);\n                return compProxy;\n            } else if (userCompDetails.componentFromFramework) {\n                warnReactiveCustomComponents();\n            }\n        }\n        return undefined;\n    }, [userCompDetails]);\n    const floatingFilterProps = floatingFilterCompProxy?.getProps();\n\n    const reactUserComp = userCompDetails && userCompDetails.componentFromFramework;\n    const UserCompClass = userCompDetails && userCompDetails.componentClass;\n\n    return (\n        <div ref={setRef} className={className} role=\"gridcell\">\n            <div ref={eFloatingFilterBody} className={bodyClassName} role=\"presentation\">\n                {reactUserComp && !reactiveCustomComponents && (\n                    <UserCompClass {...userCompDetails!.params} ref={userCompStateless ? () => {} : userCompRef} />\n                )}\n                {reactUserComp && reactiveCustomComponents && (\n                    <CustomContext.Provider\n                        value={{\n                            setMethods: (methods: CustomFloatingFilterCallbacks) =>\n                                floatingFilterCompProxy!.setMethods(methods),\n                        }}\n                    >\n                        <UserCompClass {...floatingFilterProps!} />\n                    </CustomContext.Provider>\n                )}\n            </div>\n            <div\n                ref={eButtonWrapper}\n                aria-hidden={buttonWrapperAriaHidden}\n                className={buttonWrapperClassName}\n                role=\"presentation\"\n            >\n                <button\n                    ref={eButtonShowMainFilter}\n                    type=\"button\"\n                    className=\"ag-button ag-floating-filter-button-button\"\n                    tabIndex={-1}\n                ></button>\n            </div>\n        </div>\n    );\n};\n\nexport default memo(HeaderFilterCellComp);\n", "import type {\n    HeaderGroupCellCtrl,\n    IHeaderGroupCellComp,\n    IHeaderGroupComp,\n    UserCompDetails,\n} from '@ag-grid-community/core';\nimport React, { memo, useCallback, useContext, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\n\nimport { BeansContext } from '../beansContext';\nimport { showJsComp } from '../jsComp';\nimport { CssClasses, isComponentStateless } from '../utils';\n\nconst HeaderGroupCellComp = (props: { ctrl: HeaderGroupCellCtrl }) => {\n    const { context } = useContext(BeansContext);\n    const { ctrl } = props;\n\n    const [cssClasses, setCssClasses] = useState<CssClasses>(() => new CssClasses());\n    const [cssResizableClasses, setResizableCssClasses] = useState<CssClasses>(() => new CssClasses());\n    const [resizableAriaHidden, setResizableAriaHidden] = useState<'true' | 'false'>('false');\n    const [ariaExpanded, setAriaExpanded] = useState<'true' | 'false' | undefined>();\n    const [userCompDetails, setUserCompDetails] = useState<UserCompDetails>();\n    const colId = useMemo(() => ctrl.getColId(), []);\n\n    const eGui = useRef<HTMLDivElement | null>(null);\n    const eResize = useRef<HTMLDivElement>(null);\n    const userCompRef = useRef<IHeaderGroupComp>();\n\n    const setRef = useCallback((e: HTMLDivElement) => {\n        eGui.current = e;\n        if (!eGui.current) {\n            return;\n        }\n        const compProxy: IHeaderGroupCellComp = {\n            setWidth: (width: string) => {\n                if (eGui.current) {\n                    eGui.current.style.width = width;\n                }\n            },\n            addOrRemoveCssClass: (name: string, on: boolean) => setCssClasses((prev) => prev.setClass(name, on)),\n            setUserCompDetails: (compDetails: UserCompDetails) => setUserCompDetails(compDetails),\n            setResizableDisplayed: (displayed: boolean) => {\n                setResizableCssClasses((prev) => prev.setClass('ag-hidden', !displayed));\n                setResizableAriaHidden(!displayed ? 'true' : 'false');\n            },\n            setAriaExpanded: (expanded: 'true' | 'false' | undefined) => setAriaExpanded(expanded),\n            getUserCompInstance: () => userCompRef.current || undefined,\n        };\n\n        ctrl.setComp(compProxy, eGui.current, eResize.current!);\n    }, []);\n\n    // js comps\n    useLayoutEffect(() => showJsComp(userCompDetails, context, eGui.current!), [userCompDetails]);\n\n    // add drag handling, must be done after component is added to the dom\n    useEffect(() => {\n        if (eGui.current) {\n            ctrl.setDragSource(eGui.current);\n        }\n    }, [userCompDetails]);\n\n    const userCompStateless = useMemo(() => {\n        const res = userCompDetails?.componentFromFramework && isComponentStateless(userCompDetails.componentClass);\n        return !!res;\n    }, [userCompDetails]);\n\n    const className = useMemo(() => 'ag-header-group-cell ' + cssClasses.toString(), [cssClasses]);\n    const resizableClassName = useMemo(\n        () => 'ag-header-cell-resize ' + cssResizableClasses.toString(),\n        [cssResizableClasses]\n    );\n\n    const reactUserComp = userCompDetails && userCompDetails.componentFromFramework;\n    const UserCompClass = userCompDetails && userCompDetails.componentClass;\n\n    return (\n        <div ref={setRef} className={className} col-id={colId} role=\"columnheader\" aria-expanded={ariaExpanded}>\n            {reactUserComp && userCompStateless && <UserCompClass {...userCompDetails!.params} />}\n            {reactUserComp && !userCompStateless && <UserCompClass {...userCompDetails!.params} ref={userCompRef} />}\n            <div ref={eResize} aria-hidden={resizableAriaHidden} className={resizableClassName}></div>\n        </div>\n    );\n};\n\nexport default memo(HeaderGroupCellComp);\n", "import type { RefObject } from 'react';\nimport { useEffect } from 'react';\n\nconst useReactCommentEffect = (comment: string, eForCommentRef: RefObject<HTMLElement>) => {\n    useEffect(() => {\n        const eForComment = eForCommentRef.current;\n        if (eForComment) {\n            const eParent = eForComment.parentElement;\n            if (eParent) {\n                const eComment = document.createComment(comment);\n                eParent.insertBefore(eComment, eForComment);\n\n                return () => {\n                    eParent.removeChild(eComment);\n                };\n            }\n        }\n    }, [comment]);\n};\n\nexport default useReactCommentEffect;\n", "import type { IRowContainerComp, RowContainerName, RowCtrl } from '@ag-grid-community/core';\nimport { RowContainerCtrl, _getRowContainerOptions } from '@ag-grid-community/core';\nimport React, { memo, useCallback, useContext, useMemo, useRef, useState } from 'react';\n\nimport { BeansContext } from '../beansContext';\nimport useReactCommentEffect from '../reactComment';\nimport { agFlushSync, classesList, getNextValueIfDifferent } from '../utils';\nimport RowComp from './rowComp';\n\nconst RowContainerComp = (params: { name: RowContainerName }) => {\n    const { context } = useContext(BeansContext);\n\n    const { name } = params;\n    const containerOptions = useMemo(() => _getRowContainerOptions(name), [name]);\n\n    const eViewport = useRef<HTMLDivElement | null>(null);\n    const eContainer = useRef<HTMLDivElement | null>(null);\n\n    const rowCtrlsRef = useRef<RowCtrl[]>([]);\n    const prevRowCtrlsRef = useRef<RowCtrl[]>([]);\n    const [rowCtrlsOrdered, setRowCtrlsOrdered] = useState<RowCtrl[]>(() => []);\n    const domOrderRef = useRef<boolean>(false);\n    const rowContainerCtrlRef = useRef<RowContainerCtrl | null>();\n\n    const viewportClasses = useMemo(() => classesList(containerOptions.viewport), [containerOptions]);\n    const containerClasses = useMemo(() => classesList(containerOptions.container), [containerOptions]);\n\n    const isCenter = containerOptions.type === 'center';\n\n    const topLevelRef = isCenter ? eViewport : eContainer;\n\n    useReactCommentEffect(' AG Row Container ' + name + ' ', topLevelRef);\n\n    const areElementsReady = useCallback(() => {\n        if (isCenter) {\n            return eViewport.current != null && eContainer.current != null;\n        }\n        return eContainer.current != null;\n    }, []);\n\n    const areElementsRemoved = useCallback(() => {\n        if (isCenter) {\n            return eViewport.current == null && eContainer.current == null;\n        }\n        return eContainer.current == null;\n    }, []);\n\n    const setRef = useCallback(() => {\n        if (areElementsRemoved()) {\n            context.destroyBean(rowContainerCtrlRef.current);\n            rowContainerCtrlRef.current = null;\n        }\n        if (areElementsReady()) {\n            const updateRowCtrlsOrdered = (useFlushSync: boolean) => {\n                const next = getNextValueIfDifferent(\n                    prevRowCtrlsRef.current,\n                    rowCtrlsRef.current,\n                    domOrderRef.current\n                )!;\n                if (next !== prevRowCtrlsRef.current) {\n                    prevRowCtrlsRef.current = next;\n                    agFlushSync(useFlushSync, () => setRowCtrlsOrdered(next));\n                }\n            };\n\n            const compProxy: IRowContainerComp = {\n                setViewportHeight: (height: string) => {\n                    if (eViewport.current) {\n                        eViewport.current.style.height = height;\n                    }\n                },\n                setRowCtrls: ({ rowCtrls, useFlushSync }: { rowCtrls: RowCtrl[]; useFlushSync?: boolean }) => {\n                    const useFlush = !!useFlushSync && rowCtrlsRef.current.length > 0 && rowCtrls.length > 0;\n                    // Keep a record of the rowCtrls in case we need to reset the Dom order.\n                    rowCtrlsRef.current = rowCtrls;\n                    updateRowCtrlsOrdered(useFlush);\n                },\n                setDomOrder: (domOrder: boolean) => {\n                    if (domOrderRef.current != domOrder) {\n                        domOrderRef.current = domOrder;\n                        updateRowCtrlsOrdered(false);\n                    }\n                },\n                setContainerWidth: (width: string) => {\n                    if (eContainer.current) {\n                        eContainer.current.style.width = width;\n                    }\n                },\n                setOffsetTop: (offset: string) => {\n                    if (eContainer.current) {\n                        eContainer.current.style.transform = `translateY(${offset})`;\n                    }\n                },\n            };\n\n            rowContainerCtrlRef.current = context.createBean(new RowContainerCtrl(name));\n            rowContainerCtrlRef.current.setComp(compProxy, eContainer.current!, eViewport.current!);\n        }\n    }, [areElementsReady, areElementsRemoved]);\n\n    const setContainerRef = useCallback(\n        (e: HTMLDivElement) => {\n            eContainer.current = e;\n            setRef();\n        },\n        [setRef]\n    );\n    const setViewportRef = useCallback(\n        (e: HTMLDivElement) => {\n            eViewport.current = e;\n            setRef();\n        },\n        [setRef]\n    );\n\n    const buildContainer = () => (\n        <div className={containerClasses} ref={setContainerRef} role={'rowgroup'}>\n            {rowCtrlsOrdered.map((rowCtrl) => (\n                <RowComp\n                    rowCtrl={rowCtrl}\n                    containerType={containerOptions.type}\n                    key={rowCtrl.getInstanceId()}\n                ></RowComp>\n            ))}\n        </div>\n    );\n\n    return (\n        <>\n            {isCenter ? (\n                <div className={viewportClasses} ref={setViewportRef} role=\"presentation\">\n                    {buildContainer()}\n                </div>\n            ) : (\n                buildContainer()\n            )}\n        </>\n    );\n};\n\nexport default memo(RowContainerComp);\n", "import type {\n    CellCtrl,\n    ICellRenderer,\n    IRowComp,\n    RowContainerType,\n    RowCtrl,\n    RowStyle,\n    UserCompDetails,\n} from '@ag-grid-community/core';\nimport { CssClassManager } from '@ag-grid-community/core';\nimport React, { memo, useCallback, useContext, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\n\nimport { BeansContext } from '../beansContext';\nimport CellComp from '../cells/cellComp';\nimport { showJsComp } from '../jsComp';\nimport { agFlushSync, getNextValueIfDifferent, isComponentStateless } from '../utils';\n\nconst RowComp = (params: { rowCtrl: RowCtrl; containerType: RowContainerType }) => {\n    const { context, gos } = useContext(BeansContext);\n    const { rowCtrl, containerType } = params;\n\n    const tabIndex = rowCtrl.getTabIndex();\n    const domOrderRef = useRef<boolean>(rowCtrl.getDomOrder());\n    const isFullWidth = rowCtrl.isFullWidth();\n\n    // Flag used to avoid problematic initialState setter funcs being called on a dead / non displayed row.\n    // Due to async rendering its possible for the row to be destroyed before React has had a chance to render it.\n    const isDisplayed = rowCtrl.getRowNode().displayed;\n    const [rowIndex, setRowIndex] = useState<string | null>(() => (isDisplayed ? rowCtrl.getRowIndex() : null));\n    const [rowId, setRowId] = useState<string | null>(() => rowCtrl.getRowId());\n    const [rowBusinessKey, setRowBusinessKey] = useState<string | null>(() => rowCtrl.getBusinessKey());\n\n    const [userStyles, setUserStyles] = useState<RowStyle | undefined>(() => rowCtrl.getRowStyles());\n    const cellCtrlsRef = useRef<CellCtrl[] | null>(null);\n    const prevCellCtrlsRef = useRef<CellCtrl[] | null>(null);\n    const [cellCtrls, setCellCtrls] = useState<CellCtrl[] | null>(() => null);\n    const [fullWidthCompDetails, setFullWidthCompDetails] = useState<UserCompDetails>();\n\n    // these styles have initial values, so element is placed into the DOM with them,\n    // rather than an transition getting applied.\n    const [top, setTop] = useState<string | undefined>(() =>\n        isDisplayed ? rowCtrl.getInitialRowTop(containerType) : undefined\n    );\n    const [transform, setTransform] = useState<string | undefined>(() =>\n        isDisplayed ? rowCtrl.getInitialTransform(containerType) : undefined\n    );\n\n    const eGui = useRef<HTMLDivElement | null>(null);\n    const fullWidthCompRef = useRef<ICellRenderer>();\n\n    const autoHeightSetup = useRef<boolean>(false);\n    const [autoHeightSetupAttempt, setAutoHeightSetupAttempt] = useState<number>(0);\n\n    // puts autoHeight onto full with detail rows. this needs trickery, as we need\n    // the HTMLElement for the provided Detail Cell Renderer, however the Detail Cell Renderer\n    // could be a stateless React Func Comp which won't work with useRef, so we need\n    // to poll (we limit to 10) looking for the Detail HTMLElement (which will be the only\n    // child) after the fullWidthCompDetails is set.\n    // I think this looping could be avoided if we use a ref Callback instead of useRef,\n    useEffect(() => {\n        if (autoHeightSetup.current) {\n            return;\n        }\n        if (!fullWidthCompDetails) {\n            return;\n        }\n        if (autoHeightSetupAttempt > 10) {\n            return;\n        }\n\n        const eChild = eGui.current?.firstChild as HTMLElement;\n        if (eChild) {\n            rowCtrl.setupDetailRowAutoHeight(eChild);\n            autoHeightSetup.current = true;\n        } else {\n            setAutoHeightSetupAttempt((prev) => prev + 1);\n        }\n    }, [fullWidthCompDetails, autoHeightSetupAttempt]);\n\n    const cssClassManager = useRef<CssClassManager>();\n    if (!cssClassManager.current) {\n        cssClassManager.current = new CssClassManager(() => eGui.current);\n    }\n    const setRef = useCallback((e: HTMLDivElement) => {\n        eGui.current = e;\n\n        if (!eGui.current) {\n            rowCtrl.unsetComp(containerType);\n            return;\n        }\n\n        // because React is asynchronous, it's possible the RowCtrl is no longer a valid RowCtrl. This can\n        // happen if user calls two API methods one after the other, with the second API invalidating the rows\n        // the first call created. Thus the rows for the first call could still get created even though no longer needed.\n        if (!rowCtrl.isAlive()) {\n            return;\n        }\n\n        const compProxy: IRowComp = {\n            // the rowTop is managed by state, instead of direct style manipulation by rowCtrl (like all the other styles)\n            // as we need to have an initial value when it's placed into he DOM for the first time, for animation to work.\n            setTop,\n            setTransform,\n\n            // i found using React for managing classes at the row level was to slow, as modifying classes caused a lot of\n            // React code to execute, so avoiding React for managing CSS Classes made the grid go much faster.\n            addOrRemoveCssClass: (name, on) => cssClassManager.current!.addOrRemoveCssClass(name, on),\n\n            setDomOrder: (domOrder) => (domOrderRef.current = domOrder),\n            setRowIndex,\n            setRowId,\n            setRowBusinessKey,\n            setUserStyles,\n            // if we don't maintain the order, then cols will be ripped out and into the dom\n            // when cols reordered, which would stop the CSS transitions from working\n            setCellCtrls: (next, useFlushSync) => {\n                prevCellCtrlsRef.current = cellCtrlsRef.current;\n                cellCtrlsRef.current = next;\n\n                const nextCells = getNextValueIfDifferent(prevCellCtrlsRef.current, next, domOrderRef.current);\n                if (nextCells !== prevCellCtrlsRef.current) {\n                    agFlushSync(useFlushSync, () => setCellCtrls(nextCells));\n                }\n            },\n            showFullWidth: (compDetails) => setFullWidthCompDetails(compDetails),\n            getFullWidthCellRenderer: () => fullWidthCompRef.current,\n            refreshFullWidth: (getUpdatedParams) => {\n                if (canRefreshFullWidthRef.current) {\n                    setFullWidthCompDetails((prevFullWidthCompDetails) => ({\n                        ...prevFullWidthCompDetails!,\n                        params: getUpdatedParams(),\n                    }));\n                    return true;\n                } else {\n                    if (!fullWidthCompRef.current || !fullWidthCompRef.current.refresh) {\n                        return false;\n                    }\n                    return fullWidthCompRef.current.refresh(getUpdatedParams());\n                }\n            },\n        };\n        rowCtrl.setComp(compProxy, eGui.current, containerType);\n    }, []);\n\n    useLayoutEffect(\n        () => showJsComp(fullWidthCompDetails, context, eGui.current!, fullWidthCompRef),\n        [fullWidthCompDetails]\n    );\n\n    const rowStyles = useMemo(() => {\n        const res = { top, transform };\n\n        Object.assign(res, userStyles);\n        return res;\n    }, [top, transform, userStyles]);\n\n    const showFullWidthFramework = isFullWidth && fullWidthCompDetails && fullWidthCompDetails.componentFromFramework;\n    const showCells = !isFullWidth && cellCtrls != null;\n\n    const reactFullWidthCellRendererStateless = useMemo(() => {\n        const res =\n            fullWidthCompDetails?.componentFromFramework && isComponentStateless(fullWidthCompDetails.componentClass);\n        return !!res;\n    }, [fullWidthCompDetails]);\n\n    // needs to be a ref to avoid stale closure, as used in compProxy passed to row ctrl\n    const canRefreshFullWidthRef = useRef(false);\n    useEffect(() => {\n        canRefreshFullWidthRef.current =\n            reactFullWidthCellRendererStateless && !!fullWidthCompDetails && !!gos.get('reactiveCustomComponents');\n    }, [reactFullWidthCellRendererStateless, fullWidthCompDetails]);\n\n    const showCellsJsx = () =>\n        cellCtrls?.map((cellCtrl) => (\n            <CellComp\n                cellCtrl={cellCtrl}\n                editingRow={rowCtrl.isEditing()}\n                printLayout={rowCtrl.isPrintLayout()}\n                key={cellCtrl.getInstanceId()}\n            />\n        ));\n\n    const showFullWidthFrameworkJsx = () => {\n        const FullWidthComp = fullWidthCompDetails!.componentClass;\n        return (\n            <>\n                {reactFullWidthCellRendererStateless && <FullWidthComp {...fullWidthCompDetails!.params} />}\n                {!reactFullWidthCellRendererStateless && (\n                    <FullWidthComp {...fullWidthCompDetails!.params} ref={fullWidthCompRef} />\n                )}\n            </>\n        );\n    };\n\n    return (\n        <div\n            ref={setRef}\n            role={'row'}\n            style={rowStyles}\n            row-index={rowIndex}\n            row-id={rowId}\n            row-business-key={rowBusinessKey}\n            tabIndex={tabIndex}\n        >\n            {showCells && showCellsJsx()}\n            {showFullWidthFramework && showFullWidthFrameworkJsx()}\n        </div>\n    );\n};\n\nexport default memo(RowComp);\n", "import type {\n    CellCtrl,\n    CellStyle,\n    Component,\n    ICellComp,\n    ICellEditor,\n    ICellEditorComp,\n    ICellRendererComp,\n    UserCompDetails,\n} from '@ag-grid-community/core';\nimport { CssClassManager, _removeFromParent } from '@ag-grid-community/core';\nimport type { MutableRefObject } from 'react';\nimport React, { memo, useCallback, useContext, useLayoutEffect, useMemo, useRef, useState } from 'react';\n\nimport { CellEditorComponentProxy } from '../../shared/customComp/cellEditorComponentProxy';\nimport { CustomContext } from '../../shared/customComp/customContext';\nimport type { CustomCellEditorCallbacks } from '../../shared/customComp/interfaces';\nimport { warnReactiveCustomComponents } from '../../shared/customComp/util';\nimport { BeansContext } from '../beansContext';\nimport { isComponentStateless } from '../utils';\nimport PopupEditorComp from './popupEditorComp';\nimport useJsCellRenderer from './showJsRenderer';\n\nexport enum CellCompState {\n    ShowValue,\n    EditValue,\n}\n\nconst jsxEditorProxy = (\n    editDetails: EditDetails,\n    CellEditorClass: any,\n    setRef: (cellEditor: ICellEditor | undefined) => void\n) => {\n    const { compProxy } = editDetails;\n    setRef(compProxy);\n\n    const props = compProxy!.getProps();\n\n    const isStateless = isComponentStateless(CellEditorClass);\n\n    return (\n        <CustomContext.Provider\n            value={{\n                setMethods: (methods: CustomCellEditorCallbacks) => compProxy!.setMethods(methods),\n            }}\n        >\n            {isStateless && <CellEditorClass {...props} />}\n            {!isStateless && <CellEditorClass {...props} ref={(ref: any) => compProxy!.setRef(ref)} />}\n        </CustomContext.Provider>\n    );\n};\n\nconst jsxEditor = (\n    editDetails: EditDetails,\n    CellEditorClass: any,\n    setRef: (cellEditor: ICellEditor | undefined) => void\n) => {\n    const newFormat = editDetails.compProxy;\n\n    return (\n        <>\n            {!newFormat && <CellEditorClass {...editDetails.compDetails.params} ref={setRef} />}\n            {newFormat && jsxEditorProxy(editDetails, CellEditorClass, setRef)}\n        </>\n    );\n};\n\nconst jsxEditValue = (\n    editDetails: EditDetails,\n    setInlineCellEditorRef: (cellEditor: ICellEditor | undefined) => void,\n    setPopupCellEditorRef: (cellEditor: ICellEditor | undefined) => void,\n    eGui: HTMLElement,\n    cellCtrl: CellCtrl,\n    jsEditorComp: ICellEditorComp | undefined\n) => {\n    const compDetails = editDetails.compDetails;\n    const CellEditorClass = compDetails.componentClass;\n\n    const reactInlineEditor = compDetails.componentFromFramework && !editDetails.popup;\n    const reactPopupEditor = compDetails.componentFromFramework && editDetails.popup;\n    const jsPopupEditor = !compDetails.componentFromFramework && editDetails.popup;\n\n    return (\n        <>\n            {reactInlineEditor && jsxEditor(editDetails, CellEditorClass, setInlineCellEditorRef)}\n\n            {reactPopupEditor && (\n                <PopupEditorComp\n                    editDetails={editDetails}\n                    cellCtrl={cellCtrl}\n                    eParentCell={eGui}\n                    wrappedContent={jsxEditor(editDetails, CellEditorClass, setPopupCellEditorRef)}\n                />\n            )}\n\n            {jsPopupEditor && jsEditorComp && (\n                <PopupEditorComp\n                    editDetails={editDetails}\n                    cellCtrl={cellCtrl}\n                    eParentCell={eGui}\n                    jsChildComp={jsEditorComp}\n                />\n            )}\n        </>\n    );\n};\n\nconst jsxShowValue = (\n    showDetails: RenderDetails,\n    key: number,\n    parentId: string,\n    cellRendererRef: MutableRefObject<any>,\n    showCellWrapper: boolean,\n    reactCellRendererStateless: boolean,\n    setECellValue: (ref: any) => void\n) => {\n    const { compDetails, value } = showDetails;\n\n    const noCellRenderer = !compDetails;\n    const reactCellRenderer = compDetails && compDetails.componentFromFramework;\n\n    const CellRendererClass = compDetails && compDetails.componentClass;\n\n    // if we didn't do this, objects would cause React error. we depend on objects for things\n    // like the aggregation functions avg and count, which return objects and depend on toString()\n    // getting called.\n    const valueForNoCellRenderer = value?.toString ? value.toString() : value;\n\n    const bodyJsxFunc = () => (\n        <>\n            {noCellRenderer && <>{valueForNoCellRenderer}</>}\n            {reactCellRenderer && !reactCellRendererStateless && (\n                <CellRendererClass {...compDetails!.params} key={key} ref={cellRendererRef} />\n            )}\n            {reactCellRenderer && reactCellRendererStateless && (\n                <CellRendererClass {...compDetails!.params} key={key} />\n            )}\n        </>\n    );\n\n    return (\n        <>\n            {showCellWrapper ? (\n                <span role=\"presentation\" id={`cell-${parentId}`} className=\"ag-cell-value\" ref={setECellValue}>\n                    {bodyJsxFunc()}\n                </span>\n            ) : (\n                bodyJsxFunc()\n            )}\n        </>\n    );\n};\n\nexport interface RenderDetails {\n    compDetails: UserCompDetails | undefined;\n    value?: any;\n    force?: boolean;\n}\nexport interface EditDetails {\n    compDetails: UserCompDetails;\n    popup?: boolean;\n    popupPosition?: 'over' | 'under';\n    compProxy?: CellEditorComponentProxy;\n}\n\nconst CellComp = (props: { cellCtrl: CellCtrl; printLayout: boolean; editingRow: boolean }) => {\n    const { context } = useContext(BeansContext);\n    const { cellCtrl, printLayout, editingRow } = props;\n\n    const tabIndex = cellCtrl.getTabIndex();\n    const colId = cellCtrl.getColumnIdSanitised();\n    const cellInstanceId = cellCtrl.getInstanceId();\n\n    // Only provide an initial state when not using a Cell Renderer so that we do not display a raw value before the cell renderer is created.\n    const [renderDetails, setRenderDetails] = useState<RenderDetails | undefined>(() =>\n        cellCtrl.isCellRenderer()\n            ? undefined\n            : { compDetails: undefined, value: cellCtrl.getValueToDisplay(), force: false }\n    );\n    const [editDetails, setEditDetails] = useState<EditDetails>();\n    const [renderKey, setRenderKey] = useState<number>(1);\n\n    const [userStyles, setUserStyles] = useState<CellStyle>();\n\n    const [includeSelection, setIncludeSelection] = useState<boolean>(false);\n    const [includeRowDrag, setIncludeRowDrag] = useState<boolean>(false);\n    const [includeDndSource, setIncludeDndSource] = useState<boolean>(false);\n\n    const [jsEditorComp, setJsEditorComp] = useState<ICellEditorComp>();\n\n    // useMemo as more then just accessing a boolean on the cellCtrl\n    const forceWrapper = useMemo(() => cellCtrl.isForceWrapper(), [cellCtrl]);\n    const cellAriaRole = useMemo(() => cellCtrl.getCellAriaRole(), [cellCtrl]);\n    const eGui = useRef<HTMLDivElement | null>(null);\n    const cellRendererRef = useRef<any>(null);\n    const jsCellRendererRef = useRef<ICellRendererComp>();\n    const cellEditorRef = useRef<ICellEditor>();\n\n    const eCellWrapper = useRef<HTMLDivElement>();\n    const cellWrapperDestroyFuncs = useRef<(() => void)[]>([]);\n\n    // when setting the ref, we also update the state item to force a re-render\n    const eCellValue = useRef<HTMLDivElement>();\n    const [cellValueVersion, setCellValueVersion] = useState(0);\n    const setCellValueRef = useCallback((ref: HTMLDivElement) => {\n        eCellValue.current = ref;\n        setCellValueVersion((v) => v + 1);\n    }, []);\n\n    const showTools = renderDetails != null && (includeSelection || includeDndSource || includeRowDrag);\n    const showCellWrapper = forceWrapper || showTools;\n\n    const setCellEditorRef = useCallback(\n        (popup: boolean, cellEditor: ICellEditor | undefined) => {\n            cellEditorRef.current = cellEditor;\n            if (cellEditor) {\n                const editingCancelledByUserComp = cellEditor.isCancelBeforeStart && cellEditor.isCancelBeforeStart();\n                if (editingCancelledByUserComp) {\n                    // we cannot set state inside render, so hack is to do it in next VM turn\n                    setTimeout(() => {\n                        cellCtrl.stopEditing(true);\n                        cellCtrl.focusCell(true);\n                    });\n                }\n            }\n        },\n        [cellCtrl]\n    );\n\n    const setPopupCellEditorRef = useCallback(\n        (cellRenderer: ICellEditor | undefined) => setCellEditorRef(true, cellRenderer),\n        [setCellEditorRef]\n    );\n\n    const setInlineCellEditorRef = useCallback(\n        (cellRenderer: ICellEditor | undefined) => setCellEditorRef(false, cellRenderer),\n        [setCellEditorRef]\n    );\n\n    const cssClassManager = useRef<CssClassManager>();\n\n    if (!cssClassManager.current) {\n        cssClassManager.current = new CssClassManager(() => eGui.current);\n    }\n\n    useJsCellRenderer(renderDetails, showCellWrapper, eCellValue.current, cellValueVersion, jsCellRendererRef, eGui);\n\n    // if RenderDetails changed, need to call refresh. This is not our preferred way (the preferred\n    // way for React is just allow the new props to propagate down to the React Cell Renderer)\n    // however we do this for backwards compatibility, as having refresh used to be supported.\n    const lastRenderDetails = useRef<RenderDetails>();\n    useLayoutEffect(() => {\n        const oldDetails = lastRenderDetails.current;\n        const newDetails = renderDetails;\n        lastRenderDetails.current = renderDetails;\n\n        // if not updating renderDetails, do nothing\n        if (\n            oldDetails == null ||\n            oldDetails.compDetails == null ||\n            newDetails == null ||\n            newDetails.compDetails == null\n        ) {\n            return;\n        }\n\n        const oldCompDetails = oldDetails.compDetails;\n        const newCompDetails = newDetails.compDetails;\n\n        // if different Cell Renderer, then do nothing, as renderer will be recreated\n        if (oldCompDetails.componentClass != newCompDetails.componentClass) {\n            return;\n        }\n\n        // if no refresh method, do nothing\n        if (cellRendererRef.current == null || cellRendererRef.current.refresh == null) {\n            return;\n        }\n\n        const result = cellRendererRef.current.refresh(newCompDetails.params);\n        if (result != true) {\n            // increasing the render key forces the refresh. this is undocumented (for React users,\n            // we don't document the refresh method, instead we tell them to act on new params).\n            // however the GroupCellRenderer has this logic in it and would need a small refactor\n            // to get it working without using refresh() returning false. so this hack staying in,\n            // in React if refresh() is implemented and returns false (or undefined), we force a refresh\n            setRenderKey((prev) => prev + 1);\n        }\n    }, [renderDetails]);\n\n    useLayoutEffect(() => {\n        const doingJsEditor = editDetails && !editDetails.compDetails.componentFromFramework;\n        if (!doingJsEditor) {\n            return;\n        }\n\n        const compDetails = editDetails!.compDetails;\n        const isPopup = editDetails!.popup === true;\n\n        const cellEditorPromise = compDetails.newAgStackInstance();\n\n        cellEditorPromise.then((cellEditor: ICellEditorComp) => {\n            if (!cellEditor) {\n                return;\n            }\n\n            const compGui = cellEditor.getGui();\n\n            setCellEditorRef(isPopup, cellEditor);\n\n            if (!isPopup) {\n                const parentEl = (forceWrapper ? eCellWrapper : eGui).current;\n                parentEl?.appendChild(compGui);\n\n                cellEditor.afterGuiAttached && cellEditor.afterGuiAttached();\n            }\n\n            setJsEditorComp(cellEditor);\n        });\n\n        return () => {\n            cellEditorPromise.then((cellEditor) => {\n                const compGui = cellEditor.getGui();\n                context.destroyBean(cellEditor);\n                setCellEditorRef(isPopup, undefined);\n                setJsEditorComp(undefined);\n\n                if (compGui && compGui.parentElement) {\n                    compGui.parentElement.removeChild(compGui);\n                }\n            });\n        };\n    }, [editDetails]);\n\n    // tool widgets effect\n    const setCellWrapperRef = useCallback(\n        (ref: HTMLDivElement) => {\n            eCellWrapper.current = ref;\n\n            if (!eCellWrapper.current) {\n                cellWrapperDestroyFuncs.current.forEach((f) => f());\n                cellWrapperDestroyFuncs.current = [];\n                return;\n            }\n\n            const addComp = (comp: Component | undefined) => {\n                if (comp) {\n                    const eGui = comp.getGui();\n                    eCellWrapper.current?.insertAdjacentElement('afterbegin', eGui);\n                    cellWrapperDestroyFuncs.current.push(() => {\n                        context.destroyBean(comp);\n                        _removeFromParent(eGui);\n                    });\n                }\n                return comp;\n            };\n\n            if (includeSelection) {\n                const checkboxSelectionComp = cellCtrl.createSelectionCheckbox();\n                addComp(checkboxSelectionComp);\n            }\n\n            if (includeDndSource) {\n                addComp(cellCtrl.createDndSource());\n            }\n\n            if (includeRowDrag) {\n                addComp(cellCtrl.createRowDragComp());\n            }\n        },\n        [cellCtrl, context, includeDndSource, includeRowDrag, includeSelection]\n    );\n\n    // we use layout effect here as we want to synchronously process setComp and it's side effects\n    // to ensure the component is fully initialised prior to the first browser paint. See AG-7018.\n\n    const setRef = useCallback((ref: HTMLDivElement | null) => {\n        eGui.current = ref;\n        if (!eGui.current) {\n            return;\n        }\n\n        if (!cellCtrl) {\n            return;\n        }\n\n        const compProxy: ICellComp = {\n            addOrRemoveCssClass: (name, on) => cssClassManager.current!.addOrRemoveCssClass(name, on),\n            setUserStyles: (styles: CellStyle) => setUserStyles(styles),\n            getFocusableElement: () => eGui.current!,\n\n            setIncludeSelection: (include) => setIncludeSelection(include),\n            setIncludeRowDrag: (include) => setIncludeRowDrag(include),\n            setIncludeDndSource: (include) => setIncludeDndSource(include),\n\n            getCellEditor: () => cellEditorRef.current || null,\n            getCellRenderer: () => (cellRendererRef.current ? cellRendererRef.current : jsCellRendererRef.current),\n            getParentOfValue: () =>\n                eCellValue.current ? eCellValue.current : eCellWrapper.current ? eCellWrapper.current : eGui.current,\n\n            setRenderDetails: (compDetails, value, force) => {\n                setRenderDetails((prev) => {\n                    if (prev?.compDetails !== compDetails || prev?.value !== value || prev?.force !== force) {\n                        return {\n                            value,\n                            compDetails,\n                            force,\n                        };\n                    } else {\n                        return prev;\n                    }\n                });\n            },\n\n            setEditDetails: (compDetails, popup, popupPosition, reactiveCustomComponents) => {\n                if (compDetails) {\n                    let compProxy = undefined;\n                    if (reactiveCustomComponents) {\n                        compProxy = new CellEditorComponentProxy(compDetails.params!, () =>\n                            setRenderKey((prev) => prev + 1)\n                        );\n                    } else if (compDetails.componentFromFramework) {\n                        warnReactiveCustomComponents();\n                    }\n                    // start editing\n                    setEditDetails({\n                        compDetails: compDetails!,\n                        popup,\n                        popupPosition,\n                        compProxy,\n                    });\n                    if (!popup) {\n                        setRenderDetails(undefined);\n                    }\n                } else {\n                    // stop editing\n                    setEditDetails((editDetails) => {\n                        if (editDetails?.compProxy) {\n                            // if we're using the proxy, we have to manually clear the ref\n                            cellEditorRef.current = undefined;\n                        }\n                        return undefined;\n                    });\n                }\n            },\n        };\n\n        const cellWrapperOrUndefined = eCellWrapper.current || undefined;\n        cellCtrl.setComp(compProxy, eGui.current, cellWrapperOrUndefined, printLayout, editingRow);\n    }, []);\n\n    const reactCellRendererStateless = useMemo(() => {\n        const res =\n            renderDetails &&\n            renderDetails.compDetails &&\n            renderDetails.compDetails.componentFromFramework &&\n            isComponentStateless(renderDetails.compDetails.componentClass);\n\n        return !!res;\n    }, [renderDetails]);\n\n    useLayoutEffect(() => {\n        if (!eGui.current) {\n            return;\n        }\n        cssClassManager.current!.addOrRemoveCssClass('ag-cell-value', !showCellWrapper);\n        cssClassManager.current!.addOrRemoveCssClass('ag-cell-inline-editing', !!editDetails && !editDetails.popup);\n        cssClassManager.current!.addOrRemoveCssClass('ag-cell-popup-editing', !!editDetails && !!editDetails.popup);\n        cssClassManager.current!.addOrRemoveCssClass('ag-cell-not-inline-editing', !editDetails || !!editDetails.popup);\n        cellCtrl.getRowCtrl()?.setInlineEditingCss(!!editDetails);\n\n        if (cellCtrl.shouldRestoreFocus() && !cellCtrl.isEditing()) {\n            // Restore focus to the cell if it was focused before and not editing.\n            // If it is editing then it is likely the focus was moved to the editor and we should not move it back.\n            eGui.current.focus({ preventScroll: true });\n        }\n    });\n\n    const showContents = () => (\n        <>\n            {renderDetails != null &&\n                jsxShowValue(\n                    renderDetails,\n                    renderKey,\n                    cellInstanceId,\n                    cellRendererRef,\n                    showCellWrapper,\n                    reactCellRendererStateless,\n                    setCellValueRef\n                )}\n            {editDetails != null &&\n                jsxEditValue(\n                    editDetails,\n                    setInlineCellEditorRef,\n                    setPopupCellEditorRef,\n                    eGui.current!,\n                    cellCtrl,\n                    jsEditorComp\n                )}\n        </>\n    );\n\n    return (\n        <div ref={setRef} style={userStyles} tabIndex={tabIndex} role={cellAriaRole} col-id={colId}>\n            {showCellWrapper ? (\n                <div className=\"ag-cell-wrapper\" role=\"presentation\" ref={setCellWrapperRef}>\n                    {showContents()}\n                </div>\n            ) : (\n                showContents()\n            )}\n        </div>\n    );\n};\n\nexport default memo(CellComp);\n", "import type { ICellEditor, ICellEditorParams } from '@ag-grid-community/core';\nimport { AgPromise } from '@ag-grid-community/core';\n\nimport { addOptionalMethods } from './customComponentWrapper';\nimport type { CustomCellEditorCallbacks, CustomCellEditorProps } from './interfaces';\n\nexport class CellEditorComponentProxy implements ICellEditor {\n    private value: any;\n    private componentInstance?: any;\n    private resolveInstanceCreated?: () => void;\n    private instanceCreated: AgPromise<void> = new AgPromise((resolve) => {\n        this.resolveInstanceCreated = resolve;\n    });\n    private readonly onValueChange = (value: any) => this.updateValue(value);\n\n    constructor(\n        private cellEditorParams: ICellEditorParams,\n        private readonly refreshProps: () => void\n    ) {\n        this.value = cellEditorParams.value;\n    }\n\n    public getProps(): CustomCellEditorProps {\n        return {\n            ...this.cellEditorParams,\n            initialValue: this.cellEditorParams.value,\n            value: this.value,\n            onValueChange: this.onValueChange,\n        };\n    }\n\n    public getValue(): any {\n        return this.value;\n    }\n\n    public refresh(params: ICellEditorParams): void {\n        this.cellEditorParams = params;\n        this.refreshProps();\n    }\n\n    public setMethods(methods: CustomCellEditorCallbacks): void {\n        addOptionalMethods(this.getOptionalMethods(), methods, this);\n    }\n\n    public getInstance(): AgPromise<any> {\n        return this.instanceCreated.then(() => this.componentInstance);\n    }\n\n    public setRef(componentInstance: any): void {\n        this.componentInstance = componentInstance;\n        this.resolveInstanceCreated?.();\n        this.resolveInstanceCreated = undefined;\n    }\n\n    private getOptionalMethods(): string[] {\n        return ['isCancelBeforeStart', 'isCancelAfterEnd', 'focusIn', 'focusOut', 'afterGuiAttached'];\n    }\n\n    private updateValue(value: any): void {\n        this.value = value;\n        this.refreshProps();\n    }\n}\n", "import type { CellCtrl } from '@ag-grid-community/core';\nimport type { PopupEditorWrapper } from '@ag-grid-community/core';\nimport React, { memo, useContext, useState } from 'react';\nimport { createPortal } from 'react-dom';\n\nimport { BeansContext } from '../beansContext';\nimport { useEffectOnce } from '../useEffectOnce';\nimport type { EditDetails } from './cellComp';\n\nconst PopupEditorComp = (props: {\n    editDetails: EditDetails;\n    cellCtrl: CellCtrl;\n    eParentCell: HTMLElement;\n    wrappedContent?: any;\n    jsChildComp?: any;\n}) => {\n    const [popupEditorWrapper, setPopupEditorWrapper] = useState<PopupEditorWrapper>();\n\n    const { context, popupService, localeService, gos, editService } = useContext(BeansContext);\n\n    useEffectOnce(() => {\n        const { editDetails, cellCtrl, eParentCell } = props;\n        const { compDetails } = editDetails;\n\n        const useModelPopup = gos.get('stopEditingWhenCellsLoseFocus');\n\n        const wrapper = context.createBean(editService!.createPopupEditorWrapper(compDetails.params));\n        const ePopupGui = wrapper.getGui();\n\n        if (props.jsChildComp) {\n            const eChildGui = props.jsChildComp.getGui();\n            if (eChildGui) {\n                ePopupGui.appendChild(eChildGui);\n            }\n        }\n\n        const positionParams = {\n            column: cellCtrl.getColumn(),\n            rowNode: cellCtrl.getRowNode(),\n            type: 'popupCellEditor',\n            eventSource: eParentCell,\n            ePopup: ePopupGui,\n            position: editDetails!.popupPosition,\n            keepWithinBounds: true,\n        };\n\n        const positionCallback = popupService.positionPopupByComponent.bind(popupService, positionParams);\n\n        const translate = localeService.getLocaleTextFunc();\n\n        const addPopupRes = popupService.addPopup({\n            modal: useModelPopup,\n            eChild: ePopupGui,\n            closeOnEsc: true,\n            closedCallback: () => {\n                cellCtrl.onPopupEditorClosed();\n            },\n            anchorToElement: eParentCell,\n            positionCallback,\n            ariaLabel: translate('ariaLabelCellEditor', 'Cell Editor'),\n        });\n\n        const hideEditorPopup: (() => void) | undefined = addPopupRes ? addPopupRes.hideFunc : undefined;\n\n        setPopupEditorWrapper(wrapper);\n\n        props.jsChildComp && props.jsChildComp.afterGuiAttached && props.jsChildComp.afterGuiAttached();\n\n        return () => {\n            if (hideEditorPopup != null) {\n                hideEditorPopup();\n            }\n            context.destroyBean(wrapper);\n        };\n    });\n\n    return (\n        <>\n            {popupEditorWrapper &&\n                props.wrappedContent &&\n                createPortal(props.wrappedContent, popupEditorWrapper.getGui())}\n        </>\n    );\n};\n\nexport default memo(PopupEditorComp);\n", "import { useEffect, useRef, useState } from 'react';\n\n/** This should only be used a last resort for working around StrictMode!\n * Currently only used for Popup Editor due to our approach of showing a popup.\n */\nexport const useEffectOnce = (effect: () => void | (() => void)) => {\n    const effectFn = useRef<() => void | (() => void)>(effect);\n    const destroyFn = useRef<void | (() => void)>();\n    const effectCalled = useRef(false);\n    const rendered = useRef(false);\n    const [, setVal] = useState<number>(0);\n\n    if (effectCalled.current) {\n        rendered.current = true;\n    }\n\n    useEffect(() => {\n        // only execute the effect first time around\n        if (!effectCalled.current) {\n            destroyFn.current = effectFn.current();\n            effectCalled.current = true;\n        }\n\n        // this forces one render after the effect is run\n        setVal((val) => val + 1);\n\n        return () => {\n            // if the comp didn't render since the useEffect was called,\n            // we know it's the dummy React cycle\n            if (!rendered.current) {\n                return;\n            }\n\n            // otherwise this is not a dummy destroy, so call the destroy func\n            if (destroyFn.current) {\n                destroyFn.current();\n            }\n        };\n    }, []);\n};\n", "import type { ICellRendererComp } from '@ag-grid-community/core';\nimport type { MutableRefObject } from 'react';\nimport { useCallback, useContext, useEffect } from 'react';\n\nimport { BeansContext } from '../beansContext';\nimport type { RenderDetails } from './cellComp';\n\nconst useJsCellRenderer = (\n    showDetails: RenderDetails | undefined,\n    showTools: boolean,\n    eCellValue: HTMLElement | undefined,\n    cellValueVersion: number,\n    jsCellRendererRef: MutableRefObject<ICellRendererComp | undefined>,\n    eGui: MutableRefObject<any>\n) => {\n    const { context } = useContext(BeansContext);\n\n    const destroyCellRenderer = useCallback(() => {\n        const comp = jsCellRendererRef.current;\n        if (!comp) {\n            return;\n        }\n\n        const compGui = comp.getGui();\n\n        if (compGui && compGui.parentElement) {\n            compGui.parentElement.removeChild(compGui);\n        }\n\n        context.destroyBean(comp);\n        jsCellRendererRef.current = undefined;\n    }, []);\n\n    // create or refresh JS cell renderer\n    useEffect(() => {\n        const showValue = showDetails != null;\n        const jsCompDetails = showDetails && showDetails.compDetails && !showDetails.compDetails.componentFromFramework;\n        const waitingForToolsSetup = showTools && eCellValue == null;\n        const showComp = showValue && jsCompDetails && !waitingForToolsSetup;\n\n        // if not showing comp, destroy any existing one and return\n        if (!showComp) {\n            destroyCellRenderer();\n            return;\n        }\n\n        const compDetails = showDetails!.compDetails;\n\n        if (jsCellRendererRef.current) {\n            // attempt refresh if refresh method exists\n            const comp = jsCellRendererRef.current;\n            const attemptRefresh = comp.refresh != null && showDetails!.force == false;\n            const refreshResult = attemptRefresh ? comp.refresh(compDetails!.params) : false;\n            const refreshWorked = refreshResult === true || refreshResult === undefined;\n\n            // if refresh worked, nothing else to do\n            if (refreshWorked) {\n                return;\n            }\n\n            // if refresh didn't work, we destroy it and continue, so new cell renderer created below\n            destroyCellRenderer();\n        }\n\n        const promise = compDetails!.newAgStackInstance();\n        if (promise == null) {\n            return;\n        }\n\n        promise.then((comp) => {\n            if (!comp) {\n                return;\n            }\n\n            const compGui = comp.getGui();\n            if (!compGui) {\n                return;\n            }\n\n            const parent = showTools ? eCellValue! : eGui.current!;\n            parent.appendChild(compGui);\n\n            jsCellRendererRef.current = comp;\n        });\n        // We do not return the destroy here as we want to keep the comp alive for our custom refresh approach above\n    }, [showDetails, showTools, cellValueVersion]);\n\n    // this effect makes sure destroyCellRenderer gets called when the\n    // component is destroyed. as the other effect only updates when there\n    // is a change in state\n    useEffect(() => {\n        return destroyCellRenderer;\n    }, []);\n};\n\nexport default useJsCellRenderer;\n", "import type { GridCtrl, ITabGuard } from '@ag-grid-community/core';\nimport { TabGuardClassNames, TabGuardCtrl } from '@ag-grid-community/core';\nimport type { ForwardRefRenderFunction } from 'react';\nimport React, { forwardRef, memo, useCallback, useContext, useImperativeHandle, useRef } from 'react';\n\nimport { BeansContext } from './beansContext';\n\nexport interface TabGuardCompCallback {\n    forceFocusOutOfContainer(up?: boolean): void;\n}\n\ninterface TabGuardProps {\n    children: React.ReactNode;\n    eFocusableElement: HTMLDivElement;\n    forceFocusOutWhenTabGuardsAreEmpty?: boolean;\n    gridCtrl: GridCtrl;\n    onTabKeyDown: (e: KeyboardEvent) => void;\n}\n\nconst TabGuardCompRef: ForwardRefRenderFunction<TabGuardCompCallback, TabGuardProps> = (\n    props: any,\n    forwardRef: any\n) => {\n    const { children, eFocusableElement, onTabKeyDown, gridCtrl, forceFocusOutWhenTabGuardsAreEmpty } = props;\n    const { context } = useContext(BeansContext);\n\n    const topTabGuardRef = useRef<HTMLDivElement | null>(null);\n    const bottomTabGuardRef = useRef<HTMLDivElement | null>(null);\n    const tabGuardCtrlRef = useRef<TabGuardCtrl | null>();\n\n    const setTabIndex = (value?: string | null) => {\n        const processedValue = value == null ? undefined : parseInt(value, 10).toString();\n\n        [topTabGuardRef, bottomTabGuardRef].forEach((tabGuard) => {\n            if (processedValue === undefined) {\n                tabGuard.current?.removeAttribute('tabindex');\n            } else {\n                tabGuard.current?.setAttribute('tabindex', processedValue);\n            }\n        });\n    };\n\n    useImperativeHandle(forwardRef, () => ({\n        forceFocusOutOfContainer(up?: boolean) {\n            tabGuardCtrlRef.current?.forceFocusOutOfContainer(up);\n        },\n    }));\n\n    const setupCtrl = useCallback(() => {\n        if (!topTabGuardRef.current && !bottomTabGuardRef.current) {\n            // Clean up after both refs have been removed\n            context.destroyBean(tabGuardCtrlRef.current);\n            tabGuardCtrlRef.current = null;\n            return;\n        }\n\n        if (topTabGuardRef.current && bottomTabGuardRef.current) {\n            const compProxy: ITabGuard = {\n                setTabIndex,\n            };\n\n            tabGuardCtrlRef.current = context.createBean(\n                new TabGuardCtrl({\n                    comp: compProxy,\n                    eTopGuard: topTabGuardRef.current,\n                    eBottomGuard: bottomTabGuardRef.current,\n                    eFocusableElement: eFocusableElement,\n                    onTabKeyDown: onTabKeyDown,\n                    forceFocusOutWhenTabGuardsAreEmpty: forceFocusOutWhenTabGuardsAreEmpty,\n                    focusInnerElement: (fromBottom: any) => gridCtrl.focusInnerElement(fromBottom),\n                })\n            );\n        }\n    }, []);\n\n    const setTopRef = useCallback(\n        (e: HTMLDivElement) => {\n            topTabGuardRef.current = e;\n            setupCtrl();\n        },\n        [setupCtrl]\n    );\n    const setBottomRef = useCallback(\n        (e: HTMLDivElement) => {\n            bottomTabGuardRef.current = e;\n            setupCtrl();\n        },\n        [setupCtrl]\n    );\n\n    const createTabGuard = (side: 'top' | 'bottom') => {\n        const className = side === 'top' ? TabGuardClassNames.TAB_GUARD_TOP : TabGuardClassNames.TAB_GUARD_BOTTOM;\n\n        return (\n            <div\n                className={`${TabGuardClassNames.TAB_GUARD} ${className}`}\n                role=\"presentation\"\n                ref={side === 'top' ? setTopRef : setBottomRef}\n            ></div>\n        );\n    };\n\n    return (\n        <>\n            {createTabGuard('top')}\n            {children}\n            {createTabGuard('bottom')}\n        </>\n    );\n};\n\nconst TabGuardComp = forwardRef(TabGuardCompRef);\n\nexport default memo(TabGuardComp);\n", "import type { BeanCollection, CtrlsService, IRenderStatusService } from '@ag-grid-community/core';\nimport { BeanStub } from '@ag-grid-community/core';\n\nexport class RenderStatusService extends BeanStub implements IRenderStatusService {\n    private ctrlsService!: CtrlsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.ctrlsService = beans.ctrlsService;\n    }\n\n    public areHeaderCellsRendered(): boolean {\n        return this.ctrlsService\n            .getHeaderRowContainerCtrls()\n            .every((container) => container.getAllCtrls().every((ctrl) => ctrl.areCellsRendered()));\n    }\n}\n", "import type {\n    BaseCellEditor,\n    BaseDate,\n    BaseDateParams,\n    BaseFilter,\n    BaseFilterParams,\n    BaseFloatingFilter,\n    BaseMenuItem,\n    BaseMenuItemParams,\n    BaseToolPanelParams,\n    ICellEditorParams,\n    ICellRendererParams,\n    IDetailCellRendererParams,\n    IFilter,\n    IFloatingFilterParams,\n    IGroupCellRendererParams,\n    IHeaderGroupParams,\n    IHeaderParams,\n    ILoadingCellRendererParams,\n    ILoadingOverlayParams,\n    INoRowsOverlayParams,\n    IStatusPanelParams,\n    ITooltipParams,\n} from '@ag-grid-community/core';\nimport { useContext } from 'react';\n\nimport { CustomContext } from './customContext';\n\n// *** Props ***\n\n/** Props provided to custom cell editor components */\nexport interface CustomCellEditorProps<TData = any, TValue = any, TContext = any>\n    extends ICellEditorParams<TData, TValue, TContext> {\n    /** The value in the cell when editing started. */\n    initialValue: TValue | null | undefined;\n    /** The current value for the editor. */\n    value: TValue | null | undefined;\n    /** Callback that should be called every time the value in the editor changes. */\n    onValueChange: (value: TValue | null | undefined) => void;\n}\n\n/** Props provided to custom date components */\nexport interface CustomDateProps<TData = any, TContext = any> extends BaseDateParams<TData, TContext> {\n    /** The current date for the component. */\n    date: Date | null;\n    /** Callback that should be called every time the date in the component changes. */\n    onDateChange: (date: Date | null) => void;\n}\n\n/** Props provided to custom filter components */\nexport interface CustomFilterProps<TData = any, TContext = any, TModel = any>\n    extends BaseFilterParams<TData, TContext> {\n    /** The current filter model for the component. */\n    model: TModel | null;\n    /** Callback that should be called every time the model in the component changes. */\n    onModelChange: (model: TModel | null) => void;\n    /**\n     * Callback that can be optionally called every time the filter UI changes.\n     * The grid will respond with emitting a FilterModifiedEvent.\n     * Apart from emitting the event, the grid takes no further action.\n     */\n    onUiChange: () => void;\n}\n\n/** Props provided to custom floating filter components */\nexport interface CustomFloatingFilterProps<P = IFilter, TData = any, TContext = any, TModel = any>\n    extends IFloatingFilterParams<P, TData, TContext> {\n    /** The current filter model for the component. */\n    model: TModel | null;\n    /** Callback that should be called every time the model in the component changes. */\n    onModelChange: (model: TModel | null) => void;\n}\n\n/** Props provided to custom tool panel components */\nexport interface CustomToolPanelProps<TData = any, TContext = any, TState = any>\n    extends BaseToolPanelParams<TData, TContext, TState> {\n    /**\n     * The current state for the component (used in grid state).\n     * Initially set to the same value as `initialState`\n     */\n    state: TState | undefined;\n    /**\n     * If using grid state, callback that should be called every time the state in the component changes.\n     * If not using grid state, not required.\n     */\n    onStateChange: (model: TState | undefined) => void;\n}\n\n/** Props provided to custom menu item components */\nexport interface CustomMenuItemProps<TData = any, TContext = any> extends BaseMenuItemParams<TData, TContext> {\n    /** The active status of the item (is it currently hovered with the mouse, or navigated to via the keyboard). */\n    active: boolean;\n    /** If the item is a sub menu, whether it is currently opened or closed. */\n    expanded: boolean;\n    /** Callback that should be called every time the active status is updated (if providing custom behaviour). */\n    onActiveChange: (active: boolean) => void;\n}\n\n/** Props provided to custom loading overlay component */\nexport interface CustomLoadingOverlayProps<TData = any, TContext = any>\n    extends ILoadingOverlayParams<TData, TContext> {}\n\n/** Props provided to custom no-rows overlay component */\nexport interface CustomNoRowsOverlayProps<TData = any, TContext = any> extends INoRowsOverlayParams<TData, TContext> {}\n\n/** Props provided to custom status panel components */\nexport interface CustomStatusPanelProps<TData = any, TContext = any> extends IStatusPanelParams<TData, TContext> {}\n\n/** Props provided to custom cell renderer components */\nexport interface CustomCellRendererProps<TData = any, TValue = any, TContext = any>\n    extends ICellRendererParams<TData, TValue, TContext> {}\n\n/** Props provided to custom detail cell renderer components */\nexport interface CustomDetailCellRendererProps<TData = any, TDetail = any>\n    extends IDetailCellRendererParams<TData, TDetail> {}\n\n/** Props provided to custom group cell renderer components */\nexport interface CustomGroupCellRendererProps<TData = any, TValue = any>\n    extends IGroupCellRendererParams<TData, TValue> {}\n\n/** Props provided to custom header components */\nexport interface CustomHeaderProps<TData = any, TContext = any> extends IHeaderParams<TData, TContext> {}\n\n/** Props provided to custom header group components */\nexport interface CustomHeaderGroupProps<TData = any, TContext = any> extends IHeaderGroupParams<TData, TContext> {}\n\n/** Props provided to custom loading cell renderer components */\nexport interface CustomLoadingCellRendererProps<TData = any, TContext = any>\n    extends ILoadingCellRendererParams<TData, TContext> {}\n\n/** Props provided to custom tooltip components */\nexport interface CustomTooltipProps<TData = any, TValue = any, TContext = any>\n    extends ITooltipParams<TData, TValue, TContext> {}\n\n// *** Callbacks ***\n\n/** Callbacks for custom cell editor components */\nexport interface CustomCellEditorCallbacks extends BaseCellEditor {}\n\n/** Callbacks for custom date components */\nexport interface CustomDateCallbacks extends BaseDate {}\n\n/** Callbacks for custom filter components */\nexport interface CustomFilterCallbacks extends BaseFilter {}\n\n/** Callbacks for custom floating filter components */\nexport interface CustomFloatingFilterCallbacks extends BaseFloatingFilter {}\n\n/** Callbacks for custom menu item components */\nexport interface CustomMenuItemCallbacks extends BaseMenuItem {}\n\n// *** Hooks ***\n\nfunction useGridCustomComponent<M>(methods: M): void {\n    const { setMethods } = useContext(CustomContext);\n    setMethods(methods);\n}\n\n/** Hook to allow custom cell editor component callbacks to be provided to the grid */\nexport function useGridCellEditor(callbacks: CustomCellEditorCallbacks): void {\n    useGridCustomComponent(callbacks);\n}\n\n/** Hook to allow custom date component callbacks to be provided to the grid */\nexport function useGridDate(callbacks: CustomDateCallbacks): void {\n    return useGridCustomComponent(callbacks);\n}\n\n/** Hook to allow custom filter component callbacks to be provided to the grid */\nexport function useGridFilter(callbacks: CustomFilterCallbacks): void {\n    return useGridCustomComponent(callbacks);\n}\n\n/** Hook to allow custom floating filter component callbacks to be provided to the grid */\nexport function useGridFloatingFilter(callbacks: CustomFloatingFilterCallbacks): void {\n    useGridCustomComponent(callbacks);\n}\n\n/** Hook to allow custom menu item component callbacks to be provided to the grid */\nexport function useGridMenuItem(callbacks: CustomMenuItemCallbacks): void {\n    useGridCustomComponent(callbacks);\n}\n"],
  "mappings": "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",
  "names": ["import_react", "import_core", "import_react", "import_react", "React", "Component", "ReactDOM", "setRef", "ref", "React", "import_core", "import_react", "import_react", "React", "import_core", "import_react", "import_react_dom", "Component", "import_core", "import_core", "import_core", "import_core", "import_react", "import_core", "import_react", "import_core", "import_react", "import_core", "import_react", "import_core", "import_react", "import_core", "import_react", "setRef", "React", "import_core", "import_react", "setRef", "React", "import_react", "setRef", "React", "setRef", "height", "top", "React", "setRef", "React", "setRef", "height", "React", "import_react", "import_core", "import_react", "import_core", "import_react", "import_core", "import_react", "import_core", "import_react", "import_react_dom", "import_react", "React", "import_react", "setRef", "React", "eGui", "compProxy", "editDetails", "setRef", "React", "setRef", "React", "setRef", "React", "import_core", "import_react", "forwardRef", "React", "setRef", "React", "import_core", "setRef", "context", "React", "React", "import_react"]
}
