{
  "version": 3,
  "sources": ["../../src/csvExport/baseCreator.ts", "../../src/csvExport/sessions/baseGridSerializingSession.ts", "../../src/csvExport/csvCreator.ts", "../../src/csvExport/downloader.ts", "../../src/csvExport/sessions/csvSerializingSession.ts", "../../src/csvExportModule.ts", "../../src/csvExport/csvExportApi.ts", "../../src/csvExport/gridSerializer.ts", "../../src/version.ts", "../../src/csvExport/xmlFactory.ts", "../../src/csvExport/zipContainer/zipContainerHelper.ts", "../../src/csvExport/zipContainer/compress.ts", "../../src/csvExport/zipContainer/convert.ts", "../../src/csvExport/zipContainer/crcTable.ts", "../../src/csvExport/zipContainer/zipContainer.ts"],
  "sourcesContent": ["import { BeanStub } from '@ag-grid-community/core';\nimport type { ExportParams } from '@ag-grid-community/core';\n\nimport type { BaseCreatorBeans, GridSerializingSession } from './interfaces';\n\nexport abstract class BaseCreator<T, S extends GridSerializingSession<T>, P extends ExportParams<T>> extends BeanStub {\n    private beans: BaseCreatorBeans;\n\n    protected setBeans(beans: BaseCreatorBeans) {\n        this.beans = beans;\n    }\n\n    protected abstract export(userParams?: P, compress?: boolean): void;\n\n    protected abstract getMergedParams(params?: P): P;\n\n    protected getFileName(fileName?: string): string {\n        const extension = this.getDefaultFileExtension();\n\n        if (fileName == null || !fileName.length) {\n            fileName = this.getDefaultFileName();\n        }\n\n        return fileName.indexOf('.') === -1 ? `${fileName}.${extension}` : fileName;\n    }\n\n    protected getData(params: P): string {\n        const serializingSession = this.createSerializingSession(params);\n        return this.beans.gridSerializer.serialize(serializingSession, params);\n    }\n\n    public getDefaultFileName(): string {\n        return `export.${this.getDefaultFileExtension()}`;\n    }\n\n    public abstract createSerializingSession(params?: P): S;\n    public abstract getDefaultFileExtension(): string;\n    public abstract isExportSuppressed(): boolean;\n}\n", "import type {\n    AgColumn,\n    ColumnModel,\n    ColumnNameService,\n    FuncColsService,\n    GridOptionsService,\n    ProcessCellForExportParams,\n    ProcessGroupHeaderForExportParams,\n    ProcessHeaderForExportParams,\n    ProcessRowGroupForExportParams,\n    RowNode,\n    ValueService,\n} from '@ag-grid-community/core';\n\nimport type {\n    GridSerializingParams,\n    GridSerializingSession,\n    RowAccumulator,\n    RowSpanningAccumulator,\n} from '../interfaces';\n\nexport abstract class BaseGridSerializingSession<T> implements GridSerializingSession<T> {\n    public columnModel: ColumnModel;\n    private columnNameService: ColumnNameService;\n    public funcColsService: FuncColsService;\n    public valueService: ValueService;\n    public gos: GridOptionsService;\n    public processCellCallback?: (params: ProcessCellForExportParams) => string;\n    public processHeaderCallback?: (params: ProcessHeaderForExportParams) => string;\n    public processGroupHeaderCallback?: (params: ProcessGroupHeaderForExportParams) => string;\n    public processRowGroupCallback?: (params: ProcessRowGroupForExportParams) => string;\n\n    private groupColumns: AgColumn[] = [];\n\n    constructor(config: GridSerializingParams) {\n        const {\n            columnModel,\n            funcColsService,\n            columnNameService,\n            valueService,\n            gos,\n            processCellCallback,\n            processHeaderCallback,\n            processGroupHeaderCallback,\n            processRowGroupCallback,\n        } = config;\n\n        this.columnModel = columnModel;\n        this.funcColsService = funcColsService;\n        this.columnNameService = columnNameService;\n        this.valueService = valueService;\n        this.gos = gos;\n        this.processCellCallback = processCellCallback;\n        this.processHeaderCallback = processHeaderCallback;\n        this.processGroupHeaderCallback = processGroupHeaderCallback;\n        this.processRowGroupCallback = processRowGroupCallback;\n    }\n\n    abstract addCustomContent(customContent: T): void;\n    abstract onNewHeaderGroupingRow(): RowSpanningAccumulator;\n    abstract onNewHeaderRow(): RowAccumulator;\n    abstract onNewBodyRow(node?: RowNode): RowAccumulator;\n    abstract parse(): string;\n\n    public prepare(columnsToExport: AgColumn[]): void {\n        this.groupColumns = columnsToExport.filter((col) => !!col.getColDef().showRowGroup);\n    }\n\n    public extractHeaderValue(column: AgColumn): string {\n        const value = this.getHeaderName(this.processHeaderCallback, column);\n        return value ?? '';\n    }\n\n    public extractRowCellValue(\n        column: AgColumn,\n        index: number,\n        accumulatedRowIndex: number,\n        type: string,\n        node: RowNode\n    ): { value: any; valueFormatted?: string | null } {\n        // we render the group summary text e.g. \"-> Parent -> Child\"...\n        const hideOpenParents = this.gos.get('groupHideOpenParents');\n        const value =\n            (!hideOpenParents || node.footer) && this.shouldRenderGroupSummaryCell(node, column, index)\n                ? this.createValueForGroupNode(column, node)\n                : this.valueService.getValue(column, node);\n\n        const processedValue = this.processCell({\n            accumulatedRowIndex,\n            rowNode: node,\n            column,\n            value,\n            processCellCallback: this.processCellCallback,\n            type,\n        });\n\n        return processedValue;\n    }\n\n    private shouldRenderGroupSummaryCell(node: RowNode, column: AgColumn, currentColumnIndex: number): boolean {\n        const isGroupNode = node && node.group;\n        // only on group rows\n        if (!isGroupNode) {\n            return false;\n        }\n\n        const currentColumnGroupIndex = this.groupColumns.indexOf(column);\n\n        if (currentColumnGroupIndex !== -1) {\n            if (node.groupData?.[column.getId()] != null) {\n                return true;\n            }\n\n            if (this.gos.isRowModelType('serverSide') && node.group) {\n                return true;\n            }\n\n            // if this is a top level footer, always render`Total` in the left-most cell\n            if (node.footer && node.level === -1) {\n                const colDef = column.getColDef();\n                const isFullWidth = colDef == null || colDef.showRowGroup === true;\n\n                return isFullWidth || colDef.showRowGroup === this.funcColsService.getRowGroupColumns()[0].getId();\n            }\n        }\n\n        const isGroupUseEntireRow = this.gos.isGroupUseEntireRow(this.columnModel.isPivotMode());\n\n        return currentColumnIndex === 0 && isGroupUseEntireRow;\n    }\n\n    private getHeaderName(\n        callback: ((params: ProcessHeaderForExportParams) => string) | undefined,\n        column: AgColumn\n    ): string | null {\n        if (callback) {\n            return callback(this.gos.addGridCommonParams({ column }));\n        }\n\n        return this.columnNameService.getDisplayNameForColumn(column, 'csv', true);\n    }\n\n    private createValueForGroupNode(column: AgColumn, node: RowNode): string {\n        if (this.processRowGroupCallback) {\n            return this.processRowGroupCallback(this.gos.addGridCommonParams({ column, node }));\n        }\n\n        const isTreeData = this.gos.get('treeData');\n        const isSuppressGroupMaintainValueType = this.gos.get('suppressGroupMaintainValueType');\n\n        // if not tree data and not suppressGroupMaintainValueType then we get the value from the group data\n        const getValueFromNode = (node: RowNode) => {\n            if (isTreeData || isSuppressGroupMaintainValueType) {\n                return node.key;\n            }\n            const value = node.groupData?.[column.getId()];\n            if (\n                !value ||\n                !node.rowGroupColumn ||\n                node.rowGroupColumn.getColDef().useValueFormatterForExport === false\n            ) {\n                return value;\n            }\n            return this.valueService.formatValue(node.rowGroupColumn, node, value) ?? value;\n        };\n\n        const isFooter = node.footer;\n        const keys = [getValueFromNode(node)];\n\n        if (!this.gos.isGroupMultiAutoColumn()) {\n            while (node.parent) {\n                node = node.parent;\n                keys.push(getValueFromNode(node));\n            }\n        }\n\n        const groupValue = keys.reverse().join(' -> ');\n\n        return isFooter ? `Total ${groupValue}` : groupValue;\n    }\n\n    private processCell(params: {\n        accumulatedRowIndex: number;\n        rowNode: RowNode;\n        column: AgColumn;\n        value: any;\n        processCellCallback: ((params: ProcessCellForExportParams) => string) | undefined;\n        type: string;\n    }): { value: any; valueFormatted?: string | null } {\n        const { accumulatedRowIndex, rowNode, column, value, processCellCallback, type } = params;\n\n        if (processCellCallback) {\n            return {\n                value:\n                    processCellCallback(\n                        this.gos.addGridCommonParams({\n                            accumulatedRowIndex,\n                            column: column,\n                            node: rowNode,\n                            value: value,\n                            type: type,\n                            parseValue: (valueToParse: string) =>\n                                this.valueService.parseValue(\n                                    column,\n                                    rowNode,\n                                    valueToParse,\n                                    this.valueService.getValue(column, rowNode)\n                                ),\n                            formatValue: (valueToFormat: any) =>\n                                this.valueService.formatValue(column, rowNode, valueToFormat) ?? valueToFormat,\n                        })\n                    ) ?? '',\n            };\n        }\n\n        if (column.getColDef().useValueFormatterForExport !== false) {\n            return {\n                value: value ?? '',\n                valueFormatted: this.valueService.formatValue(column, rowNode, value),\n            };\n        }\n\n        return { value: value ?? '' };\n    }\n}\n", "import type {\n    BeanCollection,\n    ColumnModel,\n    ColumnNameService,\n    CsvCustomContent,\n    CsvExportParams,\n    FuncColsService,\n    ICsvCreator,\n    NamedBean,\n    ValueService,\n} from '@ag-grid-community/core';\nimport { _warnOnce } from '@ag-grid-community/core';\n\nimport { BaseCreator } from './baseCreator';\nimport { Downloader } from './downloader';\nimport type { GridSerializer } from './gridSerializer';\nimport { CsvSerializingSession } from './sessions/csvSerializingSession';\n\nexport class CsvCreator\n    extends BaseCreator<CsvCustomContent, CsvSerializingSession, CsvExportParams>\n    implements NamedBean, ICsvCreator\n{\n    beanName = 'csvCreator' as const;\n\n    private columnModel: ColumnModel;\n    private columnNameService: ColumnNameService;\n    private funcColsService: FuncColsService;\n    private valueService: ValueService;\n    private gridSerializer: GridSerializer;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.columnModel = beans.columnModel;\n        this.columnNameService = beans.columnNameService;\n        this.funcColsService = beans.funcColsService;\n        this.valueService = beans.valueService;\n        this.gridSerializer = beans.gridSerializer as GridSerializer;\n    }\n\n    public postConstruct(): void {\n        this.setBeans({\n            gridSerializer: this.gridSerializer,\n            gos: this.gos,\n        });\n    }\n\n    protected getMergedParams(params?: CsvExportParams): CsvExportParams {\n        const baseParams = this.gos.get('defaultCsvExportParams');\n        return Object.assign({}, baseParams, params);\n    }\n\n    protected export(userParams?: CsvExportParams): void {\n        if (this.isExportSuppressed()) {\n            _warnOnce(`Export cancelled. Export is not allowed as per your configuration.`);\n            return;\n        }\n\n        const mergedParams = this.getMergedParams(userParams);\n        const data = this.getData(mergedParams);\n\n        const packagedFile = new Blob(['\\ufeff', data], { type: 'text/plain' });\n\n        const fileName =\n            typeof mergedParams.fileName === 'function'\n                ? mergedParams.fileName(this.gos.getGridCommonParams())\n                : mergedParams.fileName;\n\n        Downloader.download(this.getFileName(fileName), packagedFile);\n    }\n\n    public exportDataAsCsv(params?: CsvExportParams): void {\n        this.export(params);\n    }\n\n    public getDataAsCsv(params?: CsvExportParams, skipDefaultParams = false): string {\n        const mergedParams = skipDefaultParams ? Object.assign({}, params) : this.getMergedParams(params);\n\n        return this.getData(mergedParams);\n    }\n\n    public getDefaultFileExtension(): string {\n        return 'csv';\n    }\n\n    public createSerializingSession(params?: CsvExportParams): CsvSerializingSession {\n        const { columnModel, columnNameService, funcColsService, valueService, gos } = this;\n        const {\n            processCellCallback,\n            processHeaderCallback,\n            processGroupHeaderCallback,\n            processRowGroupCallback,\n            suppressQuotes,\n            columnSeparator,\n        } = params!;\n\n        return new CsvSerializingSession({\n            columnModel,\n            columnNameService,\n            funcColsService,\n            valueService,\n            gos,\n            processCellCallback: processCellCallback || undefined,\n            processHeaderCallback: processHeaderCallback || undefined,\n            processGroupHeaderCallback: processGroupHeaderCallback || undefined,\n            processRowGroupCallback: processRowGroupCallback || undefined,\n            suppressQuotes: suppressQuotes || false,\n            columnSeparator: columnSeparator || ',',\n        });\n    }\n\n    public isExportSuppressed(): boolean {\n        return this.gos.get('suppressCsvExport');\n    }\n}\n", "import { _warnOnce } from '@ag-grid-community/core';\n\nexport class Downloader {\n    public static download(fileName: string, content: Blob) {\n        const win = document.defaultView || window;\n\n        if (!win) {\n            _warnOnce('There is no `window` associated with the current `document`');\n            return;\n        }\n\n        const element = document.createElement('a');\n        const url = win.URL.createObjectURL(content);\n        element.setAttribute('href', url);\n        element.setAttribute('download', fileName);\n        element.style.display = 'none';\n        document.body.appendChild(element);\n\n        element.dispatchEvent(\n            new MouseEvent('click', {\n                bubbles: false,\n                cancelable: true,\n                view: win,\n            })\n        );\n\n        document.body.removeChild(element);\n\n        win.setTimeout(() => {\n            win.URL.revokeObjectURL(url);\n        }, 0);\n    }\n}\n", "import { _warnOnce } from '@ag-grid-community/core';\nimport type { AgColumn, AgColumnGroup, CsvCustomContent, RowNode } from '@ag-grid-community/core';\n\nimport type { CsvSerializingParams, RowAccumulator, RowSpanningAccumulator } from '../interfaces';\nimport { BaseGridSerializingSession } from './baseGridSerializingSession';\n\nconst LINE_SEPARATOR = '\\r\\n';\n\nexport class CsvSerializingSession extends BaseGridSerializingSession<CsvCustomContent> {\n    private isFirstLine = true;\n    private result: string = '';\n    private suppressQuotes: boolean;\n    private columnSeparator: string;\n\n    constructor(config: CsvSerializingParams) {\n        super(config);\n\n        const { suppressQuotes, columnSeparator } = config;\n\n        this.suppressQuotes = suppressQuotes;\n        this.columnSeparator = columnSeparator;\n    }\n\n    public addCustomContent(content: CsvCustomContent) {\n        if (!content) {\n            return;\n        }\n        if (typeof content === 'string') {\n            if (!/^\\s*\\n/.test(content)) {\n                this.beginNewLine();\n            }\n            // replace whatever newlines are supplied with the style we're using\n            content = content.replace(/\\r?\\n/g, LINE_SEPARATOR);\n            this.result += content;\n        } else {\n            content.forEach((row) => {\n                this.beginNewLine();\n                row.forEach((cell, index) => {\n                    if (index !== 0) {\n                        this.result += this.columnSeparator;\n                    }\n                    this.result += this.putInQuotes(cell.data.value || '');\n                    if (cell.mergeAcross) {\n                        this.appendEmptyCells(cell.mergeAcross);\n                    }\n                });\n            });\n        }\n    }\n\n    public onNewHeaderGroupingRow(): RowSpanningAccumulator {\n        this.beginNewLine();\n\n        return {\n            onColumn: this.onNewHeaderGroupingRowColumn.bind(this),\n        };\n    }\n\n    private onNewHeaderGroupingRowColumn(columnGroup: AgColumnGroup, header: string, index: number, span: number) {\n        if (index != 0) {\n            this.result += this.columnSeparator;\n        }\n\n        this.result += this.putInQuotes(header);\n\n        this.appendEmptyCells(span);\n    }\n\n    private appendEmptyCells(count: number) {\n        for (let i = 1; i <= count; i++) {\n            this.result += this.columnSeparator + this.putInQuotes('');\n        }\n    }\n\n    public onNewHeaderRow(): RowAccumulator {\n        this.beginNewLine();\n\n        return {\n            onColumn: this.onNewHeaderRowColumn.bind(this),\n        };\n    }\n\n    private onNewHeaderRowColumn(column: AgColumn, index: number): void {\n        if (index != 0) {\n            this.result += this.columnSeparator;\n        }\n        this.result += this.putInQuotes(this.extractHeaderValue(column));\n    }\n\n    public onNewBodyRow(): RowAccumulator {\n        this.beginNewLine();\n\n        return {\n            onColumn: this.onNewBodyRowColumn.bind(this),\n        };\n    }\n\n    private onNewBodyRowColumn(column: AgColumn, index: number, node: RowNode): void {\n        if (index != 0) {\n            this.result += this.columnSeparator;\n        }\n        const rowCellValue = this.extractRowCellValue(column, index, index, 'csv', node);\n        this.result += this.putInQuotes(rowCellValue.valueFormatted ?? rowCellValue.value);\n    }\n\n    private putInQuotes(value: any): string {\n        if (this.suppressQuotes) {\n            return value;\n        }\n\n        if (value === null || value === undefined) {\n            return '\"\"';\n        }\n\n        let stringValue: string;\n        if (typeof value === 'string') {\n            stringValue = value;\n        } else if (typeof value.toString === 'function') {\n            stringValue = value.toString();\n        } else {\n            _warnOnce('unknown value type during csv conversion');\n            stringValue = '';\n        }\n\n        // replace each \" with \"\" (ie two sets of double quotes is how to do double quotes in csv)\n        const valueEscaped = stringValue.replace(/\"/g, '\"\"');\n\n        return '\"' + valueEscaped + '\"';\n    }\n\n    public parse(): string {\n        return this.result;\n    }\n\n    private beginNewLine() {\n        if (!this.isFirstLine) {\n            this.result += LINE_SEPARATOR;\n        }\n        this.isFirstLine = false;\n    }\n}\n", "import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames } from '@ag-grid-community/core';\n\nimport { CsvCreator } from './csvExport/csvCreator';\nimport { exportDataAsCsv, getDataAsCsv } from './csvExport/csvExportApi';\nimport { GridSerializer } from './csvExport/gridSerializer';\nimport { VERSION } from './version';\n\nexport const CsvExportCoreModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.CsvExportModule}-core`,\n    beans: [CsvCreator, GridSerializer],\n};\n\nexport const CsvExportApiModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.CsvExportModule}-api`,\n    apiFunctions: {\n        getDataAsCsv,\n        exportDataAsCsv,\n    },\n    dependantModules: [CsvExportCoreModule],\n};\n\nexport const CsvExportModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.CsvExportModule,\n    dependantModules: [CsvExportCoreModule, CsvExportApiModule],\n};\n", "import type { BeanCollection, CsvExportParams } from '@ag-grid-community/core';\n\nexport function getDataAsCsv(beans: BeanCollection, params?: CsvExportParams): string | undefined {\n    return beans.csvCreator?.getDataAsCsv(params);\n}\n\nexport function exportDataAsCsv(beans: BeanCollection, params?: CsvExportParams): void {\n    beans.csvCreator?.exportDataAsCsv(params);\n}\n", "import type {\n    AgColumn,\n    AgColumnGroup,\n    BeanCollection,\n    ColumnModel,\n    ColumnNameService,\n    ExportParams,\n    IClientSideRowModel,\n    IRowModel,\n    ISelectionService,\n    IServerSideRowModel,\n    NamedBean,\n    PinnedRowModel,\n    ProcessGroupHeaderForExportParams,\n    RowNode,\n    RowNodeSorter,\n    ShouldRowBeSkippedParams,\n    SortController,\n    VisibleColsService,\n} from '@ag-grid-community/core';\nimport {\n    BeanStub,\n    GROUP_AUTO_COLUMN_ID,\n    GroupInstanceIdCreator,\n    _compose,\n    _last,\n    isColumnGroup,\n} from '@ag-grid-community/core';\n\nimport type { GridSerializingSession, RowAccumulator, RowSpanningAccumulator } from './interfaces';\n\ntype ProcessGroupHeaderCallback = (params: ProcessGroupHeaderForExportParams) => string;\n\nexport enum RowType {\n    HEADER_GROUPING,\n    HEADER,\n    BODY,\n}\n\nexport class GridSerializer extends BeanStub implements NamedBean {\n    beanName = 'gridSerializer' as const;\n\n    private visibleColsService: VisibleColsService;\n    private columnModel: ColumnModel;\n    private columnNameService: ColumnNameService;\n    private rowModel: IRowModel;\n    private pinnedRowModel: PinnedRowModel;\n    private selectionService: ISelectionService;\n    private rowNodeSorter: RowNodeSorter;\n    private sortController: SortController;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.visibleColsService = beans.visibleColsService;\n        this.columnModel = beans.columnModel;\n        this.columnNameService = beans.columnNameService;\n        this.rowModel = beans.rowModel;\n        this.pinnedRowModel = beans.pinnedRowModel;\n        this.selectionService = beans.selectionService;\n        this.rowNodeSorter = beans.rowNodeSorter;\n        this.sortController = beans.sortController;\n    }\n\n    public serialize<T>(gridSerializingSession: GridSerializingSession<T>, params: ExportParams<T> = {}): string {\n        const { allColumns, columnKeys, skipRowGroups } = params;\n        const columnsToExport = this.getColumnsToExport(\n            allColumns,\n            skipRowGroups,\n            columnKeys as (string | AgColumn)[] | undefined\n        );\n\n        const serializeChain = _compose<GridSerializingSession<T>>(\n            // first pass, put in the header names of the cols\n            this.prepareSession(columnsToExport),\n            this.prependContent(params),\n            this.exportColumnGroups(params, columnsToExport),\n            this.exportHeaders(params, columnsToExport),\n            this.processPinnedTopRows(params, columnsToExport),\n            this.processRows(params, columnsToExport),\n            this.processPinnedBottomRows(params, columnsToExport),\n            this.appendContent(params)\n        );\n\n        return serializeChain(gridSerializingSession).parse();\n    }\n\n    private processRow<T>(\n        gridSerializingSession: GridSerializingSession<T>,\n        params: ExportParams<T>,\n        columnsToExport: AgColumn[],\n        node: RowNode\n    ): void {\n        const rowSkipper: (params: ShouldRowBeSkippedParams) => boolean = params.shouldRowBeSkipped || (() => false);\n        const skipSingleChildrenGroup = this.gos.get('groupRemoveSingleChildren');\n        const skipLowestSingleChildrenGroup = this.gos.get('groupRemoveLowestSingleChildren');\n        // if onlySelected, we ignore groupHideOpenParents as the user has explicitly selected the rows they wish to export.\n        // similarly, if specific rowNodes are provided we do the same. (the clipboard service uses rowNodes to define which rows to export)\n        const isClipboardExport = params.rowPositions != null;\n        const isExplicitExportSelection = isClipboardExport || !!params.onlySelected;\n        const hideOpenParents = this.gos.get('groupHideOpenParents') && !isExplicitExportSelection;\n        const isLeafNode = this.columnModel.isPivotMode() ? node.leafGroup : !node.group;\n        const isFooter = !!node.footer;\n        const shouldSkipLowestGroup = skipLowestSingleChildrenGroup && node.leafGroup;\n        const shouldSkipCurrentGroup =\n            node.allChildrenCount === 1 &&\n            node.childrenAfterGroup?.length === 1 &&\n            (skipSingleChildrenGroup || shouldSkipLowestGroup);\n\n        if (\n            (!isLeafNode && !isFooter && (params.skipRowGroups || shouldSkipCurrentGroup || hideOpenParents)) ||\n            (params.onlySelected && !node.isSelected()) ||\n            (params.skipPinnedTop && node.rowPinned === 'top') ||\n            (params.skipPinnedBottom && node.rowPinned === 'bottom')\n        ) {\n            return;\n        }\n\n        // if we are in pivotMode, then the grid will show the root node only\n        // if it's not a leaf group\n        const nodeIsRootNode = node.level === -1;\n\n        if (nodeIsRootNode && !isLeafNode && !isFooter) {\n            return;\n        }\n\n        const shouldRowBeSkipped: boolean = rowSkipper(this.gos.addGridCommonParams({ node }));\n\n        if (shouldRowBeSkipped) {\n            return;\n        }\n\n        const rowAccumulator: RowAccumulator = gridSerializingSession.onNewBodyRow(node);\n        columnsToExport.forEach((column: AgColumn, index: number) => {\n            rowAccumulator.onColumn(column, index, node);\n        });\n\n        if (params.getCustomContentBelowRow) {\n            const content = params.getCustomContentBelowRow(this.gos.addGridCommonParams({ node }));\n            if (content) {\n                gridSerializingSession.addCustomContent(content);\n            }\n        }\n    }\n\n    private appendContent<T>(\n        params: ExportParams<T>\n    ): (gridSerializingSession: GridSerializingSession<T>) => GridSerializingSession<T> {\n        return (gridSerializingSession: GridSerializingSession<T>) => {\n            const appendContent = params.appendContent;\n            if (appendContent) {\n                gridSerializingSession.addCustomContent(appendContent);\n            }\n            return gridSerializingSession;\n        };\n    }\n\n    private prependContent<T>(\n        params: ExportParams<T>\n    ): (gridSerializingSession: GridSerializingSession<T>) => GridSerializingSession<T> {\n        return (gridSerializingSession: GridSerializingSession<T>) => {\n            const prependContent = params.prependContent;\n            if (prependContent) {\n                gridSerializingSession.addCustomContent(prependContent);\n            }\n            return gridSerializingSession;\n        };\n    }\n\n    private prepareSession<T>(\n        columnsToExport: AgColumn[]\n    ): (gridSerializingSession: GridSerializingSession<T>) => GridSerializingSession<T> {\n        return (gridSerializingSession) => {\n            gridSerializingSession.prepare(columnsToExport);\n            return gridSerializingSession;\n        };\n    }\n\n    private exportColumnGroups<T>(\n        params: ExportParams<T>,\n        columnsToExport: AgColumn[]\n    ): (gridSerializingSession: GridSerializingSession<T>) => GridSerializingSession<T> {\n        return (gridSerializingSession) => {\n            if (!params.skipColumnGroupHeaders) {\n                const idCreator: GroupInstanceIdCreator = new GroupInstanceIdCreator();\n                const displayedGroups: (AgColumn | AgColumnGroup)[] = this.visibleColsService.createGroups({\n                    columns: columnsToExport,\n                    idCreator,\n                    pinned: null,\n                    isStandaloneStructure: true,\n                });\n\n                this.recursivelyAddHeaderGroups(\n                    displayedGroups,\n                    gridSerializingSession,\n                    params.processGroupHeaderCallback\n                );\n            }\n            return gridSerializingSession;\n        };\n    }\n\n    private exportHeaders<T>(\n        params: ExportParams<T>,\n        columnsToExport: AgColumn[]\n    ): (gridSerializingSession: GridSerializingSession<T>) => GridSerializingSession<T> {\n        return (gridSerializingSession) => {\n            if (!params.skipColumnHeaders) {\n                const gridRowIterator = gridSerializingSession.onNewHeaderRow();\n                columnsToExport.forEach((column, index) => {\n                    gridRowIterator.onColumn(column, index, undefined);\n                });\n            }\n            return gridSerializingSession;\n        };\n    }\n\n    private processPinnedTopRows<T>(\n        params: ExportParams<T>,\n        columnsToExport: AgColumn[]\n    ): (gridSerializingSession: GridSerializingSession<T>) => GridSerializingSession<T> {\n        return (gridSerializingSession) => {\n            const processRow = this.processRow.bind(this, gridSerializingSession, params, columnsToExport);\n\n            if (params.rowPositions) {\n                params.rowPositions\n                    // only pinnedTop rows, other models are processed by `processRows` and `processPinnedBottomsRows`\n                    .filter((position) => position.rowPinned === 'top')\n                    .sort((a, b) => a.rowIndex - b.rowIndex)\n                    .map((position) => this.pinnedRowModel.getPinnedTopRow(position.rowIndex))\n                    .forEach(processRow);\n            } else {\n                this.pinnedRowModel.forEachPinnedTopRow(processRow);\n            }\n            return gridSerializingSession;\n        };\n    }\n\n    private processRows<T>(\n        params: ExportParams<T>,\n        columnsToExport: AgColumn[]\n    ): (gridSerializingSession: GridSerializingSession<T>) => GridSerializingSession<T> {\n        return (gridSerializingSession) => {\n            // when in pivot mode, we always render cols on screen, never 'all columns'\n            const rowModel = this.rowModel;\n            const rowModelType = rowModel.getType();\n            const usingCsrm = rowModelType === 'clientSide';\n            const usingSsrm = rowModelType === 'serverSide';\n            const onlySelectedNonStandardModel = !usingCsrm && params.onlySelected;\n            const processRow = this.processRow.bind(this, gridSerializingSession, params, columnsToExport);\n            const { exportedRows = 'filteredAndSorted' } = params;\n\n            if (params.rowPositions) {\n                params.rowPositions\n                    // pinnedRows are processed by `processPinnedTopRows` and `processPinnedBottomsRows`\n                    .filter((position) => position.rowPinned == null)\n                    .sort((a, b) => a.rowIndex - b.rowIndex)\n                    .map((position) => rowModel.getRow(position.rowIndex))\n                    .forEach(processRow);\n            } else if (this.columnModel.isPivotMode()) {\n                if (usingCsrm) {\n                    (rowModel as IClientSideRowModel).forEachPivotNode(processRow, true);\n                } else if (usingSsrm) {\n                    (rowModel as IServerSideRowModel).forEachNodeAfterFilterAndSort(processRow, true);\n                } else {\n                    // must be enterprise, so we can just loop through all the nodes\n                    rowModel.forEachNode(processRow);\n                }\n            } else {\n                // onlySelectedAllPages: user doing pagination and wants selected items from\n                // other pages, so cannot use the standard row model as it won't have rows from\n                // other pages.\n                // onlySelectedNonStandardModel: if user wants selected in non standard row model\n                // (eg viewport) then again RowModel cannot be used, so need to use selected instead.\n                if (params.onlySelectedAllPages || onlySelectedNonStandardModel) {\n                    const selectedNodes = this.selectionService.getSelectedNodes();\n                    this.replicateSortedOrder(selectedNodes);\n                    // serialize each node\n                    selectedNodes.forEach(processRow);\n                } else {\n                    // here is everything else - including standard row model and selected. we don't use\n                    // the selection model even when just using selected, so that the result is the order\n                    // of the rows appearing on the screen.\n                    if (exportedRows === 'all') {\n                        rowModel.forEachNode(processRow);\n                    } else if (usingCsrm) {\n                        (rowModel as IClientSideRowModel).forEachNodeAfterFilterAndSort(processRow, true);\n                    } else if (usingSsrm) {\n                        (rowModel as IServerSideRowModel).forEachNodeAfterFilterAndSort(processRow, true);\n                    } else {\n                        rowModel.forEachNode(processRow);\n                    }\n                }\n            }\n            return gridSerializingSession;\n        };\n    }\n\n    private replicateSortedOrder(rows: RowNode[]) {\n        const sortOptions = this.sortController.getSortOptions();\n        const compareNodes = (rowA: RowNode, rowB: RowNode): number => {\n            if (rowA.rowIndex != null && rowB.rowIndex != null) {\n                // if the rows have rowIndexes, this is the easiest way to compare,\n                // as they're already ordered\n                return rowA.rowIndex - rowB.rowIndex;\n            }\n\n            // if the level is the same, compare these nodes, or their parents\n            if (rowA.level === rowB.level) {\n                if (rowA.parent?.id === rowB.parent?.id) {\n                    return this.rowNodeSorter.compareRowNodes(\n                        sortOptions,\n                        {\n                            rowNode: rowA,\n                            currentPos: rowA.rowIndex ?? -1,\n                        },\n                        {\n                            rowNode: rowB,\n                            currentPos: rowB.rowIndex ?? -1,\n                        }\n                    );\n                }\n\n                // level is same, but parent isn't, compare parents\n                return compareNodes(rowA.parent!, rowB.parent!);\n            }\n\n            // if level is different, match levels\n            if (rowA.level > rowB.level) {\n                return compareNodes(rowA.parent!, rowB);\n            }\n            return compareNodes(rowA, rowB.parent!);\n        };\n\n        // sort the nodes either by existing row index or compare them\n        rows.sort(compareNodes);\n    }\n\n    private processPinnedBottomRows<T>(\n        params: ExportParams<T>,\n        columnsToExport: AgColumn[]\n    ): (gridSerializingSession: GridSerializingSession<T>) => GridSerializingSession<T> {\n        return (gridSerializingSession) => {\n            const processRow = this.processRow.bind(this, gridSerializingSession, params, columnsToExport);\n            if (params.rowPositions) {\n                params.rowPositions\n                    // only pinnedBottom rows, other models are processed by `processRows` and `processPinnedTopRows`\n                    .filter((position) => position.rowPinned === 'bottom')\n                    .sort((a, b) => a.rowIndex - b.rowIndex)\n                    .map((position) => this.pinnedRowModel.getPinnedBottomRow(position.rowIndex))\n                    .forEach(processRow);\n            } else {\n                this.pinnedRowModel.forEachPinnedBottomRow(processRow);\n            }\n            return gridSerializingSession;\n        };\n    }\n\n    private getColumnsToExport(\n        allColumns: boolean = false,\n        skipRowGroups: boolean = false,\n        columnKeys?: (string | AgColumn)[]\n    ): AgColumn[] {\n        const isPivotMode = this.columnModel.isPivotMode();\n\n        if (columnKeys && columnKeys.length) {\n            return this.columnModel.getColsForKeys(columnKeys);\n        }\n\n        const isTreeData = this.gos.get('treeData');\n\n        let columnsToExport: AgColumn[] = [];\n\n        if (allColumns && !isPivotMode) {\n            columnsToExport = this.columnModel.getCols();\n        } else {\n            columnsToExport = this.visibleColsService.getAllCols();\n        }\n\n        if (skipRowGroups && !isTreeData) {\n            columnsToExport = columnsToExport.filter((column) => column.getColId() !== GROUP_AUTO_COLUMN_ID);\n        }\n\n        return columnsToExport;\n    }\n\n    private recursivelyAddHeaderGroups<T>(\n        displayedGroups: (AgColumn | AgColumnGroup)[],\n        gridSerializingSession: GridSerializingSession<T>,\n        processGroupHeaderCallback: ProcessGroupHeaderCallback | undefined\n    ): void {\n        const directChildrenHeaderGroups: (AgColumn | AgColumnGroup)[] = [];\n        displayedGroups.forEach((columnGroupChild) => {\n            const columnGroup = columnGroupChild as AgColumnGroup;\n            if (!columnGroup.getChildren) {\n                return;\n            }\n            columnGroup.getChildren()!.forEach((it) => directChildrenHeaderGroups.push(it));\n        });\n\n        if (displayedGroups.length > 0 && isColumnGroup(displayedGroups[0])) {\n            this.doAddHeaderHeader(gridSerializingSession, displayedGroups, processGroupHeaderCallback);\n        }\n\n        if (directChildrenHeaderGroups && directChildrenHeaderGroups.length > 0) {\n            this.recursivelyAddHeaderGroups(\n                directChildrenHeaderGroups,\n                gridSerializingSession,\n                processGroupHeaderCallback\n            );\n        }\n    }\n\n    private doAddHeaderHeader<T>(\n        gridSerializingSession: GridSerializingSession<T>,\n        displayedGroups: (AgColumn | AgColumnGroup)[],\n        processGroupHeaderCallback: ProcessGroupHeaderCallback | undefined\n    ) {\n        const gridRowIterator: RowSpanningAccumulator = gridSerializingSession.onNewHeaderGroupingRow();\n        let columnIndex: number = 0;\n        displayedGroups.forEach((columnGroupChild) => {\n            const columnGroup: AgColumnGroup = columnGroupChild as AgColumnGroup;\n\n            let name: string;\n            if (processGroupHeaderCallback) {\n                name = processGroupHeaderCallback(\n                    this.gos.addGridCommonParams({\n                        columnGroup: columnGroup,\n                    })\n                );\n            } else {\n                name = this.columnNameService.getDisplayNameForColumnGroup(columnGroup, 'header')!;\n            }\n\n            const collapsibleGroupRanges = columnGroup\n                .getLeafColumns()\n                .reduce((collapsibleGroups: number[][], currentColumn, currentIdx, arr) => {\n                    let lastGroup = _last(collapsibleGroups);\n                    const groupShow = currentColumn.getColumnGroupShow() === 'open';\n\n                    if (!groupShow) {\n                        if (lastGroup && lastGroup[1] == null) {\n                            lastGroup[1] = currentIdx - 1;\n                        }\n                    } else if (!lastGroup || lastGroup[1] != null) {\n                        lastGroup = [currentIdx];\n                        collapsibleGroups.push(lastGroup);\n                    }\n\n                    if (currentIdx === arr.length - 1 && lastGroup && lastGroup[1] == null) {\n                        lastGroup[1] = currentIdx;\n                    }\n\n                    return collapsibleGroups;\n                }, []);\n\n            gridRowIterator.onColumn(\n                columnGroup,\n                name || '',\n                columnIndex++,\n                columnGroup.getLeafColumns().length - 1,\n                collapsibleGroupRanges\n            );\n        });\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.3.1';\n", "import type { HeaderElement, PrefixedXmlAttributes, XmlElement } from '@ag-grid-community/core';\n\nconst LINE_SEPARATOR = '\\r\\n';\n\nfunction returnAttributeIfPopulated(key: string, value: any, booleanTransformer?: (currentValue: boolean) => string) {\n    if (!value && value !== '' && value !== 0) {\n        return '';\n    }\n\n    let xmlValue: string = value;\n    if (typeof value === 'boolean') {\n        if (booleanTransformer) {\n            xmlValue = booleanTransformer(value);\n        }\n    }\n\n    return ` ${key}=\"${xmlValue}\"`;\n}\n\nexport class XmlFactory {\n    public static createHeader(headerElement: HeaderElement = {}): string {\n        const headerStart = '<?';\n        const headerEnd = '?>';\n        const keys = ['version'];\n\n        if (!headerElement.version) {\n            headerElement.version = '1.0';\n        }\n        if (headerElement.encoding) {\n            keys.push('encoding');\n        }\n        if (headerElement.standalone) {\n            keys.push('standalone');\n        }\n\n        const att = keys.map((key: string): string => `${key}=\"${headerElement[key]}\"`).join(' ');\n        return `${headerStart}xml ${att} ${headerEnd}`;\n    }\n\n    public static createXml(xmlElement: XmlElement, booleanTransformer?: (currentValue: boolean) => string): string {\n        let props: string = '';\n        if (xmlElement.properties) {\n            if (xmlElement.properties.prefixedAttributes) {\n                xmlElement.properties.prefixedAttributes.forEach((prefixedSet: PrefixedXmlAttributes) => {\n                    Object.keys(prefixedSet.map).forEach((key) => {\n                        props += returnAttributeIfPopulated(\n                            prefixedSet.prefix + key,\n                            prefixedSet.map[key],\n                            booleanTransformer\n                        );\n                    });\n                });\n            }\n\n            if (xmlElement.properties.rawMap) {\n                Object.keys(xmlElement.properties.rawMap).forEach((key) => {\n                    props += returnAttributeIfPopulated(key, xmlElement.properties!.rawMap[key], booleanTransformer);\n                });\n            }\n        }\n        let result: string = '<' + xmlElement.name + props;\n\n        if (!xmlElement.children && xmlElement.textNode == null) {\n            return result + '/>' + LINE_SEPARATOR;\n        }\n\n        if (xmlElement.textNode != null) {\n            return result + '>' + xmlElement.textNode + '</' + xmlElement.name + '>' + LINE_SEPARATOR;\n        }\n\n        result += '>' + LINE_SEPARATOR;\n        if (xmlElement.children) {\n            xmlElement.children.forEach((it) => {\n                result += this.createXml(it, booleanTransformer);\n            });\n        }\n\n        return result + '</' + xmlElement.name + '>' + LINE_SEPARATOR;\n    }\n}\n", "import { _utf8_encode } from '@ag-grid-community/core';\n\nimport { deflateLocalFile } from './compress';\nimport { convertDate, convertDecToHex, convertTime } from './convert';\nimport { getCrcFromCrc32Table } from './crcTable';\nimport type { ZipFile } from './zipContainer';\n\ninterface ZipFileHeader {\n    localFileHeader: Uint8Array;\n    centralDirectoryHeader: Uint8Array;\n}\n\nexport interface ProcessedZipFile extends ZipFileHeader {\n    content: Uint8Array;\n    isCompressed: boolean;\n}\n\nconst getHeaders = (\n    currentFile: ZipFile,\n    isCompressed: boolean,\n    offset: number,\n    rawSize: number,\n    rawContent: string | Uint8Array,\n    deflatedSize: number | undefined\n): ZipFileHeader => {\n    const { content, path, created: creationDate } = currentFile;\n\n    const time = convertTime(creationDate);\n    const dt = convertDate(creationDate);\n\n    const crcFlag = getCrcFromCrc32Table(rawContent);\n    const zipSize = deflatedSize !== undefined ? deflatedSize : rawSize;\n\n    const utfPath = _utf8_encode(path);\n    const isUTF8 = utfPath !== path;\n\n    let extraFields = '';\n    if (isUTF8) {\n        const uExtraFieldPath = convertDecToHex(1, 1) + convertDecToHex(getCrcFromCrc32Table(utfPath), 4) + utfPath;\n        extraFields = '\\x75\\x70' + convertDecToHex(uExtraFieldPath.length, 2) + uExtraFieldPath;\n    }\n\n    const commonHeader =\n        '\\x14\\x00' + // version needed to extract\n        (isUTF8 ? '\\x00\\x08' : '\\x00\\x00') + // Language encoding flag (EFS) (12th bit turned on)\n        convertDecToHex(isCompressed ? 8 : 0, 2) + // As per ECMA-376 Part 2 specs\n        convertDecToHex(time, 2) + // last modified time\n        convertDecToHex(dt, 2) + // last modified date\n        convertDecToHex(zipSize ? crcFlag : 0, 4) +\n        convertDecToHex(deflatedSize ?? rawSize, 4) + // compressed size\n        convertDecToHex(rawSize, 4) + // uncompressed size\n        convertDecToHex(utfPath.length, 2) + // file name length\n        convertDecToHex(extraFields.length, 2); // extra field length\n\n    const localFileHeader = 'PK\\x03\\x04' + commonHeader + utfPath + extraFields;\n    const centralDirectoryHeader =\n        'PK\\x01\\x02' + // central header\n        '\\x14\\x00' +\n        commonHeader + // file header\n        '\\x00\\x00' +\n        '\\x00\\x00' +\n        '\\x00\\x00' +\n        (content ? '\\x00\\x00\\x00\\x00' : '\\x10\\x00\\x00\\x00') + // external file attributes\n        convertDecToHex(offset, 4) + // relative offset of local header\n        utfPath + // file name\n        extraFields; // extra field\n\n    return {\n        localFileHeader: Uint8Array.from(localFileHeader, (c) => c.charCodeAt(0)),\n        centralDirectoryHeader: Uint8Array.from(centralDirectoryHeader, (c) => c.charCodeAt(0)),\n    };\n};\n\nconst getDecodedContent = (\n    content: string | Uint8Array\n): {\n    size: number;\n    content: Uint8Array;\n} => {\n    let contentToUse: Uint8Array;\n    // base64 content is passed as string\n    if (typeof content === 'string') {\n        const base64String = atob(content.split(';base64,')[1]);\n        contentToUse = Uint8Array.from(base64String, (c) => c.charCodeAt(0));\n    } else {\n        contentToUse = content;\n    }\n\n    return {\n        size: contentToUse.length,\n        content: contentToUse,\n    };\n};\n\nexport const getDeflatedHeaderAndContent = async (currentFile: ZipFile, offset: number): Promise<ProcessedZipFile> => {\n    const { content } = currentFile;\n\n    const { size, content: rawContent } = !content\n        ? { size: 0, content: Uint8Array.from([]) }\n        : getDecodedContent(content);\n\n    let deflatedContent: Uint8Array | undefined = undefined;\n    let deflatedSize: number | undefined = undefined;\n    let deflationPerformed = false;\n\n    const shouldDeflate = currentFile.type === 'file' && rawContent && size > 0;\n    if (shouldDeflate) {\n        const result = await deflateLocalFile(rawContent);\n        deflatedContent = result.content;\n        deflatedSize = result.size;\n        deflationPerformed = true;\n    }\n\n    const headers = getHeaders(currentFile, deflationPerformed, offset, size, rawContent, deflatedSize);\n\n    return {\n        ...headers,\n        content: deflatedContent || rawContent,\n        isCompressed: deflationPerformed,\n    };\n};\n\nexport const getHeaderAndContent = (currentFile: ZipFile, offset: number): ProcessedZipFile => {\n    const { content } = currentFile;\n\n    const { content: rawContent } = !content ? { content: Uint8Array.from([]) } : getDecodedContent(content);\n\n    const headers = getHeaders(currentFile, false, offset, rawContent.length, rawContent, undefined);\n\n    return {\n        ...headers,\n        content: rawContent,\n        isCompressed: false,\n    };\n};\n\nexport const buildCentralDirectoryEnd = (tLen: number, cLen: number, lLen: number): Uint8Array => {\n    const str =\n        'PK\\x05\\x06' + // central folder end\n        '\\x00\\x00' +\n        '\\x00\\x00' +\n        convertDecToHex(tLen, 2) + // total number of entries in the central folder\n        convertDecToHex(tLen, 2) + // total number of entries in the central folder\n        convertDecToHex(cLen, 4) + // size of the central folder\n        convertDecToHex(lLen, 4) + // central folder start offset\n        '\\x00\\x00';\n\n    return Uint8Array.from(str, (c) => c.charCodeAt(0));\n};\n", "const compressBlob = async (\n    data: Blob\n): Promise<{\n    size: number;\n    content: Blob;\n}> => {\n    // Callback to extract the compressed data\n    let chunksSize = 0;\n    const chunks: Uint8Array[] = [];\n    const writeCompressedData: WritableStream<Uint8Array> = new WritableStream({\n        write: (chunk: Uint8Array) => {\n            chunks.push(chunk);\n            chunksSize += chunk.length;\n        },\n    });\n\n    // Create readable stream from blob\n    const readable = new ReadableStream({\n        start: (controller) => {\n            const reader = new FileReader();\n            reader.onload = (e) => {\n                if (e.target?.result) {\n                    controller.enqueue(e.target.result);\n                }\n\n                controller.close();\n            };\n\n            reader.readAsArrayBuffer(data);\n        },\n    });\n\n    // Perform the compression using the browser's native CompressionStream API\n    // Ref https://developer.mozilla.org/en-US/docs/Web/API/CompressionStream for details\n    const compressStream = new (window as any).CompressionStream('deflate-raw');\n    await readable.pipeThrough(compressStream).pipeTo(writeCompressedData);\n\n    // Return the compressed data\n    return {\n        size: chunksSize,\n        content: new Blob(chunks),\n    };\n};\n\nexport const deflateLocalFile = async (\n    rawContent: string | Uint8Array\n): Promise<{\n    size: number;\n    content: Uint8Array;\n}> => {\n    const contentAsBlob = new Blob([rawContent]);\n    const { size: compressedSize, content: compressedContent } = await compressBlob(contentAsBlob);\n\n    const compressedContentAsUint8Array = new Uint8Array(await compressedContent.arrayBuffer());\n\n    return {\n        size: compressedSize,\n        content: compressedContentAsUint8Array,\n    };\n};\n", "export const convertTime = (date: Date): number => {\n    let time = date.getHours();\n    time <<= 6;\n    time = time | date.getMinutes();\n    time <<= 5;\n    time = time | (date.getSeconds() / 2);\n\n    return time;\n};\n\nexport const convertDate = (date: Date): number => {\n    let dt = date.getFullYear() - 1980;\n    dt <<= 4;\n    dt = dt | (date.getMonth() + 1);\n    dt <<= 5;\n    dt = dt | date.getDate();\n\n    return dt;\n};\n\nexport function convertDecToHex(number: number, bytes: number): string {\n    let hex = '';\n\n    for (let i = 0; i < bytes; i++) {\n        hex += String.fromCharCode(number & 0xff);\n        number >>>= 8;\n    }\n\n    return hex;\n}\n", "const getCrcFromCrc32TableAndByteArray = (content: Uint8Array): number => {\n    if (!content.length) {\n        return 0;\n    }\n\n    let crc = 0 ^ -1;\n\n    let j = 0;\n    let k = 0;\n    let l = 0;\n\n    for (let i = 0; i < content.length; i++) {\n        j = content[i];\n        k = (crc ^ j) & 0xff;\n        l = crcTable[k];\n        crc = (crc >>> 8) ^ l;\n    }\n\n    return crc ^ -1;\n};\n\nexport const getCrcFromCrc32Table = (content: string | Uint8Array): number => {\n    if (!content.length) {\n        return 0;\n    }\n\n    if (typeof content === 'string') {\n        return getCrcFromCrc32TableAndByteArray(new TextEncoder().encode(content));\n    }\n\n    return getCrcFromCrc32TableAndByteArray(content);\n};\n\n// Table for crc calculation from:\n// https://referencesource.microsoft.com/#System/sys/System/IO/compression/Crc32Helper.cs,3b31978c7d7f7246,references\nconst crcTable = new Uint32Array([\n    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832,\n    0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2,\n    0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856, 0x646ba8c0, 0xfd62f97a,\n    0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,\n    0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3,\n    0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423,\n    0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab,\n    0xb6662d3d, 0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,\n    0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01, 0x6b6b51f4,\n    0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,\n    0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074,\n    0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,\n    0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525,\n    0x206f85b3, 0xb966d409, 0xce61e49f, 0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81,\n    0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615,\n    0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,\n    0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7, 0xfed41b76,\n    0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e,\n    0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c, 0x36034af6,\n    0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,\n    0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7,\n    0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f,\n    0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7,\n    0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,\n    0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278,\n    0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc,\n    0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9, 0xbdbdf21c, 0xcabac28a, 0x53b39330,\n    0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,\n    0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d,\n]);\n", "import type { ProcessedZipFile } from './zipContainerHelper';\nimport { buildCentralDirectoryEnd, getDeflatedHeaderAndContent, getHeaderAndContent } from './zipContainerHelper';\n\nexport interface ZipFile {\n    path: string;\n    created: Date;\n    isBase64: boolean;\n    type: 'file' | 'folder';\n    content?: string | Uint8Array;\n}\n\nexport class ZipContainer {\n    private static folders: ZipFile[] = [];\n    private static files: ZipFile[] = [];\n\n    public static addFolders(paths: string[]): void {\n        paths.forEach(this.addFolder.bind(this));\n    }\n\n    private static addFolder(path: string): void {\n        this.folders.push({\n            path,\n            created: new Date(),\n            isBase64: false,\n            type: 'folder',\n        });\n    }\n\n    public static addFile(path: string, content: string, isBase64 = false): void {\n        this.files.push({\n            path,\n            created: new Date(),\n            content: isBase64 ? content : new TextEncoder().encode(content),\n            isBase64,\n            type: 'file',\n        });\n    }\n\n    public static async getZipFile(mimeType: string = 'application/zip'): Promise<Blob> {\n        const textOutput = await this.buildCompressedFileStream();\n        this.clearStream();\n        return new Blob([textOutput], { type: mimeType });\n    }\n\n    public static getUncompressedZipFile(mimeType: string = 'application/zip'): Blob {\n        const textOutput = this.buildFileStream();\n        this.clearStream();\n        return new Blob([textOutput], { type: mimeType });\n    }\n\n    private static clearStream(): void {\n        this.folders = [];\n        this.files = [];\n    }\n\n    private static packageFiles(files: ProcessedZipFile[]) {\n        let fileLen: number = 0;\n        let folderLen: number = 0;\n\n        for (const currentFile of files) {\n            const { localFileHeader, centralDirectoryHeader, content } = currentFile;\n            fileLen += localFileHeader.length + content.length;\n            folderLen += centralDirectoryHeader.length;\n        }\n\n        const fileData: Uint8Array = new Uint8Array(fileLen);\n        const folderData: Uint8Array = new Uint8Array(folderLen);\n\n        let fileOffset = 0;\n        let folderOffset = 0;\n        for (const currentFile of files) {\n            const { localFileHeader, centralDirectoryHeader, content } = currentFile;\n\n            // Append fileHeader to fData\n            fileData.set(localFileHeader, fileOffset);\n            fileOffset += localFileHeader.length;\n\n            // Append content to fData\n            fileData.set(content, fileOffset);\n            fileOffset += content.length;\n\n            // Append folder header to foData\n            folderData.set(centralDirectoryHeader, folderOffset);\n            folderOffset += centralDirectoryHeader.length;\n        }\n\n        const folderEnd = buildCentralDirectoryEnd(files.length, folderLen, fileLen);\n\n        // Append folder data and file data\n        const result = new Uint8Array(fileData.length + folderData.length + folderEnd.length);\n\n        result.set(fileData);\n        result.set(folderData, fileData.length);\n        result.set(folderEnd, fileData.length + folderData.length);\n\n        return result;\n    }\n\n    private static async buildCompressedFileStream(): Promise<Uint8Array> {\n        const totalFiles: ZipFile[] = [...this.folders, ...this.files];\n        const readyFiles: ProcessedZipFile[] = [];\n        let lL = 0;\n\n        for (const currentFile of totalFiles) {\n            const output = await getDeflatedHeaderAndContent(currentFile, lL);\n            const { localFileHeader, content } = output;\n            readyFiles.push(output);\n            lL += localFileHeader.length + content.length;\n        }\n\n        return this.packageFiles(readyFiles);\n    }\n\n    private static buildFileStream(): Uint8Array {\n        const totalFiles: ZipFile[] = [...this.folders, ...this.files];\n        const readyFiles: ProcessedZipFile[] = [];\n        let lL = 0;\n\n        for (const currentFile of totalFiles) {\n            const readyFile = getHeaderAndContent(currentFile, lL);\n            const { localFileHeader, content } = readyFile;\n            readyFiles.push(readyFile);\n            lL += localFileHeader.length + content.length;\n        }\n\n        return this.packageFiles(readyFiles);\n    }\n}\n"],
  "mappings": "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A,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAChG;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAChG;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAChG;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAChG;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAChG;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAChG;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAChG;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAChG;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAChG;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAChG;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAChG;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAChG;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAChG;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;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",
  "names": ["node", "_warnOnce", "_warnOnce", "_warnOnce", "_warnOnce", "BeanStub", "RowType", "LINE_SEPARATOR"]
}
