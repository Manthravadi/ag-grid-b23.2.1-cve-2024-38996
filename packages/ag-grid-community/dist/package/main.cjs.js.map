{
  "version": 3,
  "sources": ["../../src/main.ts", "../../../../community-modules/core/src/localEventService.ts", "../../../../community-modules/core/src/utils/array.ts", "../../../../community-modules/core/src/utils/event.ts", "../../../../community-modules/core/src/context/beanStub.ts", "../../../../community-modules/core/src/misc/frameworkEventListenerService.ts", "../../../../community-modules/core/src/utils/generic.ts", "../../../../community-modules/core/src/utils/object.ts", "../../../../community-modules/core/src/entities/agColumn.ts", "../../../../community-modules/core/src/entities/agProvidedColumnGroup.ts", "../../../../community-modules/core/src/entities/defaultColumnTypes.ts", "../../../../community-modules/core/src/utils/function.ts", "../../../../community-modules/core/src/columns/columnKeyCreator.ts", "../../../../community-modules/core/src/columns/columnUtils.ts", "../../../../community-modules/core/src/columns/columnFactory.ts", "../../../../community-modules/core/src/columns/columnModel.ts", "../../../../community-modules/core/src/columns/columnAutosizeService.ts", "../../../../community-modules/core/src/columns/funcColsService.ts", "../../../../community-modules/core/src/columns/columnApplyStateService.ts", "../../../../community-modules/core/src/columns/columnMoveService.ts", "../../../../community-modules/core/src/utils/string.ts", "../../../../community-modules/core/src/columns/columnNameService.ts", "../../../../community-modules/core/src/columns/pivotResultColsService.ts", "../../../../community-modules/core/src/columns/columnSizeService.ts", "../../../../community-modules/core/src/entities/agColumnGroup.ts", "../../../../community-modules/core/src/columns/groupInstanceIdCreator.ts", "../../../../community-modules/core/src/columns/visibleColsService.ts", "../../../../community-modules/core/src/eventTypes.ts", "../../../../community-modules/core/src/propertyKeys.ts", "../../../../community-modules/core/src/components/componentUtil.ts", "../../../../community-modules/core/src/rendering/cssClassManager.ts", "../../../../community-modules/core/src/utils/aria.ts", "../../../../community-modules/core/src/utils/browser.ts", "../../../../community-modules/core/src/utils/dom.ts", "../../../../community-modules/core/src/utils/numberSequence.ts", "../../../../community-modules/core/src/widgets/tooltipStateManager.ts", "../../../../community-modules/core/src/widgets/tooltipFeature.ts", "../../../../community-modules/core/src/widgets/component.ts", "../../../../community-modules/core/src/utils/icon.ts", "../../../../community-modules/core/src/utils/mouse.ts", "../../../../community-modules/core/src/widgets/touchListener.ts", "../../../../community-modules/core/src/headerRendering/cells/column/sortIndicatorComp.ts", "../../../../community-modules/core/src/headerRendering/cells/column/headerComp.ts", "../../../../community-modules/core/src/headerRendering/cells/columnGroup/headerGroupComp.ts", "../../../../community-modules/core/src/modules/moduleNames.ts", "../../../../community-modules/core/src/modules/moduleRegistry.ts", "../../../../community-modules/core/src/rendering/cellRenderers/animateShowChangeCellRenderer.ts", "../../../../community-modules/core/src/rendering/cellRenderers/animateSlideCellRenderer.ts", "../../../../community-modules/core/src/constants/keyCode.ts", "../../../../community-modules/core/src/widgets/agAbstractLabel.ts", "../../../../community-modules/core/src/widgets/agAbstractField.ts", "../../../../community-modules/core/src/widgets/agAbstractInputField.ts", "../../../../community-modules/core/src/widgets/agCheckbox.ts", "../../../../community-modules/core/src/rendering/cellRenderers/checkboxCellRenderer.ts", "../../../../community-modules/core/src/rendering/cellRenderers/loadingCellRenderer.ts", "../../../../community-modules/core/src/rendering/cellRenderers/skeletonCellRenderer.ts", "../../../../community-modules/core/src/rendering/overlays/overlayComponent.ts", "../../../../community-modules/core/src/rendering/overlays/loadingOverlayComponent.ts", "../../../../community-modules/core/src/rendering/overlays/noRowsOverlayComponent.ts", "../../../../community-modules/core/src/widgets/popupComponent.ts", "../../../../community-modules/core/src/rendering/tooltipComponent.ts", "../../../../community-modules/core/src/utils/fuzzyMatch.ts", "../../../../community-modules/core/src/components/framework/userComponentRegistry.ts", "../../../../community-modules/core/src/utils/promise.ts", "../../../../community-modules/core/src/components/framework/componentTypes.ts", "../../../../community-modules/core/src/components/framework/userComponentFactory.ts", "../../../../community-modules/core/src/components/framework/unwrapUserComp.ts", "../../../../community-modules/core/src/context/genericContext.ts", "../../../../community-modules/core/src/context/context.ts", "../../../../community-modules/core/src/interfaces/iExcelCreator.ts", "../../../../community-modules/core/src/constants/direction.ts", "../../../../community-modules/core/src/dragAndDrop/dragAndDropService.ts", "../../../../community-modules/core/src/autoScrollService.ts", "../../../../community-modules/core/src/interfaces/iRowNode.ts", "../../../../community-modules/core/src/gridBodyComp/rowDragFeature.ts", "../../../../community-modules/core/src/dragAndDrop/dragService.ts", "../../../../community-modules/core/src/rendering/row/rowDragComp.ts", "../../../../community-modules/core/src/entities/rowNode.ts", "../../../../community-modules/core/src/filter/filterManager.ts", "../../../../community-modules/core/src/filter/filterWrapperComp.ts", "../../../../community-modules/core/src/rendering/features/positionableFeature.ts", "../../../../community-modules/core/src/widgets/managedFocusFeature.ts", "../../../../community-modules/core/src/filter/filterLocaleText.ts", "../../../../community-modules/core/src/filter/floating/provided/providedFilterUtils.ts", "../../../../community-modules/core/src/filter/provided/providedFilter.ts", "../../../../community-modules/core/src/widgets/agRadioButton.ts", "../../../../community-modules/core/src/widgets/agList.ts", "../../../../community-modules/core/src/widgets/agPickerField.ts", "../../../../community-modules/core/src/widgets/agSelect.ts", "../../../../community-modules/core/src/filter/provided/optionsFactory.ts", "../../../../community-modules/core/src/filter/provided/simpleFilter.ts", "../../../../community-modules/core/src/filter/provided/scalarFilter.ts", "../../../../community-modules/core/src/utils/keyboard.ts", "../../../../community-modules/core/src/widgets/agInputTextField.ts", "../../../../community-modules/core/src/widgets/agInputNumberField.ts", "../../../../community-modules/core/src/filter/provided/number/numberFilterConstants.ts", "../../../../community-modules/core/src/filter/provided/simpleFilterModelFormatter.ts", "../../../../community-modules/core/src/filter/provided/number/numberFilterModelFormatter.ts", "../../../../community-modules/core/src/filter/provided/number/numberFilterUtils.ts", "../../../../community-modules/core/src/filter/provided/number/numberFilter.ts", "../../../../community-modules/core/src/filter/provided/text/textFilterConstants.ts", "../../../../community-modules/core/src/filter/provided/text/textFilterModelFormatter.ts", "../../../../community-modules/core/src/filter/provided/text/textFilterUtils.ts", "../../../../community-modules/core/src/filter/provided/text/textFilter.ts", "../../../../community-modules/core/src/utils/number.ts", "../../../../community-modules/core/src/utils/date.ts", "../../../../community-modules/core/src/filter/provided/date/dateCompWrapper.ts", "../../../../community-modules/core/src/filter/provided/date/dateFilterConstants.ts", "../../../../community-modules/core/src/filter/provided/date/dateFilterModelFormatter.ts", "../../../../community-modules/core/src/filter/provided/date/dateFilter.ts", "../../../../community-modules/core/src/rendering/features/setLeftFeature.ts", "../../../../community-modules/core/src/headerRendering/cells/cssClassApplier.ts", "../../../../community-modules/core/src/headerRendering/cells/abstractCell/abstractHeaderCellCtrl.ts", "../../../../community-modules/core/src/headerRendering/cells/hoverFeature.ts", "../../../../community-modules/core/src/headerRendering/cells/floatingFilter/headerFilterCellCtrl.ts", "../../../../community-modules/core/src/version.ts", "../../../../community-modules/core/src/filter/columnFilterApi.ts", "../../../../community-modules/core/src/filter/floating/floatingFilterMapper.ts", "../../../../community-modules/core/src/filter/columnFilterService.ts", "../../../../community-modules/core/src/filter/filterApi.ts", "../../../../community-modules/core/src/filter/floating/provided/readOnlyFloatingFilter.ts", "../../../../community-modules/core/src/filter/floating/provided/simpleFloatingFilter.ts", "../../../../community-modules/core/src/filter/provided/date/dateFloatingFilter.ts", "../../../../community-modules/core/src/filter/provided/date/defaultDateComponent.ts", "../../../../community-modules/core/src/filter/floating/provided/floatingFilterTextInputService.ts", "../../../../community-modules/core/src/filter/floating/provided/textInputFloatingFilter.ts", "../../../../community-modules/core/src/filter/provided/number/numberFloatingFilter.ts", "../../../../community-modules/core/src/filter/provided/text/textFloatingFilter.ts", "../../../../community-modules/core/src/filter/quickFilterApi.ts", "../../../../community-modules/core/src/filter/quickFilterService.ts", "../../../../community-modules/core/src/filter/filterModule.ts", "../../../../community-modules/core/src/headerRendering/cells/abstractCell/abstractHeaderCellComp.ts", "../../../../community-modules/core/src/headerRendering/cells/floatingFilter/headerFilterCellComp.ts", "../../../../community-modules/core/src/headerRendering/cells/column/headerCellComp.ts", "../../../../community-modules/core/src/headerRendering/cells/columnGroup/headerGroupCellComp.ts", "../../../../community-modules/core/src/headerRendering/row/headerRowComp.ts", "../../../../community-modules/core/src/headerRendering/common/headerNavigationService.ts", "../../../../community-modules/core/src/headerRendering/gridHeaderCtrl.ts", "../../../../community-modules/core/src/gridBodyComp/centerWidthFeature.ts", "../../../../community-modules/core/src/headerRendering/columnDrag/bodyDropPivotTarget.ts", "../../../../community-modules/core/src/headerRendering/columnMoveHelper.ts", "../../../../community-modules/core/src/headerRendering/columnDrag/moveColumnFeature.ts", "../../../../community-modules/core/src/headerRendering/columnDrag/bodyDropTarget.ts", "../../../../community-modules/core/src/headerRendering/cells/column/resizeFeature.ts", "../../../../community-modules/core/src/headerRendering/cells/column/selectAllFeature.ts", "../../../../community-modules/core/src/headerRendering/cells/column/headerCellCtrl.ts", "../../../../community-modules/core/src/headerRendering/cells/columnGroup/groupResizeFeature.ts", "../../../../community-modules/core/src/headerRendering/cells/columnGroup/groupWidthFeature.ts", "../../../../community-modules/core/src/headerRendering/cells/columnGroup/headerGroupCellCtrl.ts", "../../../../community-modules/core/src/headerRendering/row/headerRowCtrl.ts", "../../../../community-modules/core/src/headerRendering/rowContainer/headerRowContainerCtrl.ts", "../../../../community-modules/core/src/headerRendering/rowContainer/headerRowContainerComp.ts", "../../../../community-modules/core/src/headerRendering/gridHeaderComp.ts", "../../../../community-modules/core/src/styling/layoutFeature.ts", "../../../../community-modules/core/src/rendering/overlays/overlayWrapperComponent.ts", "../../../../community-modules/core/src/gridBodyComp/abstractFakeScrollComp.ts", "../../../../community-modules/core/src/gridBodyComp/fakeHScrollComp.ts", "../../../../community-modules/core/src/gridBodyComp/rowContainer/setHeightFeature.ts", "../../../../community-modules/core/src/gridBodyComp/fakeVScrollComp.ts", "../../../../community-modules/core/src/gridBodyComp/gridBodyScrollFeature.ts", "../../../../community-modules/core/src/gridBodyComp/gridBodyCtrl.ts", "../../../../community-modules/core/src/rendering/cell/cellComp.ts", "../../../../community-modules/core/src/rendering/row/rowComp.ts", "../../../../community-modules/core/src/gridBodyComp/viewportSizeFeature.ts", "../../../../community-modules/core/src/gridBodyComp/rowContainer/dragListenerFeature.ts", "../../../../community-modules/core/src/rendering/checkboxSelectionComponent.ts", "../../../../community-modules/core/src/rendering/dndSourceComp.ts", "../../../../community-modules/core/src/rendering/cell/cellCustomStyleFeature.ts", "../../../../community-modules/core/src/rendering/cell/cellKeyboardListenerFeature.ts", "../../../../community-modules/core/src/rendering/cell/cellMouseListenerFeature.ts", "../../../../community-modules/core/src/rendering/cell/cellPositionFeature.ts", "../../../../community-modules/core/src/interfaces/IRangeService.ts", "../../../../community-modules/core/src/rendering/cell/cellRangeFeature.ts", "../../../../community-modules/core/src/rendering/cell/cellCtrl.ts", "../../../../community-modules/core/src/rendering/row/rowCtrl.ts", "../../../../community-modules/core/src/gridBodyComp/rowContainer/rowContainerEventsFeature.ts", "../../../../community-modules/core/src/gridBodyComp/rowContainer/setPinnedLeftWidthFeature.ts", "../../../../community-modules/core/src/gridBodyComp/rowContainer/setPinnedRightWidthFeature.ts", "../../../../community-modules/core/src/gridBodyComp/rowContainer/rowContainerCtrl.ts", "../../../../community-modules/core/src/gridBodyComp/rowContainer/rowContainerComp.ts", "../../../../community-modules/core/src/gridBodyComp/gridBodyComp.ts", "../../../../community-modules/core/src/gridBodyComp/scrollVisibleService.ts", "../../../../community-modules/core/src/gridBodyComp/mouseEventService.ts", "../../../../community-modules/core/src/gridBodyComp/navigationService.ts", "../../../../community-modules/core/src/headerRendering/common/horizontalResizeService.ts", "../../../../community-modules/core/src/headerRendering/cells/column/standardMenu.ts", "../../../../community-modules/core/src/misc/resizeObserverService.ts", "../../../../community-modules/core/src/misc/animationFrameService.ts", "../../../../community-modules/core/src/interfaces/iClientSideRowModel.ts", "../../../../community-modules/core/src/misc/expansionService.ts", "../../../../community-modules/core/src/misc/menuService.ts", "../../../../community-modules/core/src/widgets/agInputTextArea.ts", "../../../../community-modules/core/src/edit/cellEditors/largeTextCellEditor.ts", "../../../../community-modules/core/src/edit/cellEditors/popupEditorWrapper.ts", "../../../../community-modules/core/src/edit/cellEditors/selectCellEditor.ts", "../../../../community-modules/core/src/edit/cellEditors/simpleCellEditor.ts", "../../../../community-modules/core/src/edit/cellEditors/textCellEditor.ts", "../../../../community-modules/core/src/edit/cellEditors/numberCellEditor.ts", "../../../../community-modules/core/src/widgets/agInputDateField.ts", "../../../../community-modules/core/src/edit/cellEditors/dateCellEditor.ts", "../../../../community-modules/core/src/edit/cellEditors/dateStringCellEditor.ts", "../../../../community-modules/core/src/edit/cellEditors/checkboxCellEditor.ts", "../../../../community-modules/core/src/undoRedo/undoRedoStack.ts", "../../../../community-modules/core/src/undoRedo/undoRedoService.ts", "../../../../community-modules/core/src/api/scrollApi.ts", "../../../../community-modules/core/src/edit/editApi.ts", "../../../../community-modules/core/src/edit/editService.ts", "../../../../community-modules/core/src/edit/rowEditService.ts", "../../../../community-modules/core/src/edit/editModule.ts", "../../../../community-modules/core/src/rendering/autoWidthCalculator.ts", "../../../../community-modules/core/src/rendering/features/stickyRowFeature.ts", "../../../../community-modules/core/src/rendering/rowRenderer.ts", "../../../../community-modules/core/src/pinnedRowModel/pinnedRowModel.ts", "../../../../community-modules/core/src/interfaces/serverSideTransaction.ts", "../../../../community-modules/core/src/rowNodeCache/rowNodeBlock.ts", "../../../../community-modules/core/src/rowNodeCache/rowNodeBlockLoader.ts", "../../../../community-modules/core/src/rowNodeCache/rowNodeBlockModule.ts", "../../../../community-modules/core/src/selection/rowRangeSelectionContext.ts", "../../../../community-modules/core/src/styling/stylingService.ts", "../../../../community-modules/core/src/widgets/agToggleButton.ts", "../../../../community-modules/core/src/widgets/tabGuardCtrl.ts", "../../../../community-modules/core/src/widgets/tabGuardFeature.ts", "../../../../community-modules/core/src/widgets/tabGuardComp.ts", "../../../../community-modules/core/src/widgets/popupService.ts", "../../../../community-modules/core/src/vanillaFrameworkOverrides.ts", "../../../../community-modules/core/src/cellNavigationService.ts", "../../../../community-modules/core/src/api/apiFunctionService.ts", "../../../../community-modules/core/src/api/apiUtils.ts", "../../../../community-modules/core/src/columns/columnDefFactory.ts", "../../../../community-modules/core/src/columns/columnEventDispatcher.ts", "../../../../community-modules/core/src/columns/columnGetStateService.ts", "../../../../community-modules/core/src/columns/columnGroupStateService.ts", "../../../../community-modules/core/src/columns/columnViewportService.ts", "../../../../community-modules/core/src/components/framework/agComponentUtils.ts", "../../../../community-modules/core/src/components/framework/componentMetadataProvider.ts", "../../../../community-modules/core/src/context/gridBeanComparator.ts", "../../../../community-modules/core/src/ctrlsFactory.ts", "../../../../community-modules/core/src/ctrlsService.ts", "../../../../community-modules/core/src/entities/cellPositionUtils.ts", "../../../../community-modules/core/src/entities/rowNodeEventThrottle.ts", "../../../../community-modules/core/src/entities/rowPositionUtils.ts", "../../../../community-modules/core/src/environment.ts", "../../../../community-modules/core/src/eventService.ts", "../../../../community-modules/core/src/focusService.ts", "../../../../community-modules/core/src/gridBodyComp/pinnedWidthService.ts", "../../../../community-modules/core/src/gridComp/gridCtrl.ts", "../../../../community-modules/core/src/gridComp/gridComp.ts", "../../../../community-modules/core/src/alignedGridsService.ts", "../../../../community-modules/core/src/alignedGridsModule.ts", "../../../../community-modules/core/src/columns/columnApi.ts", "../../../../community-modules/core/src/columns/dataTypeService.ts", "../../../../community-modules/core/src/columns/columnModule.ts", "../../../../community-modules/core/src/dragAndDrop/dragApi.ts", "../../../../community-modules/core/src/dragAndDrop/dragModule.ts", "../../../../community-modules/core/src/pinnedRowModel/pinnedRowApi.ts", "../../../../community-modules/core/src/pinnedRowModel/pinnedRowModule.ts", "../../../../community-modules/core/src/rendering/overlays/overlayApi.ts", "../../../../community-modules/core/src/rendering/overlays/overlayModule.ts", "../../../../community-modules/core/src/rendering/renderApi.ts", "../../../../community-modules/core/src/rendering/renderModule.ts", "../../../../community-modules/core/src/api/cellApi.ts", "../../../../community-modules/core/src/api/coreApi.ts", "../../../../community-modules/core/src/api/eventApi.ts", "../../../../community-modules/core/src/api/keyboardNavigationApi.ts", "../../../../community-modules/core/src/api/menuApi.ts", "../../../../community-modules/core/src/api/rowApi.ts", "../../../../community-modules/core/src/api/rowSelectionApi.ts", "../../../../community-modules/core/src/api/sortApi.ts", "../../../../community-modules/core/src/api/apiModule.ts", "../../../../community-modules/core/src/misc/state/stateApi.ts", "../../../../community-modules/core/src/misc/state/stateService.ts", "../../../../community-modules/core/src/misc/state/stateModule.ts", "../../../../community-modules/core/src/pagination/paginationApi.ts", "../../../../community-modules/core/src/pagination/paginationAutoPageSizeService.ts", "../../../../community-modules/core/src/utils/focus.ts", "../../../../community-modules/core/src/pagination/pageSizeSelector/pageSizeSelectorComp.ts", "../../../../community-modules/core/src/pagination/paginationComp.ts", "../../../../community-modules/core/src/pagination/paginationService.ts", "../../../../community-modules/core/src/pagination/paginationModule.ts", "../../../../community-modules/core/src/validation/apiFunctionValidator.ts", "../../../../community-modules/core/src/validation/rules/colDefValidations.ts", "../../../../community-modules/core/src/validation/rules/gridOptionsValidations.ts", "../../../../community-modules/core/src/validation/validationService.ts", "../../../../community-modules/core/src/gridCoreModule.ts", "../../../../community-modules/core/src/gridDestroyService.ts", "../../../../community-modules/core/src/events.ts", "../../../../community-modules/core/src/gridOptionsService.ts", "../../../../community-modules/core/src/headerRendering/common/headerPosition.ts", "../../../../community-modules/core/src/localeService.ts", "../../../../community-modules/core/src/misc/apiEventService.ts", "../../../../community-modules/core/src/pagination/pageBoundsListener.ts", "../../../../community-modules/core/src/pagination/pageBoundsService.ts", "../../../../community-modules/core/src/rendering/ariaAnnouncementService.ts", "../../../../community-modules/core/src/rendering/columnAnimationService.ts", "../../../../community-modules/core/src/rendering/columnHoverService.ts", "../../../../community-modules/core/src/rendering/overlays/overlayService.ts", "../../../../community-modules/core/src/rendering/row/rowCssClassCalculator.ts", "../../../../community-modules/core/src/rendering/rowContainerHeightService.ts", "../../../../community-modules/core/src/rowNodes/rowNodeSorter.ts", "../../../../community-modules/core/src/utils/changedPath.ts", "../../../../community-modules/core/src/selection/selectionService.ts", "../../../../community-modules/core/src/rowNodes/selectableService.ts", "../../../../community-modules/core/src/sortController.ts", "../../../../community-modules/core/src/syncService.ts", "../../../../community-modules/core/src/valueService/changeDetectionService.ts", "../../../../community-modules/core/src/valueService/expressionService.ts", "../../../../community-modules/core/src/valueService/valueCache.ts", "../../../../community-modules/core/src/valueService/valueService.ts", "../../../../community-modules/core/src/grid.ts", "../../../../community-modules/core/src/api/rowModelHelperService.ts", "../../../../community-modules/core/src/api/csrmSsrmSharedApi.ts", "../../../../community-modules/core/src/api/ssrmInfiniteSharedApi.ts", "../../../../community-modules/core/src/api/sharedApiModule.ts", "../../../../community-modules/core/src/components/framework/frameworkComponentWrapper.ts", "../../../../community-modules/core/src/utils/rowNode.ts", "../../../../community-modules/core/src/interfaces/iChartOptions.ts", "../../../../community-modules/core/src/interfaces/iSparklineCellRendererParams.ts", "../../../../community-modules/core/src/main.ts", "../../../../community-modules/client-side-row-model/src/clientSideRowModel/clientSideNodeManager.ts", "../../../../community-modules/client-side-row-model/src/clientSideRowModel/clientSideRowModel.ts", "../../../../community-modules/client-side-row-model/src/clientSideRowModel/clientSideRowModelApi.ts", "../../../../community-modules/client-side-row-model/src/clientSideRowModel/filterStage.ts", "../../../../community-modules/client-side-row-model/src/clientSideRowModel/flattenStage.ts", "../../../../community-modules/client-side-row-model/src/clientSideRowModel/immutableService.ts", "../../../../community-modules/client-side-row-model/src/clientSideRowModel/sortService.ts", "../../../../community-modules/client-side-row-model/src/clientSideRowModel/sortStage.ts", "../../../../community-modules/client-side-row-model/src/version.ts", "../../../../community-modules/client-side-row-model/src/clientSideRowModelModule.ts", "../../../../community-modules/csv-export/src/csvExport/baseCreator.ts", "../../../../community-modules/csv-export/src/csvExport/sessions/baseGridSerializingSession.ts", "../../../../community-modules/csv-export/src/csvExport/csvCreator.ts", "../../../../community-modules/csv-export/src/csvExport/downloader.ts", "../../../../community-modules/csv-export/src/csvExport/sessions/csvSerializingSession.ts", "../../../../community-modules/csv-export/src/csvExportModule.ts", "../../../../community-modules/csv-export/src/csvExport/csvExportApi.ts", "../../../../community-modules/csv-export/src/csvExport/gridSerializer.ts", "../../../../community-modules/csv-export/src/version.ts", "../../../../community-modules/csv-export/src/csvExport/xmlFactory.ts", "../../../../community-modules/csv-export/src/csvExport/zipContainer/zipContainerHelper.ts", "../../../../community-modules/csv-export/src/csvExport/zipContainer/compress.ts", "../../../../community-modules/csv-export/src/csvExport/zipContainer/convert.ts", "../../../../community-modules/csv-export/src/csvExport/zipContainer/crcTable.ts", "../../../../community-modules/csv-export/src/csvExport/zipContainer/zipContainer.ts", "../../../../community-modules/infinite-row-model/src/infiniteRowModelModule.ts", "../../../../community-modules/infinite-row-model/src/infiniteRowModel/infiniteRowModel.ts", "../../../../community-modules/infinite-row-model/src/infiniteRowModel/infiniteCache.ts", "../../../../community-modules/infinite-row-model/src/infiniteRowModel/infiniteBlock.ts", "../../../../community-modules/infinite-row-model/src/infiniteRowModel/infiniteRowModelApi.ts", "../../../../community-modules/infinite-row-model/src/version.ts"],
  "sourcesContent": ["/*\n * Used for umd bundles without styles, as well as cjs/esm packaging\n */\nimport { ClientSideRowModelModule } from '@ag-grid-community/client-side-row-model';\nimport { CommunityFeaturesModule, ModuleRegistry } from '@ag-grid-community/core';\nimport { CsvExportModule } from '@ag-grid-community/csv-export';\nimport { InfiniteRowModelModule } from '@ag-grid-community/infinite-row-model';\n\nModuleRegistry.__registerModules(\n    [CommunityFeaturesModule, ClientSideRowModelModule, InfiniteRowModelModule, CsvExportModule],\n    false,\n    undefined\n);\n\nexport * from '@ag-grid-community/core';\nexport * from '@ag-grid-community/client-side-row-model';\nexport * from '@ag-grid-community/csv-export';\nexport * from '@ag-grid-community/infinite-row-model';\n", "import type { AgEvent, AgGridEvent } from './events';\nimport type { IEventEmitter, IEventListener, IGlobalEventListener } from './interfaces/iEventEmitter';\nimport type { IFrameworkOverrides } from './interfaces/iFrameworkOverrides';\n\nexport class LocalEventService<TEventType extends string> implements IEventEmitter<TEventType> {\n    private allSyncListeners = new Map<TEventType, Set<IEventListener<TEventType>>>();\n    private allAsyncListeners = new Map<TEventType, Set<IEventListener<TEventType>>>();\n\n    private globalSyncListeners = new Set<IGlobalEventListener<TEventType>>();\n    private globalAsyncListeners = new Set<IGlobalEventListener<TEventType>>();\n\n    private frameworkOverrides?: IFrameworkOverrides;\n\n    private asyncFunctionsQueue: (() => void)[] = [];\n    private scheduled = false;\n\n    // using an object performs better than a Set for the number of different events we have\n    private firedEvents: { [key in TEventType]?: boolean } = {};\n\n    public setFrameworkOverrides(frameworkOverrides: IFrameworkOverrides): void {\n        this.frameworkOverrides = frameworkOverrides;\n    }\n\n    private getListeners(\n        eventType: TEventType,\n        async: boolean,\n        autoCreateListenerCollection: boolean\n    ): Set<IEventListener<TEventType>> | undefined {\n        const listenerMap = async ? this.allAsyncListeners : this.allSyncListeners;\n        let listeners = listenerMap.get(eventType);\n\n        // Note: 'autoCreateListenerCollection' should only be 'true' if a listener is about to be added. For instance\n        // getListeners() is also called during event dispatch even though no listeners are added. This measure protects\n        // against 'memory bloat' as empty collections will prevent the RowNode's event service from being removed after\n        // the RowComp is destroyed, see noRegisteredListenersExist() below.\n        if (!listeners && autoCreateListenerCollection) {\n            listeners = new Set<IEventListener<TEventType>>();\n            listenerMap.set(eventType, listeners);\n        }\n\n        return listeners;\n    }\n\n    public noRegisteredListenersExist(): boolean {\n        return (\n            this.allSyncListeners.size === 0 &&\n            this.allAsyncListeners.size === 0 &&\n            this.globalSyncListeners.size === 0 &&\n            this.globalAsyncListeners.size === 0\n        );\n    }\n\n    public addEventListener<T extends TEventType>(eventType: T, listener: IEventListener<T>, async = false): void {\n        this.getListeners(eventType, async, true)!.add(listener);\n    }\n\n    public removeEventListener<T extends TEventType>(eventType: T, listener: IEventListener<T>, async = false): void {\n        const listeners = this.getListeners(eventType, async, false);\n        if (!listeners) {\n            return;\n        }\n\n        listeners.delete(listener);\n\n        if (listeners.size === 0) {\n            const listenerMap = async ? this.allAsyncListeners : this.allSyncListeners;\n            listenerMap.delete(eventType);\n        }\n    }\n\n    public addGlobalListener(listener: IGlobalEventListener<TEventType>, async = false): void {\n        (async ? this.globalAsyncListeners : this.globalSyncListeners).add(listener);\n    }\n\n    public removeGlobalListener(listener: IGlobalEventListener<TEventType>, async = false): void {\n        (async ? this.globalAsyncListeners : this.globalSyncListeners).delete(listener);\n    }\n\n    public dispatchEvent(event: AgEvent<TEventType>): void {\n        const agEvent = event as AgGridEvent<any, any, TEventType>;\n\n        this.dispatchToListeners(agEvent, true);\n        this.dispatchToListeners(agEvent, false);\n\n        this.firedEvents[agEvent.type] = true;\n    }\n\n    public dispatchEventOnce(event: AgEvent<TEventType>): void {\n        if (!this.firedEvents[event.type]) {\n            this.dispatchEvent(event);\n        }\n    }\n\n    private dispatchToListeners(event: AgGridEvent<any, any, TEventType>, async: boolean) {\n        const eventType = event.type;\n\n        if (async && 'event' in event) {\n            const browserEvent = (event as any).event;\n            if (browserEvent instanceof Event) {\n                // AG-7893 - Persist composedPath() so that its result can still be accessed by the user asynchronously.\n                // Within an async event handler if they call composedPath() on the event it will always return an empty [].\n                (event as any).eventPath = browserEvent.composedPath();\n            }\n        }\n\n        const processEventListeners = (\n            listeners: Set<IEventListener<TEventType>>,\n            originalListeners: Set<IEventListener<TEventType>>\n        ) =>\n            listeners.forEach((listener) => {\n                if (!originalListeners.has(listener)) {\n                    // A listener could have been removed by a previously processed listener. In this case we don't want to call\n                    return;\n                }\n                const callback = this.frameworkOverrides\n                    ? () => this.frameworkOverrides!.wrapIncoming(() => listener(event))\n                    : () => listener(event);\n\n                if (async) {\n                    this.dispatchAsync(callback);\n                } else {\n                    callback();\n                }\n            });\n\n        const originalListeners = this.getListeners(eventType, async, false) ?? new Set<IEventListener<TEventType>>();\n        // create a shallow copy to prevent listeners cyclically adding more listeners to capture this event\n        const listeners = new Set<IEventListener<TEventType>>(originalListeners);\n        if (listeners.size > 0) {\n            processEventListeners(listeners, originalListeners);\n        }\n\n        const globalListeners: Set<IGlobalEventListener<TEventType>> = new Set(\n            async ? this.globalAsyncListeners : this.globalSyncListeners\n        );\n\n        globalListeners.forEach((listener) => {\n            const callback = this.frameworkOverrides\n                ? () => this.frameworkOverrides!.wrapIncoming(() => listener(eventType, event))\n                : () => listener(eventType, event);\n\n            if (async) {\n                this.dispatchAsync(callback);\n            } else {\n                callback();\n            }\n        });\n    }\n\n    // this gets called inside the grid's thread, for each event that it\n    // wants to set async. the grid then batches the events into one setTimeout()\n    // because setTimeout() is an expensive operation. ideally we would have\n    // each event in it's own setTimeout(), but we batch for performance.\n    private dispatchAsync(func: () => void): void {\n        // add to the queue for executing later in the next VM turn\n        this.asyncFunctionsQueue.push(func);\n\n        // check if timeout is already scheduled. the first time the grid calls\n        // this within it's thread turn, this should be false, so it will schedule\n        // the 'flush queue' method the first time it comes here. then the flag is\n        // set to 'true' so it will know it's already scheduled for subsequent calls.\n        if (!this.scheduled) {\n            // if not scheduled, schedule one\n            const flush = () => {\n                window.setTimeout(this.flushAsyncQueue.bind(this), 0);\n            };\n            this.frameworkOverrides ? this.frameworkOverrides.wrapIncoming(flush) : flush();\n            // mark that it is scheduled\n            this.scheduled = true;\n        }\n    }\n\n    // this happens in the next VM turn only, and empties the queue of events\n    private flushAsyncQueue(): void {\n        this.scheduled = false;\n\n        // we take a copy, because the event listener could be using\n        // the grid, which would cause more events, which would be potentially\n        // added to the queue, so safe to take a copy, the new events will\n        // get executed in a later VM turn rather than risk updating the\n        // queue as we are flushing it.\n        const queueCopy = this.asyncFunctionsQueue.slice();\n        this.asyncFunctionsQueue = [];\n\n        // execute the queue\n        queueCopy.forEach((func) => func());\n    }\n}\n", "export function _existsAndNotEmpty<T>(value?: T[]): boolean {\n    return value != null && value.length > 0;\n}\n\nexport function _last<T>(arr: T[]): T;\nexport function _last<T extends Node>(arr: NodeListOf<T>): T;\nexport function _last(arr: any): any {\n    if (!arr || !arr.length) {\n        return;\n    }\n\n    return arr[arr.length - 1];\n}\n\nexport function _areEqual<T>(a?: T[] | null, b?: T[] | null, comparator?: (a: T, b: T) => boolean): boolean {\n    if (a == null && b == null) {\n        return true;\n    }\n\n    return (\n        a != null &&\n        b != null &&\n        a.length === b.length &&\n        a.every((value, index) => (comparator ? comparator(value, b[index]) : b[index] === value))\n    );\n}\n\nexport function _shallowCompare(arr1: any[], arr2: any[]): boolean {\n    return _areEqual(arr1, arr2);\n}\n\nexport function _sortNumerically(array: number[]): number[] {\n    return array.sort((a, b) => a - b);\n}\n\nexport function _removeRepeatsFromArray<T>(array: T[], object: T) {\n    if (!array) {\n        return;\n    }\n\n    for (let index = array.length - 2; index >= 0; index--) {\n        const thisOneMatches = array[index] === object;\n        const nextOneMatches = array[index + 1] === object;\n\n        if (thisOneMatches && nextOneMatches) {\n            array.splice(index + 1, 1);\n        }\n    }\n}\n\nexport function _removeFromUnorderedArray<T>(array: T[], object: T) {\n    const index = array.indexOf(object);\n\n    if (index >= 0) {\n        // preserve the last element, then shorten array length by 1 to delete index\n        array[index] = array[array.length - 1];\n        array.pop();\n    }\n}\n\nexport function _removeFromArray<T>(array: T[], object: T) {\n    const index = array.indexOf(object);\n\n    if (index >= 0) {\n        array.splice(index, 1);\n    }\n}\n\nexport function _removeAllFromUnorderedArray<T>(array: T[], toRemove: T[]) {\n    for (let i = 0; i < toRemove.length; i++) {\n        _removeFromUnorderedArray(array, toRemove[i]);\n    }\n}\n\nexport function _removeAllFromArray<T>(array: T[], toRemove: T[]) {\n    for (let i = 0; i < toRemove.length; i++) {\n        _removeFromArray(array, toRemove[i]);\n    }\n}\n\nexport function _insertIntoArray<T>(array: T[], object: T, toIndex: number) {\n    array.splice(toIndex, 0, object);\n}\n\nexport function _insertArrayIntoArray<T>(dest: T[], src: T[], toIndex: number) {\n    if (dest == null || src == null) {\n        return;\n    }\n\n    // put items in backwards, otherwise inserted items end up in reverse order\n    for (let i = src.length - 1; i >= 0; i--) {\n        const item = src[i];\n        _insertIntoArray(dest, item, toIndex);\n    }\n}\n\nexport function _moveInArray<T>(array: T[], objectsToMove: T[], toIndex: number) {\n    // first take out items from the array\n    _removeAllFromArray(array, objectsToMove);\n\n    // now add the objects, in same order as provided to us, that means we start at the end\n    // as the objects will be pushed to the right as they are inserted\n    objectsToMove\n        .slice()\n        .reverse()\n        .forEach((obj) => _insertIntoArray(array, obj, toIndex));\n}\n\nexport function _includes<T>(array: T[], value: T): boolean {\n    return array.indexOf(value) > -1;\n}\n\nexport function _flatten<T>(arrayOfArrays: (T | T[])[]): T[] {\n    return [].concat.apply([], arrayOfArrays);\n}\n\nexport function _pushAll<T>(target: T[], source: T[]): void {\n    if (source == null || target == null) {\n        return;\n    }\n\n    source.forEach((value) => target.push(value));\n}\n\nexport function _forEachReverse<T>(list: T[], action: (value: T, index: number) => void): void {\n    if (list == null) {\n        return;\n    }\n\n    for (let i = list.length - 1; i >= 0; i--) {\n        action(list[i], i);\n    }\n}\n", "import type { GridOptionsService } from '../gridOptionsService';\nimport type { IFrameworkOverrides } from '../interfaces/iFrameworkOverrides';\nimport { _includes } from './array';\n\nconst AG_GRID_STOP_PROPAGATION = '__ag_Grid_Stop_Propagation';\nconst PASSIVE_EVENTS = ['touchstart', 'touchend', 'touchmove', 'touchcancel', 'scroll'];\nconst supports: { [key: string]: boolean } = {};\n\n/**\n * a user once raised an issue - they said that when you opened a popup (eg context menu)\n * and then clicked on a selection checkbox, the popup wasn't closed. this is because the\n * popup listens for clicks on the body, however ag-grid WAS stopping propagation on the\n * checkbox clicks (so the rows didn't pick them up as row selection selection clicks).\n * to get around this, we have a pattern to stop propagation for the purposes of AG Grid,\n * but we still let the event pass back to the body.\n * @param {Event} event\n */\nexport function _stopPropagationForAgGrid(event: Event): void {\n    (event as any)[AG_GRID_STOP_PROPAGATION] = true;\n}\n\nexport function _isStopPropagationForAgGrid(event: Event): boolean {\n    return (event as any)[AG_GRID_STOP_PROPAGATION] === true;\n}\n\nexport const _isEventSupported = (() => {\n    const tags = {\n        select: 'input',\n        change: 'input',\n        submit: 'form',\n        reset: 'form',\n        error: 'img',\n        load: 'img',\n        abort: 'img',\n    } as any;\n\n    const eventChecker = (eventName: any) => {\n        if (typeof supports[eventName] === 'boolean') {\n            return supports[eventName];\n        }\n\n        const el = document.createElement(tags[eventName] || 'div');\n        eventName = 'on' + eventName;\n\n        return (supports[eventName] = eventName in el);\n    };\n\n    return eventChecker;\n})();\n\nexport function _getCtrlForEventTarget<T>(\n    gos: GridOptionsService,\n    eventTarget: EventTarget | null,\n    type: string\n): T | null {\n    let sourceElement = eventTarget as HTMLElement;\n\n    while (sourceElement) {\n        const renderedComp = gos.getDomData(sourceElement, type);\n\n        if (renderedComp) {\n            return renderedComp as T;\n        }\n\n        sourceElement = sourceElement.parentElement!;\n    }\n\n    return null;\n}\n\nexport function _isElementInEventPath(element: HTMLElement, event: Event): boolean {\n    if (!event || !element) {\n        return false;\n    }\n\n    return _getEventPath(event).indexOf(element) >= 0;\n}\n\nexport function _createEventPath(event: { target: EventTarget }): EventTarget[] {\n    const res: EventTarget[] = [];\n    let pointer: any = event.target;\n\n    while (pointer) {\n        res.push(pointer);\n        pointer = pointer.parentElement;\n    }\n\n    return res;\n}\n\n/**\n * Gets the path for a browser Event or from the target on an AG Grid Event\n * https://developer.mozilla.org/en-US/docs/Web/API/Event\n * @param {Event| { target: EventTarget }} event\n * @returns {EventTarget[]}\n */\nexport function _getEventPath(event: Event | { target: EventTarget }): EventTarget[] {\n    // This can be called with either a browser event or an AG Grid Event that has a target property.\n    const eventNoType = event as any;\n\n    if (eventNoType.path) {\n        return eventNoType.path;\n    }\n\n    if (eventNoType.composedPath) {\n        return eventNoType.composedPath();\n    }\n\n    // If this is an AG Grid event build the path ourselves\n    return _createEventPath(eventNoType);\n}\n\nexport function _addSafePassiveEventListener(\n    frameworkOverrides: IFrameworkOverrides,\n    eElement: HTMLElement,\n    event: string,\n    listener: (event?: any) => void\n) {\n    const isPassive = _includes(PASSIVE_EVENTS, event);\n    const options = isPassive ? { passive: true } : undefined;\n\n    // this check is here for certain scenarios where I believe the user must be destroying\n    // the grid somehow but continuing for it to be used\n    if (frameworkOverrides && frameworkOverrides.addEventListener) {\n        frameworkOverrides.addEventListener(eElement, event, listener, options);\n    }\n}\n", "import type { GridOptions } from '../entities/gridOptions';\nimport type { EventService } from '../eventService';\nimport type { AgEventType } from '../eventTypes';\nimport type { AgEvent, AgEventListener, AgEventTypeParams } from '../events';\nimport type {\n    GridOptionsService,\n    PropertyChangedEvent,\n    PropertyChangedListener,\n    PropertyValueChangedEvent,\n    PropertyValueChangedListener,\n} from '../gridOptionsService';\nimport type { IEventEmitter } from '../interfaces/iEventEmitter';\nimport type { IFrameworkOverrides } from '../interfaces/iFrameworkOverrides';\nimport { LocalEventService } from '../localEventService';\nimport type { LocaleService } from '../localeService';\nimport { _addSafePassiveEventListener } from '../utils/event';\nimport type { Bean } from './bean';\nimport type { BeanCollection, Context } from './context';\nimport type { BaseBean } from './genericContext';\n\nexport type BeanStubEvent = 'destroyed';\nexport type EventOrDestroyed<TEventType extends string> = TEventType | BeanStubEvent;\n\ntype EventHandlers<TEventKey extends string, TEvent = any> = { [K in TEventKey]?: (event?: TEvent) => void };\n\ntype AgEventHandlers = { [K in AgEventType]?: (event: AgEventTypeParams[K]) => void };\n\nexport abstract class BeanStub<TEventType extends string = BeanStubEvent>\n    implements BaseBean<BeanCollection>, Bean, IEventEmitter<EventOrDestroyed<TEventType>>\n{\n    protected localEventService?: LocalEventService<EventOrDestroyed<TEventType>>;\n\n    private stubContext: Context; // not named context to allow children to use 'context' as a variable name\n    private destroyFunctions: (() => void)[] = [];\n    private destroyed = false;\n\n    // for vue 3 - prevents Vue from trying to make this (and obviously any sub classes) from being reactive\n    // prevents vue from creating proxies for created objects and prevents identity related issues\n    public __v_skip = true;\n\n    protected frameworkOverrides: IFrameworkOverrides;\n    protected eventService: EventService;\n    protected gos: GridOptionsService;\n    protected localeService: LocaleService;\n    protected gridId: string;\n\n    public preWireBeans(beans: BeanCollection): void {\n        this.gridId = beans.context.getGridId();\n        this.frameworkOverrides = beans.frameworkOverrides;\n        this.stubContext = beans.context;\n        this.eventService = beans.eventService;\n        this.gos = beans.gos;\n        this.localeService = beans.localeService;\n    }\n\n    // this was a test constructor niall built, when active, it prints after 5 seconds all beans/components that are\n    // not destroyed. to use, create a new grid, then api.destroy() before 5 seconds. then anything that gets printed\n    // points to a bean or component that was not properly disposed of.\n    // constructor() {\n    //     setTimeout(()=> {\n    //         if (this.isAlive()) {\n    //             let prototype: any = Object.getPrototypeOf(this);\n    //             const constructor: any = prototype.constructor;\n    //             const constructorString = constructor.toString();\n    //             const beanName = constructorString.substring(9, constructorString.indexOf(\"(\"));\n    //             console.log('is alive ' + beanName);\n    //         }\n    //     }, 5000);\n    // }\n\n    // CellComp and GridComp and override this because they get the FrameworkOverrides from the Beans bean\n    protected getFrameworkOverrides(): IFrameworkOverrides {\n        return this.frameworkOverrides;\n    }\n\n    public destroy(): void {\n        for (let i = 0; i < this.destroyFunctions.length; i++) {\n            this.destroyFunctions[i]();\n        }\n        this.destroyFunctions.length = 0;\n        this.destroyed = true;\n\n        // cast destroy type as we do not want to expose destroy event type to the dispatchLocalEvent method\n        // as no one else should be firing destroyed at the bean stub.\n        this.dispatchLocalEvent({ type: 'destroyed' } as { type: BeanStubEvent } as any);\n    }\n\n    // The typing of AgEventListener<any, any, any> is not ideal, but it's the best we can do at the moment to enable\n    // eventService to have the best typing at the expense of BeanStub local events\n    /** Add a local event listener against this BeanStub */\n    public addEventListener<T extends TEventType>(eventType: T, listener: AgEventListener<any, any, any>): void {\n        if (!this.localEventService) {\n            this.localEventService = new LocalEventService();\n        }\n        this.localEventService!.addEventListener(eventType, listener);\n    }\n\n    /** Remove a local event listener from this BeanStub */\n    public removeEventListener<T extends TEventType>(eventType: T, listener: AgEventListener<any, any, any>): void {\n        if (this.localEventService) {\n            this.localEventService.removeEventListener(eventType, listener);\n        }\n    }\n\n    public dispatchLocalEvent<TEvent extends AgEvent<TEventType>>(event: TEvent): void {\n        if (this.localEventService) {\n            this.localEventService.dispatchEvent(event);\n        }\n    }\n\n    public addManagedElementListeners<TEvent extends keyof HTMLElementEventMap>(\n        object: Element | Document,\n        handlers: EventHandlers<TEvent, HTMLElementEventMap[TEvent]>\n    ) {\n        return this._setupListeners<keyof HTMLElementEventMap>(object, handlers);\n    }\n    public addManagedEventListeners(handlers: AgEventHandlers) {\n        return this._setupListeners<AgEventType>(this.eventService, handlers);\n    }\n    public addManagedListeners<TEvent extends string>(object: IEventEmitter<TEvent>, handlers: EventHandlers<TEvent>) {\n        return this._setupListeners<TEvent>(object, handlers);\n    }\n\n    private _setupListeners<TEvent extends string>(\n        object: HTMLElement | IEventEmitter<TEvent>,\n        handlers: EventHandlers<TEvent>\n    ) {\n        const destroyFuncs: (() => null)[] = [];\n        for (const k in handlers) {\n            const handler = handlers[k];\n            if (handler) {\n                destroyFuncs.push(this._setupListener(object, k, handler));\n            }\n        }\n        return destroyFuncs;\n    }\n\n    private _setupListener<const T extends string>(\n        object: Window | HTMLElement | IEventEmitter<T>,\n        event: T,\n        listener: (event?: any) => void\n    ): () => null {\n        if (this.destroyed) {\n            return () => null;\n        }\n\n        if (object instanceof HTMLElement) {\n            _addSafePassiveEventListener(this.getFrameworkOverrides(), object, event, listener);\n        } else {\n            object.addEventListener(event, listener);\n        }\n\n        const destroyFunc: () => null = () => {\n            (object as any).removeEventListener(event, listener);\n            return null;\n        };\n\n        this.destroyFunctions.push(destroyFunc);\n\n        return () => {\n            destroyFunc();\n            // Only remove if manually called before bean is destroyed\n            this.destroyFunctions = this.destroyFunctions.filter((fn) => fn !== destroyFunc);\n            return null;\n        };\n    }\n\n    /**\n     * Setup a managed property listener for the given GridOption property.\n     * However, stores the destroy function in the beanStub so that if this bean\n     * is a component the destroy function will be called when the component is destroyed\n     * as opposed to being cleaned up only when the GridOptionsService is destroyed.\n     */\n    private setupGridOptionListener<K extends keyof GridOptions>(\n        event: keyof GridOptions,\n        listener: PropertyValueChangedListener<K>\n    ): () => null {\n        this.gos.addPropertyEventListener(event, listener);\n        const destroyFunc: () => null = () => {\n            this.gos.removePropertyEventListener(event, listener);\n            return null;\n        };\n        this.destroyFunctions.push(destroyFunc);\n\n        return () => {\n            destroyFunc();\n            // Only remove if manually called before bean is destroyed\n            this.destroyFunctions = this.destroyFunctions.filter((fn) => fn !== destroyFunc);\n            return null;\n        };\n    }\n\n    /**\n     * Setup a managed property listener for the given GridOption property.\n     * @param event GridOption property to listen to changes for.\n     * @param listener Listener to run when property value changes\n     */\n    public addManagedPropertyListener<K extends keyof GridOptions>(\n        event: K,\n        listener: PropertyValueChangedListener<K>\n    ): () => null {\n        if (this.destroyed) {\n            return () => null;\n        }\n\n        return this.setupGridOptionListener(event, listener);\n    }\n\n    private propertyListenerId = 0;\n    // Enable multiple grid properties to be updated together by the user but only trigger shared logic once.\n    // Closely related to logic in ComponentUtil.ts\n    private lastChangeSetIdLookup: Record<string, number> = {};\n    /**\n     * Setup managed property listeners for the given set of GridOption properties.\n     * The listener will be run if any of the property changes but will only run once if\n     * multiple of the properties change within the same framework lifecycle event.\n     * Works on the basis that GridOptionsService updates all properties *before* any property change events are fired.\n     * @param events Array of GridOption properties to listen for changes too.\n     * @param listener Shared listener to run if any of the properties change\n     */\n    public addManagedPropertyListeners(events: (keyof GridOptions)[], listener: PropertyChangedListener): void {\n        if (this.destroyed) {\n            return;\n        }\n\n        // Ensure each set of events can run for the same changeSetId\n        const eventsKey = events.join('-') + this.propertyListenerId++;\n\n        const wrappedListener = (event: PropertyValueChangedEvent<any>) => {\n            if (event.changeSet) {\n                // ChangeSet is only set when the property change is part of a group of changes from ComponentUtils\n                // Direct api calls should always be run as\n                if (event.changeSet && event.changeSet.id === this.lastChangeSetIdLookup[eventsKey]) {\n                    // Already run the listener for this set of prop changes so don't run again\n                    return;\n                }\n                this.lastChangeSetIdLookup[eventsKey] = event.changeSet.id;\n            }\n            // Don't expose the underlying event value changes to the group listener.\n            const propertiesChangeEvent: PropertyChangedEvent = {\n                type: 'gridPropertyChanged',\n                changeSet: event.changeSet,\n                source: event.source,\n            };\n            listener(propertiesChangeEvent);\n        };\n\n        events.forEach((event) => this.setupGridOptionListener(event, wrappedListener));\n    }\n\n    public isAlive = (): boolean => !this.destroyed;\n\n    public addDestroyFunc(func: () => void): void {\n        // if we are already destroyed, we execute the func now\n        if (this.isAlive()) {\n            this.destroyFunctions.push(func);\n        } else {\n            func();\n        }\n    }\n\n    public createManagedBean<T extends Bean | null | undefined>(bean: T, context?: Context): T {\n        const res = this.createBean(bean, context);\n        this.addDestroyFunc(this.destroyBean.bind(this, bean, context));\n        return res;\n    }\n\n    protected createBean<T extends Bean | null | undefined>(\n        bean: T,\n        context?: Context | null,\n        afterPreCreateCallback?: (bean: Bean) => void\n    ): T {\n        return (context || this.stubContext).createBean(bean, afterPreCreateCallback);\n    }\n\n    /**\n     * Destroys a bean and returns undefined to support destruction and clean up in a single line.\n     * this.dateComp = this.context.destroyBean(this.dateComp);\n     */\n    protected destroyBean<T extends Bean | null | undefined>(bean: T, context?: Context): undefined {\n        return (context || this.stubContext).destroyBean(bean);\n    }\n\n    /**\n     * Destroys an array of beans and returns an empty array to support destruction and clean up in a single line.\n     * this.dateComps = this.context.destroyBeans(this.dateComps);\n     */\n    protected destroyBeans<T extends Bean | null | undefined>(beans: T[], context?: Context): T[] {\n        return (context || this.stubContext).destroyBeans(beans);\n    }\n}\n", "import type { IFrameworkOverrides } from '../interfaces/iFrameworkOverrides';\n\nexport class FrameworkEventListenerService<\n    TEventListener extends (e: any) => void,\n    TGlobalEventListener extends (name: string, e: any) => void,\n> {\n    // Map from user listener to wrapped listener so we can remove listener provided by user\n    private wrappedListeners: Map<TEventListener, TEventListener> = new Map();\n    private wrappedGlobalListeners: Map<TGlobalEventListener, TGlobalEventListener> = new Map();\n\n    constructor(private frameworkOverrides: IFrameworkOverrides) {}\n\n    public wrap(userListener: TEventListener): TEventListener {\n        let listener: any = userListener;\n        if (this.frameworkOverrides.shouldWrapOutgoing) {\n            listener = (event: any) => {\n                this.frameworkOverrides.wrapOutgoing(() => userListener(event));\n            };\n            this.wrappedListeners.set(userListener, listener);\n        }\n        return listener;\n    }\n\n    public wrapGlobal(userListener: TGlobalEventListener): TGlobalEventListener {\n        let listener: any = userListener;\n\n        if (this.frameworkOverrides.shouldWrapOutgoing) {\n            listener = (eventType: any, event: any) => {\n                this.frameworkOverrides.wrapOutgoing(() => userListener(eventType, event));\n            };\n            this.wrappedGlobalListeners.set(userListener, listener);\n        }\n        return listener;\n    }\n\n    public unwrap(userListener: TEventListener): TEventListener {\n        return this.wrappedListeners.get(userListener) ?? userListener;\n    }\n    public unwrapGlobal(userListener: TGlobalEventListener): TGlobalEventListener {\n        return this.wrappedGlobalListeners.get(userListener) ?? userListener;\n    }\n}\n", "/**\n * If value is undefined, null or blank, returns null, otherwise returns the value\n * @param {T} value\n * @returns {T | null}\n */\nexport function _makeNull<T>(value?: T): T | null {\n    if (value == null || value === '') {\n        return null;\n    }\n    return value;\n}\n\nexport function _exists(value: string | null | undefined, allowEmptyString?: boolean): value is string;\nexport function _exists<T>(value: T): value is NonNullable<T>;\nexport function _exists(value: any, allowEmptyString = false): boolean {\n    return value != null && (value !== '' || allowEmptyString);\n}\n\nexport function _missing<T>(value: T | null | undefined): value is Exclude<undefined | null, T>;\nexport function _missing(value: any): boolean {\n    return !_exists(value);\n}\n\nexport function _missingOrEmpty<T>(value?: T[] | string | null): boolean {\n    return value == null || value.length === 0;\n}\n\nexport function _toStringOrNull(value: any): string | null {\n    return value != null && typeof value.toString === 'function' ? value.toString() : null;\n}\n\n// for parsing html attributes, where we want empty strings and missing attributes to be undefined\nexport function _attrToNumber(value?: number | string | null): number | null | undefined {\n    if (value === undefined) {\n        // undefined or empty means ignore the value\n        return;\n    }\n\n    if (value === null || value === '') {\n        // null or blank means clear\n        return null;\n    }\n\n    if (typeof value === 'number') {\n        return isNaN(value) ? undefined : value;\n    }\n\n    const valueParsed = parseInt(value, 10);\n\n    return isNaN(valueParsed) ? undefined : valueParsed;\n}\n\n// for parsing html attributes, where we want empty strings and missing attributes to be undefined\nexport function _attrToBoolean(value?: boolean | string | null): boolean | undefined {\n    if (value === undefined) {\n        // undefined or empty means ignore the value\n        return;\n    }\n\n    if (value === null || value === '') {\n        // null means clear\n        return false;\n    }\n\n    return toBoolean(value);\n}\n\nexport function toBoolean(value: any): boolean {\n    if (typeof value === 'boolean') {\n        return value;\n    }\n\n    if (typeof value === 'string') {\n        // for boolean, compare to empty String to allow attributes appearing with\n        // no value to be treated as 'true'\n        return value.toUpperCase() === 'TRUE' || value == '';\n    }\n\n    return false;\n}\n\n// for parsing html attributes, where we want empty strings and missing attributes to be undefined\nexport function _attrToString(value?: string): string | undefined {\n    if (value == null || value === '') {\n        return;\n    }\n\n    return value;\n}\n\nexport function _jsonEquals<T1, T2>(val1: T1, val2: T2): boolean {\n    const val1Json = val1 ? JSON.stringify(val1) : null;\n    const val2Json = val2 ? JSON.stringify(val2) : null;\n\n    return val1Json === val2Json;\n}\n\nexport function _defaultComparator(valueA: any, valueB: any, accentedCompare: boolean = false): number {\n    const valueAMissing = valueA == null;\n    const valueBMissing = valueB == null;\n\n    // this is for aggregations sum and avg, where the result can be a number that is wrapped.\n    // if we didn't do this, then the toString() value would be used, which would result in\n    // the strings getting used instead of the numbers.\n    if (valueA && valueA.toNumber) {\n        valueA = valueA.toNumber();\n    }\n\n    if (valueB && valueB.toNumber) {\n        valueB = valueB.toNumber();\n    }\n\n    if (valueAMissing && valueBMissing) {\n        return 0;\n    }\n\n    if (valueAMissing) {\n        return -1;\n    }\n\n    if (valueBMissing) {\n        return 1;\n    }\n\n    function doQuickCompare<T>(a: T, b: T): number {\n        return a > b ? 1 : a < b ? -1 : 0;\n    }\n\n    if (typeof valueA !== 'string') {\n        return doQuickCompare(valueA, valueB);\n    }\n\n    if (!accentedCompare) {\n        return doQuickCompare(valueA, valueB);\n    }\n\n    try {\n        // using local compare also allows chinese comparisons\n        return valueA.localeCompare(valueB);\n    } catch (e) {\n        // if something wrong with localeCompare, eg not supported\n        // by browser, then just continue with the quick one\n        return doQuickCompare(valueA, valueB);\n    }\n}\n\nexport function _values<T>(object: { [key: string]: T } | Set<T> | Map<any, T>): T[] {\n    if (object instanceof Set || object instanceof Map) {\n        const arr: T[] = [];\n\n        object.forEach((value: T) => arr.push(value));\n\n        return arr;\n    }\n\n    return Object.values(object);\n}\n", "import { _exists } from './generic';\n\nexport function _iterateObject<T>(\n    object: { [p: string]: T } | T[] | null | undefined,\n    callback: (key: string, value: T) => void\n) {\n    if (object == null) {\n        return;\n    }\n\n    if (Array.isArray(object)) {\n        for (let i = 0; i < object.length; i++) {\n            callback(i.toString(), object[i]);\n        }\n        return;\n    }\n\n    for (const [key, value] of Object.entries<T>(object)) {\n        callback(key, value);\n    }\n}\n\nexport function _cloneObject<T extends object>(object: T): T {\n    const copy = {} as T;\n    const keys = Object.keys(object);\n\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        const value = (object as any)[key];\n        (copy as any)[key] = value;\n    }\n\n    return copy;\n}\n\n// returns copy of an object, doing a deep clone of any objects with that object.\n// this is used for eg creating copies of Column Definitions, where we want to\n// deep copy all objects, but do not want to deep copy functions (eg when user provides\n// a function or class for colDef.cellRenderer)\nexport function _deepCloneDefinition<T>(object: T, keysToSkip?: string[]): T | undefined {\n    if (!object) {\n        return;\n    }\n\n    const obj = object as any;\n    const res: any = {};\n\n    Object.keys(obj).forEach((key) => {\n        if (keysToSkip && keysToSkip.indexOf(key) >= 0) {\n            return;\n        }\n\n        const value = obj[key];\n\n        // 'simple object' means a bunch of key/value pairs, eg {filter: 'myFilter'}. it does\n        // NOT include the following:\n        // 1) arrays\n        // 2) functions or classes (eg api instance)\n        const sourceIsSimpleObject = _isNonNullObject(value) && value.constructor === Object;\n\n        if (sourceIsSimpleObject) {\n            res[key] = _deepCloneDefinition(value);\n        } else {\n            res[key] = value;\n        }\n    });\n\n    return res;\n}\n\nexport function _getAllValuesInObject<T extends object, K extends keyof T, O extends T[K]>(obj: T): O[] {\n    if (!obj) {\n        return [];\n    }\n    const anyObject = Object as any;\n    if (typeof anyObject.values === 'function') {\n        return anyObject.values(obj);\n    }\n\n    const ret: any[] = [];\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && obj.propertyIsEnumerable(key)) {\n            ret.push(obj[key]);\n        }\n    }\n\n    return ret;\n}\n\nexport function _mergeDeep(dest: any, source: any, copyUndefined = true, makeCopyOfSimpleObjects = false): void {\n    if (!_exists(source)) {\n        return;\n    }\n\n    _iterateObject(source, (key: string, sourceValue: any) => {\n        let destValue: any = dest[key];\n\n        if (destValue === sourceValue) {\n            return;\n        }\n\n        // when creating params, we don't want to just copy objects over. otherwise merging ColDefs (eg DefaultColDef\n        // and Column Types) would result in params getting shared between objects.\n        // by putting an empty value into destValue first, it means we end up copying over values from\n        // the source object, rather than just copying in the source object in it's entirety.\n        if (makeCopyOfSimpleObjects) {\n            const objectIsDueToBeCopied = destValue == null && sourceValue != null;\n\n            if (objectIsDueToBeCopied) {\n                // 'simple object' means a bunch of key/value pairs, eg {filter: 'myFilter'}, as opposed\n                // to a Class instance (such as api instance).\n                const sourceIsSimpleObject = typeof sourceValue === 'object' && sourceValue.constructor === Object;\n                const dontCopy = sourceIsSimpleObject;\n\n                if (dontCopy) {\n                    destValue = {};\n                    dest[key] = destValue;\n                }\n            }\n        }\n\n        if (_isNonNullObject(sourceValue) && _isNonNullObject(destValue) && !Array.isArray(destValue)) {\n            _mergeDeep(destValue, sourceValue, copyUndefined, makeCopyOfSimpleObjects);\n        } else if (copyUndefined || sourceValue !== undefined) {\n            dest[key] = sourceValue;\n        }\n    });\n}\n\nexport function _getValueUsingField(data: any, field: string, fieldContainsDots: boolean): any {\n    if (!field || !data) {\n        return;\n    }\n\n    // if no '.', then it's not a deep value\n    if (!fieldContainsDots) {\n        return data[field];\n    }\n\n    // otherwise it is a deep value, so need to dig for it\n    const fields = field.split('.');\n    let currentObject = data;\n\n    for (let i = 0; i < fields.length; i++) {\n        if (currentObject == null) {\n            return undefined;\n        }\n        currentObject = currentObject[fields[i]];\n    }\n\n    return currentObject;\n}\n\nexport function _isNonNullObject(value: any): boolean {\n    return typeof value === 'object' && value !== null;\n}\n", "import type { ColumnState } from '../columns/columnApplyStateService';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { AgEvent, ColumnEvent, ColumnEventType } from '../events';\nimport type {\n    Column,\n    ColumnEventName,\n    ColumnGroup,\n    ColumnGroupShowType,\n    ColumnInstanceId,\n    ColumnPinnedType,\n    HeaderColumnId,\n    ProvidedColumnGroup,\n} from '../interfaces/iColumn';\nimport type { IRowNode } from '../interfaces/iRowNode';\nimport { LocalEventService } from '../localEventService';\nimport { FrameworkEventListenerService } from '../misc/frameworkEventListenerService';\nimport type { ColumnHoverService } from '../rendering/columnHoverService';\nimport { _attrToNumber, _exists, _missing } from '../utils/generic';\nimport { _mergeDeep } from '../utils/object';\nimport type { AgColumnGroup } from './agColumnGroup';\nimport type { AgProvidedColumnGroup } from './agProvidedColumnGroup';\nimport type {\n    AbstractColDef,\n    BaseColDefParams,\n    ColDef,\n    ColSpanParams,\n    ColumnFunctionCallbackParams,\n    IAggFunc,\n    RowSpanParams,\n    SortDirection,\n} from './colDef';\n\nconst COL_DEF_DEFAULTS: Partial<ColDef> = {\n    resizable: true,\n    sortable: true,\n};\n\nlet instanceIdSequence = 0;\nexport function getNextColInstanceId(): ColumnInstanceId {\n    return instanceIdSequence++ as ColumnInstanceId;\n}\n\nexport function isColumn(col: Column | ColumnGroup | ProvidedColumnGroup): col is AgColumn {\n    return col instanceof AgColumn;\n}\n\nexport const DEFAULT_COLUMN_MIN_WIDTH = 20;\n// Wrapper around a user provide column definition. The grid treats the column definition as ready only.\n// This class contains all the runtime information about a column, plus some logic (the definition has no logic).\n// This class implements both interfaces ColumnGroupChild and ProvidedColumnGroupChild as the class can\n// appear as a child of either the original tree or the displayed tree. However the relevant group classes\n// for each type only implements one, as each group can only appear in it's associated tree (eg ProvidedColumnGroup\n// can only appear in OriginalColumn tree).\nexport class AgColumn<TValue = any> extends BeanStub<ColumnEventName> implements Column {\n    public readonly isColumn = true as const;\n\n    private columnHoverService: ColumnHoverService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.columnHoverService = beans.columnHoverService;\n    }\n\n    private frameworkEventListenerService: FrameworkEventListenerService<any, any> | null;\n\n    private readonly colId: any;\n    private colDef: ColDef<any, TValue>;\n\n    // used by React (and possibly other frameworks) as key for rendering. also used to\n    // identify old vs new columns for destroying cols when no longer used.\n    private instanceId = getNextColInstanceId();\n\n    // We do NOT use this anywhere, we just keep a reference. this is to check object equivalence\n    // when the user provides an updated list of columns - so we can check if we have a column already\n    // existing for a col def. we cannot use the this.colDef as that is the result of a merge.\n    // This is used in ColumnFactory\n    private userProvidedColDef: ColDef<any, TValue> | null;\n\n    private actualWidth: any;\n\n    // The measured height of this column's header when autoHeaderHeight is enabled\n    private autoHeaderHeight: number | null = null;\n\n    private visible: any;\n    private pinned: ColumnPinnedType;\n    private left: number | null;\n    private oldLeft: number | null;\n    private aggFunc: string | IAggFunc | null | undefined;\n    private sort: SortDirection | undefined;\n    private sortIndex: number | null | undefined;\n    private moving = false;\n    private menuVisible = false;\n\n    private lastLeftPinned: boolean = false;\n    private firstRightPinned: boolean = false;\n\n    private minWidth: number;\n    private maxWidth: number;\n\n    private filterActive = false;\n\n    private columnEventService: LocalEventService<ColumnEventName> = new LocalEventService();\n\n    private fieldContainsDots: boolean;\n    private tooltipFieldContainsDots: boolean;\n    private tooltipEnabled = false;\n\n    private rowGroupActive = false;\n    private pivotActive = false;\n    private aggregationActive = false;\n    private flex: number | null | undefined;\n\n    private readonly primary: boolean;\n\n    private parent: AgColumnGroup | null;\n    private originalParent: AgProvidedColumnGroup | null;\n\n    constructor(\n        colDef: ColDef<any, TValue>,\n        userProvidedColDef: ColDef<any, TValue> | null,\n        colId: string,\n        primary: boolean\n    ) {\n        super();\n        this.colDef = colDef;\n        this.userProvidedColDef = userProvidedColDef;\n        this.colId = colId;\n        this.primary = primary;\n\n        this.setState(colDef);\n    }\n\n    public getInstanceId(): ColumnInstanceId {\n        return this.instanceId;\n    }\n\n    private setState(colDef: ColDef): void {\n        // sort\n        if (colDef.sort !== undefined) {\n            if (colDef.sort === 'asc' || colDef.sort === 'desc') {\n                this.sort = colDef.sort;\n            }\n        } else {\n            if (colDef.initialSort === 'asc' || colDef.initialSort === 'desc') {\n                this.sort = colDef.initialSort;\n            }\n        }\n\n        // sortIndex\n        const sortIndex = colDef.sortIndex;\n        const initialSortIndex = colDef.initialSortIndex;\n        if (sortIndex !== undefined) {\n            if (sortIndex !== null) {\n                this.sortIndex = sortIndex;\n            }\n        } else {\n            if (initialSortIndex !== null) {\n                this.sortIndex = initialSortIndex;\n            }\n        }\n\n        // hide\n        const hide = colDef.hide;\n        const initialHide = colDef.initialHide;\n\n        if (hide !== undefined) {\n            this.visible = !hide;\n        } else {\n            this.visible = !initialHide;\n        }\n\n        // pinned\n        if (colDef.pinned !== undefined) {\n            this.setPinned(colDef.pinned);\n        } else {\n            this.setPinned(colDef.initialPinned);\n        }\n\n        // flex\n        const flex = colDef.flex;\n        const initialFlex = colDef.initialFlex;\n        if (flex !== undefined) {\n            this.flex = flex;\n        } else if (initialFlex !== undefined) {\n            this.flex = initialFlex;\n        }\n    }\n\n    // gets called when user provides an alternative colDef, eg\n    public setColDef(\n        colDef: ColDef<any, TValue>,\n        userProvidedColDef: ColDef<any, TValue> | null,\n        source: ColumnEventType\n    ): void {\n        this.colDef = colDef;\n        this.userProvidedColDef = userProvidedColDef;\n        this.initMinAndMaxWidths();\n        this.initDotNotation();\n        this.initTooltip();\n        this.columnEventService.dispatchEvent(this.createColumnEvent('colDefChanged', source));\n    }\n\n    public getUserProvidedColDef(): ColDef<any, TValue> | null {\n        return this.userProvidedColDef;\n    }\n\n    public setParent(parent: AgColumnGroup | null): void {\n        this.parent = parent;\n    }\n\n    public getParent(): AgColumnGroup | null {\n        return this.parent;\n    }\n\n    public setOriginalParent(originalParent: AgProvidedColumnGroup | null): void {\n        this.originalParent = originalParent;\n    }\n\n    public getOriginalParent(): AgProvidedColumnGroup | null {\n        return this.originalParent;\n    }\n\n    // this is done after constructor as it uses gridOptionsService\n    public postConstruct(): void {\n        this.initMinAndMaxWidths();\n\n        this.resetActualWidth('gridInitializing');\n\n        this.initDotNotation();\n\n        this.initTooltip();\n    }\n\n    private initDotNotation(): void {\n        const suppressDotNotation = this.gos.get('suppressFieldDotNotation');\n        this.fieldContainsDots =\n            _exists(this.colDef.field) && this.colDef.field.indexOf('.') >= 0 && !suppressDotNotation;\n        this.tooltipFieldContainsDots =\n            _exists(this.colDef.tooltipField) && this.colDef.tooltipField.indexOf('.') >= 0 && !suppressDotNotation;\n    }\n\n    private initMinAndMaxWidths(): void {\n        const colDef = this.colDef;\n\n        this.minWidth = colDef.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n        this.maxWidth = colDef.maxWidth ?? Number.MAX_SAFE_INTEGER;\n    }\n\n    private initTooltip(): void {\n        this.tooltipEnabled =\n            _exists(this.colDef.tooltipField) ||\n            _exists(this.colDef.tooltipValueGetter) ||\n            _exists(this.colDef.tooltipComponent);\n    }\n\n    public resetActualWidth(source: ColumnEventType): void {\n        const initialWidth = this.calculateColInitialWidth(this.colDef);\n        this.setActualWidth(initialWidth, source, true);\n    }\n\n    private calculateColInitialWidth(colDef: ColDef): number {\n        let width: number;\n        const colDefWidth = _attrToNumber(colDef.width);\n        const colDefInitialWidth = _attrToNumber(colDef.initialWidth);\n\n        if (colDefWidth != null) {\n            width = colDefWidth;\n        } else if (colDefInitialWidth != null) {\n            width = colDefInitialWidth;\n        } else {\n            width = 200;\n        }\n\n        return Math.max(Math.min(width, this.maxWidth), this.minWidth);\n    }\n\n    public isEmptyGroup(): boolean {\n        return false;\n    }\n\n    public isRowGroupDisplayed(colId: string): boolean {\n        if (_missing(this.colDef) || _missing(this.colDef.showRowGroup)) {\n            return false;\n        }\n\n        const showingAllGroups = this.colDef.showRowGroup === true;\n        const showingThisGroup = this.colDef.showRowGroup === colId;\n\n        return showingAllGroups || showingThisGroup;\n    }\n\n    public isPrimary(): boolean {\n        return this.primary;\n    }\n\n    public isFilterAllowed(): boolean {\n        // filter defined means it's a string, class or true.\n        // if its false, null or undefined then it's false.\n        const filterDefined = !!this.colDef.filter;\n        return filterDefined;\n    }\n\n    public isFieldContainsDots(): boolean {\n        return this.fieldContainsDots;\n    }\n\n    public isTooltipEnabled(): boolean {\n        return this.tooltipEnabled;\n    }\n\n    public isTooltipFieldContainsDots(): boolean {\n        return this.tooltipFieldContainsDots;\n    }\n\n    public override addEventListener<T extends ColumnEventName>(\n        eventType: T,\n        userListener: (params: ColumnEvent<T>) => void\n    ): void {\n        if (this.frameworkOverrides.shouldWrapOutgoing && !this.frameworkEventListenerService) {\n            // Only construct if we need it, as it's an overhead for column construction\n            this.columnEventService.setFrameworkOverrides(this.frameworkOverrides);\n            this.frameworkEventListenerService = new FrameworkEventListenerService(this.frameworkOverrides);\n        }\n        const listener = this.frameworkEventListenerService?.wrap(userListener) ?? userListener;\n\n        this.columnEventService.addEventListener(eventType, listener);\n    }\n\n    public override removeEventListener<T extends ColumnEventName>(\n        eventType: T,\n        userListener: (params: ColumnEvent<T>) => void\n    ): void {\n        const listener = this.frameworkEventListenerService?.unwrap(userListener) ?? userListener;\n        this.columnEventService.removeEventListener(eventType, listener);\n    }\n\n    public createColumnFunctionCallbackParams(rowNode: IRowNode): ColumnFunctionCallbackParams {\n        return this.gos.addGridCommonParams({\n            node: rowNode,\n            data: rowNode.data,\n            column: this,\n            colDef: this.colDef,\n        });\n    }\n\n    public isSuppressNavigable(rowNode: IRowNode): boolean {\n        // if boolean set, then just use it\n        if (typeof this.colDef.suppressNavigable === 'boolean') {\n            return this.colDef.suppressNavigable;\n        }\n\n        // if function, then call the function to find out\n        if (typeof this.colDef.suppressNavigable === 'function') {\n            const params = this.createColumnFunctionCallbackParams(rowNode);\n            const userFunc = this.colDef.suppressNavigable;\n            return userFunc(params);\n        }\n\n        return false;\n    }\n\n    public isCellEditable(rowNode: IRowNode): boolean {\n        // only allow editing of groups if the user has this option enabled\n        if (rowNode.group && !this.gos.get('enableGroupEdit')) {\n            return false;\n        }\n\n        return this.isColumnFunc(rowNode, this.colDef.editable);\n    }\n\n    public isSuppressFillHandle(): boolean {\n        return !!this.colDef.suppressFillHandle;\n    }\n\n    public isAutoHeight(): boolean {\n        return !!this.colDef.autoHeight;\n    }\n\n    public isAutoHeaderHeight(): boolean {\n        return !!this.colDef.autoHeaderHeight;\n    }\n\n    public isRowDrag(rowNode: IRowNode): boolean {\n        return this.isColumnFunc(rowNode, this.colDef.rowDrag);\n    }\n\n    public isDndSource(rowNode: IRowNode): boolean {\n        return this.isColumnFunc(rowNode, this.colDef.dndSource);\n    }\n\n    public isCellCheckboxSelection(rowNode: IRowNode): boolean {\n        return this.isColumnFunc(rowNode, this.colDef.checkboxSelection);\n    }\n\n    public isSuppressPaste(rowNode: IRowNode): boolean {\n        return this.isColumnFunc(rowNode, this.colDef ? this.colDef.suppressPaste : null);\n    }\n\n    public isResizable(): boolean {\n        return !!this.getColDefValue('resizable');\n    }\n\n    /** Get value from ColDef or default if it exists. */\n    private getColDefValue<K extends keyof ColDef>(key: K): ColDef[K] {\n        return this.colDef[key] ?? COL_DEF_DEFAULTS[key];\n    }\n\n    private isColumnFunc(\n        rowNode: IRowNode,\n        value?: boolean | ((params: ColumnFunctionCallbackParams) => boolean) | null\n    ): boolean {\n        // if boolean set, then just use it\n        if (typeof value === 'boolean') {\n            return value;\n        }\n\n        // if function, then call the function to find out\n        if (typeof value === 'function') {\n            const params = this.createColumnFunctionCallbackParams(rowNode);\n            const editableFunc = value;\n            return editableFunc(params);\n        }\n\n        return false;\n    }\n\n    public setMoving(moving: boolean, source: ColumnEventType): void {\n        this.moving = moving;\n        this.columnEventService.dispatchEvent(this.createColumnEvent('movingChanged', source));\n    }\n\n    private createColumnEvent<T extends ColumnEventName>(type: T, source: ColumnEventType): ColumnEvent<T> {\n        return this.gos.addGridCommonParams({\n            type: type,\n            column: this,\n            columns: [this],\n            source: source,\n        });\n    }\n\n    public isMoving(): boolean {\n        return this.moving;\n    }\n\n    public getSort(): SortDirection | undefined {\n        return this.sort;\n    }\n\n    public setSort(sort: SortDirection | undefined, source: ColumnEventType): void {\n        if (this.sort !== sort) {\n            this.sort = sort;\n            this.columnEventService.dispatchEvent(this.createColumnEvent('sortChanged', source));\n        }\n        this.dispatchStateUpdatedEvent('sort');\n    }\n\n    public isSortable(): boolean {\n        return !!this.getColDefValue('sortable');\n    }\n\n    /** @deprecated v32 use col.getSort() === 'asc */\n    public isSortAscending(): boolean {\n        return this.sort === 'asc';\n    }\n\n    /** @deprecated v32 use col.getSort() === 'desc */\n    public isSortDescending(): boolean {\n        return this.sort === 'desc';\n    }\n    /** @deprecated v32 use col.getSort() === undefined */\n    public isSortNone(): boolean {\n        return _missing(this.sort);\n    }\n\n    /** @deprecated v32 use col.getSort() !== undefined */\n    public isSorting(): boolean {\n        return _exists(this.sort);\n    }\n\n    public getSortIndex(): number | null | undefined {\n        return this.sortIndex;\n    }\n\n    public setSortIndex(sortOrder?: number | null): void {\n        this.sortIndex = sortOrder;\n        this.dispatchStateUpdatedEvent('sortIndex');\n    }\n    public setMenuVisible(visible: boolean, source: ColumnEventType): void {\n        if (this.menuVisible !== visible) {\n            this.menuVisible = visible;\n            this.columnEventService.dispatchEvent(this.createColumnEvent('menuVisibleChanged', source));\n        }\n    }\n\n    public isMenuVisible(): boolean {\n        return this.menuVisible;\n    }\n\n    public setAggFunc(aggFunc: string | IAggFunc | null | undefined): void {\n        this.aggFunc = aggFunc;\n        this.dispatchStateUpdatedEvent('aggFunc');\n    }\n\n    public getAggFunc(): string | IAggFunc | null | undefined {\n        return this.aggFunc;\n    }\n\n    public getLeft(): number | null {\n        return this.left;\n    }\n\n    public getOldLeft(): number | null {\n        return this.oldLeft;\n    }\n\n    public getRight(): number {\n        return this.left + this.actualWidth;\n    }\n\n    public setLeft(left: number | null, source: ColumnEventType) {\n        this.oldLeft = this.left;\n        if (this.left !== left) {\n            this.left = left;\n            this.columnEventService.dispatchEvent(this.createColumnEvent('leftChanged', source));\n        }\n    }\n\n    public isFilterActive(): boolean {\n        return this.filterActive;\n    }\n\n    // additionalEventAttributes is used by provided simple floating filter, so it can add 'floatingFilter=true' to the event\n    public setFilterActive(active: boolean, source: ColumnEventType, additionalEventAttributes?: any): void {\n        if (this.filterActive !== active) {\n            this.filterActive = active;\n            this.columnEventService.dispatchEvent(this.createColumnEvent('filterActiveChanged', source));\n        }\n        const filterChangedEvent = this.createColumnEvent('filterChanged', source);\n        if (additionalEventAttributes) {\n            _mergeDeep(filterChangedEvent, additionalEventAttributes);\n        }\n        this.columnEventService.dispatchEvent(filterChangedEvent);\n    }\n\n    public isHovered(): boolean {\n        return this.columnHoverService.isHovered(this);\n    }\n\n    public setPinned(pinned: ColumnPinnedType): void {\n        if (pinned === true || pinned === 'left') {\n            this.pinned = 'left';\n        } else if (pinned === 'right') {\n            this.pinned = 'right';\n        } else {\n            this.pinned = null;\n        }\n        this.dispatchStateUpdatedEvent('pinned');\n    }\n\n    public setFirstRightPinned(firstRightPinned: boolean, source: ColumnEventType): void {\n        if (this.firstRightPinned !== firstRightPinned) {\n            this.firstRightPinned = firstRightPinned;\n            this.columnEventService.dispatchEvent(this.createColumnEvent('firstRightPinnedChanged', source));\n        }\n    }\n\n    public setLastLeftPinned(lastLeftPinned: boolean, source: ColumnEventType): void {\n        if (this.lastLeftPinned !== lastLeftPinned) {\n            this.lastLeftPinned = lastLeftPinned;\n            this.columnEventService.dispatchEvent(this.createColumnEvent('lastLeftPinnedChanged', source));\n        }\n    }\n\n    public isFirstRightPinned(): boolean {\n        return this.firstRightPinned;\n    }\n\n    public isLastLeftPinned(): boolean {\n        return this.lastLeftPinned;\n    }\n\n    public isPinned(): boolean {\n        return this.pinned === 'left' || this.pinned === 'right';\n    }\n\n    public isPinnedLeft(): boolean {\n        return this.pinned === 'left';\n    }\n\n    public isPinnedRight(): boolean {\n        return this.pinned === 'right';\n    }\n\n    public getPinned(): ColumnPinnedType {\n        return this.pinned;\n    }\n\n    public setVisible(visible: boolean, source: ColumnEventType): void {\n        const newValue = visible === true;\n        if (this.visible !== newValue) {\n            this.visible = newValue;\n            this.columnEventService.dispatchEvent(this.createColumnEvent('visibleChanged', source));\n        }\n        this.dispatchStateUpdatedEvent('hide');\n    }\n\n    public isVisible(): boolean {\n        return this.visible;\n    }\n\n    public isSpanHeaderHeight(): boolean {\n        const colDef = this.getColDef();\n        return !colDef.suppressSpanHeaderHeight && !colDef.autoHeaderHeight;\n    }\n\n    public getColumnGroupPaddingInfo(): { numberOfParents: number; isSpanningTotal: boolean } {\n        let parent = this.getParent();\n\n        if (!parent || !parent.isPadding()) {\n            return { numberOfParents: 0, isSpanningTotal: false };\n        }\n\n        const numberOfParents = parent.getPaddingLevel() + 1;\n        let isSpanningTotal = true;\n\n        while (parent) {\n            if (!parent.isPadding()) {\n                isSpanningTotal = false;\n                break;\n            }\n            parent = parent.getParent();\n        }\n\n        return { numberOfParents, isSpanningTotal };\n    }\n\n    public getColDef(): ColDef<any, TValue> {\n        return this.colDef;\n    }\n    public getDefinition(): AbstractColDef<any, TValue> {\n        return this.colDef;\n    }\n\n    public getColumnGroupShow(): ColumnGroupShowType | undefined {\n        return this.colDef.columnGroupShow;\n    }\n\n    public getColId(): string {\n        return this.colId;\n    }\n\n    public getId(): string {\n        return this.colId;\n    }\n\n    public getUniqueId(): HeaderColumnId {\n        return this.colId;\n    }\n\n    public getActualWidth(): number {\n        return this.actualWidth;\n    }\n\n    public getAutoHeaderHeight(): number | null {\n        return this.autoHeaderHeight;\n    }\n\n    /** Returns true if the header height has changed */\n    public setAutoHeaderHeight(height: number): boolean {\n        const changed = height !== this.autoHeaderHeight;\n        this.autoHeaderHeight = height;\n        return changed;\n    }\n\n    private createBaseColDefParams(rowNode: IRowNode): BaseColDefParams {\n        const params: BaseColDefParams = this.gos.addGridCommonParams({\n            node: rowNode,\n            data: rowNode.data,\n            colDef: this.colDef,\n            column: this,\n        });\n        return params;\n    }\n\n    public getColSpan(rowNode: IRowNode): number {\n        if (_missing(this.colDef.colSpan)) {\n            return 1;\n        }\n        const params: ColSpanParams = this.createBaseColDefParams(rowNode);\n        const colSpan = this.colDef.colSpan(params);\n        // colSpan must be number equal to or greater than 1\n\n        return Math.max(colSpan, 1);\n    }\n\n    public getRowSpan(rowNode: IRowNode): number {\n        if (_missing(this.colDef.rowSpan)) {\n            return 1;\n        }\n        const params: RowSpanParams = this.createBaseColDefParams(rowNode);\n        const rowSpan = this.colDef.rowSpan(params);\n        // rowSpan must be number equal to or greater than 1\n\n        return Math.max(rowSpan, 1);\n    }\n\n    public setActualWidth(actualWidth: number, source: ColumnEventType, silent: boolean = false): void {\n        actualWidth = Math.max(actualWidth, this.minWidth);\n        actualWidth = Math.min(actualWidth, this.maxWidth);\n        if (this.actualWidth !== actualWidth) {\n            // disable flex for this column if it was manually resized.\n            this.actualWidth = actualWidth;\n            if (this.flex && source !== 'flex' && source !== 'gridInitializing') {\n                this.flex = null;\n            }\n\n            if (!silent) {\n                this.fireColumnWidthChangedEvent(source);\n            }\n        }\n        this.dispatchStateUpdatedEvent('width');\n    }\n\n    public fireColumnWidthChangedEvent(source: ColumnEventType): void {\n        this.columnEventService.dispatchEvent(this.createColumnEvent('widthChanged', source));\n    }\n\n    public isGreaterThanMax(width: number): boolean {\n        return width > this.maxWidth;\n    }\n\n    public getMinWidth(): number {\n        return this.minWidth;\n    }\n\n    public getMaxWidth(): number {\n        return this.maxWidth;\n    }\n\n    public getFlex(): number {\n        return this.flex || 0;\n    }\n\n    // this method should only be used by the columnModel to\n    // change flex when required by the applyColumnState method.\n    public setFlex(flex: number | null) {\n        if (this.flex !== flex) {\n            this.flex = flex;\n        }\n        this.dispatchStateUpdatedEvent('flex');\n    }\n\n    public setMinimum(source: ColumnEventType): void {\n        this.setActualWidth(this.minWidth, source);\n    }\n\n    public setRowGroupActive(rowGroup: boolean, source: ColumnEventType): void {\n        if (this.rowGroupActive !== rowGroup) {\n            this.rowGroupActive = rowGroup;\n            this.columnEventService.dispatchEvent(this.createColumnEvent('columnRowGroupChanged', source));\n        }\n        this.dispatchStateUpdatedEvent('rowGroup');\n    }\n\n    public isRowGroupActive(): boolean {\n        return this.rowGroupActive;\n    }\n\n    public setPivotActive(pivot: boolean, source: ColumnEventType): void {\n        if (this.pivotActive !== pivot) {\n            this.pivotActive = pivot;\n            this.columnEventService.dispatchEvent(this.createColumnEvent('columnPivotChanged', source));\n        }\n        this.dispatchStateUpdatedEvent('pivot');\n    }\n\n    public isPivotActive(): boolean {\n        return this.pivotActive;\n    }\n\n    public isAnyFunctionActive(): boolean {\n        return this.isPivotActive() || this.isRowGroupActive() || this.isValueActive();\n    }\n\n    public isAnyFunctionAllowed(): boolean {\n        return this.isAllowPivot() || this.isAllowRowGroup() || this.isAllowValue();\n    }\n\n    public setValueActive(value: boolean, source: ColumnEventType): void {\n        if (this.aggregationActive !== value) {\n            this.aggregationActive = value;\n            this.columnEventService.dispatchEvent(this.createColumnEvent('columnValueChanged', source));\n        }\n    }\n\n    public isValueActive(): boolean {\n        return this.aggregationActive;\n    }\n\n    public isAllowPivot(): boolean {\n        return this.colDef.enablePivot === true;\n    }\n\n    public isAllowValue(): boolean {\n        return this.colDef.enableValue === true;\n    }\n\n    public isAllowRowGroup(): boolean {\n        return this.colDef.enableRowGroup === true;\n    }\n\n    private dispatchStateUpdatedEvent(key: keyof ColumnState): void {\n        this.columnEventService.dispatchEvent({\n            type: 'columnStateUpdated',\n            key,\n        } as AgEvent<'columnStateUpdated'>);\n    }\n}\n", "import { BeanStub } from '../context/beanStub';\nimport type { Column, ColumnGroupShowType, ColumnInstanceId, ProvidedColumnGroup } from '../interfaces/iColumn';\nimport type { AgColumn } from './agColumn';\nimport { getNextColInstanceId, isColumn } from './agColumn';\nimport type { ColGroupDef } from './colDef';\n\nexport function isProvidedColumnGroup(col: Column | ProvidedColumnGroup | string | null): col is AgProvidedColumnGroup {\n    return col instanceof AgProvidedColumnGroup;\n}\n\nexport type AgProvidedColumnGroupEvent = 'expandedChanged' | 'expandableChanged';\nexport class AgProvidedColumnGroup extends BeanStub<AgProvidedColumnGroupEvent> implements ProvidedColumnGroup {\n    public readonly isColumn = false as const;\n\n    private colGroupDef: ColGroupDef | null;\n    private originalParent: AgProvidedColumnGroup | null;\n\n    private children: (AgColumn | AgProvidedColumnGroup)[];\n    private groupId: string;\n    private expandable = false;\n\n    private expanded: boolean;\n    private padding: boolean;\n\n    private level: number;\n\n    // used by React (and possibly other frameworks) as key for rendering. also used to\n    // identify old vs new columns for destroying cols when no longer used.\n    private instanceId = getNextColInstanceId();\n\n    private expandableListenerRemoveCallback: (() => void) | null = null;\n\n    constructor(colGroupDef: ColGroupDef | null, groupId: string, padding: boolean, level: number) {\n        super();\n        this.colGroupDef = colGroupDef;\n        this.groupId = groupId;\n        this.expanded = !!colGroupDef && !!colGroupDef.openByDefault;\n        this.padding = padding;\n        this.level = level;\n    }\n\n    public override destroy() {\n        if (this.expandableListenerRemoveCallback) {\n            this.reset(null, undefined);\n        }\n        super.destroy();\n    }\n\n    private reset(colGroupDef: ColGroupDef | null, level: number | undefined): void {\n        this.colGroupDef = colGroupDef;\n        this.level = level!;\n\n        this.originalParent = null;\n\n        if (this.expandableListenerRemoveCallback) {\n            this.expandableListenerRemoveCallback();\n        }\n\n        // we use ! below, as we want to set the object back to the\n        // way it was when it was first created\n        this.children = undefined!;\n        this.expandable = undefined!;\n    }\n\n    public getInstanceId(): ColumnInstanceId {\n        return this.instanceId;\n    }\n\n    public setOriginalParent(originalParent: AgProvidedColumnGroup | null): void {\n        this.originalParent = originalParent;\n    }\n\n    public getOriginalParent(): AgProvidedColumnGroup | null {\n        return this.originalParent;\n    }\n\n    public getLevel(): number {\n        return this.level;\n    }\n\n    public isVisible(): boolean {\n        // return true if at least one child is visible\n        if (this.children) {\n            return this.children.some((child) => child.isVisible());\n        }\n\n        return false;\n    }\n\n    public isPadding(): boolean {\n        return this.padding;\n    }\n\n    public setExpanded(expanded: boolean | undefined): void {\n        this.expanded = expanded === undefined ? false : expanded;\n        this.dispatchLocalEvent({ type: 'expandedChanged' });\n    }\n\n    public isExpandable(): boolean {\n        return this.expandable;\n    }\n\n    public isExpanded(): boolean {\n        return this.expanded;\n    }\n\n    public getGroupId(): string {\n        return this.groupId;\n    }\n\n    public getId(): string {\n        return this.getGroupId();\n    }\n\n    public setChildren(children: (AgColumn | AgProvidedColumnGroup)[]): void {\n        this.children = children;\n    }\n\n    public getChildren(): (AgColumn | AgProvidedColumnGroup)[] {\n        return this.children;\n    }\n\n    public getColGroupDef(): ColGroupDef | null {\n        return this.colGroupDef;\n    }\n\n    public getLeafColumns(): AgColumn[] {\n        const result: AgColumn[] = [];\n        this.addLeafColumns(result);\n        return result;\n    }\n\n    private addLeafColumns(leafColumns: Column[]): void {\n        if (!this.children) {\n            return;\n        }\n\n        this.children.forEach((child) => {\n            if (isColumn(child)) {\n                leafColumns.push(child);\n            } else if (isProvidedColumnGroup(child)) {\n                child.addLeafColumns(leafColumns);\n            }\n        });\n    }\n\n    public getColumnGroupShow(): ColumnGroupShowType | undefined {\n        const colGroupDef = this.colGroupDef;\n\n        if (!colGroupDef) {\n            return;\n        }\n\n        return colGroupDef.columnGroupShow;\n    }\n\n    // need to check that this group has at least one col showing when both expanded and contracted.\n    // if not, then we don't allow expanding and contracting on this group\n\n    public setupExpandable() {\n        this.setExpandable();\n\n        if (this.expandableListenerRemoveCallback) {\n            this.expandableListenerRemoveCallback();\n        }\n\n        const listener = this.onColumnVisibilityChanged.bind(this);\n        this.getLeafColumns().forEach((col) => col.addEventListener('visibleChanged', listener));\n\n        this.expandableListenerRemoveCallback = () => {\n            this.getLeafColumns().forEach((col) => col.removeEventListener('visibleChanged', listener));\n            this.expandableListenerRemoveCallback = null;\n        };\n    }\n\n    public setExpandable() {\n        if (this.isPadding()) {\n            return;\n        }\n        // want to make sure the group doesn't disappear when it's open\n        let atLeastOneShowingWhenOpen = false;\n        // want to make sure the group doesn't disappear when it's closed\n        let atLeastOneShowingWhenClosed = false;\n        // want to make sure the group has something to show / hide\n        let atLeastOneChangeable = false;\n\n        const children = this.findChildrenRemovingPadding();\n\n        for (let i = 0, j = children.length; i < j; i++) {\n            const abstractColumn = children[i];\n            if (!abstractColumn.isVisible()) {\n                continue;\n            }\n            // if the abstractColumn is a grid generated group, there will be no colDef\n            const headerGroupShow = abstractColumn.getColumnGroupShow();\n\n            if (headerGroupShow === 'open') {\n                atLeastOneShowingWhenOpen = true;\n                atLeastOneChangeable = true;\n            } else if (headerGroupShow === 'closed') {\n                atLeastOneShowingWhenClosed = true;\n                atLeastOneChangeable = true;\n            } else {\n                atLeastOneShowingWhenOpen = true;\n                atLeastOneShowingWhenClosed = true;\n            }\n        }\n\n        const expandable = atLeastOneShowingWhenOpen && atLeastOneShowingWhenClosed && atLeastOneChangeable;\n\n        if (this.expandable !== expandable) {\n            this.expandable = expandable;\n            this.dispatchLocalEvent({ type: 'expandableChanged' });\n        }\n    }\n\n    private findChildrenRemovingPadding(): (AgColumn | AgProvidedColumnGroup)[] {\n        const res: (AgColumn | AgProvidedColumnGroup)[] = [];\n\n        const process = (items: (AgColumn | AgProvidedColumnGroup)[]) => {\n            items.forEach((item) => {\n                // if padding, we add this children instead of the padding\n                const skipBecausePadding = isProvidedColumnGroup(item) && item.isPadding();\n                if (skipBecausePadding) {\n                    process((item as AgProvidedColumnGroup).children);\n                } else {\n                    res.push(item);\n                }\n            });\n        };\n\n        process(this.children);\n\n        return res;\n    }\n\n    private onColumnVisibilityChanged(): void {\n        this.setExpandable();\n    }\n}\n", "import type { ColDef } from './colDef';\n\nexport const DefaultColumnTypes: { [key: string]: ColDef } = {\n    numericColumn: {\n        headerClass: 'ag-right-aligned-header',\n        cellClass: 'ag-right-aligned-cell',\n    },\n    rightAligned: {\n        headerClass: 'ag-right-aligned-header',\n        cellClass: 'ag-right-aligned-cell',\n    },\n};\n", "const doOnceFlags: { [key: string]: boolean } = {};\n\n/**\n * If the key was passed before, then doesn't execute the func\n * @param {Function} func\n * @param {string} key\n */\nexport function _doOnce(func: () => void, key: string) {\n    if (doOnceFlags[key]) {\n        return;\n    }\n\n    func();\n    doOnceFlags[key] = true;\n}\n\nexport function _log(message: string, ...args: any[]) {\n    console.log('AG Grid: ' + message, ...args);\n}\n\nexport function _warnOnce(msg: string, ...args: any[]) {\n    _doOnce(() => console.warn('AG Grid: ' + msg, ...args), msg);\n}\nexport function _errorOnce(msg: string, ...args: any[]) {\n    _doOnce(() => console.error('AG Grid: ' + msg, ...args), msg);\n}\n\nexport function _getFunctionName(funcConstructor: any) {\n    // for every other browser in the world\n    if (funcConstructor.name) {\n        return funcConstructor.name;\n    }\n\n    // eslint-disable-next-line\n    const matches = /function\\s+([^\\(]+)/.exec(funcConstructor.toString());\n    return matches && matches.length === 2 ? matches[1].trim() : null;\n}\n\nexport function _isFunction(val: any): boolean {\n    return !!(val && val.constructor && val.call && val.apply);\n}\n\nexport function _executeInAWhile(funcs: ((...args: any[]) => any)[]): void {\n    _executeAfter(funcs, 400);\n}\n\nconst executeNextVMTurnFuncs: ((...args: any[]) => any)[] = [];\nlet executeNextVMTurnPending = false;\n\nexport function _executeNextVMTurn(func: () => void): void {\n    executeNextVMTurnFuncs.push(func);\n\n    if (executeNextVMTurnPending) {\n        return;\n    }\n\n    executeNextVMTurnPending = true;\n    window.setTimeout(() => {\n        const funcsCopy = executeNextVMTurnFuncs.slice();\n        executeNextVMTurnFuncs.length = 0;\n        executeNextVMTurnPending = false;\n        funcsCopy.forEach((func) => func());\n    }, 0);\n}\n\nexport function _executeAfter(funcs: ((...args: any[]) => any)[], milliseconds = 0): void {\n    if (funcs.length > 0) {\n        window.setTimeout(() => funcs.forEach((func) => func()), milliseconds);\n    }\n}\n\n/**\n * @param {Function} func The function to be debounced\n * @param {number} delay The time in ms to debounce\n * @return {Function} The debounced function\n */\nexport function _debounce(func: (...args: any[]) => void, delay: number): (...args: any[]) => void {\n    let timeout: any;\n\n    // Calling debounce returns a new anonymous function\n    return function (...args: any[]) {\n        const context = this;\n        window.clearTimeout(timeout);\n\n        // Set the new timeout\n        timeout = window.setTimeout(function () {\n            func.apply(context, args);\n        }, delay);\n    };\n}\n\n/**\n * @param {Function} func The function to be throttled\n * @param {number} wait The time in ms to throttle\n * @return {Function} The throttled function\n */\nexport function _throttle(func: (...args: any[]) => void, wait: number): (...args: any[]) => void {\n    let previousCall = 0;\n\n    return function (...args: any[]) {\n        const context = this;\n        const currentCall = new Date().getTime();\n\n        if (currentCall - previousCall < wait) {\n            return;\n        }\n\n        previousCall = currentCall;\n\n        func.apply(context, args);\n    };\n}\n\nexport function _waitUntil(\n    condition: () => boolean,\n    callback: () => void,\n    timeout: number = 100,\n    timeoutMessage?: string\n) {\n    const timeStamp = new Date().getTime();\n\n    let interval: number | null = null;\n    let executed: boolean = false;\n\n    const internalCallback = () => {\n        const reachedTimeout = new Date().getTime() - timeStamp > timeout;\n        if (condition() || reachedTimeout) {\n            callback();\n            executed = true;\n            if (interval != null) {\n                window.clearInterval(interval);\n                interval = null;\n            }\n\n            if (reachedTimeout && timeoutMessage) {\n                _warnOnce(timeoutMessage);\n            }\n        }\n    };\n\n    internalCallback();\n\n    if (!executed) {\n        interval = window.setInterval(internalCallback, 10);\n    }\n}\n\nexport function _compose<T>(...fns: ((...args: any[]) => any)[]) {\n    return (arg: T) => fns.reduce<T>((composed, f) => f(composed), arg);\n}\n\nexport const noop = () => {\n    return;\n};\n", "// class returns a unique id to use for the column. it checks the existing columns, and if the requested\n// id is already taken, it will start appending numbers until it gets a unique id.\n// eg, if the col field is 'name', it will try ids: {name, name_1, name_2...}\n// if no field or id provided in the col, it will try the ids of natural numbers\nimport { _toStringOrNull } from '../utils/generic';\n\nexport class ColumnKeyCreator {\n    private existingKeys: { [key: string]: boolean } = {};\n\n    public addExistingKeys(keys: string[]): void {\n        for (let i = 0; i < keys.length; i++) {\n            this.existingKeys[keys[i]] = true;\n        }\n    }\n\n    public getUniqueKey(colId?: string | null, colField?: string | null): string {\n        // in case user passed in number for colId, convert to string\n        colId = _toStringOrNull(colId);\n\n        let count = 0;\n\n        while (true) {\n            let idToTry: string | number;\n            if (colId) {\n                idToTry = colId;\n                if (count !== 0) {\n                    idToTry += '_' + count;\n                }\n            } else if (colField) {\n                idToTry = colField;\n                if (count !== 0) {\n                    idToTry += '_' + count;\n                }\n            } else {\n                // no point in stringing this, object treats it the same anyway.\n                idToTry = count;\n            }\n\n            if (!this.existingKeys[idToTry]) {\n                this.existingKeys[idToTry] = true;\n                return String(idToTry);\n            }\n\n            count++;\n        }\n    }\n}\n", "import type { Context } from '../context/context';\nimport { isColumn } from '../entities/agColumn';\nimport type { AgColumn } from '../entities/agColumn';\nimport { isProvidedColumnGroup } from '../entities/agProvidedColumnGroup';\nimport type { AgProvidedColumnGroup } from '../entities/agProvidedColumnGroup';\nimport type { ColumnInstanceId } from '../interfaces/iColumn';\nimport { _warnOnce } from '../utils/function';\nimport { depthFirstOriginalTreeSearch } from './columnFactory';\n\nexport const GROUP_AUTO_COLUMN_ID = 'ag-Grid-AutoColumn' as const;\n\n// Possible candidate for reuse (alot of recursive traversal duplication)\nexport function getColumnsFromTree(rootColumns: (AgColumn | AgProvidedColumnGroup)[]): AgColumn[] {\n    const result: AgColumn[] = [];\n\n    const recursiveFindColumns = (childColumns: (AgColumn | AgProvidedColumnGroup)[]): void => {\n        for (let i = 0; i < childColumns.length; i++) {\n            const child = childColumns[i];\n            if (isColumn(child)) {\n                result.push(child);\n            } else if (isProvidedColumnGroup(child)) {\n                recursiveFindColumns(child.getChildren());\n            }\n        }\n    };\n\n    recursiveFindColumns(rootColumns);\n\n    return result;\n}\n\nexport function getWidthOfColsInList(columnList: AgColumn[]) {\n    return columnList.reduce((width, col) => width + col.getActualWidth(), 0);\n}\n\nexport function destroyColumnTree(\n    context: Context,\n    oldTree: (AgColumn | AgProvidedColumnGroup)[] | null | undefined,\n    newTree?: (AgColumn | AgProvidedColumnGroup)[] | null\n): void {\n    const oldObjectsById: { [id: ColumnInstanceId]: (AgColumn | AgProvidedColumnGroup) | null } = {};\n\n    if (!oldTree) {\n        return;\n    }\n\n    // add in all old columns to be destroyed\n    depthFirstOriginalTreeSearch(null, oldTree, (child) => {\n        oldObjectsById[child.getInstanceId()] = child;\n    });\n\n    // however we don't destroy anything in the new tree. if destroying the grid, there is no new tree\n    if (newTree) {\n        depthFirstOriginalTreeSearch(null, newTree, (child) => {\n            oldObjectsById[child.getInstanceId()] = null;\n        });\n    }\n\n    // what's left can be destroyed\n    const colsToDestroy = Object.values(oldObjectsById).filter((item) => item != null);\n    context.destroyBeans(colsToDestroy);\n}\n\nexport function isColumnGroupAutoCol(col: AgColumn): boolean {\n    const colId = col.getId();\n    return colId.startsWith(GROUP_AUTO_COLUMN_ID);\n}\n\nexport function convertColumnTypes(type: string | string[]): string[] {\n    let typeKeys: string[] = [];\n\n    if (type instanceof Array) {\n        const invalidArray = type.some((a) => typeof a !== 'string');\n        if (invalidArray) {\n            _warnOnce(\"if colDef.type is supplied an array it should be of type 'string[]'\");\n        } else {\n            typeKeys = type;\n        }\n    } else if (typeof type === 'string') {\n        typeKeys = type.split(',');\n    } else {\n        _warnOnce(\"colDef.type should be of type 'string' | 'string[]'\");\n    }\n    return typeKeys;\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport { AgColumn } from '../entities/agColumn';\nimport { AgProvidedColumnGroup, isProvidedColumnGroup } from '../entities/agProvidedColumnGroup';\nimport type { ColDef, ColGroupDef } from '../entities/colDef';\nimport { DefaultColumnTypes } from '../entities/defaultColumnTypes';\nimport type { ColumnEventType } from '../events';\nimport { _warnOnce } from '../utils/function';\nimport { _attrToBoolean, _attrToNumber } from '../utils/generic';\nimport { _iterateObject, _mergeDeep } from '../utils/object';\nimport { ColumnKeyCreator } from './columnKeyCreator';\nimport { convertColumnTypes } from './columnUtils';\nimport type { DataTypeService } from './dataTypeService';\n\n// takes ColDefs and ColGroupDefs and turns them into Columns and OriginalGroups\nexport class ColumnFactory extends BeanStub implements NamedBean {\n    beanName = 'columnFactory' as const;\n\n    private dataTypeService?: DataTypeService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.dataTypeService = beans.dataTypeService;\n    }\n\n    public createColumnTree(\n        defs: (ColDef | ColGroupDef)[] | null,\n        primaryColumns: boolean,\n        existingTree: (AgColumn | AgProvidedColumnGroup)[] | undefined,\n        source: ColumnEventType\n    ): { columnTree: (AgColumn | AgProvidedColumnGroup)[]; treeDept: number } {\n        // column key creator dishes out unique column id's in a deterministic way,\n        // so if we have two grids (that could be master/slave) with same column definitions,\n        // then this ensures the two grids use identical id's.\n        const columnKeyCreator = new ColumnKeyCreator();\n\n        const { existingCols, existingGroups, existingColKeys } = this.extractExistingTreeData(existingTree);\n        columnKeyCreator.addExistingKeys(existingColKeys);\n\n        // create am unbalanced tree that maps the provided definitions\n        const unbalancedTree = this.recursivelyCreateColumns(\n            defs,\n            0,\n            primaryColumns,\n            existingCols,\n            columnKeyCreator,\n            existingGroups,\n            source\n        );\n        const treeDept = this.findMaxDept(unbalancedTree, 0);\n        const columnTree = this.balanceColumnTree(unbalancedTree, 0, treeDept, columnKeyCreator);\n\n        const deptFirstCallback = (child: AgColumn | AgProvidedColumnGroup, parent: AgProvidedColumnGroup) => {\n            if (isProvidedColumnGroup(child)) {\n                child.setupExpandable();\n            }\n            // we set the original parents at the end, rather than when we go along, as balancing the tree\n            // adds extra levels into the tree. so we can only set parents when balancing is done.\n            child.setOriginalParent(parent);\n        };\n\n        depthFirstOriginalTreeSearch(null, columnTree, deptFirstCallback);\n\n        return {\n            columnTree,\n            treeDept,\n        };\n    }\n\n    private extractExistingTreeData(existingTree?: (AgColumn | AgProvidedColumnGroup)[]): {\n        existingCols: AgColumn[];\n        existingGroups: AgProvidedColumnGroup[];\n        existingColKeys: string[];\n    } {\n        const existingCols: AgColumn[] = [];\n        const existingGroups: AgProvidedColumnGroup[] = [];\n        const existingColKeys: string[] = [];\n\n        if (existingTree) {\n            depthFirstOriginalTreeSearch(null, existingTree, (item: AgColumn | AgProvidedColumnGroup) => {\n                if (isProvidedColumnGroup(item)) {\n                    const group = item;\n                    existingGroups.push(group);\n                } else {\n                    const col = item;\n                    existingColKeys.push(col.getId());\n                    existingCols.push(col);\n                }\n            });\n        }\n\n        return { existingCols, existingGroups, existingColKeys };\n    }\n\n    public createForAutoGroups(\n        autoGroupCols: AgColumn[],\n        liveTree: (AgColumn | AgProvidedColumnGroup)[]\n    ): [(AgColumn | AgProvidedColumnGroup)[], number] {\n        const tree: (AgColumn | AgProvidedColumnGroup)[] = [];\n        const dept = this.findDepth(liveTree);\n\n        autoGroupCols.forEach((col) => {\n            // at the end, this will be the top of the tree item.\n            let nextChild: AgColumn | AgProvidedColumnGroup = col;\n\n            for (let i = dept - 1; i >= 0; i--) {\n                const autoGroup = new AgProvidedColumnGroup(null, `FAKE_PATH_${col.getId()}}_${i}`, true, i);\n                this.createBean(autoGroup);\n                autoGroup.setChildren([nextChild]);\n                nextChild.setOriginalParent(autoGroup);\n                nextChild = autoGroup;\n            }\n\n            if (dept === 0) {\n                col.setOriginalParent(null);\n            }\n\n            // at this point, the nextChild is the top most item in the tree\n            tree.push(nextChild);\n        });\n\n        return [tree, dept];\n    }\n\n    private findDepth(balancedColumnTree: (AgColumn | AgProvidedColumnGroup)[]): number {\n        let dept = 0;\n        let pointer = balancedColumnTree;\n\n        while (pointer && pointer[0] && isProvidedColumnGroup(pointer[0])) {\n            dept++;\n            pointer = (pointer[0] as AgProvidedColumnGroup).getChildren();\n        }\n        return dept;\n    }\n\n    private balanceColumnTree(\n        unbalancedTree: (AgColumn | AgProvidedColumnGroup)[],\n        currentDept: number,\n        columnDept: number,\n        columnKeyCreator: ColumnKeyCreator\n    ): (AgColumn | AgProvidedColumnGroup)[] {\n        const result: (AgColumn | AgProvidedColumnGroup)[] = [];\n\n        // go through each child, for groups, recurse a level deeper,\n        // for columns we need to pad\n        for (let i = 0; i < unbalancedTree.length; i++) {\n            const child = unbalancedTree[i];\n            if (isProvidedColumnGroup(child)) {\n                // child is a group, all we do is go to the next level of recursion\n                const originalGroup = child;\n                const newChildren = this.balanceColumnTree(\n                    originalGroup.getChildren(),\n                    currentDept + 1,\n                    columnDept,\n                    columnKeyCreator\n                );\n                originalGroup.setChildren(newChildren);\n                result.push(originalGroup);\n            } else {\n                // child is a column - so here we add in the padded column groups if needed\n                let firstPaddedGroup: AgProvidedColumnGroup | undefined;\n                let currentPaddedGroup: AgProvidedColumnGroup | undefined;\n\n                // this for loop will NOT run any loops if no padded column groups are needed\n                for (let j = columnDept - 1; j >= currentDept; j--) {\n                    const newColId = columnKeyCreator.getUniqueKey(null, null);\n                    const colGroupDefMerged = this.createMergedColGroupDef(null);\n\n                    const paddedGroup = new AgProvidedColumnGroup(colGroupDefMerged, newColId, true, currentDept);\n                    this.createBean(paddedGroup);\n\n                    if (currentPaddedGroup) {\n                        currentPaddedGroup.setChildren([paddedGroup]);\n                    }\n\n                    currentPaddedGroup = paddedGroup;\n\n                    if (!firstPaddedGroup) {\n                        firstPaddedGroup = currentPaddedGroup;\n                    }\n                }\n\n                // likewise this if statement will not run if no padded groups\n                if (firstPaddedGroup && currentPaddedGroup) {\n                    result.push(firstPaddedGroup);\n                    const hasGroups = unbalancedTree.some((leaf) => isProvidedColumnGroup(leaf));\n\n                    if (hasGroups) {\n                        currentPaddedGroup.setChildren([child]);\n                        continue;\n                    } else {\n                        currentPaddedGroup.setChildren(unbalancedTree);\n                        break;\n                    }\n                }\n\n                result.push(child);\n            }\n        }\n\n        return result;\n    }\n\n    private findMaxDept(treeChildren: (AgColumn | AgProvidedColumnGroup)[], dept: number): number {\n        let maxDeptThisLevel = dept;\n\n        for (let i = 0; i < treeChildren.length; i++) {\n            const abstractColumn = treeChildren[i];\n            if (isProvidedColumnGroup(abstractColumn)) {\n                const originalGroup = abstractColumn;\n                const newDept = this.findMaxDept(originalGroup.getChildren(), dept + 1);\n                if (maxDeptThisLevel < newDept) {\n                    maxDeptThisLevel = newDept;\n                }\n            }\n        }\n\n        return maxDeptThisLevel;\n    }\n\n    private recursivelyCreateColumns(\n        defs: (ColDef | ColGroupDef)[] | null,\n        level: number,\n        primaryColumns: boolean,\n        existingColsCopy: AgColumn[],\n        columnKeyCreator: ColumnKeyCreator,\n        existingGroups: AgProvidedColumnGroup[],\n        source: ColumnEventType\n    ): (AgColumn | AgProvidedColumnGroup)[] {\n        if (!defs) return [];\n\n        const result = new Array(defs.length);\n        for (let i = 0; i < result.length; i++) {\n            const def = defs[i];\n            if (this.isColumnGroup(def)) {\n                result[i] = this.createColumnGroup(\n                    primaryColumns,\n                    def as ColGroupDef,\n                    level,\n                    existingColsCopy,\n                    columnKeyCreator,\n                    existingGroups,\n                    source\n                );\n            } else {\n                result[i] = this.createColumn(\n                    primaryColumns,\n                    def as ColDef,\n                    existingColsCopy,\n                    columnKeyCreator,\n                    source\n                );\n            }\n        }\n        return result;\n    }\n\n    private createColumnGroup(\n        primaryColumns: boolean,\n        colGroupDef: ColGroupDef,\n        level: number,\n        existingColumns: AgColumn[],\n        columnKeyCreator: ColumnKeyCreator,\n        existingGroups: AgProvidedColumnGroup[],\n        source: ColumnEventType\n    ): AgProvidedColumnGroup {\n        const colGroupDefMerged = this.createMergedColGroupDef(colGroupDef);\n        const groupId = columnKeyCreator.getUniqueKey(colGroupDefMerged.groupId || null, null);\n        const providedGroup = new AgProvidedColumnGroup(colGroupDefMerged, groupId, false, level);\n        this.createBean(providedGroup);\n        const existingGroupAndIndex = this.findExistingGroup(colGroupDef, existingGroups);\n        // make sure we remove, so if user provided duplicate id, then we don't have more than\n        // one column instance for colDef with common id\n        if (existingGroupAndIndex) {\n            existingGroups.splice(existingGroupAndIndex.idx, 1);\n        }\n\n        const existingGroup = existingGroupAndIndex?.group;\n        if (existingGroup) {\n            providedGroup.setExpanded(existingGroup.isExpanded());\n        }\n\n        const children = this.recursivelyCreateColumns(\n            colGroupDefMerged.children,\n            level + 1,\n            primaryColumns,\n            existingColumns,\n            columnKeyCreator,\n            existingGroups,\n            source\n        );\n\n        providedGroup.setChildren(children);\n\n        return providedGroup;\n    }\n\n    private createMergedColGroupDef(colGroupDef: ColGroupDef | null): ColGroupDef {\n        const colGroupDefMerged: ColGroupDef = {} as ColGroupDef;\n        Object.assign(colGroupDefMerged, this.gos.get('defaultColGroupDef'));\n        Object.assign(colGroupDefMerged, colGroupDef);\n\n        return colGroupDefMerged;\n    }\n\n    private createColumn(\n        primaryColumns: boolean,\n        colDef: ColDef,\n        existingColsCopy: AgColumn[] | null,\n        columnKeyCreator: ColumnKeyCreator,\n        source: ColumnEventType\n    ): AgColumn {\n        // see if column already exists\n        const existingColAndIndex = this.findExistingColumn(colDef, existingColsCopy);\n\n        // make sure we remove, so if user provided duplicate id, then we don't have more than\n        // one column instance for colDef with common id\n        if (existingColAndIndex) {\n            existingColsCopy?.splice(existingColAndIndex.idx, 1);\n        }\n\n        let column = existingColAndIndex?.column;\n        if (!column) {\n            // no existing column, need to create one\n            const colId = columnKeyCreator.getUniqueKey(colDef.colId, colDef.field);\n            const colDefMerged = this.addColumnDefaultAndTypes(colDef, colId);\n            column = new AgColumn(colDefMerged, colDef, colId, primaryColumns);\n            this.createBean(column);\n        } else {\n            const colDefMerged = this.addColumnDefaultAndTypes(colDef, column.getColId());\n            column.setColDef(colDefMerged, colDef, source);\n            this.applyColumnState(column, colDefMerged, source);\n        }\n\n        this.dataTypeService?.addColumnListeners(column);\n\n        return column;\n    }\n\n    public applyColumnState(column: AgColumn, colDef: ColDef, source: ColumnEventType): void {\n        // flex\n        const flex = _attrToNumber(colDef.flex);\n        if (flex !== undefined) {\n            column.setFlex(flex);\n        }\n\n        // width - we only set width if column is not flexing\n        const noFlexThisCol = column.getFlex() <= 0;\n        if (noFlexThisCol) {\n            // both null and undefined means we skip, as it's not possible to 'clear' width (a column must have a width)\n            const width = _attrToNumber(colDef.width);\n            if (width != null) {\n                column.setActualWidth(width, source);\n            } else {\n                // otherwise set the width again, in case min or max width has changed,\n                // and width needs to be adjusted.\n                const widthBeforeUpdate = column.getActualWidth();\n                column.setActualWidth(widthBeforeUpdate, source);\n            }\n        }\n\n        // sort - anything but undefined will set sort, thus null or empty string will clear the sort\n        if (colDef.sort !== undefined) {\n            if (colDef.sort == 'asc' || colDef.sort == 'desc') {\n                column.setSort(colDef.sort, source);\n            } else {\n                column.setSort(undefined, source);\n            }\n        }\n\n        // sorted at - anything but undefined, thus null will clear the sortIndex\n        const sortIndex = _attrToNumber(colDef.sortIndex);\n        if (sortIndex !== undefined) {\n            column.setSortIndex(sortIndex);\n        }\n\n        // hide - anything but undefined, thus null will clear the hide\n        const hide = _attrToBoolean(colDef.hide);\n        if (hide !== undefined) {\n            column.setVisible(!hide, source);\n        }\n\n        // pinned - anything but undefined, thus null or empty string will remove pinned\n        if (colDef.pinned !== undefined) {\n            column.setPinned(colDef.pinned);\n        }\n    }\n\n    private findExistingColumn(\n        newColDef: ColDef,\n        existingColsCopy: AgColumn[] | null\n    ): { idx: number; column: AgColumn } | undefined {\n        if (!existingColsCopy) return undefined;\n\n        for (let i = 0; i < existingColsCopy.length; i++) {\n            const def = existingColsCopy[i].getUserProvidedColDef();\n            if (!def) continue;\n\n            const newHasId = newColDef.colId != null;\n            if (newHasId) {\n                if (existingColsCopy[i].getId() === newColDef.colId) {\n                    return { idx: i, column: existingColsCopy[i] };\n                }\n                continue;\n            }\n\n            const newHasField = newColDef.field != null;\n            if (newHasField) {\n                if (def.field === newColDef.field) {\n                    return { idx: i, column: existingColsCopy[i] };\n                }\n                continue;\n            }\n\n            if (def === newColDef) {\n                return { idx: i, column: existingColsCopy[i] };\n            }\n        }\n        return undefined;\n    }\n\n    private findExistingGroup(\n        newGroupDef: ColGroupDef,\n        existingGroups: AgProvidedColumnGroup[]\n    ): { idx: number; group: AgProvidedColumnGroup } | undefined {\n        const newHasId = newGroupDef.groupId != null;\n        if (!newHasId) {\n            return undefined;\n        }\n\n        for (let i = 0; i < existingGroups.length; i++) {\n            const existingGroup = existingGroups[i];\n            const existingDef = existingGroup.getColGroupDef();\n            if (!existingDef) {\n                continue;\n            }\n\n            if (existingGroup.getId() === newGroupDef.groupId) {\n                return { idx: i, group: existingGroup };\n            }\n        }\n        return undefined;\n    }\n\n    public addColumnDefaultAndTypes(colDef: ColDef, colId: string): ColDef {\n        // start with empty merged definition\n        const res: ColDef = {} as ColDef;\n\n        // merge properties from default column definitions\n        const defaultColDef = this.gos.get('defaultColDef');\n        _mergeDeep(res, defaultColDef, false, true);\n\n        const columnType = this.updateColDefAndGetColumnType(res, colDef, colId);\n\n        if (columnType) {\n            this.assignColumnTypes(columnType, res);\n        }\n\n        // merge properties from column definitions\n        _mergeDeep(res, colDef, false, true);\n\n        const autoGroupColDef = this.gos.get('autoGroupColumnDef');\n        const isSortingCoupled = this.gos.isColumnsSortingCoupledToGroup();\n        if (colDef.rowGroup && autoGroupColDef && isSortingCoupled) {\n            // override the sort for row group columns where the autoGroupColDef defines these values.\n            _mergeDeep(\n                res,\n                { sort: autoGroupColDef.sort, initialSort: autoGroupColDef.initialSort } as ColDef,\n                false,\n                true\n            );\n        }\n\n        this.dataTypeService?.validateColDef(res);\n\n        return res;\n    }\n\n    private updateColDefAndGetColumnType(colDef: ColDef, userColDef: ColDef, colId: string): string[] | undefined {\n        const dataTypeDefinitionColumnType = this.dataTypeService?.updateColDefAndGetColumnType(\n            colDef,\n            userColDef,\n            colId\n        );\n        const columnTypes = userColDef.type ?? dataTypeDefinitionColumnType ?? colDef.type;\n        colDef.type = columnTypes;\n        return columnTypes ? convertColumnTypes(columnTypes) : undefined;\n    }\n\n    private assignColumnTypes(typeKeys: string[], colDefMerged: ColDef) {\n        if (!typeKeys.length) {\n            return;\n        }\n\n        // merge user defined with default column types\n        const allColumnTypes = Object.assign({}, DefaultColumnTypes);\n        const userTypes = this.gos.get('columnTypes') || {};\n\n        _iterateObject(userTypes, (key, value) => {\n            if (key in allColumnTypes) {\n                _warnOnce(`the column type '${key}' is a default column type and cannot be overridden.`);\n            } else {\n                const colType = value as any;\n                if (colType.type) {\n                    _warnOnce(\n                        `Column type definitions 'columnTypes' with a 'type' attribute are not supported ` +\n                            `because a column type cannot refer to another column type. Only column definitions ` +\n                            `'columnDefs' can use the 'type' attribute to refer to a column type.`\n                    );\n                }\n\n                allColumnTypes[key] = value;\n            }\n        });\n\n        typeKeys.forEach((t) => {\n            const typeColDef = allColumnTypes[t.trim()];\n            if (typeColDef) {\n                _mergeDeep(colDefMerged, typeColDef, false, true);\n            } else {\n                _warnOnce(\"colDef.type '\" + t + \"' does not correspond to defined gridOptions.columnTypes\");\n            }\n        });\n    }\n\n    // if object has children, we assume it's a group\n    private isColumnGroup(abstractColDef: ColDef | ColGroupDef): boolean {\n        return (abstractColDef as ColGroupDef).children !== undefined;\n    }\n}\n\nexport function depthFirstOriginalTreeSearch(\n    parent: AgProvidedColumnGroup | null,\n    tree: (AgColumn | AgProvidedColumnGroup)[],\n    callback: (treeNode: AgColumn | AgProvidedColumnGroup, parent: AgProvidedColumnGroup | null) => void\n): void {\n    if (!tree) {\n        return;\n    }\n\n    for (let i = 0; i < tree.length; i++) {\n        const child = tree[i];\n        if (isProvidedColumnGroup(child)) {\n            depthFirstOriginalTreeSearch(child, child.getChildren(), callback);\n        }\n        callback(child, parent);\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection, Context } from '../context/context';\nimport type { AgColumn } from '../entities/agColumn';\nimport { isProvidedColumnGroup } from '../entities/agProvidedColumnGroup';\nimport type { AgProvidedColumnGroup } from '../entities/agProvidedColumnGroup';\nimport type { ColDef, ColGroupDef } from '../entities/colDef';\nimport type { Environment } from '../environment';\nimport type { ColumnEventType } from '../events';\nimport type { QuickFilterService } from '../filter/quickFilterService';\nimport type { PropertyChangedSource } from '../gridOptionsService';\nimport type { IAutoColService } from '../interfaces/iAutoColService';\nimport type { Column, ColumnPinnedType } from '../interfaces/iColumn';\nimport type { IShowRowGroupColsService } from '../interfaces/iShowRowGroupColsService';\nimport type { ColumnAnimationService } from '../rendering/columnAnimationService';\nimport { _areEqual, _includes, _insertIntoArray, _moveInArray } from '../utils/array';\nimport { _warnOnce } from '../utils/function';\nimport { _missingOrEmpty } from '../utils/generic';\nimport type { ValueCache } from '../valueService/valueCache';\nimport type { ColumnApplyStateService, ColumnState } from './columnApplyStateService';\nimport type { ColumnAutosizeService } from './columnAutosizeService';\nimport type { ColumnDefFactory } from './columnDefFactory';\nimport type { ColumnEventDispatcher } from './columnEventDispatcher';\nimport type { ColumnFactory } from './columnFactory';\nimport { depthFirstOriginalTreeSearch } from './columnFactory';\nimport type { ColumnGroupStateService } from './columnGroupStateService';\nimport type { ColumnMoveService } from './columnMoveService';\nimport type { ColumnSizeService } from './columnSizeService';\nimport { GROUP_AUTO_COLUMN_ID } from './columnUtils';\nimport { destroyColumnTree, getColumnsFromTree, isColumnGroupAutoCol } from './columnUtils';\nimport type { ColumnViewportService } from './columnViewportService';\nimport type { FuncColsService } from './funcColsService';\nimport type { PivotResultColsService } from './pivotResultColsService';\nimport type { VisibleColsService } from './visibleColsService';\n\nexport type ColKey<TData = any, TValue = any> = string | ColDef<TData, TValue> | Column<TValue>;\nexport type Maybe<T> = T | null | undefined;\n\nexport interface ColumnCollections {\n    // columns in a tree, leaf levels are columns, everything above is group column\n    tree: (AgColumn | AgProvidedColumnGroup)[];\n    treeDepth: number; // depth of the tree above\n    // leaf level cols of the tree\n    list: AgColumn[];\n    // cols by id, for quick lookup\n    map: { [id: string]: AgColumn };\n}\n\nexport class ColumnModel extends BeanStub implements NamedBean {\n    beanName = 'columnModel' as const;\n\n    private context: Context;\n    private columnFactory: ColumnFactory;\n    private columnSizeService: ColumnSizeService;\n    private visibleColsService: VisibleColsService;\n    private columnViewportService: ColumnViewportService;\n    private pivotResultColsService: PivotResultColsService;\n    private columnAnimationService: ColumnAnimationService;\n    private autoColService?: IAutoColService;\n    private valueCache: ValueCache;\n    private columnDefFactory: ColumnDefFactory;\n    private columnApplyStateService: ColumnApplyStateService;\n    private columnGroupStateService: ColumnGroupStateService;\n    private eventDispatcher: ColumnEventDispatcher;\n    private columnMoveService: ColumnMoveService;\n    private columnAutosizeService: ColumnAutosizeService;\n    private funcColsService: FuncColsService;\n    private quickFilterService?: QuickFilterService;\n    private showRowGroupColsService?: IShowRowGroupColsService;\n    private environment: Environment;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.context = beans.context;\n        this.columnFactory = beans.columnFactory;\n        this.columnSizeService = beans.columnSizeService;\n        this.visibleColsService = beans.visibleColsService;\n        this.columnViewportService = beans.columnViewportService;\n        this.pivotResultColsService = beans.pivotResultColsService;\n        this.columnAnimationService = beans.columnAnimationService;\n        this.autoColService = beans.autoColService;\n        this.valueCache = beans.valueCache;\n        this.columnDefFactory = beans.columnDefFactory;\n        this.columnApplyStateService = beans.columnApplyStateService;\n        this.columnGroupStateService = beans.columnGroupStateService;\n        this.eventDispatcher = beans.columnEventDispatcher;\n        this.columnMoveService = beans.columnMoveService;\n        this.columnAutosizeService = beans.columnAutosizeService;\n        this.funcColsService = beans.funcColsService;\n        this.quickFilterService = beans.quickFilterService;\n        this.showRowGroupColsService = beans.showRowGroupColsService;\n        this.environment = beans.environment;\n    }\n\n    // as provided by gridProp columnsDefs\n    private colDefs: (ColDef | ColGroupDef)[];\n\n    // columns generated from columnDefs\n    // this doesn't change (including order) unless columnDefs prop changses.\n    private colDefCols: ColumnCollections;\n\n    // group auto columns\n    private autoCols: ColumnCollections | null;\n\n    // [providedCols OR pivotResultCols] PLUS autoGroupCols.\n    // this cols.list maintains column order.\n    private cols: ColumnCollections;\n\n    // if pivotMode is on, however pivot results are NOT shown if no pivot columns are set\n    private pivotMode = false;\n\n    // true when pivotResultCols are in cols\n    private showingPivotResult: boolean;\n\n    private lastOrder: AgColumn[] | null;\n    private lastPivotOrder: AgColumn[] | null;\n\n    // true if we are doing column spanning\n    private colSpanActive: boolean;\n\n    // grid columns that have colDef.autoHeight set\n    private autoHeightActive: boolean;\n    private autoHeightActiveAtLeastOnce = false;\n\n    private ready = false;\n    private changeEventsDispatching = false;\n\n    // when we're waiting for cell data types to be inferred, we need to defer column resizing\n    private shouldQueueResizeOperations: boolean = false;\n    private resizeOperationQueue: (() => void)[] = [];\n\n    public postConstruct(): void {\n        const pivotMode = this.gos.get('pivotMode');\n\n        if (this.isPivotSettingAllowed(pivotMode)) {\n            this.pivotMode = pivotMode;\n        }\n\n        this.addManagedPropertyListeners(\n            ['groupDisplayType', 'treeData', 'treeDataDisplayType', 'groupHideOpenParents'],\n            (event) => this.refreshAll(convertSourceType(event.source))\n        );\n        this.addManagedPropertyListener('autoGroupColumnDef', (event) =>\n            this.onAutoGroupColumnDefChanged(convertSourceType(event.source))\n        );\n        this.addManagedPropertyListeners(['defaultColDef', 'columnTypes', 'suppressFieldDotNotation'], (event) =>\n            this.recreateColumnDefs(convertSourceType(event.source))\n        );\n        this.addManagedPropertyListener('pivotMode', (event) =>\n            this.setPivotMode(this.gos.get('pivotMode'), convertSourceType(event.source))\n        );\n        this.addManagedEventListeners({ firstDataRendered: () => this.onFirstDataRendered() });\n    }\n\n    // called from SyncService, when grid has finished initialising\n    private createColsFromColDefs(colsPreviouslyExisted: boolean, source: ColumnEventType): void {\n        // only need to dispatch before/after events if updating columns, never if setting columns for first time\n        const dispatchEventsFunc = colsPreviouslyExisted\n            ? this.columnApplyStateService.compareColumnStatesAndDispatchEvents(source)\n            : undefined;\n\n        // always invalidate cache on changing columns, as the column id's for the new columns\n        // could overlap with the old id's, so the cache would return old values for new columns.\n        this.valueCache.expire();\n\n        const oldCols = this.colDefCols && this.colDefCols.list;\n        const oldTree = this.colDefCols && this.colDefCols.tree;\n        const newTree = this.columnFactory.createColumnTree(this.colDefs, true, oldTree, source);\n\n        destroyColumnTree(this.context, this.colDefCols?.tree, newTree.columnTree);\n\n        const tree = newTree.columnTree;\n        const treeDepth = newTree.treeDept;\n        const list = getColumnsFromTree(tree);\n        const map: { [id: string]: AgColumn } = {};\n\n        list.forEach((col) => (map[col.getId()] = col));\n\n        this.colDefCols = { tree, treeDepth, list, map };\n\n        this.funcColsService.extractCols(source, oldCols);\n\n        this.ready = true;\n\n        this.refreshCols();\n\n        const maintainColOrder =\n            colsPreviouslyExisted && !this.showingPivotResult && !this.gos.get('maintainColumnOrder');\n        if (maintainColOrder) {\n            this.orderColsLikeColDefCols();\n        }\n\n        this.visibleColsService.refresh(source);\n        this.columnViewportService.checkViewportColumns();\n\n        // this event is not used by AG Grid, but left here for backwards compatibility,\n        // in case applications use it\n        this.eventDispatcher.everythingChanged(source);\n\n        // Row Models react to all of these events as well as new columns loaded,\n        // this flag instructs row model to ignore these events to reduce refreshes.\n        if (dispatchEventsFunc) {\n            this.changeEventsDispatching = true;\n            dispatchEventsFunc();\n            this.changeEventsDispatching = false;\n        }\n\n        this.eventDispatcher.newColumnsLoaded(source);\n        if (source === 'gridInitializing') {\n            this.columnSizeService.applyAutosizeStrategy();\n        }\n    }\n\n    // called from: buildAutoGroupColumns (events 'groupDisplayType', 'treeData', 'treeDataDisplayType', 'groupHideOpenParents')\n    // createColsFromColDefs (recreateColumnDefs, setColumnsDefs),\n    // setPivotMode, applyColumnState,\n    // functionColsService.setPrimaryColList, functionColsService.updatePrimaryColList,\n    // pivotResultColsService.setPivotResultCols\n    public refreshCols(): void {\n        if (!this.colDefCols) {\n            return;\n        }\n\n        const prevColTree = this.cols?.tree;\n\n        this.saveColOrder();\n\n        this.selectCols();\n\n        this.createAutoCols();\n        this.addAutoCols();\n\n        this.restoreColOrder();\n\n        this.positionLockedCols();\n        this.showRowGroupColsService?.refresh();\n        this.quickFilterService?.refreshQuickFilterCols();\n\n        this.setColSpanActive();\n        this.setAutoHeightActive();\n\n        // make sure any part of the gui that tries to draw, eg the header,\n        // will get empty lists of columns rather than stale columns.\n        // for example, the header will received gridColumnsChanged event, so will try and draw,\n        // but it will draw successfully when it acts on the virtualColumnsChanged event\n        this.visibleColsService.clear();\n        this.columnViewportService.clear();\n\n        const dispatchChangedEvent = !_areEqual(prevColTree, this.cols.tree);\n        if (dispatchChangedEvent) {\n            this.eventDispatcher.gridColumns();\n        }\n    }\n\n    private selectCols(): void {\n        const pivotResultCols = this.pivotResultColsService.getPivotResultCols();\n        this.showingPivotResult = pivotResultCols != null;\n\n        if (pivotResultCols) {\n            const { map, list, tree, treeDepth } = pivotResultCols;\n            this.cols = {\n                list: list.slice(),\n                map: { ...map },\n                tree: tree.slice(),\n                treeDepth: treeDepth,\n            };\n\n            // If the current columns are the same or a subset of the previous\n            // we keep the previous order, otherwise we go back to the order the pivot\n            // cols are generated in\n            const hasSameColumns = pivotResultCols.list.some((col) => this.cols?.map[col.getColId()] !== undefined);\n            if (!hasSameColumns) {\n                this.lastPivotOrder = null;\n            }\n        } else {\n            const { map, list, tree, treeDepth } = this.colDefCols;\n            this.cols = {\n                list: list.slice(),\n                map: { ...map },\n                tree: tree.slice(),\n                treeDepth: treeDepth,\n            };\n        }\n    }\n\n    public getColsToShow(): AgColumn[] {\n        // pivot mode is on, but we are not pivoting, so we only\n        // show columns we are aggregating on\n\n        const showAutoGroupAndValuesOnly = this.isPivotMode() && !this.isShowingPivotResult();\n        const valueColumns = this.funcColsService.getValueColumns();\n\n        const res = this.cols.list.filter((col) => {\n            const isAutoGroupCol = isColumnGroupAutoCol(col);\n            if (showAutoGroupAndValuesOnly) {\n                const isValueCol = valueColumns && _includes(valueColumns, col);\n                return isAutoGroupCol || isValueCol;\n            } else {\n                // keep col if a) it's auto-group or b) it's visible\n                return isAutoGroupCol || col.isVisible();\n            }\n        });\n\n        return res;\n    }\n\n    private addAutoCols(): void {\n        if (this.autoCols == null) {\n            return;\n        }\n        this.cols.list = this.autoCols.list.concat(this.cols.list);\n        this.cols.tree = this.autoCols.tree.concat(this.cols.tree);\n        updateColsMap(this.cols);\n    }\n\n    private createAutoCols(): void {\n        const groupFullWidthRow = this.gos.isGroupUseEntireRow(this.pivotMode);\n        // we need to allow suppressing auto-column separately for group and pivot as the normal situation\n        // is CSRM and user provides group column themselves for normal view, but when they go into pivot the\n        // columns are generated by the grid so no opportunity for user to provide group column. so need a way\n        // to suppress auto-col for grouping only, and not pivot.\n        // however if using Viewport RM or SSRM and user is providing the columns, the user may wish full control\n        // of the group column in this instance.\n        const suppressAutoColumn = this.pivotMode ? this.gos.get('pivotSuppressAutoColumn') : this.isSuppressAutoCol();\n\n        const rowGroupCols = this.funcColsService.getRowGroupColumns();\n\n        const groupingActive = rowGroupCols.length > 0 || this.gos.get('treeData');\n\n        const noAutoCols = !groupingActive || suppressAutoColumn || groupFullWidthRow;\n\n        const destroyPrevious = () => {\n            if (this.autoCols) {\n                destroyColumnTree(this.context, this.autoCols.tree);\n                this.autoCols = null;\n            }\n        };\n\n        // function\n        if (noAutoCols || !this.autoColService) {\n            destroyPrevious();\n            return;\n        }\n\n        const list = this.autoColService.createAutoCols(rowGroupCols) ?? [];\n        const autoColsSame = areColIdsEqual(list, this.autoCols?.list || null);\n\n        // the new tree dept will equal the current tree dept of cols\n        const newTreeDepth = this.cols.treeDepth;\n        const oldTreeDepth = this.autoCols ? this.autoCols.treeDepth : -1;\n        const treeDeptSame = oldTreeDepth == newTreeDepth;\n\n        if (autoColsSame && treeDeptSame) {\n            return;\n        }\n\n        destroyPrevious();\n        const [tree, treeDepth] = this.columnFactory.createForAutoGroups(list, this.cols?.tree);\n        this.autoCols = {\n            list,\n            tree,\n            treeDepth,\n            map: {},\n        };\n\n        const putAutocolsFirstInList = (cols: AgColumn[] | null): AgColumn[] | null => {\n            if (!cols) {\n                return null;\n            }\n            // we use colId, and not instance, to remove old autoGroupCols\n            const colsFiltered = cols.filter((col) => !isColumnGroupAutoCol(col));\n            return [...list, ...colsFiltered];\n        };\n\n        this.lastOrder = putAutocolsFirstInList(this.lastOrder);\n        this.lastPivotOrder = putAutocolsFirstInList(this.lastPivotOrder);\n    }\n\n    // on events 'groupDisplayType', 'treeData', 'treeDataDisplayType', 'groupHideOpenParents'\n    private refreshAll(source: ColumnEventType) {\n        if (!this.isReady()) {\n            return;\n        }\n        this.refreshCols();\n        this.visibleColsService.refresh(source);\n    }\n\n    public setColsVisible(keys: (string | AgColumn)[], visible = false, source: ColumnEventType): void {\n        this.columnApplyStateService.applyColumnState(\n            {\n                state: keys.map<ColumnState>((key) => ({\n                    colId: typeof key === 'string' ? key : key.getColId(),\n                    hide: !visible,\n                })),\n            },\n            source\n        );\n    }\n\n    public setColsPinned(keys: Maybe<ColKey>[], pinned: ColumnPinnedType, source: ColumnEventType): void {\n        if (!this.cols) {\n            return;\n        }\n        if (_missingOrEmpty(keys)) {\n            return;\n        }\n\n        if (this.gos.isDomLayout('print')) {\n            _warnOnce(`Changing the column pinning status is not allowed with domLayout='print'`);\n            return;\n        }\n\n        this.columnAnimationService.start();\n\n        let actualPinned: ColumnPinnedType;\n        if (pinned === true || pinned === 'left') {\n            actualPinned = 'left';\n        } else if (pinned === 'right') {\n            actualPinned = 'right';\n        } else {\n            actualPinned = null;\n        }\n\n        const updatedCols: AgColumn[] = [];\n\n        keys.forEach((key) => {\n            if (!key) {\n                return;\n            }\n            const column = this.getCol(key);\n            if (!column) {\n                return;\n            }\n\n            if (column.getPinned() !== actualPinned) {\n                column.setPinned(actualPinned);\n                updatedCols.push(column);\n            }\n        });\n\n        if (updatedCols.length) {\n            this.visibleColsService.refresh(source);\n            this.eventDispatcher.columnPinned(updatedCols, source);\n        }\n\n        this.columnAnimationService.finish();\n    }\n\n    // called by headerRenderer - when a header is opened or closed\n    public setColumnGroupOpened(\n        key: AgProvidedColumnGroup | string | null,\n        newValue: boolean,\n        source: ColumnEventType\n    ): void {\n        let keyAsString: string;\n\n        if (isProvidedColumnGroup(key)) {\n            keyAsString = key.getId();\n        } else {\n            keyAsString = key || '';\n        }\n        this.columnGroupStateService.setColumnGroupState([{ groupId: keyAsString, open: newValue }], source);\n    }\n\n    public getProvidedColGroup(key: string): AgProvidedColumnGroup | null {\n        let res: AgProvidedColumnGroup | null = null;\n\n        depthFirstOriginalTreeSearch(null, this.cols?.tree, (node) => {\n            if (isProvidedColumnGroup(node)) {\n                if (node.getId() === key) {\n                    res = node;\n                }\n            }\n        });\n\n        return res;\n    }\n\n    public isColGroupLocked(column: AgColumn): boolean {\n        const groupLockGroupColumns = this.gos.get('groupLockGroupColumns');\n        if (!column.isRowGroupActive() || groupLockGroupColumns === 0) {\n            return false;\n        }\n\n        if (groupLockGroupColumns === -1) {\n            return true;\n        }\n\n        const rowGroupCols = this.funcColsService.getRowGroupColumns();\n        const colIndex = rowGroupCols.findIndex((groupCol) => groupCol.getColId() === column.getColId());\n        return groupLockGroupColumns > colIndex;\n    }\n\n    public isSuppressAutoCol() {\n        const groupDisplayType = this.gos.get('groupDisplayType');\n        const isCustomRowGroups = groupDisplayType === 'custom';\n        if (isCustomRowGroups) {\n            return true;\n        }\n\n        const treeDataDisplayType = this.gos.get('treeDataDisplayType');\n        return treeDataDisplayType === 'custom';\n    }\n\n    private setAutoHeightActive(): void {\n        this.autoHeightActive = this.cols.list.some((col) => col.isAutoHeight());\n\n        if (this.autoHeightActive) {\n            this.autoHeightActiveAtLeastOnce = true;\n\n            const supportedRowModel = this.gos.isRowModelType('clientSide') || this.gos.isRowModelType('serverSide');\n            if (!supportedRowModel) {\n                _warnOnce('autoHeight columns only work with Client Side Row Model and Server Side Row Model.');\n            }\n        }\n    }\n\n    private restoreColOrder(): void {\n        const lastOrder = this.showingPivotResult ? this.lastPivotOrder : this.lastOrder;\n        if (!lastOrder) {\n            return;\n        }\n\n        const lastOrderMapped = new Map<AgColumn, number>(lastOrder.map((col, index) => [col, index]));\n\n        // only do the sort if at least one column is accounted for. columns will be not accounted for\n        // if changing from pivot result cols to provided columns\n        const noColsFound = !this.cols.list.some((col) => lastOrderMapped.has(col));\n        if (noColsFound) {\n            return;\n        }\n\n        // order cols in the same order as before. we need to make sure that all\n        // cols still exists, so filter out any that no longer exist.\n        const colsMap = new Map<AgColumn, boolean>(this.cols.list.map((col) => [col, true]));\n        const lastOrderFiltered = lastOrder.filter((col) => colsMap.has(col));\n        const lastOrderFilteredMap = new Map<AgColumn, boolean>(lastOrderFiltered.map((col) => [col, true]));\n        const missingFromLastOrder = this.cols.list.filter((col) => !lastOrderFilteredMap.has(col));\n\n        // add in the new columns, at the end (if no group), or at the end of the group (if a group)\n        const res = lastOrderFiltered.slice();\n\n        missingFromLastOrder.forEach((newCol) => {\n            let parent = newCol.getOriginalParent();\n\n            // if no parent, means we are not grouping, so add the column to the end\n            if (!parent) {\n                res.push(newCol);\n                return;\n            }\n\n            // find the group the column belongs to. if no siblings at the current level (eg col in group on it's\n            // own) then go up one level and look for siblings there.\n            const siblings: AgColumn[] = [];\n            while (!siblings.length && parent) {\n                const leafCols = parent.getLeafColumns();\n                leafCols.forEach((leafCol) => {\n                    const presentInNewCols = res.indexOf(leafCol) >= 0;\n                    const notYetInSiblings = siblings.indexOf(leafCol) < 0;\n                    if (presentInNewCols && notYetInSiblings) {\n                        siblings.push(leafCol);\n                    }\n                });\n                parent = parent.getOriginalParent();\n            }\n\n            // if no siblings exist at any level, this means the col is in a group (or parent groups) on it's own\n            if (!siblings.length) {\n                res.push(newCol);\n                return;\n            }\n\n            // find index of last column in the group\n            const indexes = siblings.map((col) => res.indexOf(col));\n            const lastIndex = Math.max(...indexes);\n\n            _insertIntoArray(res, newCol, lastIndex + 1);\n        });\n\n        this.cols.list = res;\n    }\n\n    private orderColsLikeColDefCols(): void {\n        if (!this.colDefCols || !this.cols) {\n            return;\n        }\n\n        const colsOrdered = this.colDefCols.list.filter((col) => this.cols.list.indexOf(col) >= 0);\n        const otherCols = this.cols.list.filter((col) => colsOrdered.indexOf(col) < 0);\n\n        this.cols.list = [...otherCols, ...colsOrdered];\n        this.cols.list = this.columnMoveService.placeLockedColumns(this.cols.list);\n    }\n\n    public sortColsLikeKeys(colIds: string[]): void {\n        if (this.cols == null) {\n            return;\n        }\n\n        let newOrder: AgColumn[] = [];\n        const processedColIds: { [id: string]: boolean } = {};\n\n        colIds.forEach((colId) => {\n            if (processedColIds[colId]) {\n                return;\n            }\n            const col = this.cols.map[colId];\n            if (col) {\n                newOrder.push(col);\n                processedColIds[colId] = true;\n            }\n        });\n\n        // add in all other columns\n        let autoGroupInsertIndex = 0;\n        this.cols.list.forEach((col) => {\n            const colId = col.getColId();\n            const alreadyProcessed = processedColIds[colId] != null;\n            if (alreadyProcessed) {\n                return;\n            }\n\n            const isAutoGroupCol = colId.startsWith(GROUP_AUTO_COLUMN_ID);\n            if (isAutoGroupCol) {\n                // auto group columns, if missing from state list, are added to the start.\n                // it's common to have autoGroup missing, as grouping could be on by default\n                // on a column, but the user could of since removed the grouping via the UI.\n                // if we don't inc the insert index, autoGroups will be inserted in reverse order\n                _insertIntoArray(newOrder, col, autoGroupInsertIndex++);\n            } else {\n                // normal columns, if missing from state list, are added at the end\n                newOrder.push(col);\n            }\n        });\n\n        // this is already done in updateCols, however we changed the order above (to match the order of the state\n        // columns) so we need to do it again. we could of put logic into the order above to take into account fixed\n        // columns, however if we did then we would have logic for updating fixed columns twice. reusing the logic here\n        // is less sexy for the code here, but it keeps consistency.\n        newOrder = this.columnMoveService.placeLockedColumns(newOrder);\n\n        if (!this.columnMoveService.doesMovePassMarryChildren(newOrder)) {\n            _warnOnce(\n                'Applying column order broke a group where columns should be married together. Applying new order has been discarded.'\n            );\n            return;\n        }\n\n        this.cols.list = newOrder;\n    }\n\n    // returns the provided cols sorted in same order as they appear in this.cols, eg if this.cols\n    // contains [a,b,c,d,e] and col passed is [e,a] then the passed cols are sorted into [a,e]\n    public sortColsLikeCols(cols: AgColumn[]): void {\n        if (!cols || cols.length <= 1) {\n            return;\n        }\n\n        const notAllColsPresent = cols.filter((c: AgColumn) => this.cols.list.indexOf(c) < 0).length > 0;\n        if (notAllColsPresent) {\n            return;\n        }\n\n        cols.sort((a: AgColumn, b: AgColumn) => {\n            const indexA = this.cols.list.indexOf(a);\n            const indexB = this.cols.list.indexOf(b);\n            return indexA - indexB;\n        });\n    }\n\n    public resetColDefIntoCol(column: AgColumn, source: ColumnEventType): boolean {\n        const userColDef = column.getUserProvidedColDef();\n        if (!userColDef) {\n            return false;\n        }\n        const newColDef = this.columnFactory.addColumnDefaultAndTypes(userColDef, column.getColId());\n        column.setColDef(newColDef, userColDef, source);\n        return true;\n    }\n\n    public queueResizeOperations(): void {\n        this.shouldQueueResizeOperations = true;\n    }\n\n    public isShouldQueueResizeOperations(): boolean {\n        return this.shouldQueueResizeOperations;\n    }\n\n    public processResizeOperations(): void {\n        this.shouldQueueResizeOperations = false;\n        this.resizeOperationQueue.forEach((resizeOperation) => resizeOperation());\n        this.resizeOperationQueue = [];\n    }\n\n    public pushResizeOperation(func: () => void): void {\n        this.resizeOperationQueue.push(func);\n    }\n\n    public moveInCols(movedColumns: AgColumn[], toIndex: number, source: ColumnEventType): void {\n        _moveInArray(this.cols?.list, movedColumns, toIndex);\n        this.visibleColsService.refresh(source);\n    }\n\n    private positionLockedCols(): void {\n        this.cols.list = this.columnMoveService.placeLockedColumns(this.cols.list);\n    }\n\n    private saveColOrder(): void {\n        if (this.showingPivotResult) {\n            this.lastPivotOrder = this.cols?.list;\n        } else {\n            this.lastOrder = this.cols?.list;\n        }\n    }\n\n    public getColumnDefs(): (ColDef | ColGroupDef)[] | undefined {\n        if (!this.colDefCols) {\n            return;\n        }\n\n        const cols = this.colDefCols.list.slice();\n\n        if (this.showingPivotResult) {\n            cols.sort((a: AgColumn, b: AgColumn) => this.lastOrder!.indexOf(a) - this.lastOrder!.indexOf(b));\n        } else if (this.lastOrder) {\n            cols.sort((a: AgColumn, b: AgColumn) => this.cols.list.indexOf(a) - this.cols.list.indexOf(b));\n        }\n\n        const rowGroupColumns = this.funcColsService.getRowGroupColumns();\n        const pivotColumns = this.funcColsService.getPivotColumns();\n\n        return this.columnDefFactory.buildColumnDefs(cols, rowGroupColumns, pivotColumns);\n    }\n\n    public isShowingPivotResult(): boolean {\n        return this.showingPivotResult;\n    }\n\n    // called by clientSideRowModel.refreshModel\n    public isChangeEventsDispatching(): boolean {\n        return this.changeEventsDispatching;\n    }\n\n    public isColSpanActive(): boolean {\n        return this.colSpanActive;\n    }\n\n    // used by Column Tool Panel\n    public isProvidedColGroupsPresent(): boolean {\n        return this.colDefCols?.treeDepth > 0;\n    }\n\n    private setColSpanActive(): void {\n        this.colSpanActive = this.cols.list.some((col) => col.getColDef().colSpan != null);\n    }\n\n    public isAutoRowHeightActive(): boolean {\n        return this.autoHeightActive;\n    }\n\n    public wasAutoRowHeightEverActive(): boolean {\n        return this.autoHeightActiveAtLeastOnce;\n    }\n\n    // + gridPanel -> for resizing the body and setting top margin\n    public getHeaderRowCount(): number {\n        return this.cols ? this.cols.treeDepth + 1 : -1;\n    }\n\n    public isReady(): boolean {\n        return this.ready;\n    }\n\n    public isPivotMode(): boolean {\n        return this.pivotMode;\n    }\n\n    private setPivotMode(pivotMode: boolean, source: ColumnEventType): void {\n        if (pivotMode === this.pivotMode || !this.isPivotSettingAllowed(this.pivotMode)) {\n            return;\n        }\n\n        this.pivotMode = pivotMode;\n\n        if (!this.ready) {\n            return;\n        }\n\n        // we need to update grid columns to cover the scenario where user has groupDisplayType = 'custom', as\n        // this means we don't use auto group column UNLESS we are in pivot mode (it's mandatory in pivot mode),\n        // so need to updateCols() to check it autoGroupCol needs to be added / removed\n        this.refreshCols();\n        this.visibleColsService.refresh(source);\n\n        this.eventDispatcher.pivotModeChanged();\n    }\n\n    private isPivotSettingAllowed(pivot: boolean): boolean {\n        if (pivot && this.gos.get('treeData')) {\n            _warnOnce('Pivot mode not available with treeData.');\n            return false;\n        }\n\n        return true;\n    }\n\n    // + clientSideRowModel\n    public isPivotActive(): boolean {\n        const pivotColumns = this.funcColsService.getPivotColumns();\n        return this.pivotMode && !_missingOrEmpty(pivotColumns);\n    }\n\n    // called when dataTypes change\n    public recreateColumnDefs(source: ColumnEventType): void {\n        if (!this.cols) {\n            return;\n        }\n\n        // if we aren't going to force, update the auto cols in place\n        if (this.autoCols) {\n            this.autoColService!.updateAutoCols(this.autoCols.list, source);\n        }\n        this.createColsFromColDefs(true, source);\n    }\n\n    public setColumnDefs(columnDefs: (ColDef | ColGroupDef)[], source: ColumnEventType) {\n        const colsPreviouslyExisted = !!this.colDefs;\n        this.colDefs = columnDefs;\n        this.createColsFromColDefs(colsPreviouslyExisted, source);\n    }\n\n    public override destroy(): void {\n        destroyColumnTree(this.context, this.colDefCols?.tree);\n        destroyColumnTree(this.context, this.autoCols?.tree);\n        super.destroy();\n    }\n\n    public getColTree(): (AgColumn | AgProvidedColumnGroup)[] {\n        return this.cols.tree;\n    }\n\n    // + columnSelectPanel\n    public getColDefColTree(): (AgColumn | AgProvidedColumnGroup)[] {\n        return this.colDefCols.tree;\n    }\n\n    // + clientSideRowController -> sorting, building quick filter text\n    // + headerRenderer -> sorting (clearing icon)\n    public getColDefCols(): AgColumn[] | null {\n        return this.colDefCols?.list ? this.colDefCols.list : null;\n    }\n\n    // + moveColumnController\n    public getCols(): AgColumn[] {\n        return this.cols?.list ?? [];\n    }\n\n    // returns colDefCols, pivotResultCols and autoCols\n    public getAllCols(): AgColumn[] {\n        const pivotResultCols = this.pivotResultColsService.getPivotResultCols();\n        const pivotResultColsList = pivotResultCols?.list;\n        return ([] as AgColumn[]).concat(\n            ...[this.colDefCols?.list || [], this.autoCols?.list || [], pivotResultColsList || []]\n        );\n    }\n\n    public getColsForKeys(keys: ColKey[]): AgColumn[] {\n        if (!keys) {\n            return [];\n        }\n        const res = keys.map((key) => this.getCol(key)).filter((col) => col != null);\n        return res as AgColumn[];\n    }\n\n    public getColDefCol(key: ColKey): AgColumn | null {\n        if (!this.colDefCols?.list) {\n            return null;\n        }\n        return this.getColFromCollection(key, this.colDefCols);\n    }\n\n    public getCol(key: Maybe<ColKey>): AgColumn | null {\n        if (key == null) {\n            return null;\n        }\n        return this.getColFromCollection(key, this.cols);\n    }\n\n    public getColFromCollection(key: ColKey, cols: ColumnCollections): AgColumn | null {\n        if (cols == null) {\n            return null;\n        }\n\n        const { map, list } = cols;\n\n        // most of the time this method gets called the key is a string, so we put this shortcut in\n        // for performance reasons, to see if we can match for ID (it doesn't do auto columns, that's done below)\n        if (typeof key == 'string' && map[key]) {\n            return map[key];\n        }\n\n        for (let i = 0; i < list.length; i++) {\n            if (columnsMatch(list[i], key)) {\n                return list[i];\n            }\n        }\n\n        return this.getAutoCol(key);\n    }\n\n    public getAutoCol(key: ColKey): AgColumn | null {\n        if (this.autoCols == null) return null;\n        return this.autoCols.list.find((groupCol) => columnsMatch(groupCol, key)) || null;\n    }\n\n    public getAutoCols(): AgColumn[] | null {\n        return this.autoCols?.list || null;\n    }\n\n    public setColHeaderHeight(col: AgColumn, height: number): void {\n        const changed = col.setAutoHeaderHeight(height);\n\n        if (changed) {\n            this.eventDispatcher.headerHeight(col);\n        }\n    }\n\n    public getColumnGroupHeaderRowHeight(): number {\n        if (this.isPivotMode()) {\n            return this.getPivotGroupHeaderHeight() as number;\n        }\n        return this.getGroupHeaderHeight() as number;\n    }\n\n    public getColumnHeaderRowHeight(): number {\n        const defaultHeight: number = (\n            this.isPivotMode() ? this.getPivotHeaderHeight() : this.getHeaderHeight()\n        ) as number;\n\n        const allDisplayedCols = this.visibleColsService.getAllCols();\n\n        const displayedHeights = allDisplayedCols\n            .filter((col) => col.isAutoHeaderHeight())\n            .map((col) => col.getAutoHeaderHeight() || 0);\n\n        return Math.max(defaultHeight, ...displayedHeights);\n    }\n\n    public getHeaderHeight(): number {\n        return this.gos.get('headerHeight') ?? this.environment.getDefaultHeaderHeight();\n    }\n    public getFloatingFiltersHeight(): number {\n        return this.gos.get('floatingFiltersHeight') ?? this.getHeaderHeight();\n    }\n    public getGroupHeaderHeight(): number {\n        return this.gos.get('groupHeaderHeight') ?? this.getHeaderHeight();\n    }\n    private getPivotHeaderHeight(): number {\n        return this.gos.get('pivotHeaderHeight') ?? this.getHeaderHeight();\n    }\n    public getPivotGroupHeaderHeight(): number {\n        return this.gos.get('pivotGroupHeaderHeight') ?? this.getGroupHeaderHeight();\n    }\n\n    private onFirstDataRendered(): void {\n        const autoSizeStrategy = this.gos.get('autoSizeStrategy');\n        if (autoSizeStrategy?.type !== 'fitCellContents') {\n            return;\n        }\n\n        const { colIds: columns, skipHeader } = autoSizeStrategy;\n        // ensure render has finished\n        setTimeout(() => {\n            if (columns) {\n                this.columnAutosizeService.autoSizeCols({\n                    colKeys: columns,\n                    skipHeader,\n                    source: 'autosizeColumns',\n                });\n            } else {\n                this.columnAutosizeService.autoSizeAllColumns('autosizeColumns', skipHeader);\n            }\n        });\n    }\n\n    private onAutoGroupColumnDefChanged(source: ColumnEventType) {\n        if (this.autoCols) {\n            this.autoColService!.updateAutoCols(this.autoCols.list, source);\n        }\n    }\n}\n\nexport function convertSourceType(source: PropertyChangedSource): ColumnEventType {\n    // unfortunately they do not match so need to perform conversion\n    return source === 'gridOptionsUpdated' ? 'gridOptionsChanged' : source;\n}\n\nfunction updateColsMap(cols: ColumnCollections): void {\n    cols.map = {};\n    cols.list.forEach((col) => (cols.map[col.getId()] = col));\n}\n\nfunction columnsMatch(column: AgColumn, key: ColKey): boolean {\n    const columnMatches = column === key;\n    const colDefMatches = column.getColDef() === key;\n    const idMatches = column.getColId() == key;\n\n    return columnMatches || colDefMatches || idMatches;\n}\n\nfunction areColIdsEqual(colsA: AgColumn[] | null, colsB: AgColumn[] | null): boolean {\n    return _areEqual(colsA, colsB, (a, b) => a.getColId() === b.getColId());\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { CtrlsService } from '../ctrlsService';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { AgColumnGroup } from '../entities/agColumnGroup';\nimport type { ColumnEventType } from '../events';\nimport type { HeaderGroupCellCtrl } from '../headerRendering/cells/columnGroup/headerGroupCellCtrl';\nimport type { IRenderStatusService } from '../interfaces/renderStatusService';\nimport type { AnimationFrameService } from '../misc/animationFrameService';\nimport type { AutoWidthCalculator } from '../rendering/autoWidthCalculator';\nimport type { ColumnEventDispatcher } from './columnEventDispatcher';\nimport type { ColKey, ColumnModel, Maybe } from './columnModel';\nimport type { VisibleColsService } from './visibleColsService';\n\nexport class ColumnAutosizeService extends BeanStub implements NamedBean {\n    beanName = 'columnAutosizeService' as const;\n\n    private columnModel: ColumnModel;\n    private visibleColsService: VisibleColsService;\n    private animationFrameService: AnimationFrameService;\n    private autoWidthCalculator: AutoWidthCalculator;\n    private eventDispatcher: ColumnEventDispatcher;\n    private ctrlsService: CtrlsService;\n    private renderStatusService?: IRenderStatusService;\n    private timesDelayed = 0;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.columnModel = beans.columnModel;\n        this.visibleColsService = beans.visibleColsService;\n        this.animationFrameService = beans.animationFrameService;\n        this.autoWidthCalculator = beans.autoWidthCalculator;\n        this.eventDispatcher = beans.columnEventDispatcher;\n        this.ctrlsService = beans.ctrlsService;\n        this.renderStatusService = beans.renderStatusService as IRenderStatusService;\n    }\n\n    public autoSizeCols(params: {\n        colKeys: ColKey[];\n        skipHeader?: boolean;\n        skipHeaderGroups?: boolean;\n        stopAtGroup?: AgColumnGroup;\n        source?: ColumnEventType;\n    }): void {\n        if (this.columnModel.isShouldQueueResizeOperations()) {\n            this.columnModel.pushResizeOperation(() => this.autoSizeCols(params));\n            return;\n        }\n\n        const { colKeys, skipHeader, skipHeaderGroups, stopAtGroup, source = 'api' } = params;\n        // because of column virtualisation, we can only do this function on columns that are\n        // actually rendered, as non-rendered columns (outside the viewport and not rendered\n        // due to column virtualisation) are not present. this can result in all rendered columns\n        // getting narrowed, which in turn introduces more rendered columns on the RHS which\n        // did not get autosized in the original run, leaving the visible grid with columns on\n        // the LHS sized, but RHS no. so we keep looping through the visible columns until\n        // no more cols are available (rendered) to be resized\n\n        // we autosize after animation frames finish in case any cell renderers need to complete first. this can\n        // happen eg if client code is calling api.autoSizeAllColumns() straight after grid is initialised, but grid\n        // hasn't fully drawn out all the cells yet (due to cell renderers in animation frames).\n        this.animationFrameService.flushAllFrames();\n\n        if (this.timesDelayed < 5 && this.renderStatusService && !this.renderStatusService.areHeaderCellsRendered()) {\n            // This is needed for React, as it doesn't render the headers synchronously all the time.\n            // Added a defensive check to avoid infinite loop in case headers are never rendered.\n            this.timesDelayed++;\n            setTimeout(() => this.autoSizeCols(params));\n            return;\n        }\n        this.timesDelayed = 0;\n\n        // keep track of which cols we have resized in here\n        const columnsAutosized: AgColumn[] = [];\n        // initialise with anything except 0 so that while loop executes at least once\n        let changesThisTimeAround = -1;\n\n        const shouldSkipHeader = skipHeader != null ? skipHeader : this.gos.get('skipHeaderOnAutoSize');\n        const shouldSkipHeaderGroups = skipHeaderGroups != null ? skipHeaderGroups : shouldSkipHeader;\n\n        while (changesThisTimeAround !== 0) {\n            changesThisTimeAround = 0;\n\n            const updatedColumns: AgColumn[] = [];\n\n            colKeys.forEach((key) => {\n                if (!key) {\n                    return;\n                }\n                const column = this.columnModel.getCol(key);\n                if (!column) {\n                    return;\n                }\n\n                // if already autosized, skip it\n                if (columnsAutosized.indexOf(column) >= 0) {\n                    return;\n                }\n\n                // get how wide this col should be\n                const preferredWidth = this.autoWidthCalculator.getPreferredWidthForColumn(column, shouldSkipHeader);\n\n                // preferredWidth = -1 if this col is not on the screen\n                if (preferredWidth > 0) {\n                    const newWidth = this.normaliseColumnWidth(column, preferredWidth);\n                    column.setActualWidth(newWidth, source);\n                    columnsAutosized.push(column);\n                    changesThisTimeAround++;\n                }\n\n                updatedColumns.push(column);\n            });\n\n            if (!updatedColumns.length) {\n                continue;\n            }\n\n            this.visibleColsService.refresh(source);\n        }\n\n        if (!shouldSkipHeaderGroups) {\n            this.autoSizeColumnGroupsByColumns(colKeys, source, stopAtGroup);\n        }\n\n        this.eventDispatcher.columnResized(columnsAutosized, true, 'autosizeColumns');\n    }\n\n    public autoSizeColumn(key: Maybe<ColKey>, source: ColumnEventType, skipHeader?: boolean): void {\n        if (key) {\n            this.autoSizeCols({ colKeys: [key], skipHeader, skipHeaderGroups: true, source });\n        }\n    }\n\n    private autoSizeColumnGroupsByColumns(\n        keys: ColKey[],\n        source: ColumnEventType,\n        stopAtGroup?: AgColumnGroup\n    ): AgColumn[] {\n        const columnGroups: Set<AgColumnGroup> = new Set();\n        const columns = this.columnModel.getColsForKeys(keys);\n\n        columns.forEach((col) => {\n            let parent: AgColumnGroup | null = col.getParent();\n            while (parent && parent != stopAtGroup) {\n                if (!parent.isPadding()) {\n                    columnGroups.add(parent);\n                }\n                parent = parent.getParent();\n            }\n        });\n\n        let headerGroupCtrl: HeaderGroupCellCtrl | undefined;\n\n        const resizedColumns: AgColumn[] = [];\n\n        for (const columnGroup of columnGroups) {\n            for (const headerContainerCtrl of this.ctrlsService.getHeaderRowContainerCtrls()) {\n                headerGroupCtrl = headerContainerCtrl.getHeaderCtrlForColumn(columnGroup);\n                if (headerGroupCtrl) {\n                    break;\n                }\n            }\n            if (headerGroupCtrl) {\n                headerGroupCtrl.resizeLeafColumnsToFit(source);\n            }\n        }\n\n        return resizedColumns;\n    }\n\n    public autoSizeAllColumns(source: ColumnEventType, skipHeader?: boolean): void {\n        if (this.columnModel.isShouldQueueResizeOperations()) {\n            this.columnModel.pushResizeOperation(() => this.autoSizeAllColumns(source, skipHeader));\n            return;\n        }\n\n        const allDisplayedColumns = this.visibleColsService.getAllCols();\n        this.autoSizeCols({ colKeys: allDisplayedColumns, skipHeader, source });\n    }\n\n    // returns the width we can set to this col, taking into consideration min and max widths\n    private normaliseColumnWidth(column: AgColumn, newWidth: number): number {\n        const minWidth = column.getMinWidth();\n\n        if (newWidth < minWidth) {\n            newWidth = minWidth;\n        }\n\n        const maxWidth = column.getMaxWidth();\n        if (column.isGreaterThanMax(newWidth)) {\n            newWidth = maxWidth;\n        }\n\n        return newWidth;\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { ColDef, IAggFunc } from '../entities/colDef';\nimport type { ColumnEventType } from '../events';\nimport type { IAggFuncService } from '../interfaces/iAggFuncService';\nimport { _removeFromArray } from '../utils/array';\nimport { _attrToBoolean, _attrToNumber, _exists, _missingOrEmpty } from '../utils/generic';\nimport type { ColumnState, ModifyColumnsNoEventsCallbacks } from './columnApplyStateService';\nimport type { ColumnEventDispatcher } from './columnEventDispatcher';\nimport type { ColKey, ColumnModel, Maybe } from './columnModel';\nimport type { VisibleColsService } from './visibleColsService';\n\nexport class FuncColsService extends BeanStub implements NamedBean {\n    beanName = 'funcColsService' as const;\n\n    private columnModel: ColumnModel;\n    private eventDispatcher: ColumnEventDispatcher;\n    private aggFuncService?: IAggFuncService;\n    private visibleColsService: VisibleColsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.columnModel = beans.columnModel;\n        this.eventDispatcher = beans.columnEventDispatcher;\n        this.aggFuncService = beans.aggFuncService;\n        this.visibleColsService = beans.visibleColsService;\n    }\n\n    private rowGroupCols: AgColumn[] = [];\n    private valueCols: AgColumn[] = [];\n    private pivotCols: AgColumn[] = [];\n\n    public getModifyColumnsNoEventsCallbacks(): ModifyColumnsNoEventsCallbacks {\n        return {\n            addGroupCol: (column) => this.rowGroupCols.push(column),\n            removeGroupCol: (column) => _removeFromArray(this.rowGroupCols, column),\n            addPivotCol: (column) => this.pivotCols.push(column),\n            removePivotCol: (column) => _removeFromArray(this.pivotCols, column),\n            addValueCol: (column) => this.valueCols.push(column),\n            removeValueCol: (column) => _removeFromArray(this.valueCols, column),\n        };\n    }\n\n    public getSourceColumnsForGroupColumn(groupCol: AgColumn): AgColumn[] | null {\n        const sourceColumnId = groupCol.getColDef().showRowGroup;\n        if (!sourceColumnId) {\n            return null;\n        }\n\n        if (sourceColumnId === true) {\n            return this.rowGroupCols.slice(0);\n        }\n\n        const column = this.columnModel.getColDefCol(sourceColumnId);\n        return column ? [column] : null;\n    }\n\n    public sortRowGroupColumns(compareFn?: (a: AgColumn, b: AgColumn) => number): void {\n        this.rowGroupCols.sort(compareFn);\n    }\n\n    public sortPivotColumns(compareFn?: (a: AgColumn, b: AgColumn) => number): void {\n        this.pivotCols.sort(compareFn);\n    }\n\n    // + rowController\n    public getValueColumns(): AgColumn[] {\n        return this.valueCols ? this.valueCols : [];\n    }\n\n    // + rowController\n    public getPivotColumns(): AgColumn[] {\n        return this.pivotCols ? this.pivotCols : [];\n    }\n\n    // + toolPanel\n    public getRowGroupColumns(): AgColumn[] {\n        return this.rowGroupCols ? this.rowGroupCols : [];\n    }\n\n    public isRowGroupEmpty(): boolean {\n        return _missingOrEmpty(this.rowGroupCols);\n    }\n\n    public setColumnAggFunc(\n        key: Maybe<ColKey>,\n        aggFunc: string | IAggFunc | null | undefined,\n        source: ColumnEventType\n    ): void {\n        if (!key) {\n            return;\n        }\n\n        const column = this.columnModel.getColDefCol(key);\n        if (!column) {\n            return;\n        }\n\n        column.setAggFunc(aggFunc);\n\n        this.eventDispatcher.columnChanged('columnValueChanged', [column], source);\n    }\n\n    public setRowGroupColumns(colKeys: ColKey[], source: ColumnEventType): void {\n        this.setColList(\n            colKeys,\n            this.rowGroupCols,\n            'columnRowGroupChanged',\n            true,\n            true,\n            (added, column) => this.setRowGroupActive(added, column, source),\n            source\n        );\n    }\n\n    private setRowGroupActive(active: boolean, column: AgColumn, source: ColumnEventType): void {\n        if (active === column.isRowGroupActive()) {\n            return;\n        }\n\n        column.setRowGroupActive(active, source);\n\n        if (active && !this.gos.get('suppressRowGroupHidesColumns')) {\n            this.columnModel.setColsVisible([column], false, source);\n        }\n        if (!active && !this.gos.get('suppressMakeColumnVisibleAfterUnGroup')) {\n            this.columnModel.setColsVisible([column], true, source);\n        }\n    }\n\n    public addRowGroupColumns(keys: Maybe<ColKey>[], source: ColumnEventType): void {\n        this.updateColList(\n            keys,\n            this.rowGroupCols,\n            true,\n            true,\n            (column) => this.setRowGroupActive(true, column, source),\n            'columnRowGroupChanged',\n            source\n        );\n    }\n\n    public removeRowGroupColumns(keys: Maybe<ColKey>[] | null, source: ColumnEventType): void {\n        this.updateColList(\n            keys,\n            this.rowGroupCols,\n            false,\n            true,\n            (column) => this.setRowGroupActive(false, column, source),\n            'columnRowGroupChanged',\n            source\n        );\n    }\n\n    public addPivotColumns(keys: ColKey[], source: ColumnEventType): void {\n        this.updateColList(\n            keys,\n            this.pivotCols,\n            true,\n            false,\n            (column) => column.setPivotActive(true, source),\n            'columnPivotChanged',\n            source\n        );\n    }\n\n    public setPivotColumns(colKeys: ColKey[], source: ColumnEventType): void {\n        this.setColList(\n            colKeys,\n            this.pivotCols,\n            'columnPivotChanged',\n            true,\n            false,\n            (added, column) => {\n                column.setPivotActive(added, source);\n            },\n            source\n        );\n    }\n\n    public removePivotColumns(keys: ColKey[], source: ColumnEventType): void {\n        this.updateColList(\n            keys,\n            this.pivotCols,\n            false,\n            false,\n            (column) => column.setPivotActive(false, source),\n            'columnPivotChanged',\n            source\n        );\n    }\n\n    public setValueColumns(colKeys: ColKey[], source: ColumnEventType): void {\n        this.setColList(\n            colKeys,\n            this.valueCols,\n            'columnValueChanged',\n            false,\n            false,\n            (added, column) => this.setValueActive(added, column, source),\n            source\n        );\n    }\n\n    private setValueActive(active: boolean, column: AgColumn, source: ColumnEventType): void {\n        if (active === column.isValueActive()) {\n            return;\n        }\n\n        column.setValueActive(active, source);\n\n        if (active && !column.getAggFunc() && this.aggFuncService) {\n            const initialAggFunc = this.aggFuncService.getDefaultAggFunc(column);\n            column.setAggFunc(initialAggFunc);\n        }\n    }\n\n    public addValueColumns(keys: ColKey[], source: ColumnEventType): void {\n        this.updateColList(\n            keys,\n            this.valueCols,\n            true,\n            false,\n            (column) => this.setValueActive(true, column, source),\n            'columnValueChanged',\n            source\n        );\n    }\n\n    public removeValueColumns(keys: ColKey[], source: ColumnEventType): void {\n        this.updateColList(\n            keys,\n            this.valueCols,\n            false,\n            false,\n            (column) => this.setValueActive(false, column, source),\n            'columnValueChanged',\n            source\n        );\n    }\n\n    public moveRowGroupColumn(fromIndex: number, toIndex: number, source: ColumnEventType): void {\n        if (this.isRowGroupEmpty()) {\n            return;\n        }\n\n        const column = this.rowGroupCols[fromIndex];\n\n        const impactedColumns = this.rowGroupCols.slice(fromIndex, toIndex);\n        this.rowGroupCols.splice(fromIndex, 1);\n        this.rowGroupCols.splice(toIndex, 0, column);\n\n        this.eventDispatcher.rowGroupChanged(impactedColumns, source);\n    }\n\n    private setColList(\n        colKeys: ColKey[],\n        masterList: AgColumn[],\n        eventName: 'columnValueChanged' | 'columnPivotChanged' | 'columnRowGroupChanged',\n        detectOrderChange: boolean,\n        autoGroupsNeedBuilding: boolean,\n        columnCallback: (added: boolean, column: AgColumn) => void,\n        source: ColumnEventType\n    ): void {\n        const gridColumns = this.columnModel.getCols();\n        if (_missingOrEmpty(gridColumns)) {\n            return;\n        }\n\n        const changes: Map<AgColumn, number> = new Map();\n        // store all original cols and their index.\n        masterList.forEach((col, idx) => changes.set(col, idx));\n\n        masterList.length = 0;\n\n        if (_exists(colKeys)) {\n            colKeys.forEach((key) => {\n                const column = this.columnModel.getColDefCol(key);\n                if (column) {\n                    masterList.push(column);\n                }\n            });\n        }\n\n        masterList.forEach((col, idx) => {\n            const oldIndex = changes.get(col);\n            // if the column was not in the list, we add it as it's a change\n            // idx is irrelevant now.\n            if (oldIndex === undefined) {\n                changes.set(col, 0);\n                return;\n            }\n\n            if (detectOrderChange && oldIndex !== idx) {\n                // if we're detecting order changes, and the indexes differ, we retain this as it's changed\n                return;\n            }\n\n            // otherwise remove this col, as it's unchanged.\n            changes.delete(col);\n        });\n\n        const primaryCols = this.columnModel.getColDefCols();\n        (primaryCols || []).forEach((column) => {\n            const added = masterList.indexOf(column) >= 0;\n            columnCallback(added, column);\n        });\n\n        autoGroupsNeedBuilding && this.columnModel.refreshCols();\n\n        this.visibleColsService.refresh(source);\n\n        this.eventDispatcher.columnChanged(eventName, [...changes.keys()], source);\n    }\n\n    private updateColList(\n        keys: Maybe<ColKey>[] | null,\n        masterList: AgColumn[],\n        actionIsAdd: boolean,\n        autoGroupsNeedBuilding: boolean,\n        columnCallback: (column: AgColumn) => void,\n        eventType: string,\n        source: ColumnEventType\n    ) {\n        if (!keys || _missingOrEmpty(keys)) {\n            return;\n        }\n\n        let atLeastOne = false;\n\n        keys.forEach((key) => {\n            if (!key) {\n                return;\n            }\n            const columnToAdd = this.columnModel.getColDefCol(key);\n            if (!columnToAdd) {\n                return;\n            }\n\n            if (actionIsAdd) {\n                if (masterList.indexOf(columnToAdd) >= 0) {\n                    return;\n                }\n                masterList.push(columnToAdd);\n            } else {\n                if (masterList.indexOf(columnToAdd) < 0) {\n                    return;\n                }\n                _removeFromArray(masterList, columnToAdd);\n            }\n\n            columnCallback(columnToAdd);\n            atLeastOne = true;\n        });\n\n        if (!atLeastOne) {\n            return;\n        }\n\n        if (autoGroupsNeedBuilding) {\n            this.columnModel.refreshCols();\n        }\n\n        this.visibleColsService.refresh(source);\n\n        this.eventDispatcher.genericColumnEvent(eventType, masterList, source);\n    }\n\n    public extractCols(source: ColumnEventType, oldProvidedCols: AgColumn[] | undefined): void {\n        this.extractRowGroupCols(source, oldProvidedCols);\n        this.extractPivotCols(source, oldProvidedCols);\n        this.extractValueCols(source, oldProvidedCols);\n    }\n\n    private extractValueCols(source: ColumnEventType, oldProvidedCols: AgColumn[] | undefined): void {\n        this.valueCols = this.extractColsCommon(\n            oldProvidedCols,\n            this.valueCols,\n            (col, flag) => col.setValueActive(flag, source),\n            // aggFunc doesn't have index variant, cos order of value cols doesn't matter, so always return null\n            () => undefined,\n            () => undefined,\n            // aggFunc is a string, so return it's existence\n            (colDef: ColDef) => {\n                const aggFunc = colDef.aggFunc;\n                // null or empty string means clear\n                if (aggFunc === null || aggFunc === '') {\n                    return null;\n                }\n                if (aggFunc === undefined) {\n                    return;\n                }\n\n                return !!aggFunc;\n            },\n            (colDef: ColDef) => {\n                // return false if any of the following: null, undefined, empty string\n                return colDef.initialAggFunc != null && colDef.initialAggFunc != '';\n            }\n        );\n\n        // all new columns added will have aggFunc missing, so set it to what is in the colDef\n        this.valueCols.forEach((col) => {\n            const colDef = col.getColDef();\n            // if aggFunc provided, we always override, as reactive property\n            if (colDef.aggFunc != null && colDef.aggFunc != '') {\n                col.setAggFunc(colDef.aggFunc);\n            } else {\n                // otherwise we use initialAggFunc only if no agg func set - which happens when new column only\n                if (!col.getAggFunc()) {\n                    col.setAggFunc(colDef.initialAggFunc);\n                }\n            }\n        });\n    }\n\n    private extractRowGroupCols(source: ColumnEventType, oldProvidedCols: AgColumn[] | undefined): void {\n        this.rowGroupCols = this.extractColsCommon(\n            oldProvidedCols,\n            this.rowGroupCols,\n            (col, flag) => col.setRowGroupActive(flag, source),\n            (colDef: ColDef) => colDef.rowGroupIndex,\n            (colDef: ColDef) => colDef.initialRowGroupIndex,\n            (colDef: ColDef) => colDef.rowGroup,\n            (colDef: ColDef) => colDef.initialRowGroup\n        );\n    }\n\n    private extractPivotCols(source: ColumnEventType, oldProvidedCols: AgColumn[] | undefined): void {\n        this.pivotCols = this.extractColsCommon(\n            oldProvidedCols,\n            this.pivotCols,\n            (col, flag) => col.setPivotActive(flag, source),\n            (colDef: ColDef) => colDef.pivotIndex,\n            (colDef: ColDef) => colDef.initialPivotIndex,\n            (colDef: ColDef) => colDef.pivot,\n            (colDef: ColDef) => colDef.initialPivot\n        );\n    }\n\n    private extractColsCommon(\n        oldProvidedCols: AgColumn[] = [],\n        previousCols: AgColumn[] = [],\n        setFlagFunc: (col: AgColumn, flag: boolean) => void,\n        getIndexFunc: (colDef: ColDef) => number | null | undefined,\n        getInitialIndexFunc: (colDef: ColDef) => number | null | undefined,\n        getValueFunc: (colDef: ColDef) => boolean | null | undefined,\n        getInitialValueFunc: (colDef: ColDef) => boolean | undefined\n    ): AgColumn[] {\n        const colsWithIndex: AgColumn[] = [];\n        const colsWithValue: AgColumn[] = [];\n\n        const primaryCols = this.columnModel.getColDefCols() || [];\n\n        // go though all cols.\n        // if value, change\n        // if default only, change only if new\n        primaryCols.forEach((col) => {\n            const colIsNew = oldProvidedCols.indexOf(col) < 0;\n            const colDef = col.getColDef();\n\n            const value = _attrToBoolean(getValueFunc(colDef));\n            const initialValue = _attrToBoolean(getInitialValueFunc(colDef));\n            const index = _attrToNumber(getIndexFunc(colDef));\n            const initialIndex = _attrToNumber(getInitialIndexFunc(colDef));\n\n            let include: boolean;\n\n            const valuePresent = value !== undefined;\n            const indexPresent = index !== undefined;\n            const initialValuePresent = initialValue !== undefined;\n            const initialIndexPresent = initialIndex !== undefined;\n\n            if (valuePresent) {\n                include = value!; // boolean value is guaranteed as attrToBoolean() is used above\n            } else if (indexPresent) {\n                if (index === null) {\n                    // if col is new we don't want to use the default / initial if index is set to null. Similarly,\n                    // we don't want to include the property for existing columns, i.e. we want to 'clear' it.\n                    include = false;\n                } else {\n                    // note that 'null >= 0' evaluates to true which means 'rowGroupIndex = null' would enable row\n                    // grouping if the null check didn't exist above.\n                    include = index! >= 0;\n                }\n            } else {\n                if (colIsNew) {\n                    // as no value or index is 'present' we use the default / initial when col is new\n                    if (initialValuePresent) {\n                        include = initialValue!;\n                    } else if (initialIndexPresent) {\n                        include = initialIndex != null && initialIndex >= 0;\n                    } else {\n                        include = false;\n                    }\n                } else {\n                    // otherwise include it if included last time, e.g. if we are extracting row group cols and this col\n                    // is an existing row group col (i.e. it exists in 'previousCols') then we should include it.\n                    include = previousCols.indexOf(col) >= 0;\n                }\n            }\n\n            if (include) {\n                const useIndex = colIsNew ? index != null || initialIndex != null : index != null;\n                useIndex ? colsWithIndex.push(col) : colsWithValue.push(col);\n            }\n        });\n\n        const getIndexForCol = (col: AgColumn): number => {\n            const index = getIndexFunc(col.getColDef());\n            const defaultIndex = getInitialIndexFunc(col.getColDef());\n\n            return index != null ? index : defaultIndex!;\n        };\n\n        // sort cols with index, and add these first\n        colsWithIndex.sort((colA, colB) => {\n            const indexA = getIndexForCol(colA);\n            const indexB = getIndexForCol(colB);\n\n            if (indexA === indexB) {\n                return 0;\n            }\n            if (indexA < indexB) {\n                return -1;\n            }\n\n            return 1;\n        });\n\n        const res: AgColumn[] = ([] as AgColumn[]).concat(colsWithIndex);\n\n        // second add columns that were there before and in the same order as they were before,\n        // so we are preserving order of current grouping of columns that simply have rowGroup=true\n        previousCols.forEach((col) => {\n            if (colsWithValue.indexOf(col) >= 0) {\n                res.push(col);\n            }\n        });\n\n        // lastly put in all remaining cols\n        colsWithValue.forEach((col) => {\n            if (res.indexOf(col) < 0) {\n                res.push(col);\n            }\n        });\n\n        // set flag=false for removed cols\n        previousCols.forEach((col) => {\n            if (res.indexOf(col) < 0) {\n                setFlagFunc(col, false);\n            }\n        });\n        // set flag=true for newly added cols\n        res.forEach((col) => {\n            if (previousCols.indexOf(col) < 0) {\n                setFlagFunc(col, true);\n            }\n        });\n\n        return res;\n    }\n\n    public generateColumnStateForRowGroupAndPivotIndexes(\n        updatedRowGroupColumnState: { [colId: string]: ColumnState },\n        updatedPivotColumnState: { [colId: string]: ColumnState }\n    ): ColumnState[] {\n        // Generally columns should appear in the order they were before. For any new columns, these should appear in the original col def order.\n        // The exception is for columns that were added via `addGroupColumns`. These should appear at the end.\n        // We don't have to worry about full updates, as in this case the arrays are correct, and they won't appear in the updated lists.\n\n        const existingColumnStateUpdates: { [colId: string]: ColumnState } = {};\n\n        const orderColumns = (\n            updatedColumnState: { [colId: string]: ColumnState },\n            colList: AgColumn[],\n            enableProp: 'rowGroup' | 'pivot',\n            initialEnableProp: 'initialRowGroup' | 'initialPivot',\n            indexProp: 'rowGroupIndex' | 'pivotIndex',\n            initialIndexProp: 'initialRowGroupIndex' | 'initialPivotIndex'\n        ) => {\n            const primaryCols = this.columnModel.getColDefCols();\n            if (!colList.length || !primaryCols) {\n                return [];\n            }\n            const updatedColIdArray = Object.keys(updatedColumnState);\n            const updatedColIds = new Set(updatedColIdArray);\n            const newColIds = new Set(updatedColIdArray);\n            const allColIds = new Set(\n                colList\n                    .map((column) => {\n                        const colId = column.getColId();\n                        newColIds.delete(colId);\n                        return colId;\n                    })\n                    .concat(updatedColIdArray)\n            );\n\n            const colIdsInOriginalOrder: string[] = [];\n            const originalOrderMap: { [colId: string]: number } = {};\n            let orderIndex = 0;\n            for (let i = 0; i < primaryCols.length; i++) {\n                const colId = primaryCols[i].getColId();\n                if (allColIds.has(colId)) {\n                    colIdsInOriginalOrder.push(colId);\n                    originalOrderMap[colId] = orderIndex++;\n                }\n            }\n\n            // follow approach in `resetColumnState`\n            let index = 1000;\n            let hasAddedNewCols = false;\n            let lastIndex = 0;\n\n            const processPrecedingNewCols = (colId: string) => {\n                const originalOrderIndex = originalOrderMap[colId];\n                for (let i = lastIndex; i < originalOrderIndex; i++) {\n                    const newColId = colIdsInOriginalOrder[i];\n                    if (newColIds.has(newColId)) {\n                        updatedColumnState[newColId][indexProp] = index++;\n                        newColIds.delete(newColId);\n                    }\n                }\n                lastIndex = originalOrderIndex;\n            };\n\n            colList.forEach((column) => {\n                const colId = column.getColId();\n                if (updatedColIds.has(colId)) {\n                    // New col already exists. Add any other new cols that should be before it.\n                    processPrecedingNewCols(colId);\n                    updatedColumnState[colId][indexProp] = index++;\n                } else {\n                    const colDef = column.getColDef();\n                    const missingIndex =\n                        colDef[indexProp] === null ||\n                        (colDef[indexProp] === undefined && colDef[initialIndexProp] == null);\n                    if (missingIndex) {\n                        if (!hasAddedNewCols) {\n                            const propEnabled =\n                                colDef[enableProp] || (colDef[enableProp] === undefined && colDef[initialEnableProp]);\n                            if (propEnabled) {\n                                processPrecedingNewCols(colId);\n                            } else {\n                                // Reached the first manually added column. Add all the new columns now.\n                                newColIds.forEach((newColId) => {\n                                    // Rather than increment the index, just use the original order index - doesn't need to be contiguous.\n                                    updatedColumnState[newColId][indexProp] = index + originalOrderMap[newColId];\n                                });\n                                index += colIdsInOriginalOrder.length;\n                                hasAddedNewCols = true;\n                            }\n                        }\n                        if (!existingColumnStateUpdates[colId]) {\n                            existingColumnStateUpdates[colId] = { colId };\n                        }\n                        existingColumnStateUpdates[colId][indexProp] = index++;\n                    }\n                }\n            });\n        };\n\n        orderColumns(\n            updatedRowGroupColumnState,\n            this.rowGroupCols,\n            'rowGroup',\n            'initialRowGroup',\n            'rowGroupIndex',\n            'initialRowGroupIndex'\n        );\n        orderColumns(\n            updatedPivotColumnState,\n            this.pivotCols,\n            'pivot',\n            'initialPivot',\n            'pivotIndex',\n            'initialPivotIndex'\n        );\n\n        return Object.values(existingColumnStateUpdates);\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { AgColumn } from '../entities/agColumn';\nimport { DEFAULT_COLUMN_MIN_WIDTH } from '../entities/agColumn';\nimport type { IAggFunc } from '../entities/colDef';\nimport type { ColumnEvent, ColumnEventType } from '../events';\nimport type { ColumnPinnedType } from '../interfaces/iColumn';\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\nimport type { ColumnAnimationService } from '../rendering/columnAnimationService';\nimport type { SortController } from '../sortController';\nimport { _areEqual, _removeFromArray } from '../utils/array';\nimport { _warnOnce } from '../utils/function';\nimport { _exists, _missing, _missingOrEmpty } from '../utils/generic';\nimport type { ColumnEventDispatcher } from './columnEventDispatcher';\nimport type { ColumnGetStateService } from './columnGetStateService';\nimport type { ColumnModel } from './columnModel';\nimport { GROUP_AUTO_COLUMN_ID, getColumnsFromTree } from './columnUtils';\nimport type { FuncColsService } from './funcColsService';\nimport type { PivotResultColsService } from './pivotResultColsService';\nimport type { VisibleColsService } from './visibleColsService';\n\nexport interface ModifyColumnsNoEventsCallbacks {\n    addGroupCol(col: AgColumn): void;\n    removeGroupCol(col: AgColumn): void;\n    addPivotCol(col: AgColumn): void;\n    removePivotCol(col: AgColumn): void;\n    addValueCol(col: AgColumn): void;\n    removeValueCol(col: AgColumn): void;\n}\n\nexport interface ColumnStateParams {\n    /** True if the column is hidden */\n    hide?: boolean | null;\n    /** Width of the column in pixels */\n    width?: number;\n    /** Column's flex if flex is set */\n    flex?: number | null;\n    /** Sort applied to the column */\n    sort?: 'asc' | 'desc' | null;\n    /** The order of the sort, if sorting by many columns */\n    sortIndex?: number | null;\n    /** The aggregation function applied */\n    aggFunc?: string | IAggFunc | null;\n    /** True if pivot active */\n    pivot?: boolean | null;\n    /** The order of the pivot, if pivoting by many columns */\n    pivotIndex?: number | null;\n    /** Set if column is pinned */\n    pinned?: ColumnPinnedType;\n    /** True if row group active */\n    rowGroup?: boolean | null;\n    /** The order of the row group, if grouping by many columns */\n    rowGroupIndex?: number | null;\n}\n\nexport interface ColumnState extends ColumnStateParams {\n    /** ID of the column */\n    colId: string;\n}\n\nexport interface ApplyColumnStateParams {\n    /** The state from `getColumnState` */\n    state?: ColumnState[];\n    /** Whether column order should be applied */\n    applyOrder?: boolean;\n    /** State to apply to columns where state is missing for those columns */\n    defaultState?: ColumnStateParams;\n}\n\nexport class ColumnApplyStateService extends BeanStub implements NamedBean {\n    beanName = 'columnApplyStateService' as const;\n\n    private columnModel: ColumnModel;\n    private eventDispatcher: ColumnEventDispatcher;\n    private sortController: SortController;\n    private columnGetStateService: ColumnGetStateService;\n    private funcColsService: FuncColsService;\n    private visibleColsService: VisibleColsService;\n    private columnAnimationService: ColumnAnimationService;\n    private pivotResultColsService: PivotResultColsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.columnModel = beans.columnModel;\n        this.eventDispatcher = beans.columnEventDispatcher;\n        this.sortController = beans.sortController;\n        this.columnGetStateService = beans.columnGetStateService;\n        this.funcColsService = beans.funcColsService;\n        this.visibleColsService = beans.visibleColsService;\n        this.columnAnimationService = beans.columnAnimationService;\n        this.pivotResultColsService = beans.pivotResultColsService;\n    }\n\n    public applyColumnState(params: ApplyColumnStateParams, source: ColumnEventType): boolean {\n        const providedCols = this.columnModel.getColDefCols() || [];\n        if (_missingOrEmpty(providedCols)) {\n            return false;\n        }\n\n        if (params && params.state && !params.state.forEach) {\n            _warnOnce(\n                'applyColumnState() - the state attribute should be an array, however an array was not found. Please provide an array of items (one for each col you want to change) for state.'\n            );\n            return false;\n        }\n\n        const callbacks = this.funcColsService.getModifyColumnsNoEventsCallbacks();\n\n        const applyStates = (\n            states: ColumnState[],\n            existingColumns: AgColumn[],\n            getById: (id: string) => AgColumn | null\n        ) => {\n            const dispatchEventsFunc = this.compareColumnStatesAndDispatchEvents(source);\n\n            // at the end below, this list will have all columns we got no state for\n            const columnsWithNoState = existingColumns.slice();\n\n            const rowGroupIndexes: { [key: string]: number } = {};\n            const pivotIndexes: { [key: string]: number } = {};\n            const autoColStates: ColumnState[] = [];\n            // If pivoting is modified, these are the states we try to reapply after\n            // the pivot result cols are re-generated\n            const unmatchedAndAutoStates: ColumnState[] = [];\n            let unmatchedCount = 0;\n\n            const previousRowGroupCols = this.funcColsService.getRowGroupColumns().slice();\n            const previousPivotCols = this.funcColsService.getPivotColumns().slice();\n\n            states.forEach((state: ColumnState) => {\n                const colId = state.colId || '';\n\n                // auto group columns are re-created so deferring syncing with ColumnState\n                const isAutoGroupColumn = colId.startsWith(GROUP_AUTO_COLUMN_ID);\n                if (isAutoGroupColumn) {\n                    autoColStates.push(state);\n                    unmatchedAndAutoStates.push(state);\n                    return;\n                }\n\n                const column = getById(colId);\n\n                if (!column) {\n                    unmatchedAndAutoStates.push(state);\n                    unmatchedCount += 1;\n                } else {\n                    this.syncColumnWithStateItem(\n                        column,\n                        state,\n                        params.defaultState,\n                        rowGroupIndexes,\n                        pivotIndexes,\n                        false,\n                        source,\n                        callbacks\n                    );\n                    _removeFromArray(columnsWithNoState, column);\n                }\n            });\n\n            // anything left over, we got no data for, so add in the column as non-value, non-rowGroup and hidden\n            const applyDefaultsFunc = (col: AgColumn) =>\n                this.syncColumnWithStateItem(\n                    col,\n                    null,\n                    params.defaultState,\n                    rowGroupIndexes,\n                    pivotIndexes,\n                    false,\n                    source,\n                    callbacks\n                );\n\n            columnsWithNoState.forEach(applyDefaultsFunc);\n\n            this.funcColsService.sortRowGroupColumns(\n                comparatorByIndex.bind(this, rowGroupIndexes, previousRowGroupCols)\n            );\n            this.funcColsService.sortPivotColumns(comparatorByIndex.bind(this, pivotIndexes, previousPivotCols));\n\n            this.columnModel.refreshCols();\n\n            // sync newly created auto group columns with ColumnState\n            const autoCols = this.columnModel.getAutoCols() || [];\n            const autoColsCopy = autoCols.slice();\n            autoColStates.forEach((stateItem) => {\n                const autoCol = this.columnModel.getAutoCol(stateItem.colId!);\n                _removeFromArray(autoColsCopy, autoCol);\n                this.syncColumnWithStateItem(\n                    autoCol,\n                    stateItem,\n                    params.defaultState,\n                    null,\n                    null,\n                    true,\n                    source,\n                    callbacks\n                );\n            });\n            // autogroup cols with nothing else, apply the default\n            autoColsCopy.forEach(applyDefaultsFunc);\n\n            this.orderLiveColsLikeState(params);\n            this.visibleColsService.refresh(source);\n            this.eventDispatcher.everythingChanged(source);\n\n            dispatchEventsFunc(); // Will trigger pivot result col changes if pivoting modified\n            return { unmatchedAndAutoStates, unmatchedCount };\n        };\n\n        this.columnAnimationService.start();\n\n        // eslint-disable-next-line prefer-const\n        let { unmatchedAndAutoStates, unmatchedCount } = applyStates(params.state || [], providedCols, (id) =>\n            this.columnModel.getColDefCol(id)\n        );\n\n        // If there are still states left over, see if we can apply them to newly generated\n        // pivot result cols or auto cols. Also if defaults exist, ensure they are applied to pivot resul cols\n        if (unmatchedAndAutoStates.length > 0 || _exists(params.defaultState)) {\n            const pivotResultCols = this.pivotResultColsService.getPivotResultCols();\n            const pivotResultColsList = pivotResultCols?.list;\n            unmatchedCount = applyStates(unmatchedAndAutoStates, pivotResultColsList || [], (id) =>\n                this.pivotResultColsService.getPivotResultCol(id)\n            ).unmatchedCount;\n        }\n        this.columnAnimationService.finish();\n\n        return unmatchedCount === 0; // Successful if no states unaccounted for\n    }\n\n    public resetColumnState(source: ColumnEventType): void {\n        const primaryCols = this.columnModel.getColDefCols();\n        if (_missingOrEmpty(primaryCols)) {\n            return;\n        }\n\n        // NOTE = there is one bug here that no customer has noticed - if a column has colDef.lockPosition,\n        // this is ignored  below when ordering the cols. to work, we should always put lockPosition cols first.\n        // As a work around, developers should just put lockPosition columns first in their colDef list.\n\n        // we can't use 'allColumns' as the order might of messed up, so get the primary ordered list\n        const primaryColumnTree = this.columnModel.getColDefColTree();\n        const primaryColumns = getColumnsFromTree(primaryColumnTree);\n        const columnStates: ColumnState[] = [];\n\n        // we start at 1000, so if user has mix of rowGroup and group specified, it will work with both.\n        // eg IF user has ColA.rowGroupIndex=0, ColB.rowGroupIndex=1, ColC.rowGroup=true,\n        // THEN result will be ColA.rowGroupIndex=0, ColB.rowGroupIndex=1, ColC.rowGroup=1000\n        let letRowGroupIndex = 1000;\n        let letPivotIndex = 1000;\n\n        let colsToProcess: AgColumn[] = [];\n        const groupAutoCols = this.columnModel.getAutoCols();\n        if (groupAutoCols) {\n            colsToProcess = colsToProcess.concat(groupAutoCols);\n        }\n\n        if (primaryColumns) {\n            colsToProcess = colsToProcess.concat(primaryColumns);\n        }\n\n        colsToProcess.forEach((column) => {\n            const stateItem = this.getColumnStateFromColDef(column);\n\n            if (_missing(stateItem.rowGroupIndex) && stateItem.rowGroup) {\n                stateItem.rowGroupIndex = letRowGroupIndex++;\n            }\n\n            if (_missing(stateItem.pivotIndex) && stateItem.pivot) {\n                stateItem.pivotIndex = letPivotIndex++;\n            }\n\n            columnStates.push(stateItem);\n        });\n\n        this.applyColumnState({ state: columnStates, applyOrder: true }, source);\n    }\n\n    public getColumnStateFromColDef(column: AgColumn): ColumnState {\n        const getValueOrNull = (a: any, b: any) => (a != null ? a : b != null ? b : null);\n\n        const colDef = column.getColDef();\n        const sort = getValueOrNull(colDef.sort, colDef.initialSort);\n        const sortIndex = getValueOrNull(colDef.sortIndex, colDef.initialSortIndex);\n        const hide = getValueOrNull(colDef.hide, colDef.initialHide);\n        const pinned = getValueOrNull(colDef.pinned, colDef.initialPinned);\n\n        const width = getValueOrNull(colDef.width, colDef.initialWidth);\n        const flex = getValueOrNull(colDef.flex, colDef.initialFlex);\n\n        let rowGroupIndex: number | null | undefined = getValueOrNull(\n            colDef.rowGroupIndex,\n            colDef.initialRowGroupIndex\n        );\n        let rowGroup: boolean | null | undefined = getValueOrNull(colDef.rowGroup, colDef.initialRowGroup);\n\n        if (rowGroupIndex == null && (rowGroup == null || rowGroup == false)) {\n            rowGroupIndex = null;\n            rowGroup = null;\n        }\n\n        let pivotIndex: number | null | undefined = getValueOrNull(colDef.pivotIndex, colDef.initialPivotIndex);\n        let pivot: boolean | null | undefined = getValueOrNull(colDef.pivot, colDef.initialPivot);\n\n        if (pivotIndex == null && (pivot == null || pivot == false)) {\n            pivotIndex = null;\n            pivot = null;\n        }\n\n        const aggFunc = getValueOrNull(colDef.aggFunc, colDef.initialAggFunc);\n\n        return {\n            colId: column.getColId(),\n            sort,\n            sortIndex,\n            hide,\n            pinned,\n            width,\n            flex,\n            rowGroup,\n            rowGroupIndex,\n            pivot,\n            pivotIndex,\n            aggFunc,\n        };\n    }\n\n    private syncColumnWithStateItem(\n        column: AgColumn | null,\n        stateItem: ColumnState | null,\n        defaultState: ColumnStateParams | undefined,\n        rowGroupIndexes: { [key: string]: number } | null,\n        pivotIndexes: { [key: string]: number } | null,\n        autoCol: boolean,\n        source: ColumnEventType,\n        callbacks: ModifyColumnsNoEventsCallbacks\n    ): void {\n        if (!column) {\n            return;\n        }\n\n        const getValue = <U extends keyof ColumnStateParams, S extends keyof ColumnStateParams>(\n            key1: U,\n            key2?: S\n        ): { value1: ColumnStateParams[U] | undefined; value2: ColumnStateParams[S] | undefined } => {\n            const obj: { value1: ColumnStateParams[U] | undefined; value2: ColumnStateParams[S] | undefined } = {\n                value1: undefined,\n                value2: undefined,\n            };\n            let calculated: boolean = false;\n\n            if (stateItem) {\n                if (stateItem[key1] !== undefined) {\n                    obj.value1 = stateItem[key1];\n                    calculated = true;\n                }\n                if (_exists(key2) && stateItem[key2] !== undefined) {\n                    obj.value2 = stateItem[key2];\n                    calculated = true;\n                }\n            }\n\n            if (!calculated && defaultState) {\n                if (defaultState[key1] !== undefined) {\n                    obj.value1 = defaultState[key1];\n                }\n                if (_exists(key2) && defaultState[key2] !== undefined) {\n                    obj.value2 = defaultState[key2];\n                }\n            }\n\n            return obj;\n        };\n\n        // following ensures we are left with boolean true or false, eg converts (null, undefined, 0) all to true\n        const hide = getValue('hide').value1;\n        if (hide !== undefined) {\n            column.setVisible(!hide, source);\n        }\n\n        // sets pinned to 'left' or 'right'\n        const pinned = getValue('pinned').value1;\n        if (pinned !== undefined) {\n            column.setPinned(pinned);\n        }\n\n        // if width provided and valid, use it, otherwise stick with the old width\n        const minColWidth = column.getColDef().minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n\n        // flex\n        const flex = getValue('flex').value1;\n        // if flex is null or a value, set into the col\n        if (flex !== undefined) {\n            column.setFlex(flex);\n        }\n\n        // if flex is null or undefined, fall back to setting width\n        if (flex == null) {\n            // if no flex, then use width if it's there\n            const width = getValue('width').value1;\n            if (width != null) {\n                if (minColWidth != null && width >= minColWidth) {\n                    column.setActualWidth(width, source);\n                }\n            }\n        }\n\n        const sort = getValue('sort').value1;\n        if (sort !== undefined) {\n            if (sort === 'desc' || sort === 'asc') {\n                column.setSort(sort, source);\n            } else {\n                column.setSort(undefined, source);\n            }\n        }\n\n        const sortIndex = getValue('sortIndex').value1;\n        if (sortIndex !== undefined) {\n            column.setSortIndex(sortIndex);\n        }\n\n        // we do not do aggFunc, rowGroup or pivot for auto cols or secondary cols\n        if (autoCol || !column.isPrimary()) {\n            return;\n        }\n\n        const aggFunc = getValue('aggFunc').value1;\n        if (aggFunc !== undefined) {\n            if (typeof aggFunc === 'string') {\n                column.setAggFunc(aggFunc);\n                if (!column.isValueActive()) {\n                    column.setValueActive(true, source);\n                    callbacks.addValueCol(column);\n                }\n            } else {\n                if (_exists(aggFunc)) {\n                    _warnOnce(\n                        'stateItem.aggFunc must be a string. if using your own aggregation ' +\n                            'functions, register the functions first before using them in get/set state. This is because it is ' +\n                            'intended for the column state to be stored and retrieved as simple JSON.'\n                    );\n                }\n                // Note: we do not call column.setAggFunc(null), so that next time we aggregate\n                // by this column (eg drag the column to the agg section int he toolpanel) it will\n                // default to the last aggregation function.\n\n                if (column.isValueActive()) {\n                    column.setValueActive(false, source);\n                    callbacks.removeValueCol(column);\n                }\n            }\n        }\n\n        const { value1: rowGroup, value2: rowGroupIndex } = getValue('rowGroup', 'rowGroupIndex');\n        if (rowGroup !== undefined || rowGroupIndex !== undefined) {\n            if (typeof rowGroupIndex === 'number' || rowGroup) {\n                if (!column.isRowGroupActive()) {\n                    column.setRowGroupActive(true, source);\n                    callbacks.addGroupCol(column);\n                }\n                if (rowGroupIndexes && typeof rowGroupIndex === 'number') {\n                    rowGroupIndexes[column.getId()] = rowGroupIndex;\n                }\n            } else {\n                if (column.isRowGroupActive()) {\n                    column.setRowGroupActive(false, source);\n                    callbacks.removeGroupCol(column);\n                }\n            }\n        }\n\n        const { value1: pivot, value2: pivotIndex } = getValue('pivot', 'pivotIndex');\n        if (pivot !== undefined || pivotIndex !== undefined) {\n            if (typeof pivotIndex === 'number' || pivot) {\n                if (!column.isPivotActive()) {\n                    column.setPivotActive(true, source);\n                    callbacks.addPivotCol(column);\n                }\n                if (pivotIndexes && typeof pivotIndex === 'number') {\n                    pivotIndexes[column.getId()] = pivotIndex;\n                }\n            } else {\n                if (column.isPivotActive()) {\n                    column.setPivotActive(false, source);\n                    callbacks.removePivotCol(column);\n                }\n            }\n        }\n    }\n\n    private orderLiveColsLikeState(params: ApplyColumnStateParams): void {\n        if (!params.applyOrder || !params.state) {\n            return;\n        }\n        const colIds: string[] = [];\n        params.state.forEach((item) => {\n            if (item.colId != null) {\n                colIds.push(item.colId);\n            }\n        });\n        this.columnModel.sortColsLikeKeys(colIds);\n    }\n\n    // calculates what events to fire between column state changes. gets used when:\n    // a) apply column state\n    // b) apply new column definitions (so changes from old cols)\n    public compareColumnStatesAndDispatchEvents(source: ColumnEventType): () => void {\n        const startState = {\n            rowGroupColumns: this.funcColsService.getRowGroupColumns().slice(),\n            pivotColumns: this.funcColsService.getPivotColumns().slice(),\n            valueColumns: this.funcColsService.getValueColumns().slice(),\n        };\n\n        const columnStateBefore = this.columnGetStateService.getColumnState();\n        const columnStateBeforeMap: { [colId: string]: ColumnState } = {};\n\n        columnStateBefore.forEach((col) => {\n            columnStateBeforeMap[col.colId!] = col;\n        });\n\n        return () => {\n            const colsForState = this.columnModel.getAllCols();\n\n            // dispatches generic ColumnEvents where all columns are returned rather than what has changed\n            const dispatchWhenListsDifferent = (\n                eventType: string,\n                colsBefore: AgColumn[],\n                colsAfter: AgColumn[],\n                idMapper: (column: AgColumn) => string\n            ) => {\n                const beforeList = colsBefore.map(idMapper);\n                const afterList = colsAfter.map(idMapper);\n                const unchanged = _areEqual(beforeList, afterList);\n\n                if (unchanged) {\n                    return;\n                }\n\n                const changes = new Set(colsBefore);\n                colsAfter.forEach((id) => {\n                    // if the first list had it, delete it, as it's unchanged.\n                    if (!changes.delete(id)) {\n                        // if the second list has it, and first doesn't, add it.\n                        changes.add(id);\n                    }\n                });\n\n                const changesArr = [...changes];\n\n                const event: WithoutGridCommon<ColumnEvent> = {\n                    type: eventType,\n                    columns: changesArr,\n                    column: changesArr.length === 1 ? changesArr[0] : null,\n                    source: source,\n                };\n\n                this.eventService.dispatchEvent(event);\n            };\n\n            // determines which columns have changed according to supplied predicate\n            const getChangedColumns = (changedPredicate: (cs: ColumnState, c: AgColumn) => boolean): AgColumn[] => {\n                const changedColumns: AgColumn[] = [];\n\n                colsForState.forEach((column) => {\n                    const colStateBefore = columnStateBeforeMap[column.getColId()];\n                    if (colStateBefore && changedPredicate(colStateBefore, column)) {\n                        changedColumns.push(column);\n                    }\n                });\n\n                return changedColumns;\n            };\n\n            const columnIdMapper = (c: AgColumn) => c.getColId();\n\n            dispatchWhenListsDifferent(\n                'columnRowGroupChanged',\n                startState.rowGroupColumns,\n                this.funcColsService.getRowGroupColumns(),\n                columnIdMapper\n            );\n\n            dispatchWhenListsDifferent(\n                'columnPivotChanged',\n                startState.pivotColumns,\n                this.funcColsService.getPivotColumns(),\n                columnIdMapper\n            );\n\n            const valueChangePredicate = (cs: ColumnState, c: AgColumn) => {\n                const oldActive = cs.aggFunc != null;\n\n                const activeChanged = oldActive != c.isValueActive();\n                // we only check aggFunc if the agg is active\n                const aggFuncChanged = oldActive && cs.aggFunc != c.getAggFunc();\n\n                return activeChanged || aggFuncChanged;\n            };\n            const changedValues = getChangedColumns(valueChangePredicate);\n            if (changedValues.length > 0) {\n                this.eventDispatcher.columnChanged('columnValueChanged', changedValues, source);\n            }\n\n            const resizeChangePredicate = (cs: ColumnState, c: AgColumn) => cs.width != c.getActualWidth();\n            this.eventDispatcher.columnResized(getChangedColumns(resizeChangePredicate), true, source);\n\n            const pinnedChangePredicate = (cs: ColumnState, c: AgColumn) => cs.pinned != c.getPinned();\n            this.eventDispatcher.columnPinned(getChangedColumns(pinnedChangePredicate), source);\n\n            const visibilityChangePredicate = (cs: ColumnState, c: AgColumn) => cs.hide == c.isVisible();\n            this.eventDispatcher.columnVisible(getChangedColumns(visibilityChangePredicate), source);\n\n            const sortChangePredicate = (cs: ColumnState, c: AgColumn) =>\n                cs.sort != c.getSort() || cs.sortIndex != c.getSortIndex();\n            const changedColumns = getChangedColumns(sortChangePredicate);\n            if (changedColumns.length > 0) {\n                this.sortController.dispatchSortChangedEvents(source, changedColumns);\n            }\n\n            // special handling for moved column events\n            this.normaliseColumnMovedEventForColumnState(columnStateBefore, source);\n        };\n    }\n\n    private normaliseColumnMovedEventForColumnState(colStateBefore: ColumnState[], source: ColumnEventType) {\n        // we are only interested in columns that were both present and visible before and after\n\n        const colStateAfter = this.columnGetStateService.getColumnState();\n\n        const colStateAfterMapped: { [id: string]: ColumnState } = {};\n        colStateAfter.forEach((s) => (colStateAfterMapped[s.colId!] = s));\n\n        // get id's of cols in both before and after lists\n        const colsIntersectIds: { [id: string]: boolean } = {};\n        colStateBefore.forEach((s) => {\n            if (colStateAfterMapped[s.colId!]) {\n                colsIntersectIds[s.colId!] = true;\n            }\n        });\n\n        // filter state lists, so we only have cols that were present before and after\n        const beforeFiltered = colStateBefore.filter((c) => colsIntersectIds[c.colId!]);\n        const afterFiltered = colStateAfter.filter((c) => colsIntersectIds[c.colId!]);\n\n        // see if any cols are in a different location\n        const movedColumns: AgColumn[] = [];\n\n        afterFiltered!.forEach((csAfter: ColumnState, index: number) => {\n            const csBefore = beforeFiltered && beforeFiltered[index];\n            if (csBefore && csBefore.colId !== csAfter.colId) {\n                const gridCol = this.columnModel.getCol(csBefore.colId!);\n                if (gridCol) {\n                    movedColumns.push(gridCol);\n                }\n            }\n        });\n\n        if (!movedColumns.length) {\n            return;\n        }\n\n        this.eventDispatcher.columnMoved({ movedColumns, source, finished: true });\n    }\n}\n\n// sort the lists according to the indexes that were provided\nconst comparatorByIndex = (indexes: { [key: string]: number }, oldList: AgColumn[], colA: AgColumn, colB: AgColumn) => {\n    const indexA = indexes[colA.getId()];\n    const indexB = indexes[colB.getId()];\n\n    const aHasIndex = indexA != null;\n    const bHasIndex = indexB != null;\n\n    if (aHasIndex && bHasIndex) {\n        // both a and b are new cols with index, so sort on index\n        return indexA - indexB;\n    }\n\n    if (aHasIndex) {\n        // a has an index, so it should be before a\n        return -1;\n    }\n\n    if (bHasIndex) {\n        // b has an index, so it should be before a\n        return 1;\n    }\n\n    const oldIndexA = oldList.indexOf(colA);\n    const oldIndexB = oldList.indexOf(colB);\n\n    const aHasOldIndex = oldIndexA >= 0;\n    const bHasOldIndex = oldIndexB >= 0;\n\n    if (aHasOldIndex && bHasOldIndex) {\n        // both a and b are old cols, so sort based on last order\n        return oldIndexA - oldIndexB;\n    }\n\n    if (aHasOldIndex) {\n        // a is old, b is new, so b is first\n        return -1;\n    }\n\n    // this bit does matter, means both are new cols\n    // but without index or that b is old and a is new\n    return 1;\n};\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { AgColumn } from '../entities/agColumn';\nimport { isProvidedColumnGroup } from '../entities/agProvidedColumnGroup';\nimport type { ColDef } from '../entities/colDef';\nimport type { ColumnEventType } from '../events';\nimport type { ColumnAnimationService } from '../rendering/columnAnimationService';\nimport { _moveInArray } from '../utils/array';\nimport { _warnOnce } from '../utils/function';\nimport type { ColumnEventDispatcher } from './columnEventDispatcher';\nimport { depthFirstOriginalTreeSearch } from './columnFactory';\nimport type { ColKey, ColumnModel } from './columnModel';\n\nexport class ColumnMoveService extends BeanStub implements NamedBean {\n    beanName = 'columnMoveService' as const;\n\n    private columnModel: ColumnModel;\n    private columnAnimationService: ColumnAnimationService;\n    private eventDispatcher: ColumnEventDispatcher;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.columnModel = beans.columnModel;\n        this.columnAnimationService = beans.columnAnimationService;\n        this.eventDispatcher = beans.columnEventDispatcher;\n    }\n\n    public moveColumnByIndex(fromIndex: number, toIndex: number, source: ColumnEventType): void {\n        const gridColumns = this.columnModel.getCols();\n        if (!gridColumns) {\n            return;\n        }\n\n        const column = gridColumns[fromIndex];\n        this.moveColumns([column], toIndex, source);\n    }\n\n    public moveColumns(\n        columnsToMoveKeys: ColKey[],\n        toIndex: number,\n        source: ColumnEventType,\n        finished: boolean = true\n    ): void {\n        const gridColumns = this.columnModel.getCols();\n        if (!gridColumns) {\n            return;\n        }\n\n        this.columnAnimationService.start();\n\n        if (toIndex > gridColumns.length - columnsToMoveKeys.length) {\n            _warnOnce('tried to insert columns in invalid location, toIndex = ', toIndex);\n            _warnOnce('remember that you should not count the moving columns when calculating the new index');\n            return;\n        }\n\n        // we want to pull all the columns out first and put them into an ordered list\n        const movedColumns = this.columnModel.getColsForKeys(columnsToMoveKeys);\n        const failedRules = !this.doesMovePassRules(movedColumns, toIndex);\n\n        if (failedRules) {\n            return;\n        }\n\n        this.columnModel.moveInCols(movedColumns, toIndex, source);\n\n        this.eventDispatcher.columnMoved({ movedColumns, source, toIndex, finished });\n        this.columnAnimationService.finish();\n    }\n\n    private doesMovePassRules(columnsToMove: AgColumn[], toIndex: number): boolean {\n        // make a copy of what the grid columns would look like after the move\n        const proposedColumnOrder = this.getProposedColumnOrder(columnsToMove, toIndex);\n        return this.doesOrderPassRules(proposedColumnOrder);\n    }\n\n    public doesOrderPassRules(gridOrder: AgColumn[]) {\n        if (!this.doesMovePassMarryChildren(gridOrder)) {\n            return false;\n        }\n        if (!this.doesMovePassLockedPositions(gridOrder)) {\n            return false;\n        }\n        return true;\n    }\n\n    public getProposedColumnOrder(columnsToMove: AgColumn[], toIndex: number): AgColumn[] {\n        const gridColumns = this.columnModel.getCols();\n        const proposedColumnOrder = gridColumns.slice();\n        _moveInArray(proposedColumnOrder, columnsToMove as AgColumn[], toIndex);\n        return proposedColumnOrder;\n    }\n\n    private doesMovePassLockedPositions(proposedColumnOrder: AgColumn[]): boolean {\n        // Placement is a number indicating 'left' 'center' or 'right' as 0 1 2\n        let lastPlacement = 0;\n        let rulePassed = true;\n        const lockPositionToPlacement = (position: ColDef['lockPosition']) => {\n            if (!position) {\n                // false or undefined\n                return 1;\n            }\n            if (position === true) {\n                return 0;\n            }\n            return position === 'left' ? 0 : 2; // Otherwise 'right'\n        };\n\n        proposedColumnOrder.forEach((col) => {\n            const placement = lockPositionToPlacement(col.getColDef().lockPosition);\n            if (placement < lastPlacement) {\n                // If placement goes down, we're not in the correct order\n                rulePassed = false;\n            }\n            lastPlacement = placement;\n        });\n\n        return rulePassed;\n    }\n\n    public doesMovePassMarryChildren(allColumnsCopy: AgColumn[]): boolean {\n        let rulePassed = true;\n        const gridBalancedTree = this.columnModel.getColTree();\n\n        depthFirstOriginalTreeSearch(null, gridBalancedTree, (child) => {\n            if (!isProvidedColumnGroup(child)) {\n                return;\n            }\n\n            const columnGroup = child;\n            const colGroupDef = columnGroup.getColGroupDef();\n            const marryChildren = colGroupDef && colGroupDef.marryChildren;\n\n            if (!marryChildren) {\n                return;\n            }\n\n            const newIndexes: number[] = [];\n            columnGroup.getLeafColumns().forEach((col) => {\n                const newColIndex = allColumnsCopy.indexOf(col);\n                newIndexes.push(newColIndex);\n            });\n\n            // eslint-disable-next-line prefer-spread\n            const maxIndex = Math.max.apply(Math, newIndexes);\n            // eslint-disable-next-line prefer-spread\n            const minIndex = Math.min.apply(Math, newIndexes);\n\n            // spread is how far the first column in this group is away from the last column\n            const spread = maxIndex - minIndex;\n            const maxSpread = columnGroup.getLeafColumns().length - 1;\n\n            // if the columns\n            if (spread > maxSpread) {\n                rulePassed = false;\n            }\n\n            // console.log(`maxIndex = ${maxIndex}, minIndex = ${minIndex}, spread = ${spread}, maxSpread = ${maxSpread}, fail = ${spread > (count-1)}`)\n            // console.log(allColumnsCopy.map( col => col.getColDef().field).join(','));\n        });\n\n        return rulePassed;\n    }\n\n    public placeLockedColumns(cols: AgColumn[]): AgColumn[] {\n        const left: AgColumn[] = [];\n        const normal: AgColumn[] = [];\n        const right: AgColumn[] = [];\n        cols.forEach((col: AgColumn) => {\n            const position = col.getColDef().lockPosition;\n            if (position === 'right') {\n                right.push(col);\n            } else if (position === 'left' || position === true) {\n                left.push(col);\n            } else {\n                normal.push(col);\n            }\n        });\n\n        const isRtl = this.gos.get('enableRtl');\n        if (isRtl) {\n            return [...right, ...normal, ...left];\n        }\n\n        return [...left, ...normal, ...right];\n    }\n}\n", "const reUnescapedHtml = /[&<>\"']/g;\n\n/**\n * HTML Escapes.\n */\nconst HTML_ESCAPES: { [id: string]: string } = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n};\n\n/**\n * It encodes any string in UTF-8 format\n * taken from https://github.com/mathiasbynens/utf8.js\n * @param {string} s\n * @returns {string}\n */\nexport function _utf8_encode(s: string | null): string {\n    const stringFromCharCode = String.fromCharCode;\n\n    function ucs2decode(string: string | null): number[] {\n        const output: number[] = [];\n\n        if (!string) {\n            return [];\n        }\n\n        const len = string.length;\n\n        let counter = 0;\n        let value;\n        let extra;\n\n        while (counter < len) {\n            value = string.charCodeAt(counter++);\n            if (value >= 0xd800 && value <= 0xdbff && counter < len) {\n                // high surrogate, and there is a next character\n                extra = string.charCodeAt(counter++);\n                if ((extra & 0xfc00) == 0xdc00) {\n                    // low surrogate\n                    output.push(((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000);\n                } else {\n                    // unmatched surrogate; only append this code unit, in case the next\n                    // code unit is the high surrogate of a surrogate pair\n                    output.push(value);\n                    counter--;\n                }\n            } else {\n                output.push(value);\n            }\n        }\n        return output;\n    }\n\n    function checkScalarValue(point: number) {\n        if (point >= 0xd800 && point <= 0xdfff) {\n            throw Error('Lone surrogate U+' + point.toString(16).toUpperCase() + ' is not a scalar value');\n        }\n    }\n\n    function createByte(point: number, shift: number) {\n        return stringFromCharCode(((point >> shift) & 0x3f) | 0x80);\n    }\n\n    function encodeCodePoint(point: number): string {\n        if ((point & 0xffffff80) == 0) {\n            // 1-byte sequence\n            return stringFromCharCode(point);\n        }\n\n        let symbol = '';\n\n        if ((point & 0xfffff800) == 0) {\n            // 2-byte sequence\n            symbol = stringFromCharCode(((point >> 6) & 0x1f) | 0xc0);\n        } else if ((point & 0xffff0000) == 0) {\n            // 3-byte sequence\n            checkScalarValue(point);\n            symbol = stringFromCharCode(((point >> 12) & 0x0f) | 0xe0);\n            symbol += createByte(point, 6);\n        } else if ((point & 0xffe00000) == 0) {\n            // 4-byte sequence\n            symbol = stringFromCharCode(((point >> 18) & 0x07) | 0xf0);\n            symbol += createByte(point, 12);\n            symbol += createByte(point, 6);\n        }\n        symbol += stringFromCharCode((point & 0x3f) | 0x80);\n        return symbol;\n    }\n\n    const codePoints = ucs2decode(s);\n    const length = codePoints.length;\n    let index = -1;\n    let codePoint;\n    let byteString = '';\n\n    while (++index < length) {\n        codePoint = codePoints[index];\n        byteString += encodeCodePoint(codePoint);\n    }\n\n    return byteString;\n}\n\nexport function _capitalise(str: string): string {\n    return str[0].toUpperCase() + str.substring(1).toLowerCase();\n}\n\nexport function _escapeString(toEscape?: string | null, skipEscapingHtmlChars?: boolean): string | null {\n    if (toEscape == null) {\n        return null;\n    }\n\n    // we call toString() twice, in case value is an object, where user provides\n    // a toString() method, and first call to toString() returns back something other\n    // than a string (eg a number to render)\n    const stringResult = toEscape.toString().toString();\n\n    if (skipEscapingHtmlChars) {\n        return stringResult;\n    }\n\n    // in react we don't need to escape html characters, as it's done by the framework\n    return stringResult.replace(reUnescapedHtml, (chr) => HTML_ESCAPES[chr]);\n}\n\n/**\n * Converts a camelCase string into startCase\n * @param {string} camelCase\n * @return {string}\n */\nexport function _camelCaseToHumanText(camelCase: string | undefined): string | null {\n    if (!camelCase || camelCase == null) {\n        return null;\n    }\n\n    // either split on a lowercase followed by uppercase ie  asHereTo -> as Here To\n    const rex = /([a-z])([A-Z])/g;\n    // or starts with uppercase and we take all expect the last which is assumed to be part of next word if followed by lowercase HEREToThere -> HERE To There\n    const rexCaps = /([A-Z]+)([A-Z])([a-z])/g;\n    const words: string[] = camelCase.replace(rex, '$1 $2').replace(rexCaps, '$1 $2$3').replace(/\\./g, ' ').split(' ');\n\n    return words\n        .map((word) => word.substring(0, 1).toUpperCase() + (word.length > 1 ? word.substring(1, word.length) : ''))\n        .join(' ');\n}\n\n/**\n * Converts a camelCase string into hyphenated string\n * @param {string} camelCase\n * @return {string}\n */\nexport function _camelCaseToHyphenated(camelCase: string): string {\n    return camelCase.replace(/[A-Z]/g, (s) => `-${s.toLocaleLowerCase()}`);\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { AgColumnGroup } from '../entities/agColumnGroup';\nimport type { AgProvidedColumnGroup } from '../entities/agProvidedColumnGroup';\nimport type { AbstractColDef, ColDef, HeaderLocation, HeaderValueGetterParams, IAggFunc } from '../entities/colDef';\nimport { _warnOnce } from '../utils/function';\nimport { _exists } from '../utils/generic';\nimport { _camelCaseToHumanText } from '../utils/string';\nimport type { ExpressionService } from '../valueService/expressionService';\nimport type { ColumnModel } from './columnModel';\nimport type { FuncColsService } from './funcColsService';\n\nexport class ColumnNameService extends BeanStub implements NamedBean {\n    beanName = 'columnNameService' as const;\n\n    private expressionService: ExpressionService;\n    private funcColsService: FuncColsService;\n    private columnModel: ColumnModel;\n\n    public wireBeans(beans: BeanCollection) {\n        this.expressionService = beans.expressionService;\n        this.funcColsService = beans.funcColsService;\n        this.columnModel = beans.columnModel;\n    }\n\n    public getDisplayNameForColumn(\n        column: AgColumn | null,\n        location: HeaderLocation,\n        includeAggFunc = false\n    ): string | null {\n        if (!column) {\n            return null;\n        }\n\n        const headerName: string | null = this.getHeaderName(column.getColDef(), column, null, null, location);\n\n        if (includeAggFunc) {\n            return this.wrapHeaderNameWithAggFunc(column, headerName);\n        }\n\n        return headerName;\n    }\n\n    public getDisplayNameForProvidedColumnGroup(\n        columnGroup: AgColumnGroup | null,\n        providedColumnGroup: AgProvidedColumnGroup | null,\n        location: HeaderLocation\n    ): string | null {\n        const colGroupDef = providedColumnGroup ? providedColumnGroup.getColGroupDef() : null;\n\n        if (colGroupDef) {\n            return this.getHeaderName(colGroupDef, null, columnGroup, providedColumnGroup, location);\n        }\n\n        return null;\n    }\n\n    public getDisplayNameForColumnGroup(columnGroup: AgColumnGroup, location: HeaderLocation): string | null {\n        return this.getDisplayNameForProvidedColumnGroup(columnGroup, columnGroup.getProvidedColumnGroup(), location);\n    }\n\n    // location is where the column is going to appear, ie who is calling us\n    private getHeaderName(\n        colDef: AbstractColDef,\n        column: AgColumn | null,\n        columnGroup: AgColumnGroup | null,\n        providedColumnGroup: AgProvidedColumnGroup | null,\n        location: HeaderLocation\n    ): string | null {\n        const headerValueGetter = colDef.headerValueGetter;\n\n        if (headerValueGetter) {\n            const params: HeaderValueGetterParams = this.gos.addGridCommonParams({\n                colDef: colDef,\n                column: column,\n                columnGroup: columnGroup,\n                providedColumnGroup: providedColumnGroup,\n                location: location,\n            });\n\n            if (typeof headerValueGetter === 'function') {\n                // valueGetter is a function, so just call it\n                return headerValueGetter(params);\n            } else if (typeof headerValueGetter === 'string') {\n                // valueGetter is an expression, so execute the expression\n                return this.expressionService.evaluate(headerValueGetter, params);\n            }\n            _warnOnce('headerValueGetter must be a function or a string');\n            return '';\n        } else if (colDef.headerName != null) {\n            return colDef.headerName;\n        } else if ((colDef as ColDef).field) {\n            return _camelCaseToHumanText((colDef as ColDef).field);\n        }\n\n        return '';\n    }\n\n    private wrapHeaderNameWithAggFunc(column: AgColumn, headerName: string | null): string | null {\n        if (this.gos.get('suppressAggFuncInHeader')) {\n            return headerName;\n        }\n\n        // only columns with aggregation active can have aggregations\n        const pivotValueColumn = column.getColDef().pivotValueColumn;\n        const pivotActiveOnThisColumn = _exists(pivotValueColumn);\n        let aggFunc: string | IAggFunc | null | undefined = null;\n        let aggFuncFound: boolean;\n\n        // otherwise we have a measure that is active, and we are doing aggregation on it\n        if (pivotActiveOnThisColumn) {\n            const valueColumns = this.funcColsService.getValueColumns();\n            const isCollapsedHeaderEnabled =\n                this.gos.get('removePivotHeaderRowWhenSingleValueColumn') && valueColumns.length === 1;\n            const isTotalColumn = column.getColDef().pivotTotalColumnIds !== undefined;\n            if (isCollapsedHeaderEnabled && !isTotalColumn) {\n                return headerName; // Skip decorating the header - in this case the label is the pivot key, not the value col\n            }\n            aggFunc = pivotValueColumn ? pivotValueColumn.getAggFunc() : null;\n            aggFuncFound = true;\n        } else {\n            const measureActive = column.isValueActive();\n            const aggregationPresent = this.columnModel.isPivotMode() || !this.funcColsService.isRowGroupEmpty();\n\n            if (measureActive && aggregationPresent) {\n                aggFunc = column.getAggFunc();\n                aggFuncFound = true;\n            } else {\n                aggFuncFound = false;\n            }\n        }\n\n        if (aggFuncFound) {\n            const aggFuncString = typeof aggFunc === 'string' ? aggFunc : 'func';\n            const localeTextFunc = this.localeService.getLocaleTextFunc();\n            const aggFuncStringTranslated = localeTextFunc(aggFuncString, aggFuncString);\n            return `${aggFuncStringTranslated}(${headerName})`;\n        }\n\n        return headerName;\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection, Context } from '../context/context';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { AgProvidedColumnGroup } from '../entities/agProvidedColumnGroup';\nimport type { AbstractColDef, ColDef, ColGroupDef } from '../entities/colDef';\nimport type { ColumnEventType } from '../events';\nimport { _areEqual } from '../utils/array';\nimport { _exists } from '../utils/generic';\nimport type { ColumnFactory } from './columnFactory';\nimport type { ColKey, ColumnCollections, ColumnModel } from './columnModel';\nimport { destroyColumnTree, getColumnsFromTree } from './columnUtils';\nimport type { VisibleColsService } from './visibleColsService';\n\nexport class PivotResultColsService extends BeanStub implements NamedBean {\n    beanName = 'pivotResultColsService' as const;\n\n    private context: Context;\n    private columnModel: ColumnModel;\n    private columnFactory: ColumnFactory;\n    private visibleColsService: VisibleColsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.context = beans.context;\n        this.columnModel = beans.columnModel;\n        this.columnFactory = beans.columnFactory;\n        this.visibleColsService = beans.visibleColsService;\n    }\n\n    // if pivoting, these are the generated columns as a result of the pivot\n    private pivotResultCols: ColumnCollections | null;\n\n    // private pivotResultColTree: IProvidedColumn[] | null;\n    // private pivotResultColTreeDept = -1;\n    // private pivotResultCols_old: Column[] | null;\n    // private pivotResultColsMap: { [id: string]: Column };\n\n    // Saved when pivot is disabled, available to re-use when pivot is restored\n    private previousPivotResultCols: (AgColumn | AgProvidedColumnGroup)[] | null;\n\n    public override destroy(): void {\n        destroyColumnTree(this.context, this.pivotResultCols?.tree);\n        super.destroy();\n    }\n\n    public isPivotResultColsPresent(): boolean {\n        return this.pivotResultCols != null;\n    }\n\n    public lookupPivotResultCol(pivotKeys: string[], valueColKey: ColKey): AgColumn | null {\n        if (this.pivotResultCols == null) {\n            return null;\n        }\n\n        const valueColumnToFind = this.columnModel.getColDefCol(valueColKey);\n\n        let foundColumn: AgColumn | null = null;\n\n        this.pivotResultCols.list.forEach((column) => {\n            const thisPivotKeys = column.getColDef().pivotKeys;\n            const pivotValueColumn = column.getColDef().pivotValueColumn;\n\n            const pivotKeyMatches = _areEqual(thisPivotKeys, pivotKeys);\n            const pivotValueMatches = pivotValueColumn === valueColumnToFind;\n\n            if (pivotKeyMatches && pivotValueMatches) {\n                foundColumn = column;\n            }\n        });\n\n        return foundColumn;\n    }\n\n    public getPivotResultCols(): ColumnCollections | null {\n        return this.pivotResultCols;\n    }\n\n    public getPivotResultCol(key: ColKey): AgColumn | null {\n        if (!this.pivotResultCols) {\n            return null;\n        }\n        return this.columnModel.getColFromCollection(key, this.pivotResultCols);\n    }\n\n    public setPivotResultCols(colDefs: (ColDef | ColGroupDef)[] | null, source: ColumnEventType): void {\n        if (!this.columnModel.isReady()) {\n            return;\n        }\n\n        // if no cols passed, and we had no cols anyway, then do nothing\n        if (colDefs == null && this.pivotResultCols == null) {\n            return;\n        }\n\n        if (colDefs) {\n            this.processPivotResultColDef(colDefs);\n            const balancedTreeResult = this.columnFactory.createColumnTree(\n                colDefs,\n                false,\n                this.pivotResultCols?.tree || this.previousPivotResultCols || undefined,\n                source\n            );\n            destroyColumnTree(this.context, this.pivotResultCols?.tree, balancedTreeResult.columnTree);\n\n            const tree = balancedTreeResult.columnTree;\n            const treeDepth = balancedTreeResult.treeDept;\n            const list = getColumnsFromTree(tree);\n            const map = {};\n\n            this.pivotResultCols = { tree, treeDepth, list, map };\n            this.pivotResultCols.list.forEach((col) => (this.pivotResultCols!.map[col.getId()] = col));\n            this.previousPivotResultCols = null;\n        } else {\n            this.previousPivotResultCols = this.pivotResultCols ? this.pivotResultCols.tree : null;\n            this.pivotResultCols = null;\n        }\n\n        this.columnModel.refreshCols();\n        this.visibleColsService.refresh(source);\n    }\n\n    private processPivotResultColDef(colDefs: (ColDef | ColGroupDef)[] | null) {\n        const columnCallback = this.gos.get('processPivotResultColDef');\n        const groupCallback = this.gos.get('processPivotResultColGroupDef');\n\n        if (!columnCallback && !groupCallback) {\n            return undefined;\n        }\n\n        const searchForColDefs = (colDefs2: (ColDef | ColGroupDef)[]): void => {\n            colDefs2.forEach((abstractColDef: AbstractColDef) => {\n                const isGroup = _exists((abstractColDef as any).children);\n                if (isGroup) {\n                    const colGroupDef = abstractColDef as ColGroupDef;\n                    if (groupCallback) {\n                        groupCallback(colGroupDef);\n                    }\n                    searchForColDefs(colGroupDef.children);\n                } else {\n                    const colDef = abstractColDef as ColDef;\n                    if (columnCallback) {\n                        columnCallback(colDef);\n                    }\n                }\n            });\n        };\n\n        if (colDefs) {\n            searchForColDefs(colDefs);\n        }\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { CtrlsService } from '../ctrlsService';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { ColumnEventType } from '../events';\nimport type { Column } from '../interfaces/iColumn';\nimport { _removeFromArray, _removeFromUnorderedArray } from '../utils/array';\nimport { _errorOnce } from '../utils/function';\nimport { _exists } from '../utils/generic';\nimport type { ColumnEventDispatcher } from './columnEventDispatcher';\nimport type { ColKey, ColumnModel } from './columnModel';\nimport { getWidthOfColsInList } from './columnUtils';\nimport type { ColumnViewportService } from './columnViewportService';\nimport type { VisibleColsService } from './visibleColsService';\n\nexport interface ColumnResizeSet {\n    columns: AgColumn[];\n    ratios: number[];\n    width: number;\n}\n\nexport interface IColumnLimit {\n    /** Selector for the column to which these dimension limits will apply */\n    key: Column | string;\n    /** Defines a minimum width for this column (does not override the column minimum width) */\n    minWidth?: number;\n    /** Defines a maximum width for this column (does not override the column maximum width) */\n    maxWidth?: number;\n}\n\nexport interface ISizeColumnsToFitParams {\n    /** Defines a default minimum width for every column (does not override the column minimum width) */\n    defaultMinWidth?: number;\n    /** Defines a default maximum width for every column (does not override the column maximum width) */\n    defaultMaxWidth?: number;\n    /** Provides a minimum and/or maximum width to specific columns */\n    columnLimits?: IColumnLimit[];\n}\n\nexport class ColumnSizeService extends BeanStub implements NamedBean {\n    beanName = 'columnSizeService' as const;\n\n    private columnModel: ColumnModel;\n    private columnViewportService: ColumnViewportService;\n    private eventDispatcher: ColumnEventDispatcher;\n    private visibleColsService: VisibleColsService;\n    private ctrlsService: CtrlsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.columnModel = beans.columnModel;\n        this.columnViewportService = beans.columnViewportService;\n        this.eventDispatcher = beans.columnEventDispatcher;\n        this.visibleColsService = beans.visibleColsService;\n        this.ctrlsService = beans.ctrlsService;\n    }\n\n    private flexViewportWidth: number;\n\n    public setColumnWidths(\n        columnWidths: {\n            key: ColKey; // @key - the column who's size we want to change\n            newWidth: number; // @newWidth - width in pixels\n        }[],\n        shiftKey: boolean, // @takeFromAdjacent - if user has 'shift' pressed, then pixels are taken from adjacent column\n        finished: boolean, // @finished - ends up in the event, tells the user if more events are to come\n        source: ColumnEventType\n    ): void {\n        const sets: ColumnResizeSet[] = [];\n\n        columnWidths.forEach((columnWidth) => {\n            const col = this.columnModel.getColDefCol(columnWidth.key) || this.columnModel.getCol(columnWidth.key);\n\n            if (!col) {\n                return;\n            }\n\n            sets.push({\n                width: columnWidth.newWidth,\n                ratios: [1],\n                columns: [col],\n            });\n\n            // if user wants to do shift resize by default, then we invert the shift operation\n            const defaultIsShift = this.gos.get('colResizeDefault') === 'shift';\n\n            if (defaultIsShift) {\n                shiftKey = !shiftKey;\n            }\n\n            if (shiftKey) {\n                const otherCol = this.visibleColsService.getColAfter(col);\n                if (!otherCol) {\n                    return;\n                }\n\n                const widthDiff = col.getActualWidth() - columnWidth.newWidth;\n                const otherColWidth = otherCol.getActualWidth() + widthDiff;\n\n                sets.push({\n                    width: otherColWidth,\n                    ratios: [1],\n                    columns: [otherCol],\n                });\n            }\n        });\n\n        if (sets.length === 0) {\n            return;\n        }\n\n        this.resizeColumnSets({\n            resizeSets: sets,\n            finished,\n            source,\n        });\n    }\n\n    // method takes sets of columns and resizes them. either all sets will be resized, or nothing\n    // be resized. this is used for example when user tries to resize a group and holds shift key,\n    // then both the current group (grows), and the adjacent group (shrinks), will get resized,\n    // so that's two sets for this method.\n    public resizeColumnSets(params: {\n        resizeSets: ColumnResizeSet[];\n        finished: boolean;\n        source: ColumnEventType;\n    }): void {\n        const { resizeSets, finished, source } = params;\n        const passMinMaxCheck =\n            !resizeSets || resizeSets.every((columnResizeSet) => this.checkMinAndMaxWidthsForSet(columnResizeSet));\n\n        if (!passMinMaxCheck) {\n            // even though we are not going to resize beyond min/max size, we still need to dispatch event when finished\n            if (finished) {\n                const columns = resizeSets && resizeSets.length > 0 ? resizeSets[0].columns : null;\n                this.eventDispatcher.columnResized(columns, finished, source);\n            }\n\n            return; // don't resize!\n        }\n\n        const changedCols: AgColumn[] = [];\n        const allResizedCols: AgColumn[] = [];\n\n        resizeSets.forEach((set) => {\n            const { width, columns, ratios } = set;\n\n            // keep track of pixels used, and last column gets the remaining,\n            // to cater for rounding errors, and min width adjustments\n            const newWidths: { [colId: string]: number } = {};\n            const finishedCols: { [colId: string]: boolean } = {};\n\n            columns.forEach((col) => allResizedCols.push(col));\n\n            // the loop below goes through each col. if a col exceeds it's min/max width,\n            // it then gets set to its min/max width and the column is removed marked as 'finished'\n            // and the calculation is done again leaving this column out. take for example columns\n            // {A, width: 50, maxWidth: 100}\n            // {B, width: 50}\n            // {C, width: 50}\n            // and then the set is set to width 600 - on the first pass the grid tries to set each column\n            // to 200. it checks A and sees 200 > 100 and so sets the width to 100. col A is then marked\n            // as 'finished' and the calculation is done again with the remaining cols B and C, which end up\n            // splitting the remaining 500 pixels.\n            let finishedColsGrew = true;\n            let loopCount = 0;\n\n            while (finishedColsGrew) {\n                loopCount++;\n                if (loopCount > 1000) {\n                    // this should never happen, but in the future, someone might introduce a bug here,\n                    // so we stop the browser from hanging and report bug properly\n                    _errorOnce('infinite loop in resizeColumnSets');\n                    break;\n                }\n\n                finishedColsGrew = false;\n\n                const subsetCols: AgColumn[] = [];\n                let subsetRatioTotal = 0;\n                let pixelsToDistribute = width;\n\n                columns.forEach((col, index) => {\n                    const thisColFinished = finishedCols[col.getId()];\n                    if (thisColFinished) {\n                        pixelsToDistribute -= newWidths[col.getId()];\n                    } else {\n                        subsetCols.push(col);\n                        const ratioThisCol = ratios[index];\n                        subsetRatioTotal += ratioThisCol;\n                    }\n                });\n\n                // because we are not using all of the ratios (cols can be missing),\n                // we scale the ratio. if all columns are included, then subsetRatioTotal=1,\n                // and so the ratioScale will be 1.\n                const ratioScale = 1 / subsetRatioTotal;\n\n                subsetCols.forEach((col, index) => {\n                    const lastCol = index === subsetCols.length - 1;\n                    let colNewWidth: number;\n\n                    if (lastCol) {\n                        colNewWidth = pixelsToDistribute;\n                    } else {\n                        colNewWidth = Math.round(ratios[index] * width * ratioScale);\n                        pixelsToDistribute -= colNewWidth;\n                    }\n\n                    const minWidth = col.getMinWidth();\n                    const maxWidth = col.getMaxWidth();\n\n                    if (colNewWidth < minWidth) {\n                        colNewWidth = minWidth;\n                        finishedCols[col.getId()] = true;\n                        finishedColsGrew = true;\n                    } else if (maxWidth > 0 && colNewWidth > maxWidth) {\n                        colNewWidth = maxWidth;\n                        finishedCols[col.getId()] = true;\n                        finishedColsGrew = true;\n                    }\n\n                    newWidths[col.getId()] = colNewWidth;\n                });\n            }\n\n            columns.forEach((col) => {\n                const newWidth = newWidths[col.getId()];\n                const actualWidth = col.getActualWidth();\n\n                if (actualWidth !== newWidth) {\n                    col.setActualWidth(newWidth, source);\n                    changedCols.push(col);\n                }\n            });\n        });\n\n        // if no cols changed, then no need to update more or send event.\n        const atLeastOneColChanged = changedCols.length > 0;\n\n        let flexedCols: AgColumn[] = [];\n\n        if (atLeastOneColChanged) {\n            flexedCols = this.refreshFlexedColumns({ resizingCols: allResizedCols, skipSetLeft: true });\n            this.visibleColsService.setLeftValues(source);\n            this.visibleColsService.updateBodyWidths();\n            this.columnViewportService.checkViewportColumns();\n        }\n\n        // check for change first, to avoid unnecessary firing of events\n        // however we always dispatch 'finished' events. this is important\n        // when groups are resized, as if the group is changing slowly,\n        // eg 1 pixel at a time, then each change will dispatch change events\n        // in all the columns in the group, but only one with get the pixel.\n        const colsForEvent = allResizedCols.concat(flexedCols);\n\n        if (atLeastOneColChanged || finished) {\n            this.eventDispatcher.columnResized(colsForEvent, finished, source, flexedCols);\n        }\n    }\n\n    private checkMinAndMaxWidthsForSet(columnResizeSet: ColumnResizeSet): boolean {\n        const { columns, width } = columnResizeSet;\n\n        // every col has a min width, so sum them all up and see if we have enough room\n        // for all the min widths\n        let minWidthAccumulated = 0;\n        let maxWidthAccumulated = 0;\n        let maxWidthActive = true;\n\n        columns.forEach((col) => {\n            const minWidth = col.getMinWidth();\n            minWidthAccumulated += minWidth || 0;\n\n            const maxWidth = col.getMaxWidth();\n            if (maxWidth > 0) {\n                maxWidthAccumulated += maxWidth;\n            } else {\n                // if at least one columns has no max width, it means the group of columns\n                // then has no max width, as at least one column can take as much width as possible\n                maxWidthActive = false;\n            }\n        });\n\n        const minWidthPasses = width >= minWidthAccumulated;\n        const maxWidthPasses = !maxWidthActive || width <= maxWidthAccumulated;\n\n        return minWidthPasses && maxWidthPasses;\n    }\n\n    public refreshFlexedColumns(\n        params: {\n            resizingCols?: AgColumn[];\n            skipSetLeft?: boolean;\n            viewportWidth?: number;\n            source?: ColumnEventType;\n            fireResizedEvent?: boolean;\n            updateBodyWidths?: boolean;\n        } = {}\n    ): AgColumn[] {\n        const source = params.source ? params.source : 'flex';\n\n        if (params.viewportWidth != null) {\n            this.flexViewportWidth = params.viewportWidth;\n        }\n\n        if (!this.flexViewportWidth) {\n            return [];\n        }\n\n        // If the grid has left-over space, divide it between flexing columns in proportion to their flex value.\n        // A \"flexing column\" is one that has a 'flex' value set and is not currently being constrained by its\n        // minWidth or maxWidth rules.\n\n        const displayedCenterCols = this.visibleColsService.getCenterCols();\n\n        let flexAfterDisplayIndex = -1;\n        if (params.resizingCols) {\n            const allResizingCols = new Set(params.resizingCols);\n            // find the last resizing col, as only cols after this one are affected by the resizing\n            for (let i = displayedCenterCols.length - 1; i >= 0; i--) {\n                if (allResizingCols.has(displayedCenterCols[i])) {\n                    flexAfterDisplayIndex = i;\n                    break;\n                }\n            }\n        }\n\n        // the width of all of the columns for which the width has been determined\n        let knownColumnsWidth = 0;\n\n        let flexingColumns: AgColumn[] = [];\n\n        // store the minimum width of all the flex columns, so we can determine if flex is even possible more quickly\n        let minimumFlexedWidth = 0;\n        let totalFlex = 0;\n        for (let i = 0; i < displayedCenterCols.length; i++) {\n            const isFlex = displayedCenterCols[i].getFlex() && i > flexAfterDisplayIndex;\n            if (isFlex) {\n                flexingColumns.push(displayedCenterCols[i]);\n                totalFlex += displayedCenterCols[i].getFlex();\n                minimumFlexedWidth += displayedCenterCols[i].getMinWidth();\n            } else {\n                knownColumnsWidth += displayedCenterCols[i].getActualWidth();\n            }\n        }\n\n        if (!flexingColumns.length) {\n            return [];\n        }\n\n        let changedColumns: AgColumn[] = [];\n\n        // this is for performance to prevent trying to flex when unnecessary\n        if (knownColumnsWidth + minimumFlexedWidth > this.flexViewportWidth) {\n            // known columns and the minimum width of all the flex cols are too wide for viewport\n            // so don't flex\n            flexingColumns.forEach((col) => col.setActualWidth(col.getMinWidth(), source));\n\n            // No columns should flex, but all have been changed. Swap arrays so events fire properly.\n            // Expensive logic won't execute as flex columns is empty.\n            changedColumns = flexingColumns;\n            flexingColumns = [];\n        }\n\n        const flexingColumnSizes: number[] = [];\n        let spaceForFlexingColumns: number;\n\n        outer: while (true) {\n            spaceForFlexingColumns = this.flexViewportWidth - knownColumnsWidth;\n            const spacePerFlex = spaceForFlexingColumns / totalFlex;\n            for (let i = 0; i < flexingColumns.length; i++) {\n                const col = flexingColumns[i];\n                const widthByFlexRule = spacePerFlex * col.getFlex();\n                let constrainedWidth = 0;\n\n                const minWidth = col.getMinWidth();\n                const maxWidth = col.getMaxWidth();\n\n                if (widthByFlexRule < minWidth) {\n                    constrainedWidth = minWidth;\n                } else if (widthByFlexRule > maxWidth) {\n                    constrainedWidth = maxWidth;\n                }\n\n                if (constrainedWidth) {\n                    // This column is not in fact flexing as it is being constrained to a specific size\n                    // so remove it from the list of flexing columns and start again\n                    col.setActualWidth(constrainedWidth, source);\n                    _removeFromUnorderedArray(flexingColumns, col);\n                    totalFlex -= col.getFlex();\n                    changedColumns.push(col);\n                    knownColumnsWidth += col.getActualWidth();\n                    continue outer;\n                }\n\n                flexingColumnSizes[i] = Math.round(widthByFlexRule);\n            }\n            break;\n        }\n\n        let remainingSpace = spaceForFlexingColumns;\n        flexingColumns.forEach((col, i) => {\n            col.setActualWidth(Math.min(flexingColumnSizes[i], remainingSpace), source);\n            changedColumns.push(col);\n            remainingSpace -= flexingColumnSizes[i];\n        });\n\n        if (!params.skipSetLeft) {\n            this.visibleColsService.setLeftValues(source);\n        }\n\n        if (params.updateBodyWidths) {\n            this.visibleColsService.updateBodyWidths();\n        }\n\n        if (params.fireResizedEvent) {\n            this.eventDispatcher.columnResized(changedColumns, true, source, flexingColumns);\n        }\n\n        return flexingColumns;\n    }\n\n    // called from api\n    public sizeColumnsToFit(\n        gridWidth: any,\n        source: ColumnEventType = 'sizeColumnsToFit',\n        silent?: boolean,\n        params?: ISizeColumnsToFitParams\n    ): void {\n        if (this.columnModel.isShouldQueueResizeOperations()) {\n            this.columnModel.pushResizeOperation(() => this.sizeColumnsToFit(gridWidth, source, silent, params));\n            return;\n        }\n\n        const limitsMap: { [colId: string]: Omit<IColumnLimit, 'key'> } = {};\n        if (params) {\n            params?.columnLimits?.forEach(({ key, ...dimensions }) => {\n                limitsMap[typeof key === 'string' ? key : key.getColId()] = dimensions;\n            });\n        }\n\n        // avoid divide by zero\n        const allDisplayedColumns = this.visibleColsService.getAllCols();\n\n        const doColumnsAlreadyFit = gridWidth === getWidthOfColsInList(allDisplayedColumns);\n        if (gridWidth <= 0 || !allDisplayedColumns.length || doColumnsAlreadyFit) {\n            return;\n        }\n\n        const colsToSpread: AgColumn[] = [];\n        const colsToNotSpread: AgColumn[] = [];\n\n        allDisplayedColumns.forEach((column) => {\n            if (column.getColDef().suppressSizeToFit === true) {\n                colsToNotSpread.push(column);\n            } else {\n                colsToSpread.push(column);\n            }\n        });\n\n        // make a copy of the cols that are going to be resized\n        const colsToDispatchEventFor = colsToSpread.slice(0);\n        let finishedResizing = false;\n\n        const moveToNotSpread = (column: AgColumn) => {\n            _removeFromArray(colsToSpread, column);\n            colsToNotSpread.push(column);\n        };\n\n        // resetting cols to their original width makes the sizeColumnsToFit more deterministic,\n        // rather than depending on the current size of the columns. most users call sizeColumnsToFit\n        // immediately after grid is created, so will make no difference. however if application is calling\n        // sizeColumnsToFit repeatedly (eg after column group is opened / closed repeatedly) we don't want\n        // the columns to start shrinking / growing over time.\n        //\n        // NOTE: the process below will assign values to `this.actualWidth` of each column without firing events\n        // for this reason we need to manually dispatch resize events after the resize has been done for each column.\n        colsToSpread.forEach((column) => {\n            column.resetActualWidth(source);\n\n            const widthOverride = limitsMap?.[column.getId()];\n            const minOverride = widthOverride?.minWidth ?? params?.defaultMinWidth;\n            const maxOverride = widthOverride?.maxWidth ?? params?.defaultMaxWidth;\n\n            const colWidth = column.getActualWidth();\n            if (typeof minOverride === 'number' && colWidth < minOverride) {\n                column.setActualWidth(minOverride, source, true);\n            } else if (typeof maxOverride === 'number' && colWidth > maxOverride) {\n                column.setActualWidth(maxOverride, source, true);\n            }\n        });\n\n        while (!finishedResizing) {\n            finishedResizing = true;\n            const availablePixels = gridWidth - getWidthOfColsInList(colsToNotSpread);\n            if (availablePixels <= 0) {\n                // no width, set everything to minimum\n                colsToSpread.forEach((column) => {\n                    const widthOverride = limitsMap?.[column.getId()]?.minWidth ?? params?.defaultMinWidth;\n                    if (typeof widthOverride === 'number') {\n                        column.setActualWidth(widthOverride, source, true);\n                        return;\n                    }\n                    column.setMinimum(source);\n                });\n            } else {\n                const scale = availablePixels / getWidthOfColsInList(colsToSpread);\n                // we set the pixels for the last col based on what's left, as otherwise\n                // we could be a pixel or two short or extra because of rounding errors.\n                let pixelsForLastCol = availablePixels;\n                // backwards through loop, as we are removing items as we go\n                for (let i = colsToSpread.length - 1; i >= 0; i--) {\n                    const column = colsToSpread[i];\n\n                    const widthOverride = limitsMap?.[column.getId()];\n                    const minOverride = widthOverride?.minWidth ?? params?.defaultMinWidth;\n                    const maxOverride = widthOverride?.maxWidth ?? params?.defaultMaxWidth;\n                    const colMinWidth = column.getMinWidth();\n                    const colMaxWidth = column.getMaxWidth();\n                    const minWidth =\n                        typeof minOverride === 'number' && minOverride > colMinWidth ? minOverride : colMinWidth;\n                    const maxWidth =\n                        typeof maxOverride === 'number' && maxOverride < colMaxWidth ? maxOverride : colMaxWidth;\n                    let newWidth = Math.round(column.getActualWidth() * scale);\n\n                    if (newWidth < minWidth) {\n                        newWidth = minWidth;\n                        moveToNotSpread(column);\n                        finishedResizing = false;\n                    } else if (newWidth > maxWidth) {\n                        newWidth = maxWidth;\n                        moveToNotSpread(column);\n                        finishedResizing = false;\n                    } else if (i === 0) {\n                        // if this is the last column\n                        newWidth = pixelsForLastCol;\n                    }\n\n                    column.setActualWidth(newWidth, source, true);\n                    pixelsForLastCol -= newWidth;\n                }\n            }\n        }\n\n        // see notes above\n        colsToDispatchEventFor.forEach((col) => {\n            col.fireColumnWidthChangedEvent(source);\n        });\n\n        this.visibleColsService.setLeftValues(source);\n        this.visibleColsService.updateBodyWidths();\n\n        if (silent) {\n            return;\n        }\n\n        this.eventDispatcher.columnResized(colsToDispatchEventFor, true, source);\n    }\n\n    public applyAutosizeStrategy(): void {\n        const autoSizeStrategy = this.gos.get('autoSizeStrategy');\n        if (!autoSizeStrategy) {\n            return;\n        }\n\n        const { type } = autoSizeStrategy;\n        // ensure things like aligned grids have linked first\n        setTimeout(() => {\n            if (type === 'fitGridWidth') {\n                const { columnLimits: propColumnLimits, defaultMinWidth, defaultMaxWidth } = autoSizeStrategy;\n                const columnLimits = propColumnLimits?.map(({ colId: key, minWidth, maxWidth }) => ({\n                    key,\n                    minWidth,\n                    maxWidth,\n                }));\n                this.ctrlsService.getGridBodyCtrl().sizeColumnsToFit({\n                    defaultMinWidth,\n                    defaultMaxWidth,\n                    columnLimits,\n                });\n            } else if (type === 'fitProvidedWidth') {\n                this.sizeColumnsToFit(autoSizeStrategy.width, 'sizeColumnsToFit');\n            }\n        });\n    }\n}\n", "import { BeanStub } from '../context/beanStub';\nimport type {\n    AgColumnGroupEvent,\n    Column,\n    ColumnGroup,\n    ColumnGroupShowType,\n    ColumnPinnedType,\n    HeaderColumnId,\n} from '../interfaces/iColumn';\nimport { _last } from '../utils/array';\nimport type { AgColumn } from './agColumn';\nimport { isColumn } from './agColumn';\nimport type { AgProvidedColumnGroup } from './agProvidedColumnGroup';\nimport type { AbstractColDef, ColGroupDef } from './colDef';\n\nexport function createUniqueColumnGroupId(groupId: string, instanceId: number): HeaderColumnId {\n    return (groupId + '_' + instanceId) as HeaderColumnId;\n}\n\nexport function isColumnGroup(col: Column | ColumnGroup | string): col is AgColumnGroup {\n    return col instanceof AgColumnGroup;\n}\n\nexport class AgColumnGroup<TValue = any> extends BeanStub<AgColumnGroupEvent> implements ColumnGroup<TValue> {\n    public readonly isColumn = false as const;\n\n    // all the children of this group, regardless of whether they are opened or closed\n    private children: (AgColumn | AgColumnGroup)[] | null;\n    // depends on the open/closed state of the group, only displaying columns are stored here\n    private displayedChildren: (AgColumn | AgColumnGroup)[] | null = [];\n\n    private readonly groupId: string;\n    private readonly partId: number;\n    private readonly providedColumnGroup: AgProvidedColumnGroup;\n    private readonly pinned: ColumnPinnedType;\n\n    // private moving = false\n    private left: number | null;\n    private oldLeft: number | null;\n\n    private parent: AgColumnGroup | null = null;\n\n    constructor(providedColumnGroup: AgProvidedColumnGroup, groupId: string, partId: number, pinned: ColumnPinnedType) {\n        super();\n        this.groupId = groupId;\n        this.partId = partId;\n        this.providedColumnGroup = providedColumnGroup;\n        this.pinned = pinned;\n    }\n\n    // as the user is adding and removing columns, the groups are recalculated.\n    // this reset clears out all children, ready for children to be added again\n    public reset(): void {\n        this.parent = null;\n        this.children = null;\n        this.displayedChildren = null;\n    }\n\n    public getParent(): AgColumnGroup | null {\n        return this.parent;\n    }\n\n    public setParent(parent: AgColumnGroup | null): void {\n        this.parent = parent;\n    }\n\n    public getUniqueId(): HeaderColumnId {\n        return createUniqueColumnGroupId(this.groupId, this.partId);\n    }\n\n    public isEmptyGroup(): boolean {\n        return this.displayedChildren!.length === 0;\n    }\n\n    public isMoving(): boolean {\n        const allLeafColumns = this.getProvidedColumnGroup().getLeafColumns();\n        if (!allLeafColumns || allLeafColumns.length === 0) {\n            return false;\n        }\n\n        return allLeafColumns.every((col) => col.isMoving());\n    }\n\n    public checkLeft(): void {\n        // first get all children to setLeft, as it impacts our decision below\n        this.displayedChildren!.forEach((child) => {\n            if (isColumnGroup(child)) {\n                child.checkLeft();\n            }\n        });\n\n        // set our left based on first displayed column\n        if (this.displayedChildren!.length > 0) {\n            if (this.gos.get('enableRtl')) {\n                const lastChild = _last(this.displayedChildren!);\n                const lastChildLeft = lastChild.getLeft();\n                this.setLeft(lastChildLeft);\n            } else {\n                const firstChildLeft = this.displayedChildren![0].getLeft();\n                this.setLeft(firstChildLeft);\n            }\n        } else {\n            // this should never happen, as if we have no displayed columns, then\n            // this groups should not even exist.\n            this.setLeft(null);\n        }\n    }\n\n    public getLeft(): number | null {\n        return this.left;\n    }\n\n    public getOldLeft(): number | null {\n        return this.oldLeft;\n    }\n\n    public setLeft(left: number | null) {\n        this.oldLeft = this.left;\n        if (this.left !== left) {\n            this.left = left;\n            this.dispatchLocalEvent({ type: 'leftChanged' });\n        }\n    }\n\n    public getPinned(): ColumnPinnedType {\n        return this.pinned;\n    }\n\n    public getGroupId(): string {\n        return this.groupId;\n    }\n\n    public getPartId(): number {\n        return this.partId;\n    }\n\n    public getActualWidth(): number {\n        let groupActualWidth = 0;\n        if (this.displayedChildren) {\n            this.displayedChildren.forEach((child) => {\n                groupActualWidth += child.getActualWidth();\n            });\n        }\n        return groupActualWidth;\n    }\n\n    public isResizable(): boolean {\n        if (!this.displayedChildren) {\n            return false;\n        }\n\n        // if at least one child is resizable, then the group is resizable\n        let result = false;\n        this.displayedChildren.forEach((child) => {\n            if (child.isResizable()) {\n                result = true;\n            }\n        });\n\n        return result;\n    }\n\n    public getMinWidth(): number {\n        let result = 0;\n        this.displayedChildren!.forEach((groupChild) => {\n            result += groupChild.getMinWidth();\n        });\n        return result;\n    }\n\n    public addChild(child: AgColumn | AgColumnGroup): void {\n        if (!this.children) {\n            this.children = [];\n        }\n        this.children.push(child);\n    }\n\n    public getDisplayedChildren(): (AgColumn | AgColumnGroup)[] | null {\n        return this.displayedChildren;\n    }\n\n    public getLeafColumns(): AgColumn[] {\n        const result: AgColumn[] = [];\n        this.addLeafColumns(result);\n        return result;\n    }\n\n    public getDisplayedLeafColumns(): AgColumn[] {\n        const result: AgColumn[] = [];\n        this.addDisplayedLeafColumns(result);\n        return result;\n    }\n\n    public getDefinition(): AbstractColDef | null {\n        return this.providedColumnGroup.getColGroupDef();\n    }\n\n    public getColGroupDef(): ColGroupDef | null {\n        return this.providedColumnGroup.getColGroupDef();\n    }\n\n    public isPadding(): boolean {\n        return this.providedColumnGroup.isPadding();\n    }\n\n    public isExpandable(): boolean {\n        return this.providedColumnGroup.isExpandable();\n    }\n\n    public isExpanded(): boolean {\n        return this.providedColumnGroup.isExpanded();\n    }\n\n    public setExpanded(expanded: boolean): void {\n        this.providedColumnGroup.setExpanded(expanded);\n    }\n\n    private addDisplayedLeafColumns(leafColumns: AgColumn[]): void {\n        this.displayedChildren!.forEach((child) => {\n            if (isColumn(child)) {\n                leafColumns.push(child);\n            } else if (isColumnGroup(child)) {\n                child.addDisplayedLeafColumns(leafColumns);\n            }\n        });\n    }\n\n    private addLeafColumns(leafColumns: AgColumn[]): void {\n        this.children!.forEach((child) => {\n            if (isColumn(child)) {\n                leafColumns.push(child);\n            } else if (isColumnGroup(child)) {\n                child.addLeafColumns(leafColumns);\n            }\n        });\n    }\n\n    public getChildren(): (AgColumn | AgColumnGroup)[] | null {\n        return this.children;\n    }\n\n    public getColumnGroupShow(): ColumnGroupShowType | undefined {\n        return this.providedColumnGroup.getColumnGroupShow();\n    }\n\n    public getProvidedColumnGroup(): AgProvidedColumnGroup {\n        return this.providedColumnGroup;\n    }\n\n    public getPaddingLevel(): number {\n        const parent = this.getParent();\n\n        if (!this.isPadding() || !parent || !parent.isPadding()) {\n            return 0;\n        }\n\n        return 1 + parent.getPaddingLevel();\n    }\n\n    public calculateDisplayedColumns() {\n        // clear out last time we calculated\n        this.displayedChildren = [];\n\n        // find the column group that is controlling expandable. this is relevant when we have padding (empty)\n        // groups, where the expandable is actually the first parent that is not a padding group.\n        let parentWithExpansion: AgColumnGroup | null = this;\n        while (parentWithExpansion != null && parentWithExpansion.isPadding()) {\n            parentWithExpansion = parentWithExpansion.getParent();\n        }\n\n        const isExpandable = parentWithExpansion ? parentWithExpansion.getProvidedColumnGroup().isExpandable() : false;\n        // it not expandable, everything is visible\n        if (!isExpandable) {\n            this.displayedChildren = this.children;\n            this.dispatchLocalEvent({ type: 'displayedChildrenChanged' });\n            return;\n        }\n\n        // Add cols based on columnGroupShow\n        // Note - the below also adds padding groups, these are always added because they never have\n        // colDef.columnGroupShow set.\n        this.children!.forEach((child) => {\n            // never add empty groups\n            const emptyGroup = isColumnGroup(child) && (!child.displayedChildren || !child.displayedChildren.length);\n            if (emptyGroup) {\n                return;\n            }\n\n            const headerGroupShow = child.getColumnGroupShow();\n            switch (headerGroupShow) {\n                case 'open':\n                    // when set to open, only show col if group is open\n                    if (parentWithExpansion!.getProvidedColumnGroup().isExpanded()) {\n                        this.displayedChildren!.push(child);\n                    }\n                    break;\n                case 'closed':\n                    // when set to open, only show col if group is open\n                    if (!parentWithExpansion!.getProvidedColumnGroup().isExpanded()) {\n                        this.displayedChildren!.push(child);\n                    }\n                    break;\n                default:\n                    this.displayedChildren!.push(child);\n                    break;\n            }\n        });\n\n        this.dispatchLocalEvent({ type: 'displayedChildrenChanged' });\n    }\n}\n", "// class returns unique instance id's for columns.\n// eg, the following calls (in this order) will result in:\n//\n// getInstanceIdForKey('country') => 0\n// getInstanceIdForKey('country') => 1\n// getInstanceIdForKey('country') => 2\n// getInstanceIdForKey('country') => 3\n// getInstanceIdForKey('age') => 0\n// getInstanceIdForKey('age') => 1\n// getInstanceIdForKey('country') => 4\nexport class GroupInstanceIdCreator {\n    // this map contains keys to numbers, so we remember what the last call was\n    private existingIds: any = {};\n\n    public getInstanceIdForKey(key: string): number {\n        const lastResult = this.existingIds[key];\n        let result: number;\n        if (typeof lastResult !== 'number') {\n            // first time this key\n            result = 0;\n        } else {\n            result = lastResult + 1;\n        }\n\n        this.existingIds[key] = result;\n\n        return result;\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport { isColumn } from '../entities/agColumn';\nimport type { AgColumn } from '../entities/agColumn';\nimport { AgColumnGroup, createUniqueColumnGroupId, isColumnGroup } from '../entities/agColumnGroup';\nimport type { AgProvidedColumnGroup } from '../entities/agProvidedColumnGroup';\nimport type { RowNode } from '../entities/rowNode';\nimport type { ColumnContainerWidthChanged, ColumnEventType, DisplayedColumnsWidthChangedEvent } from '../events';\nimport type { ColumnPinnedType, HeaderColumnId } from '../interfaces/iColumn';\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\nimport { _last, _removeAllFromUnorderedArray } from '../utils/array';\nimport { _exists } from '../utils/generic';\nimport type { ColumnEventDispatcher } from './columnEventDispatcher';\nimport type { ColumnModel } from './columnModel';\nimport type { ColumnSizeService } from './columnSizeService';\nimport { getWidthOfColsInList } from './columnUtils';\nimport type { ColumnViewportService } from './columnViewportService';\nimport { GroupInstanceIdCreator } from './groupInstanceIdCreator';\n\n// takes in a list of columns, as specified by the column definitions, and returns column groups\nexport class VisibleColsService extends BeanStub implements NamedBean {\n    beanName = 'visibleColsService' as const;\n\n    private columnModel: ColumnModel;\n    private columnSizeService: ColumnSizeService;\n    private columnViewportService: ColumnViewportService;\n    private eventDispatcher: ColumnEventDispatcher;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.columnModel = beans.columnModel;\n        this.columnSizeService = beans.columnSizeService;\n        this.columnViewportService = beans.columnViewportService;\n        this.eventDispatcher = beans.columnEventDispatcher;\n    }\n\n    // tree of columns to be displayed for each section\n    private treeLeft: (AgColumn | AgColumnGroup)[];\n    private treeRight: (AgColumn | AgColumnGroup)[];\n    private treeCenter: (AgColumn | AgColumnGroup)[];\n\n    // for fast lookup, to see if a column or group is still visible\n    private colsAndGroupsMap: { [id: HeaderColumnId]: AgColumn | AgColumnGroup } = {};\n\n    // leave level columns of the displayed trees\n    private columnsLeft: AgColumn[] = [];\n    private columnsRight: AgColumn[] = [];\n    private columnsCenter: AgColumn[] = [];\n    // all three lists above combined\n    private columns: AgColumn[] = [];\n\n    private autoHeightCols: AgColumn[];\n\n    private bodyWidth = 0;\n    private leftWidth = 0;\n    private rightWidth = 0;\n\n    private bodyWidthDirty = true;\n\n    // list of all columns (displayed and hidden) in visible order including pinned\n    private ariaOrderColumns: AgColumn[];\n\n    public refresh(source: ColumnEventType, skipTreeBuild = false): void {\n        // when we open/close col group, skipTreeBuild=false, as we know liveCols haven't changed\n        if (!skipTreeBuild) {\n            this.buildTrees();\n        }\n\n        this.updateOpenClosedVisibilityInColumnGroups();\n\n        this.columnsLeft = pickDisplayedCols(this.treeLeft);\n        this.columnsCenter = pickDisplayedCols(this.treeCenter);\n        this.columnsRight = pickDisplayedCols(this.treeRight);\n\n        this.joinColsAriaOrder();\n        this.joinCols();\n        this.setLeftValues(source);\n        this.autoHeightCols = this.columns.filter((col) => col.isAutoHeight());\n        this.columnSizeService.refreshFlexedColumns();\n        this.updateBodyWidths();\n        this.columnViewportService.checkViewportColumns(false);\n        this.setFirstRightAndLastLeftPinned(source);\n\n        this.eventDispatcher.visibleCols();\n    }\n\n    // after setColumnWidth or updateGroupsAndPresentedCols\n    public updateBodyWidths(): void {\n        const newBodyWidth = getWidthOfColsInList(this.columnsCenter);\n        const newLeftWidth = getWidthOfColsInList(this.columnsLeft);\n        const newRightWidth = getWidthOfColsInList(this.columnsRight);\n\n        // this is used by virtual col calculation, for RTL only, as a change to body width can impact displayed\n        // columns, due to RTL inverting the y coordinates\n        this.bodyWidthDirty = this.bodyWidth !== newBodyWidth;\n\n        const atLeastOneChanged =\n            this.bodyWidth !== newBodyWidth || this.leftWidth !== newLeftWidth || this.rightWidth !== newRightWidth;\n\n        if (atLeastOneChanged) {\n            this.bodyWidth = newBodyWidth;\n            this.leftWidth = newLeftWidth;\n            this.rightWidth = newRightWidth;\n\n            // this event is fired to allow the grid viewport to resize before the\n            // scrollbar tries to update its visibility.\n            const evt: WithoutGridCommon<ColumnContainerWidthChanged> = {\n                type: 'columnContainerWidthChanged',\n            };\n            this.eventService.dispatchEvent(evt);\n\n            // when this fires, it is picked up by the gridPanel, which ends up in\n            // gridPanel calling setWidthAndScrollPosition(), which in turn calls setViewportPosition()\n            const event: WithoutGridCommon<DisplayedColumnsWidthChangedEvent> = {\n                type: 'displayedColumnsWidthChanged',\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    // sets the left pixel position of each column\n    public setLeftValues(source: ColumnEventType): void {\n        this.setLeftValuesOfCols(source);\n        this.setLeftValuesOfGroups();\n    }\n\n    private setFirstRightAndLastLeftPinned(source: ColumnEventType): void {\n        let lastLeft: AgColumn | null;\n        let firstRight: AgColumn | null;\n\n        if (this.gos.get('enableRtl')) {\n            lastLeft = this.columnsLeft ? this.columnsLeft[0] : null;\n            firstRight = this.columnsRight ? _last(this.columnsRight) : null;\n        } else {\n            lastLeft = this.columnsLeft ? _last(this.columnsLeft) : null;\n            firstRight = this.columnsRight ? this.columnsRight[0] : null;\n        }\n\n        this.columnModel.getCols().forEach((col) => {\n            col.setLastLeftPinned(col === lastLeft, source);\n            col.setFirstRightPinned(col === firstRight, source);\n        });\n    }\n\n    private buildTrees() {\n        const cols = this.columnModel.getColsToShow();\n\n        const leftCols = cols.filter((col) => col.getPinned() == 'left');\n        const rightCols = cols.filter((col) => col.getPinned() == 'right');\n        const centerCols = cols.filter((col) => col.getPinned() != 'left' && col.getPinned() != 'right');\n\n        const idCreator = new GroupInstanceIdCreator();\n\n        this.treeLeft = this.createGroups({\n            columns: leftCols,\n            idCreator,\n            pinned: 'left',\n            oldDisplayedGroups: this.treeLeft,\n        });\n        this.treeRight = this.createGroups({\n            columns: rightCols,\n            idCreator,\n            pinned: 'right',\n            oldDisplayedGroups: this.treeRight,\n        });\n        this.treeCenter = this.createGroups({\n            columns: centerCols,\n            idCreator,\n            pinned: null,\n            oldDisplayedGroups: this.treeCenter,\n        });\n\n        this.updateColsAndGroupsMap();\n    }\n\n    public clear(): void {\n        this.columnsLeft = [];\n        this.columnsRight = [];\n        this.columnsCenter = [];\n        this.columns = [];\n        this.ariaOrderColumns = [];\n    }\n\n    private joinColsAriaOrder(): void {\n        const allColumns = this.columnModel.getCols();\n        const pinnedLeft: AgColumn[] = [];\n        const center: AgColumn[] = [];\n        const pinnedRight: AgColumn[] = [];\n\n        for (const col of allColumns) {\n            const pinned = col.getPinned();\n            if (!pinned) {\n                center.push(col);\n            } else if (pinned === true || pinned === 'left') {\n                pinnedLeft.push(col);\n            } else {\n                pinnedRight.push(col);\n            }\n        }\n\n        this.ariaOrderColumns = pinnedLeft.concat(center).concat(pinnedRight);\n    }\n\n    public getAriaColIndex(colOrGroup: AgColumn | AgColumnGroup): number {\n        let col: AgColumn;\n\n        if (isColumnGroup(colOrGroup)) {\n            col = colOrGroup.getLeafColumns()[0];\n        } else {\n            col = colOrGroup;\n        }\n\n        return this.ariaOrderColumns.indexOf(col) + 1;\n    }\n\n    public getAllAutoHeightCols(): AgColumn[] {\n        return this.autoHeightCols;\n    }\n\n    private setLeftValuesOfGroups(): void {\n        // a groups left value is the lest left value of it's children\n        [this.treeLeft, this.treeRight, this.treeCenter].forEach((columns) => {\n            columns.forEach((column) => {\n                if (isColumnGroup(column)) {\n                    const columnGroup = column;\n                    columnGroup.checkLeft();\n                }\n            });\n        });\n    }\n\n    private setLeftValuesOfCols(source: ColumnEventType): void {\n        const primaryCols = this.columnModel.getColDefCols();\n        if (!primaryCols) {\n            return;\n        }\n\n        // go through each list of displayed columns\n        const allColumns = this.columnModel.getCols().slice(0);\n\n        // let totalColumnWidth = this.getWidthOfColsInList()\n        const doingRtl = this.gos.get('enableRtl');\n\n        [this.columnsLeft, this.columnsRight, this.columnsCenter].forEach((columns) => {\n            if (doingRtl) {\n                // when doing RTL, we start at the top most pixel (ie RHS) and work backwards\n                let left = getWidthOfColsInList(columns);\n                columns.forEach((column) => {\n                    left -= column.getActualWidth();\n                    column.setLeft(left, source);\n                });\n            } else {\n                // otherwise normal LTR, we start at zero\n                let left = 0;\n                columns.forEach((column) => {\n                    column.setLeft(left, source);\n                    left += column.getActualWidth();\n                });\n            }\n            _removeAllFromUnorderedArray(allColumns, columns);\n        });\n\n        // items left in allColumns are columns not displayed, so remove the left position. this is\n        // important for the rows, as if a col is made visible, then taken out, then made visible again,\n        // we don't want the animation of the cell floating in from the old position, whatever that was.\n        allColumns.forEach((column) => {\n            column.setLeft(null, source);\n        });\n    }\n\n    private joinCols(): void {\n        if (this.gos.get('enableRtl')) {\n            this.columns = this.columnsRight.concat(this.columnsCenter).concat(this.columnsLeft);\n        } else {\n            this.columns = this.columnsLeft.concat(this.columnsCenter).concat(this.columnsRight);\n        }\n    }\n\n    public getColsCenter(): AgColumn[] {\n        return this.columnsCenter;\n    }\n\n    public getAllTrees(): (AgColumn | AgColumnGroup)[] | null {\n        if (this.treeLeft && this.treeRight && this.treeCenter) {\n            return this.treeLeft.concat(this.treeCenter).concat(this.treeRight);\n        }\n\n        return null;\n    }\n\n    // + headerRenderer -> setting pinned body width\n    public getTreeLeft(): (AgColumn | AgColumnGroup)[] {\n        return this.treeLeft;\n    }\n\n    // + headerRenderer -> setting pinned body width\n    public getTreeRight(): (AgColumn | AgColumnGroup)[] {\n        return this.treeRight;\n    }\n\n    // + headerRenderer -> setting pinned body width\n    public getTreeCenter(): (AgColumn | AgColumnGroup)[] {\n        return this.treeCenter;\n    }\n\n    // + csvCreator\n    public getAllCols(): AgColumn[] {\n        return this.columns;\n    }\n\n    // gridPanel -> ensureColumnVisible\n    public isColDisplayed(column: AgColumn): boolean {\n        return this.getAllCols().indexOf(column as AgColumn) >= 0;\n    }\n\n    public getLeftColsForRow(rowNode: RowNode): AgColumn[] {\n        const colSpanActive = this.columnModel.isColSpanActive();\n        if (!colSpanActive) {\n            return this.columnsLeft;\n        }\n\n        return this.getColsForRow(rowNode, this.columnsLeft);\n    }\n\n    public getRightColsForRow(rowNode: RowNode): AgColumn[] {\n        const colSpanActive = this.columnModel.isColSpanActive();\n        if (!colSpanActive) {\n            return this.columnsRight;\n        }\n\n        return this.getColsForRow(rowNode, this.columnsRight);\n    }\n\n    public getColsForRow(\n        rowNode: RowNode,\n        displayedColumns: AgColumn[],\n        filterCallback?: (column: AgColumn) => boolean,\n        emptySpaceBeforeColumn?: (column: AgColumn) => boolean\n    ): AgColumn[] {\n        const result: AgColumn[] = [];\n        let lastConsideredCol: AgColumn | null = null;\n\n        for (let i = 0; i < displayedColumns.length; i++) {\n            const col = displayedColumns[i] as AgColumn;\n            const maxAllowedColSpan = displayedColumns.length - i;\n            const colSpan = Math.min(col.getColSpan(rowNode), maxAllowedColSpan);\n            const columnsToCheckFilter: AgColumn[] = [col];\n\n            if (colSpan > 1) {\n                const colsToRemove = colSpan - 1;\n\n                for (let j = 1; j <= colsToRemove; j++) {\n                    columnsToCheckFilter.push(displayedColumns[i + j]);\n                }\n\n                i += colsToRemove;\n            }\n\n            // see which cols we should take out for column virtualisation\n            let filterPasses: boolean;\n\n            if (filterCallback) {\n                // if user provided a callback, means some columns may not be in the viewport.\n                // the user will NOT provide a callback if we are talking about pinned areas,\n                // as pinned areas have no horizontal scroll and do not virtualise the columns.\n                // if lots of columns, that means column spanning, and we set filterPasses = true\n                // if one or more of the columns spanned pass the filter.\n                filterPasses = false;\n                columnsToCheckFilter.forEach((colForFilter) => {\n                    if (filterCallback(colForFilter)) {\n                        filterPasses = true;\n                    }\n                });\n            } else {\n                filterPasses = true;\n            }\n\n            if (filterPasses) {\n                if (result.length === 0 && lastConsideredCol) {\n                    const gapBeforeColumn = emptySpaceBeforeColumn ? emptySpaceBeforeColumn(col) : false;\n                    if (gapBeforeColumn) {\n                        result.push(lastConsideredCol);\n                    }\n                }\n                result.push(col);\n            }\n\n            lastConsideredCol = col;\n        }\n\n        return result;\n    }\n\n    // used by:\n    // + angularGrid -> for setting body width\n    // + rowController -> setting main row widths (when inserting and resizing)\n    // need to cache this\n    public getBodyContainerWidth(): number {\n        return this.bodyWidth;\n    }\n\n    public getContainerWidth(pinned: ColumnPinnedType): number {\n        switch (pinned) {\n            case 'left':\n                return this.leftWidth;\n            case 'right':\n                return this.rightWidth;\n            default:\n                return this.bodyWidth;\n        }\n    }\n\n    // + rowController -> while inserting rows\n    public getCenterCols(): AgColumn[] {\n        return this.columnsCenter;\n    }\n\n    // + rowController -> while inserting rows\n    public getLeftCols(): AgColumn[] {\n        return this.columnsLeft;\n    }\n\n    public getRightCols(): AgColumn[] {\n        return this.columnsRight;\n    }\n\n    public getColBefore(col: AgColumn): AgColumn | null {\n        const allDisplayedColumns = this.getAllCols();\n        const oldIndex = allDisplayedColumns.indexOf(col as AgColumn);\n\n        if (oldIndex > 0) {\n            return allDisplayedColumns[oldIndex - 1];\n        }\n\n        return null;\n    }\n\n    public getGroupAtDirection(columnGroup: AgColumnGroup, direction: 'After' | 'Before'): AgColumnGroup | null {\n        // pick the last displayed column in this group\n        const requiredLevel = columnGroup.getProvidedColumnGroup().getLevel() + columnGroup.getPaddingLevel();\n        const colGroupLeafColumns = columnGroup.getDisplayedLeafColumns();\n        const col: AgColumn | null = direction === 'After' ? _last(colGroupLeafColumns) : colGroupLeafColumns[0];\n        const getDisplayColMethod: 'getColAfter' | 'getColBefore' = `getCol${direction}` as any;\n\n        while (true) {\n            // keep moving to the next col, until we get to another group\n            const column = this[getDisplayColMethod](col);\n\n            if (!column) {\n                return null;\n            }\n\n            const groupPointer = this.getColGroupAtLevel(column, requiredLevel);\n\n            if (groupPointer !== columnGroup) {\n                return groupPointer;\n            }\n        }\n    }\n\n    public getColGroupAtLevel(column: AgColumn, level: number): AgColumnGroup | null {\n        // get group at same level as the one we are looking for\n        let groupPointer: AgColumnGroup = column.getParent()!;\n        let originalGroupLevel: number;\n        let groupPointerLevel: number;\n\n        while (true) {\n            const groupPointerProvidedColumnGroup = groupPointer.getProvidedColumnGroup();\n            originalGroupLevel = groupPointerProvidedColumnGroup.getLevel();\n            groupPointerLevel = groupPointer.getPaddingLevel();\n\n            if (originalGroupLevel + groupPointerLevel <= level) {\n                break;\n            }\n            groupPointer = groupPointer.getParent()!;\n        }\n\n        return groupPointer;\n    }\n\n    public isPinningLeft(): boolean {\n        return this.columnsLeft.length > 0;\n    }\n\n    public isPinningRight(): boolean {\n        return this.columnsRight.length > 0;\n    }\n\n    private updateColsAndGroupsMap(): void {\n        this.colsAndGroupsMap = {};\n\n        const func = (child: AgColumn | AgColumnGroup) => {\n            this.colsAndGroupsMap[child.getUniqueId()] = child;\n        };\n\n        depthFirstAllColumnTreeSearch(this.treeCenter, false, func);\n        depthFirstAllColumnTreeSearch(this.treeLeft, false, func);\n        depthFirstAllColumnTreeSearch(this.treeRight, false, func);\n    }\n\n    public isVisible(item: AgColumn | AgColumnGroup): boolean {\n        const fromMap = this.colsAndGroupsMap[item.getUniqueId()];\n        // check for reference, in case new column / group with same id is now present\n        return fromMap === item;\n    }\n\n    private updateOpenClosedVisibilityInColumnGroups(): void {\n        const allColumnGroups = this.getAllTrees();\n\n        depthFirstAllColumnTreeSearch(allColumnGroups, false, (child) => {\n            if (isColumnGroup(child)) {\n                child.calculateDisplayedColumns();\n            }\n        });\n    }\n\n    public getFirstColumn(): AgColumn | null {\n        const isRtl = this.gos.get('enableRtl');\n        const queryOrder: ('getLeftCols' | 'getCenterCols' | 'getRightCols')[] = [\n            'getLeftCols',\n            'getCenterCols',\n            'getRightCols',\n        ];\n\n        if (isRtl) {\n            queryOrder.reverse();\n        }\n\n        for (let i = 0; i < queryOrder.length; i++) {\n            const container = this[queryOrder[i]]();\n            if (container.length) {\n                return isRtl ? _last(container) : container[0];\n            }\n        }\n\n        return null;\n    }\n\n    // returns the group with matching colId and instanceId. If instanceId is missing,\n    // matches only on the colId.\n    public getColumnGroup(colId: string | AgColumnGroup, partId?: number): AgColumnGroup | null {\n        if (!colId) {\n            return null;\n        }\n        if (isColumnGroup(colId)) {\n            return colId;\n        }\n\n        const allColumnGroups = this.getAllTrees();\n        const checkPartId = typeof partId === 'number';\n        let result: AgColumnGroup | null = null;\n\n        depthFirstAllColumnTreeSearch(allColumnGroups, false, (child) => {\n            if (isColumnGroup(child)) {\n                const columnGroup = child;\n                let matched: boolean;\n\n                if (checkPartId) {\n                    matched = colId === columnGroup.getGroupId() && partId === columnGroup.getPartId();\n                } else {\n                    matched = colId === columnGroup.getGroupId();\n                }\n\n                if (matched) {\n                    result = columnGroup;\n                }\n            }\n        });\n\n        return result;\n    }\n\n    // used by:\n    // + rowRenderer -> for navigation\n    public getColAfter(col: AgColumn): AgColumn | null {\n        const allDisplayedColumns = this.getAllCols();\n        const oldIndex = allDisplayedColumns.indexOf(col as AgColumn);\n\n        if (oldIndex < allDisplayedColumns.length - 1) {\n            return allDisplayedColumns[oldIndex + 1];\n        }\n\n        return null;\n    }\n\n    public isBodyWidthDirty(): boolean {\n        return this.bodyWidthDirty;\n    }\n\n    public setBodyWidthDirty(): void {\n        this.bodyWidthDirty = true;\n    }\n\n    // used by:\n    // + angularGrid -> setting pinned body width\n    // note: this should be cached\n    public getColsLeftWidth() {\n        return getWidthOfColsInList(this.columnsLeft);\n    }\n\n    // note: this should be cached\n    public getDisplayedColumnsRightWidth() {\n        return getWidthOfColsInList(this.columnsRight);\n    }\n\n    public isColAtEdge(col: AgColumn | AgColumnGroup, edge: 'first' | 'last'): boolean {\n        const allColumns = this.getAllCols();\n        if (!allColumns.length) {\n            return false;\n        }\n\n        const isFirst = edge === 'first';\n\n        let columnToCompare: AgColumn;\n        if (isColumnGroup(col)) {\n            const leafColumns = col.getDisplayedLeafColumns();\n            if (!leafColumns.length) {\n                return false;\n            }\n\n            columnToCompare = isFirst ? leafColumns[0] : _last(leafColumns);\n        } else {\n            columnToCompare = col;\n        }\n\n        return (isFirst ? allColumns[0] : _last(allColumns)) === columnToCompare;\n    }\n\n    public createGroups(params: {\n        // all displayed columns sorted - this is the columns the grid should show\n        columns: AgColumn[];\n        // creates unique id's for the group\n        idCreator: GroupInstanceIdCreator;\n        // whether it's left, right or center col\n        pinned: ColumnPinnedType;\n        // we try to reuse old groups if we can, to allow gui to do animation\n        oldDisplayedGroups?: (AgColumn | AgColumnGroup)[];\n        // set `isStandaloneStructure` to true if this structure will not be used\n        // by the grid UI. This is useful for export modules (gridSerializer).\n        isStandaloneStructure?: boolean;\n    }): (AgColumn | AgColumnGroup)[] {\n        const { columns, idCreator, pinned, oldDisplayedGroups, isStandaloneStructure } = params;\n        const oldColumnsMapped = this.mapOldGroupsById(oldDisplayedGroups!);\n\n        /**\n         * The following logic starts at the leaf level of columns, iterating through them to build their parent\n         * groups when the parents match.\n         *\n         * The created groups are then added to an array, and similarly iterated on until we reach the top level.\n         *\n         * When row groups have no original parent, it's added to the result.\n         */\n        const topLevelResultCols: (AgColumn | AgColumnGroup)[] = [];\n\n        // this is an array of cols or col groups at one level of depth, starting from leaf and ending at root\n        let groupsOrColsAtCurrentLevel: (AgColumn | AgColumnGroup)[] = columns as AgColumn[];\n        while (groupsOrColsAtCurrentLevel.length) {\n            // store what's currently iterating so the function can build the next level of col groups\n            const currentlyIterating = groupsOrColsAtCurrentLevel;\n            groupsOrColsAtCurrentLevel = [];\n\n            // store the index of the last row which was different from the previous row, this is used as a slice\n            // index for finding the children to group together\n            let lastGroupedColIdx = 0;\n\n            // create a group of children from lastGroupedColIdx to the provided `to` parameter\n            const createGroupToIndex = (to: number) => {\n                const from = lastGroupedColIdx;\n                lastGroupedColIdx = to;\n\n                const previousNode = currentlyIterating[from];\n                const previousNodeProvided = isColumnGroup(previousNode)\n                    ? previousNode.getProvidedColumnGroup()\n                    : previousNode;\n                const previousNodeParent = previousNodeProvided.getOriginalParent() as AgProvidedColumnGroup | null;\n\n                if (previousNodeParent == null) {\n                    // if the last node was different, and had a null parent, then we add all the nodes to the final\n                    // results)\n                    for (let i = from; i < to; i++) {\n                        topLevelResultCols.push(currentlyIterating[i]);\n                    }\n                    return;\n                }\n\n                // the parent differs from the previous node, so we create a group from the previous node\n                // and add all to the result array, except the current node.\n                const newGroup = this.createColGroup(\n                    previousNodeParent,\n                    idCreator,\n                    oldColumnsMapped,\n                    pinned,\n                    isStandaloneStructure\n                );\n\n                for (let i = from; i < to; i++) {\n                    newGroup.addChild(currentlyIterating[i]);\n                }\n                groupsOrColsAtCurrentLevel.push(newGroup);\n            };\n\n            for (let i = 1; i < currentlyIterating.length; i++) {\n                const thisNode = currentlyIterating[i];\n                const thisNodeProvided = isColumnGroup(thisNode) ? thisNode.getProvidedColumnGroup() : thisNode;\n                const thisNodeParent = thisNodeProvided.getOriginalParent();\n\n                const previousNode = currentlyIterating[lastGroupedColIdx];\n                const previousNodeProvided = isColumnGroup(previousNode)\n                    ? previousNode.getProvidedColumnGroup()\n                    : previousNode;\n                const previousNodeParent = previousNodeProvided.getOriginalParent();\n\n                if (thisNodeParent !== previousNodeParent) {\n                    createGroupToIndex(i);\n                }\n            }\n\n            if (lastGroupedColIdx < currentlyIterating.length) {\n                createGroupToIndex(currentlyIterating.length);\n            }\n        }\n\n        if (!isStandaloneStructure) {\n            this.setupParentsIntoCols(topLevelResultCols, null);\n        }\n        return topLevelResultCols;\n    }\n\n    private createColGroup(\n        providedGroup: AgProvidedColumnGroup,\n        groupInstanceIdCreator: GroupInstanceIdCreator,\n        oldColumnsMapped: { [key: string]: AgColumnGroup },\n        pinned: ColumnPinnedType,\n        isStandaloneStructure?: boolean\n    ): AgColumnGroup {\n        const groupId = providedGroup.getGroupId();\n        const instanceId = groupInstanceIdCreator.getInstanceIdForKey(groupId);\n        const uniqueId = createUniqueColumnGroupId(groupId, instanceId);\n\n        let columnGroup: AgColumnGroup | null = oldColumnsMapped[uniqueId];\n\n        // if the user is setting new colDefs, it is possible that the id's overlap, and we\n        // would have a false match from above. so we double check we are talking about the\n        // same original column group.\n        if (columnGroup && columnGroup.getProvidedColumnGroup() !== providedGroup) {\n            columnGroup = null;\n        }\n\n        if (_exists(columnGroup)) {\n            // clean out the old column group here, as we will be adding children into it again\n            columnGroup.reset();\n        } else {\n            columnGroup = new AgColumnGroup(providedGroup, groupId, instanceId, pinned);\n            if (!isStandaloneStructure) {\n                this.createBean(columnGroup);\n            }\n        }\n\n        return columnGroup;\n    }\n\n    // returns back a 2d map of ColumnGroup as follows: groupId -> instanceId -> ColumnGroup\n    private mapOldGroupsById(displayedGroups: (AgColumn | AgColumnGroup)[]): {\n        [uniqueId: string]: AgColumnGroup;\n    } {\n        const result: { [uniqueId: HeaderColumnId]: AgColumnGroup } = {};\n\n        const recursive = (columnsOrGroups: (AgColumn | AgColumnGroup)[] | null) => {\n            columnsOrGroups!.forEach((columnOrGroup) => {\n                if (isColumnGroup(columnOrGroup)) {\n                    const columnGroup = columnOrGroup;\n                    result[columnOrGroup.getUniqueId()] = columnGroup;\n                    recursive(columnGroup.getChildren());\n                }\n            });\n        };\n\n        if (displayedGroups) {\n            recursive(displayedGroups);\n        }\n\n        return result;\n    }\n\n    private setupParentsIntoCols(\n        columnsOrGroups: (AgColumn | AgColumnGroup)[] | null,\n        parent: AgColumnGroup | null\n    ): void {\n        columnsOrGroups!.forEach((columnsOrGroup) => {\n            columnsOrGroup.setParent(parent);\n            if (isColumnGroup(columnsOrGroup)) {\n                const columnGroup = columnsOrGroup;\n                this.setupParentsIntoCols(columnGroup.getChildren(), columnGroup);\n            }\n        });\n    }\n}\n\nfunction depthFirstAllColumnTreeSearch(\n    tree: (AgColumn | AgColumnGroup)[] | null,\n    useDisplayedChildren: boolean,\n    callback: (treeNode: AgColumn | AgColumnGroup) => void\n): void {\n    if (!tree) {\n        return;\n    }\n\n    for (let i = 0; i < tree.length; i++) {\n        const child = tree[i];\n        if (isColumnGroup(child)) {\n            const childTree = useDisplayedChildren ? child.getDisplayedChildren() : child.getChildren();\n            depthFirstAllColumnTreeSearch(childTree, useDisplayedChildren, callback);\n        }\n        callback(child);\n    }\n}\n\nfunction pickDisplayedCols(tree: (AgColumn | AgColumnGroup)[]): AgColumn[] {\n    const res: AgColumn[] = [];\n    depthFirstAllColumnTreeSearch(tree, true, (child) => {\n        if (isColumn(child)) {\n            res.push(child);\n        }\n    });\n    return res;\n}\n", "// events that are available for use by users of AG Grid and so should be documented\n/** EVENTS that should be exposed via code generation for the framework components.  */\nexport const PUBLIC_EVENTS = [\n    'columnEverythingChanged',\n    'newColumnsLoaded',\n    'columnPivotModeChanged',\n    'pivotMaxColumnsExceeded',\n    'columnRowGroupChanged',\n    'expandOrCollapseAll',\n    'columnPivotChanged',\n    'gridColumnsChanged',\n    'columnValueChanged',\n    'columnMoved',\n    'columnVisible',\n    'columnPinned',\n    'columnGroupOpened',\n    'columnResized',\n    'displayedColumnsChanged',\n    'virtualColumnsChanged',\n    'columnHeaderMouseOver',\n    'columnHeaderMouseLeave',\n    'columnHeaderClicked',\n    'columnHeaderContextMenu',\n    'asyncTransactionsFlushed',\n    'rowGroupOpened',\n    'rowDataUpdated',\n    'pinnedRowDataChanged',\n    'rangeSelectionChanged',\n    'chartCreated',\n    'chartRangeSelectionChanged',\n    'chartOptionsChanged',\n    'chartDestroyed',\n    'toolPanelVisibleChanged',\n    'toolPanelSizeChanged',\n    'modelUpdated',\n    'cutStart',\n    'cutEnd',\n    'pasteStart',\n    'pasteEnd',\n    'fillStart',\n    'fillEnd',\n    'rangeDeleteStart',\n    'rangeDeleteEnd',\n    'undoStarted',\n    'undoEnded',\n    'redoStarted',\n    'redoEnded',\n    'cellClicked',\n    'cellDoubleClicked',\n    'cellMouseDown',\n    'cellContextMenu',\n    'cellValueChanged',\n    'cellEditRequest',\n    'rowValueChanged',\n    'headerFocused',\n    'cellFocused',\n    'rowSelected',\n    'selectionChanged',\n    'tooltipShow',\n    'tooltipHide',\n    'cellKeyDown',\n    'cellMouseOver',\n    'cellMouseOut',\n    'filterChanged',\n    'filterModified',\n    'filterOpened',\n    'advancedFilterBuilderVisibleChanged',\n    'sortChanged',\n    'virtualRowRemoved',\n    'rowClicked',\n    'rowDoubleClicked',\n    'gridReady',\n    'gridPreDestroyed',\n    'gridSizeChanged',\n    'viewportChanged',\n    'firstDataRendered',\n    'dragStarted',\n    'dragStopped',\n    'rowEditingStarted',\n    'rowEditingStopped',\n    'cellEditingStarted',\n    'cellEditingStopped',\n    'bodyScroll',\n    'bodyScrollEnd',\n    'paginationChanged',\n    'componentStateChanged',\n    'storeRefreshed',\n    'stateUpdated',\n    'columnMenuVisibleChanged',\n    'contextMenuVisibleChanged',\n    'rowDragEnter',\n    'rowDragMove',\n    'rowDragLeave',\n    'rowDragEnd',\n] as const;\n\n// events that are internal to AG Grid and should not be exposed to users via documentation or generated framework components\n// These events are still available to users via the API, but are not intended for general use\n/** Exclude the following internal events from code generation to prevent exposing these events via framework components */\nexport const INTERNAL_EVENTS = [\n    'scrollbarWidthChanged',\n    'keyShortcutChangedCellStart',\n    'keyShortcutChangedCellEnd',\n    'pinnedHeightChanged',\n    'cellFocusCleared',\n    'fullWidthRowFocused',\n    'checkboxChanged',\n    'heightScaleChanged',\n    'suppressMovableColumns',\n    'suppressMenuHide',\n    'suppressFieldDotNotation',\n    'columnPanelItemDragStart',\n    'columnPanelItemDragEnd',\n    'bodyHeightChanged',\n    'columnContainerWidthChanged',\n    'displayedColumnsWidthChanged',\n    'scrollVisibilityChanged',\n    'columnHoverChanged',\n    'flashCells',\n    'paginationPixelOffsetChanged',\n    'displayedRowsChanged',\n    'leftPinnedWidthChanged',\n    'rightPinnedWidthChanged',\n    'rowContainerHeightChanged',\n    'headerHeightChanged',\n    'columnHeaderHeightChanged',\n    'gridStylesChanged',\n    'storeUpdated',\n    'filterDestroyed',\n    'rowDataUpdateStarted',\n    'rowCountReady',\n    'advancedFilterEnabledChanged',\n    'dataTypesInferred',\n    'fieldValueChanged',\n    'fieldPickerValueSelected',\n    'richSelectListRowSelected',\n    'sideBarUpdated',\n    'alignedGridScroll',\n    'alignedGridColumn',\n    'gridOptionsChanged',\n    'chartTitleEdit',\n    'recalculateRowBounds',\n    'stickyTopOffsetChanged',\n] as const;\n\nexport const ALL_EVENTS = [...PUBLIC_EVENTS, ...INTERNAL_EVENTS] as const;\n\nexport type AgPublicEventType = (typeof PUBLIC_EVENTS)[number];\nexport type AgInternalEventType = (typeof INTERNAL_EVENTS)[number];\nexport type AgEventType = AgPublicEventType | AgInternalEventType;\n", "import type { GridOptions } from './entities/gridOptions';\nimport type { AgGridCommon } from './interfaces/iCommon';\n\ntype GridOptionKey = keyof GridOptions;\n\ntype GetKeys<T, U> = {\n    [K in keyof T]: U extends T[K] ? K : T[K] extends U | null | undefined ? K : never; //Reverse match for string literal types\n}[keyof T];\n\n/**\n *  Get the GridProperties that are of type `any`.\n *  Works by finding the properties that can extend a non existing string.\n *  This will only be the properties of type `any`.\n */\nexport type AnyGridOptions = {\n    [K in keyof GridOptions]: GridOptions[K] extends 'NO_MATCH' ? K : never;\n}[keyof GridOptions];\n\n/**\n * Get all the GridOptions properties of the provided type.\n * Will also include `any` properties.\n */\ntype KeysLike<U> = Exclude<GetKeys<GridOptions, U>, undefined>;\n/**\n * Get all the GridOption properties that strictly contain the provided type.\n * Does not include `any` properties.\n */\ntype KeysOfType<U> = Exclude<GetKeys<GridOptions, U>, AnyGridOptions>;\ntype CallbackKeys = KeysOfType<(any: AgGridCommon<any, any>) => any>;\n/** All function properties excluding those explicity match the common callback interface. */\n// eslint-disable-next-line @typescript-eslint/ban-types\ntype FunctionKeys = Exclude<KeysLike<Function>, CallbackKeys>;\n\nexport const INITIAL_GRID_OPTION_KEYS = {\n    enableBrowserTooltips: true,\n    tooltipTrigger: true,\n    tooltipMouseTrack: true,\n    tooltipShowMode: true,\n    tooltipInteraction: true,\n    defaultColGroupDef: true,\n    suppressAutoSize: true,\n    skipHeaderOnAutoSize: true,\n    autoSizeStrategy: true,\n    components: true,\n    stopEditingWhenCellsLoseFocus: true,\n    undoRedoCellEditing: true,\n    undoRedoCellEditingLimit: true,\n    excelStyles: true,\n    cacheQuickFilter: true,\n    advancedFilterModel: true,\n    customChartThemes: true,\n    chartThemeOverrides: true,\n    chartToolPanelsDef: true,\n    loadingCellRendererSelector: true,\n    localeText: true,\n    keepDetailRows: true,\n    keepDetailRowsCount: true,\n    detailRowHeight: true,\n    detailRowAutoHeight: true,\n    tabIndex: true,\n    valueCache: true,\n    valueCacheNeverExpires: true,\n    enableCellExpressions: true,\n    suppressTouch: true,\n    suppressAsyncEvents: true,\n    suppressBrowserResizeObserver: true,\n    suppressPropertyNamesCheck: true,\n    debug: true,\n    loadingOverlayComponent: true,\n    suppressLoadingOverlay: true,\n    noRowsOverlayComponent: true,\n    paginationPageSizeSelector: true,\n    paginateChildRows: true,\n    pivotPanelShow: true,\n    pivotSuppressAutoColumn: true,\n    suppressExpandablePivotGroups: true,\n    aggFuncs: true,\n    suppressAggFuncInHeader: true,\n    removePivotHeaderRowWhenSingleValueColumn: true,\n    allowShowChangeAfterFilter: true,\n    ensureDomOrder: true,\n    enableRtl: true,\n    suppressColumnVirtualisation: true,\n    suppressMaxRenderedRowRestriction: true,\n    suppressRowVirtualisation: true,\n    rowDragText: true,\n    suppressGroupMaintainValueType: true,\n    groupLockGroupColumns: true,\n    rowGroupPanelSuppressSort: true,\n    suppressGroupRowsSticky: true,\n    rowModelType: true,\n    cacheOverflowSize: true,\n    infiniteInitialRowCount: true,\n    serverSideInitialRowCount: true,\n    suppressServerSideInfiniteScroll: true,\n    maxBlocksInCache: true,\n    maxConcurrentDatasourceRequests: true,\n    blockLoadDebounceMillis: true,\n    serverSideOnlyRefreshFilteredGroups: true,\n    serverSidePivotResultFieldSeparator: true,\n    viewportRowModelPageSize: true,\n    viewportRowModelBufferSize: true,\n    debounceVerticalScrollbar: true,\n    suppressAnimationFrame: true,\n    suppressPreventDefaultOnMouseWheel: true,\n    scrollbarWidth: true,\n    icons: true,\n    suppressRowTransform: true,\n    gridId: true,\n    enableGroupEdit: true,\n    initialState: true,\n    processUnpinnedColumns: true,\n    createChartContainer: true,\n    getLocaleText: true,\n    getRowId: true,\n    reactiveCustomComponents: true,\n    columnMenu: true,\n};\n\ntype InitialGridOptionKey = keyof typeof INITIAL_GRID_OPTION_KEYS;\n\nexport type ManagedGridOptionKey = Exclude<GridOptionKey, InitialGridOptionKey>;\n\nexport type ManagedGridOptions<TData = any> = {\n    [K in ManagedGridOptionKey]?: GridOptions<TData>[K];\n};\n\n/**\n * These keys are used for validating properties supplied on a gridOptions object, and for code generation.\n * If you change the properties on the gridOptions interface, you *must* update this file as well to be consistent.\n */\nexport class PropertyKeys {\n    public static STRING_PROPERTIES: KeysOfType<string>[] = [\n        'rowSelection',\n        'overlayLoadingTemplate',\n        'overlayNoRowsTemplate',\n        'gridId',\n        'quickFilterText',\n        'rowModelType',\n        'editType',\n        'domLayout',\n        'clipboardDelimiter',\n        'rowGroupPanelShow',\n        'multiSortKey',\n        'pivotColumnGroupTotals',\n        'pivotRowTotals',\n        'pivotPanelShow',\n        'fillHandleDirection',\n        'groupDisplayType',\n        'treeDataDisplayType',\n        'colResizeDefault',\n        'tooltipTrigger',\n        'serverSidePivotResultFieldSeparator',\n        'columnMenu',\n        'tooltipShowMode',\n        'grandTotalRow',\n    ];\n\n    public static OBJECT_PROPERTIES: KeysLike<object | HTMLElement>[] = [\n        'components',\n        'rowStyle',\n        'context',\n        'autoGroupColumnDef',\n        'localeText',\n        'icons',\n        'datasource',\n        'serverSideDatasource',\n        'viewportDatasource',\n        'groupRowRendererParams',\n        'aggFuncs',\n        'fullWidthCellRendererParams',\n        'defaultColGroupDef',\n        'defaultColDef',\n        'defaultCsvExportParams',\n        'defaultExcelExportParams',\n        'columnTypes',\n        'rowClassRules',\n        'detailCellRendererParams',\n        'loadingCellRendererParams',\n        'loadingOverlayComponentParams',\n        'noRowsOverlayComponentParams',\n        'popupParent',\n        'statusBar',\n        'sideBar',\n        'chartThemeOverrides',\n        'customChartThemes',\n        'chartToolPanelsDef',\n        'dataTypeDefinitions',\n        'advancedFilterModel',\n        'advancedFilterParent',\n        'advancedFilterBuilderParams',\n        'initialState',\n        'autoSizeStrategy',\n    ];\n\n    public static ARRAY_PROPERTIES: KeysOfType<any[]>[] = [\n        'sortingOrder',\n        'alignedGrids',\n        'rowData',\n        'columnDefs',\n        'excelStyles',\n        'pinnedTopRowData',\n        'pinnedBottomRowData',\n        'chartThemes',\n        'rowClass',\n        'paginationPageSizeSelector',\n    ];\n\n    // These properties are coerced at runtime, do not do union types\n    public static NUMBER_PROPERTIES: KeysOfType<number>[] = [\n        'rowHeight',\n        'detailRowHeight',\n        'rowBuffer',\n        'headerHeight',\n        'groupHeaderHeight',\n        'groupLockGroupColumns',\n        'floatingFiltersHeight',\n        'pivotHeaderHeight',\n        'pivotGroupHeaderHeight',\n        'groupDefaultExpanded',\n        'pivotDefaultExpanded',\n        'viewportRowModelPageSize',\n        'viewportRowModelBufferSize',\n        'autoSizePadding',\n        'maxBlocksInCache',\n        'maxConcurrentDatasourceRequests',\n        'tooltipShowDelay',\n        'tooltipHideDelay',\n        'cacheOverflowSize',\n        'paginationPageSize',\n        'cacheBlockSize',\n        'infiniteInitialRowCount',\n        'serverSideInitialRowCount',\n        'scrollbarWidth',\n        'asyncTransactionWaitMillis',\n        'blockLoadDebounceMillis',\n        'keepDetailRowsCount',\n        'undoRedoCellEditingLimit',\n        'cellFlashDelay',\n        'cellFadeDelay',\n        'cellFlashDuration',\n        'cellFadeDuration',\n        'tabIndex',\n        'pivotMaxGeneratedColumns',\n    ];\n\n    // These properties are coerced at runtime, do not do union types\n    public static BOOLEAN_PROPERTIES: KeysOfType<boolean>[] = [\n        'suppressMakeColumnVisibleAfterUnGroup',\n        'suppressRowClickSelection',\n        'suppressCellFocus',\n        'suppressHeaderFocus',\n        'suppressHorizontalScroll',\n        'groupSelectsChildren',\n        'alwaysShowHorizontalScroll',\n        'alwaysShowVerticalScroll',\n        'debug',\n        'enableBrowserTooltips',\n        'enableCellExpressions',\n        'groupIncludeTotalFooter',\n        'groupSuppressBlankHeader',\n        'suppressMenuHide',\n        'suppressRowDeselection',\n        'unSortIcon',\n        'suppressMultiSort',\n        'alwaysMultiSort',\n        'singleClickEdit',\n        'suppressLoadingOverlay',\n        'suppressNoRowsOverlay',\n        'suppressAutoSize',\n        'skipHeaderOnAutoSize',\n        'suppressColumnMoveAnimation',\n        'suppressMovableColumns',\n        'suppressFieldDotNotation',\n        'enableRangeSelection',\n        'enableRangeHandle',\n        'enableFillHandle',\n        'suppressClearOnFillReduction',\n        'deltaSort',\n        'suppressTouch',\n        'suppressAsyncEvents',\n        'allowContextMenuWithControlKey',\n        'suppressContextMenu',\n        'enableCellChangeFlash',\n        'suppressDragLeaveHidesColumns',\n        'suppressRowGroupHidesColumns',\n        'suppressMiddleClickScrolls',\n        'suppressPreventDefaultOnMouseWheel',\n        'suppressCopyRowsToClipboard',\n        'copyHeadersToClipboard',\n        'copyGroupHeadersToClipboard',\n        'pivotMode',\n        'suppressAggFuncInHeader',\n        'suppressColumnVirtualisation',\n        'alwaysAggregateAtRootLevel',\n        'suppressFocusAfterRefresh',\n        'functionsReadOnly',\n        'animateRows',\n        'groupSelectsFiltered',\n        'groupRemoveSingleChildren',\n        'groupRemoveLowestSingleChildren',\n        'enableRtl',\n        'suppressClickEdit',\n        'rowDragEntireRow',\n        'rowDragManaged',\n        'suppressRowDrag',\n        'suppressMoveWhenRowDragging',\n        'rowDragMultiRow',\n        'enableGroupEdit',\n        'embedFullWidthRows',\n        'suppressPaginationPanel',\n        'groupHideOpenParents',\n        'groupAllowUnbalanced',\n        'pagination',\n        'paginationAutoPageSize',\n        'suppressScrollOnNewData',\n        'suppressScrollWhenPopupsAreOpen',\n        'purgeClosedRowNodes',\n        'cacheQuickFilter',\n        'includeHiddenColumnsInQuickFilter',\n        'ensureDomOrder',\n        'accentedSort',\n        'suppressChangeDetection',\n        'valueCache',\n        'valueCacheNeverExpires',\n        'aggregateOnlyChangedColumns',\n        'suppressAnimationFrame',\n        'suppressExcelExport',\n        'suppressCsvExport',\n        'includeHiddenColumnsInAdvancedFilter',\n        'suppressMultiRangeSelection',\n        'enterNavigatesVerticallyAfterEdit',\n        'enterNavigatesVertically',\n        'suppressPropertyNamesCheck',\n        'rowMultiSelectWithClick',\n        'suppressRowHoverHighlight',\n        'suppressRowTransform',\n        'suppressClipboardPaste',\n        'suppressLastEmptyLineOnPaste',\n        'enableCharts',\n        'suppressMaintainUnsortedOrder',\n        'enableCellTextSelection',\n        'suppressBrowserResizeObserver',\n        'suppressMaxRenderedRowRestriction',\n        'excludeChildrenWhenTreeDataFiltering',\n        'tooltipMouseTrack',\n        'tooltipInteraction',\n        'keepDetailRows',\n        'paginateChildRows',\n        'preventDefaultOnContextMenu',\n        'undoRedoCellEditing',\n        'allowDragFromColumnsToolPanel',\n        'pivotSuppressAutoColumn',\n        'suppressExpandablePivotGroups',\n        'debounceVerticalScrollbar',\n        'detailRowAutoHeight',\n        'serverSideSortAllLevels',\n        'serverSideEnableClientSideSort',\n        'serverSideOnlyRefreshFilteredGroups',\n        'serverSideSortOnServer',\n        'serverSideFilterOnServer',\n        'suppressAggFilteredOnly',\n        'showOpenedGroup',\n        'suppressClipboardApi',\n        'suppressModelUpdateAfterUpdateTransaction',\n        'stopEditingWhenCellsLoseFocus',\n        'maintainColumnOrder',\n        'groupMaintainOrder',\n        'columnHoverHighlight',\n        'readOnlyEdit',\n        'suppressRowVirtualisation',\n        'enableCellEditingOnBackspace',\n        'resetRowDataOnUpdate',\n        'removePivotHeaderRowWhenSingleValueColumn',\n        'suppressCopySingleCellRanges',\n        'suppressGroupRowsSticky',\n        'suppressCutToClipboard',\n        'suppressServerSideInfiniteScroll',\n        'rowGroupPanelSuppressSort',\n        'allowShowChangeAfterFilter',\n        'enableAdvancedFilter',\n        'masterDetail',\n        'treeData',\n        'suppressGroupMaintainValueType',\n        'reactiveCustomComponents',\n        'applyQuickFilterBeforePivotOrAgg',\n        'suppressServerSideFullWidthLoadingRow',\n        'suppressAdvancedFilterEval',\n        'loading',\n    ];\n\n    // If property does not fit above, i.e union that should not be coerced.\n    public static OTHER_PROPERTIES: GridOptionKey[] = ['suppressStickyTotalRow'];\n\n    public static FUNCTION_PROPERTIES: (CallbackKeys | FunctionKeys)[] = [\n        'doesExternalFilterPass',\n        'processPivotResultColDef',\n        'processPivotResultColGroupDef',\n        'getBusinessKeyForNode',\n        'isRowSelectable',\n        'rowDragText',\n        'groupRowRenderer',\n        'fullWidthCellRenderer',\n        'loadingCellRenderer',\n        'loadingOverlayComponent',\n        'noRowsOverlayComponent',\n        'detailCellRenderer',\n        'quickFilterParser',\n        'quickFilterMatcher',\n        'getLocaleText',\n        'isExternalFilterPresent',\n        'getRowHeight',\n        'getRowClass',\n        'getRowStyle',\n        'getContextMenuItems',\n        'getMainMenuItems',\n        'processRowPostCreate',\n        'processCellForClipboard',\n        'getGroupRowAgg',\n        'isFullWidthRow',\n        'sendToClipboard',\n        'focusGridInnerElement',\n        'navigateToNextHeader',\n        'tabToNextHeader',\n        'navigateToNextCell',\n        'tabToNextCell',\n        'processCellFromClipboard',\n        'getDocument',\n        'postProcessPopup',\n        'getChildCount',\n        'getDataPath',\n        'isRowMaster',\n        'postSortRows',\n        'processHeaderForClipboard',\n        'processUnpinnedColumns',\n        'processGroupHeaderForClipboard',\n        'paginationNumberFormatter',\n        'processDataFromClipboard',\n        'getServerSideGroupKey',\n        'isServerSideGroup',\n        'createChartContainer',\n        'getChartToolbarItems',\n        'fillOperation',\n        'isApplyServerSideTransaction',\n        'getServerSideGroupLevelParams',\n        'isServerSideGroupOpenByDefault',\n        'isGroupOpenByDefault',\n        'initialGroupOrderComparator',\n        'groupIncludeFooter',\n        'loadingCellRendererSelector',\n        'getRowId',\n        'groupAggFiltering',\n        'chartMenuItems',\n        'groupTotalRow',\n    ];\n\n    public static ALL_PROPERTIES: GridOptionKey[] = [\n        ...PropertyKeys.ARRAY_PROPERTIES,\n        ...PropertyKeys.OBJECT_PROPERTIES,\n        ...PropertyKeys.STRING_PROPERTIES,\n        ...PropertyKeys.NUMBER_PROPERTIES,\n        ...PropertyKeys.FUNCTION_PROPERTIES,\n        ...PropertyKeys.BOOLEAN_PROPERTIES,\n        ...PropertyKeys.OTHER_PROPERTIES,\n    ];\n}\n", "import type { GridApi } from '../api/gridApi';\nimport type { GridOptions } from '../entities/gridOptions';\nimport { ALL_EVENTS, PUBLIC_EVENTS } from '../eventTypes';\nimport type { ComponentStateChangedEvent, GridOptionsChangedEvent } from '../events';\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\nimport { PropertyKeys } from '../propertyKeys';\nimport { _iterateObject } from '../utils/object';\n\nexport class ComponentUtil {\n    public static VUE_OMITTED_PROPERTY = 'AG-VUE-OMITTED-PROPERTY';\n\n    public static PUBLIC_EVENTS = PUBLIC_EVENTS;\n\n    public static getCallbackForEvent(eventName: string): string {\n        if (!eventName || eventName.length < 2) {\n            return eventName;\n        }\n        return 'on' + eventName[0].toUpperCase() + eventName.substring(1);\n    }\n    // onXXX methods, based on the above events\n    public static EVENT_CALLBACKS: string[] = ALL_EVENTS.map((event) => ComponentUtil.getCallbackForEvent(event));\n\n    public static BOOLEAN_PROPERTIES = PropertyKeys.BOOLEAN_PROPERTIES;\n    public static ALL_PROPERTIES = PropertyKeys.ALL_PROPERTIES;\n\n    public static ALL_PROPERTIES_AND_CALLBACKS = [...this.ALL_PROPERTIES, ...this.EVENT_CALLBACKS];\n    public static ALL_PROPERTIES_AND_CALLBACKS_SET = new Set(ComponentUtil.ALL_PROPERTIES_AND_CALLBACKS);\n}\n\n/** Combines component props / attributes with the provided gridOptions returning a new combined gridOptions object */\nexport function _combineAttributesAndGridOptions(gridOptions: GridOptions | undefined, component: any): GridOptions {\n    // create empty grid options if none were passed\n    if (typeof gridOptions !== 'object') {\n        gridOptions = {} as GridOptions;\n    }\n    // shallow copy (so we don't change the provided object)\n    const mergedOptions = { ...gridOptions } as any;\n    // Vue does not have keys in prod so instead need to run through all the\n    // gridOptions checking for presence of a gridOption key.\n    const keys = ComponentUtil.ALL_PROPERTIES_AND_CALLBACKS;\n    // Loop through component props, if they are not undefined and a valid gridOption copy to gridOptions\n    keys.forEach((key) => {\n        const value = component[key];\n        if (typeof value !== 'undefined' && value !== ComponentUtil.VUE_OMITTED_PROPERTY) {\n            mergedOptions[key] = value;\n        }\n    });\n    return mergedOptions;\n}\n\nexport function _processOnChange(changes: any, api: GridApi): void {\n    if (!changes) {\n        return;\n    }\n\n    // Only process changes to properties that are part of the gridOptions\n    const gridChanges: any = {};\n    let hasChanges = false;\n    Object.keys(changes)\n        .filter((key) => ComponentUtil.ALL_PROPERTIES_AND_CALLBACKS_SET.has(key))\n        .forEach((key) => {\n            gridChanges[key] = changes[key];\n            hasChanges = true;\n        });\n\n    if (!hasChanges) {\n        return;\n    }\n\n    const internalUpdateEvent: WithoutGridCommon<GridOptionsChangedEvent> = {\n        type: 'gridOptionsChanged',\n        options: gridChanges,\n    };\n    api.dispatchEvent(internalUpdateEvent);\n\n    // copy gridChanges into an event for dispatch\n    const event: WithoutGridCommon<ComponentStateChangedEvent> = {\n        type: 'componentStateChanged',\n    };\n\n    _iterateObject(gridChanges, (key: string, value: any) => {\n        (event as any)[key] = value;\n    });\n\n    api.dispatchEvent(event);\n}\n", "export class CssClassManager {\n    private getGui: () => HTMLElement | undefined | null;\n\n    // to minimise DOM hits, we only apply CSS classes if they have changed. as adding a CSS class that is already\n    // there, or removing one that wasn't present, all takes CPU.\n    private cssClassStates: { [cssClass: string]: boolean } = {};\n\n    constructor(getGui: () => HTMLElement | undefined | null) {\n        this.getGui = getGui;\n    }\n\n    public addCssClass(className: string): void {\n        const list = (className || '').split(' ');\n\n        if (list.length > 1) {\n            list.forEach((cls) => this.addCssClass(cls));\n            return;\n        }\n\n        const updateNeeded = this.cssClassStates[className] !== true;\n        if (updateNeeded && className.length) {\n            const eGui = this.getGui();\n            if (eGui) {\n                eGui.classList.add(className);\n            }\n            this.cssClassStates[className] = true;\n        }\n    }\n\n    public removeCssClass(className: string): void {\n        const list = (className || '').split(' ');\n\n        if (list.length > 1) {\n            list.forEach((cls) => this.removeCssClass(cls));\n            return;\n        }\n\n        const updateNeeded = this.cssClassStates[className] !== false;\n        if (updateNeeded && className.length) {\n            const eGui = this.getGui();\n            if (eGui) {\n                eGui.classList.remove(className);\n            }\n\n            this.cssClassStates[className] = false;\n        }\n    }\n\n    public containsCssClass(className: string): boolean {\n        const eGui = this.getGui();\n        if (!eGui) {\n            return false;\n        }\n\n        return eGui.classList.contains(className);\n    }\n\n    public addOrRemoveCssClass(className: string, addOrRemove: boolean): void {\n        if (!className) {\n            return;\n        }\n\n        // we check for spaces before doing the split, as doing the split\n        // created a performance problem (on windows only, see AG-6765)\n        if (className.indexOf(' ') >= 0) {\n            const list = (className || '').split(' ');\n            if (list.length > 1) {\n                list.forEach((cls) => this.addOrRemoveCssClass(cls, addOrRemove));\n                return;\n            }\n        }\n\n        const updateNeeded = this.cssClassStates[className] !== addOrRemove;\n        if (updateNeeded && className.length) {\n            const eGui = this.getGui();\n            if (eGui) {\n                eGui.classList.toggle(className, addOrRemove);\n            }\n\n            this.cssClassStates[className] = addOrRemove;\n        }\n    }\n}\n", "import type { SortDirection } from '../entities/colDef';\n\nexport type ColumnSortState = 'ascending' | 'descending' | 'other' | 'none';\n\n// ARIA HELPER FUNCTIONS\nfunction _toggleAriaAttribute(element: Element, attribute: string, value?: number | boolean | string | null) {\n    if (value == null || (typeof value === 'string' && value == '')) {\n        _removeAriaAttribute(element, attribute);\n    } else {\n        _setAriaAttribute(element, attribute, value);\n    }\n}\n\nfunction _setAriaAttribute(element: Element, attribute: string, value: number | boolean | string): void {\n    element.setAttribute(_ariaAttributeName(attribute), value.toString());\n}\n\nfunction _removeAriaAttribute(element: Element, attribute: string): void {\n    element.removeAttribute(_ariaAttributeName(attribute));\n}\n\nfunction _ariaAttributeName(attribute: string) {\n    return `aria-${attribute}`;\n}\n\nexport function _setAriaRole(element: Element, role?: string | null) {\n    if (role) {\n        element.setAttribute('role', role);\n    } else {\n        element.removeAttribute('role');\n    }\n}\n\nexport function _getAriaSortState(sortDirection: SortDirection | 'mixed'): ColumnSortState {\n    let sort: ColumnSortState;\n\n    if (sortDirection === 'asc') {\n        sort = 'ascending';\n    } else if (sortDirection === 'desc') {\n        sort = 'descending';\n    } else if (sortDirection === 'mixed') {\n        sort = 'other';\n    } else {\n        sort = 'none';\n    }\n\n    return sort;\n}\n\n// ARIA ATTRIBUTE GETTERS\nexport function _getAriaLevel(element: Element): number {\n    return parseInt(element.getAttribute('aria-level')!, 10);\n}\n\nexport function _getAriaPosInSet(element: Element): number {\n    return parseInt(element.getAttribute('aria-posinset')!, 10);\n}\n\nexport function _getAriaLabel(element: Element): string | null {\n    return element.getAttribute('aria-label');\n}\n\n// ARIA ATTRIBUTE SETTERS\nexport function _setAriaLabel(element: Element, label?: string | null): void {\n    _toggleAriaAttribute(element, 'label', label);\n}\n\nexport function _setAriaLabelledBy(element: Element, labelledBy?: string): void {\n    _toggleAriaAttribute(element, 'labelledby', labelledBy);\n}\n\nexport function _setAriaDescribedBy(element: Element, describedby?: string): void {\n    _toggleAriaAttribute(element, 'describedby', describedby);\n}\n\nexport function _setAriaLive(element: Element, live?: 'polite' | 'assertive' | 'off' | null) {\n    _toggleAriaAttribute(element, 'live', live);\n}\n\nexport function _setAriaAtomic(element: Element, atomic: boolean | null) {\n    _toggleAriaAttribute(element, 'atomic', atomic);\n}\n\nexport function _setAriaRelevant(\n    element: Element,\n    relevant: 'additions' | 'additions text' | 'all' | 'removals' | 'text' | null\n) {\n    _toggleAriaAttribute(element, 'relevant', relevant);\n}\n\nexport function _setAriaLevel(element: Element, level: number): void {\n    _toggleAriaAttribute(element, 'level', level);\n}\n\nexport function _setAriaDisabled(element: Element, disabled: boolean): void {\n    _toggleAriaAttribute(element, 'disabled', disabled);\n}\n\nexport function _setAriaHidden(element: Element, hidden: boolean): void {\n    _toggleAriaAttribute(element, 'hidden', hidden);\n}\n\nexport function _setAriaActiveDescendant(element: Element, descendantId: string | null): void {\n    _toggleAriaAttribute(element, 'activedescendant', descendantId);\n}\n\nexport function _setAriaExpanded(element: Element, expanded: boolean): void {\n    _setAriaAttribute(element, 'expanded', expanded);\n}\n\nexport function _removeAriaExpanded(element: Element): void {\n    _removeAriaAttribute(element, 'expanded');\n}\n\nexport function _setAriaSetSize(element: Element, setsize: number): void {\n    _setAriaAttribute(element, 'setsize', setsize);\n}\n\nexport function _setAriaPosInSet(element: Element, position: number): void {\n    _setAriaAttribute(element, 'posinset', position);\n}\n\nexport function _setAriaMultiSelectable(element: Element, multiSelectable: boolean): void {\n    _setAriaAttribute(element, 'multiselectable', multiSelectable);\n}\n\nexport function _setAriaRowCount(element: Element, rowCount: number): void {\n    _setAriaAttribute(element, 'rowcount', rowCount);\n}\n\nexport function _setAriaRowIndex(element: Element, rowIndex: number): void {\n    _setAriaAttribute(element, 'rowindex', rowIndex);\n}\n\nexport function _setAriaColCount(element: Element, colCount: number): void {\n    _setAriaAttribute(element, 'colcount', colCount);\n}\n\nexport function _setAriaColIndex(element: Element, colIndex: number): void {\n    _setAriaAttribute(element, 'colindex', colIndex);\n}\n\nexport function _setAriaColSpan(element: Element, colSpan: number): void {\n    _setAriaAttribute(element, 'colspan', colSpan);\n}\n\nexport function _setAriaSort(element: Element, sort: ColumnSortState): void {\n    _setAriaAttribute(element, 'sort', sort);\n}\n\nexport function _removeAriaSort(element: Element): void {\n    _removeAriaAttribute(element, 'sort');\n}\n\nexport function _setAriaSelected(element: Element, selected?: boolean): void {\n    _toggleAriaAttribute(element, 'selected', selected);\n}\n\nexport function _setAriaChecked(element: Element, checked?: boolean) {\n    _setAriaAttribute(element, 'checked', checked === undefined ? 'mixed' : checked);\n}\n\nexport function _setAriaControls(controllerElement: Element, controlledElement: Element) {\n    _toggleAriaAttribute(controllerElement, 'controls', controlledElement.id);\n    _setAriaLabelledBy(controlledElement, controllerElement.id);\n}\n\nexport function _getAriaCheckboxStateName(\n    translate: (key: string, defaultValue: string, variableValues?: string[]) => string,\n    state?: boolean\n): string {\n    return state === undefined\n        ? translate('ariaIndeterminate', 'indeterminate')\n        : state === true\n          ? translate('ariaChecked', 'checked')\n          : translate('ariaUnchecked', 'unchecked');\n}\n", "/**\n * These variables are lazy loaded, as otherwise they try and get initialised when we are loading\n * unit tests and we don't have references to window or document in the unit tests\n */\nlet isSafari: boolean;\nlet safariVersion: number;\nlet isChrome: boolean;\nlet isFirefox: boolean;\nlet isMacOs: boolean;\nlet isIOS: boolean;\nlet invisibleScrollbar: boolean;\nlet browserScrollbarWidth: number;\n\nexport function _isBrowserSafari(): boolean {\n    if (isSafari === undefined) {\n        isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n    }\n    return isSafari;\n}\n\nexport function _getSafariVersion(): number {\n    if (safariVersion === undefined) {\n        if (_isBrowserSafari()) {\n            const versionMatch = navigator.userAgent.match(/version\\/(\\d+)/i);\n            if (versionMatch) {\n                safariVersion = versionMatch[1] != null ? parseFloat(versionMatch[1]) : 0;\n            }\n        } else {\n            safariVersion = 0;\n        }\n    }\n\n    return safariVersion;\n}\n\n/**\n * Returns true for Chrome and also for Edge (Chromium)\n */\nexport function _isBrowserChrome(): boolean {\n    if (isChrome === undefined) {\n        const win = window as any;\n        isChrome =\n            (!!win.chrome && (!!win.chrome.webstore || !!win.chrome.runtime)) ||\n            (/Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor));\n    }\n\n    return isChrome;\n}\n\nexport function _isBrowserFirefox(): boolean {\n    if (isFirefox === undefined) {\n        isFirefox = /(firefox)/i.test(navigator.userAgent);\n    }\n\n    return isFirefox;\n}\n\nexport function _isMacOsUserAgent(): boolean {\n    if (isMacOs === undefined) {\n        isMacOs = /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);\n    }\n\n    return isMacOs;\n}\n\nexport function _isIOSUserAgent(): boolean {\n    if (isIOS === undefined) {\n        isIOS =\n            /iPad|iPhone|iPod/.test(navigator.platform) ||\n            (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);\n    }\n\n    return isIOS;\n}\n\nexport function _browserSupportsPreventScroll(): boolean {\n    // all browsers except safari support focus({ preventScroll: true }).\n    // this feature was added on Safari 15+\n    return !_isBrowserSafari() || _getSafariVersion() >= 15;\n}\n\nexport function _getTabIndex(el: HTMLElement | null): string | null {\n    if (!el) {\n        return null;\n    }\n\n    const numberTabIndex = el.tabIndex;\n    const tabIndex = el.getAttribute('tabIndex');\n\n    if (numberTabIndex === -1 && (tabIndex === null || (tabIndex === '' && !_isBrowserFirefox()))) {\n        return null;\n    }\n\n    return numberTabIndex.toString();\n}\n\nexport function _getMaxDivHeight(): number {\n    if (!document.body) {\n        return -1;\n    }\n\n    let res = 1000000;\n    // FF reports the height back but still renders blank after ~6M px\n    const testUpTo = navigator.userAgent.toLowerCase().match(/firefox/) ? 6000000 : 1000000000;\n    const div = document.createElement('div');\n    document.body.appendChild(div);\n\n    while (true) {\n        const test = res * 2;\n        div.style.height = test + 'px';\n\n        if (test > testUpTo || div.clientHeight !== test) {\n            break;\n        } else {\n            res = test;\n        }\n    }\n\n    document.body.removeChild(div);\n\n    return res;\n}\n\nexport function _getBodyWidth(): number {\n    return document.body?.clientWidth ?? (window.innerHeight || document.documentElement?.clientWidth || -1);\n}\n\nexport function _getBodyHeight(): number {\n    return document.body?.clientHeight ?? (window.innerHeight || document.documentElement?.clientHeight || -1);\n}\n\nexport function _getScrollbarWidth(): number | null {\n    if (browserScrollbarWidth == null) {\n        initScrollbarWidthAndVisibility();\n    }\n    return browserScrollbarWidth;\n}\n\nfunction initScrollbarWidthAndVisibility(): void {\n    const body = document.body;\n    const div = document.createElement('div');\n\n    div.style.width = div.style.height = '100px';\n    div.style.opacity = '0';\n    div.style.overflow = 'scroll';\n    (div.style as any).msOverflowStyle = 'scrollbar'; // needed for WinJS apps\n    div.style.position = 'absolute';\n\n    body.appendChild(div);\n\n    let width: number | null = div.offsetWidth - div.clientWidth;\n\n    // if width is 0 and client width is 0, means the DOM isn't ready\n    if (width === 0 && div.clientWidth === 0) {\n        width = null;\n    }\n\n    // remove div\n    if (div.parentNode) {\n        div.parentNode.removeChild(div);\n    }\n\n    if (width != null) {\n        browserScrollbarWidth = width;\n        invisibleScrollbar = width === 0;\n    }\n}\n\nexport function _isInvisibleScrollbar(): boolean {\n    if (invisibleScrollbar == null) {\n        initScrollbarWidthAndVisibility();\n    }\n    return invisibleScrollbar;\n}\n", "import type { CellStyle } from '../entities/colDef';\nimport type { RowStyle } from '../entities/gridOptions';\nimport type { ICellRendererComp } from '../rendering/cellRenderers/iCellRenderer';\nimport { _setAriaHidden } from './aria';\nimport { _isBrowserChrome, _isBrowserSafari } from './browser';\nimport type { AgPromise } from './promise';\nimport { _camelCaseToHyphenated } from './string';\n\nlet rtlNegativeScroll: boolean;\n\n/**\n * This method adds a class to an element and remove that class from all siblings.\n * Useful for toggling state.\n * @param {HTMLElement} element The element to receive the class\n * @param {string} elementClass The class to be assigned to the element\n * @param {boolean} otherElementClass The class to be assigned to siblings of the element, but not the element itself\n */\nexport function _radioCssClass(element: HTMLElement, elementClass: string | null, otherElementClass?: string | null) {\n    const parent = element.parentElement;\n    let sibling = parent && (parent.firstChild as HTMLElement);\n\n    while (sibling) {\n        if (elementClass) {\n            sibling.classList.toggle(elementClass, sibling === element);\n        }\n        if (otherElementClass) {\n            sibling.classList.toggle(otherElementClass, sibling !== element);\n        }\n        sibling = sibling.nextSibling as HTMLElement;\n    }\n}\n\nexport const FOCUSABLE_SELECTOR = '[tabindex], input, select, button, textarea, [href]';\nexport const FOCUSABLE_EXCLUDE = '[disabled], .ag-disabled:not(.ag-button), .ag-disabled *';\n\nexport function _isFocusableFormField(element: HTMLElement): boolean {\n    const matches: (str: string) => boolean = Element.prototype.matches || (Element as any).prototype.msMatchesSelector;\n\n    const inputSelector = 'input, select, button, textarea';\n    const isFocusable = matches.call(element, inputSelector);\n    const isNotFocusable = matches.call(element, FOCUSABLE_EXCLUDE);\n    const isElementVisible = _isVisible(element);\n\n    const focusable = isFocusable && !isNotFocusable && isElementVisible;\n\n    return focusable;\n}\n\nexport function _setDisplayed(element: Element, displayed: boolean, options: { skipAriaHidden?: boolean } = {}) {\n    const { skipAriaHidden } = options;\n    element.classList.toggle('ag-hidden', !displayed);\n    if (!skipAriaHidden) {\n        _setAriaHidden(element, !displayed);\n    }\n}\n\nexport function _setVisible(element: HTMLElement, visible: boolean, options: { skipAriaHidden?: boolean } = {}) {\n    const { skipAriaHidden } = options;\n    element.classList.toggle('ag-invisible', !visible);\n    if (!skipAriaHidden) {\n        _setAriaHidden(element, !visible);\n    }\n}\n\nexport function _setDisabled(element: HTMLElement, disabled: boolean) {\n    const attributeName = 'disabled';\n    const addOrRemoveDisabledAttribute = disabled\n        ? (e: HTMLElement) => e.setAttribute(attributeName, '')\n        : (e: HTMLElement) => e.removeAttribute(attributeName);\n\n    addOrRemoveDisabledAttribute(element);\n\n    _nodeListForEach(element.querySelectorAll('input'), (input) => addOrRemoveDisabledAttribute(input));\n}\n\nexport function _isElementChildOfClass(\n    element: HTMLElement | null,\n    cls: string,\n    maxNest?: HTMLElement | number\n): boolean {\n    let counter = 0;\n\n    while (element) {\n        if (element.classList.contains(cls)) {\n            return true;\n        }\n\n        element = element.parentElement;\n\n        if (typeof maxNest == 'number') {\n            if (++counter > maxNest) {\n                break;\n            }\n        } else if (element === maxNest) {\n            break;\n        }\n    }\n\n    return false;\n}\n\n// returns back sizes as doubles instead of strings. similar to\n// getBoundingClientRect, however getBoundingClientRect does not:\n// a) work with fractions (eg browser is zooming)\n// b) has CSS transitions applied (eg CSS scale, browser zoom), which we don't want, we want the un-transitioned values\nexport function _getElementSize(el: HTMLElement): {\n    height: number;\n    width: number;\n    borderTopWidth: number;\n    borderRightWidth: number;\n    borderBottomWidth: number;\n    borderLeftWidth: number;\n    paddingTop: number;\n    paddingRight: number;\n    paddingBottom: number;\n    paddingLeft: number;\n    marginTop: number;\n    marginRight: number;\n    marginBottom: number;\n    marginLeft: number;\n    boxSizing: string;\n} {\n    const {\n        height,\n        width,\n        borderTopWidth,\n        borderRightWidth,\n        borderBottomWidth,\n        borderLeftWidth,\n        paddingTop,\n        paddingRight,\n        paddingBottom,\n        paddingLeft,\n        marginTop,\n        marginRight,\n        marginBottom,\n        marginLeft,\n        boxSizing,\n    } = window.getComputedStyle(el);\n\n    return {\n        height: parseFloat(height || '0'),\n        width: parseFloat(width || '0'),\n        borderTopWidth: parseFloat(borderTopWidth || '0'),\n        borderRightWidth: parseFloat(borderRightWidth || '0'),\n        borderBottomWidth: parseFloat(borderBottomWidth || '0'),\n        borderLeftWidth: parseFloat(borderLeftWidth || '0'),\n        paddingTop: parseFloat(paddingTop || '0'),\n        paddingRight: parseFloat(paddingRight || '0'),\n        paddingBottom: parseFloat(paddingBottom || '0'),\n        paddingLeft: parseFloat(paddingLeft || '0'),\n        marginTop: parseFloat(marginTop || '0'),\n        marginRight: parseFloat(marginRight || '0'),\n        marginBottom: parseFloat(marginBottom || '0'),\n        marginLeft: parseFloat(marginLeft || '0'),\n        boxSizing,\n    };\n}\n\nexport function _getInnerHeight(el: HTMLElement): number {\n    const size = _getElementSize(el);\n\n    if (size.boxSizing === 'border-box') {\n        return size.height - size.paddingTop - size.paddingBottom;\n    }\n\n    return size.height;\n}\n\nexport function _getInnerWidth(el: HTMLElement): number {\n    const size = _getElementSize(el);\n\n    if (size.boxSizing === 'border-box') {\n        return size.width - size.paddingLeft - size.paddingRight;\n    }\n\n    return size.width;\n}\n\nexport function _getAbsoluteHeight(el: HTMLElement): number {\n    const { height, marginBottom, marginTop } = _getElementSize(el);\n\n    return Math.floor(height + marginBottom + marginTop);\n}\n\nexport function _getAbsoluteWidth(el: HTMLElement): number {\n    const { width, marginLeft, marginRight } = _getElementSize(el);\n\n    return Math.floor(width + marginLeft + marginRight);\n}\n\nexport function _getElementRectWithOffset(el: HTMLElement): {\n    top: number;\n    left: number;\n    right: number;\n    bottom: number;\n} {\n    const offsetElementRect = el.getBoundingClientRect();\n    const { borderTopWidth, borderLeftWidth, borderRightWidth, borderBottomWidth } = _getElementSize(el);\n\n    return {\n        top: offsetElementRect.top + (borderTopWidth || 0),\n        left: offsetElementRect.left + (borderLeftWidth || 0),\n        right: offsetElementRect.right + (borderRightWidth || 0),\n        bottom: offsetElementRect.bottom + (borderBottomWidth || 0),\n    };\n}\n\nexport function _isRtlNegativeScroll(): boolean {\n    if (typeof rtlNegativeScroll === 'boolean') {\n        return rtlNegativeScroll;\n    }\n\n    const template = document.createElement('div');\n    template.style.direction = 'rtl';\n    template.style.width = '1px';\n    template.style.height = '1px';\n    template.style.position = 'fixed';\n    template.style.top = '0px';\n    template.style.overflow = 'hidden';\n    template.dir = 'rtl';\n    template.innerHTML =\n        /* html */\n        `<div style=\"width: 2px\">\n            <span style=\"display: inline-block; width: 1px\"></span>\n            <span style=\"display: inline-block; width: 1px\"></span>\n        </div>`;\n\n    document.body.appendChild(template);\n\n    template.scrollLeft = 1;\n    rtlNegativeScroll = Math.floor(template.scrollLeft) === 0;\n    document.body.removeChild(template);\n\n    return rtlNegativeScroll;\n}\n\nexport function _getScrollLeft(element: HTMLElement, rtl: boolean): number {\n    let scrollLeft = element.scrollLeft;\n\n    if (rtl) {\n        // Absolute value - for FF that reports RTL scrolls in negative numbers\n        scrollLeft = Math.abs(scrollLeft);\n\n        if (_isBrowserChrome() && !_isRtlNegativeScroll()) {\n            scrollLeft = element.scrollWidth - element.clientWidth - scrollLeft;\n        }\n    }\n\n    return scrollLeft;\n}\n\nexport function _setScrollLeft(element: HTMLElement, value: number, rtl: boolean): void {\n    if (rtl) {\n        // Chrome and Safari when doing RTL have the END position of the scroll as zero, not the start\n        if (_isRtlNegativeScroll()) {\n            value *= -1;\n        } else if (_isBrowserSafari() || _isBrowserChrome()) {\n            value = element.scrollWidth - element.clientWidth - value;\n        }\n    }\n    element.scrollLeft = value;\n}\n\nexport function _clearElement(el: HTMLElement): void {\n    while (el && el.firstChild) {\n        el.removeChild(el.firstChild);\n    }\n}\n\nexport function _removeFromParent(node: Element | null) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n\nexport function _isInDOM(element: HTMLElement): boolean {\n    return !!element.offsetParent;\n}\n\nexport function _isVisible(element: HTMLElement) {\n    const el = element as any;\n    if (el.checkVisibility) {\n        return el.checkVisibility({ checkVisibilityCSS: true });\n    }\n\n    const isHidden = !_isInDOM(element) || window.getComputedStyle(element).visibility !== 'visible';\n    return !isHidden;\n}\n\n/**\n * Loads the template and returns it as an element. makes up for no simple way in\n * the dom api to load html directly, eg we cannot do this: document.createElement(template)\n * @param {string} template\n * @returns {HTMLElement}\n */\nexport function _loadTemplate(template: string): HTMLElement {\n    const tempDiv = document.createElement('div');\n    tempDiv.innerHTML = (template || '').trim();\n\n    return tempDiv.firstChild as HTMLElement;\n}\n\nexport function _ensureDomOrder(eContainer: HTMLElement, eChild: HTMLElement, eChildBefore?: HTMLElement | null): void {\n    // if already in right order, do nothing\n    if (eChildBefore && eChildBefore.nextSibling === eChild) {\n        return;\n    }\n\n    if (eChildBefore) {\n        if (eChildBefore.nextSibling) {\n            // insert between the eRowBefore and the row after it\n            eContainer.insertBefore(eChild, eChildBefore.nextSibling);\n        } else {\n            // if nextSibling is missing, means other row is at end, so just append new row at the end\n            eContainer.appendChild(eChild);\n        }\n    } else {\n        // otherwise put at start\n        if (eContainer.firstChild && eContainer.firstChild !== eChild) {\n            // insert it at the first location\n            eContainer.insertAdjacentElement('afterbegin', eChild);\n        }\n    }\n}\n\nexport function _setDomChildOrder(eContainer: HTMLElement, orderedChildren: (HTMLElement | null)[]): void {\n    for (let i = 0; i < orderedChildren.length; i++) {\n        const correctCellAtIndex = orderedChildren[i];\n        const actualCellAtIndex = eContainer.children[i];\n\n        if (actualCellAtIndex !== correctCellAtIndex) {\n            eContainer.insertBefore(correctCellAtIndex!, actualCellAtIndex);\n        }\n    }\n}\n\nexport function _insertWithDomOrder(\n    eContainer: HTMLElement,\n    eToInsert: HTMLElement,\n    eChildBefore: HTMLElement | null\n): void {\n    if (eChildBefore) {\n        // if previous element exists, just slot in after the previous element\n        eChildBefore.insertAdjacentElement('afterend', eToInsert);\n    } else {\n        if (eContainer.firstChild) {\n            // insert it at the first location\n            eContainer.insertAdjacentElement('afterbegin', eToInsert);\n        } else {\n            // otherwise eContainer is empty, so just append it\n            eContainer.appendChild(eToInsert);\n        }\n    }\n}\n\nexport function _addStylesToElement(eElement: any, styles: RowStyle | CellStyle | null | undefined) {\n    if (!styles) {\n        return;\n    }\n\n    for (const [key, value] of Object.entries(styles)) {\n        if (!key || !key.length || value == null) {\n            continue;\n        }\n\n        // changes the key from camelCase into a hyphenated-string\n        const parsedKey = _camelCaseToHyphenated(key);\n        const valueAsString = value.toString();\n        const parsedValue = valueAsString.replace(/\\s*!important/g, '');\n        const priority = parsedValue.length != valueAsString.length ? 'important' : undefined;\n\n        eElement.style.setProperty(parsedKey, parsedValue, priority);\n    }\n}\n\nexport function _isHorizontalScrollShowing(element: HTMLElement): boolean {\n    return element.clientWidth < element.scrollWidth;\n}\n\nexport function _isVerticalScrollShowing(element: HTMLElement): boolean {\n    return element.clientHeight < element.scrollHeight;\n}\n\nexport function _setElementWidth(element: HTMLElement, width: string | number) {\n    if (width === 'flex') {\n        element.style.removeProperty('width');\n        element.style.removeProperty('minWidth');\n        element.style.removeProperty('maxWidth');\n        element.style.flex = '1 1 auto';\n    } else {\n        _setFixedWidth(element, width);\n    }\n}\n\nexport function _setFixedWidth(element: HTMLElement, width: string | number) {\n    width = _formatSize(width);\n    element.style.width = width.toString();\n    element.style.maxWidth = width.toString();\n    element.style.minWidth = width.toString();\n}\n\nexport function _setElementHeight(element: HTMLElement, height: string | number) {\n    if (height === 'flex') {\n        element.style.removeProperty('height');\n        element.style.removeProperty('minHeight');\n        element.style.removeProperty('maxHeight');\n        element.style.flex = '1 1 auto';\n    } else {\n        _setFixedHeight(element, height);\n    }\n}\n\nexport function _setFixedHeight(element: HTMLElement, height: string | number) {\n    height = _formatSize(height);\n    element.style.height = height.toString();\n    element.style.maxHeight = height.toString();\n    element.style.minHeight = height.toString();\n}\n\nexport function _formatSize(size: number | string) {\n    if (typeof size === 'number') {\n        return `${size}px`;\n    }\n\n    return size;\n}\n\nexport function _isNodeOrElement(o: any): o is Node | Element {\n    return o instanceof Node || o instanceof HTMLElement;\n}\n\n/**\n * Makes a copy of a node list into a list\n * @param {NodeList} nodeList\n * @returns {Node[]}\n */\nexport function _copyNodeList(nodeList: NodeListOf<Node> | null): Node[] {\n    if (nodeList == null) {\n        return [];\n    }\n\n    const result: Node[] = [];\n\n    _nodeListForEach(nodeList, (node) => result.push(node));\n\n    return result;\n}\n\nexport function _iterateNamedNodeMap(map: NamedNodeMap, callback: (key: string, value: string) => void): void {\n    if (!map) {\n        return;\n    }\n\n    for (let i = 0; i < map.length; i++) {\n        const attr = map[i];\n        callback(attr.name, attr.value);\n    }\n}\n\nexport function _addOrRemoveAttribute(element: HTMLElement, name: string, value: any) {\n    if (value == null) {\n        element.removeAttribute(name);\n    } else {\n        element.setAttribute(name, value.toString());\n    }\n}\n\nexport function _nodeListForEach<T extends Node>(nodeList: NodeListOf<T> | null, action: (value: T) => void): void {\n    if (nodeList == null) {\n        return;\n    }\n\n    for (let i = 0; i < nodeList.length; i++) {\n        action(nodeList[i]);\n    }\n}\n\n/**\n * cell renderers are used in a few places. they bind to dom slightly differently to other cell renders as they\n * can return back strings (instead of html element) in the getGui() method. common code placed here to handle that.\n * @param {AgPromise<ICellRendererComp>} cellRendererPromise\n * @param {HTMLElement} eTarget\n */\nexport function _bindCellRendererToHtmlElement(\n    cellRendererPromise: AgPromise<ICellRendererComp>,\n    eTarget: HTMLElement\n) {\n    cellRendererPromise.then((cellRenderer) => {\n        const gui: HTMLElement | string = cellRenderer!.getGui();\n\n        if (gui != null) {\n            if (typeof gui === 'object') {\n                eTarget.appendChild(gui);\n            } else {\n                eTarget.innerHTML = gui;\n            }\n        }\n    });\n}\n", "export class NumberSequence {\n    private nextValue: number;\n    private step: number;\n\n    constructor(initValue = 0, step = 1) {\n        this.nextValue = initValue;\n        this.step = step;\n    }\n\n    public next(): number {\n        const valToReturn = this.nextValue;\n        this.nextValue += this.step;\n        return valToReturn;\n    }\n\n    public peek(): number {\n        return this.nextValue;\n    }\n\n    public skip(count: number): void {\n        this.nextValue += count;\n    }\n}\n", "import type { UserComponentFactory } from '../components/framework/userComponentFactory';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { TooltipHideEvent, TooltipShowEvent } from '../events';\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\nimport type { ITooltipComp, ITooltipParams } from '../rendering/tooltipComponent';\nimport { _isIOSUserAgent } from '../utils/browser';\nimport { _warnOnce } from '../utils/function';\nimport { _exists } from '../utils/generic';\nimport type { PopupService } from './popupService';\n\nexport interface TooltipParentComp {\n    getTooltipParams(): WithoutGridCommon<ITooltipParams>;\n    getGui(): HTMLElement;\n}\n\nenum TooltipStates {\n    NOTHING,\n    WAITING_TO_SHOW,\n    SHOWING,\n}\nenum TooltipTrigger {\n    HOVER,\n    FOCUS,\n}\n\nconst SHOW_QUICK_TOOLTIP_DIFF = 1000;\nconst FADE_OUT_TOOLTIP_TIMEOUT = 1000;\nconst INTERACTIVE_HIDE_DELAY = 100;\n\nexport class TooltipStateManager extends BeanStub {\n    private popupService: PopupService;\n    private userComponentFactory: UserComponentFactory;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.popupService = beans.popupService;\n        this.userComponentFactory = beans.userComponentFactory;\n    }\n\n    // different instances of tooltipFeature use this to see when the\n    // last tooltip was hidden.\n    private static lastTooltipHideTime: number;\n    private static isLocked = false;\n\n    private showTooltipTimeoutId: number | undefined;\n    private hideTooltipTimeoutId: number | undefined;\n    private interactiveTooltipTimeoutId: number | undefined;\n\n    private interactionEnabled = false;\n    private isInteractingWithTooltip = false;\n\n    private state = TooltipStates.NOTHING;\n\n    private lastMouseEvent: MouseEvent | null;\n\n    private tooltipComp: ITooltipComp | undefined;\n    private tooltipPopupDestroyFunc: (() => void) | undefined;\n    // when showing the tooltip, we need to make sure it's the most recent instance we request, as due to\n    // async we could request two tooltips before the first instance returns, in which case we should\n    // disregard the second instance.\n    private tooltipInstanceCount = 0;\n    private tooltipMouseTrack: boolean = false;\n    private tooltipTrigger: TooltipTrigger;\n\n    private tooltipMouseEnterListener: (() => null) | null;\n    private tooltipMouseLeaveListener: (() => null) | null;\n    private tooltipFocusInListener: (() => null) | null;\n    private tooltipFocusOutListener: (() => null) | null;\n\n    private onBodyScrollEventCallback: (() => null) | undefined;\n    private onColumnMovedEventCallback: (() => null) | undefined;\n\n    constructor(\n        private parentComp: TooltipParentComp,\n        private tooltipShowDelayOverride?: number,\n        private tooltipHideDelayOverride?: number,\n        private shouldDisplayTooltip?: () => boolean\n    ) {\n        super();\n    }\n\n    public postConstruct(): void {\n        if (this.gos.get('tooltipInteraction')) {\n            this.interactionEnabled = true;\n        }\n\n        this.tooltipTrigger = this.getTooltipTrigger();\n        this.tooltipMouseTrack = this.gos.get('tooltipMouseTrack');\n\n        const el = this.parentComp.getGui();\n\n        if (this.tooltipTrigger === TooltipTrigger.HOVER) {\n            this.addManagedListeners(el, {\n                mouseenter: this.onMouseEnter.bind(this),\n                mouseleave: this.onMouseLeave.bind(this),\n            });\n        }\n\n        if (this.tooltipTrigger === TooltipTrigger.FOCUS) {\n            this.addManagedListeners(el, {\n                focusin: this.onFocusIn.bind(this),\n                focusout: this.onFocusOut.bind(this),\n            });\n        }\n\n        this.addManagedListeners(el, { mousemove: this.onMouseMove.bind(this) });\n\n        if (!this.interactionEnabled) {\n            this.addManagedListeners(el, {\n                mousedown: this.onMouseDown.bind(this),\n                keydown: this.onKeyDown.bind(this),\n            });\n        }\n    }\n\n    private getGridOptionsTooltipDelay(delayOption: 'tooltipShowDelay' | 'tooltipHideDelay'): number {\n        const delay = this.gos.get(delayOption);\n        if (delay < 0) {\n            _warnOnce(`${delayOption} should not be lower than 0`);\n        }\n        return Math.max(200, delay);\n    }\n\n    private getTooltipDelay(type: 'show' | 'hide'): number {\n        if (type === 'show') {\n            return this.tooltipShowDelayOverride ?? this.getGridOptionsTooltipDelay('tooltipShowDelay')!;\n        }\n\n        return this.tooltipHideDelayOverride ?? this.getGridOptionsTooltipDelay('tooltipHideDelay')!;\n    }\n\n    public override destroy(): void {\n        // if this component gets destroyed while tooltip is showing, need to make sure\n        // we don't end with no mouseLeave event resulting in zombie tooltip\n        this.setToDoNothing();\n        super.destroy();\n    }\n\n    private getTooltipTrigger(): TooltipTrigger {\n        const trigger = this.gos.get('tooltipTrigger');\n\n        if (!trigger || trigger === 'hover') {\n            return TooltipTrigger.HOVER;\n        }\n\n        return TooltipTrigger.FOCUS;\n    }\n\n    public onMouseEnter(e: MouseEvent): void {\n        // if `interactiveTooltipTimeoutId` is set, it means that this cell has a tooltip\n        // and we are in the process of moving the cursor from the tooltip back to the cell\n        // so we need to unlock this service here.\n        if (this.interactionEnabled && this.interactiveTooltipTimeoutId) {\n            this.unlockService();\n            this.startHideTimeout();\n        }\n\n        if (_isIOSUserAgent()) {\n            return;\n        }\n\n        if (TooltipStateManager.isLocked) {\n            this.showTooltipTimeoutId = window.setTimeout(() => {\n                this.prepareToShowTooltip(e);\n            }, INTERACTIVE_HIDE_DELAY);\n        } else {\n            this.prepareToShowTooltip(e);\n        }\n    }\n\n    private onMouseMove(e: MouseEvent): void {\n        // there is a delay from the time we mouseOver a component and the time the\n        // tooltip is displayed, so we need to track mousemove to be able to correctly\n        // position the tooltip when showTooltip is called.\n        if (this.lastMouseEvent) {\n            this.lastMouseEvent = e;\n        }\n\n        if (this.tooltipMouseTrack && this.state === TooltipStates.SHOWING && this.tooltipComp) {\n            this.positionTooltip();\n        }\n    }\n\n    private onMouseDown(): void {\n        this.setToDoNothing();\n    }\n\n    private onMouseLeave(): void {\n        // if interaction is enabled, we need to verify if the user is moving\n        // the cursor from the cell onto the tooltip, so we lock the service\n        // for 100ms to prevent other tooltips from being created while this is happening.\n        if (this.interactionEnabled) {\n            this.lockService();\n        } else {\n            this.setToDoNothing();\n        }\n    }\n\n    private onFocusIn(): void {\n        this.prepareToShowTooltip();\n    }\n\n    private onFocusOut(e: FocusEvent): void {\n        const relatedTarget = e.relatedTarget as Element;\n        const parentCompGui = this.parentComp.getGui();\n        const tooltipGui = this.tooltipComp?.getGui();\n\n        if (\n            this.isInteractingWithTooltip ||\n            parentCompGui.contains(relatedTarget) ||\n            (this.interactionEnabled && tooltipGui?.contains(relatedTarget))\n        ) {\n            return;\n        }\n\n        this.setToDoNothing();\n    }\n\n    private onKeyDown(): void {\n        this.setToDoNothing();\n    }\n\n    private prepareToShowTooltip(mouseEvent?: MouseEvent): void {\n        // every mouseenter should be following by a mouseleave, however for some unknown, it's possible for\n        // mouseenter to be called twice in a row, which can happen if editing the cell. this was reported\n        // in https://ag-grid.atlassian.net/browse/AG-4422. to get around this, we check the state, and if\n        // state is != nothing, then we know mouseenter was already received.\n        if (this.state != TooltipStates.NOTHING || TooltipStateManager.isLocked) {\n            return;\n        }\n\n        // if we are showing the tooltip because of focus, no delay at all\n        // if another tooltip was hidden very recently, we only wait 200ms to show, not the normal waiting time\n        let delay = 0;\n        if (mouseEvent) {\n            delay = this.isLastTooltipHiddenRecently() ? 200 : this.getTooltipDelay('show');\n        }\n\n        this.lastMouseEvent = mouseEvent || null;\n\n        this.showTooltipTimeoutId = window.setTimeout(this.showTooltip.bind(this), delay);\n        this.state = TooltipStates.WAITING_TO_SHOW;\n    }\n\n    private isLastTooltipHiddenRecently(): boolean {\n        // return true if <1000ms since last time we hid a tooltip\n        const now = new Date().getTime();\n        const then = TooltipStateManager.lastTooltipHideTime;\n\n        return now - then < SHOW_QUICK_TOOLTIP_DIFF;\n    }\n\n    private setToDoNothing(): void {\n        if (this.state === TooltipStates.SHOWING) {\n            this.hideTooltip();\n        }\n\n        if (this.onBodyScrollEventCallback) {\n            this.onBodyScrollEventCallback();\n            this.onBodyScrollEventCallback = undefined;\n        }\n\n        if (this.onColumnMovedEventCallback) {\n            this.onColumnMovedEventCallback();\n            this.onColumnMovedEventCallback = undefined;\n        }\n\n        this.clearTimeouts();\n        this.state = TooltipStates.NOTHING;\n        this.lastMouseEvent = null;\n    }\n\n    private showTooltip(): void {\n        const params: WithoutGridCommon<ITooltipParams> = {\n            ...this.parentComp.getTooltipParams(),\n        };\n\n        if (!_exists(params.value) || (this.shouldDisplayTooltip && !this.shouldDisplayTooltip())) {\n            this.setToDoNothing();\n            return;\n        }\n\n        this.state = TooltipStates.SHOWING;\n        this.tooltipInstanceCount++;\n\n        // we pass in tooltipInstanceCount so the callback knows what the count was when\n        // we requested the tooltip, so if another tooltip was requested in the mean time\n        // we disregard it\n        const callback = this.newTooltipComponentCallback.bind(this, this.tooltipInstanceCount);\n\n        const userDetails = this.userComponentFactory.getTooltipCompDetails(params);\n        userDetails.newAgStackInstance()!.then(callback);\n    }\n\n    public hideTooltip(forceHide?: boolean): void {\n        if (!forceHide && this.isInteractingWithTooltip) {\n            return;\n        }\n        // check if comp exists - due to async, although we asked for\n        // one, the instance may not be back yet\n        if (this.tooltipComp) {\n            this.destroyTooltipComp();\n            TooltipStateManager.lastTooltipHideTime = new Date().getTime();\n        }\n\n        const event: WithoutGridCommon<TooltipHideEvent> = {\n            type: 'tooltipHide',\n            parentGui: this.parentComp.getGui(),\n        };\n        this.eventService.dispatchEvent(event);\n\n        if (forceHide) {\n            this.isInteractingWithTooltip = false;\n        }\n\n        this.state = TooltipStates.NOTHING;\n    }\n\n    private newTooltipComponentCallback(tooltipInstanceCopy: number, tooltipComp: ITooltipComp): void {\n        const compNoLongerNeeded =\n            this.state !== TooltipStates.SHOWING || this.tooltipInstanceCount !== tooltipInstanceCopy;\n\n        if (compNoLongerNeeded) {\n            this.destroyBean(tooltipComp);\n            return;\n        }\n\n        const eGui = tooltipComp.getGui();\n\n        this.tooltipComp = tooltipComp;\n\n        if (!eGui.classList.contains('ag-tooltip')) {\n            eGui.classList.add('ag-tooltip-custom');\n        }\n\n        if (this.tooltipTrigger === TooltipTrigger.HOVER) {\n            eGui.classList.add('ag-tooltip-animate');\n        }\n\n        if (this.interactionEnabled) {\n            eGui.classList.add('ag-tooltip-interactive');\n        }\n\n        const translate = this.localeService.getLocaleTextFunc();\n\n        const addPopupRes = this.popupService.addPopup({\n            eChild: eGui,\n            ariaLabel: translate('ariaLabelTooltip', 'Tooltip'),\n        });\n        if (addPopupRes) {\n            this.tooltipPopupDestroyFunc = addPopupRes.hideFunc;\n        }\n\n        this.positionTooltip();\n\n        if (this.tooltipTrigger === TooltipTrigger.FOCUS) {\n            const listener = this.setToDoNothing.bind(this);\n            [this.onBodyScrollEventCallback, this.onColumnMovedEventCallback] = this.addManagedEventListeners({\n                bodyScroll: listener,\n                columnMoved: listener,\n            });\n        }\n\n        if (this.interactionEnabled) {\n            if (this.tooltipTrigger === TooltipTrigger.HOVER) {\n                [this.tooltipMouseEnterListener, this.tooltipMouseLeaveListener] = this.addManagedElementListeners(\n                    eGui,\n                    {\n                        mouseenter: this.onTooltipMouseEnter.bind(this),\n                        mouseleave: this.onTooltipMouseLeave.bind(this),\n                    }\n                );\n            } else {\n                [this.tooltipFocusInListener, this.tooltipFocusOutListener] = this.addManagedElementListeners(eGui, {\n                    focusin: this.onTooltipFocusIn.bind(this),\n                    focusout: this.onTooltipFocusOut.bind(this),\n                });\n            }\n        }\n\n        const event: WithoutGridCommon<TooltipShowEvent> = {\n            type: 'tooltipShow',\n            tooltipGui: eGui,\n            parentGui: this.parentComp.getGui(),\n        };\n        this.eventService.dispatchEvent(event);\n\n        this.startHideTimeout();\n    }\n\n    private onTooltipMouseEnter(): void {\n        this.isInteractingWithTooltip = true;\n        this.unlockService();\n    }\n\n    private onTooltipMouseLeave(): void {\n        this.isInteractingWithTooltip = false;\n        this.lockService();\n    }\n\n    private onTooltipFocusIn(): void {\n        this.isInteractingWithTooltip = true;\n    }\n\n    private onTooltipFocusOut(e: FocusEvent): void {\n        const parentGui = this.parentComp.getGui();\n        const tooltipGui = this.tooltipComp?.getGui();\n        const relatedTarget = e.relatedTarget as Element;\n\n        // focusout is dispatched when inner elements lose focus\n        // so we need to verify if focus is contained within the tooltip\n        if (tooltipGui?.contains(relatedTarget)) {\n            return;\n        }\n\n        this.isInteractingWithTooltip = false;\n\n        // if we move the focus from the tooltip back to the original cell\n        // the tooltip should remain open, but we need to restart the hide timeout counter\n        if (parentGui.contains(relatedTarget)) {\n            this.startHideTimeout();\n        }\n        // if the parent cell doesn't contain the focus, simply hide the tooltip\n        else {\n            this.hideTooltip();\n        }\n    }\n\n    private positionTooltip(): void {\n        const params = {\n            type: 'tooltip',\n            ePopup: this.tooltipComp!.getGui(),\n            nudgeY: 18,\n            skipObserver: this.tooltipMouseTrack,\n        };\n\n        if (this.lastMouseEvent) {\n            this.popupService.positionPopupUnderMouseEvent({\n                ...params,\n                mouseEvent: this.lastMouseEvent,\n            });\n        } else {\n            this.popupService.positionPopupByComponent({\n                ...params,\n                eventSource: this.parentComp.getGui(),\n                position: 'under',\n                keepWithinBounds: true,\n                nudgeY: 5,\n            });\n        }\n    }\n\n    private destroyTooltipComp(): void {\n        // add class to fade out the tooltip\n        this.tooltipComp!.getGui().classList.add('ag-tooltip-hiding');\n\n        // make local copies of these variables, as we use them in the async function below,\n        // and we clear then to 'undefined' later, so need to take a copy before they are undefined.\n        const tooltipPopupDestroyFunc = this.tooltipPopupDestroyFunc;\n        const tooltipComp = this.tooltipComp;\n        const delay = this.tooltipTrigger === TooltipTrigger.HOVER ? FADE_OUT_TOOLTIP_TIMEOUT : 0;\n\n        window.setTimeout(() => {\n            tooltipPopupDestroyFunc!();\n            this.destroyBean(tooltipComp);\n        }, delay);\n\n        this.clearTooltipListeners();\n        this.tooltipPopupDestroyFunc = undefined;\n        this.tooltipComp = undefined;\n    }\n\n    private clearTooltipListeners(): void {\n        [\n            this.tooltipMouseEnterListener,\n            this.tooltipMouseLeaveListener,\n            this.tooltipFocusInListener,\n            this.tooltipFocusOutListener,\n        ].forEach((listener) => {\n            if (listener) {\n                listener();\n            }\n        });\n\n        this.tooltipMouseEnterListener =\n            this.tooltipMouseLeaveListener =\n            this.tooltipFocusInListener =\n            this.tooltipFocusOutListener =\n                null;\n    }\n\n    private lockService(): void {\n        TooltipStateManager.isLocked = true;\n        this.interactiveTooltipTimeoutId = window.setTimeout(() => {\n            this.unlockService();\n            this.setToDoNothing();\n        }, INTERACTIVE_HIDE_DELAY);\n    }\n\n    private unlockService(): void {\n        TooltipStateManager.isLocked = false;\n        this.clearInteractiveTimeout();\n    }\n\n    private startHideTimeout(): void {\n        this.clearHideTimeout();\n        this.hideTooltipTimeoutId = window.setTimeout(this.hideTooltip.bind(this), this.getTooltipDelay('hide'));\n    }\n\n    private clearShowTimeout(): void {\n        if (!this.showTooltipTimeoutId) {\n            return;\n        }\n        window.clearTimeout(this.showTooltipTimeoutId);\n        this.showTooltipTimeoutId = undefined;\n    }\n\n    private clearHideTimeout(): void {\n        if (!this.hideTooltipTimeoutId) {\n            return;\n        }\n        window.clearTimeout(this.hideTooltipTimeoutId);\n        this.hideTooltipTimeoutId = undefined;\n    }\n\n    private clearInteractiveTimeout(): void {\n        if (!this.interactiveTooltipTimeoutId) {\n            return;\n        }\n        window.clearTimeout(this.interactiveTooltipTimeoutId);\n        this.interactiveTooltipTimeoutId = undefined;\n    }\n\n    private clearTimeouts(): void {\n        this.clearShowTimeout();\n        this.clearHideTimeout();\n        this.clearInteractiveTimeout();\n    }\n}\n", "import { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { AgColumnGroup } from '../entities/agColumnGroup';\nimport type { ColDef, ColGroupDef } from '../entities/colDef';\nimport type { RowNode } from '../entities/rowNode';\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\nimport type { ITooltipParams, TooltipLocation } from '../rendering/tooltipComponent';\nimport type { TooltipParentComp } from './tooltipStateManager';\nimport { TooltipStateManager } from './tooltipStateManager';\n\nexport interface ITooltipFeatureCtrl {\n    getTooltipValue(): any;\n    getGui(): HTMLElement;\n    getLocation(): TooltipLocation;\n\n    getColumn?(): AgColumn | AgColumnGroup;\n    getColDef?(): ColDef | ColGroupDef;\n    getRowIndex?(): number;\n    getRowNode?(): RowNode;\n\n    // this makes no sense, why is the cell formatted value passed to the tooltip???\n    getValueFormatted?(): string;\n    getTooltipShowDelayOverride?(): number;\n    getTooltipHideDelayOverride?(): number;\n    shouldDisplayTooltip?(): boolean;\n}\n\nexport class TooltipFeature extends BeanStub {\n    private beans: BeanCollection;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.beans = beans;\n    }\n\n    private tooltip: any;\n\n    private tooltipManager: TooltipStateManager | undefined;\n    private browserTooltips: boolean;\n\n    constructor(\n        private readonly ctrl: ITooltipFeatureCtrl,\n        beans?: BeanCollection\n    ) {\n        super();\n\n        if (beans) {\n            this.beans = beans;\n        }\n    }\n\n    public postConstruct() {\n        this.refreshToolTip();\n    }\n\n    private setBrowserTooltip(tooltip: string | null) {\n        const name = 'title';\n        const eGui = this.ctrl.getGui();\n\n        if (!eGui) {\n            return;\n        }\n\n        if (tooltip != null && tooltip != '') {\n            eGui.setAttribute(name, tooltip);\n        } else {\n            eGui.removeAttribute(name);\n        }\n    }\n\n    private updateTooltipText(): void {\n        this.tooltip = this.ctrl.getTooltipValue();\n    }\n\n    private createTooltipFeatureIfNeeded(): void {\n        if (this.tooltipManager != null) {\n            return;\n        }\n\n        const parent: TooltipParentComp = {\n            getTooltipParams: () => this.getTooltipParams(),\n            getGui: () => this.ctrl.getGui(),\n        };\n\n        this.tooltipManager = this.createBean(\n            new TooltipStateManager(\n                parent,\n                this.ctrl.getTooltipShowDelayOverride?.(),\n                this.ctrl.getTooltipHideDelayOverride?.(),\n                this.ctrl.shouldDisplayTooltip\n            ),\n            this.beans.context\n        );\n    }\n\n    public refreshToolTip() {\n        this.browserTooltips = this.beans.gos.get('enableBrowserTooltips');\n        this.updateTooltipText();\n\n        if (this.browserTooltips) {\n            this.setBrowserTooltip(this.tooltip);\n            if (this.tooltipManager) {\n                this.tooltipManager = this.destroyBean(this.tooltipManager, this.beans.context);\n            }\n        } else {\n            this.setBrowserTooltip(null);\n            this.createTooltipFeatureIfNeeded();\n        }\n    }\n\n    public getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        const ctrl = this.ctrl;\n        const column = ctrl.getColumn ? ctrl.getColumn() : undefined;\n        const colDef = ctrl.getColDef ? ctrl.getColDef() : undefined;\n        const rowNode = ctrl.getRowNode ? ctrl.getRowNode() : undefined;\n\n        return {\n            location: ctrl.getLocation(), //'cell',\n            colDef: colDef,\n            column: column,\n            rowIndex: ctrl.getRowIndex ? ctrl.getRowIndex() : undefined,\n            node: rowNode,\n            data: rowNode ? rowNode.data : undefined,\n            value: this.getTooltipText(),\n            valueFormatted: ctrl.getValueFormatted ? ctrl.getValueFormatted() : undefined,\n            hideTooltipCallback: () => this.tooltipManager?.hideTooltip(true),\n        };\n    }\n\n    private getTooltipText() {\n        return this.tooltip;\n    }\n\n    // overriding to make public, as we don't dispose this bean via context\n    public override destroy() {\n        if (this.tooltipManager) {\n            this.tooltipManager = this.destroyBean(this.tooltipManager, this.beans.context);\n        }\n        super.destroy();\n    }\n}\n", "import type { BeanStubEvent } from '../context/beanStub';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { BaseBean, ComponentBean } from '../context/genericContext';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { AgColumnGroup } from '../entities/agColumnGroup';\nimport type { ColDef, ColGroupDef } from '../entities/colDef';\nimport type { AgEvent } from '../events';\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\nimport { CssClassManager } from '../rendering/cssClassManager';\nimport type { ITooltipParams, TooltipLocation } from '../rendering/tooltipComponent';\nimport {\n    _copyNodeList,\n    _isNodeOrElement,\n    _iterateNamedNodeMap,\n    _loadTemplate,\n    _setDisplayed,\n    _setVisible,\n} from '../utils/dom';\nimport { _warnOnce } from '../utils/function';\nimport { NumberSequence } from '../utils/numberSequence';\nimport { TooltipFeature } from './tooltipFeature';\n\nconst compIdSequence = new NumberSequence();\n\n/** The RefPlaceholder is used to control when data-ref attribute should be applied to the component\n * There are hanging data-refs in the DOM that are not being used internally by the component which we don't want to apply to the component.\n * There is also the case where data-refs are solely used for passing parameters to the component and should not be applied to the component.\n * It also enables validation to catch typo errors in the data-ref attribute vs component name.\n * The value is `null` so that it can be identified in the component and distinguished from just missing with undefined.\n * The `null` value also allows for existing falsy checks to work as expected when code can be run before the template is setup.\n */\nexport const RefPlaceholder: any = null;\n\nexport type ComponentEvent = 'displayChanged' | BeanStubEvent;\nexport interface VisibleChangedEvent extends AgEvent<'displayChanged'> {\n    visible: boolean;\n}\n\nexport type ComponentSelector = { component: { new (params?: any): Component<any> }; selector: AgComponentSelector };\n\nexport class Component<TLocalEvent extends string = ComponentEvent>\n    extends BeanStub<TLocalEvent | ComponentEvent>\n    implements ComponentBean, BaseBean<BeanCollection>\n{\n    public override preWireBeans(beans: BeanCollection): void {\n        super.preWireBeans(beans);\n    }\n\n    public static elementGettingCreated: any;\n\n    private eGui: HTMLElement;\n    private componentSelectors: Map<AgComponentSelector, ComponentSelector>;\n\n    // if false, then CSS class \"ag-hidden\" is applied, which sets \"display: none\"\n    private displayed = true;\n\n    // if false, then CSS class \"ag-invisible\" is applied, which sets \"visibility: hidden\"\n    private visible = true;\n\n    protected parentComponent: Component | undefined;\n\n    // unique id for this row component. this is used for getting a reference to the HTML dom.\n    // we cannot use the RowNode id as this is not unique (due to animation, old rows can be lying\n    // around as we create a new rowComp instance for the same row node).\n    private compId = compIdSequence.next();\n\n    private cssClassManager: CssClassManager;\n\n    protected usingBrowserTooltips: boolean;\n    private tooltipText: string | null | undefined;\n    private tooltipFeature: TooltipFeature | undefined;\n\n    constructor(template?: string, componentSelectors?: ComponentSelector[]) {\n        super();\n\n        this.cssClassManager = new CssClassManager(() => this.eGui);\n\n        this.componentSelectors = new Map((componentSelectors ?? []).map((comp) => [comp.selector, comp]));\n        if (template) {\n            this.setTemplate(template);\n        }\n    }\n\n    public preConstruct(): void {\n        this.usingBrowserTooltips = this.gos.get('enableBrowserTooltips');\n\n        this.wireTemplate(this.getGui());\n    }\n\n    private wireTemplate(element: HTMLElement | undefined, paramsMap?: { [key: string]: any }): void {\n        // ui exists if user sets template in constructor. when this happens,\n        // We have to wait for the context to be autoWired first before we can create child components.\n        if (element && this.gos) {\n            this.applyElementsToComponent(element);\n            this.createChildComponentsFromTags(element, paramsMap);\n        }\n    }\n\n    public getCompId(): number {\n        return this.compId;\n    }\n\n    public getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        return {\n            value: this.tooltipText,\n            location: 'UNKNOWN',\n        };\n    }\n\n    public setTooltip(params?: {\n        newTooltipText?: string | null;\n        showDelayOverride?: number;\n        hideDelayOverride?: number;\n        location?: TooltipLocation;\n        getColumn?(): AgColumn | AgColumnGroup;\n        getColDef?(): ColDef | ColGroupDef;\n        shouldDisplayTooltip?: () => boolean;\n    }): void {\n        const { newTooltipText, showDelayOverride, hideDelayOverride, location, shouldDisplayTooltip } = params || {};\n\n        if (this.tooltipFeature) {\n            this.tooltipFeature = this.destroyBean(this.tooltipFeature);\n        }\n\n        if (this.tooltipText !== newTooltipText) {\n            this.tooltipText = newTooltipText;\n        }\n\n        const getTooltipValue = () => this.tooltipText;\n\n        if (newTooltipText != null) {\n            this.tooltipFeature = this.createBean(\n                new TooltipFeature({\n                    getTooltipValue,\n                    getGui: () => this.getGui(),\n                    getLocation: () => location ?? 'UNKNOWN',\n                    getColDef: params?.getColDef,\n                    getColumn: params?.getColumn,\n                    getTooltipShowDelayOverride: showDelayOverride != null ? () => showDelayOverride : undefined,\n                    getTooltipHideDelayOverride: hideDelayOverride != null ? () => hideDelayOverride : undefined,\n                    shouldDisplayTooltip,\n                })\n            );\n        }\n    }\n\n    private applyElementsToComponent(\n        element: Element,\n        elementRef?: string | null,\n        paramsMap?: { [key: string]: any },\n        newComponent: Component | null = null\n    ) {\n        if (elementRef === undefined) {\n            elementRef = element.getAttribute('data-ref');\n        }\n        if (elementRef) {\n            // We store the reference to the element in the parent component under that same name\n            // if there is a placeholder property with the same name.\n            const current = (this as any)[elementRef];\n            if (current === RefPlaceholder) {\n                (this as any)[elementRef] = newComponent ?? element;\n            } else {\n                // Don't warn if the data-ref is used for passing parameters to the component\n                const usedAsParamRef = paramsMap && paramsMap[elementRef];\n                if (!usedAsParamRef) {\n                    // This can happen because of:\n                    // 1. The data-ref has a typo and doesn't match the property in the component\n                    // 2. The  property is not initialised with the RefPlaceholder and should be.\n                    // 3. The property is on a child component and not available on the parent during construction.\n                    //    In which case you may need to pass the template via setTemplate() instead of in the super constructor.\n                    // 4. The data-ref is not used by the component and should be removed from the template.\n                    _warnOnce(`Issue with data-ref: ${elementRef} on ${this.constructor.name} with ${current}`);\n                }\n            }\n        }\n    }\n\n    // for registered components only, eg creates AgCheckbox instance from ag-checkbox HTML tag\n    private createChildComponentsFromTags(parentNode: Element, paramsMap?: { [key: string]: any }): void {\n        // we MUST take a copy of the list first, as the 'swapComponentForNode' adds comments into the DOM\n        // which messes up the traversal order of the children.\n        const childNodeList: Node[] = _copyNodeList(parentNode.childNodes);\n\n        childNodeList.forEach((childNode) => {\n            if (!(childNode instanceof HTMLElement)) {\n                return;\n            }\n\n            const childComp = this.createComponentFromElement(\n                childNode,\n                (childComp) => {\n                    // copy over all attributes, including css classes, so any attributes user put on the tag\n                    // wll be carried across\n                    const childGui = childComp.getGui();\n                    if (childGui) {\n                        this.copyAttributesFromNode(childNode, childComp.getGui());\n                    }\n                },\n                paramsMap\n            );\n\n            if (childComp) {\n                if ((childComp as any).addItems && childNode.children.length) {\n                    this.createChildComponentsFromTags(childNode, paramsMap);\n\n                    // converting from HTMLCollection to Array\n                    const items = Array.prototype.slice.call(childNode.children);\n\n                    (childComp as any).addItems(items);\n                }\n                // replace the tag (eg ag-checkbox) with the proper HTMLElement (eg 'div') in the dom\n                this.swapComponentForNode(childComp, parentNode, childNode);\n            } else if (childNode.childNodes) {\n                this.createChildComponentsFromTags(childNode, paramsMap);\n            }\n        });\n    }\n\n    private createComponentFromElement(\n        element: HTMLElement,\n        afterPreCreateCallback?: (comp: Component) => void,\n        paramsMap?: { [key: string]: any }\n    ): Component | null {\n        const key = element.nodeName;\n\n        const elementRef = element.getAttribute('data-ref');\n\n        const isAgGridComponent = key.indexOf('AG-') === 0;\n        const componentSelector = isAgGridComponent ? this.componentSelectors.get(key as AgComponentSelector) : null;\n        let newComponent: Component | null = null;\n        if (componentSelector) {\n            Component.elementGettingCreated = element;\n            const componentParams = paramsMap && elementRef ? paramsMap[elementRef] : undefined;\n            newComponent = new componentSelector.component(componentParams);\n            newComponent.setParentComponent(this as Component);\n\n            this.createBean(newComponent, null, afterPreCreateCallback);\n        } else if (isAgGridComponent) {\n            _warnOnce(`Missing selector: ${key}`);\n        }\n\n        this.applyElementsToComponent(element, elementRef, paramsMap, newComponent);\n\n        return newComponent;\n    }\n\n    private copyAttributesFromNode(source: Element, dest: Element): void {\n        _iterateNamedNodeMap(source.attributes, (name, value) => dest.setAttribute(name, value));\n    }\n\n    private swapComponentForNode(newComponent: Component, parentNode: Element, childNode: Node): void {\n        const eComponent = newComponent.getGui();\n        parentNode.replaceChild(eComponent, childNode);\n        parentNode.insertBefore(document.createComment(childNode.nodeName), eComponent);\n        this.addDestroyFunc(this.destroyBean.bind(this, newComponent));\n    }\n\n    protected activateTabIndex(elements?: Element[]): void {\n        const tabIndex = this.gos.get('tabIndex');\n\n        if (!elements) {\n            elements = [];\n        }\n\n        if (!elements.length) {\n            elements.push(this.getGui());\n        }\n\n        elements.forEach((el) => el.setAttribute('tabindex', tabIndex.toString()));\n    }\n\n    public setTemplate(\n        template: string | null | undefined,\n        componentSelectors?: ComponentSelector[],\n        paramsMap?: { [key: string]: any }\n    ): void {\n        const eGui = _loadTemplate(template as string);\n        this.setTemplateFromElement(eGui, componentSelectors, paramsMap);\n    }\n\n    public setTemplateFromElement(\n        element: HTMLElement,\n        components?: ComponentSelector[],\n        paramsMap?: { [key: string]: any }\n    ): void {\n        this.eGui = element;\n        if (components) {\n            for (let i = 0; i < components.length; i++) {\n                const component = components[i];\n                this.componentSelectors.set(component.selector, component);\n            }\n        }\n        this.wireTemplate(element, paramsMap);\n    }\n\n    public getGui(): HTMLElement {\n        return this.eGui;\n    }\n\n    public getFocusableElement(): HTMLElement {\n        return this.eGui;\n    }\n\n    public getAriaElement(): Element {\n        return this.getFocusableElement();\n    }\n\n    public setParentComponent(component: Component<any>) {\n        this.parentComponent = component;\n    }\n\n    public getParentComponent(): Component | undefined {\n        return this.parentComponent;\n    }\n\n    // this method is for older code, that wants to provide the gui element,\n    // it is not intended for this to be in ag-Stack\n    protected setGui(eGui: HTMLElement): void {\n        this.eGui = eGui;\n    }\n\n    protected queryForHtmlElement(cssSelector: string): HTMLElement {\n        return this.eGui.querySelector(cssSelector) as HTMLElement;\n    }\n\n    private getContainerAndElement(\n        newChild: Component<any> | HTMLElement,\n        container?: HTMLElement\n    ): { element: HTMLElement; parent: HTMLElement } | null {\n        let parent = container;\n\n        if (newChild == null) {\n            return null;\n        }\n\n        if (!parent) {\n            parent = this.eGui;\n        }\n\n        if (_isNodeOrElement(newChild)) {\n            return {\n                element: newChild,\n                parent,\n            };\n        }\n\n        return {\n            element: newChild.getGui(),\n            parent,\n        };\n    }\n\n    public prependChild(newChild: HTMLElement | Component<any>, container?: HTMLElement) {\n        const { element, parent } = this.getContainerAndElement(newChild, container) || {};\n\n        if (!element || !parent) {\n            return;\n        }\n\n        parent.insertAdjacentElement('afterbegin', element);\n    }\n\n    public appendChild(newChild: HTMLElement | Component<any>, container?: HTMLElement): void {\n        const { element, parent } = this.getContainerAndElement(newChild, container) || {};\n\n        if (!element || !parent) {\n            return;\n        }\n\n        parent.appendChild(element);\n    }\n\n    public isDisplayed(): boolean {\n        return this.displayed;\n    }\n\n    public setVisible(visible: boolean, options: { skipAriaHidden?: boolean } = {}): void {\n        if (visible !== this.visible) {\n            this.visible = visible;\n            const { skipAriaHidden } = options;\n            _setVisible(this.eGui, visible, { skipAriaHidden });\n        }\n    }\n\n    public setDisplayed(displayed: boolean, options: { skipAriaHidden?: boolean } = {}): void {\n        if (displayed !== this.displayed) {\n            this.displayed = displayed;\n            const { skipAriaHidden } = options;\n            _setDisplayed(this.eGui, displayed, { skipAriaHidden });\n\n            const event: VisibleChangedEvent = {\n                type: 'displayChanged',\n                visible: this.displayed,\n            };\n\n            this.dispatchLocalEvent(event);\n        }\n    }\n\n    public override destroy(): void {\n        if (this.parentComponent) {\n            this.parentComponent = undefined;\n        }\n\n        if (this.tooltipFeature) {\n            this.tooltipFeature = this.destroyBean(this.tooltipFeature);\n        }\n\n        super.destroy();\n    }\n\n    public addGuiEventListener(event: string, listener: (event: any) => void, options?: AddEventListenerOptions): void {\n        this.eGui.addEventListener(event, listener, options);\n        this.addDestroyFunc(() => this.eGui.removeEventListener(event, listener));\n    }\n\n    public addCssClass(className: string): void {\n        this.cssClassManager.addCssClass(className);\n    }\n\n    public removeCssClass(className: string): void {\n        this.cssClassManager.removeCssClass(className);\n    }\n\n    public containsCssClass(className: string): boolean {\n        return this.cssClassManager.containsCssClass(className);\n    }\n\n    public addOrRemoveCssClass(className: string, addOrRemove: boolean): void {\n        this.cssClassManager.addOrRemoveCssClass(className, addOrRemove);\n    }\n}\n\n/** All the AG Grid components that are used within internal templates via <ag-autocomplete> syntax */\nexport type AgComponentSelector =\n    | 'AG-AUTOCOMPLETE'\n    | 'AG-CHECKBOX'\n    | 'AG-COLOR-INPUT'\n    | 'AG-COLOR-PICKER'\n    | 'AG-FAKE-HORIZONTAL-SCROLL'\n    | 'AG-FAKE-VERTICAL-SCROLL'\n    | 'AG-FILTERS-TOOL-PANEL-HEADER'\n    | 'AG-FILTERS-TOOL-PANEL-LIST'\n    | 'AG-GRID-BODY'\n    | 'AG-GRID-HEADER-DROP-ZONES'\n    | 'AG-GROUP-COMPONENT'\n    | 'AG-HEADER-ROOT'\n    | 'AG-INPUT-DATE-FIELD'\n    | 'AG-INPUT-NUMBER-FIELD'\n    | 'AG-INPUT-RANGE'\n    | 'AG-INPUT-TEXT-AREA'\n    | 'AG-INPUT-TEXT-FIELD'\n    | 'AG-NAME-VALUE'\n    | 'AG-OVERLAY-WRAPPER'\n    | 'AG-PAGE-SIZE-SELECTOR'\n    | 'AG-PAGINATION'\n    | 'AG-PRIMARY-COLS-HEADER'\n    | 'AG-PRIMARY-COLS-LIST'\n    | 'AG-PRIMARY-COLS'\n    | 'AG-ROW-CONTAINER'\n    | 'AG-SELECT'\n    | 'AG-SIDE-BAR'\n    | 'AG-SIDE-BAR-BUTTONS'\n    | 'AG-SLIDER'\n    | 'AG-SORT-INDICATOR'\n    | 'AG-STATUS-BAR'\n    | 'AG-TOGGLE-BUTTON'\n    | 'AG-WATERMARK';\n", "import type { AgColumn } from '../entities/agColumn';\nimport type { GridOptionsService } from '../gridOptionsService';\nimport { _setAriaRole } from './aria';\nimport { _isNodeOrElement, _loadTemplate } from './dom';\nimport { _warnOnce } from './function';\n\n//\n// IMPORTANT NOTE!\n//\n// If you change the list below, copy/paste the new content into the docs page custom-icons\n//\nexport const iconNameClassMap: { [key: string]: string } = {\n    // header column group shown when expanded (click to contract)\n    columnGroupOpened: 'expanded',\n    // header column group shown when contracted (click to expand)\n    columnGroupClosed: 'contracted',\n    // tool panel column group contracted (click to expand)\n    columnSelectClosed: 'tree-closed',\n    // tool panel column group expanded (click to contract)\n    columnSelectOpen: 'tree-open',\n    // column tool panel header expand/collapse all button, shown when some children are expanded and\n    //     others are collapsed\n    columnSelectIndeterminate: 'tree-indeterminate',\n    // shown on ghost icon while dragging column to the side of the grid to pin\n    columnMovePin: 'pin',\n    // shown on ghost icon while dragging over part of the page that is not a drop zone\n    columnMoveHide: 'eye-slash',\n    // shown on ghost icon while dragging columns to reorder\n    columnMoveMove: 'arrows',\n    // animating icon shown when dragging a column to the right of the grid causes horizontal scrolling\n    columnMoveLeft: 'left',\n    // animating icon shown when dragging a column to the left of the grid causes horizontal scrolling\n    columnMoveRight: 'right',\n    // shown on ghost icon while dragging over Row Groups drop zone\n    columnMoveGroup: 'group',\n    // shown on ghost icon while dragging over Values drop zone\n    columnMoveValue: 'aggregation',\n    // shown on ghost icon while dragging over pivot drop zone\n    columnMovePivot: 'pivot',\n    // shown on ghost icon while dragging over drop zone that doesn't support it, e.g.\n    //     string column over aggregation drop zone\n    dropNotAllowed: 'not-allowed',\n    // shown on row group when contracted (click to expand)\n    groupContracted: 'tree-closed',\n    // shown on row group when expanded (click to contract)\n    groupExpanded: 'tree-open',\n    // set filter tree list group contracted (click to expand)\n    setFilterGroupClosed: 'tree-closed',\n    // set filter tree list group expanded (click to contract)\n    setFilterGroupOpen: 'tree-open',\n    // set filter tree list expand/collapse all button, shown when some children are expanded and\n    //     others are collapsed\n    setFilterGroupIndeterminate: 'tree-indeterminate',\n    // context menu chart item\n    chart: 'chart',\n    // chart window title bar\n    close: 'cross',\n    // X (remove) on column 'pill' after adding it to a drop zone list\n    cancel: 'cancel',\n    // indicates the currently active pin state in the \"Pin column\" sub-menu of the column menu\n    check: 'tick',\n    // \"go to first\" button in pagination controls\n    first: 'first',\n    // \"go to previous\" button in pagination controls\n    previous: 'previous',\n    // \"go to next\" button in pagination controls\n    next: 'next',\n    // \"go to last\" button in pagination controls\n    last: 'last',\n    // shown on top right of chart when chart is linked to range data (click to unlink)\n    linked: 'linked',\n    // shown on top right of chart when chart is not linked to range data (click to link)\n    unlinked: 'unlinked',\n    // \"Choose colour\" button on chart settings tab\n    colorPicker: 'color-picker',\n    // rotating spinner shown by the loading cell renderer\n    groupLoading: 'loading',\n    // button to launch enterprise column menu\n    menu: 'menu',\n    menuAlt: 'menu-alt',\n    // filter tool panel tab\n    filter: 'filter',\n    // column tool panel tab\n    columns: 'columns',\n    // button in chart regular size window title bar (click to maximise)\n    maximize: 'maximize',\n    // button in chart maximised window title bar (click to make regular size)\n    minimize: 'minimize',\n    // \"Pin column\" item in column header menu\n    menuPin: 'pin',\n    // \"Value aggregation\" column menu item (shown on numeric columns when grouping is active)\"\n    menuValue: 'aggregation',\n    // \"Group by {column-name}\" item in column header menu\n    menuAddRowGroup: 'group',\n    // \"Un-Group by {column-name}\" item in column header menu\n    menuRemoveRowGroup: 'group',\n    // context menu copy item\n    clipboardCopy: 'copy',\n    // context menu cut item\n    clipboardCut: 'cut',\n    // context menu paste item\n    clipboardPaste: 'paste',\n    // identifies the pivot drop zone\n    pivotPanel: 'pivot',\n    // \"Row groups\" drop zone in column tool panel\n    rowGroupPanel: 'group',\n    // columns tool panel Values drop zone\n    valuePanel: 'aggregation',\n    // drag handle used to pick up draggable columns\n    columnDrag: 'grip',\n    // drag handle used to pick up draggable rows\n    rowDrag: 'grip',\n    // context menu export item\n    save: 'save',\n    // csv export\n    csvExport: 'csv',\n    // excel export,\n    excelExport: 'excel',\n    // icon on dropdown editors\n    smallDown: 'small-down',\n    // version of small-right used in RTL mode\n    smallLeft: 'small-left',\n    // separater between column 'pills' when you add multiple columns to the header drop zone\n    smallRight: 'small-right',\n    smallUp: 'small-up',\n    // show on column header when column is sorted ascending\n    sortAscending: 'asc',\n    // show on column header when column is sorted descending\n    sortDescending: 'desc',\n    // show on column header when column has no sort, only when enabled with gridOptions.unSortIcon=true\n    sortUnSort: 'none',\n    // Builder button in Advanced Filter\n    advancedFilterBuilder: 'group',\n    // drag handle used to pick up Advanced Filter Builder rows\n    advancedFilterBuilderDrag: 'grip',\n    // Advanced Filter Builder row validation error\n    advancedFilterBuilderInvalid: 'not-allowed',\n    // shown on Advanced Filter Builder rows to move them up\n    advancedFilterBuilderMoveUp: 'up',\n    // shown on Advanced Filter Builder rows to move them down\n    advancedFilterBuilderMoveDown: 'down',\n    // shown on Advanced Filter Builder rows to add new rows\n    advancedFilterBuilderAdd: 'plus',\n    // shown on Advanced Filter Builder rows to remove row\n    advancedFilterBuilderRemove: 'minus',\n    // Edit Chart menu item shown in Integrated Charts menu\n    chartsMenuEdit: 'chart',\n    // Advanced Settings menu item shown in Integrated Charts menu\n    chartsMenuAdvancedSettings: 'settings',\n    // shown in Integrated Charts menu add fields\n    chartsMenuAdd: 'plus',\n    // checked checkbox\n    checkboxChecked: 'checkbox-checked',\n    // indeterminate checkbox\n    checkboxIndeterminate: 'checkbox-indeterminate',\n    // unchecked checkbox\n    checkboxUnchecked: 'checkbox-unchecked',\n    // radio button on\n    radioButtonOn: 'radio-button-on',\n    // radio button off\n    radioButtonOff: 'radio-button-off',\n};\n\n/**\n * If icon provided, use this (either a string, or a function callback).\n * if not, then use the default icon from the theme\n * @param {string} iconName\n * @param {GridOptionsService} gos\n * @param {Column | null} [column]\n * @returns {Element}\n */\nexport function _createIcon(iconName: string, gos: GridOptionsService, column: AgColumn | null): Element {\n    const iconContents = _createIconNoSpan(iconName, gos, column);\n\n    if (iconContents) {\n        const { className } = iconContents;\n        if (\n            (typeof className === 'string' && className.indexOf('ag-icon') > -1) ||\n            (typeof className === 'object' && className['ag-icon'])\n        ) {\n            return iconContents;\n        }\n    }\n\n    const eResult = document.createElement('span');\n    eResult.appendChild(iconContents!);\n\n    return eResult;\n}\n\nexport function _createIconNoSpan(\n    iconName: string,\n    gos: GridOptionsService,\n    column?: AgColumn | null,\n    forceCreate?: boolean\n): Element | undefined {\n    let userProvidedIcon: ((...args: any[]) => any) | string | null = null;\n\n    // check col for icon first\n    const icons: any = column && column.getColDef().icons;\n\n    if (icons) {\n        userProvidedIcon = icons[iconName];\n    }\n\n    // if not in col, try grid options\n    if (gos && !userProvidedIcon) {\n        const optionsIcons = gos.get('icons');\n        if (optionsIcons) {\n            userProvidedIcon = optionsIcons[iconName];\n        }\n    }\n\n    // now if user provided, use it\n    if (userProvidedIcon) {\n        let rendererResult: any;\n\n        if (typeof userProvidedIcon === 'function') {\n            rendererResult = userProvidedIcon();\n        } else if (typeof userProvidedIcon === 'string') {\n            rendererResult = userProvidedIcon;\n        } else {\n            throw new Error('icon from grid options needs to be a string or a function');\n        }\n\n        if (typeof rendererResult === 'string') {\n            return _loadTemplate(rendererResult);\n        }\n\n        if (_isNodeOrElement(rendererResult)) {\n            return rendererResult as Element;\n        }\n\n        _warnOnce('iconRenderer should return back a string or a dom object');\n    } else {\n        const span = document.createElement('span');\n        let cssClass = iconNameClassMap[iconName];\n\n        if (!cssClass) {\n            if (!forceCreate) {\n                _warnOnce(`Did not find icon ${iconName}`);\n                cssClass = '';\n            } else {\n                cssClass = iconName;\n            }\n        }\n\n        span.setAttribute('class', `ag-icon ag-icon-${cssClass}`);\n        span.setAttribute('unselectable', 'on');\n        _setAriaRole(span, 'presentation');\n\n        return span;\n    }\n}\n", "/**\n * `True` if the event is close to the original event by X pixels either vertically or horizontally.\n * we only start dragging after X pixels so this allows us to know if we should start dragging yet.\n * @param {MouseEvent | TouchEvent} e1\n * @param {MouseEvent | TouchEvent} e2\n * @param {number} pixelCount\n * @returns {boolean}\n */\nexport function _areEventsNear(e1: MouseEvent | Touch, e2: MouseEvent | Touch, pixelCount: number): boolean {\n    // by default, we wait 4 pixels before starting the drag\n    if (pixelCount === 0) {\n        return false;\n    }\n\n    const diffX = Math.abs(e1.clientX - e2.clientX);\n    const diffY = Math.abs(e1.clientY - e2.clientY);\n\n    return Math.max(diffX, diffY) <= pixelCount;\n}\n", "import type { AgEvent } from '../events';\nimport type { IEventEmitter, IEventListener } from '../interfaces/iEventEmitter';\nimport { LocalEventService } from '../localEventService';\nimport { _areEventsNear } from '../utils/mouse';\n\nexport interface TapEvent extends AgEvent<'tap'> {\n    touchStart: Touch;\n}\nexport interface DoubleTapEvent extends AgEvent<'doubleTap'> {\n    touchStart: Touch;\n}\n\nexport interface LongTapEvent extends AgEvent<'longTap'> {\n    touchStart: Touch;\n    touchEvent: TouchEvent;\n}\n\nexport type TouchListenerEvent = 'tap' | 'doubleTap' | 'longTap';\nexport class TouchListener implements IEventEmitter<TouchListenerEvent> {\n    private DOUBLE_TAP_MILLIS = 500;\n\n    private eElement: Element;\n\n    private destroyFuncs: ((...args: any[]) => any)[] = [];\n\n    private moved: boolean;\n\n    private touching = false;\n    private touchStart: Touch;\n\n    private lastTapTime: number | null;\n\n    private localEventService: LocalEventService<TouchListenerEvent> = new LocalEventService();\n\n    // private mostRecentTouch: Touch;\n\n    private preventMouseClick: boolean;\n\n    constructor(eElement: Element, preventMouseClick = false) {\n        this.eElement = eElement;\n        this.preventMouseClick = preventMouseClick;\n\n        const startListener = this.onTouchStart.bind(this);\n        const moveListener = this.onTouchMove.bind(this);\n        const endListener = this.onTouchEnd.bind(this);\n\n        this.eElement.addEventListener('touchstart', startListener, { passive: true } as any);\n        this.eElement.addEventListener('touchmove', moveListener, { passive: true } as any);\n        // we set passive=false, as we want to prevent default on this event\n        this.eElement.addEventListener('touchend', endListener, { passive: false } as any);\n\n        this.destroyFuncs.push(() => {\n            this.eElement.removeEventListener('touchstart', startListener, { passive: true } as any);\n            this.eElement.removeEventListener('touchmove', moveListener, { passive: true } as any);\n            this.eElement.removeEventListener('touchend', endListener, { passive: false } as any);\n        });\n    }\n\n    private getActiveTouch(touchList: TouchList): Touch | null {\n        for (let i = 0; i < touchList.length; i++) {\n            const matches = touchList[i].identifier === this.touchStart.identifier;\n            if (matches) {\n                return touchList[i];\n            }\n        }\n\n        return null;\n    }\n\n    public addEventListener<T extends TouchListenerEvent>(eventType: T, listener: IEventListener<T>): void {\n        this.localEventService.addEventListener(eventType, listener);\n    }\n\n    public removeEventListener<T extends TouchListenerEvent>(eventType: T, listener: IEventListener<T>): void {\n        this.localEventService.removeEventListener(eventType, listener);\n    }\n\n    private onTouchStart(touchEvent: TouchEvent): void {\n        // only looking at one touch point at any time\n        if (this.touching) {\n            return;\n        }\n\n        this.touchStart = touchEvent.touches[0];\n        this.touching = true;\n\n        this.moved = false;\n\n        const touchStartCopy = this.touchStart;\n\n        window.setTimeout(() => {\n            const touchesMatch = this.touchStart === touchStartCopy;\n\n            if (this.touching && touchesMatch && !this.moved) {\n                this.moved = true;\n                const event: LongTapEvent = {\n                    type: 'longTap',\n                    touchStart: this.touchStart,\n                    touchEvent: touchEvent,\n                };\n                this.localEventService.dispatchEvent(event);\n            }\n        }, 500);\n    }\n\n    private onTouchMove(touchEvent: TouchEvent): void {\n        if (!this.touching) {\n            return;\n        }\n\n        const touch = this.getActiveTouch(touchEvent.touches);\n        if (!touch) {\n            return;\n        }\n\n        const eventIsFarAway = !_areEventsNear(touch, this.touchStart, 4);\n        if (eventIsFarAway) {\n            this.moved = true;\n        }\n    }\n\n    private onTouchEnd(touchEvent: TouchEvent): void {\n        if (!this.touching) {\n            return;\n        }\n\n        if (!this.moved) {\n            const event: TapEvent = {\n                type: 'tap',\n                touchStart: this.touchStart,\n            };\n            this.localEventService.dispatchEvent(event);\n            this.checkForDoubleTap();\n        }\n\n        // stops the tap from also been processed as a mouse click\n        if (this.preventMouseClick && touchEvent.cancelable) {\n            touchEvent.preventDefault();\n        }\n\n        this.touching = false;\n    }\n\n    private checkForDoubleTap(): void {\n        const now = new Date().getTime();\n\n        if (this.lastTapTime && this.lastTapTime > 0) {\n            // if previous tap, see if duration is short enough to be considered double tap\n            const interval = now - this.lastTapTime;\n            if (interval > this.DOUBLE_TAP_MILLIS) {\n                // dispatch double tap event\n                const event: DoubleTapEvent = {\n                    type: 'doubleTap',\n                    touchStart: this.touchStart,\n                };\n                this.localEventService.dispatchEvent(event);\n\n                // this stops a tripple tap ending up as two double taps\n                this.lastTapTime = null;\n            } else {\n                this.lastTapTime = now;\n            }\n        } else {\n            this.lastTapTime = now;\n        }\n    }\n\n    public destroy(): void {\n        this.destroyFuncs.forEach((func) => func());\n    }\n}\n", "import type { BeanCollection } from '../../../context/context';\nimport type { AgColumn } from '../../../entities/agColumn';\nimport type { SortController } from '../../../sortController';\nimport { _clearElement, _setDisplayed } from '../../../utils/dom';\nimport { _createIconNoSpan } from '../../../utils/icon';\nimport type { ComponentSelector } from '../../../widgets/component';\nimport { Component, RefPlaceholder } from '../../../widgets/component';\n\nconst SortIndicatorTemplate = /* html */ `<span class=\"ag-sort-indicator-container\">\n        <span data-ref=\"eSortOrder\" class=\"ag-sort-indicator-icon ag-sort-order ag-hidden\" aria-hidden=\"true\"></span>\n        <span data-ref=\"eSortAsc\" class=\"ag-sort-indicator-icon ag-sort-ascending-icon ag-hidden\" aria-hidden=\"true\"></span>\n        <span data-ref=\"eSortDesc\" class=\"ag-sort-indicator-icon ag-sort-descending-icon ag-hidden\" aria-hidden=\"true\"></span>\n        <span data-ref=\"eSortMixed\" class=\"ag-sort-indicator-icon ag-sort-mixed-icon ag-hidden\" aria-hidden=\"true\"></span>\n        <span data-ref=\"eSortNone\" class=\"ag-sort-indicator-icon ag-sort-none-icon ag-hidden\" aria-hidden=\"true\"></span>\n    </span>`;\nexport class SortIndicatorComp extends Component {\n    private sortController: SortController;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.sortController = beans.sortController;\n    }\n\n    private eSortOrder: HTMLElement = RefPlaceholder;\n    private eSortAsc: HTMLElement = RefPlaceholder;\n    private eSortDesc: HTMLElement = RefPlaceholder;\n    private eSortMixed: HTMLElement = RefPlaceholder;\n    private eSortNone: HTMLElement = RefPlaceholder;\n\n    private column: AgColumn;\n    private suppressOrder: boolean;\n\n    constructor(skipTemplate?: boolean) {\n        super();\n\n        if (!skipTemplate) {\n            this.setTemplate(SortIndicatorTemplate);\n        }\n    }\n\n    public attachCustomElements(\n        eSortOrder: HTMLElement,\n        eSortAsc: HTMLElement,\n        eSortDesc: HTMLElement,\n        eSortMixed: HTMLElement,\n        eSortNone: HTMLElement\n    ) {\n        this.eSortOrder = eSortOrder;\n        this.eSortAsc = eSortAsc;\n        this.eSortDesc = eSortDesc;\n        this.eSortMixed = eSortMixed;\n        this.eSortNone = eSortNone;\n    }\n\n    public setupSort(column: AgColumn, suppressOrder: boolean = false): void {\n        this.column = column;\n        this.suppressOrder = suppressOrder;\n\n        this.setupMultiSortIndicator();\n\n        if (!this.column.isSortable() && !this.column.getColDef().showRowGroup) {\n            return;\n        }\n\n        this.addInIcon('sortAscending', this.eSortAsc, column);\n        this.addInIcon('sortDescending', this.eSortDesc, column);\n        this.addInIcon('sortUnSort', this.eSortNone, column);\n\n        this.addManagedPropertyListener('unSortIcon', () => this.updateIcons());\n        this.addManagedEventListeners({\n            newColumnsLoaded: this.updateIcons.bind(this),\n            // Watch global events, as row group columns can effect their display column.\n            sortChanged: this.onSortChanged.bind(this),\n            // when grouping changes so can sort indexes and icons\n            columnRowGroupChanged: this.onSortChanged.bind(this),\n        });\n\n        this.onSortChanged();\n    }\n\n    private addInIcon(iconName: string, eParent: HTMLElement, column: AgColumn): void {\n        if (eParent == null) {\n            return;\n        }\n\n        const eIcon = _createIconNoSpan(iconName, this.gos, column);\n        if (eIcon) {\n            eParent.appendChild(eIcon);\n        }\n    }\n\n    private onSortChanged(): void {\n        this.updateIcons();\n        if (!this.suppressOrder) {\n            this.updateSortOrder();\n        }\n    }\n\n    private updateIcons(): void {\n        const sortDirection = this.sortController.getDisplaySortForColumn(this.column);\n\n        if (this.eSortAsc) {\n            const isAscending = sortDirection === 'asc';\n            _setDisplayed(this.eSortAsc, isAscending, { skipAriaHidden: true });\n        }\n\n        if (this.eSortDesc) {\n            const isDescending = sortDirection === 'desc';\n            _setDisplayed(this.eSortDesc, isDescending, { skipAriaHidden: true });\n        }\n\n        if (this.eSortNone) {\n            const alwaysHideNoSort = !this.column.getColDef().unSortIcon && !this.gos.get('unSortIcon');\n            const isNone = sortDirection === null || sortDirection === undefined;\n            _setDisplayed(this.eSortNone, !alwaysHideNoSort && isNone, { skipAriaHidden: true });\n        }\n    }\n\n    private setupMultiSortIndicator() {\n        this.addInIcon('sortUnSort', this.eSortMixed, this.column);\n\n        const isColumnShowingRowGroup = this.column.getColDef().showRowGroup;\n        const areGroupsCoupled = this.gos.isColumnsSortingCoupledToGroup();\n        if (areGroupsCoupled && isColumnShowingRowGroup) {\n            this.addManagedEventListeners({\n                // Watch global events, as row group columns can effect their display column.\n                sortChanged: this.updateMultiSortIndicator.bind(this),\n                // when grouping changes so can sort indexes and icons\n                columnRowGroupChanged: this.updateMultiSortIndicator.bind(this),\n            });\n            this.updateMultiSortIndicator();\n        }\n    }\n\n    private updateMultiSortIndicator() {\n        if (this.eSortMixed) {\n            const isMixedSort = this.sortController.getDisplaySortForColumn(this.column) === 'mixed';\n            _setDisplayed(this.eSortMixed, isMixedSort, { skipAriaHidden: true });\n        }\n    }\n\n    // we listen here for global sort events, NOT column sort events, as we want to do this\n    // when sorting has been set on all column (if we listened just for our col (where we\n    // set the asc / desc icons) then it's possible other cols are yet to get their sorting state.\n    private updateSortOrder(): void {\n        if (!this.eSortOrder) {\n            return;\n        }\n\n        const allColumnsWithSorting = this.sortController.getColumnsWithSortingOrdered();\n\n        const indexThisCol = this.sortController.getDisplaySortIndexForColumn(this.column) ?? -1;\n        const moreThanOneColSorting = allColumnsWithSorting.some(\n            (col) => this.sortController.getDisplaySortIndexForColumn(col) ?? -1 >= 1\n        );\n        const showIndex = indexThisCol >= 0 && moreThanOneColSorting;\n        _setDisplayed(this.eSortOrder, showIndex, { skipAriaHidden: true });\n\n        if (indexThisCol >= 0) {\n            this.eSortOrder.textContent = (indexThisCol + 1).toString();\n        } else {\n            _clearElement(this.eSortOrder);\n        }\n    }\n}\n\nexport const SortIndicatorSelector: ComponentSelector = {\n    selector: 'AG-SORT-INDICATOR',\n    component: SortIndicatorComp,\n};\n", "import type { FuncColsService } from '../../../columns/funcColsService';\nimport type { BeanCollection } from '../../../context/context';\nimport type { AgColumn } from '../../../entities/agColumn';\nimport type { SortDirection } from '../../../entities/colDef';\nimport type { Column } from '../../../interfaces/iColumn';\nimport type { AgGridCommon } from '../../../interfaces/iCommon';\nimport type { IComponent } from '../../../interfaces/iComponent';\nimport type { MenuService } from '../../../misc/menuService';\nimport type { SortController } from '../../../sortController';\nimport { _removeFromParent, _setDisplayed } from '../../../utils/dom';\nimport { _exists } from '../../../utils/generic';\nimport { _createIconNoSpan } from '../../../utils/icon';\nimport { _escapeString } from '../../../utils/string';\nimport { Component, RefPlaceholder } from '../../../widgets/component';\nimport type { LongTapEvent, TapEvent, TouchListenerEvent } from '../../../widgets/touchListener';\nimport { TouchListener } from '../../../widgets/touchListener';\nimport { SortIndicatorComp, SortIndicatorSelector } from './sortIndicatorComp';\n\nexport interface IHeaderParams<TData = any, TContext = any> extends AgGridCommon<TData, TContext> {\n    /** The column the header is for. */\n    column: Column;\n    /**\n     * The name to display for the column.\n     * If the column is using a headerValueGetter, the displayName will take this into account.\n     */\n    displayName: string;\n    /**\n     * Whether sorting is enabled for the column.\n     * Only put sort logic into your header if this is true.\n     */\n    enableSorting: boolean | undefined;\n    /**\n     * Whether menu is enabled for the column.\n     * Only display a menu button in your header if this is true.\n     */\n    enableMenu: boolean;\n    /**\n     * Whether filter button should be displayed in the header (for new column menu).\n     */\n    enableFilterButton: boolean;\n    /**\n     * Whether filter icon should be displayed in the header (for legacy tabbed column menu).\n     */\n    enableFilterIcon: boolean;\n    /**\n     * Callback to request the grid to show the column menu.\n     * Pass in the html element of the column menu button to have the\n     * grid position the menu over the button.\n     */\n    showColumnMenu: (source: HTMLElement) => void;\n    /**\n     * Callback to request the grid to show the column menu.\n     * Similar to `showColumnMenu`, but will position the menu next to the provided `mouseEvent`.\n     */\n    showColumnMenuAfterMouseClick: (mouseEvent: MouseEvent | Touch) => void;\n    /**\n     * Callback to request the grid to show the filter.\n     * Pass in the html element of the filter button to have the\n     * grid position the menu over the button.\n     */\n    showFilter: (source: HTMLElement) => void;\n    /**\n     * Callback to progress the sort for this column.\n     * The grid will decide the next sort direction eg ascending, descending or 'no sort'.\n     * Pass `multiSort=true` if you want to do a multi sort (eg user has Shift held down when they click).\n     */\n    progressSort: (multiSort?: boolean) => void;\n    /**\n     * Callback to set the sort for this column.\n     * Pass the sort direction to use ignoring the current sort eg one of 'asc', 'desc' or null (for no sort).\n     * Pass `multiSort=true` if you want to do a multi sort (eg user has Shift held down when they click)\n     */\n    setSort: (sort: SortDirection, multiSort?: boolean) => void;\n\n    /** Custom header template if provided to `headerComponentParams`, otherwise will be `undefined`. See [Header Templates](https://ag-grid.com/javascript-data-grid/column-headers/#header-templates) */\n    template?: string;\n    /**\n     * The header the grid provides.\n     * The custom header component is a child of the grid provided header.\n     * The grid's header component is what contains the grid managed functionality such as resizing, keyboard navigation etc.\n     * This is provided should you want to make changes to this cell,\n     * eg add ARIA tags, or add keyboard event listener (as focus goes here when navigating to the header).\n     */\n    eGridHeader: HTMLElement;\n\n    /**\n     * Sets a tooltip to the main element of this component.\n     * @param value The value to be displayed by the tooltip\n     * @param shouldDisplayTooltip A function returning a boolean that allows the tooltip to be displayed conditionally. This option does not work when `enableBrowserTooltips={true}`.\n     */\n    setTooltip: (value: string, shouldDisplayTooltip?: () => boolean) => void;\n}\n\nexport interface IHeader {\n    /** Get the header to refresh. Gets called whenever Column Defs are updated. */\n    refresh(params: IHeaderParams): boolean;\n}\n\nexport interface IHeaderComp extends IHeader, IComponent<IHeaderParams> {}\n\nconst HeaderCompTemplate = /* html */ `<div class=\"ag-cell-label-container\" role=\"presentation\">\n        <span data-ref=\"eMenu\" class=\"ag-header-icon ag-header-cell-menu-button\" aria-hidden=\"true\"></span>\n        <span data-ref=\"eFilterButton\" class=\"ag-header-icon ag-header-cell-filter-button\" aria-hidden=\"true\"></span>\n        <div data-ref=\"eLabel\" class=\"ag-header-cell-label\" role=\"presentation\">\n            <span data-ref=\"eText\" class=\"ag-header-cell-text\"></span>\n            <span data-ref=\"eFilter\" class=\"ag-header-icon ag-header-label-icon ag-filter-icon\" aria-hidden=\"true\"></span>\n            <ag-sort-indicator data-ref=\"eSortIndicator\"></ag-sort-indicator>\n        </div>\n    </div>`;\nexport class HeaderComp extends Component implements IHeaderComp {\n    private sortController: SortController;\n    private menuService: MenuService;\n    private funcColsService: FuncColsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.sortController = beans.sortController;\n        this.menuService = beans.menuService;\n        this.funcColsService = beans.funcColsService;\n    }\n\n    private eFilter: HTMLElement = RefPlaceholder;\n    private eFilterButton?: HTMLElement = RefPlaceholder;\n    private eSortIndicator: SortIndicatorComp = RefPlaceholder;\n    private eMenu?: HTMLElement = RefPlaceholder;\n    private eLabel: HTMLElement = RefPlaceholder;\n    private eText: HTMLElement = RefPlaceholder;\n\n    /**\n     * Selectors for custom headers templates\n     */\n    private readonly eSortOrder: HTMLElement = RefPlaceholder;\n    private readonly eSortAsc: HTMLElement = RefPlaceholder;\n    private readonly eSortDesc: HTMLElement = RefPlaceholder;\n    private readonly eSortMixed: HTMLElement = RefPlaceholder;\n    private readonly eSortNone: HTMLElement = RefPlaceholder;\n\n    private params: IHeaderParams;\n\n    private lastMovingChanged = 0;\n\n    private currentDisplayName: string;\n    private currentTemplate: string | null | undefined;\n    private currentShowMenu: boolean;\n    private currentSuppressMenuHide: boolean;\n    private currentSort: boolean | undefined;\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public override destroy(): void {\n        super.destroy();\n    }\n\n    public refresh(params: IHeaderParams): boolean {\n        const oldParams = this.params;\n\n        this.params = params;\n\n        // if template changed, then recreate the whole comp, the code required to manage\n        // a changing template is to difficult for what it's worth.\n        if (\n            this.workOutTemplate() != this.currentTemplate ||\n            this.workOutShowMenu() != this.currentShowMenu ||\n            this.workOutSort() != this.currentSort ||\n            this.shouldSuppressMenuHide() != this.currentSuppressMenuHide ||\n            oldParams.enableFilterButton != params.enableFilterButton ||\n            oldParams.enableFilterIcon != params.enableFilterIcon\n        ) {\n            return false;\n        }\n\n        this.setDisplayName(params);\n\n        return true;\n    }\n\n    private workOutTemplate(): string | null | undefined {\n        let template: string | null | undefined = this.params.template ?? HeaderCompTemplate;\n\n        // take account of any newlines & whitespace before/after the actual template\n        template = template && template.trim ? template.trim() : template;\n        return template;\n    }\n\n    public init(params: IHeaderParams): void {\n        this.params = params;\n\n        this.currentTemplate = this.workOutTemplate();\n        this.setTemplate(this.currentTemplate, [SortIndicatorSelector]);\n        this.setupTap();\n        this.setMenu();\n        this.setupSort();\n        this.setupFilterIcon();\n        this.setupFilterButton();\n        this.setDisplayName(params);\n    }\n\n    private setDisplayName(params: IHeaderParams): void {\n        if (this.currentDisplayName != params.displayName) {\n            this.currentDisplayName = params.displayName;\n            const displayNameSanitised = _escapeString(this.currentDisplayName, true);\n            if (this.eText) {\n                this.eText.textContent = displayNameSanitised!;\n            }\n        }\n    }\n\n    private addInIcon(iconName: string, eParent: HTMLElement, column: AgColumn): void {\n        if (eParent == null) {\n            return;\n        }\n\n        const eIcon = _createIconNoSpan(iconName, this.gos, column);\n        if (eIcon) {\n            eParent.appendChild(eIcon);\n        }\n    }\n\n    private setupTap(): void {\n        const { gos } = this;\n\n        if (gos.get('suppressTouch')) {\n            return;\n        }\n\n        const touchListener = new TouchListener(this.getGui(), true);\n        const suppressMenuHide = this.shouldSuppressMenuHide();\n        const tapMenuButton = suppressMenuHide && _exists(this.eMenu);\n        const menuTouchListener = tapMenuButton ? new TouchListener(this.eMenu!, true) : touchListener;\n\n        if (this.params.enableMenu) {\n            const eventType: TouchListenerEvent = tapMenuButton ? 'tap' : 'longTap';\n            const showMenuFn = (event: TapEvent | LongTapEvent) =>\n                this.params.showColumnMenuAfterMouseClick(event.touchStart);\n            this.addManagedListeners(menuTouchListener, { [eventType]: showMenuFn });\n        }\n\n        if (this.params.enableSorting) {\n            const tapListener = (event: TapEvent) => {\n                const target = event.touchStart.target as HTMLElement;\n                // When suppressMenuHide is true, a tap on the menu icon or filter button will bubble up\n                // to the header container, in that case we should not sort\n                if (suppressMenuHide && (this.eMenu?.contains(target) || this.eFilterButton?.contains(target))) {\n                    return;\n                }\n\n                this.sortController.progressSort(this.params.column as AgColumn, false, 'uiColumnSorted');\n            };\n\n            this.addManagedListeners(touchListener, { tap: tapListener });\n        }\n\n        if (this.params.enableFilterButton) {\n            const filterButtonTouchListener = new TouchListener(this.eFilterButton!, true);\n            this.addManagedListeners(filterButtonTouchListener, {\n                tap: () => this.params.showFilter(this.eFilterButton!),\n            });\n            this.addDestroyFunc(() => filterButtonTouchListener.destroy());\n        }\n\n        // if tapMenuButton is true `touchListener` and `menuTouchListener` are different\n        // so we need to make sure to destroy both listeners here\n        this.addDestroyFunc(() => touchListener.destroy());\n\n        if (tapMenuButton) {\n            this.addDestroyFunc(() => menuTouchListener.destroy());\n        }\n    }\n\n    private workOutShowMenu(): boolean {\n        return this.params.enableMenu && this.menuService.isHeaderMenuButtonEnabled();\n    }\n\n    private shouldSuppressMenuHide(): boolean {\n        return this.menuService.isHeaderMenuButtonAlwaysShowEnabled();\n    }\n\n    private setMenu(): void {\n        // if no menu provided in template, do nothing\n        if (!this.eMenu) {\n            return;\n        }\n\n        this.currentShowMenu = this.workOutShowMenu();\n        if (!this.currentShowMenu) {\n            _removeFromParent(this.eMenu);\n            this.eMenu = undefined;\n            return;\n        }\n\n        const isLegacyMenu = this.menuService.isLegacyMenuEnabled();\n        this.addInIcon(isLegacyMenu ? 'menu' : 'menuAlt', this.eMenu, this.params.column as AgColumn);\n        this.eMenu.classList.toggle('ag-header-menu-icon', !isLegacyMenu);\n\n        this.currentSuppressMenuHide = this.shouldSuppressMenuHide();\n        this.addManagedElementListeners(this.eMenu, { click: () => this.params.showColumnMenu(this.eMenu!) });\n        this.eMenu.classList.toggle('ag-header-menu-always-show', this.currentSuppressMenuHide);\n    }\n\n    public onMenuKeyboardShortcut(isFilterShortcut: boolean): boolean {\n        const column = this.params.column as AgColumn;\n        const isLegacyMenuEnabled = this.menuService.isLegacyMenuEnabled();\n        if (isFilterShortcut && !isLegacyMenuEnabled) {\n            if (this.menuService.isFilterMenuInHeaderEnabled(column)) {\n                this.params.showFilter(this.eFilterButton ?? this.eMenu ?? this.getGui());\n                return true;\n            }\n        } else if (this.params.enableMenu) {\n            this.params.showColumnMenu(this.eMenu ?? this.eFilterButton ?? this.getGui());\n            return true;\n        }\n        return false;\n    }\n\n    private workOutSort(): boolean | undefined {\n        return this.params.enableSorting;\n    }\n\n    public setupSort(): void {\n        this.currentSort = this.params.enableSorting;\n\n        // eSortIndicator will not be present when customers provided custom header\n        // templates, in that case, we need to look for provided sort elements and\n        // manually create eSortIndicator.\n        if (!this.eSortIndicator) {\n            this.eSortIndicator = this.createBean(new SortIndicatorComp(true));\n            this.eSortIndicator.attachCustomElements(\n                this.eSortOrder,\n                this.eSortAsc,\n                this.eSortDesc,\n                this.eSortMixed,\n                this.eSortNone\n            );\n        }\n        this.eSortIndicator.setupSort(this.params.column as AgColumn);\n\n        // we set up the indicator prior to the check for whether this column is sortable, as it allows the indicator to\n        // set up the multi sort indicator which can appear irrelevant of whether this column can itself be sorted.\n        // this can occur in the case of a non-sortable group display column.\n        if (!this.currentSort) {\n            return;\n        }\n\n        // keep track of last time the moving changed flag was set\n        this.addManagedListeners(this.params.column, {\n            movingChanged: () => {\n                this.lastMovingChanged = new Date().getTime();\n            },\n        });\n\n        // add the event on the header, so when clicked, we do sorting\n        if (this.eLabel) {\n            this.addManagedElementListeners(this.eLabel, {\n                click: (event: MouseEvent) => {\n                    // sometimes when moving a column via dragging, this was also firing a clicked event.\n                    // here is issue raised by user: https://ag-grid.zendesk.com/agent/tickets/1076\n                    // this check stops sort if a) column is moving or b) column moved less than 200ms ago (so caters for race condition)\n                    const moving = this.params.column.isMoving();\n                    const nowTime = new Date().getTime();\n                    // typically there is <2ms if moving flag was set recently, as it would be done in same VM turn\n                    const movedRecently = nowTime - this.lastMovingChanged < 50;\n                    const columnMoving = moving || movedRecently;\n\n                    if (!columnMoving) {\n                        const sortUsingCtrl = this.gos.get('multiSortKey') === 'ctrl';\n                        const multiSort = sortUsingCtrl ? event.ctrlKey || event.metaKey : event.shiftKey;\n                        this.params.progressSort(multiSort);\n                    }\n                },\n            });\n        }\n\n        const onSortingChanged = () => {\n            const sort = this.params.column.getSort();\n            this.addOrRemoveCssClass('ag-header-cell-sorted-asc', sort === 'asc');\n            this.addOrRemoveCssClass('ag-header-cell-sorted-desc', sort === 'desc');\n            this.addOrRemoveCssClass('ag-header-cell-sorted-none', !sort);\n\n            if (this.params.column.getColDef().showRowGroup) {\n                const sourceColumns = this.funcColsService.getSourceColumnsForGroupColumn(\n                    this.params.column as AgColumn\n                );\n                // this == is intentional, as it allows null and undefined to match, which are both unsorted states\n                const sortDirectionsMatch = sourceColumns?.every(\n                    (sourceCol) => this.params.column.getSort() == sourceCol.getSort()\n                );\n                const isMultiSorting = !sortDirectionsMatch;\n\n                this.addOrRemoveCssClass('ag-header-cell-sorted-mixed', isMultiSorting);\n            }\n        };\n        this.addManagedEventListeners({\n            sortChanged: onSortingChanged,\n            columnRowGroupChanged: onSortingChanged,\n        });\n    }\n\n    private setupFilterIcon(): void {\n        if (!this.eFilter) {\n            return;\n        }\n        this.configureFilter(this.params.enableFilterIcon, this.eFilter, this.onFilterChangedIcon.bind(this));\n    }\n\n    private setupFilterButton(): void {\n        if (!this.eFilterButton) {\n            return;\n        }\n        const configured = this.configureFilter(\n            this.params.enableFilterButton,\n            this.eFilterButton,\n            this.onFilterChangedButton.bind(this)\n        );\n        if (configured) {\n            this.addManagedElementListeners(this.eFilterButton, {\n                click: () => this.params.showFilter(this.eFilterButton!),\n            });\n        } else {\n            this.eFilterButton = undefined;\n        }\n    }\n\n    private configureFilter(enabled: boolean, element: HTMLElement, filterChangedCallback: () => void): boolean {\n        if (!enabled) {\n            _removeFromParent(element);\n            return false;\n        }\n\n        const column = this.params.column as AgColumn;\n        this.addInIcon('filter', element, column);\n\n        this.addManagedListeners(column, { filterChanged: filterChangedCallback });\n        filterChangedCallback();\n        return true;\n    }\n\n    private onFilterChangedIcon(): void {\n        const filterPresent = this.params.column.isFilterActive();\n        _setDisplayed(this.eFilter, filterPresent, { skipAriaHidden: true });\n    }\n\n    private onFilterChangedButton(): void {\n        const filterPresent = this.params.column.isFilterActive();\n        this.eFilterButton!.classList.toggle('ag-filter-active', filterPresent);\n    }\n\n    public getAnchorElementForMenu(isFilter?: boolean): HTMLElement {\n        if (isFilter) {\n            return this.eFilterButton ?? this.eMenu ?? this.getGui();\n        }\n        return this.eMenu ?? this.eFilterButton ?? this.getGui();\n    }\n}\n", "import type { ColumnModel } from '../../../columns/columnModel';\nimport type { BeanCollection } from '../../../context/context';\nimport type { AgColumnGroup } from '../../../entities/agColumnGroup';\nimport type { ColumnGroup } from '../../../interfaces/iColumn';\nimport type { AgGridCommon } from '../../../interfaces/iCommon';\nimport type { IComponent } from '../../../interfaces/iComponent';\nimport { _setDisplayed } from '../../../utils/dom';\nimport { _isStopPropagationForAgGrid, _stopPropagationForAgGrid } from '../../../utils/event';\nimport { _warnOnce } from '../../../utils/function';\nimport { _exists } from '../../../utils/generic';\nimport { _createIconNoSpan } from '../../../utils/icon';\nimport { _escapeString } from '../../../utils/string';\nimport { Component, RefPlaceholder } from '../../../widgets/component';\nimport { TouchListener } from '../../../widgets/touchListener';\n\nexport interface IHeaderGroupParams<TData = any, TContext = any> extends AgGridCommon<TData, TContext> {\n    /** The column group the header is for. */\n    columnGroup: ColumnGroup;\n    /**\n     * The text label to render.\n     * If the column is using a headerValueGetter, the displayName will take this into account.\n     */\n    displayName: string;\n    /** Opens / closes the column group */\n    setExpanded: (expanded: boolean) => void;\n    /**\n     * Sets a tooltip to the main element of this component.\n     * @param value The value to be displayed by the tooltip\n     * @param shouldDisplayTooltip A function returning a boolean that allows the tooltip to be displayed conditionally. This option does not work when `enableBrowserTooltips={true}`.\n     */\n    setTooltip: (value: string, shouldDisplayTooltip?: () => boolean) => void;\n}\n\nexport interface IHeaderGroup {}\n\nexport interface IHeaderGroupComp extends IHeaderGroup, IComponent<IHeaderGroupParams> {}\n\nexport class HeaderGroupComp extends Component implements IHeaderGroupComp {\n    private columnModel: ColumnModel;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n    }\n\n    private params: IHeaderGroupParams;\n\n    private readonly agOpened: HTMLElement = RefPlaceholder;\n    private readonly agClosed: HTMLElement = RefPlaceholder;\n    private readonly agLabel: HTMLElement = RefPlaceholder;\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-header-group-cell-label\" role=\"presentation\">\n            <span data-ref=\"agLabel\" class=\"ag-header-group-text\" role=\"presentation\"></span>\n            <span data-ref=\"agOpened\" class=\"ag-header-icon ag-header-expand-icon ag-header-expand-icon-expanded\"></span>\n            <span data-ref=\"agClosed\" class=\"ag-header-icon ag-header-expand-icon ag-header-expand-icon-collapsed\"></span>\n        </div>`);\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public override destroy(): void {\n        super.destroy();\n    }\n\n    public init(params: IHeaderGroupParams): void {\n        this.params = params;\n\n        this.checkWarnings();\n\n        this.setupLabel();\n        this.addGroupExpandIcon();\n        this.setupExpandIcons();\n    }\n\n    private checkWarnings(): void {\n        const paramsAny = this.params as any;\n\n        if (paramsAny.template) {\n            _warnOnce(\n                `A template was provided for Header Group Comp - templates are only supported for Header Comps (not groups)`\n            );\n        }\n    }\n\n    private setupExpandIcons(): void {\n        this.addInIcon('columnGroupOpened', this.agOpened);\n        this.addInIcon('columnGroupClosed', this.agClosed);\n\n        const expandAction = (event: MouseEvent) => {\n            if (_isStopPropagationForAgGrid(event)) {\n                return;\n            }\n\n            const newExpandedValue = !this.params.columnGroup.isExpanded();\n            this.columnModel.setColumnGroupOpened(\n                (this.params.columnGroup as AgColumnGroup).getProvidedColumnGroup(),\n                newExpandedValue,\n                'uiColumnExpanded'\n            );\n        };\n\n        this.addTouchAndClickListeners(this.agClosed, expandAction);\n        this.addTouchAndClickListeners(this.agOpened, expandAction);\n\n        const stopPropagationAction = (event: MouseEvent) => {\n            _stopPropagationForAgGrid(event);\n        };\n\n        // adding stopPropagation to the double click for the icons prevents double click action happening\n        // when the icons are clicked. if the icons are double clicked, then the groups should open and\n        // then close again straight away. if we also listened to double click, then the group would open,\n        // close, then open, which is not what we want. double click should only action if the user double\n        // clicks outside of the icons.\n        this.addManagedElementListeners(this.agClosed, { dblclick: stopPropagationAction });\n        this.addManagedElementListeners(this.agOpened, { dblclick: stopPropagationAction });\n\n        this.addManagedElementListeners(this.getGui(), { dblclick: expandAction });\n\n        this.updateIconVisibility();\n\n        const providedColumnGroup = this.params.columnGroup.getProvidedColumnGroup();\n        const updateIcon = this.updateIconVisibility.bind(this);\n        this.addManagedListeners(providedColumnGroup, {\n            expandedChanged: updateIcon,\n            expandableChanged: updateIcon,\n        });\n    }\n\n    private addTouchAndClickListeners(eElement: HTMLElement, action: (event: MouseEvent) => void): void {\n        const touchListener = new TouchListener(eElement, true);\n\n        this.addManagedListeners(touchListener, { tap: action });\n        this.addDestroyFunc(() => touchListener.destroy());\n        this.addManagedElementListeners(eElement, { click: action });\n    }\n\n    private updateIconVisibility(): void {\n        const columnGroup = this.params.columnGroup;\n        if (columnGroup.isExpandable()) {\n            const expanded = this.params.columnGroup.isExpanded();\n            _setDisplayed(this.agOpened, expanded);\n            _setDisplayed(this.agClosed, !expanded);\n        } else {\n            _setDisplayed(this.agOpened, false);\n            _setDisplayed(this.agClosed, false);\n        }\n    }\n\n    private addInIcon(iconName: string, element: HTMLElement): void {\n        const eIcon = _createIconNoSpan(iconName, this.gos, null);\n        if (eIcon) {\n            element.appendChild(eIcon);\n        }\n    }\n\n    private addGroupExpandIcon() {\n        if (!this.params.columnGroup.isExpandable()) {\n            _setDisplayed(this.agOpened, false);\n            _setDisplayed(this.agClosed, false);\n            return;\n        }\n    }\n\n    private setupLabel(): void {\n        // no renderer, default text render\n        const { displayName, columnGroup } = this.params;\n\n        if (_exists(displayName)) {\n            const displayNameSanitised = _escapeString(displayName, true);\n            this.agLabel.textContent = displayNameSanitised!;\n        }\n\n        this.addOrRemoveCssClass('ag-sticky-label', !columnGroup.getColGroupDef()?.suppressStickyLabel);\n    }\n}\n", "export enum ModuleNames {\n    CommunityCoreModule = '@ag-grid-community/core',\n\n    // community modules\n    InfiniteRowModelModule = '@ag-grid-community/infinite-row-model',\n    ClientSideRowModelModule = '@ag-grid-community/client-side-row-model',\n    CsvExportModule = '@ag-grid-community/csv-export',\n\n    // enterprise core - users don't need to import on this, but other enterprise modules do\n    EnterpriseCoreModule = '@ag-grid-enterprise/core',\n\n    // enterprise modules\n    RowGroupingModule = '@ag-grid-enterprise/row-grouping',\n    ColumnsToolPanelModule = '@ag-grid-enterprise/column-tool-panel',\n    FiltersToolPanelModule = '@ag-grid-enterprise/filter-tool-panel',\n    MenuModule = '@ag-grid-enterprise/menu',\n    SetFilterModule = '@ag-grid-enterprise/set-filter',\n    MultiFilterModule = '@ag-grid-enterprise/multi-filter',\n    StatusBarModule = '@ag-grid-enterprise/status-bar',\n    SideBarModule = '@ag-grid-enterprise/side-bar',\n    RangeSelectionModule = '@ag-grid-enterprise/range-selection',\n    MasterDetailModule = '@ag-grid-enterprise/master-detail',\n    RichSelectModule = '@ag-grid-enterprise/rich-select',\n    GridChartsModule = '@ag-grid-enterprise/charts',\n    ViewportRowModelModule = '@ag-grid-enterprise/viewport-row-model',\n    ServerSideRowModelModule = '@ag-grid-enterprise/server-side-row-model',\n    ExcelExportModule = '@ag-grid-enterprise/excel-export',\n    ClipboardModule = '@ag-grid-enterprise/clipboard',\n    SparklinesModule = '@ag-grid-enterprise/sparklines',\n    AdvancedFilterModule = '@ag-grid-enterprise/advanced-filter',\n\n    // framework wrappers currently don't provide beans, comps etc, so no need to be modules,\n    // however i argue they should be as in theory they 'could' provide beans etc\n    AngularModule = '@ag-grid-community/angular',\n    ReactModule = '@ag-grid-community/react',\n    VueModule = '@ag-grid-community/vue',\n\n    // and then this, which is definitely not a grid module, as it should not have any dependency\n    // on the grid (ie shouldn't even reference the Module interface)\n    // ChartsModule = \"@ag-grid-community/charts-core\",\n}\n", "import type { Module, ModuleValidationInvalidResult } from '../interfaces/iModule';\nimport { _errorOnce } from '../utils/function';\nimport { _values } from '../utils/generic';\nimport { ModuleNames } from './moduleNames';\n\nexport class ModuleRegistry {\n    // having in a map a) removes duplicates and b) allows fast lookup\n    private static globalModulesMap: { [name: string]: Module } = {};\n    private static gridModulesMap: { [gridId: string]: { [name: string]: Module } } = {};\n    private static moduleBased: boolean | undefined;\n    private static currentModuleVersion: string;\n    private static isBundled: boolean | undefined;\n    private static areGridScopedModules = false;\n\n    /**\n     * Globally register the given module for all grids.\n     * @param module - module to register\n     */\n    public static register(module: Module): void {\n        ModuleRegistry.__register(module, true, undefined);\n    }\n    /**\n     * Globally register the given modules for all grids.\n     * @param modules - modules to register\n     */\n    public static registerModules(modules: Module[]): void {\n        ModuleRegistry.__registerModules(modules, true, undefined);\n    }\n\n    /** AG GRID INTERNAL - Module registration helper. */\n    public static __register(module: Module, moduleBased: boolean, gridId: string | undefined): void {\n        ModuleRegistry.runVersionChecks(module);\n\n        if (gridId !== undefined) {\n            ModuleRegistry.areGridScopedModules = true;\n            if (ModuleRegistry.gridModulesMap[gridId] === undefined) {\n                ModuleRegistry.gridModulesMap[gridId] = {};\n            }\n            ModuleRegistry.gridModulesMap[gridId][module.moduleName] = module;\n        } else {\n            ModuleRegistry.globalModulesMap[module.moduleName] = module;\n        }\n\n        ModuleRegistry.setModuleBased(moduleBased);\n    }\n\n    /** AG GRID INTERNAL - Unregister grid scoped module. */\n    public static __unRegisterGridModules(gridId: string): void {\n        delete ModuleRegistry.gridModulesMap[gridId];\n    }\n    /** AG GRID INTERNAL - Module registration helper. */\n    public static __registerModules(modules: Module[], moduleBased: boolean, gridId: string | undefined): void {\n        ModuleRegistry.setModuleBased(moduleBased);\n\n        if (!modules) {\n            return;\n        }\n        modules.forEach((module) => ModuleRegistry.__register(module, moduleBased, gridId));\n    }\n\n    private static isValidModuleVersion(module: Module): boolean {\n        const [moduleMajor, moduleMinor] = module.version.split('.') || [];\n        const [currentModuleMajor, currentModuleMinor] = ModuleRegistry.currentModuleVersion.split('.') || [];\n\n        return moduleMajor === currentModuleMajor && moduleMinor === currentModuleMinor;\n    }\n\n    private static runVersionChecks(module: Module) {\n        if (!ModuleRegistry.currentModuleVersion) {\n            ModuleRegistry.currentModuleVersion = module.version;\n        }\n        const errorMsg = (details: string) =>\n            `You are using incompatible versions of AG Grid modules. Major and minor versions should always match across modules. ${details} Please update all modules to the same version.`;\n        if (!module.version) {\n            _errorOnce(errorMsg(`'${module.moduleName}' is incompatible.`));\n        } else if (!ModuleRegistry.isValidModuleVersion(module)) {\n            _errorOnce(\n                errorMsg(\n                    `'${module.moduleName}' is version ${module.version} but the other modules are version ${ModuleRegistry.currentModuleVersion}.`\n                )\n            );\n        }\n\n        if (module.validate) {\n            const result = module.validate();\n            if (!result.isValid) {\n                const errorResult = result as ModuleValidationInvalidResult;\n                _errorOnce(`${errorResult.message}`);\n            }\n        }\n    }\n\n    private static setModuleBased(moduleBased: boolean) {\n        if (ModuleRegistry.moduleBased === undefined) {\n            ModuleRegistry.moduleBased = moduleBased;\n        } else {\n            if (ModuleRegistry.moduleBased !== moduleBased) {\n                _errorOnce(\n                    `AG Grid: You are mixing modules (i.e. @ag-grid-community/core) and packages (ag-grid-community) - you can only use one or the other of these mechanisms.`\n                );\n                _errorOnce('Please see https://www.ag-grid.com/javascript-grid/modules/ for more information.');\n            }\n        }\n    }\n\n    /**\n     * AG GRID INTERNAL - Set if files are being served from a single UMD bundle to provide accurate enterprise upgrade steps.\n     */\n    public static __setIsBundled() {\n        ModuleRegistry.isBundled = true;\n    }\n\n    /** AG GRID INTERNAL - Assert a given module has been register, globally or individually with this grid. */\n    public static __assertRegistered(moduleName: ModuleNames, reason: string, gridId: string): boolean {\n        if (this.__isRegistered(moduleName, gridId)) {\n            return true;\n        }\n\n        let warningMessage: string;\n\n        if (ModuleRegistry.isBundled) {\n            {\n                warningMessage = `AG Grid: unable to use ${reason} as 'ag-grid-enterprise' has not been loaded. Check you are using the Enterprise bundle:\n        \n        <script src=\"https://cdn.jsdelivr.net/npm/ag-grid-enterprise@AG_GRID_VERSION/dist/ag-grid-enterprise.min.js\"></script>\n        \nFor more info see: https://ag-grid.com/javascript-data-grid/getting-started/#getting-started-with-ag-grid-enterprise`;\n            }\n        } else if (ModuleRegistry.moduleBased || ModuleRegistry.moduleBased === undefined) {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const modName = Object.entries(ModuleNames).find(([k, v]) => v === moduleName)?.[0];\n            warningMessage = `AG Grid: unable to use ${reason} as the ${modName} is not registered${ModuleRegistry.areGridScopedModules ? ` for gridId: ${gridId}` : ''}. Check if you have registered the module:\n           \n    import { ModuleRegistry } from '@ag-grid-community/core';\n    import { ${modName} } from '${moduleName}';\n    \n    ModuleRegistry.registerModules([ ${modName} ]);\n\nFor more info see: https://www.ag-grid.com/javascript-grid/modules/`;\n        } else {\n            warningMessage = `AG Grid: unable to use ${reason} as package 'ag-grid-enterprise' has not been imported. Check that you have imported the package:\n            \n    import 'ag-grid-enterprise';`;\n        }\n\n        _errorOnce(warningMessage);\n\n        return false;\n    }\n\n    /** AG GRID INTERNAL - Is the given module registered, globally or individually with this grid. */\n    public static __isRegistered(moduleName: ModuleNames, gridId: string): boolean {\n        return !!ModuleRegistry.globalModulesMap[moduleName] || !!ModuleRegistry.gridModulesMap[gridId]?.[moduleName];\n    }\n\n    /** AG GRID INTERNAL - Get all registered modules globally / individually for this grid. */\n    public static __getRegisteredModules(gridId: string): Module[] {\n        return [..._values(ModuleRegistry.globalModulesMap), ..._values(ModuleRegistry.gridModulesMap[gridId] || {})];\n    }\n\n    /** AG GRID INTERNAL - Get the list of modules registered individually for this grid. */\n    public static __getGridRegisteredModules(gridId: string): Module[] {\n        return _values(ModuleRegistry.gridModulesMap[gridId] ?? {}) || [];\n    }\n\n    /** INTERNAL */\n    public static __isPackageBased(): boolean {\n        return !ModuleRegistry.moduleBased;\n    }\n}\n", "import type { BeanCollection } from '../../context/context';\nimport type { FilterManager } from '../../filter/filterManager';\nimport { _clearElement } from '../../utils/dom';\nimport { _exists } from '../../utils/generic';\nimport { Component } from '../../widgets/component';\nimport type { ICellRenderer } from './iCellRenderer';\n\nconst ARROW_UP = '\\u2191';\nconst ARROW_DOWN = '\\u2193';\n\nexport class AnimateShowChangeCellRenderer extends Component implements ICellRenderer {\n    private filterManager?: FilterManager;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.filterManager = beans.filterManager;\n    }\n\n    private lastValue: number;\n\n    private eValue: HTMLElement;\n    private eDelta: HTMLElement;\n\n    private refreshCount = 0;\n\n    constructor() {\n        super();\n\n        const template = document.createElement('span');\n        const delta = document.createElement('span');\n        delta.setAttribute('class', 'ag-value-change-delta');\n\n        const value = document.createElement('span');\n        value.setAttribute('class', 'ag-value-change-value');\n\n        template.appendChild(delta);\n        template.appendChild(value);\n\n        this.setTemplateFromElement(template);\n    }\n\n    public init(params: any): void {\n        this.eValue = this.queryForHtmlElement('.ag-value-change-value');\n        this.eDelta = this.queryForHtmlElement('.ag-value-change-delta');\n\n        this.refresh(params, true);\n    }\n\n    private showDelta(params: any, delta: number): void {\n        const absDelta = Math.abs(delta);\n        const valueFormatted = params.formatValue(absDelta);\n\n        const valueToUse = _exists(valueFormatted) ? valueFormatted : absDelta;\n\n        const deltaUp = delta >= 0;\n\n        if (deltaUp) {\n            this.eDelta.textContent = ARROW_UP + valueToUse;\n        } else {\n            // because negative, use ABS to remove sign\n            this.eDelta.textContent = ARROW_DOWN + valueToUse;\n        }\n\n        this.eDelta.classList.toggle('ag-value-change-delta-up', deltaUp);\n        this.eDelta.classList.toggle('ag-value-change-delta-down', !deltaUp);\n    }\n\n    private setTimerToRemoveDelta(): void {\n        // the refreshCount makes sure that if the value updates again while\n        // the below timer is waiting, then the below timer will realise it\n        // is not the most recent and will not try to remove the delta value.\n        this.refreshCount++;\n        const refreshCountCopy = this.refreshCount;\n        this.getFrameworkOverrides().wrapIncoming(() => {\n            window.setTimeout(() => {\n                if (refreshCountCopy === this.refreshCount) {\n                    this.hideDeltaValue();\n                }\n            }, 2000);\n        });\n    }\n\n    private hideDeltaValue(): void {\n        this.eValue.classList.remove('ag-value-change-value-highlight');\n        _clearElement(this.eDelta);\n    }\n\n    public refresh(params: any, isInitialRender: boolean = false): boolean {\n        const value = params.value;\n\n        if (value === this.lastValue) {\n            return false;\n        }\n\n        if (_exists(params.valueFormatted)) {\n            this.eValue.textContent = params.valueFormatted;\n        } else if (_exists(params.value)) {\n            this.eValue.textContent = value;\n        } else {\n            _clearElement(this.eValue);\n        }\n\n        // we don't show the delta if we are in the middle of a filter. see comment on FilterManager\n        // with regards processingFilterChange\n        if (this.filterManager?.isSuppressFlashingCellsBecauseFiltering()) {\n            return false;\n        }\n\n        if (typeof value === 'number' && typeof this.lastValue === 'number') {\n            const delta = value - this.lastValue;\n            this.showDelta(params, delta);\n        }\n\n        // highlight the current value, but only if it's not new, otherwise it\n        // would get highlighted first time the value is shown\n        if (this.lastValue) {\n            this.eValue.classList.add('ag-value-change-value-highlight');\n        }\n\n        if (!isInitialRender) {\n            this.setTimerToRemoveDelta();\n        }\n\n        this.lastValue = value;\n\n        return true;\n    }\n}\n", "import type { BeanCollection } from '../../context/context';\nimport type { FilterManager } from '../../filter/filterManager';\nimport { _clearElement } from '../../utils/dom';\nimport { _exists, _missing } from '../../utils/generic';\nimport { Component } from '../../widgets/component';\nimport type { ICellRenderer } from './iCellRenderer';\n\nexport class AnimateSlideCellRenderer extends Component implements ICellRenderer {\n    private eCurrent: HTMLElement;\n    private ePrevious: HTMLElement | null;\n\n    private lastValue: any;\n\n    private refreshCount = 0;\n\n    private filterManager?: FilterManager;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.filterManager = beans.filterManager;\n    }\n\n    constructor() {\n        super();\n\n        const template = document.createElement('span');\n        const slide = document.createElement('span');\n        slide.setAttribute('class', 'ag-value-slide-current');\n        template.appendChild(slide);\n\n        this.setTemplateFromElement(template);\n\n        this.eCurrent = this.queryForHtmlElement('.ag-value-slide-current');\n    }\n\n    public init(params: any): void {\n        this.refresh(params, true);\n    }\n\n    public addSlideAnimation(): void {\n        this.refreshCount++;\n\n        // below we keep checking this, and stop working on the animation\n        // if it no longer matches - this means another animation has started\n        // and this one is stale.\n        const refreshCountCopy = this.refreshCount;\n\n        // if old animation, remove it\n        if (this.ePrevious) {\n            this.getGui().removeChild(this.ePrevious);\n        }\n\n        const prevElement = document.createElement('span');\n        prevElement.setAttribute('class', 'ag-value-slide-previous ag-value-slide-out');\n        this.ePrevious = prevElement;\n\n        this.ePrevious.textContent = this.eCurrent.textContent;\n        this.getGui().insertBefore(this.ePrevious, this.eCurrent);\n\n        // having timeout of 0 allows use to skip to the next css turn,\n        // so we know the previous css classes have been applied. so the\n        // complex set of setTimeout below creates the animation\n        this.getFrameworkOverrides().wrapIncoming(() => {\n            window.setTimeout(() => {\n                if (refreshCountCopy !== this.refreshCount) {\n                    return;\n                }\n                this.ePrevious!.classList.add('ag-value-slide-out-end');\n            }, 50);\n\n            window.setTimeout(() => {\n                if (refreshCountCopy !== this.refreshCount) {\n                    return;\n                }\n                this.getGui().removeChild(this.ePrevious!);\n                this.ePrevious = null;\n            }, 3000);\n        });\n    }\n\n    public refresh(params: any, isInitialRender: boolean = false): boolean {\n        let value = params.value;\n\n        if (_missing(value)) {\n            value = '';\n        }\n\n        if (value === this.lastValue) {\n            return false;\n        }\n\n        // we don't show the delta if we are in the middle of a filter. see comment on FilterManager\n        // with regards processingFilterChange\n        if (this.filterManager?.isSuppressFlashingCellsBecauseFiltering()) {\n            return false;\n        }\n\n        if (!isInitialRender) {\n            this.addSlideAnimation();\n        }\n\n        this.lastValue = value;\n\n        if (_exists(params.valueFormatted)) {\n            this.eCurrent.textContent = params.valueFormatted;\n        } else if (_exists(params.value)) {\n            this.eCurrent.textContent = value;\n        } else {\n            _clearElement(this.eCurrent);\n        }\n\n        return true;\n    }\n}\n", "export class KeyCode {\n    static BACKSPACE = 'Backspace' as const;\n    static TAB = 'Tab' as const;\n    static ENTER = 'Enter' as const;\n    static ESCAPE = 'Escape' as const;\n    static SPACE = ' ' as const;\n    static LEFT = 'ArrowLeft' as const;\n    static UP = 'ArrowUp' as const;\n    static RIGHT = 'ArrowRight' as const;\n    static DOWN = 'ArrowDown' as const;\n    static DELETE = 'Delete' as const;\n\n    static F2 = 'F2' as const;\n\n    static PAGE_UP = 'PageUp' as const;\n    static PAGE_DOWN = 'PageDown' as const;\n    static PAGE_HOME = 'Home' as const;\n    static PAGE_END = 'End' as const;\n\n    // these should be used with `event.code` instead of `event.key`\n    // as `event.key` changes when non-latin keyboards are used\n    static A = 'KeyA' as const;\n    static C = 'KeyC' as const;\n    static D = 'KeyD' as const;\n    static V = 'KeyV' as const;\n    static X = 'KeyX' as const;\n    static Y = 'KeyY' as const;\n    static Z = 'KeyZ' as const;\n}\n", "import type { AgLabelParams, LabelAlignment } from '../interfaces/agFieldParams';\nimport { _setAriaRole } from '../utils/aria';\nimport { _clearElement, _setDisabled, _setDisplayed, _setElementWidth } from '../utils/dom';\nimport type { ComponentEvent, ComponentSelector } from './component';\nimport { Component } from './component';\n\nexport type AgAbstractLabelEvent = ComponentEvent;\nexport abstract class AgAbstractLabel<\n    TConfig extends AgLabelParams = AgLabelParams,\n    TEventType extends string = AgAbstractLabelEvent,\n> extends Component<TEventType | AgAbstractLabelEvent> {\n    protected abstract eLabel: HTMLElement;\n\n    protected readonly config: TConfig;\n    protected labelSeparator: string = '';\n    protected labelAlignment: LabelAlignment = 'left';\n    protected disabled: boolean = false;\n    private label: HTMLElement | string = '';\n\n    constructor(config?: TConfig, template?: string, components?: ComponentSelector[]) {\n        super(template, components);\n\n        this.config = config || ({} as any);\n    }\n\n    public postConstruct() {\n        this.addCssClass('ag-labeled');\n        this.eLabel.classList.add('ag-label');\n\n        const { labelSeparator, label, labelWidth, labelAlignment, disabled } = this.config;\n\n        if (disabled != null) {\n            this.setDisabled(disabled);\n        }\n\n        if (labelSeparator != null) {\n            this.setLabelSeparator(labelSeparator);\n        }\n\n        if (label != null) {\n            this.setLabel(label);\n        }\n\n        if (labelWidth != null) {\n            this.setLabelWidth(labelWidth);\n        }\n\n        this.setLabelAlignment(labelAlignment || this.labelAlignment);\n        this.refreshLabel();\n    }\n\n    protected refreshLabel() {\n        _clearElement(this.eLabel);\n\n        if (typeof this.label === 'string') {\n            this.eLabel.innerText = this.label + this.labelSeparator;\n        } else if (this.label) {\n            this.eLabel.appendChild(this.label);\n        }\n\n        if (this.label === '') {\n            _setDisplayed(this.eLabel, false);\n            _setAriaRole(this.eLabel, 'presentation');\n        } else {\n            _setDisplayed(this.eLabel, true);\n            _setAriaRole(this.eLabel, null);\n        }\n    }\n\n    public setLabelSeparator(labelSeparator: string): this {\n        if (this.labelSeparator === labelSeparator) {\n            return this;\n        }\n\n        this.labelSeparator = labelSeparator;\n\n        if (this.label != null) {\n            this.refreshLabel();\n        }\n\n        return this;\n    }\n\n    public getLabelId(): string {\n        this.eLabel.id = this.eLabel.id || `ag-${this.getCompId()}-label`;\n\n        return this.eLabel.id;\n    }\n\n    public getLabel(): HTMLElement | string {\n        return this.label;\n    }\n\n    public setLabel(label: HTMLElement | string): this {\n        if (this.label === label) {\n            return this;\n        }\n\n        this.label = label;\n\n        this.refreshLabel();\n\n        return this;\n    }\n\n    public setLabelAlignment(alignment: LabelAlignment): this {\n        const eGui = this.getGui();\n        const eGuiClassList = eGui.classList;\n\n        eGuiClassList.toggle('ag-label-align-left', alignment === 'left');\n        eGuiClassList.toggle('ag-label-align-right', alignment === 'right');\n        eGuiClassList.toggle('ag-label-align-top', alignment === 'top');\n\n        return this;\n    }\n\n    public setLabelEllipsis(hasEllipsis: boolean): this {\n        this.eLabel.classList.toggle('ag-label-ellipsis', hasEllipsis);\n\n        return this;\n    }\n\n    public setLabelWidth(width: number | 'flex'): this {\n        if (this.label == null) {\n            return this;\n        }\n\n        _setElementWidth(this.eLabel, width);\n\n        return this;\n    }\n\n    public setDisabled(disabled: boolean): this {\n        disabled = !!disabled;\n\n        const element = this.getGui();\n\n        _setDisabled(element, disabled);\n        element.classList.toggle('ag-disabled', disabled);\n\n        this.disabled = disabled;\n\n        return this;\n    }\n\n    public isDisabled(): boolean {\n        return !!this.disabled;\n    }\n}\n", "import type { AgFieldParams } from '../interfaces/agFieldParams';\nimport { _getAriaLabel, _setAriaLabel, _setAriaLabelledBy } from '../utils/aria';\nimport { _setFixedWidth } from '../utils/dom';\nimport { AgAbstractLabel } from './agAbstractLabel';\nimport type { ComponentSelector } from './component';\n\nexport type FieldElement = HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\nexport type AgAbstractFieldEvent = 'fieldValueChanged';\n\nexport abstract class AgAbstractField<\n    TValue,\n    TConfig extends AgFieldParams = AgFieldParams,\n    TEventType extends string = AgAbstractFieldEvent,\n> extends AgAbstractLabel<TConfig, TEventType | AgAbstractFieldEvent> {\n    protected previousValue: TValue | null | undefined;\n    protected value: TValue | null | undefined;\n\n    constructor(\n        config?: TConfig,\n        template?: string,\n        components?: ComponentSelector[],\n        protected readonly className?: string\n    ) {\n        super(config, template, components);\n    }\n\n    public override postConstruct(): void {\n        super.postConstruct();\n\n        const { width, value, onValueChange } = this.config;\n        if (width != null) {\n            this.setWidth(width);\n        }\n        if (value != null) {\n            this.setValue(value);\n        }\n        if (onValueChange != null) {\n            this.onValueChange(onValueChange);\n        }\n\n        if (this.className) {\n            this.addCssClass(this.className);\n        }\n\n        this.refreshAriaLabelledBy();\n    }\n\n    public override setLabel(label: string | HTMLElement): this {\n        super.setLabel(label);\n        this.refreshAriaLabelledBy();\n\n        return this;\n    }\n\n    protected refreshAriaLabelledBy() {\n        const ariaEl = this.getAriaElement();\n        const labelId = this.getLabelId();\n        const label = this.getLabel();\n\n        if (label == null || label == '' || _getAriaLabel(ariaEl) !== null) {\n            _setAriaLabelledBy(ariaEl, '');\n        } else {\n            _setAriaLabelledBy(ariaEl, labelId ?? '');\n        }\n    }\n\n    public setAriaLabel(label?: string | null): this {\n        _setAriaLabel(this.getAriaElement(), label);\n        this.refreshAriaLabelledBy();\n\n        return this;\n    }\n\n    public onValueChange(callbackFn: (newValue?: TValue | null) => void) {\n        this.addManagedListeners<AgAbstractFieldEvent>(this, { fieldValueChanged: () => callbackFn(this.getValue()) });\n\n        return this;\n    }\n\n    public getWidth(): number {\n        return this.getGui().clientWidth;\n    }\n\n    public setWidth(width: number): this {\n        _setFixedWidth(this.getGui(), width);\n\n        return this;\n    }\n\n    public getPreviousValue(): TValue | null | undefined {\n        return this.previousValue;\n    }\n\n    public getValue(): TValue | null | undefined {\n        return this.value;\n    }\n\n    public setValue(value?: TValue | null, silent?: boolean): this {\n        if (this.value === value) {\n            return this;\n        }\n\n        this.previousValue = this.value;\n        this.value = value;\n\n        if (!silent) {\n            this.dispatchLocalEvent({ type: 'fieldValueChanged' });\n        }\n\n        return this;\n    }\n}\n", "import type { AgInputFieldParams } from '../interfaces/agFieldParams';\nimport { _setAriaLabel } from '../utils/aria';\nimport { _addOrRemoveAttribute, _setDisabled, _setElementWidth } from '../utils/dom';\nimport type { AgAbstractFieldEvent, FieldElement } from './agAbstractField';\nimport { AgAbstractField } from './agAbstractField';\nimport { RefPlaceholder } from './component';\n\nexport type AgAbstractInputFieldEvent = AgAbstractFieldEvent;\nexport abstract class AgAbstractInputField<\n    TElement extends FieldElement,\n    TValue,\n    TConfig extends AgInputFieldParams = AgInputFieldParams,\n    TEventType extends string = AgAbstractInputFieldEvent,\n> extends AgAbstractField<TValue, TConfig, AgAbstractInputFieldEvent | TEventType> {\n    protected readonly eLabel: HTMLElement = RefPlaceholder;\n    protected readonly eWrapper: HTMLElement = RefPlaceholder;\n    protected readonly eInput: TElement = RefPlaceholder;\n\n    constructor(\n        config?: TConfig,\n        className?: string,\n        private readonly inputType: string | null = 'text',\n        private readonly displayFieldTag = 'input'\n    ) {\n        super(\n            config,\n            config?.template ??\n                /* html */ `\n            <div role=\"presentation\">\n                <div data-ref=\"eLabel\" class=\"ag-input-field-label\"></div>\n                <div data-ref=\"eWrapper\" class=\"ag-wrapper ag-input-wrapper\" role=\"presentation\">\n                    <${displayFieldTag} data-ref=\"eInput\" class=\"ag-input-field-input\"></${displayFieldTag}>\n                </div>\n            </div>`,\n            [],\n            className\n        );\n    }\n\n    public override postConstruct() {\n        super.postConstruct();\n        this.setInputType();\n\n        this.eLabel.classList.add(`${this.className}-label`);\n        this.eWrapper.classList.add(`${this.className}-input-wrapper`);\n        this.eInput.classList.add(`${this.className}-input`);\n        this.addCssClass('ag-input-field');\n\n        this.eInput.id = this.eInput.id || `ag-${this.getCompId()}-input`;\n\n        const { inputName, inputWidth } = this.config;\n        if (inputName != null) {\n            this.setInputName(inputName);\n        }\n        if (inputWidth != null) {\n            this.setInputWidth(inputWidth);\n        }\n\n        this.addInputListeners();\n        this.activateTabIndex([this.eInput]);\n    }\n\n    protected addInputListeners() {\n        this.addManagedElementListeners(this.eInput, { input: (e: any) => this.setValue(e.target.value) });\n    }\n\n    private setInputType() {\n        if (this.displayFieldTag === 'input') {\n            this.eInput.setAttribute('type', this.inputType!);\n        }\n    }\n\n    public getInputElement(): TElement {\n        return this.eInput;\n    }\n\n    public setInputWidth(width: number | 'flex'): this {\n        _setElementWidth(this.eWrapper, width);\n\n        return this;\n    }\n\n    public setInputName(name: string): this {\n        this.getInputElement().setAttribute('name', name);\n\n        return this;\n    }\n\n    public override getFocusableElement(): HTMLElement {\n        return this.eInput;\n    }\n\n    public setMaxLength(length: number): this {\n        const eInput = this.eInput as HTMLInputElement | HTMLTextAreaElement;\n        eInput.maxLength = length;\n\n        return this;\n    }\n\n    public setInputPlaceholder(placeholder?: string | null): this {\n        _addOrRemoveAttribute(this.eInput, 'placeholder', placeholder);\n\n        return this;\n    }\n\n    public setInputAriaLabel(label?: string | null): this {\n        _setAriaLabel(this.eInput, label);\n        this.refreshAriaLabelledBy();\n\n        return this;\n    }\n\n    public override setDisabled(disabled: boolean): this {\n        _setDisabled(this.eInput, disabled);\n\n        return super.setDisabled(disabled);\n    }\n\n    public setAutoComplete(value: boolean | string) {\n        if (value === true) {\n            // Remove the autocomplete attribute if the value is explicitly set to true\n            // to allow the default browser autocomplete/autofill behaviour.\n            _addOrRemoveAttribute(this.eInput, 'autocomplete', null);\n        } else {\n            // When a string is provided, use it as the value of the autocomplete attribute.\n            // This enables users to specify how they want to the browser to handle the autocomplete on the input, as per spec:\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#values\n            const autoCompleteValue = typeof value === 'string' ? value : 'off';\n            _addOrRemoveAttribute(this.eInput, 'autocomplete', autoCompleteValue);\n        }\n        return this;\n    }\n}\n", "import type { CheckboxChangedEvent } from '../events';\nimport type { AgCheckboxParams, LabelAlignment } from '../interfaces/agFieldParams';\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\nimport { AgAbstractInputField } from './agAbstractInputField';\nimport type { ComponentSelector } from './component';\n\nexport class AgCheckbox<TConfig extends AgCheckboxParams = AgCheckboxParams> extends AgAbstractInputField<\n    HTMLInputElement,\n    boolean,\n    TConfig\n> {\n    protected override labelAlignment: LabelAlignment = 'right';\n\n    private selected?: boolean = false;\n    private readOnly = false;\n    private passive = false;\n\n    constructor(config?: TConfig, className = 'ag-checkbox', inputType = 'checkbox') {\n        super(config, className, inputType);\n    }\n\n    public override postConstruct() {\n        super.postConstruct();\n\n        const { readOnly, passive } = this.config;\n        if (typeof readOnly === 'boolean') this.setReadOnly(readOnly);\n        if (typeof passive === 'boolean') this.setPassive(passive);\n    }\n\n    protected override addInputListeners() {\n        this.addManagedElementListeners(this.eInput, { click: this.onCheckboxClick.bind(this) });\n        this.addManagedElementListeners(this.eLabel, { click: this.toggle.bind(this) });\n    }\n\n    public getNextValue(): boolean {\n        return this.selected === undefined ? true : !this.selected;\n    }\n\n    public setPassive(passive: boolean): void {\n        this.passive = passive;\n    }\n\n    public isReadOnly(): boolean {\n        return this.readOnly;\n    }\n\n    public setReadOnly(readOnly: boolean): void {\n        this.eWrapper.classList.toggle('ag-disabled', readOnly);\n        this.eInput.disabled = readOnly;\n        this.readOnly = readOnly;\n    }\n\n    public override setDisabled(disabled: boolean): this {\n        this.eWrapper.classList.toggle('ag-disabled', disabled);\n\n        return super.setDisabled(disabled);\n    }\n\n    public toggle(): void {\n        if (this.eInput.disabled) {\n            return;\n        }\n\n        const previousValue = this.isSelected();\n        const nextValue = this.getNextValue();\n\n        if (this.passive) {\n            this.dispatchChange(nextValue, previousValue);\n        } else {\n            this.setValue(nextValue);\n        }\n    }\n\n    public override getValue(): boolean | undefined {\n        return this.isSelected();\n    }\n\n    public override setValue(value?: boolean, silent?: boolean): this {\n        this.refreshSelectedClass(value);\n        this.setSelected(value, silent);\n\n        return this;\n    }\n\n    public setName(name: string): this {\n        const input = this.getInputElement();\n        input.name = name;\n\n        return this;\n    }\n\n    protected isSelected(): boolean | undefined {\n        return this.selected;\n    }\n\n    private setSelected(selected?: boolean, silent?: boolean): void {\n        if (this.isSelected() === selected) {\n            return;\n        }\n\n        this.previousValue = this.isSelected();\n\n        selected = this.selected = typeof selected === 'boolean' ? selected : undefined;\n        this.eInput.checked = selected!;\n        this.eInput.indeterminate = selected === undefined;\n\n        if (!silent) {\n            this.dispatchChange(this.selected, this.previousValue);\n        }\n    }\n\n    private dispatchChange(selected: boolean | undefined, previousValue: boolean | undefined, event?: MouseEvent) {\n        this.dispatchLocalEvent({ type: 'fieldValueChanged', selected, previousValue, event });\n\n        const input = this.getInputElement();\n        const checkboxChangedEvent: WithoutGridCommon<CheckboxChangedEvent> = {\n            type: 'checkboxChanged',\n            id: input.id,\n            name: input.name,\n            selected,\n            previousValue,\n        };\n\n        this.eventService.dispatchEvent(checkboxChangedEvent);\n    }\n\n    private onCheckboxClick(e: MouseEvent) {\n        if (this.passive || this.eInput.disabled) {\n            return;\n        }\n        const previousValue = this.isSelected();\n        const selected = (this.selected = (e.target as HTMLInputElement).checked);\n        this.refreshSelectedClass(selected);\n        this.dispatchChange(selected, previousValue, e);\n    }\n\n    private refreshSelectedClass(value?: boolean | null) {\n        this.eWrapper.classList.toggle('ag-checked', value === true);\n        this.eWrapper.classList.toggle('ag-indeterminate', value == null);\n    }\n}\n\nexport const AgCheckboxSelector: ComponentSelector = {\n    selector: 'AG-CHECKBOX',\n    component: AgCheckbox,\n};\n", "import { GROUP_AUTO_COLUMN_ID } from '../../columns/columnUtils';\nimport { KeyCode } from '../../constants/keyCode';\nimport type { CellEditingStartedEvent, CellEditingStoppedEvent } from '../../events';\nimport type { WithoutGridCommon } from '../../interfaces/iCommon';\nimport { _getAriaCheckboxStateName, _setAriaLive } from '../../utils/aria';\nimport { _stopPropagationForAgGrid } from '../../utils/event';\nimport type { AgCheckbox } from '../../widgets/agCheckbox';\nimport { AgCheckboxSelector } from '../../widgets/agCheckbox';\nimport { Component, RefPlaceholder } from '../../widgets/component';\nimport type { ICellRenderer, ICellRendererParams } from './iCellRenderer';\n\nexport interface ICheckboxCellRendererParams<TData = any, TContext = any>\n    extends ICellRendererParams<TData, boolean, TContext> {\n    /** Set to `true` for the input to be disabled. */\n    disabled?: boolean;\n}\n\nexport class CheckboxCellRenderer extends Component implements ICellRenderer {\n    private readonly eCheckbox: AgCheckbox = RefPlaceholder;\n    private params: ICheckboxCellRendererParams;\n\n    constructor() {\n        super(\n            /* html*/ `\n            <div class=\"ag-cell-wrapper ag-checkbox-cell\" role=\"presentation\">\n                <ag-checkbox role=\"presentation\" data-ref=\"eCheckbox\"></ag-checkbox>\n            </div>`,\n            [AgCheckboxSelector]\n        );\n    }\n\n    public init(params: ICheckboxCellRendererParams): void {\n        this.params = params;\n        this.updateCheckbox(params);\n        const inputEl = this.eCheckbox.getInputElement();\n        inputEl.setAttribute('tabindex', '-1');\n        _setAriaLive(inputEl, 'polite');\n\n        this.addManagedListeners(inputEl, {\n            click: (event: Event) => {\n                _stopPropagationForAgGrid(event);\n\n                if (this.eCheckbox.isDisabled()) {\n                    return;\n                }\n\n                const isSelected = this.eCheckbox.getValue();\n\n                this.onCheckboxChanged(isSelected);\n            },\n            dblclick: (event: Event) => {\n                _stopPropagationForAgGrid(event);\n            },\n        });\n\n        this.addManagedElementListeners(this.params.eGridCell, {\n            keydown: (event: KeyboardEvent) => {\n                if (event.key === KeyCode.SPACE && !this.eCheckbox.isDisabled()) {\n                    if (this.params.eGridCell === this.gos.getActiveDomElement()) {\n                        this.eCheckbox.toggle();\n                    }\n                    const isSelected = this.eCheckbox.getValue();\n                    this.onCheckboxChanged(isSelected);\n                    event.preventDefault();\n                }\n            },\n        });\n    }\n\n    public refresh(params: ICheckboxCellRendererParams): boolean {\n        this.params = params;\n        this.updateCheckbox(params);\n        return true;\n    }\n\n    private updateCheckbox(params: ICheckboxCellRendererParams): void {\n        let isSelected: boolean | undefined;\n        let displayed = true;\n        if (params.node.group && params.column) {\n            const colId = params.column.getColId();\n            if (colId.startsWith(GROUP_AUTO_COLUMN_ID)) {\n                // if we're grouping by this column then the value is a string and we need to parse it\n                isSelected =\n                    params.value == null || (params.value as any) === '' ? undefined : (params.value as any) === 'true';\n            } else if (params.node.aggData && params.node.aggData[colId] !== undefined) {\n                isSelected = params.value ?? undefined;\n            } else {\n                displayed = false;\n            }\n        } else {\n            isSelected = params.value ?? undefined;\n        }\n        if (!displayed) {\n            this.eCheckbox.setDisplayed(false);\n            return;\n        }\n        this.eCheckbox.setValue(isSelected);\n        const disabled = params.disabled != null ? params.disabled : !params.column?.isCellEditable(params.node);\n        this.eCheckbox.setDisabled(disabled);\n\n        const translate = this.localeService.getLocaleTextFunc();\n        const stateName = _getAriaCheckboxStateName(translate, isSelected);\n        const ariaLabel = disabled\n            ? stateName\n            : `${translate('ariaToggleCellValue', 'Press SPACE to toggle cell value')} (${stateName})`;\n        this.eCheckbox.setInputAriaLabel(ariaLabel);\n    }\n\n    private onCheckboxChanged(isSelected?: boolean): void {\n        const { column, node, value } = this.params;\n        const eventStarted: WithoutGridCommon<CellEditingStartedEvent> = {\n            type: 'cellEditingStarted',\n            column: column!,\n            colDef: column?.getColDef()!,\n            data: node.data,\n            node,\n            rowIndex: node.rowIndex,\n            rowPinned: node.rowPinned,\n            value,\n        };\n        this.eventService.dispatchEvent(eventStarted);\n\n        const valueChanged = this.params.node.setDataValue(this.params.column!, isSelected, 'edit');\n\n        const eventStopped: WithoutGridCommon<CellEditingStoppedEvent> = {\n            type: 'cellEditingStopped',\n            column: column!,\n            colDef: column?.getColDef()!,\n            data: node.data,\n            node,\n            rowIndex: node.rowIndex,\n            rowPinned: node.rowPinned,\n            value,\n            oldValue: value,\n            newValue: isSelected,\n            valueChanged,\n        };\n        this.eventService.dispatchEvent(eventStopped);\n    }\n}\n", "import type { IComponent } from '../../interfaces/iComponent';\nimport { _createIconNoSpan } from '../../utils/icon';\nimport { Component, RefPlaceholder } from '../../widgets/component';\nimport type { ICellRendererParams } from './iCellRenderer';\n\nexport interface ILoadingCellRendererParams<TData = any, TContext = any> extends ICellRendererParams<TData, TContext> {}\nexport interface ILoadingCellRenderer {}\nexport interface ILoadingCellRendererComp extends ILoadingCellRenderer, IComponent<ILoadingCellRendererParams> {}\n\nexport class LoadingCellRenderer extends Component implements ILoadingCellRendererComp {\n    private readonly eLoadingIcon: HTMLElement = RefPlaceholder;\n    private readonly eLoadingText: HTMLElement = RefPlaceholder;\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-loading\">\n            <span class=\"ag-loading-icon\" data-ref=\"eLoadingIcon\"></span>\n            <span class=\"ag-loading-text\" data-ref=\"eLoadingText\"></span>\n        </div>`);\n    }\n\n    public init(params: ILoadingCellRendererParams): void {\n        params.node.failedLoad ? this.setupFailed() : this.setupLoading();\n    }\n\n    private setupFailed(): void {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        this.eLoadingText.innerText = localeTextFunc('loadingError', 'ERR');\n    }\n\n    private setupLoading(): void {\n        const eLoadingIcon = _createIconNoSpan('groupLoading', this.gos, null);\n        if (eLoadingIcon) {\n            this.eLoadingIcon.appendChild(eLoadingIcon);\n        }\n\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        this.eLoadingText.innerText = localeTextFunc('loadingOoo', 'Loading');\n    }\n\n    public refresh(params: ILoadingCellRendererParams): boolean {\n        return false;\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public override destroy(): void {\n        super.destroy();\n    }\n}\n", "import { _setAriaLabel, _setAriaLabelledBy } from '../../utils/aria';\nimport { Component } from '../../widgets/component';\nimport type { ILoadingCellRendererComp, ILoadingCellRendererParams } from './loadingCellRenderer';\n\nexport class SkeletonCellRenderer extends Component implements ILoadingCellRendererComp {\n    constructor() {\n        super(/* html */ `<div class=\"ag-skeleton-container\"></div>`);\n    }\n\n    public init(params: ILoadingCellRendererParams): void {\n        const id = `ag-cell-skeleton-renderer-${this.getCompId()}`;\n        this.getGui().setAttribute('id', id);\n        this.addDestroyFunc(() => _setAriaLabelledBy(params.eParentOfValue));\n        _setAriaLabelledBy(params.eParentOfValue, id);\n\n        params.node.failedLoad ? this.setupFailed() : this.setupLoading(params);\n    }\n\n    private setupFailed(): void {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        this.getGui().innerText = localeTextFunc('loadingError', 'ERR');\n\n        const ariaFailed = localeTextFunc('ariaSkeletonCellLoadingFailed', 'Row failed to load');\n        _setAriaLabel(this.getGui(), ariaFailed);\n    }\n\n    private setupLoading(params: ILoadingCellRendererParams): void {\n        const eDocument = this.gos.getDocument();\n        const skeletonEffect = eDocument.createElement('div');\n        skeletonEffect.classList.add('ag-skeleton-effect');\n\n        // Use the row index to derive a width value for the skeleton cell\n        // to avoid them having uniform width when rendering\n        const rowIndex = params.node.rowIndex;\n        if (rowIndex != null) {\n            // Base value of 75% with variation between [-25%, 25%]. We alternate between sin and\n            // cos to achieve a semi-random appearance without actually needing a random number.\n            // We avoid using random numbers because then skeletons have consistent widths after\n            // being scrolled on and off screen.\n            const width = 75 + 25 * (rowIndex % 2 === 0 ? Math.sin(rowIndex) : Math.cos(rowIndex));\n            skeletonEffect.style.width = `${width}%`;\n        }\n\n        this.getGui().appendChild(skeletonEffect);\n\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const ariaLoading = localeTextFunc('ariaSkeletonCellLoading', 'Row data is loading');\n        _setAriaLabel(this.getGui(), ariaLoading);\n    }\n\n    public refresh(params: ILoadingCellRendererParams): boolean {\n        return false;\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public override destroy(): void {\n        super.destroy();\n    }\n}\n", "import type { AgGridCommon } from '../../interfaces/iCommon';\nimport type { IComponent } from '../../interfaces/iComponent';\nimport { Component } from '../../widgets/component';\n\nexport interface IOverlayParams<TData = any, TContext = any> extends AgGridCommon<TData, TContext> {}\n\nexport interface IOverlay<\n    TData = any,\n    TContext = any,\n    TParams extends Readonly<IOverlayParams<TData, TContext>> = IOverlayParams<TData, TContext>,\n> {\n    // Gets called when the `loadingOverlayComponentParams` grid option is updated\n    refresh?(params: TParams): void;\n}\n\nexport interface IOverlayComp<\n    TData = any,\n    TContext = any,\n    TParams extends Readonly<IOverlayParams<TData, TContext>> = IOverlayParams<TData, TContext>,\n> extends IComponent<TParams>,\n        IOverlay<TData, TContext, TParams> {}\n\nexport abstract class OverlayComponent<\n        TData = any,\n        TContext = any,\n        TParams extends Readonly<IOverlayParams<TData, TContext>> = IOverlayParams<TData, TContext>,\n    >\n    extends Component\n    implements IOverlayComp<TData, TContext, TParams>\n{\n    constructor() {\n        super();\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public override destroy(): void {\n        super.destroy();\n    }\n\n    public abstract init(): void;\n}\n", "import { OverlayComponent } from './overlayComponent';\nimport type { IOverlay, IOverlayComp, IOverlayParams } from './overlayComponent';\n\nexport interface ILoadingOverlayParams<TData = any, TContext = any> extends IOverlayParams<TData, TContext> {}\n\nexport interface ILoadingOverlay<TData = any, TContext = any>\n    extends IOverlay<TData, TContext, ILoadingOverlayParams> {}\n\nexport interface ILoadingOverlayComp<TData = any, TContext = any>\n    extends IOverlayComp<TData, TContext, ILoadingOverlayParams<TData, TContext>> {}\n\nexport class LoadingOverlayComponent\n    extends OverlayComponent<any, any, ILoadingOverlayParams>\n    implements ILoadingOverlayComp<any, any>\n{\n    public init(): void {\n        const customTemplate = this.gos.get('overlayLoadingTemplate');\n\n        this.setTemplate(\n            customTemplate ??\n                /* html */ `<span aria-live=\"polite\" aria-atomic=\"true\" class=\"ag-overlay-loading-center\"></span>`\n        );\n\n        if (!customTemplate) {\n            const localeTextFunc = this.localeService.getLocaleTextFunc();\n            // setTimeout is used because some screen readers only announce `aria-live` text when\n            // there is a \"text change\", so we force a change from empty.\n            setTimeout(() => {\n                this.getGui().textContent = localeTextFunc('loadingOoo', 'Loading...');\n            });\n        }\n    }\n}\n", "import { OverlayComponent } from './overlayComponent';\nimport type { IOverlay, IOverlayComp, IOverlayParams } from './overlayComponent';\n\nexport interface INoRowsOverlayParams<TData = any, TContext = any> extends IOverlayParams<TData, TContext> {}\n\nexport interface INoRowsOverlay<TData = any, TContext = any> extends IOverlay<TData, TContext, INoRowsOverlayParams> {}\n\nexport interface INoRowsOverlayComp<TData = any, TContext = any>\n    extends IOverlayComp<TData, TContext, INoRowsOverlayParams<TData, TContext>> {}\n\nexport class NoRowsOverlayComponent\n    extends OverlayComponent<any, any, INoRowsOverlayParams>\n    implements INoRowsOverlayComp<any, any>\n{\n    public init(): void {\n        const customTemplate = this.gos.get('overlayNoRowsTemplate');\n\n        this.setTemplate(customTemplate ?? /* html */ `<span class=\"ag-overlay-no-rows-center\"></span>`);\n\n        if (!customTemplate) {\n            const localeTextFunc = this.localeService.getLocaleTextFunc();\n            // setTimeout is used because some screen readers only announce `aria-live` text when\n            // there is a \"text change\", so we force a change from empty.\n            setTimeout(() => {\n                this.getGui().textContent = localeTextFunc('noRowsToShow', 'No Rows To Show');\n            });\n        }\n    }\n}\n", "import type { IPopupComponent } from '../interfaces/iPopupComponent';\nimport { Component } from './component';\n\nexport class PopupComponent extends Component implements IPopupComponent<any> {\n    public isPopup(): boolean {\n        return true;\n    }\n\n    override setParentComponent(container: Component) {\n        container.addCssClass('ag-has-popup');\n        super.setParentComponent(container);\n    }\n\n    public override destroy(): void {\n        const parentComp = this.parentComponent;\n        const hasParent = parentComp && parentComp.isAlive();\n\n        if (hasParent) {\n            parentComp!.getGui().classList.remove('ag-has-popup');\n        }\n\n        super.destroy();\n    }\n}\n", "import type { ColDef, ColGroupDef } from '../entities/colDef';\nimport type { Column, ColumnGroup } from '../interfaces/iColumn';\nimport type { AgGridCommon } from '../interfaces/iCommon';\nimport type { IComponent } from '../interfaces/iComponent';\nimport type { IRowNode } from '../interfaces/iRowNode';\nimport { _escapeString } from '../utils/string';\nimport { PopupComponent } from '../widgets/popupComponent';\n\nexport type TooltipLocation =\n    | 'advancedFilter'\n    | 'cell'\n    | 'columnToolPanelColumn'\n    | 'columnToolPanelColumnGroup'\n    | 'filterToolPanelColumnGroup'\n    | 'fullWidthRow'\n    | 'header'\n    | 'headerGroup'\n    | 'menu'\n    | 'pivotColumnsList'\n    | 'rowGroupColumnsList'\n    | 'setFilterValue'\n    | 'valueColumnsList'\n    | 'UNKNOWN';\n\nexport interface ITooltipParams<TData = any, TValue = any, TContext = any> extends AgGridCommon<TData, TContext> {\n    /** What part of the application is showing the tooltip, e.g. 'cell', 'header', 'menuItem' etc */\n    location: TooltipLocation;\n    /** The value to be rendered by the tooltip. */\n    value?: TValue | null;\n    /** The formatted value to be rendered by the tooltip. */\n    valueFormatted?: string | null;\n    /** Column / ColumnGroup definition. */\n    colDef?: ColDef<TData, TValue> | ColGroupDef<TData> | null;\n    /** Column / ColumnGroup */\n    column?: Column<TValue> | ColumnGroup;\n    /** The index of the row containing the cell rendering the tooltip. */\n    rowIndex?: number;\n    /** The row node. */\n    node?: IRowNode<TData>;\n    /** Data for the row node in question. */\n    data?: TData;\n    /** A callback function that hides the tooltip */\n    hideTooltipCallback?: () => void;\n}\n\nexport interface ITooltipComp extends IComponent<ITooltipParams> {}\n\nexport class TooltipComponent extends PopupComponent implements ITooltipComp {\n    constructor() {\n        super(/* html */ `<div class=\"ag-tooltip\"></div>`);\n    }\n\n    // will need to type params\n    public init(params: ITooltipParams): void {\n        const { value } = params;\n        this.getGui().textContent = _escapeString(value, true) as string;\n    }\n}\n", "export function _fuzzyCheckStrings(\n    inputValues: string[],\n    validValues: string[],\n    allSuggestions: string[]\n): { [p: string]: string[] } {\n    const fuzzyMatches: { [p: string]: string[] } = {};\n    const invalidInputs: string[] = inputValues.filter(\n        (inputValue) => !validValues.some((validValue) => validValue === inputValue)\n    );\n\n    if (invalidInputs.length > 0) {\n        invalidInputs.forEach(\n            (invalidInput) => (fuzzyMatches[invalidInput] = _fuzzySuggestions(invalidInput, allSuggestions).values)\n        );\n    }\n\n    return fuzzyMatches;\n}\n\n/**\n *\n * @param {String} inputValue The value to be compared against a list of strings\n * @param allSuggestions The list of strings to be compared against\n */\nexport function _fuzzySuggestions(\n    inputValue: string,\n    allSuggestions: string[],\n    hideIrrelevant?: boolean,\n    filterByPercentageOfBestMatch?: number\n): { values: string[]; indices: number[] } {\n    let thisSuggestions: { value: string; relevance: number; idx: number }[] = allSuggestions.map((text, idx) => ({\n        value: text,\n        relevance: stringWeightedDistances(inputValue.toLowerCase(), text.toLocaleLowerCase()),\n        idx,\n    }));\n\n    thisSuggestions.sort((a, b) => b.relevance - a.relevance);\n\n    if (hideIrrelevant) {\n        thisSuggestions = thisSuggestions.filter((suggestion) => suggestion.relevance !== 0);\n    }\n    if (thisSuggestions.length > 0 && filterByPercentageOfBestMatch && filterByPercentageOfBestMatch > 0) {\n        const bestMatch = thisSuggestions[0].relevance;\n        const limit = bestMatch * filterByPercentageOfBestMatch;\n        thisSuggestions = thisSuggestions.filter((suggestion) => limit - suggestion.relevance < 0);\n    }\n\n    const values: string[] = [];\n    const indices: number[] = [];\n\n    for (const suggestion of thisSuggestions) {\n        values.push(suggestion.value);\n        indices.push(suggestion.idx);\n    }\n\n    return { values, indices };\n}\n\nfunction stringWeightedDistances(str1: string, str2: string): number {\n    const a = str1.replace(/\\s/g, '');\n    const b = str2.replace(/\\s/g, '');\n\n    let weight = 0;\n    let lastIndex = -1;\n\n    for (let i = 0; i < a.length; i++) {\n        const idx = b.indexOf(a[i], lastIndex + 1);\n        if (idx === -1) {\n            continue;\n        }\n\n        lastIndex = idx;\n        weight += 100 - ((lastIndex * 100) / 10000) * 100;\n    }\n\n    return weight;\n}\n", "import type { NamedBean } from '../../context/bean';\nimport { BeanStub } from '../../context/beanStub';\nimport type { UserComponentName } from '../../context/context';\nimport { HeaderComp } from '../../headerRendering/cells/column/headerComp';\nimport { SortIndicatorComp } from '../../headerRendering/cells/column/sortIndicatorComp';\nimport { HeaderGroupComp } from '../../headerRendering/cells/columnGroup/headerGroupComp';\nimport { ModuleNames } from '../../modules/moduleNames';\nimport { ModuleRegistry } from '../../modules/moduleRegistry';\nimport { AnimateShowChangeCellRenderer } from '../../rendering/cellRenderers/animateShowChangeCellRenderer';\nimport { AnimateSlideCellRenderer } from '../../rendering/cellRenderers/animateSlideCellRenderer';\nimport { CheckboxCellRenderer } from '../../rendering/cellRenderers/checkboxCellRenderer';\nimport { LoadingCellRenderer } from '../../rendering/cellRenderers/loadingCellRenderer';\nimport { SkeletonCellRenderer } from '../../rendering/cellRenderers/skeletonCellRenderer';\nimport { LoadingOverlayComponent } from '../../rendering/overlays/loadingOverlayComponent';\nimport { NoRowsOverlayComponent } from '../../rendering/overlays/noRowsOverlayComponent';\nimport { TooltipComponent } from '../../rendering/tooltipComponent';\nimport { _doOnce, _warnOnce } from '../../utils/function';\nimport { _fuzzySuggestions } from '../../utils/fuzzyMatch';\nimport { _iterateObject } from '../../utils/object';\n\nexport class UserComponentRegistry extends BeanStub implements NamedBean {\n    beanName = 'userComponentRegistry' as const;\n\n    private agGridDefaults: { [key in UserComponentName]?: any } = {\n        //header\n        agColumnHeader: HeaderComp,\n        agColumnGroupHeader: HeaderGroupComp,\n        agSortIndicator: SortIndicatorComp,\n\n        // renderers\n        agAnimateShowChangeCellRenderer: AnimateShowChangeCellRenderer,\n        agAnimateSlideCellRenderer: AnimateSlideCellRenderer,\n\n        agLoadingCellRenderer: LoadingCellRenderer,\n        agSkeletonCellRenderer: SkeletonCellRenderer,\n        agCheckboxCellRenderer: CheckboxCellRenderer,\n\n        //overlays\n        agLoadingOverlay: LoadingOverlayComponent,\n        agNoRowsOverlay: NoRowsOverlayComponent,\n\n        // tooltips\n        agTooltipComponent: TooltipComponent,\n    };\n\n    /** Used to provide useful error messages if a user is trying to use an enterprise component without loading the module. */\n    private enterpriseAgDefaultCompsModule: Record<string, ModuleNames> = {\n        agSetColumnFilter: ModuleNames.SetFilterModule,\n        agSetColumnFloatingFilter: ModuleNames.SetFilterModule,\n        agMultiColumnFilter: ModuleNames.MultiFilterModule,\n        agMultiColumnFloatingFilter: ModuleNames.MultiFilterModule,\n        agGroupColumnFilter: ModuleNames.RowGroupingModule,\n        agGroupColumnFloatingFilter: ModuleNames.RowGroupingModule,\n        agGroupCellRenderer: ModuleNames.RowGroupingModule, // Actually in enterprise core as used by MasterDetail too but best guess is they are grouping\n        agGroupRowRenderer: ModuleNames.RowGroupingModule, // Actually in enterprise core as used by MasterDetail but best guess is they are grouping\n        agRichSelect: ModuleNames.RichSelectModule,\n        agRichSelectCellEditor: ModuleNames.RichSelectModule,\n        agDetailCellRenderer: ModuleNames.MasterDetailModule,\n        agSparklineCellRenderer: ModuleNames.SparklinesModule,\n    };\n\n    private jsComps: { [key: string]: any } = {};\n\n    public postConstruct(): void {\n        const comps = this.gos.get('components');\n        if (comps != null) {\n            _iterateObject(comps, (key, component) => this.registerJsComponent(key, component));\n        }\n    }\n\n    public registerDefaultComponent(name: UserComponentName, component: any) {\n        this.agGridDefaults[name] = component;\n    }\n\n    private registerJsComponent(name: string, component: any) {\n        this.jsComps[name] = component;\n    }\n\n    public retrieve(propertyName: string, name: string): { componentFromFramework: boolean; component: any } | null {\n        const createResult = (component: any, componentFromFramework: boolean) => ({\n            componentFromFramework,\n            component,\n        });\n\n        // FrameworkOverrides.frameworkComponent() is used in two locations:\n        // 1) for Vue, user provided components get registered via a framework specific way.\n        // 2) for React, it's how the React UI provides alternative default components (eg GroupCellRenderer and DetailCellRenderer)\n        const registeredViaFrameworkComp = this.getFrameworkOverrides().frameworkComponent(\n            name,\n            this.gos.get('components')\n        );\n        if (registeredViaFrameworkComp != null) {\n            return createResult(registeredViaFrameworkComp, true);\n        }\n\n        const jsComponent = this.jsComps[name];\n        if (jsComponent) {\n            const isFwkComp = this.getFrameworkOverrides().isFrameworkComponent(jsComponent);\n            return createResult(jsComponent, isFwkComp);\n        }\n\n        const defaultComponent = this.agGridDefaults[name as UserComponentName];\n        if (defaultComponent) {\n            return createResult(defaultComponent, false);\n        }\n\n        const moduleForComponent = this.enterpriseAgDefaultCompsModule[name];\n        if (moduleForComponent) {\n            ModuleRegistry.__assertRegistered(\n                moduleForComponent,\n                `AG Grid '${propertyName}' component: ${name}`,\n                this.gridId\n            );\n        } else {\n            _doOnce(() => {\n                this.warnAboutMissingComponent(propertyName, name);\n            }, 'MissingComp' + name);\n        }\n\n        return null;\n    }\n\n    private warnAboutMissingComponent(propertyName: string, componentName: string) {\n        const validComponents = [\n            // Don't include the old names / internals in potential suggestions\n            ...Object.keys(this.agGridDefaults).filter(\n                (k) => !['agCellEditor', 'agGroupRowRenderer', 'agSortIndicator'].includes(k)\n            ),\n            ...Object.keys(this.jsComps),\n        ];\n        const suggestions = _fuzzySuggestions(componentName, validComponents, true, 0.8).values;\n\n        _warnOnce(\n            `Could not find '${componentName}' component. It was configured as \"${propertyName}: '${componentName}'\" but it wasn't found in the list of registered components.`\n        );\n        if (suggestions.length > 0) {\n            _warnOnce(`         Did you mean: [${suggestions.slice(0, 3)}]?`);\n        }\n        _warnOnce(\n            `If using a custom component check it has been registered as described in: ${this.getFrameworkOverrides().getDocLink('components/')}`\n        );\n    }\n}\n", "export type ResolveAndRejectCallback<T> = (resolve: (value: T | null) => void, reject: (params: any) => void) => void;\n\nexport enum AgPromiseStatus {\n    IN_PROGRESS,\n    RESOLVED,\n}\n\nexport class AgPromise<T> {\n    private status: AgPromiseStatus = AgPromiseStatus.IN_PROGRESS;\n    private resolution: T | null = null;\n    private waiters: ((value: T | null) => void)[] = [];\n\n    static all<T>(promises: AgPromise<T | null>[]): AgPromise<(T | null)[]> {\n        return promises.length\n            ? new AgPromise((resolve) => {\n                  let remainingToResolve = promises.length;\n                  const combinedValues = new Array<T | null>(remainingToResolve);\n\n                  promises.forEach((promise, index) => {\n                      promise.then((value) => {\n                          combinedValues[index] = value;\n                          remainingToResolve--;\n\n                          if (remainingToResolve === 0) {\n                              resolve(combinedValues);\n                          }\n                      });\n                  });\n              })\n            : AgPromise.resolve();\n    }\n\n    static resolve<T>(value: T | null = null): AgPromise<T> {\n        return new AgPromise<T>((resolve) => resolve(value));\n    }\n\n    constructor(callback: ResolveAndRejectCallback<T>) {\n        callback(\n            (value) => this.onDone(value),\n            (params) => this.onReject(params)\n        );\n    }\n\n    public then<V>(func: (result: T | null) => V): AgPromise<V> {\n        return new AgPromise((resolve) => {\n            if (this.status === AgPromiseStatus.RESOLVED) {\n                resolve(func(this.resolution));\n            } else {\n                this.waiters.push((value) => resolve(func(value)));\n            }\n        });\n    }\n\n    private onDone(value: T | null): void {\n        this.status = AgPromiseStatus.RESOLVED;\n        this.resolution = value;\n\n        this.waiters.forEach((waiter) => waiter(value));\n    }\n\n    private onReject(params: any): void {}\n}\n", "export interface ComponentType {\n    propertyName: string;\n    cellRenderer: boolean;\n}\n\nexport const DateComponent: ComponentType = {\n    propertyName: 'dateComponent',\n    cellRenderer: false,\n};\n\nexport const HeaderComponent: ComponentType = {\n    propertyName: 'headerComponent',\n    cellRenderer: false,\n};\n\nexport const HeaderGroupComponent: ComponentType = {\n    propertyName: 'headerGroupComponent',\n    cellRenderer: false,\n};\n\nexport const CellRendererComponent: ComponentType = {\n    propertyName: 'cellRenderer',\n    cellRenderer: true,\n};\n\nexport const EditorRendererComponent: ComponentType = {\n    propertyName: 'cellRenderer',\n    cellRenderer: false,\n};\n\nexport const LoadingCellRendererComponent: ComponentType = {\n    propertyName: 'loadingCellRenderer',\n    cellRenderer: true,\n};\n\nexport const CellEditorComponent: ComponentType = {\n    propertyName: 'cellEditor',\n    cellRenderer: false,\n};\n\nexport const InnerRendererComponent: ComponentType = {\n    propertyName: 'innerRenderer',\n    cellRenderer: true,\n};\n\nexport const LoadingOverlayComponent: ComponentType = {\n    propertyName: 'loadingOverlayComponent',\n    cellRenderer: false,\n};\n\nexport const NoRowsOverlayComponent: ComponentType = {\n    propertyName: 'noRowsOverlayComponent',\n    cellRenderer: false,\n};\n\nexport const TooltipComponent: ComponentType = {\n    propertyName: 'tooltipComponent',\n    cellRenderer: false,\n};\n\nexport const FilterComponent: ComponentType = {\n    propertyName: 'filter',\n    cellRenderer: false,\n};\n\nexport const FloatingFilterComponent: ComponentType = {\n    propertyName: 'floatingFilterComponent',\n    cellRenderer: false,\n};\n\nexport const ToolPanelComponent: ComponentType = {\n    propertyName: 'toolPanel',\n    cellRenderer: false,\n};\n\nexport const StatusPanelComponent: ComponentType = {\n    propertyName: 'statusPanel',\n    cellRenderer: false,\n};\n\nexport const FullWidth: ComponentType = {\n    propertyName: 'fullWidthCellRenderer',\n    cellRenderer: true,\n};\n\nexport const FullWidthLoading: ComponentType = {\n    propertyName: 'loadingCellRenderer',\n    cellRenderer: true,\n};\n\nexport const FullWidthGroup: ComponentType = {\n    propertyName: 'groupRowRenderer',\n    cellRenderer: true,\n};\n\nexport const FullWidthDetail: ComponentType = {\n    propertyName: 'detailCellRenderer',\n    cellRenderer: true,\n};\n\nexport const MenuItemComponent: ComponentType = {\n    propertyName: 'menuItem',\n    cellRenderer: false,\n};\n", "import type { NamedBean } from '../../context/bean';\nimport { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type {\n    CellEditorSelectorFunc,\n    CellEditorSelectorResult,\n    CellRendererSelectorFunc,\n    ColDef,\n    ColGroupDef,\n} from '../../entities/colDef';\nimport type { GridOptions } from '../../entities/gridOptions';\nimport type { IFloatingFilterParams } from '../../filter/floating/floatingFilter';\nimport type { IHeaderParams } from '../../headerRendering/cells/column/headerComp';\nimport type { IHeaderGroupParams } from '../../headerRendering/cells/columnGroup/headerGroupComp';\nimport type { IDateParams } from '../../interfaces/dateComponent';\nimport type { GroupCellRendererParams } from '../../interfaces/groupCellRenderer';\nimport type { ICellEditorParams } from '../../interfaces/iCellEditor';\nimport type { AgGridCommon, WithoutGridCommon } from '../../interfaces/iCommon';\nimport type { IFilterDef, IFilterParams } from '../../interfaces/iFilter';\nimport type { IFrameworkOverrides } from '../../interfaces/iFrameworkOverrides';\nimport type { RichSelectParams } from '../../interfaces/iRichCellEditorParams';\nimport type { SetFilterParams } from '../../interfaces/iSetFilter';\nimport type { ToolPanelDef } from '../../interfaces/iSideBar';\nimport type { IStatusPanelParams, StatusPanelDef } from '../../interfaces/iStatusPanel';\nimport type { IToolPanelParams } from '../../interfaces/iToolPanel';\nimport type { IMenuItemParams, MenuItemDef } from '../../interfaces/menuItem';\nimport type { ICellRendererParams, ISetFilterCellRendererParams } from '../../rendering/cellRenderers/iCellRenderer';\nimport type { ILoadingOverlayParams } from '../../rendering/overlays/loadingOverlayComponent';\nimport type { INoRowsOverlayParams } from '../../rendering/overlays/noRowsOverlayComponent';\nimport type { ITooltipParams } from '../../rendering/tooltipComponent';\nimport { _errorOnce } from '../../utils/function';\nimport { _mergeDeep } from '../../utils/object';\nimport { AgPromise } from '../../utils/promise';\nimport type { AgComponentUtils } from './agComponentUtils';\nimport type { ComponentMetadata, ComponentMetadataProvider } from './componentMetadataProvider';\nimport type { ComponentType } from './componentTypes';\nimport {\n    CellEditorComponent,\n    CellRendererComponent,\n    DateComponent,\n    EditorRendererComponent,\n    FilterComponent,\n    FloatingFilterComponent,\n    FullWidth,\n    FullWidthDetail,\n    FullWidthGroup,\n    FullWidthLoading,\n    HeaderComponent,\n    HeaderGroupComponent,\n    InnerRendererComponent,\n    LoadingCellRendererComponent,\n    LoadingOverlayComponent,\n    MenuItemComponent,\n    NoRowsOverlayComponent,\n    StatusPanelComponent,\n    ToolPanelComponent,\n    TooltipComponent,\n} from './componentTypes';\nimport type { FrameworkComponentWrapper } from './frameworkComponentWrapper';\nimport type { UserComponentRegistry } from './userComponentRegistry';\n\nexport type DefinitionObject =\n    | GridOptions\n    | ColDef\n    | ColGroupDef\n    | IFilterDef\n    | SetFilterParams\n    | RichSelectParams\n    | ToolPanelDef\n    | StatusPanelDef\n    | MenuItemDef;\n\nexport interface UserCompDetails {\n    componentClass: any;\n    componentFromFramework: boolean;\n    params: any;\n    type: ComponentType;\n    popupFromSelector?: boolean;\n    popupPositionFromSelector?: 'over' | 'under';\n    newAgStackInstance: () => AgPromise<any>;\n}\n\nexport class UserComponentFactory extends BeanStub implements NamedBean {\n    beanName = 'userComponentFactory' as const;\n\n    private gridOptions: GridOptions;\n    private agComponentUtils: AgComponentUtils;\n    private componentMetadataProvider: ComponentMetadataProvider;\n    private userComponentRegistry: UserComponentRegistry;\n    private frameworkComponentWrapper?: FrameworkComponentWrapper;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.agComponentUtils = beans.agComponentUtils;\n        this.componentMetadataProvider = beans.componentMetadataProvider;\n        this.userComponentRegistry = beans.userComponentRegistry;\n        this.frameworkComponentWrapper = beans.frameworkComponentWrapper;\n        this.gridOptions = beans.gridOptions;\n    }\n\n    public getHeaderCompDetails(colDef: ColDef, params: WithoutGridCommon<IHeaderParams>): UserCompDetails | undefined {\n        return this.getCompDetails(colDef, HeaderComponent, 'agColumnHeader', params);\n    }\n\n    public getHeaderGroupCompDetails(params: WithoutGridCommon<IHeaderGroupParams>): UserCompDetails | undefined {\n        const colGroupDef = params.columnGroup.getColGroupDef()!;\n        return this.getCompDetails(colGroupDef, HeaderGroupComponent, 'agColumnGroupHeader', params);\n    }\n\n    // this one is unusual, as it can be LoadingCellRenderer, DetailCellRenderer, FullWidthCellRenderer or GroupRowRenderer.\n    // so we have to pass the type in.\n    public getFullWidthCellRendererDetails(params: WithoutGridCommon<ICellRendererParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, FullWidth, null, params, true)!;\n    }\n\n    public getFullWidthLoadingCellRendererDetails(params: WithoutGridCommon<ICellRendererParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, FullWidthLoading, 'agLoadingCellRenderer', params, true)!;\n    }\n\n    public getFullWidthGroupCellRendererDetails(params: WithoutGridCommon<ICellRendererParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, FullWidthGroup, 'agGroupRowRenderer', params, true)!;\n    }\n\n    public getFullWidthDetailCellRendererDetails(params: WithoutGridCommon<ICellRendererParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, FullWidthDetail, 'agDetailCellRenderer', params, true)!;\n    }\n\n    // CELL RENDERER\n    public getInnerRendererDetails(\n        def: GroupCellRendererParams,\n        params: WithoutGridCommon<ICellRendererParams>\n    ): UserCompDetails | undefined {\n        return this.getCompDetails(def, InnerRendererComponent, null, params);\n    }\n    public getFullWidthGroupRowInnerCellRenderer(\n        def: any,\n        params: WithoutGridCommon<ICellRendererParams>\n    ): UserCompDetails | undefined {\n        return this.getCompDetails(def, InnerRendererComponent, null, params);\n    }\n\n    public getCellRendererDetails(\n        def: ColDef,\n        params: WithoutGridCommon<ICellRendererParams>\n    ): UserCompDetails | undefined {\n        return this.getCompDetails(def, CellRendererComponent, null, params);\n    }\n\n    public getEditorRendererDetails<TDefinition, TEditorParams extends AgGridCommon<any, any>>(\n        def: TDefinition,\n        params: WithoutGridCommon<TEditorParams>\n    ): UserCompDetails | undefined {\n        return this.getCompDetails<TDefinition>(def, EditorRendererComponent, null, params);\n    }\n\n    public getLoadingCellRendererDetails(\n        def: ColDef,\n        params: WithoutGridCommon<ICellRendererParams>\n    ): UserCompDetails | undefined {\n        return this.getCompDetails(def, LoadingCellRendererComponent, 'agSkeletonCellRenderer', params, true);\n    }\n\n    // CELL EDITOR\n    public getCellEditorDetails(\n        def: ColDef,\n        params: WithoutGridCommon<ICellEditorParams>\n    ): UserCompDetails | undefined {\n        return this.getCompDetails(def, CellEditorComponent, 'agCellEditor', params, true);\n    }\n\n    // FILTER\n    public getFilterDetails(\n        def: IFilterDef,\n        params: WithoutGridCommon<IFilterParams>,\n        defaultFilter: string\n    ): UserCompDetails | undefined {\n        return this.getCompDetails(def, FilterComponent, defaultFilter, params, true);\n    }\n\n    public getDateCompDetails(params: WithoutGridCommon<IDateParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, DateComponent, 'agDateInput', params, true)!;\n    }\n\n    public getLoadingOverlayCompDetails(params: WithoutGridCommon<ILoadingOverlayParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, LoadingOverlayComponent, 'agLoadingOverlay', params, true)!;\n    }\n\n    public getNoRowsOverlayCompDetails(params: WithoutGridCommon<INoRowsOverlayParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, NoRowsOverlayComponent, 'agNoRowsOverlay', params, true)!;\n    }\n\n    public getTooltipCompDetails(params: WithoutGridCommon<ITooltipParams>): UserCompDetails {\n        return this.getCompDetails(params.colDef!, TooltipComponent, 'agTooltipComponent', params, true)!;\n    }\n\n    public getSetFilterCellRendererDetails<TData, V>(\n        def: SetFilterParams<TData, V>,\n        params: WithoutGridCommon<ISetFilterCellRendererParams>\n    ): UserCompDetails | undefined {\n        return this.getCompDetails(def, CellRendererComponent, null, params);\n    }\n\n    public getFloatingFilterCompDetails(\n        def: IFilterDef,\n        params: WithoutGridCommon<IFloatingFilterParams<any>>,\n        defaultFloatingFilter: string | null\n    ): UserCompDetails | undefined {\n        return this.getCompDetails(def, FloatingFilterComponent, defaultFloatingFilter, params);\n    }\n\n    public getToolPanelCompDetails(\n        toolPanelDef: ToolPanelDef,\n        params: WithoutGridCommon<IToolPanelParams>\n    ): UserCompDetails {\n        return this.getCompDetails(toolPanelDef, ToolPanelComponent, null, params, true)!;\n    }\n\n    public getStatusPanelCompDetails(\n        def: StatusPanelDef,\n        params: WithoutGridCommon<IStatusPanelParams>\n    ): UserCompDetails {\n        return this.getCompDetails(def, StatusPanelComponent, null, params, true)!;\n    }\n\n    public getMenuItemCompDetails(def: MenuItemDef, params: WithoutGridCommon<IMenuItemParams>): UserCompDetails {\n        return this.getCompDetails(def, MenuItemComponent, 'agMenuItem', params, true)!;\n    }\n\n    private getCompDetails<TDefinition = DefinitionObject>(\n        defObject: TDefinition,\n        type: ComponentType,\n        defaultName: string | null | undefined,\n        params: any,\n        mandatory = false\n    ): UserCompDetails | undefined {\n        const { propertyName, cellRenderer } = type;\n\n        // eslint-disable-next-line prefer-const\n        let { compName, jsComp, fwComp, paramsFromSelector, popupFromSelector, popupPositionFromSelector } =\n            UserComponentFactory.getCompKeys(this.frameworkOverrides, defObject, type, params);\n\n        const lookupFromRegistry = (key: string) => {\n            const item = this.userComponentRegistry.retrieve(propertyName, key);\n            if (item) {\n                jsComp = !item.componentFromFramework ? item.component : undefined;\n                fwComp = item.componentFromFramework ? item.component : undefined;\n            }\n        };\n\n        // if compOption is a string, means we need to look the item up\n        if (compName != null) {\n            lookupFromRegistry(compName);\n        }\n\n        // if lookup brought nothing back, and we have a default, lookup the default\n        if (jsComp == null && fwComp == null && defaultName != null) {\n            lookupFromRegistry(defaultName);\n        }\n\n        // if we have a comp option, and it's a function, replace it with an object equivalent adaptor\n        if (jsComp && cellRenderer && !this.agComponentUtils.doesImplementIComponent(jsComp)) {\n            jsComp = this.agComponentUtils.adaptFunction(propertyName, jsComp);\n        }\n\n        if (!jsComp && !fwComp) {\n            if (mandatory) {\n                _errorOnce(`Could not find component ${compName}, did you forget to configure this component?`);\n            }\n            return;\n        }\n\n        const paramsMerged = this.mergeParamsWithApplicationProvidedParams(defObject, type, params, paramsFromSelector);\n\n        const componentFromFramework = jsComp == null;\n        const componentClass = jsComp ? jsComp : fwComp;\n\n        return {\n            componentFromFramework,\n            componentClass,\n            params: paramsMerged,\n            type: type,\n            popupFromSelector,\n            popupPositionFromSelector,\n            newAgStackInstance: () =>\n                this.newAgStackInstance(componentClass, componentFromFramework, paramsMerged, type),\n        };\n    }\n\n    public static getCompKeys<TDefinition = DefinitionObject>(\n        frameworkOverrides: IFrameworkOverrides,\n        defObject: TDefinition,\n        type: ComponentType,\n        params?: any\n    ): {\n        compName?: string;\n        jsComp: any;\n        fwComp: any;\n        paramsFromSelector: any;\n        popupFromSelector?: boolean;\n        popupPositionFromSelector?: 'over' | 'under';\n    } {\n        const { propertyName } = type;\n\n        let compName: string | undefined;\n        let jsComp: any;\n        let fwComp: any;\n\n        let paramsFromSelector: any;\n        let popupFromSelector: boolean | undefined;\n        let popupPositionFromSelector: 'over' | 'under' | undefined;\n\n        // there are two types of js comps, class based and func based. we can only check for\n        // class based, by checking if getGui() exists. no way to differentiate js func based vs eg react func based\n        // const isJsClassComp = (comp: any) => this.agComponentUtils.doesImplementIComponent(comp);\n        // const fwActive = this.frameworkComponentWrapper != null;\n\n        // pull from defObject if available\n        if (defObject) {\n            const defObjectAny = defObject as any;\n\n            // if selector, use this\n            const selectorFunc: CellEditorSelectorFunc | CellRendererSelectorFunc =\n                defObjectAny[propertyName + 'Selector'];\n            const selectorRes = selectorFunc ? selectorFunc(params) : null;\n\n            const assignComp = (providedJsComp: any) => {\n                if (typeof providedJsComp === 'string') {\n                    compName = providedJsComp as string;\n                } else if (providedJsComp != null && providedJsComp !== true) {\n                    const isFwkComp = frameworkOverrides.isFrameworkComponent(providedJsComp);\n                    if (isFwkComp) {\n                        fwComp = providedJsComp;\n                    } else {\n                        jsComp = providedJsComp;\n                    }\n                }\n            };\n\n            if (selectorRes) {\n                assignComp(selectorRes.component);\n                paramsFromSelector = selectorRes.params;\n                popupFromSelector = (selectorRes as CellEditorSelectorResult).popup;\n                popupPositionFromSelector = (selectorRes as CellEditorSelectorResult).popupPosition;\n            } else {\n                // if no selector, or result of selector is empty, take from defObject\n                assignComp(defObjectAny[propertyName]);\n            }\n        }\n\n        return { compName, jsComp, fwComp, paramsFromSelector, popupFromSelector, popupPositionFromSelector };\n    }\n\n    private newAgStackInstance(\n        ComponentClass: any,\n        componentFromFramework: boolean,\n        params: any,\n        type: ComponentType\n    ): AgPromise<any> {\n        const propertyName = type.propertyName;\n        const jsComponent = !componentFromFramework;\n        // using javascript component\n        let instance: any;\n\n        if (jsComponent) {\n            instance = new ComponentClass();\n        } else {\n            // Using framework component\n            const thisComponentConfig: ComponentMetadata = this.componentMetadataProvider.retrieve(propertyName);\n            instance = this.frameworkComponentWrapper!.wrap(\n                ComponentClass,\n                thisComponentConfig.mandatoryMethodList,\n                thisComponentConfig.optionalMethodList,\n                type\n            );\n        }\n\n        const deferredInit = this.initComponent(instance, params);\n\n        if (deferredInit == null) {\n            return AgPromise.resolve(instance);\n        }\n        return deferredInit.then(() => instance);\n    }\n\n    // used by Floating Filter\n    public mergeParamsWithApplicationProvidedParams<TDefinition = DefinitionObject>(\n        defObject: TDefinition,\n        type: ComponentType,\n        paramsFromGrid: any,\n        paramsFromSelector: any = null\n    ): any {\n        const params: AgGridCommon<any, any> = this.gos.getGridCommonParams();\n\n        _mergeDeep(params, paramsFromGrid);\n\n        // pull user params from either the old prop name and new prop name\n        // eg either cellRendererParams and cellCompParams\n        const defObjectAny = defObject as any;\n        const userParams = defObjectAny && defObjectAny[type.propertyName + 'Params'];\n\n        if (typeof userParams === 'function') {\n            const userParamsFromFunc = userParams(paramsFromGrid);\n            _mergeDeep(params, userParamsFromFunc);\n        } else if (typeof userParams === 'object') {\n            _mergeDeep(params, userParams);\n        }\n\n        _mergeDeep(params, paramsFromSelector);\n\n        return params;\n    }\n\n    private initComponent(component: any, params: any): AgPromise<void> | void {\n        this.createBean(component);\n        if (component.init == null) {\n            return;\n        }\n        return component.init(params);\n    }\n}\n", "export function _unwrapUserComp<T>(comp: T): T {\n    const compAsAny = comp as any;\n    const isProxy = compAsAny != null && compAsAny.getFrameworkComponentInstance != null;\n    return isProxy ? compAsAny.getFrameworkComponentInstance() : comp;\n}\n", "import type { GenericBean } from './genericBean';\n\ntype BeanComparator<TBeanName extends string, TBeanCollection extends { [key in TBeanName]?: any }> = (\n    bean1: GenericBean<TBeanName, TBeanCollection>,\n    bean2: GenericBean<TBeanName, TBeanCollection>\n) => number;\n\nexport interface GenericContextParams<TBeanName extends string, TBeanCollection extends { [key in TBeanName]?: any }> {\n    providedBeanInstances: Partial<{ [key in TBeanName]: GenericBean<TBeanName, TBeanCollection> }>;\n    beanClasses: GenericSingletonBean<TBeanName, TBeanCollection>[];\n    derivedBeans?: ((context: GenericContext<TBeanName, TBeanCollection>) => {\n        beanName: TBeanName;\n        bean: TBeanCollection[TBeanName];\n    })[];\n    beanInitComparator?: BeanComparator<TBeanName, TBeanCollection>;\n    beanDestroyComparator?: BeanComparator<TBeanName, TBeanCollection>;\n}\n\nexport interface GenericSingletonBean<TBeanName extends string, TBeanCollection extends { [key in TBeanName]?: any }> {\n    new (): GenericBean<TBeanName, TBeanCollection>;\n}\n\nexport interface ComponentBean {\n    preConstruct(): void;\n}\n\n/**\n * The BaseBean can be used to avoid having to call super.wireBeans() in every subclass of a shared base bean, .i.e BeanStub, Component\n * It is used to pre-wire beans before the wireBeans() method is called which is equivalent to calling super.wireBeans() in a sub class\n */\nexport interface BaseBean<TBeanCollection> {\n    preWireBeans?(beans: TBeanCollection): void;\n}\n\nexport class GenericContext<TBeanName extends string, TBeanCollection extends { [key in TBeanName]?: any }> {\n    protected beans: TBeanCollection = {} as TBeanCollection;\n    private createdBeans: GenericBean<TBeanName, TBeanCollection>[] = [];\n    private beanDestroyComparator?: BeanComparator<TBeanName, TBeanCollection>;\n\n    private destroyed = false;\n\n    constructor(params: GenericContextParams<TBeanName, TBeanCollection>) {\n        if (!params || !params.beanClasses) {\n            return;\n        }\n\n        this.beanDestroyComparator = params.beanDestroyComparator;\n\n        this.init(params);\n    }\n\n    protected init(params: GenericContextParams<TBeanName, TBeanCollection>): void {\n        Object.entries(params.providedBeanInstances).forEach(([beanName, beanInstance]: [TBeanName, any]) => {\n            this.beans[beanName] = beanInstance;\n        });\n\n        params.beanClasses.forEach((BeanClass) => {\n            const instance = new BeanClass();\n            if (instance.beanName) {\n                this.beans[instance.beanName] = instance as any;\n            } else {\n                console.error(`Bean ${BeanClass.name} is missing beanName`);\n            }\n            this.createdBeans.push(instance);\n        });\n\n        params.derivedBeans?.forEach((beanFunc) => {\n            const { beanName, bean } = beanFunc(this);\n            this.beans[beanName] = bean;\n            this.createdBeans.push(bean);\n        });\n\n        if (params.beanInitComparator) {\n            // sort the beans so that they are in a consistent order\n            this.createdBeans.sort(params.beanInitComparator);\n        }\n\n        this.initBeans(this.createdBeans);\n    }\n\n    private getBeanInstances(): GenericBean<TBeanName, TBeanCollection>[] {\n        return Object.values(this.beans);\n    }\n\n    public createBean<T extends GenericBean<TBeanName, TBeanCollection> | null | undefined>(\n        bean: T,\n        afterPreCreateCallback?: (bean: GenericBean<TBeanName, TBeanCollection>) => void\n    ): T {\n        if (!bean) {\n            throw Error(`Can't wire to bean since it is null`);\n        }\n        this.initBeans([bean], afterPreCreateCallback);\n        return bean;\n    }\n\n    private initBeans(\n        beanInstances: GenericBean<TBeanName, TBeanCollection>[],\n        afterPreCreateCallback?: (bean: GenericBean<TBeanName, TBeanCollection>) => void\n    ): void {\n        beanInstances.forEach((instance) => {\n            // used by BaseBeans to avoid the need for calling super.wireBeans() in every subclasses\n            (instance as BaseBean<TBeanCollection>).preWireBeans?.(this.beans);\n            instance.wireBeans?.(this.beans);\n        });\n\n        // used by the component class\n        beanInstances.forEach((instance) => (instance as ComponentBean).preConstruct?.());\n        if (afterPreCreateCallback) {\n            beanInstances.forEach(afterPreCreateCallback);\n        }\n        beanInstances.forEach((instance) => instance.postConstruct?.());\n    }\n\n    public getBeans(): TBeanCollection {\n        return this.beans;\n    }\n\n    public getBean<T extends TBeanName>(name: T): TBeanCollection[T] {\n        return this.beans[name];\n    }\n\n    public destroy(): void {\n        if (this.destroyed) {\n            return;\n        }\n\n        // Set before doing the destroy, so if context.destroy() gets called via another bean\n        // we are marked as destroyed already to prevent running destroy() twice\n        this.destroyed = true;\n\n        const beanInstances = this.getBeanInstances();\n        if (this.beanDestroyComparator) {\n            beanInstances.sort(this.beanDestroyComparator);\n        }\n        this.destroyBeans(beanInstances);\n\n        this.beans = {} as TBeanCollection;\n        this.createdBeans = [];\n    }\n\n    /**\n     * Destroys a bean and returns undefined to support destruction and clean up in a single line.\n     * this.dateComp = this.context.destroyBean(this.dateComp);\n     */\n    public destroyBean(bean: GenericBean<TBeanName, TBeanCollection> | null | undefined): undefined {\n        bean?.destroy?.();\n    }\n\n    /**\n     * Destroys an array of beans and returns an empty array to support destruction and clean up in a single line.\n     * this.dateComps = this.context.destroyBeans(this.dateComps);\n     */\n    public destroyBeans(beans: (GenericBean<TBeanName, TBeanCollection> | null | undefined)[]): [] {\n        if (beans) {\n            for (let i = 0; i < beans.length; i++) {\n                this.destroyBean(beans[i]);\n            }\n        }\n        return [];\n    }\n\n    public isDestroyed(): boolean {\n        return this.destroyed;\n    }\n}\n", "import type { AlignedGridsService } from '../alignedGridsService';\nimport type { ApiFunctionService } from '../api/apiFunctionService';\nimport type { GridApi } from '../api/gridApi';\nimport type { RowModelHelperService } from '../api/rowModelHelperService';\nimport type { CellNavigationService } from '../cellNavigationService';\nimport type { ColumnApplyStateService } from '../columns/columnApplyStateService';\nimport type { ColumnAutosizeService } from '../columns/columnAutosizeService';\nimport type { ColumnDefFactory } from '../columns/columnDefFactory';\nimport type { ColumnEventDispatcher } from '../columns/columnEventDispatcher';\nimport type { ColumnFactory } from '../columns/columnFactory';\nimport type { ColumnGetStateService } from '../columns/columnGetStateService';\nimport type { ColumnGroupStateService } from '../columns/columnGroupStateService';\nimport type { ColumnModel } from '../columns/columnModel';\nimport type { ColumnMoveService } from '../columns/columnMoveService';\nimport type { ColumnNameService } from '../columns/columnNameService';\nimport type { ColumnSizeService } from '../columns/columnSizeService';\nimport type { ColumnViewportService } from '../columns/columnViewportService';\nimport type { DataTypeService } from '../columns/dataTypeService';\nimport type { FuncColsService } from '../columns/funcColsService';\nimport type { PivotResultColsService } from '../columns/pivotResultColsService';\nimport type { VisibleColsService } from '../columns/visibleColsService';\nimport type { AgComponentUtils } from '../components/framework/agComponentUtils';\nimport type { ComponentMetadataProvider } from '../components/framework/componentMetadataProvider';\nimport type { FrameworkComponentWrapper } from '../components/framework/frameworkComponentWrapper';\nimport type { UserComponentFactory } from '../components/framework/userComponentFactory';\nimport type { UserComponentRegistry } from '../components/framework/userComponentRegistry';\nimport type { CtrlsFactory } from '../ctrlsFactory';\nimport type { CtrlsService } from '../ctrlsService';\nimport type { DragAndDropService } from '../dragAndDrop/dragAndDropService';\nimport type { DragService } from '../dragAndDrop/dragService';\nimport type { EditService } from '../edit/editService';\nimport type { RowEditService } from '../edit/rowEditService';\nimport type { CellPositionUtils } from '../entities/cellPositionUtils';\nimport type { GridOptions } from '../entities/gridOptions';\nimport type { RowNodeEventThrottle } from '../entities/rowNodeEventThrottle';\nimport type { RowPositionUtils } from '../entities/rowPositionUtils';\nimport type { Environment } from '../environment';\nimport type { EventService } from '../eventService';\nimport type { AgGlobalEventListener } from '../events';\nimport type { ColumnFilterService } from '../filter/columnFilterService';\nimport type { FilterManager } from '../filter/filterManager';\nimport type { QuickFilterService } from '../filter/quickFilterService';\nimport type { FocusService } from '../focusService';\nimport type { MouseEventService } from '../gridBodyComp/mouseEventService';\nimport type { NavigationService } from '../gridBodyComp/navigationService';\nimport type { PinnedWidthService } from '../gridBodyComp/pinnedWidthService';\nimport type { ScrollVisibleService } from '../gridBodyComp/scrollVisibleService';\nimport type { GridDestroyService } from '../gridDestroyService';\nimport type { GridOptionsService } from '../gridOptionsService';\nimport type { HeaderNavigationService } from '../headerRendering/common/headerNavigationService';\nimport type { HeaderPositionUtils } from '../headerRendering/common/headerPosition';\nimport type { HorizontalResizeService } from '../headerRendering/common/horizontalResizeService';\nimport type { IChartService } from '../interfaces/IChartService';\nimport type { IRangeService, ISelectionHandleFactory } from '../interfaces/IRangeService';\nimport type { IAdvancedFilterService } from '../interfaces/iAdvancedFilterService';\nimport type { IAggFuncService } from '../interfaces/iAggFuncService';\nimport type { IAutoColService } from '../interfaces/iAutoColService';\nimport type { IClipboardService } from '../interfaces/iClipboardService';\nimport type { IColumnChooserFactory } from '../interfaces/iColumnChooserFactory';\nimport type { IContextMenuFactory } from '../interfaces/iContextMenuFactory';\nimport type { ICsvCreator } from '../interfaces/iCsvCreator';\nimport type { IDetailGridApiService } from '../interfaces/iDetailGridApiService';\nimport type { IExcelCreator } from '../interfaces/iExcelCreator';\nimport type { IExpansionService } from '../interfaces/iExpansionService';\nimport type { IFrameworkOverrides } from '../interfaces/iFrameworkOverrides';\nimport type { IMenuFactory } from '../interfaces/iMenuFactory';\nimport type { IPivotColDefService } from '../interfaces/iPivotColDefService';\nimport type { IRowModel } from '../interfaces/iRowModel';\nimport type { IRowNodeStage } from '../interfaces/iRowNodeStage';\nimport type { ISelectionService } from '../interfaces/iSelectionService';\nimport type { IServerSideTransactionManager } from '../interfaces/iServerSideRowModel';\nimport type { IColumnDropZonesService, IShowRowGroupColsService } from '../interfaces/iShowRowGroupColsService';\nimport type { ISideBarService } from '../interfaces/iSideBar';\nimport type { IStatusBarService } from '../interfaces/iStatusBarService';\nimport type { LocaleService } from '../localeService';\nimport type { AnimationFrameService } from '../misc/animationFrameService';\nimport type { ApiEventService } from '../misc/apiEventService';\nimport type { MenuService } from '../misc/menuService';\nimport type { ResizeObserverService } from '../misc/resizeObserverService';\nimport type { StateService } from '../misc/state/stateService';\nimport { ModuleRegistry } from '../modules/moduleRegistry';\nimport type { PageBoundsListener } from '../pagination/pageBoundsListener';\nimport type { PageBoundsService } from '../pagination/pageBoundsService';\nimport type { PaginationAutoPageSizeService } from '../pagination/paginationAutoPageSizeService';\nimport type { PaginationService } from '../pagination/paginationService';\nimport type { PinnedRowModel } from '../pinnedRowModel/pinnedRowModel';\nimport type { AriaAnnouncementService } from '../rendering/ariaAnnouncementService';\nimport type { AutoWidthCalculator } from '../rendering/autoWidthCalculator';\nimport type { ColumnAnimationService } from '../rendering/columnAnimationService';\nimport type { ColumnHoverService } from '../rendering/columnHoverService';\nimport type { OverlayService } from '../rendering/overlays/overlayService';\nimport type { RowCssClassCalculator } from '../rendering/row/rowCssClassCalculator';\nimport type { RowContainerHeightService } from '../rendering/rowContainerHeightService';\nimport type { RowRenderer } from '../rendering/rowRenderer';\nimport type { RowNodeBlockLoader } from '../rowNodeCache/rowNodeBlockLoader';\nimport type { RowNodeSorter } from '../rowNodes/rowNodeSorter';\nimport type { SelectableService } from '../rowNodes/selectableService';\nimport type { SortController } from '../sortController';\nimport type { StylingService } from '../styling/stylingService';\nimport type { SyncService } from '../syncService';\nimport type { UndoRedoService } from '../undoRedo/undoRedoService';\nimport type { ValidationService } from '../validation/validationService';\nimport type { ExpressionService } from '../valueService/expressionService';\nimport type { ValueCache } from '../valueService/valueCache';\nimport type { ValueService } from '../valueService/valueService';\nimport type { PopupService } from '../widgets/popupService';\nimport type { GenericContextParams, GenericSingletonBean } from './genericContext';\nimport { GenericContext } from './genericContext';\n\nexport interface ContextParams extends GenericContextParams<BeanName, BeanCollection> {\n    gridId: string;\n}\n\nexport interface SingletonBean extends GenericSingletonBean<BeanName, BeanCollection> {}\n\nexport type ControllerName = 'headerFilterCell' | 'detailCellRenderer' | 'groupCellRendererCtrl';\nexport type UserComponentName =\n    | 'agColumnHeader'\n    | 'agColumnGroupHeader'\n    | 'agSortIndicator'\n    | 'agAnimateShowChangeCellRenderer'\n    | 'agAnimateSlideCellRenderer'\n    | 'agLoadingCellRenderer'\n    | 'agSkeletonCellRenderer'\n    | 'agCheckboxCellRenderer'\n    | 'agLoadingOverlay'\n    | 'agNoRowsOverlay'\n    | 'agTooltipComponent'\n    | 'agReadOnlyFloatingFilter'\n    | 'agTextColumnFilter'\n    | 'agNumberColumnFilter'\n    | 'agDateColumnFilter'\n    | 'agDateInput'\n    | 'agTextColumnFloatingFilter'\n    | 'agNumberColumnFloatingFilter'\n    | 'agDateColumnFloatingFilter'\n    | 'agMultiColumnFilter'\n    | 'agMultiColumnFloatingFilter'\n    | 'agGroupColumnFilter'\n    | 'agGroupColumnFloatingFilter'\n    | 'agSetColumnFilter'\n    | 'agSetColumnFloatingFilter'\n    | 'agCellEditor'\n    | 'agSelectCellEditor'\n    | 'agTextCellEditor'\n    | 'agNumberCellEditor'\n    | 'agDateCellEditor'\n    | 'agDateStringCellEditor'\n    | 'agCheckboxCellEditor'\n    | 'agLargeTextCellEditor'\n    | 'agRichSelect'\n    | 'agRichSelectCellEditor'\n    | 'agMenuItem'\n    | 'agColumnsToolPanel'\n    | 'agFiltersToolPanel'\n    | 'agGroupRowRenderer'\n    | 'agGroupCellRenderer'\n    | 'agDetailCellRenderer'\n    | 'agSparklineCellRenderer'\n    | 'agAggregationComponent'\n    | 'agSelectedRowCountComponent'\n    | 'agTotalRowCountComponent'\n    | 'agFilteredRowCountComponent'\n    | 'agTotalAndFilteredRowCountComponent';\nexport interface NamedClass<TName = string> {\n    classImp: new (...args: []) => object;\n    name: TName;\n}\nexport type ControllerMeta = NamedClass<ControllerName>;\nexport type ComponentMeta = NamedClass<UserComponentName>;\n\nexport interface CoreBeanCollection {\n    context: Context;\n    resizeObserverService: ResizeObserverService;\n    pageBoundsListener: PageBoundsListener;\n    gos: GridOptionsService;\n    environment: Environment;\n    rowRenderer: RowRenderer;\n    valueService: ValueService;\n    eventService: EventService;\n    columnModel: ColumnModel;\n    columnViewportService: ColumnViewportService;\n    columnNameService: ColumnNameService;\n    visibleColsService: VisibleColsService;\n    columnMoveService: ColumnMoveService;\n    columnSizeService: ColumnSizeService;\n    headerNavigationService: HeaderNavigationService;\n    navigationService: NavigationService;\n    columnAnimationService: ColumnAnimationService;\n    focusService: FocusService;\n    popupService: PopupService;\n    stylingService: StylingService;\n    columnHoverService: ColumnHoverService;\n    userComponentFactory: UserComponentFactory;\n    userComponentRegistry: UserComponentRegistry;\n    animationFrameService: AnimationFrameService;\n    dragService: DragService;\n    dragAndDropService: DragAndDropService;\n    sortController: SortController;\n    columnFilterService?: ColumnFilterService;\n    filterManager?: FilterManager;\n    rowContainerHeightService: RowContainerHeightService;\n    frameworkOverrides: IFrameworkOverrides;\n    cellPositionUtils: CellPositionUtils;\n    rowPositionUtils: RowPositionUtils;\n    selectionService: ISelectionService;\n    rowCssClassCalculator: RowCssClassCalculator;\n    rowModel: IRowModel;\n    ctrlsService: CtrlsService;\n    ctrlsFactory: CtrlsFactory;\n    valueCache: ValueCache;\n    rowNodeEventThrottle: RowNodeEventThrottle;\n    localeService: LocaleService;\n    syncService: SyncService;\n    ariaAnnouncementService: AriaAnnouncementService;\n    rangeService?: IRangeService;\n    selectionHandleFactory: ISelectionHandleFactory;\n    validationService?: ValidationService;\n    gridApi: GridApi;\n    gridOptions: GridOptions;\n    eGridDiv: HTMLElement;\n    columnApplyStateService: ColumnApplyStateService;\n    columnFactory: ColumnFactory;\n    pivotResultColsService: PivotResultColsService;\n    autoColService?: IAutoColService;\n    columnDefFactory: ColumnDefFactory;\n    columnGroupStateService: ColumnGroupStateService;\n    columnEventDispatcher: ColumnEventDispatcher;\n    columnAutosizeService: ColumnAutosizeService;\n    funcColsService: FuncColsService;\n    quickFilterService?: QuickFilterService;\n    showRowGroupColsService?: IShowRowGroupColsService;\n    columnDropZonesService?: IColumnDropZonesService;\n    headerPositionUtils: HeaderPositionUtils;\n    dataTypeService?: DataTypeService;\n    globalEventListener: AgGlobalEventListener;\n    globalSyncEventListener: AgGlobalEventListener;\n    stateService?: StateService;\n    overlayService: OverlayService;\n    columnGetStateService: ColumnGetStateService;\n    pinnedRowModel: PinnedRowModel;\n    menuService: MenuService;\n    apiEventService: ApiEventService;\n    undoRedoService?: UndoRedoService;\n    rowNodeBlockLoader?: RowNodeBlockLoader;\n    csvCreator?: ICsvCreator;\n    excelCreator?: IExcelCreator;\n    clipboardService?: IClipboardService;\n    mouseEventService: MouseEventService;\n    cellNavigationService: CellNavigationService;\n    scrollVisibleService: ScrollVisibleService;\n    pinnedWidthService: PinnedWidthService;\n    expressionService: ExpressionService;\n    autoWidthCalculator: AutoWidthCalculator;\n    componentMetadataProvider: ComponentMetadataProvider;\n    agComponentUtils: AgComponentUtils;\n    frameworkComponentWrapper: FrameworkComponentWrapper;\n    horizontalResizeService: HorizontalResizeService;\n    filterMenuFactory: IMenuFactory;\n    enterpriseMenuFactory?: IMenuFactory;\n    contextMenuFactory?: IContextMenuFactory;\n    editService?: EditService;\n    rowEditService?: RowEditService;\n    alignedGridsService?: AlignedGridsService;\n    paginationAutoPageSizeService?: PaginationAutoPageSizeService;\n    paginationService?: PaginationService;\n    pageBoundsService: PageBoundsService;\n    apiFunctionService: ApiFunctionService;\n    rowModelHelperService?: RowModelHelperService;\n    detailGridApiService?: IDetailGridApiService;\n    gridDestroyService: GridDestroyService;\n    expansionService: IExpansionService;\n    sideBarService?: ISideBarService;\n    ssrmTransactionManager?: IServerSideTransactionManager;\n    columnChooserFactory?: IColumnChooserFactory;\n    aggFuncService?: IAggFuncService;\n    advancedFilterService: IAdvancedFilterService;\n    filterStage?: IRowNodeStage;\n    sortStage?: IRowNodeStage;\n    flattenStage?: IRowNodeStage;\n    groupStage?: IRowNodeStage;\n    aggregationStage?: IRowNodeStage;\n    pivotStage?: IRowNodeStage;\n    filterAggregatesStage?: IRowNodeStage;\n    rowNodeSorter: RowNodeSorter;\n    pivotColDefService?: IPivotColDefService;\n    statusBarService?: IStatusBarService;\n    chartService?: IChartService;\n    selectableService: SelectableService;\n}\n\nexport type BeanCollection = CoreBeanCollection & {\n    // `unknown | undefined` to make sure the type is handled correctly when used\n    [key in Exclude<BeanName, keyof CoreBeanCollection>]?: unknown;\n};\n\nexport class Context extends GenericContext<BeanName, BeanCollection> {\n    private gridId: string;\n\n    protected override init(params: ContextParams): void {\n        this.gridId = params.gridId;\n\n        this.beans.context = this;\n        super.init(params);\n    }\n\n    public override destroy(): void {\n        super.destroy();\n\n        ModuleRegistry.__unRegisterGridModules(this.gridId);\n    }\n\n    public getGridId(): string {\n        return this.gridId;\n    }\n}\n\nexport type BeanName =\n    | 'advancedFilterExpressionService'\n    | 'advancedFilterService'\n    | 'advancedSettingsMenuFactory'\n    | 'aggFuncService'\n    | 'agGridAngular'\n    | 'agGridReact'\n    | 'agGridVue'\n    | 'agComponentUtils'\n    | 'aggregationStage'\n    | 'alignedGridsService'\n    | 'animationFrameService'\n    | 'apiFunctionService'\n    | 'ariaAnnouncementService'\n    | 'apiEventService'\n    | 'autoColService'\n    | 'autoWidthCalculator'\n    | 'beans'\n    | 'cellEditorFactory'\n    | 'cellNavigationService'\n    | 'cellPositionUtils'\n    | 'cellRendererFactory'\n    | 'cellRendererService'\n    | 'changeDetectionService'\n    | 'chartColumnService'\n    | 'chartCrossFilterService'\n    | 'chartMenuItemMapper'\n    | 'chartMenuListFactory'\n    | 'chartMenuService'\n    | 'chartTranslationService'\n    | 'chartService'\n    | 'clipboardService'\n    | 'columnAutosizeService'\n    | 'columnChooserFactory'\n    | 'columnController'\n    | 'columnDefFactory'\n    | 'columnDropZonesService'\n    | 'columnEditorFactory'\n    | 'columnEventDispatcher'\n    | 'columnFilterService'\n    | 'columnGetStateService'\n    | 'columnSizeService'\n    | 'columnFactory'\n    | 'columnAnimationService'\n    | 'columnHoverService'\n    | 'columnMenuFactory'\n    | 'columnModel'\n    | 'columnMoveService'\n    | 'columnPositionService'\n    | 'columnNameService'\n    | 'columnViewportService'\n    | 'columnGroupStateService'\n    | 'columnApplyStateService'\n    | 'columnUtils'\n    | 'pivotResultColsService'\n    | 'componentMetadataProvider'\n    | 'context'\n    | 'contextMenuFactory'\n    | 'ctrlsFactory'\n    | 'ctrlsService'\n    | 'csvCreator'\n    | 'dataTypeService'\n    | 'visibleColsService'\n    | 'detailGridApiService'\n    | 'dragAndDropService'\n    | 'dragService'\n    | 'editService'\n    | 'excelCreator'\n    | 'enterpriseMenuFactory'\n    | 'environment'\n    | 'eventService'\n    | 'eGridDiv'\n    | 'expansionService'\n    | 'expressionService'\n    | 'filterAggregatesStage'\n    | 'filterManager'\n    | 'filterMenuFactory'\n    | 'filterStage'\n    | 'flattenStage'\n    | 'focusService'\n    | 'funcColsService'\n    | 'frameworkComponentWrapper'\n    | 'frameworkOverrides'\n    | 'globalEventListener'\n    | 'globalSyncEventListener'\n    | 'gridApi'\n    | 'gridDestroyService'\n    | 'gridOptions'\n    | 'gos'\n    | 'gridOptionsWrapper'\n    | 'gridSerializer'\n    | 'groupStage'\n    | 'headerNavigationService'\n    | 'headerPositionUtils'\n    | 'horizontalResizeService'\n    | 'immutableService'\n    | 'lazyBlockLoadingService'\n    | 'licenseManager'\n    | 'localeService'\n    | 'loggerFactory'\n    | 'menuItemMapper'\n    | 'menuService'\n    | 'menuUtils'\n    | 'modelItemUtils'\n    | 'mouseEventService'\n    | 'navigationService'\n    | 'overlayService'\n    | 'paginationAutoPageSizeService'\n    | 'paginationService'\n    | 'pinnedRowModel'\n    | 'pinnedWidthService'\n    | 'pivotColDefService'\n    | 'pivotStage'\n    | 'popupService'\n    | 'quickFilterService'\n    | 'rangeService'\n    | 'resizeObserverService'\n    | 'pageBoundsListener'\n    | 'pageBoundsService'\n    | 'renderStatusService'\n    | 'rowContainerHeightService'\n    | 'rowCssClassCalculator'\n    | 'rowEditService'\n    | 'rowModel'\n    | 'rowNodeBlockLoader'\n    | 'rowNodeEventThrottle'\n    | 'rowModelHelperService'\n    | 'rowNodeSorter'\n    | 'rowPositionUtils'\n    | 'rowRenderer'\n    | 'scrollVisibleService'\n    | 'selectableService'\n    | 'selectionController'\n    | 'selectionHandleFactory'\n    | 'selectionService'\n    | 'showRowGroupColsService'\n    | 'sideBarService'\n    | 'sortController'\n    | 'sortService'\n    | 'sortStage'\n    | 'sparklineTooltipSingleton'\n    | 'ssrmBlockUtils'\n    | 'ssrmExpandListener'\n    | 'ssrmFilterListener'\n    | 'ssrmListenerUtils'\n    | 'ssrmNodeManager'\n    | 'ssrmSortService'\n    | 'ssrmStoreFactory'\n    | 'ssrmStoreUtils'\n    | 'ssrmTransactionManager'\n    | 'stateService'\n    | 'statusBarService'\n    | 'stylingService'\n    | 'syncService'\n    | 'templateService'\n    | 'toolPanelColDefService'\n    | 'undoRedoService'\n    | 'userComponentFactory'\n    | 'userComponentRegistry'\n    | 'valueCache'\n    | 'valueService'\n    | 'validationLogger'\n    | 'validationService';\n", "import type { Column } from '../interfaces/iColumn';\nimport type { ExportFileNameGetter, ExportParams } from './exportParams';\nimport type { AgGridCommon } from './iCommon';\nimport type { XmlElement } from './iXmlFactory';\n\n// Excel Styles\nexport interface ExcelStyle {\n    /** The id of the Excel Style, this should match a CSS cell class. */\n    id: string;\n    /** Use this property to customise cell alignment properties. */\n    alignment?: ExcelAlignment;\n    /** Use this property to customise cell borders. */\n    borders?: ExcelBorders;\n    /** Use this property to specify the type of data being exported. */\n    dataType?: ExcelDataType;\n    /** Use this property to customise the font used in the cell. */\n    font?: ExcelFont;\n    /** Use this property to customise the cell background. */\n    interior?: ExcelInterior;\n    /** Use this property to customise the cell value as a formatted number. */\n    numberFormat?: ExcelNumberFormat;\n    /** Use this property to setup cell protection. */\n    protection?: ExcelProtection;\n    /**\n     * @deprecated Legacy property\n     */\n    name?: string;\n}\n\nexport interface ExcelAlignment {\n    /**\n     * Use this property to change the cell horizontal alignment.\n     * @default 'Automatic'\n     */\n    horizontal?:\n        | 'Automatic'\n        | 'Left'\n        | 'Center'\n        | 'Right'\n        | 'Fill'\n        | 'Justify'\n        | 'CenterAcrossSelection'\n        | 'Distributed'\n        | 'JustifyDistributed';\n    /**\n     * Use this property to change the level of indentation in the cell.\n     * @default 0\n     */\n    indent?: number;\n    /**\n     * Use this property to change the cell reading order.\n     * @default 'LeftToRight'\n     */\n    readingOrder?: 'RightToLeft' | 'LeftToRight' | 'Context';\n    /**\n     * The number of degrees between 0 and 359 to rotate the text.\n     * @default 0\n     */\n    rotate?: number;\n    /**\n     * If set to `true`, the font size of the cell will automatically change to force the text to fit within the cell.\n     * @default false\n     */\n    shrinkToFit?: boolean;\n    /**\n     * Use this property to change the cell vertical alignment.\n     * @default 'Automatic'\n     */\n    vertical?: 'Automatic' | 'Top' | 'Bottom' | 'Center' | 'Justify' | 'Distributed' | 'JustifyDistributed';\n    /**\n     * If set to `true`, multiline text will be displayed as multiline by Excel.\n     * @default false\n     */\n    wrapText?: boolean;\n    /**\n     * @deprecated Legacy property\n     */\n    verticalText?: boolean;\n}\n\nexport interface ExcelBorders {\n    /** Use to set the cell's bottom border. */\n    borderBottom?: ExcelBorder;\n    /** Use to set the cell's left border. */\n    borderLeft?: ExcelBorder;\n    /** Use to set the cell's right border. */\n    borderRight?: ExcelBorder;\n    /** Use to set the cell's top border. */\n    borderTop?: ExcelBorder;\n}\n\nexport interface ExcelBorder {\n    /**\n     * The color or the border.\n     * @default 'black'\n     */\n    color?: string;\n    /**\n     * The style of the border.\n     * @default 'None'\n     */\n    lineStyle?: 'None' | 'Continuous' | 'Dash' | 'Dot' | 'DashDot' | 'DashDotDot' | 'SlantDashDot' | 'Double';\n    /**\n     * The thickness of the border from 0 (thin) to 3 (thick).\n     * @default 0\n     */\n    weight?: 0 | 1 | 2 | 3;\n}\n\nexport interface ExcelFont {\n    /**\n     * Set to `true` to set the cell text to bold.\n     * @default false\n     */\n    bold?: boolean;\n    /**\n     * The color of the cell font.\n     * @default '#000000'\n     */\n    color?: string;\n    /**\n     * The family of the font to used in the cell.\n     * Options: `Automatic`,`Roman`,`Swiss`,`Modern`,`Script`,`Decorative`,\n     * @default 'Automatic'\n     */\n    family?: string;\n    /**\n     * The name of the font to be used in the cell.\n     * @default 'Calibri'\n     */\n    fontName?: string;\n    /**\n     * Set to `true` to display the cell font as italic.\n     * @default false\n     */\n    italic?: boolean;\n    /**\n     * Set to `true` to add a text outline.\n     * @default false\n     */\n    outline?: boolean;\n    /**\n     * Set to `true` to add text shadow.\n     * @default false\n     */\n    shadow?: boolean;\n    /**\n     * Set this property to used a different font size other than the default.\n     */\n    size?: number;\n    /**\n     * Set to `true` to add a strikeThrough line.\n     * @default false\n     */\n    strikeThrough?: boolean;\n    /**\n     * Use this property to underline the cell text.\n     */\n    underline?: 'Single' | 'Double';\n    /** Use this property to change the default font alignment. Note: This is different than setting cell vertical alignment. */\n    verticalAlign?: 'Superscript' | 'Subscript';\n    /**\n     * @deprecated Legacy property\n     */\n    charSet?: number;\n}\n\nexport interface ExcelInterior {\n    /** Use this property to set background color patterns. */\n    pattern:\n        | 'None'\n        | 'Solid'\n        | 'Gray75'\n        | 'Gray50'\n        | 'Gray25'\n        | 'Gray125'\n        | 'Gray0625'\n        | 'HorzStripe'\n        | 'VertStripe'\n        | 'ReverseDiagStripe'\n        | 'DiagStripe'\n        | 'DiagCross'\n        | 'ThickDiagCross'\n        | 'ThinHorzStripe'\n        | 'ThinVertStripe'\n        | 'ThinReverseDiagStripe'\n        | 'ThinDiagStripe'\n        | 'ThinHorzCross'\n        | 'ThinDiagCross';\n    /** The colour to be used as a secondary colour combined with patterns. */\n    color?: string;\n    /** The pattern color. */\n    patternColor?: string;\n}\n\nexport interface ExcelNumberFormat {\n    /** Use this property to provide a pattern to format a number. (eg. 10000 could become $10,000.00). */\n    format: string;\n}\n\nexport interface ExcelProtection {\n    /**\n     * Set to `false` to disable cell protection (locking)\n     * @default true\n     */\n    protected: boolean;\n    /**\n     * Set to `true` to hide formulas within protected cells.\n     * @default false\n     */\n    hideFormula: boolean;\n}\n\n// Excel Structure\nexport interface ExcelWorksheet {\n    name: string;\n    table: ExcelTable;\n}\n\nexport interface ExcelTable {\n    columns: ExcelColumn[];\n    rows: ExcelRow[];\n}\n\nexport interface ExcelColumn {\n    min?: number;\n    max?: number;\n    outlineLevel?: number;\n    width?: number;\n    s?: number;\n    hidden?: boolean;\n    bestFit?: boolean;\n    displayName?: string;\n    filterAllowed?: boolean;\n}\n\nexport interface ExcelRow {\n    /** Collapsed state. */\n    collapsed?: boolean;\n    /** Hidden state. */\n    hidden?: boolean;\n    /** The height of the row. */\n    height?: number;\n    /** The indentation level if the current row is part of a row group. */\n    outlineLevel?: number;\n    /** An array of ExcelCells. */\n    cells: ExcelCell[];\n}\n\nexport interface ExcelCell {\n    /** The data that will be added to the cell. */\n    data?: ExcelData;\n\n    /** Cell reference. */\n    ref?: string;\n\n    /** Collapsible ranges. */\n    collapsibleRanges?: number[][];\n\n    /** The ExcelStyle id to be associated with the cell. */\n    styleId?: string | string[];\n\n    /**\n     * The number of cells to span across (1 means span 2 columns).\n     * @default 0\n     */\n    mergeAcross?: number;\n}\n\nexport interface ExcelImagePosition {\n    /** The row containing this image. This property is set automatically, don't change it unless you know what you are doing. */\n    row?: number;\n    /**\n     * The amount of rows this image will cover.\n     * @default 1\n     *  */\n    rowSpan?: number;\n    /** The column containing this image. This property is set automatically, don't change it unless you know what you are doing. */\n    column?: number;\n    /**\n     * The amount of columns this image will cover.\n     * @default 1\n     */\n    colSpan?: number;\n    /**\n     * The amount in pixels the image should be offset horizontally.\n     * @default 0\n     */\n    offsetX?: number;\n    /**\n     * The amount in pixels the image should be offset vertically.\n     * @default 0\n     */\n    offsetY?: number;\n}\n\ninterface BaseImage {\n    /**\n     * The image `id`. This field is required so the same image doesn't get imported multiple times.\n     */\n    id: string;\n    /**\n     * A base64 string that represents the image being imported.\n     */\n    base64: string;\n    /** The type of image being exported. */\n    imageType: 'jpg' | 'png' | 'gif';\n    /** Alt Text for the image. */\n    altText?: string;\n}\n\nexport interface ExcelHeaderFooterImage extends BaseImage {\n    /** Set this property to select a preset that changes the appearance of the image. */\n    recolor?: 'Grayscale' | 'Black & White' | 'Washout';\n    /** The width of the image in pixels. */\n    width: number;\n    /** The height of the image in pixels. */\n    height: number;\n    /** The brightness of the image between 0 and 100 (if `recolor` is used, this value will only be applied for `Grayscale`). Default 50 */\n    brightness: number;\n    /** The contrast of the image between 0 and 100. (If `recolor` is used, this value will only be applied for `Grayscale`.). Default 50 */\n    contrast: number;\n}\n\nexport interface ExcelImage extends BaseImage {\n    /**\n     * If set to `true`, the image will cover the whole cell that is being imported to.\n     * This property does not apply to images in the Header/Footer\n     * @default false\n     */\n    fitCell?: boolean;\n    /**\n     * Set a value between 0 - 100 that will indicate the percentage of transparency of the image.\n     * @default 0\n     */\n    transparency?: number;\n    /**\n     * Set a value between 0 - 359 that will indicate the number of degrees to rotate the image clockwise.\n     * @default 0\n     */\n    rotation?: number;\n    /** Set this property to select a preset that changes the appearance of the image. */\n    recolor?: 'Grayscale' | 'Sepia' | 'Washout';\n    /** The width of the image in pixels. If this value is not selected, `fitCell` will be automatically set to true. */\n    width?: number;\n    /** The height of the image in pixels. If this value is not selected, `fitCell` will be automatically set to true. */\n    height?: number;\n    /** Position of the image. */\n    position?: ExcelImagePosition;\n}\n\n/*\n * OOXML Data Types\n * (str): String\n * (s): Shared String\n * (f): Formula\n * (inlineStr): Inline string\n * Note: Inline strings are placed in a `is` element instead of `v`\n * (n) Number\n * (b) Boolean\n * (d) DateTime\n * (e) Error\n */\nexport type ExcelDataType = 'String' | 'Formula' | 'Number' | 'Boolean' | 'DateTime' | 'Error';\nexport type ExcelOOXMLDataType = 'str' | 's' | 'f' | 'inlineStr' | 'n' | 'b' | 'd' | 'e' | 'empty';\n\nexport interface ExcelData {\n    /** The type of data being in the cell. */\n    type: ExcelDataType | ExcelOOXMLDataType;\n    /** The value of the cell. */\n    value: string | null;\n}\n\nexport interface ExcelRelationship {\n    Id: string;\n    Type: string;\n    Target: string;\n}\n\nexport interface ExcelContentType {\n    name: 'Default' | 'Override';\n    ContentType: string;\n    Extension?: string;\n    PartName?: string;\n}\n\nexport interface ExcelOOXMLTemplate {\n    getTemplate(config?: any, idx?: number, currentSheet?: number): XmlElement;\n    convertType?(type: string): string;\n}\n\n// Excel Export\nexport enum ExcelFactoryMode {\n    SINGLE_SHEET,\n    MULTI_SHEET,\n}\n\nexport interface ExcelSheetNameGetterParams<TData = any, TContext = any> extends AgGridCommon<TData, TContext> {}\n\nexport type ExcelSheetNameGetter = (params?: ExcelSheetNameGetterParams) => string;\n\nexport interface ColumnWidthCallbackParams {\n    column: Column | null;\n    index: number;\n}\n\nexport interface RowHeightCallbackParams {\n    rowIndex: number;\n}\n\nexport interface ExcelExportParams extends ExportParams<ExcelRow[]> {\n    /**\n     * The author of the exported file.\n     * @default \"AG Grid\"\n     * */\n    author?: string;\n    /**\n     * If set to `true`, this will try to convert any cell that starts with `=` to a formula, instead of setting the cell value as regular string that starts with `=`.\n     * @default false\n     */\n    autoConvertFormulas?: boolean;\n    /**\n     * Defines the default column width. If no value is present, each column will have value currently set in the application with a min value of 75px. This property can also be supplied a callback function that returns a number.\n     */\n    columnWidth?: number | ((params: ColumnWidthCallbackParams) => number);\n    /**\n     * The default value for the font size of the Excel document.\n     * @default 11\n     */\n    fontSize?: number;\n    /**\n     * The height in pixels of header rows. Defaults to Excel default value. This property can also be supplied a callback function that returns a number.\n     */\n    headerRowHeight?: number | ((params: RowHeightCallbackParams) => number);\n    /**\n     * The height in pixels of all rows. Defaults to Excel default value. This property can also be supplied a callback function that returns a number.\n     */\n    rowHeight?: number | ((params: RowHeightCallbackParams) => number);\n    /**\n     * The name of the sheet in Excel where the grid will be exported. Either a string or a function that returns a\n     * string can be used. If a function is used, it will be called once before the export starts.\n     * There is a max limit of 31 characters per sheet name.\n     * @default 'ag-grid'\n     */\n    sheetName?: string | ExcelSheetNameGetter;\n    /** The Excel document page margins. Relevant for printing. */\n    margins?: ExcelSheetMargin;\n    /** Allows you to setup the page orientation and size. */\n    pageSetup?: ExcelSheetPageSetup;\n    /**\n     * Used to add an Excel table to the spreadsheet.\n     * Set to `true` to use default export table config, or provide a config object.\n     *\n     * @default false\n     **/\n    exportAsExcelTable?: boolean | ExcelTableConfig;\n    /** The configuration for header and footers. */\n    headerFooterConfig?: ExcelHeaderFooterConfig;\n    /**\n     * If `true`, the outline (controls to expand and collapse) for Row Groups will not be added automatically to the Excel Document.\n     * @default false.\n     */\n    suppressRowOutline?: boolean;\n    /**\n     * If `true`, the outline (controls to expand and collapse) for Group Columns will not be added automatically to the Excel Document.\n     * @default false.\n     */\n    suppressColumnOutline?: boolean;\n\n    /**\n     * The expand/collapse state of each row group in the Excel Document.\n     *  - expanded: All row groups will be expanded by default.\n     *  - collapsed: All row groups will be collapsed by default.\n     *  - match: The row groups will match their current state in the Grid.\n     * @default 'expanded'\n     */\n    rowGroupExpandState?: 'expanded' | 'collapsed' | 'match';\n    /**\n     * The mimeType of the Excel file.\n     * @default 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n     */\n    mimeType?: string;\n    /** Use to export an image for the gridCell in question. */\n    addImageToCell?: (\n        rowIndex: number,\n        column: Column,\n        value: string\n    ) => { image: ExcelImage; value?: string } | undefined;\n}\n\nexport interface ExcelExportMultipleSheetParams {\n    /**\n     * The author of the exported file.\n     * @default 'AG Grid'\n     */\n    author?: string;\n    /**\n     * Array of strings containing the raw data for Excel workbook sheets.\n     * This property is only used when exporting to multiple sheets using `api.exportMultipleSheetsAsExcel()` and the data for each sheet is obtained by calling `api.getSheetDataForExcel()`.\n     */\n    data: string[];\n    /**\n     * String to use as the file name or a function that returns a string.\n     * @default 'export.xlsx'\n     */\n    fileName?: string | ExportFileNameGetter;\n    /**\n     * The default value for the font size of the Excel document.\n     * @default 11\n     */\n    fontSize?: number;\n    /**\n     * The mimeType of the Excel file.\n     * @default 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n     */\n    mimeType?: string;\n}\n\nexport interface ExcelHeaderFooterConfig {\n    /** The configuration for header and footer on every page. */\n    all?: ExcelHeaderFooter;\n    /** The configuration for header and footer on the first page only. */\n    first?: ExcelHeaderFooter;\n    /** The configuration for header and footer on even numbered pages only. */\n    even?: ExcelHeaderFooter;\n}\n\ntype ExcelHeader = {\n    /** An array of maximum 3 items (`Left`, `Center`, `Right`), containing header configurations. */\n    header: ExcelHeaderFooterContent[];\n};\n\ntype ExcelFooter = {\n    /** An array of maximum 3 items (`Left`, `Center`, `Right`), containing footer configurations. */\n    footer: ExcelHeaderFooterContent[];\n};\n\nexport type ExcelHeaderFooter = ExcelFooter | ExcelHeader | (ExcelFooter & ExcelHeader);\n\nexport interface ExcelHeaderFooterContent {\n    /** The value of the text to be included in the header. */\n    value: string;\n    /**\n     * When value is `&[Picture]`, this should be used as the referenced image.\n     */\n    image?: ExcelHeaderFooterImage;\n    /**\n     * Configures where the text should be added: `Left`, `Center` or `Right`.\n     * @default 'Left'\n     */\n    position?: 'Left' | 'Center' | 'Right';\n    /** The font style of the header/footer value. */\n    font?: ExcelFont;\n}\n\nexport interface IExcelCreator {\n    getDataAsExcel(params?: ExcelExportParams): Blob | string | undefined;\n    getSheetDataForExcel(params?: ExcelExportParams): string;\n    getMultipleSheetsAsExcel(params: ExcelExportMultipleSheetParams): Blob | undefined;\n\n    exportDataAsExcel(params?: ExcelExportParams): void;\n    exportMultipleSheetsAsExcel(params: ExcelExportMultipleSheetParams): void;\n\n    /** private methods */\n    setFactoryMode(factoryMode: ExcelFactoryMode): void;\n    getFactoryMode(): ExcelFactoryMode;\n}\n\nexport interface ExcelSheetMargin {\n    /**\n     * The sheet top margin.\n     * @default 0.75\n     */\n    top?: number;\n    /**\n     * The sheet right margin.\n     * @default 0.7\n     */\n    right?: number;\n    /**\n     * The sheet bottom margin.\n     * @default 0.75\n     */\n    bottom?: number;\n    /**\n     * The sheet left margin.\n     * @default 0.7\n     */\n    left?: number;\n    /**\n     * The sheet header margin.\n     * @default 0.3\n     */\n    header?: number;\n    /**\n     * The sheet footer margin.\n     * @default 0.3\n     */\n    footer?: number;\n}\n\nexport interface ExcelSheetPageSetup {\n    /**\n     * Use this property to change the print orientation.\n     * @default 'Portrait'\n     */\n    orientation?: 'Portrait' | 'Landscape';\n    /**\n     * Use this property to set the sheet size.\n     * @default 'Letter'\n     */\n    pageSize?:\n        | 'Letter'\n        | 'Letter Small'\n        | 'Tabloid'\n        | 'Ledger'\n        | 'Legal'\n        | 'Statement'\n        | 'Executive'\n        | 'A3'\n        | 'A4'\n        | 'A4 Small'\n        | 'A5'\n        | 'A6'\n        | 'B4'\n        | 'B5'\n        | 'Folio'\n        | 'Envelope'\n        | 'Envelope DL'\n        | 'Envelope C5'\n        | 'Envelope B5'\n        | 'Envelope C3'\n        | 'Envelope C4'\n        | 'Envelope C6'\n        | 'Envelope Monarch'\n        | 'Japanese Postcard'\n        | 'Japanese Double Postcard';\n}\n\nexport interface ExcelTableConfig {\n    /**\n     * This property is used to set the table name. It should be an alphanumeric string with no special characters.\n     * @default 'AG-GRID-TABLE'\n     */\n    name?: string;\n\n    /**\n     * Set this property to `false` to disable the filter button at the exported Excel table header.\n     * Set it to `true` to show the filter button on all columns.\n     * Set it to `match` to show the filter button only if the column has a filter allowed.\n     *\n     * @default match\n     */\n    showFilterButton?: boolean | 'match';\n\n    /**\n     * Set this property to `false` to hide the row stripes.\n     *\n     * @default true\n     */\n    showRowStripes?: boolean;\n\n    /**\n     * Set this property to `true` to show column stripes.\n     *\n     * @default false\n     */\n    showColumnStripes?: boolean;\n\n    /**\n     * Set this property to `true` to show the first column in bold/highlighted style.\n     *\n     * @default false\n     */\n    highlightFirstColumn?: boolean;\n\n    /**\n     * Set this property to `true` to show the last column in bold/highlighted style.\n     *\n     * @default false\n     */\n    highlightLastColumn?: boolean;\n}\n", "export enum VerticalDirection {\n    Up,\n    Down,\n}\nexport enum HorizontalDirection {\n    Left,\n    Right,\n}\n", "import { HorizontalDirection, VerticalDirection } from '../constants/direction';\nimport type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { IAggFunc } from '../entities/colDef';\nimport type { Environment } from '../environment';\nimport type { MouseEventService } from '../gridBodyComp/mouseEventService';\nimport type { RowDropZoneParams } from '../gridBodyComp/rowDragFeature';\nimport type { Column } from '../interfaces/iColumn';\nimport type { AgGridCommon } from '../interfaces/iCommon';\nimport type { IRowNode } from '../interfaces/iRowNode';\nimport { _flatten, _removeFromArray } from '../utils/array';\nimport { _getBodyHeight, _getBodyWidth } from '../utils/browser';\nimport { _clearElement, _getElementRectWithOffset, _loadTemplate } from '../utils/dom';\nimport { _isFunction, _warnOnce } from '../utils/function';\nimport { _createIcon } from '../utils/icon';\nimport { _escapeString } from '../utils/string';\nimport type { DragListenerParams, DragService } from './dragService';\n\nexport interface DragItem<TValue = any> {\n    /**\n     * When dragging a row, this contains the row node being dragged\n     * When dragging multiple rows, this contains the row that started the drag.\n     */\n    rowNode?: IRowNode;\n\n    /** When dragging multiple rows, this contains all rows being dragged */\n    rowNodes?: IRowNode[];\n\n    /** When dragging columns, this contains the columns being dragged */\n    columns?: Column[];\n\n    /** When dragging columns, this contains the visible state of the columns */\n    visibleState?: { [key: string]: boolean };\n\n    /** When dragging columns, this contains the pivot state of the columns. This is only populated/used in column tool panel */\n    pivotState?: {\n        [key: string]: {\n            pivot?: boolean;\n            rowGroup?: boolean;\n            aggFunc?: string | IAggFunc | null;\n        };\n    };\n\n    /** Additional state */\n    value?: TValue;\n}\n\nexport enum DragSourceType {\n    ToolPanel,\n    HeaderCell,\n    RowDrag,\n    ChartPanel,\n    AdvancedFilterBuilder,\n}\n\nexport interface DragSource {\n    /**\n     * The type of the drag source, used by the drop target to know where the\n     * drag originated from.\n     */\n    type: DragSourceType;\n    /** Can be used to identify a specific component as the source */\n    sourceId?: string;\n    /**\n     * Element which, when dragged, will kick off the DnD process\n     */\n    eElement: Element;\n    /**\n     * If eElement is dragged, then the dragItem is the object that gets passed around.\n     */\n    getDragItem: () => DragItem;\n    /**\n     * This name appears in the ghost icon when dragging.\n     */\n    dragItemName: string | (() => string) | null;\n    /**\n     * Icon to show when not over a drop zone\n     */\n    getDefaultIconName?: () => DragAndDropIcon;\n    /**\n     * The drag source DOM Data Key, this is useful to detect if the origin grid is the same\n     * as the target grid.\n     */\n    dragSourceDomDataKey?: string;\n    /**\n     * After how many pixels of dragging should the drag operation start. Default is 4.\n     */\n    dragStartPixels?: number;\n    /**\n     * Callback for drag started\n     */\n    onDragStarted?: () => void;\n    /**\n     * Callback for drag stopped\n     */\n    onDragStopped?: () => void;\n    /**\n     * Callback for entering the grid\n     */\n    onGridEnter?: (dragItem: DragItem | null) => void;\n    /**\n     * Callback for exiting the grid\n     */\n    onGridExit?: (dragItem: DragItem | null) => void;\n}\n\nexport interface DropTarget {\n    /** The main container that will get the drop. */\n    getContainer(): HTMLElement;\n    /** If any secondary containers. For example when moving columns in AG Grid, we listen for drops\n     * in the header as well as the body (main rows and pinned rows) of the grid. */\n    getSecondaryContainers?(): HTMLElement[][];\n    /** Icon to show when drag is over */\n    getIconName?(): DragAndDropIcon | null;\n\n    isInterestedIn(type: DragSourceType, el: Element): boolean;\n\n    /**\n     * If `true`, the DragSources will only be allowed to be dragged within the DragTarget that contains them.\n     * This is useful for changing order of items within a container, and not moving items across containers.\n     * @default false\n     */\n    targetContainsSource?: boolean;\n\n    /** Callback for when drag enters */\n    onDragEnter?(params: DraggingEvent): void;\n    /** Callback for when drag leaves */\n    onDragLeave?(params: DraggingEvent): void;\n    /** Callback for when dragging */\n    onDragging?(params: DraggingEvent): void;\n    /** Callback for when drag stops */\n    onDragStop?(params: DraggingEvent): void;\n    external?: boolean;\n}\n\nexport interface DraggingEvent<TData = any, TContext = any> extends AgGridCommon<TData, TContext> {\n    event: MouseEvent;\n    x: number;\n    y: number;\n    vDirection: VerticalDirection | null;\n    hDirection: HorizontalDirection | null;\n    dragSource: DragSource;\n    dragItem: DragItem;\n    fromNudge: boolean;\n    dropZoneTarget: HTMLElement;\n}\n\nconst GHOST_TEMPLATE = /* html */ `<div class=\"ag-dnd-ghost ag-unselectable\">\n<span class=\"ag-dnd-ghost-icon ag-shake-left-to-right\"></span>\n<div class=\"ag-dnd-ghost-label\"></div>\n</div>`;\n\nexport type DragAndDropIcon =\n    | 'pinned'\n    | 'move'\n    | 'left'\n    | 'right'\n    | 'group'\n    | 'aggregate'\n    | 'pivot'\n    | 'notAllowed'\n    | 'hide';\n\nexport class DragAndDropService extends BeanStub implements NamedBean {\n    beanName = 'dragAndDropService' as const;\n\n    private dragService: DragService;\n    private mouseEventService: MouseEventService;\n    private environment: Environment;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.dragService = beans.dragService;\n        this.mouseEventService = beans.mouseEventService;\n        this.environment = beans.environment;\n    }\n\n    private dragSourceAndParamsList: { params: DragListenerParams; dragSource: DragSource }[] = [];\n\n    private dragItem: DragItem | null;\n    private eventLastTime: MouseEvent | null;\n    private dragSource: DragSource;\n    private dragging: boolean;\n\n    private eGhost: HTMLElement | null;\n    private eGhostParent: HTMLElement | ShadowRoot;\n    private eGhostIcon: HTMLElement;\n\n    private dropTargets: DropTarget[] = [];\n    private lastDropTarget: DropTarget | null | undefined;\n\n    private dropIconMap: { [key in DragAndDropIcon]: Element };\n\n    public postConstruct(): void {\n        this.dropIconMap = {\n            pinned: _createIcon('columnMovePin', this.gos, null),\n            hide: _createIcon('columnMoveHide', this.gos, null),\n            move: _createIcon('columnMoveMove', this.gos, null),\n            left: _createIcon('columnMoveLeft', this.gos, null),\n            right: _createIcon('columnMoveRight', this.gos, null),\n            group: _createIcon('columnMoveGroup', this.gos, null),\n            aggregate: _createIcon('columnMoveValue', this.gos, null),\n            pivot: _createIcon('columnMovePivot', this.gos, null),\n            notAllowed: _createIcon('dropNotAllowed', this.gos, null),\n        };\n    }\n\n    public addDragSource(dragSource: DragSource, allowTouch = false): void {\n        const params: DragListenerParams = {\n            eElement: dragSource.eElement,\n            dragStartPixels: dragSource.dragStartPixels,\n            onDragStart: this.onDragStart.bind(this, dragSource),\n            onDragStop: this.onDragStop.bind(this),\n            onDragging: this.onDragging.bind(this),\n            includeTouch: allowTouch,\n        };\n\n        this.dragSourceAndParamsList.push({ params: params, dragSource: dragSource });\n\n        this.dragService.addDragSource(params);\n    }\n\n    public removeDragSource(dragSource: DragSource): void {\n        const sourceAndParams = this.dragSourceAndParamsList.find((item) => item.dragSource === dragSource);\n\n        if (sourceAndParams) {\n            this.dragService.removeDragSource(sourceAndParams.params);\n            _removeFromArray(this.dragSourceAndParamsList, sourceAndParams);\n        }\n    }\n\n    public override destroy(): void {\n        this.dragSourceAndParamsList.forEach((sourceAndParams) =>\n            this.dragService.removeDragSource(sourceAndParams.params)\n        );\n        this.dragSourceAndParamsList.length = 0;\n        this.dropTargets.length = 0;\n        super.destroy();\n    }\n\n    public nudge(): void {\n        if (this.dragging) {\n            this.onDragging(this.eventLastTime!, true);\n        }\n    }\n\n    private onDragStart(dragSource: DragSource, mouseEvent: MouseEvent): void {\n        this.dragging = true;\n        this.dragSource = dragSource;\n        this.eventLastTime = mouseEvent;\n        this.dragItem = this.dragSource.getDragItem();\n\n        if (this.dragSource.onDragStarted) {\n            this.dragSource.onDragStarted();\n        }\n\n        this.createGhost();\n    }\n\n    private onDragStop(mouseEvent: MouseEvent): void {\n        this.eventLastTime = null;\n        this.dragging = false;\n\n        if (this.dragSource.onDragStopped) {\n            this.dragSource.onDragStopped();\n        }\n\n        if (this.lastDropTarget && this.lastDropTarget.onDragStop) {\n            const draggingEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, null, null, false);\n            this.lastDropTarget.onDragStop(draggingEvent);\n        }\n\n        this.lastDropTarget = undefined;\n        this.dragItem = null;\n        this.removeGhost();\n    }\n\n    private onDragging(mouseEvent: MouseEvent, fromNudge: boolean): void {\n        const hDirection = this.getHorizontalDirection(mouseEvent);\n        const vDirection = this.getVerticalDirection(mouseEvent);\n\n        this.eventLastTime = mouseEvent;\n        this.positionGhost(mouseEvent);\n\n        // check if mouseEvent intersects with any of the drop targets\n        const validDropTargets = this.dropTargets.filter((target) => this.isMouseOnDropTarget(mouseEvent, target));\n        const dropTarget: DropTarget | null = this.findCurrentDropTarget(mouseEvent, validDropTargets);\n\n        if (dropTarget !== this.lastDropTarget) {\n            this.leaveLastTargetIfExists(mouseEvent, hDirection, vDirection, fromNudge);\n\n            if (this.lastDropTarget !== null && dropTarget === null) {\n                this.dragSource.onGridExit?.(this.dragItem);\n            }\n            if (this.lastDropTarget === null && dropTarget !== null) {\n                this.dragSource.onGridEnter?.(this.dragItem);\n            }\n            this.enterDragTargetIfExists(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);\n\n            this.lastDropTarget = dropTarget;\n        } else if (dropTarget && dropTarget.onDragging) {\n            const draggingEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);\n            dropTarget.onDragging(draggingEvent);\n        }\n    }\n\n    private getAllContainersFromDropTarget(dropTarget: DropTarget): HTMLElement[][] {\n        const secondaryContainers = dropTarget.getSecondaryContainers ? dropTarget.getSecondaryContainers() : null;\n        const containers: HTMLElement[][] = [[dropTarget.getContainer()]];\n\n        return secondaryContainers ? containers.concat(secondaryContainers) : containers;\n    }\n\n    private allContainersIntersect(mouseEvent: MouseEvent, containers: HTMLElement[]) {\n        for (const container of containers) {\n            const rect = container.getBoundingClientRect();\n\n            // if element is not visible, then width and height are zero\n            if (rect.width === 0 || rect.height === 0) {\n                return false;\n            }\n\n            const horizontalFit = mouseEvent.clientX >= rect.left && mouseEvent.clientX < rect.right;\n            const verticalFit = mouseEvent.clientY >= rect.top && mouseEvent.clientY < rect.bottom;\n\n            if (!horizontalFit || !verticalFit) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // checks if the mouse is on the drop target. it checks eContainer and eSecondaryContainers\n    private isMouseOnDropTarget(mouseEvent: MouseEvent, dropTarget: DropTarget): boolean {\n        const allContainersFromDropTarget = this.getAllContainersFromDropTarget(dropTarget);\n        let mouseOverTarget = false;\n\n        for (const currentContainers of allContainersFromDropTarget) {\n            if (this.allContainersIntersect(mouseEvent, currentContainers)) {\n                mouseOverTarget = true;\n                break;\n            }\n        }\n\n        if (dropTarget.targetContainsSource && !dropTarget.getContainer().contains(this.dragSource.eElement)) {\n            return false;\n        }\n\n        return mouseOverTarget && dropTarget.isInterestedIn(this.dragSource.type, this.dragSource.eElement);\n    }\n\n    private findCurrentDropTarget(mouseEvent: MouseEvent, validDropTargets: DropTarget[]): DropTarget | null {\n        const len = validDropTargets.length;\n\n        if (len === 0) {\n            return null;\n        }\n        if (len === 1) {\n            return validDropTargets[0];\n        }\n\n        const rootNode = this.gos.getRootNode();\n\n        // elementsFromPoint return a list of elements under\n        // the mouseEvent sorted from topMost to bottomMost\n        const elementStack = rootNode.elementsFromPoint(mouseEvent.clientX, mouseEvent.clientY) as HTMLElement[];\n\n        // loop over the sorted elementStack to find which dropTarget comes first\n        for (const el of elementStack) {\n            for (const dropTarget of validDropTargets) {\n                const containers = _flatten(this.getAllContainersFromDropTarget(dropTarget));\n                if (containers.indexOf(el) !== -1) {\n                    return dropTarget;\n                }\n            }\n        }\n\n        // we should never hit this point of the code because only\n        // valid dropTargets should be provided to this method.\n        return null;\n    }\n\n    private enterDragTargetIfExists(\n        dropTarget: DropTarget | null,\n        mouseEvent: MouseEvent,\n        hDirection: HorizontalDirection | null,\n        vDirection: VerticalDirection | null,\n        fromNudge: boolean\n    ): void {\n        if (!dropTarget) {\n            return;\n        }\n\n        if (dropTarget.onDragEnter) {\n            const dragEnterEvent = this.createDropTargetEvent(\n                dropTarget,\n                mouseEvent,\n                hDirection,\n                vDirection,\n                fromNudge\n            );\n\n            dropTarget.onDragEnter(dragEnterEvent);\n        }\n\n        this.setGhostIcon(dropTarget.getIconName ? dropTarget.getIconName() : null);\n    }\n\n    private leaveLastTargetIfExists(\n        mouseEvent: MouseEvent,\n        hDirection: HorizontalDirection | null,\n        vDirection: VerticalDirection | null,\n        fromNudge: boolean\n    ): void {\n        if (!this.lastDropTarget) {\n            return;\n        }\n\n        if (this.lastDropTarget.onDragLeave) {\n            const dragLeaveEvent = this.createDropTargetEvent(\n                this.lastDropTarget,\n                mouseEvent,\n                hDirection,\n                vDirection,\n                fromNudge\n            );\n\n            this.lastDropTarget.onDragLeave(dragLeaveEvent);\n        }\n\n        this.setGhostIcon(null);\n    }\n\n    public addDropTarget(dropTarget: DropTarget) {\n        this.dropTargets.push(dropTarget);\n    }\n\n    public removeDropTarget(dropTarget: DropTarget) {\n        this.dropTargets = this.dropTargets.filter((target) => target.getContainer() !== dropTarget.getContainer());\n    }\n\n    public hasExternalDropZones(): boolean {\n        return this.dropTargets.some((zones) => zones.external);\n    }\n\n    public findExternalZone(params: RowDropZoneParams): DropTarget | null {\n        const externalTargets = this.dropTargets.filter((target) => target.external);\n\n        return externalTargets.find((zone) => zone.getContainer() === params.getContainer()) || null;\n    }\n\n    public getHorizontalDirection(event: MouseEvent): HorizontalDirection | null {\n        const clientX = this.eventLastTime && this.eventLastTime.clientX;\n        const eClientX = event.clientX;\n\n        if (clientX === eClientX) {\n            return null;\n        }\n\n        return clientX! > eClientX ? HorizontalDirection.Left : HorizontalDirection.Right;\n    }\n\n    public getVerticalDirection(event: MouseEvent): VerticalDirection | null {\n        const clientY = this.eventLastTime && this.eventLastTime.clientY;\n        const eClientY = event.clientY;\n\n        if (clientY === eClientY) {\n            return null;\n        }\n\n        return clientY! > eClientY ? VerticalDirection.Up : VerticalDirection.Down;\n    }\n\n    public createDropTargetEvent(\n        dropTarget: DropTarget,\n        event: MouseEvent,\n        hDirection: HorizontalDirection | null,\n        vDirection: VerticalDirection | null,\n        fromNudge: boolean\n    ): DraggingEvent {\n        // localise x and y to the target\n        const dropZoneTarget = dropTarget.getContainer();\n        const rect = dropZoneTarget.getBoundingClientRect();\n        const { dragItem, dragSource } = this;\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n\n        return this.gos.addGridCommonParams({\n            event,\n            x,\n            y,\n            vDirection,\n            hDirection,\n            dragSource,\n            fromNudge,\n            dragItem: dragItem as DragItem,\n            dropZoneTarget,\n        });\n    }\n\n    private positionGhost(event: MouseEvent): void {\n        const ghost = this.eGhost;\n\n        if (!ghost) {\n            return;\n        }\n\n        const ghostRect = ghost.getBoundingClientRect();\n        const ghostHeight = ghostRect.height;\n\n        const browserWidth = _getBodyWidth() - 2; // 2px for 1px borderLeft and 1px borderRight\n        const browserHeight = _getBodyHeight() - 2; // 2px for 1px borderTop and 1px borderBottom\n\n        const offsetParentSize = _getElementRectWithOffset(ghost.offsetParent as HTMLElement);\n\n        const { clientY, clientX } = event;\n\n        let top = clientY - offsetParentSize.top - ghostHeight / 2;\n        let left = clientX - offsetParentSize.left - 10;\n\n        const eDocument = this.gos.getDocument();\n        const win = eDocument.defaultView || window;\n        const windowScrollY = win.pageYOffset || eDocument.documentElement.scrollTop;\n        const windowScrollX = win.pageXOffset || eDocument.documentElement.scrollLeft;\n\n        // check ghost is not positioned outside of the browser\n        if (browserWidth > 0 && left + ghost.clientWidth > browserWidth + windowScrollX) {\n            left = browserWidth + windowScrollX - ghost.clientWidth;\n        }\n\n        if (left < 0) {\n            left = 0;\n        }\n\n        if (browserHeight > 0 && top + ghost.clientHeight > browserHeight + windowScrollY) {\n            top = browserHeight + windowScrollY - ghost.clientHeight;\n        }\n\n        if (top < 0) {\n            top = 0;\n        }\n\n        ghost.style.left = `${left}px`;\n        ghost.style.top = `${top}px`;\n    }\n\n    private removeGhost(): void {\n        if (this.eGhost && this.eGhostParent) {\n            this.eGhostParent.removeChild(this.eGhost);\n        }\n\n        this.eGhost = null;\n    }\n\n    private createGhost(): void {\n        this.eGhost = _loadTemplate(GHOST_TEMPLATE);\n        this.mouseEventService.stampTopLevelGridCompWithGridInstance(this.eGhost);\n\n        this.environment.applyThemeClasses(this.eGhost);\n\n        this.eGhostIcon = this.eGhost.querySelector('.ag-dnd-ghost-icon') as HTMLElement;\n        this.setGhostIcon(null);\n\n        const eText = this.eGhost.querySelector('.ag-dnd-ghost-label') as HTMLElement;\n        let dragItemName = this.dragSource.dragItemName;\n\n        if (_isFunction(dragItemName)) {\n            dragItemName = (dragItemName as () => string)();\n        }\n\n        eText.innerHTML = _escapeString(dragItemName as string) || '';\n\n        this.eGhost.style.height = '25px';\n        this.eGhost.style.top = '20px';\n        this.eGhost.style.left = '20px';\n\n        const eDocument = this.gos.getDocument();\n        let rootNode: Document | ShadowRoot | HTMLElement | null = null;\n        let targetEl: HTMLElement | ShadowRoot | null = null;\n\n        try {\n            rootNode = eDocument.fullscreenElement as HTMLElement;\n        } catch (e) {\n            // some environments like SalesForce will throw errors\n            // simply by trying to read the fullscreenElement property\n        } finally {\n            if (!rootNode) {\n                rootNode = this.gos.getRootNode();\n            }\n            const body = rootNode.querySelector('body');\n            if (body) {\n                targetEl = body;\n            } else if (rootNode instanceof ShadowRoot) {\n                targetEl = rootNode;\n            } else if (rootNode instanceof Document) {\n                targetEl = rootNode?.documentElement;\n            } else {\n                targetEl = rootNode;\n            }\n        }\n\n        this.eGhostParent = targetEl;\n\n        if (!this.eGhostParent) {\n            _warnOnce('Could not find document body, it is needed for dragging columns');\n        } else {\n            this.eGhostParent.appendChild(this.eGhost);\n        }\n    }\n\n    public setGhostIcon(iconName: DragAndDropIcon | null, shake = false): void {\n        _clearElement(this.eGhostIcon);\n\n        let eIcon: Element | null = null;\n\n        if (!iconName) {\n            iconName = this.dragSource.getDefaultIconName ? this.dragSource.getDefaultIconName() : 'notAllowed';\n        }\n        eIcon = this.dropIconMap[iconName];\n\n        this.eGhostIcon.classList.toggle('ag-shake-left-to-right', shake);\n\n        if (eIcon === this.dropIconMap['hide'] && this.gos.get('suppressDragLeaveHidesColumns')) {\n            return;\n        }\n        if (eIcon) {\n            this.eGhostIcon.appendChild(eIcon);\n        }\n    }\n}\n", "export class AutoScrollService {\n    private tickingInterval: number | null = null;\n\n    private scrollHorizontally: boolean;\n    private scrollVertically: boolean;\n\n    private tickLeft: boolean;\n    private tickRight: boolean;\n    private tickUp: boolean;\n    private tickDown: boolean;\n\n    private scrollContainer: HTMLElement;\n    private scrollByTick: number;\n\n    private getVerticalPosition: () => number;\n    private setVerticalPosition: (position: number) => void;\n\n    private getHorizontalPosition: () => number;\n    private setHorizontalPosition: (position: number) => void;\n\n    private shouldSkipVerticalScroll: () => boolean;\n    private shouldSkipHorizontalScroll: () => boolean;\n\n    private onScrollCallback: (() => void) | null = null;\n\n    private tickCount: number;\n\n    constructor(params: {\n        scrollContainer: HTMLElement;\n        scrollAxis: 'x' | 'y' | 'xy';\n        scrollByTick?: number;\n        getVerticalPosition?: () => number;\n        setVerticalPosition?: (position: number) => void;\n        getHorizontalPosition?: () => number;\n        setHorizontalPosition?: (position: number) => void;\n        shouldSkipVerticalScroll?: () => boolean;\n        shouldSkipHorizontalScroll?: () => boolean;\n        onScrollCallback?: () => void;\n    }) {\n        this.scrollContainer = params.scrollContainer;\n        this.scrollHorizontally = params.scrollAxis.indexOf('x') !== -1;\n        this.scrollVertically = params.scrollAxis.indexOf('y') !== -1;\n\n        this.scrollByTick = params.scrollByTick != null ? params.scrollByTick : 20;\n\n        if (params.onScrollCallback) {\n            this.onScrollCallback = params.onScrollCallback;\n        }\n\n        if (this.scrollVertically) {\n            this.getVerticalPosition = params.getVerticalPosition!;\n            this.setVerticalPosition = params.setVerticalPosition!;\n        }\n\n        if (this.scrollHorizontally) {\n            this.getHorizontalPosition = params.getHorizontalPosition!;\n            this.setHorizontalPosition = params.setHorizontalPosition!;\n        }\n\n        this.shouldSkipVerticalScroll = params.shouldSkipVerticalScroll || (() => false);\n        this.shouldSkipHorizontalScroll = params.shouldSkipHorizontalScroll || (() => false);\n    }\n\n    public check(mouseEvent: MouseEvent, forceSkipVerticalScroll: boolean = false): void {\n        const skipVerticalScroll = forceSkipVerticalScroll || this.shouldSkipVerticalScroll();\n\n        if (skipVerticalScroll && this.shouldSkipHorizontalScroll()) {\n            return;\n        }\n\n        const rect = this.scrollContainer.getBoundingClientRect();\n        const scrollTick = this.scrollByTick;\n\n        this.tickLeft = mouseEvent.clientX < rect.left + scrollTick;\n        this.tickRight = mouseEvent.clientX > rect.right - scrollTick;\n        this.tickUp = mouseEvent.clientY < rect.top + scrollTick && !skipVerticalScroll;\n        this.tickDown = mouseEvent.clientY > rect.bottom - scrollTick && !skipVerticalScroll;\n\n        if (this.tickLeft || this.tickRight || this.tickUp || this.tickDown) {\n            this.ensureTickingStarted();\n        } else {\n            this.ensureCleared();\n        }\n    }\n\n    private ensureTickingStarted(): void {\n        if (this.tickingInterval === null) {\n            this.tickingInterval = window.setInterval(this.doTick.bind(this), 100);\n            this.tickCount = 0;\n        }\n    }\n\n    private doTick(): void {\n        this.tickCount++;\n\n        const tickAmount = this.tickCount > 20 ? 200 : this.tickCount > 10 ? 80 : 40;\n\n        if (this.scrollVertically) {\n            const vScrollPosition = this.getVerticalPosition();\n            if (this.tickUp) {\n                this.setVerticalPosition(vScrollPosition - tickAmount);\n            }\n\n            if (this.tickDown) {\n                this.setVerticalPosition(vScrollPosition + tickAmount);\n            }\n        }\n\n        if (this.scrollHorizontally) {\n            const hScrollPosition = this.getHorizontalPosition();\n            if (this.tickLeft) {\n                this.setHorizontalPosition(hScrollPosition - tickAmount);\n            }\n\n            if (this.tickRight) {\n                this.setHorizontalPosition(hScrollPosition + tickAmount);\n            }\n        }\n\n        if (this.onScrollCallback) {\n            this.onScrollCallback();\n        }\n    }\n\n    public ensureCleared(): void {\n        if (this.tickingInterval) {\n            window.clearInterval(this.tickingInterval);\n            this.tickingInterval = null;\n        }\n    }\n}\n", "import type { AgEvent, SelectionEventSourceType } from '../events';\nimport type { Column } from '../interfaces/iColumn';\nimport type { BuildEventTypeMap } from './iEventEmitter';\n\nexport type RowNodeEventType =\n    | 'rowSelected'\n    | 'selectableChanged'\n    | 'displayedChanged'\n    | 'dataChanged'\n    | 'cellChanged'\n    | 'masterChanged'\n    | 'heightChanged'\n    | 'topChanged'\n    | 'groupChanged'\n    | 'allChildrenCountChanged'\n    | 'firstChildChanged'\n    | 'lastChildChanged'\n    | 'childIndexChanged'\n    | 'rowIndexChanged'\n    | 'expandedChanged'\n    | 'hasChildrenChanged'\n    | 'uiLevelChanged'\n    | 'rowHighlightChanged'\n    | 'mouseEnter'\n    | 'mouseLeave'\n    | 'draggingChanged';\n\nexport type RowNodeEventTypeMap<TData = any> = BuildEventTypeMap<\n    RowNodeEventType,\n    {\n        rowSelected: RowSelectedEvent<TData>;\n        selectableChanged: SelectableChangedEvent<TData>;\n        displayedChanged: DisplayedChangedEvent<TData>;\n        dataChanged: DataChangedEvent<TData>;\n        cellChanged: CellChangedEvent<TData>;\n        masterChanged: MasterChangedEvent<TData>;\n        heightChanged: HeightChangedEvent<TData>;\n        topChanged: TopChangedEvent<TData>;\n        groupChanged: GroupChangedEvent<TData>;\n        allChildrenCountChanged: AllChildrenCountChangedEvent<TData>;\n        firstChildChanged: FirstChildChangedEvent<TData>;\n        lastChildChanged: LastChildChangedEvent<TData>;\n        childIndexChanged: ChildIndexChangedEvent<TData>;\n        rowIndexChanged: RowIndexChangedEvent<TData>;\n        expandedChanged: ExpandedChangedEvent<TData>;\n        hasChildrenChanged: HasChildrenChangedEvent<TData>;\n        uiLevelChanged: UiLevelChangedEvent<TData>;\n        rowHighlightChanged: RowHighlightChangedEvent<TData>;\n        mouseEnter: MouseEnterEvent<TData>;\n        mouseLeave: MouseLeaveEvent<TData>;\n        draggingChanged: DraggingChangedEvent<TData>;\n    }\n>;\n\nexport type AgRowNodeEventListener<TEventType extends keyof RowNodeEventTypeMap<TData>, TData = any> = (\n    params: RowNodeEventTypeMap<TData>[TEventType]\n) => void;\n\nexport interface SetSelectedParams {\n    // true or false, whatever you want to set selection to\n    newValue: boolean;\n    // whether to remove other selections after this selection is done\n    clearSelection?: boolean;\n    // true when action is NOT on this node, ie user clicked a group and this is the child of a group\n    suppressFinishActions?: boolean;\n    // gets used when user shift-selects a range\n    rangeSelect?: boolean;\n    // used in group selection, if true, filtered out children will not be selected\n    groupSelectsFiltered?: boolean;\n    // event source, if from an event\n    source: SelectionEventSourceType;\n}\n\nexport interface RowNodeEvent<T extends RowNodeEventType, TData = any> extends AgEvent<T> {\n    node: IRowNode<TData>;\n}\n\nexport interface RowSelectedEvent<TData = any> extends RowNodeEvent<'rowSelected', TData> {}\nexport interface MouseEnterEvent<TData = any> extends RowNodeEvent<'mouseEnter', TData> {}\nexport interface MouseLeaveEvent<TData = any> extends RowNodeEvent<'mouseLeave', TData> {}\nexport interface HeightChangedEvent<TData = any> extends RowNodeEvent<'heightChanged', TData> {}\nexport interface RowIndexChangedEvent<TData = any> extends RowNodeEvent<'rowIndexChanged', TData> {}\nexport interface TopChangedEvent<TData = any> extends RowNodeEvent<'topChanged', TData> {}\nexport interface ExpandedChangedEvent<TData = any> extends RowNodeEvent<'expandedChanged', TData> {}\nexport interface FirstChildChangedEvent<TData = any> extends RowNodeEvent<'firstChildChanged', TData> {}\nexport interface LastChildChangedEvent<TData = any> extends RowNodeEvent<'lastChildChanged', TData> {}\nexport interface ChildIndexChangedEvent<TData = any> extends RowNodeEvent<'childIndexChanged', TData> {}\nexport interface AllChildrenCountChangedEvent<TData = any> extends RowNodeEvent<'allChildrenCountChanged', TData> {}\nexport interface UiLevelChangedEvent<TData = any> extends RowNodeEvent<'uiLevelChanged', TData> {}\nexport interface DataChangedEvent<TData = any> extends RowNodeEvent<'dataChanged', TData> {\n    oldData: TData | undefined;\n    newData: TData | undefined;\n    update: boolean;\n}\nexport interface CellChangedEvent<TData = any> extends RowNodeEvent<'cellChanged', TData> {\n    column: Column;\n    newValue: TData | undefined;\n    oldValue: TData | undefined;\n}\n\nexport interface SelectableChangedEvent<TData = any> extends RowNodeEvent<'selectableChanged', TData> {}\nexport interface DisplayedChangedEvent<TData = any> extends RowNodeEvent<'displayedChanged', TData> {}\nexport interface MasterChangedEvent<TData = any> extends RowNodeEvent<'masterChanged', TData> {}\nexport interface GroupChangedEvent<TData = any> extends RowNodeEvent<'groupChanged', TData> {}\nexport interface HasChildrenChangedEvent<TData = any> extends RowNodeEvent<'hasChildrenChanged', TData> {}\nexport interface RowHighlightChangedEvent<TData = any> extends RowNodeEvent<'rowHighlightChanged', TData> {}\nexport interface DraggingChangedEvent<TData = any> extends RowNodeEvent<'draggingChanged', TData> {}\n\nexport enum RowHighlightPosition {\n    Above,\n    Below,\n}\n\nexport type RowPinnedType = 'top' | 'bottom' | null | undefined;\n\nexport interface VerticalScrollPosition {\n    top: number;\n    bottom: number;\n}\n\ninterface BaseRowNode<TData = any> {\n    /** Unique ID for the node. Either provided by the application, or generated by the grid if not. */\n    id: string | undefined;\n    /**\n     * The data as provided by the application.\n     * Can be `undefined` when using row grouping or during grid initialisation.\n     */\n    data: TData | undefined;\n\n    /**\n     * This will be `true` if it has a rowIndex assigned, otherwise `false`.\n     */\n    displayed: boolean;\n    /** Either `'top'` or `'bottom'` if row pinned, otherwise `undefined` or `null`. */\n    rowPinned: RowPinnedType;\n    /** Is this row selectable. */\n    selectable: boolean;\n    /** The height, in pixels, of this row. */\n    rowHeight: number | null | undefined;\n    /** The row top position in pixels. */\n    rowTop: number | null;\n\n    /** `true` if this node is a group node (i.e. it has children) */\n    group: boolean | undefined;\n\n    /** `true` if this is the first child in this group. Changes when data is sorted. */\n    firstChild: boolean;\n    /** `true` if this is the last child in this group. Changes when data is sorted. */\n    lastChild: boolean;\n    /** Index of this row with respect to its parent when grouping. Changes when data is sorted. */\n    childIndex: number;\n\n    /** How many levels this node is from the top when grouping. */\n    level: number;\n    /** How many levels this node is from the top when grouping in the UI (only different to `parent` when `groupRemoveSingleChildren=true`).*/\n    uiLevel: number;\n    /** The parent node to this node, or empty if top level. */\n    parent: IRowNode<TData> | null;\n\n    /** Used by server-side row model. `true` if this row node is a stub. A stub is a placeholder row with loading icon while waiting from row to be loaded. */\n    stub: boolean | undefined;\n    /** Used by server side row model, `true` if this row node failed a load. */\n    failedLoad: boolean | undefined;\n\n    /** The current row index. If the row is filtered out or in a collapsed group, this value will be `null`. */\n    rowIndex: number | null;\n\n    /** If using quick filter, stores a string representation of the row for searching against. */\n    quickFilterAggregateText: string | null;\n\n    /** `true` if this row is a master row, part of master / detail (ie row can be expanded to show detail). */\n    master: boolean;\n    /** `true` if this row is a detail row, part of master / detail (ie child row of an expanded master row). */\n    detail: boolean | undefined;\n}\n\ninterface GroupRowNode<TData = any> {\n    /** The field we are grouping on from our row data. */\n    field: string | null;\n    /** The key value for this group. */\n    key: string | null;\n\n    /** If using row grouping, contains the group values for this group. */\n    groupData: { [key: string]: any | null } | null;\n    /** If using row grouping and aggregation, contains the aggregation data. */\n    aggData: any;\n\n    /** The row group column used for this group. */\n    rowGroupColumn: Column | null;\n    /**\n     * If doing in-memory (client-side) grouping, this is the index of the group column this cell is for.\n     * This will always be the same as the level, unless we are collapsing groups, i.e. `groupRemoveSingleChildren=true`.\n     */\n    rowGroupIndex: number | null;\n    /** `true` if group is expanded, otherwise `false`. */\n    expanded: boolean;\n\n    /** `true` if this node is a group and the group is the bottom level in the tree. */\n    leafGroup: boolean | undefined;\n    /** All lowest level nodes beneath this node, no groups. */\n    allLeafChildren: IRowNode<TData>[] | null;\n    /** Number of children and grand children. */\n    allChildrenCount: number | null;\n    /** Children of this group. If multi levels of grouping, shows only immediate children. */\n    childrenAfterGroup: IRowNode<TData>[] | null;\n    /** Sorted children of this group. */\n    childrenAfterSort: IRowNode<TData>[] | null;\n    /** Filtered children of this group. */\n    childrenAfterFilter: IRowNode<TData>[] | null;\n\n    /** `true` if row is a footer. Footers have `group = true` and `footer = true`. */\n    footer: boolean | undefined;\n    /** If using footers, reference to the footer node for this group. */\n    sibling: IRowNode<TData>;\n}\n\nexport interface IRowNode<TData = any> extends BaseRowNode<TData>, GroupRowNode<TData> {\n    /**\n     * Select (or deselect) the node.\n     * @param newValue -`true` for selection, `false` for deselection.\n     * @param clearSelection - If selecting, then passing `true` will select the node exclusively (i.e. NOT do multi select). If doing deselection, `clearSelection` has no impact. Default: `false`\n     * @param source - Source property that will appear in the `selectionChanged` event. Default: `'api'`\n     */\n    setSelected(newValue: boolean, clearSelection?: boolean, source?: SelectionEventSourceType): void;\n\n    /** Returns:\n     * - `true` if node is selected.\n     * - `false` if the node isn't selected.\n     * - `undefined` if it's partially selected (group where not all children are selected).\n     */\n    isSelected(): boolean | undefined;\n\n    /**\n     * Returns:\n     * - `true` if node is either pinned to the `top` or `bottom`.\n     * - `false` if the node isn't pinned.\n     */\n    isRowPinned(): boolean;\n\n    /** Returns:\n     * - `true` if the node can be expanded, i.e it is a group or master row.\n     * - `false` if the node cannot be expanded.\n     */\n    isExpandable(): boolean;\n    /**\n     * Set the expanded state of this rowNode.\n     * @param expanded - `true` to expand, `false` to collapse.\n     * @param sourceEvent - Optional event that will be passed to the `rowGroupOpened` event.\n     * @param forceSync - By default rows are expanded asynchronously for best performance. Set to `true` if you need to interact with the expanded row immediately after this function.\n     */\n    setExpanded(expanded: boolean, sourceEvent?: MouseEvent | KeyboardEvent, forceSync?: boolean): void;\n\n    /**\n     * Returns:\n     * - `true` if the node is a full width cell.\n     * - `false` if the node is not a full width cell.\n     */\n    isFullWidthCell(): boolean;\n\n    /**\n     * Returns:\n     * - `true` if the node is currently hovered.\n     * - `false` if the node is not hovered.\n     */\n    isHovered(): boolean;\n\n    /** Add an event listener. */\n    addEventListener<T extends RowNodeEventType>(eventType: T, userListener: AgRowNodeEventListener<T>): void;\n    /** Remove event listener. */\n    removeEventListener<T extends RowNodeEventType>(eventType: T, userListener: AgRowNodeEventListener<T>): void;\n\n    /**\n     * The first time `quickFilter` runs, the grid creates a one-off string representation of the row.\n     * This string is then used for the quick filter instead of hitting each column separately.\n     * When you edit, using grid editing, this string gets cleared down.\n     * However if you edit without using grid editing, you will need to clear this string down for the row to be updated with the new values.\n     * Otherwise new values will not work with the `quickFilter`.\n     */\n    resetQuickFilterAggregateText(): void;\n\n    /** Perform a depth-first search of this node and its children. */\n    depthFirstSearch(callback: (rowNode: IRowNode<TData>) => void): void;\n\n    /**\n     * Sets the row height.\n     * Call if you want to change the height initially assigned to the row.\n     * After calling, you must call `api.onRowHeightChanged()` so the grid knows it needs to work out the placement of the rows.\n     * @param rowHeight - new height of the row\n     * @param estimated - is this an estimated height. Default: `false`\n     */\n    setRowHeight(rowHeight: number | undefined | null, estimated?: boolean): void;\n\n    /**\n     * Replaces the data on the `rowNode`. When this method is called, the grid will refresh the entire rendered row if it is displayed.\n     */\n    setData(data: TData): void;\n\n    /**\n     * Updates the data on the `rowNode`. When this method is called, the grid will refresh the entire rendered row if it is displayed.\n     */\n    updateData(data: TData): void;\n\n    /**\n     * Replaces the value on the `rowNode` for the specified column. When complete,\n     * the grid will refresh the rendered cell on the required row only.\n     * **Note**: This method only fires `onCellEditRequest` when the Grid is in **Read Only** mode.\n     *\n     * @param colKey The column where the value should be updated\n     * @param newValue The new value\n     * @param eventSource The source of the event\n     * @returns `true` if the value was changed, otherwise `false`.\n     */\n    setDataValue(colKey: string | Column, newValue: any, eventSource?: string): boolean;\n\n    /**\n     * Returns the route of the row node. If the Row Node is a group, it returns the route to that Row Node.\n     * If the Row Node is not a group, it returns `undefined`.\n     */\n    getRoute(): string[] | undefined;\n}\n", "import { AutoScrollService } from '../autoScrollService';\nimport type { FuncColsService } from '../columns/funcColsService';\nimport { VerticalDirection } from '../constants/direction';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { CtrlsService } from '../ctrlsService';\nimport type { DragAndDropIcon, DragAndDropService, DraggingEvent, DropTarget } from '../dragAndDrop/dragAndDropService';\nimport { DragSourceType } from '../dragAndDrop/dragAndDropService';\nimport type { RowNode } from '../entities/rowNode';\nimport type { AgEventType } from '../eventTypes';\nimport type { RowDragEndEvent, RowDragEnterEvent, RowDragEvent, RowDragLeaveEvent, RowDragMoveEvent } from '../events';\nimport type { FilterManager } from '../filter/filterManager';\nimport type { FocusService } from '../focusService';\nimport type { IRangeService } from '../interfaces/IRangeService';\nimport type { IClientSideRowModel } from '../interfaces/iClientSideRowModel';\nimport type { IRowModel } from '../interfaces/iRowModel';\nimport { RowHighlightPosition } from '../interfaces/iRowNode';\nimport type { ISelectionService } from '../interfaces/iSelectionService';\nimport type { PageBoundsService } from '../pagination/pageBoundsService';\nimport type { SortController } from '../sortController';\nimport { _last } from '../utils/array';\nimport { _warnOnce } from '../utils/function';\nimport type { MouseEventService } from './mouseEventService';\n\nexport interface RowDropZoneEvents {\n    /** Callback function that will be executed when the rowDrag enters the target. */\n    onDragEnter?: (params: RowDragEnterEvent) => void;\n    /** Callback function that will be executed when the rowDrag leaves the target */\n    onDragLeave?: (params: RowDragLeaveEvent) => void;\n    /**\n     * Callback function that will be executed when the rowDrag is dragged inside the target.\n     * Note: this gets called multiple times.\n     */\n    onDragging?: (params: RowDragMoveEvent) => void;\n    /** Callback function that will be executed when the rowDrag drops rows within the target. */\n    onDragStop?: (params: RowDragEndEvent) => void;\n}\n\nexport interface RowDropZoneParams extends RowDropZoneEvents {\n    /** A callback method that returns the DropZone HTMLElement. */\n    getContainer: () => HTMLElement;\n}\n\nexport class RowDragFeature extends BeanStub implements DropTarget {\n    private dragAndDropService: DragAndDropService;\n    private rowModel: IRowModel;\n    private pageBoundsService: PageBoundsService;\n    private focusService: FocusService;\n    private sortController: SortController;\n    private filterManager?: FilterManager;\n    private selectionService: ISelectionService;\n    private mouseEventService: MouseEventService;\n    private ctrlsService: CtrlsService;\n    private funcColsService: FuncColsService;\n    private rangeService?: IRangeService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.dragAndDropService = beans.dragAndDropService;\n        this.rowModel = beans.rowModel;\n        this.pageBoundsService = beans.pageBoundsService;\n        this.focusService = beans.focusService;\n        this.sortController = beans.sortController;\n        this.filterManager = beans.filterManager;\n        this.selectionService = beans.selectionService;\n        this.mouseEventService = beans.mouseEventService;\n        this.ctrlsService = beans.ctrlsService;\n        this.funcColsService = beans.funcColsService;\n        this.rangeService = beans.rangeService;\n    }\n\n    private clientSideRowModel: IClientSideRowModel;\n    private eContainer: HTMLElement;\n    private lastDraggingEvent: DraggingEvent;\n    private autoScrollService: AutoScrollService;\n\n    constructor(eContainer: HTMLElement) {\n        super();\n        this.eContainer = eContainer;\n    }\n\n    public postConstruct(): void {\n        if (this.gos.isRowModelType('clientSide')) {\n            this.clientSideRowModel = this.rowModel as IClientSideRowModel;\n        }\n\n        this.ctrlsService.whenReady((p) => {\n            const gridBodyCon = p.gridBodyCtrl;\n            this.autoScrollService = new AutoScrollService({\n                scrollContainer: gridBodyCon.getBodyViewportElement(),\n                scrollAxis: 'y',\n                getVerticalPosition: () => gridBodyCon.getScrollFeature().getVScrollPosition().top,\n                setVerticalPosition: (position) => gridBodyCon.getScrollFeature().setVerticalScrollPosition(position),\n                onScrollCallback: () => {\n                    this.onDragging(this.lastDraggingEvent);\n                },\n            });\n        });\n    }\n\n    public getContainer(): HTMLElement {\n        return this.eContainer;\n    }\n\n    public isInterestedIn(type: DragSourceType): boolean {\n        return type === DragSourceType.RowDrag;\n    }\n\n    public getIconName(): DragAndDropIcon {\n        const managedDrag = this.gos.get('rowDragManaged');\n\n        if (managedDrag && this.shouldPreventRowMove()) {\n            return 'notAllowed';\n        }\n\n        return 'move';\n    }\n\n    public shouldPreventRowMove(): boolean {\n        const rowGroupCols = this.funcColsService.getRowGroupColumns();\n        if (rowGroupCols.length) {\n            return true;\n        }\n        const isFilterPresent = this.filterManager?.isAnyFilterPresent();\n        if (isFilterPresent) {\n            return true;\n        }\n        const isSortActive = this.sortController.isSortActive();\n        if (isSortActive) {\n            return true;\n        }\n        return false;\n    }\n\n    private getRowNodes(draggingEvent: DraggingEvent): RowNode[] {\n        if (!this.isFromThisGrid(draggingEvent)) {\n            return (draggingEvent.dragItem.rowNodes || []) as RowNode[];\n        }\n\n        const currentNode = draggingEvent.dragItem.rowNode! as RowNode;\n        const isRowDragMultiRow = this.gos.get('rowDragMultiRow');\n        if (isRowDragMultiRow) {\n            const selectedNodes = [...this.selectionService.getSelectedNodes()].sort((a, b) => {\n                if (a.rowIndex == null || b.rowIndex == null) {\n                    return 0;\n                }\n\n                return this.getRowIndexNumber(a) - this.getRowIndexNumber(b);\n            });\n            if (selectedNodes.indexOf(currentNode) !== -1) {\n                return selectedNodes;\n            }\n        }\n\n        return [currentNode];\n    }\n\n    public onDragEnter(draggingEvent: DraggingEvent): void {\n        // builds a lits of all rows being dragged before firing events\n        draggingEvent.dragItem.rowNodes = this.getRowNodes(draggingEvent);\n\n        // when entering, we fire the enter event, then in onEnterOrDragging,\n        // we also fire the move event. so we get both events when entering.\n        this.dispatchGridEvent('rowDragEnter', draggingEvent);\n\n        this.getRowNodes(draggingEvent).forEach((rowNode) => {\n            rowNode.setDragging(true);\n        });\n\n        this.onEnterOrDragging(draggingEvent);\n    }\n\n    public onDragging(draggingEvent: DraggingEvent): void {\n        this.onEnterOrDragging(draggingEvent);\n    }\n\n    private isFromThisGrid(draggingEvent: DraggingEvent) {\n        const { dragSourceDomDataKey } = draggingEvent.dragSource;\n\n        return dragSourceDomDataKey === this.gos.getDomDataKey();\n    }\n\n    private isDropZoneWithinThisGrid(draggingEvent: DraggingEvent): boolean {\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const gridGui = gridBodyCon.getGui();\n        const { dropZoneTarget } = draggingEvent;\n\n        return !gridGui.contains(dropZoneTarget);\n    }\n\n    private onEnterOrDragging(draggingEvent: DraggingEvent): void {\n        // this event is fired for enter and move\n        this.dispatchGridEvent('rowDragMove', draggingEvent);\n\n        this.lastDraggingEvent = draggingEvent;\n\n        const pixel = this.mouseEventService.getNormalisedPosition(draggingEvent).y;\n        const managedDrag = this.gos.get('rowDragManaged');\n\n        if (managedDrag) {\n            this.doManagedDrag(draggingEvent, pixel);\n        }\n\n        this.autoScrollService.check(draggingEvent.event);\n    }\n\n    private doManagedDrag(draggingEvent: DraggingEvent, pixel: number): void {\n        const isFromThisGrid = this.isFromThisGrid(draggingEvent);\n        const managedDrag = this.gos.get('rowDragManaged');\n        const rowNodes = draggingEvent.dragItem.rowNodes! as RowNode[];\n\n        if (managedDrag && this.shouldPreventRowMove()) {\n            return;\n        }\n\n        if (this.gos.get('suppressMoveWhenRowDragging') || !isFromThisGrid) {\n            if (!this.isDropZoneWithinThisGrid(draggingEvent)) {\n                this.clientSideRowModel.highlightRowAtPixel(rowNodes[0], pixel);\n            }\n        } else {\n            this.moveRows(rowNodes, pixel);\n        }\n    }\n\n    private getRowIndexNumber(rowNode: RowNode): number {\n        const rowIndexStr = rowNode.getRowIndexString()!;\n\n        return parseInt(_last(rowIndexStr.split('-')), 10);\n    }\n\n    private moveRowAndClearHighlight(draggingEvent: DraggingEvent): void {\n        const lastHighlightedRowNode = this.clientSideRowModel.getLastHighlightedRowNode();\n        const isBelow = lastHighlightedRowNode && lastHighlightedRowNode.highlighted === RowHighlightPosition.Below;\n        const pixel = this.mouseEventService.getNormalisedPosition(draggingEvent).y;\n        const rowNodes = draggingEvent.dragItem.rowNodes as RowNode[];\n\n        let increment = isBelow ? 1 : 0;\n\n        if (this.isFromThisGrid(draggingEvent)) {\n            rowNodes!.forEach((rowNode) => {\n                if (rowNode.rowTop! < pixel) {\n                    increment -= 1;\n                }\n            });\n            this.moveRows(rowNodes!, pixel, increment);\n        } else {\n            const getRowIdFunc = this.gos.getRowIdCallback();\n\n            let addIndex = this.clientSideRowModel.getRowIndexAtPixel(pixel) + 1;\n\n            if (this.clientSideRowModel.getHighlightPosition(pixel) === RowHighlightPosition.Above) {\n                addIndex--;\n            }\n\n            this.clientSideRowModel.updateRowData({\n                add: rowNodes!\n                    .map((node) => node.data)\n                    .filter(\n                        (data) => !this.clientSideRowModel.getRowNode(getRowIdFunc?.({ data, level: 0 }) ?? data.id)\n                    ),\n                addIndex,\n            });\n        }\n\n        this.clearRowHighlight();\n    }\n\n    private clearRowHighlight(): void {\n        this.clientSideRowModel.highlightRowAtPixel(null);\n    }\n\n    private moveRows(rowNodes: RowNode[], pixel: number, increment: number = 0): void {\n        const rowWasMoved = this.clientSideRowModel.ensureRowsAtPixel(rowNodes, pixel, increment);\n\n        if (rowWasMoved) {\n            this.focusService.clearFocusedCell();\n            this.rangeService?.removeAllCellRanges();\n        }\n    }\n\n    public addRowDropZone(params: RowDropZoneParams & { fromGrid?: boolean }): void {\n        if (!params.getContainer()) {\n            _warnOnce('addRowDropZone - A container target needs to be provided');\n            return;\n        }\n\n        if (this.dragAndDropService.findExternalZone(params)) {\n            _warnOnce(\n                'addRowDropZone - target already exists in the list of DropZones. Use `removeRowDropZone` before adding it again.'\n            );\n            return;\n        }\n\n        let processedParams: RowDropZoneParams = {\n            getContainer: params.getContainer,\n        };\n\n        if (params.fromGrid) {\n            processedParams = params;\n        } else {\n            if (params.onDragEnter) {\n                processedParams.onDragEnter = (e) => {\n                    params.onDragEnter!(this.draggingToRowDragEvent('rowDragEnter', e as any));\n                };\n            }\n            if (params.onDragLeave) {\n                processedParams.onDragLeave = (e) => {\n                    params.onDragLeave!(this.draggingToRowDragEvent('rowDragLeave', e as any));\n                };\n            }\n            if (params.onDragging) {\n                processedParams.onDragging = (e) => {\n                    params.onDragging!(this.draggingToRowDragEvent('rowDragMove', e as any));\n                };\n            }\n            if (params.onDragStop) {\n                processedParams.onDragStop = (e) => {\n                    params.onDragStop!(this.draggingToRowDragEvent('rowDragEnd', e as any));\n                };\n            }\n        }\n\n        this.dragAndDropService.addDropTarget({\n            isInterestedIn: (type: DragSourceType) => type === DragSourceType.RowDrag,\n            getIconName: () => 'move',\n            external: true,\n            ...(processedParams as any),\n        });\n    }\n\n    public getRowDropZone(events?: RowDropZoneEvents): RowDropZoneParams {\n        const getContainer = this.getContainer.bind(this);\n        const onDragEnter = this.onDragEnter.bind(this);\n        const onDragLeave = this.onDragLeave.bind(this);\n        const onDragging = this.onDragging.bind(this);\n        const onDragStop = this.onDragStop.bind(this);\n\n        if (!events) {\n            return {\n                getContainer,\n                onDragEnter,\n                onDragLeave,\n                onDragging,\n                onDragStop,\n                /* @private */ fromGrid: true,\n            } as RowDropZoneParams;\n        }\n\n        return {\n            getContainer,\n            onDragEnter: events.onDragEnter\n                ? (e) => {\n                      onDragEnter(e);\n                      events.onDragEnter!(this.draggingToRowDragEvent('rowDragEnter', e as any));\n                  }\n                : onDragEnter,\n            onDragLeave: events.onDragLeave\n                ? (e) => {\n                      onDragLeave(e);\n                      events.onDragLeave!(this.draggingToRowDragEvent('rowDragLeave', e as any));\n                  }\n                : onDragLeave,\n            onDragging: events.onDragging\n                ? (e) => {\n                      onDragging(e);\n                      events.onDragging!(this.draggingToRowDragEvent('rowDragMove', e as any));\n                  }\n                : onDragging,\n            onDragStop: events.onDragStop\n                ? (e) => {\n                      onDragStop(e);\n                      events.onDragStop!(this.draggingToRowDragEvent('rowDragEnd', e as any));\n                  }\n                : onDragStop,\n            fromGrid: true /* @private */,\n        } as RowDropZoneParams;\n    }\n\n    private draggingToRowDragEvent<T extends AgEventType>(type: T, draggingEvent: DraggingEvent): RowDragEvent<T> {\n        const yNormalised = this.mouseEventService.getNormalisedPosition(draggingEvent).y;\n        const mouseIsPastLastRow = yNormalised > this.pageBoundsService.getCurrentPageHeight();\n\n        let overIndex = -1;\n        let overNode: RowNode | undefined;\n\n        if (!mouseIsPastLastRow) {\n            overIndex = this.rowModel.getRowIndexAtPixel(yNormalised);\n            overNode = this.rowModel.getRow(overIndex);\n        }\n\n        let vDirectionString: string | null;\n\n        switch (draggingEvent.vDirection) {\n            case VerticalDirection.Down:\n                vDirectionString = 'down';\n                break;\n            case VerticalDirection.Up:\n                vDirectionString = 'up';\n                break;\n            default:\n                vDirectionString = null;\n                break;\n        }\n\n        const event: RowDragEvent<T> = this.gos.addGridCommonParams({\n            type: type,\n            event: draggingEvent.event,\n            node: draggingEvent.dragItem.rowNode!,\n            nodes: draggingEvent.dragItem.rowNodes!,\n            overIndex: overIndex,\n            overNode: overNode,\n            y: yNormalised,\n            vDirection: vDirectionString!,\n        });\n\n        return event;\n    }\n\n    private dispatchGridEvent<T extends AgEventType>(type: T, draggingEvent: DraggingEvent): void {\n        const event = this.draggingToRowDragEvent(type, draggingEvent);\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public onDragLeave(draggingEvent: DraggingEvent): void {\n        this.dispatchGridEvent('rowDragLeave', draggingEvent);\n        this.stopDragging(draggingEvent);\n\n        if (this.gos.get('rowDragManaged')) {\n            this.clearRowHighlight();\n        }\n    }\n\n    public onDragStop(draggingEvent: DraggingEvent): void {\n        this.dispatchGridEvent('rowDragEnd', draggingEvent);\n        this.stopDragging(draggingEvent);\n\n        if (\n            this.gos.get('rowDragManaged') &&\n            (this.gos.get('suppressMoveWhenRowDragging') || !this.isFromThisGrid(draggingEvent)) &&\n            !this.isDropZoneWithinThisGrid(draggingEvent)\n        ) {\n            this.moveRowAndClearHighlight(draggingEvent);\n        }\n    }\n\n    private stopDragging(draggingEvent: DraggingEvent): void {\n        this.autoScrollService.ensureCleared();\n\n        this.getRowNodes(draggingEvent).forEach((rowNode) => {\n            rowNode.setDragging(false);\n        });\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { DragStartedEvent, DragStoppedEvent } from '../events';\nimport type { MouseEventService } from '../gridBodyComp/mouseEventService';\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\nimport { _removeFromArray } from '../utils/array';\nimport { _isBrowserSafari } from '../utils/browser';\nimport { _isFocusableFormField } from '../utils/dom';\nimport { _exists } from '../utils/generic';\nimport { _areEventsNear } from '../utils/mouse';\n\n/** Adds drag listening onto an element. In AG Grid this is used twice, first is resizing columns,\n * second is moving the columns and column groups around (ie the 'drag' part of Drag and Drop. */\nexport class DragService extends BeanStub implements NamedBean {\n    beanName = 'dragService' as const;\n\n    private mouseEventService: MouseEventService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.mouseEventService = beans.mouseEventService;\n    }\n\n    private currentDragParams: DragListenerParams | null;\n    private dragging: boolean;\n    private startTarget: EventTarget | null;\n    private mouseStartEvent: MouseEvent | null;\n    private touchLastTime: Touch | null;\n    private touchStart: Touch | null;\n\n    private dragEndFunctions: ((...args: any[]) => any)[] = [];\n\n    private dragSources: DragSourceAndListener[] = [];\n\n    public override destroy(): void {\n        this.dragSources.forEach(this.removeListener.bind(this));\n        this.dragSources.length = 0;\n        super.destroy();\n    }\n\n    private removeListener(dragSourceAndListener: DragSourceAndListener): void {\n        const element = dragSourceAndListener.dragSource.eElement;\n        const mouseDownListener = dragSourceAndListener.mouseDownListener;\n        element.removeEventListener('mousedown', mouseDownListener);\n\n        // remove touch listener only if it exists\n        if (dragSourceAndListener.touchEnabled) {\n            const touchStartListener = dragSourceAndListener.touchStartListener;\n            element.removeEventListener('touchstart', touchStartListener!, { passive: true } as any);\n        }\n    }\n\n    public removeDragSource(params: DragListenerParams): void {\n        const dragSourceAndListener = this.dragSources.find((item) => item.dragSource === params);\n\n        if (!dragSourceAndListener) {\n            return;\n        }\n\n        this.removeListener(dragSourceAndListener);\n        _removeFromArray(this.dragSources, dragSourceAndListener);\n    }\n\n    public isDragging(): boolean {\n        return this.dragging;\n    }\n\n    public addDragSource(params: DragListenerParams): void {\n        const mouseListener = this.onMouseDown.bind(this, params);\n        const { eElement, includeTouch, stopPropagationForTouch } = params;\n\n        eElement.addEventListener('mousedown', mouseListener);\n\n        let touchListener: ((touchEvent: TouchEvent) => void) | null = null;\n\n        const suppressTouch = this.gos.get('suppressTouch');\n\n        if (includeTouch && !suppressTouch) {\n            touchListener = (touchEvent: TouchEvent) => {\n                if (_isFocusableFormField(touchEvent.target as HTMLElement)) {\n                    return;\n                }\n                if (touchEvent.cancelable) {\n                    touchEvent.preventDefault();\n                    if (stopPropagationForTouch) {\n                        touchEvent.stopPropagation();\n                    }\n                }\n                this.onTouchStart(params, touchEvent);\n            };\n            // we set passive=false, as we want to prevent default on this event\n            eElement.addEventListener('touchstart', touchListener, { passive: false });\n        }\n\n        this.dragSources.push({\n            dragSource: params,\n            mouseDownListener: mouseListener,\n            touchStartListener: touchListener,\n            touchEnabled: !!includeTouch,\n        });\n    }\n\n    public getStartTarget(): EventTarget | null {\n        return this.startTarget;\n    }\n\n    // gets called whenever mouse down on any drag source\n    private onTouchStart(params: DragListenerParams, touchEvent: TouchEvent): void {\n        this.currentDragParams = params;\n        this.dragging = false;\n\n        const touch = touchEvent.touches[0];\n\n        this.touchLastTime = touch;\n        this.touchStart = touch;\n\n        const touchMoveEvent = (e: TouchEvent) => this.onTouchMove(e, params.eElement);\n        const touchEndEvent = (e: TouchEvent) => this.onTouchUp(e, params.eElement);\n        const documentTouchMove = (e: TouchEvent) => {\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n        };\n\n        const target = touchEvent.target as Document | ShadowRoot | EventTarget;\n        const events = [\n            // Prevents the page document from moving while we are dragging items around.\n            // preventDefault needs to be called in the touchmove listener and never inside the\n            // touchstart, because using touchstart causes the click event to be cancelled on touch devices.\n            {\n                target: this.gos.getRootNode(),\n                type: 'touchmove',\n                listener: documentTouchMove,\n                options: { passive: false },\n            },\n            { target, type: 'touchmove', listener: touchMoveEvent, options: { passive: true } },\n            { target, type: 'touchend', listener: touchEndEvent, options: { passive: true } },\n            { target, type: 'touchcancel', listener: touchEndEvent, options: { passive: true } },\n        ];\n        // temporally add these listeners, for the duration of the drag\n        this.addTemporaryEvents(events);\n\n        // see if we want to start dragging straight away\n        if (params.dragStartPixels === 0) {\n            this.onCommonMove(touch, this.touchStart, params.eElement);\n        }\n    }\n\n    // gets called whenever mouse down on any drag source\n    private onMouseDown(params: DragListenerParams, mouseEvent: MouseEvent): void {\n        const e = mouseEvent as any;\n\n        if (params.skipMouseEvent && params.skipMouseEvent(mouseEvent)) {\n            return;\n        }\n\n        // if there are two elements with parent / child relationship, and both are draggable,\n        // when we drag the child, we should NOT drag the parent. an example of this is row moving\n        // and range selection - row moving should get preference when use drags the rowDrag component.\n        if (e._alreadyProcessedByDragService) {\n            return;\n        }\n\n        e._alreadyProcessedByDragService = true;\n\n        // only interested in left button clicks\n        if (mouseEvent.button !== 0) {\n            return;\n        }\n\n        if (this.shouldPreventMouseEvent(mouseEvent)) {\n            mouseEvent.preventDefault();\n        }\n\n        this.currentDragParams = params;\n        this.dragging = false;\n\n        this.mouseStartEvent = mouseEvent;\n        this.startTarget = mouseEvent.target;\n\n        const mouseMoveEvent = (event: MouseEvent) => this.onMouseMove(event, params.eElement);\n        const mouseUpEvent = (event: MouseEvent) => this.onMouseUp(event, params.eElement);\n        const contextEvent = (event: MouseEvent) => event.preventDefault();\n\n        const target = this.gos.getRootNode();\n        const events = [\n            { target, type: 'mousemove', listener: mouseMoveEvent },\n            { target, type: 'mouseup', listener: mouseUpEvent },\n            { target, type: 'contextmenu', listener: contextEvent },\n        ];\n        // temporally add these listeners, for the duration of the drag\n        this.addTemporaryEvents(events);\n\n        //see if we want to start dragging straight away\n        if (params.dragStartPixels === 0) {\n            this.onMouseMove(mouseEvent, params.eElement);\n        }\n    }\n\n    private addTemporaryEvents(\n        events: {\n            target: Document | ShadowRoot | EventTarget;\n            type: string;\n            listener: (e: MouseEvent | TouchEvent, el: HTMLElement) => void;\n            options?: any;\n        }[]\n    ): void {\n        events.forEach((currentEvent) => {\n            const { target, type, listener, options } = currentEvent;\n            target.addEventListener(type, listener as any, options);\n        });\n\n        this.dragEndFunctions.push(() => {\n            events.forEach((currentEvent) => {\n                const { target, type, listener, options } = currentEvent;\n                target.removeEventListener(type, listener as any, options);\n            });\n        });\n    }\n\n    // returns true if the event is close to the original event by X pixels either vertically or horizontally.\n    // we only start dragging after X pixels so this allows us to know if we should start dragging yet.\n    private isEventNearStartEvent(currentEvent: MouseEvent | Touch, startEvent: MouseEvent | Touch): boolean {\n        // by default, we wait 4 pixels before starting the drag\n        const { dragStartPixels } = this.currentDragParams!;\n        const requiredPixelDiff = _exists(dragStartPixels) ? dragStartPixels : 4;\n        return _areEventsNear(currentEvent, startEvent, requiredPixelDiff);\n    }\n\n    private getFirstActiveTouch(touchList: TouchList): Touch | null {\n        for (let i = 0; i < touchList.length; i++) {\n            if (touchList[i].identifier === this.touchStart!.identifier) {\n                return touchList[i];\n            }\n        }\n        return null;\n    }\n\n    private onCommonMove(currentEvent: MouseEvent | Touch, startEvent: MouseEvent | Touch, el: Element): void {\n        if (!this.dragging) {\n            // if mouse hasn't travelled from the start position enough, do nothing\n            if (!this.dragging && this.isEventNearStartEvent(currentEvent, startEvent)) {\n                return;\n            }\n\n            this.dragging = true;\n            const event: WithoutGridCommon<DragStartedEvent> = {\n                type: 'dragStarted',\n                target: el,\n            };\n            this.eventService.dispatchEvent(event);\n\n            this.currentDragParams!.onDragStart(startEvent);\n            // we need ONE drag action at the startEvent, so that we are guaranteed the drop target\n            // at the start gets notified. this is because the drag can start outside of the element\n            // that started it, as the mouse is allowed drag away from the mouse down before it's\n            // considered a drag (the isEventNearStartEvent() above). if we didn't do this, then\n            // it would be possible to click a column by the edge, then drag outside of the drop zone\n            // in less than 4 pixels and the drag officially starts outside of the header but the header\n            // wouldn't be notified of the dragging.\n            this.currentDragParams!.onDragging(startEvent);\n        }\n\n        this.currentDragParams!.onDragging(currentEvent);\n    }\n\n    private onTouchMove(touchEvent: TouchEvent, el: Element): void {\n        const touch = this.getFirstActiveTouch(touchEvent.touches);\n        if (!touch) {\n            return;\n        }\n\n        // this.___statusPanel.setInfoText(Math.random() + ' onTouchMove preventDefault stopPropagation');\n        this.onCommonMove(touch, this.touchStart!, el);\n    }\n\n    // only gets called after a mouse down - as this is only added after mouseDown\n    // and is removed when mouseUp happens\n    private onMouseMove(mouseEvent: MouseEvent, el: Element): void {\n        if (_isBrowserSafari()) {\n            const eDocument = this.gos.getDocument();\n            eDocument.getSelection()?.removeAllRanges();\n        }\n\n        if (this.shouldPreventMouseEvent(mouseEvent)) {\n            mouseEvent.preventDefault();\n        }\n\n        this.onCommonMove(mouseEvent, this.mouseStartEvent!, el);\n    }\n\n    private shouldPreventMouseEvent(mouseEvent: MouseEvent): boolean {\n        const isEnableCellTextSelect = this.gos.get('enableCellTextSelection');\n        const isMouseMove = mouseEvent.type === 'mousemove';\n\n        return (\n            // when `isEnableCellTextSelect` is `true`, we need to preventDefault on mouseMove\n            // to avoid the grid text being selected while dragging components.\n            isEnableCellTextSelect &&\n            isMouseMove &&\n            mouseEvent.cancelable &&\n            this.mouseEventService.isEventFromThisGrid(mouseEvent) &&\n            !this.isOverFormFieldElement(mouseEvent)\n        );\n    }\n\n    private isOverFormFieldElement(mouseEvent: MouseEvent): boolean {\n        const el = mouseEvent.target as HTMLElement | null;\n        const tagName = el?.tagName.toLocaleLowerCase();\n\n        return !!tagName?.match('^a$|textarea|input|select|button');\n    }\n\n    public onTouchUp(touchEvent: TouchEvent, el: Element): void {\n        let touch = this.getFirstActiveTouch(touchEvent.changedTouches);\n\n        // i haven't worked this out yet, but there is no matching touch\n        // when we get the touch up event. to get around this, we swap in\n        // the last touch. this is a hack to 'get it working' while we\n        // figure out what's going on, why we are not getting a touch in\n        // current event.\n        if (!touch) {\n            touch = this.touchLastTime;\n        }\n\n        // if mouse was left up before we started to move, then this is a tap.\n        // we check this before onUpCommon as onUpCommon resets the dragging\n        // let tap = !this.dragging;\n        // let tapTarget = this.currentDragParams.eElement;\n\n        this.onUpCommon(touch!, el);\n\n        // if tap, tell user\n        // console.log(`${Math.random()} tap = ${tap}`);\n        // if (tap) {\n        //     tapTarget.click();\n        // }\n    }\n\n    public onMouseUp(mouseEvent: MouseEvent, el: Element): void {\n        this.onUpCommon(mouseEvent, el);\n    }\n\n    public onUpCommon(eventOrTouch: MouseEvent | Touch, el: Element): void {\n        if (this.dragging) {\n            this.dragging = false;\n            this.currentDragParams!.onDragStop(eventOrTouch);\n            const event: WithoutGridCommon<DragStoppedEvent> = {\n                type: 'dragStopped',\n                target: el,\n            };\n            this.eventService.dispatchEvent(event);\n        }\n\n        this.mouseStartEvent = null;\n        this.startTarget = null;\n        this.touchStart = null;\n        this.touchLastTime = null;\n        this.currentDragParams = null;\n\n        this.dragEndFunctions.forEach((func) => func());\n        this.dragEndFunctions.length = 0;\n    }\n}\n\ninterface DragSourceAndListener {\n    dragSource: DragListenerParams;\n    mouseDownListener: (mouseEvent: MouseEvent) => void;\n    touchEnabled: boolean;\n    touchStartListener: ((touchEvent: TouchEvent) => void) | null;\n}\n\nexport interface DragListenerParams {\n    /** After how many pixels of dragging should the drag operation start. Default is 4px. */\n    dragStartPixels?: number;\n    /** Dom element to add the drag handling to */\n    eElement: Element;\n    /** Some places may wish to ignore certain events, eg range selection ignores shift clicks */\n    skipMouseEvent?: (mouseEvent: MouseEvent) => boolean;\n    /** Callback for drag starting */\n    onDragStart: (mouseEvent: MouseEvent | Touch) => void;\n    /** Callback for drag stopping */\n    onDragStop: (mouseEvent: MouseEvent | Touch) => void;\n    /** Callback for mouse move while dragging */\n    onDragging: (mouseEvent: MouseEvent | Touch) => void;\n    /** Include touch events for this Drag Listener */\n    includeTouch?: boolean;\n    /** If `true`, it will stop the propagation of Touch Events */\n    stopPropagationForTouch?: boolean;\n}\n", "import { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { DragItem, DragSource } from '../../dragAndDrop/dragAndDropService';\nimport { DragSourceType } from '../../dragAndDrop/dragAndDropService';\nimport type { AgColumn } from '../../entities/agColumn';\nimport type { RowNode } from '../../entities/rowNode';\nimport type { AgEventType } from '../../eventTypes';\nimport { _isFunction, _warnOnce } from '../../utils/function';\nimport { _createIconNoSpan } from '../../utils/icon';\nimport { Component } from '../../widgets/component';\n\nexport interface IRowDragItem extends DragItem {\n    /** The default text that would be applied to this Drag Element */\n    defaultTextValue: string;\n}\n\nexport class RowDragComp extends Component {\n    private dragSource: DragSource | null = null;\n\n    private beans: BeanCollection;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.beans = beans;\n    }\n\n    constructor(\n        private readonly cellValueFn: () => string,\n        private readonly rowNode: RowNode,\n        private readonly column?: AgColumn,\n        private readonly customGui?: HTMLElement,\n        private readonly dragStartPixels?: number,\n        private readonly suppressVisibilityChange?: boolean\n    ) {\n        super();\n    }\n\n    public isCustomGui(): boolean {\n        return this.customGui != null;\n    }\n\n    public postConstruct(): void {\n        if (!this.customGui) {\n            this.setTemplate(/* html */ `<div class=\"ag-drag-handle ag-row-drag\" aria-hidden=\"true\"></div>`);\n            this.getGui().appendChild(_createIconNoSpan('rowDrag', this.gos, null)!);\n            this.addDragSource();\n        } else {\n            this.setDragElement(this.customGui, this.dragStartPixels);\n        }\n\n        this.checkCompatibility();\n\n        if (!this.suppressVisibilityChange) {\n            const strategy = this.gos.get('rowDragManaged')\n                ? new ManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column)\n                : new NonManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column);\n\n            this.createManagedBean(strategy, this.beans.context);\n        }\n    }\n\n    public setDragElement(dragElement: HTMLElement, dragStartPixels?: number) {\n        this.setTemplateFromElement(dragElement);\n        this.addDragSource(dragStartPixels);\n    }\n\n    private getSelectedNodes(): RowNode[] {\n        const isRowDragMultiRow = this.gos.get('rowDragMultiRow');\n        if (!isRowDragMultiRow) {\n            return [this.rowNode];\n        }\n\n        const selection = this.beans.selectionService.getSelectedNodes();\n\n        return selection.indexOf(this.rowNode) !== -1 ? selection : [this.rowNode];\n    }\n\n    // returns true if all compatibility items work out\n    private checkCompatibility(): void {\n        const managed = this.gos.get('rowDragManaged');\n        const treeData = this.gos.get('treeData');\n\n        if (treeData && managed) {\n            _warnOnce('If using row drag with tree data, you cannot have rowDragManaged=true');\n        }\n    }\n\n    private getDragItem(): IRowDragItem {\n        return {\n            rowNode: this.rowNode,\n            rowNodes: this.getSelectedNodes(),\n            columns: this.column ? [this.column] : undefined,\n            defaultTextValue: this.cellValueFn(),\n        };\n    }\n\n    private getRowDragText(column?: AgColumn) {\n        if (column) {\n            const colDef = column.getColDef();\n            if (colDef.rowDragText) {\n                return colDef.rowDragText;\n            }\n        }\n        return this.gos.get('rowDragText');\n    }\n\n    private addDragSource(dragStartPixels: number = 4): void {\n        // if this is changing the drag element, delete the previous dragSource\n        if (this.dragSource) {\n            this.removeDragSource();\n        }\n\n        const translate = this.localeService.getLocaleTextFunc();\n\n        this.dragSource = {\n            type: DragSourceType.RowDrag,\n            eElement: this.getGui(),\n            dragItemName: () => {\n                const dragItem = this.getDragItem();\n                const dragItemCount = dragItem.rowNodes?.length || 1;\n\n                const rowDragText = this.getRowDragText(this.column);\n                if (rowDragText) {\n                    return rowDragText(dragItem, dragItemCount);\n                }\n\n                return dragItemCount === 1\n                    ? this.cellValueFn()\n                    : `${dragItemCount} ${translate('rowDragRows', 'rows')}`;\n            },\n            getDragItem: () => this.getDragItem(),\n            dragStartPixels,\n            dragSourceDomDataKey: this.gos.getDomDataKey(),\n        };\n\n        this.beans.dragAndDropService.addDragSource(this.dragSource, true);\n    }\n\n    public override destroy(): void {\n        this.removeDragSource();\n        super.destroy();\n    }\n\n    private removeDragSource() {\n        if (this.dragSource) {\n            this.beans.dragAndDropService.removeDragSource(this.dragSource);\n        }\n        this.dragSource = null;\n    }\n}\n\nclass VisibilityStrategy extends BeanStub {\n    private readonly parent: RowDragComp;\n    private readonly column: AgColumn | undefined;\n    protected readonly rowNode: RowNode;\n\n    constructor(parent: RowDragComp, rowNode: RowNode, column?: AgColumn) {\n        super();\n        this.parent = parent;\n        this.rowNode = rowNode;\n        this.column = column;\n    }\n\n    protected setDisplayedOrVisible(neverDisplayed: boolean): void {\n        const displayedOptions = { skipAriaHidden: true };\n        if (neverDisplayed) {\n            this.parent.setDisplayed(false, displayedOptions);\n        } else {\n            let shown: boolean = true;\n            let isShownSometimes: boolean = false;\n\n            if (this.column) {\n                shown = this.column.isRowDrag(this.rowNode) || this.parent.isCustomGui();\n                isShownSometimes = _isFunction(this.column.getColDef().rowDrag);\n            }\n\n            // if shown sometimes, them some rows can have drag handle while other don't,\n            // so we use setVisible to keep the handles horizontally aligned (as _setVisible\n            // keeps the empty space, whereas setDisplayed looses the space)\n            if (isShownSometimes) {\n                this.parent.setDisplayed(true, displayedOptions);\n                this.parent.setVisible(shown, displayedOptions);\n            } else {\n                this.parent.setDisplayed(shown, displayedOptions);\n                this.parent.setVisible(true, displayedOptions);\n            }\n        }\n    }\n}\n\n// when non managed, the visibility depends on suppressRowDrag property only\nclass NonManagedVisibilityStrategy extends VisibilityStrategy {\n    private readonly beans: BeanCollection;\n\n    constructor(parent: RowDragComp, beans: BeanCollection, rowNode: RowNode, column?: AgColumn) {\n        super(parent, rowNode, column);\n        this.beans = beans;\n    }\n\n    public postConstruct(): void {\n        this.addManagedPropertyListener('suppressRowDrag', this.onSuppressRowDrag.bind(this));\n\n        // in case data changes, then we need to update visibility of drag item\n        const listener = this.workOutVisibility.bind(this);\n        this.addManagedListeners(this.rowNode, {\n            dataChanged: listener,\n            cellChanged: listener,\n        });\n\n        this.addManagedListeners(this.beans.eventService, { newColumnsLoaded: listener });\n\n        this.workOutVisibility();\n    }\n\n    private onSuppressRowDrag(): void {\n        this.workOutVisibility();\n    }\n\n    private workOutVisibility(): void {\n        // only show the drag if both sort and filter are not present\n        const neverDisplayed = this.gos.get('suppressRowDrag');\n        this.setDisplayedOrVisible(neverDisplayed);\n    }\n}\n\n// when managed, the visibility depends on sort, filter and row group, as well as suppressRowDrag property\nclass ManagedVisibilityStrategy extends VisibilityStrategy {\n    private readonly beans: BeanCollection;\n\n    constructor(parent: RowDragComp, beans: BeanCollection, rowNode: RowNode, column?: AgColumn) {\n        super(parent, rowNode, column);\n        this.beans = beans;\n    }\n\n    public postConstruct(): void {\n        const listener = this.workOutVisibility.bind(this);\n        // we do not show the component if sort, filter or grouping is active\n        this.addManagedListeners<AgEventType>(this.beans.eventService, {\n            sortChanged: listener,\n            filterChanged: listener,\n            columnRowGroupChanged: listener,\n            newColumnsLoaded: listener,\n        });\n\n        // in case data changes, then we need to update visibility of drag item\n        this.addManagedListeners(this.rowNode, {\n            dataChanged: listener,\n            cellChanged: listener,\n        });\n\n        this.addManagedPropertyListener('suppressRowDrag', this.onSuppressRowDrag.bind(this));\n\n        this.workOutVisibility();\n    }\n\n    private onSuppressRowDrag(): void {\n        this.workOutVisibility();\n    }\n\n    private workOutVisibility(): void {\n        // only show the drag if both sort and filter are not present\n        const gridBodyCon = this.beans.ctrlsService.getGridBodyCtrl();\n        const rowDragFeature = gridBodyCon.getRowDragFeature();\n        const shouldPreventRowMove = rowDragFeature && rowDragFeature.shouldPreventRowMove();\n        const suppressRowDrag = this.gos.get('suppressRowDrag');\n        const hasExternalDropZones = this.beans.dragAndDropService.hasExternalDropZones();\n        const neverDisplayed = (shouldPreventRowMove && !hasExternalDropZones) || suppressRowDrag;\n\n        this.setDisplayedOrVisible(neverDisplayed);\n    }\n}\n", "import type { DetailGridInfo } from '../api/gridApi';\nimport type { BeanCollection } from '../context/context';\nimport type { AgEventType } from '../eventTypes';\nimport type { CellEditRequestEvent, RowEvent, RowSelectedEvent, SelectionEventSourceType } from '../events';\nimport type { IServerSideStore } from '../interfaces/IServerSideStore';\nimport type { IClientSideRowModel } from '../interfaces/iClientSideRowModel';\nimport type { IEventEmitter } from '../interfaces/iEventEmitter';\nimport type {\n    AgRowNodeEventListener,\n    CellChangedEvent,\n    DataChangedEvent,\n    IRowNode,\n    RowHighlightPosition,\n    RowNodeEventType,\n    RowPinnedType,\n    SetSelectedParams,\n} from '../interfaces/iRowNode';\nimport type { IServerSideRowModel } from '../interfaces/iServerSideRowModel';\nimport { LocalEventService } from '../localEventService';\nimport { FrameworkEventListenerService } from '../misc/frameworkEventListenerService';\nimport { _debounce, _errorOnce, _warnOnce } from '../utils/function';\nimport { _exists, _missing, _missingOrEmpty } from '../utils/generic';\nimport type { AgColumn } from './agColumn';\n\nexport class RowNode<TData = any> implements IEventEmitter<RowNodeEventType>, IRowNode<TData> {\n    public static ID_PREFIX_ROW_GROUP = 'row-group-';\n    public static ID_PREFIX_TOP_PINNED = 't-';\n    public static ID_PREFIX_BOTTOM_PINNED = 'b-';\n\n    private static OBJECT_ID_SEQUENCE = 0;\n\n    /** Unique ID for the node. Either provided by the application, or generated by the grid if not. */\n    public id: string | undefined;\n\n    /** If using row grouping, contains the group values for this group. */\n    public groupData: { [key: string]: any | null } | null;\n\n    /** If using row grouping and aggregation, contains the aggregation data. */\n    public aggData: any;\n\n    /**\n     * The data as provided by the application.\n     * Can be `undefined` when using row grouping or during grid initialisation.\n     */\n    public data: TData | undefined;\n\n    /** The parent node to this node, or empty if top level */\n    public parent: RowNode<TData> | null;\n\n    /** How many levels this node is from the top when grouping. */\n    public level: number;\n\n    /** How many levels this node is from the top when grouping in the UI (only different to `parent` when `groupRemoveSingleChildren=true`)*/\n    public uiLevel: number;\n\n    /**\n     * If doing in-memory (client-side) grouping, this is the index of the group column this cell is for.\n     * This will always be the same as the level, unless we are collapsing groups, i.e. `groupRemoveSingleChildren=true`.\n     */\n    public rowGroupIndex: number | null;\n\n    /** `true` if this node is a group node (i.e. it has children) */\n    public group: boolean | undefined;\n\n    /** `true` if this row is getting dragged */\n    public dragging: boolean;\n\n    /** `true` if this row is a master row, part of master / detail (ie row can be expanded to show detail) */\n    public master: boolean;\n\n    /** `true` if this row is a detail row, part of master / detail (ie child row of an expanded master row)*/\n    public detail: boolean | undefined;\n\n    /** If this row is a master row that was expanded, this points to the associated detail row. */\n    public detailNode: RowNode;\n\n    /** If master detail, this contains details about the detail grid */\n    public detailGridInfo: DetailGridInfo | null;\n\n    /** `true` if this node is a group and the group is the bottom level in the tree. */\n    public leafGroup: boolean | undefined;\n\n    /** `true` if this is the first child in this group. Changes when data is sorted. */\n    public firstChild: boolean;\n\n    /** `true` if this is the last child in this group. Changes when data is sorted. */\n    public lastChild: boolean;\n\n    /** Index of this row with respect to its parent when grouping. Changes when data is sorted. */\n    public childIndex: number;\n\n    /** The current row index. If the row is filtered out or in a collapsed group, this value will be `null`. */\n    public rowIndex: number | null = null;\n\n    /** Either 'top' or 'bottom' if row pinned, otherwise `undefined` or `null`. */\n    public rowPinned: RowPinnedType;\n\n    /** When true, this row will appear in the top */\n    public sticky: boolean;\n\n    /** If row is pinned, then pinnedRowTop is used rather than rowTop */\n    public stickyRowTop: number;\n\n    /** If using quick filter, stores a string representation of the row for searching against. */\n    public quickFilterAggregateText: string | null;\n\n    /** `true` if row is a footer. Footers have `group = true` and `footer = true`. */\n    public footer: boolean | undefined;\n\n    /** The field we are grouping on eg 'country'. */\n    public field: string | null;\n\n    /** The row group column used for this group, e.g. the Country column instance. */\n    public rowGroupColumn: AgColumn | null;\n\n    /** The key for the group eg Ireland, UK, USA */\n    public key: string | null = null;\n\n    /** Used by server-side row model. `true` if this row node is a stub. A stub is a placeholder row with loading icon while waiting from row to be loaded. */\n    public stub: boolean | undefined;\n\n    /** Used by server side row model, true if this row node failed a load */\n    public failedLoad: boolean | undefined;\n\n    /** Used by server side row model, true if this node needs refreshed by the server when in viewport */\n    public __needsRefreshWhenVisible: boolean;\n\n    /** All lowest level nodes beneath this node, no groups. */\n    public allLeafChildren: RowNode<TData>[] | null;\n\n    /** Children of this group. If multi levels of grouping, shows only immediate children. */\n    public childrenAfterGroup: RowNode<TData>[] | null;\n\n    /** Filtered children of this group. */\n    public childrenAfterFilter: RowNode<TData>[] | null;\n\n    /** Aggregated and re-filtered children of this group. */\n    public childrenAfterAggFilter: RowNode<TData>[] | null;\n\n    /** Sorted children of this group. */\n    public childrenAfterSort: RowNode<TData>[] | null;\n\n    /** Number of children and grand children. */\n    public allChildrenCount: number | null;\n\n    /** Children mapped by the pivot columns. */\n    public childrenMapped: { [key: string]: any } | null = {};\n\n    /** Server Side Row Model Only - the children are in an infinite cache. */\n    public childStore: IServerSideStore | null;\n\n    /** `true` if group is expanded, otherwise `false`. */\n    public expanded: boolean;\n\n    /** If using footers, reference to the footer node for this group. */\n    public sibling: RowNode;\n\n    /** The height, in pixels, of this row */\n    public rowHeight: number | null | undefined;\n\n    /** Dynamic row heights are done on demand, only when row is visible. However for row virtualisation\n     * we need a row height to do the 'what rows are in viewport' maths. So we assign a row height to each\n     * row based on defaults and rowHeightEstimated=true, then when the row is needed for drawing we do\n     * the row height calculation and set rowHeightEstimated=false.*/\n    public rowHeightEstimated: boolean;\n\n    /**\n     * This will be `true` if it has a rowIndex assigned, otherwise `false`.\n     */\n    public displayed: boolean = false;\n\n    /** The row top position in pixels. */\n    public rowTop: number | null = null;\n\n    /** The top pixel for this row last time, makes sense if data set was ordered or filtered,\n     * it is used so new rows can animate in from their old position. */\n    public oldRowTop: number | null = null;\n\n    /** `true` by default - can be overridden via gridOptions.isRowSelectable(rowNode) */\n    public selectable = true;\n\n    /** `true` if this node is a daemon. This means row is not part of the model. Can happen when then\n     * the row is selected and then the user sets a different ID onto the node. The nodes is then\n     * representing a different entity, so the selection controller, if the node is selected, takes\n     * a copy where daemon=true. */\n    public __daemon: boolean;\n\n    /** Used by the value service, stores values for a particular change detection turn. */\n    public __cacheData: { [colId: string]: any };\n    public __cacheVersion: number;\n\n    /** Used by sorting service - to give deterministic sort to groups. Previously we\n     * just id for this, however id is a string and had slower sorting compared to numbers. */\n    public __objectId: number = RowNode.OBJECT_ID_SEQUENCE++;\n\n    /** We cache the result of hasChildren() so that we can be aware of when it has changed, and hence\n     * fire the event. Really we should just have hasChildren as an attribute and do away with hasChildren()\n     * method, however that would be a breaking change. */\n    private __hasChildren: boolean;\n\n    /** When one or more Columns are using autoHeight, this keeps track of height of each autoHeight Cell,\n     * indexed by the Column ID. */\n    private __autoHeights?: { [id: string]: number | undefined } = {};\n\n    /** `true` when nodes with the same id are being removed and added as part of the same batch transaction */\n    public alreadyRendered = false;\n\n    public highlighted: RowHighlightPosition | null = null;\n\n    private hovered: boolean = false;\n\n    private selected: boolean | undefined = false;\n    private localEventService: LocalEventService<RowNodeEventType> | null;\n    private frameworkEventListenerService: FrameworkEventListenerService<any, any> | null;\n\n    private beans: BeanCollection;\n\n    private checkAutoHeightsDebounced: () => void;\n\n    constructor(beans: BeanCollection) {\n        this.beans = beans;\n    }\n\n    /**\n     * Replaces the data on the `rowNode`. When this method is called, the grid will refresh the entire rendered row if it is displayed.\n     */\n    public setData(data: TData): void {\n        this.setDataCommon(data, false);\n    }\n\n    // similar to setRowData, however it is expected that the data is the same data item. this\n    // is intended to be used with Redux type stores, where the whole data can be changed. we are\n    // guaranteed that the data is the same entity (so grid doesn't need to worry about the id of the\n    // underlying data changing, hence doesn't need to worry about selection). the grid, upon receiving\n    // dataChanged event, will refresh the cells rather than rip them all out (so user can show transitions).\n\n    /**\n     * Updates the data on the `rowNode`. When this method is called, the grid will refresh the entire rendered row if it is displayed.\n     */\n    public updateData(data: TData): void {\n        this.setDataCommon(data, true);\n    }\n\n    private setDataCommon(data: TData, update: boolean): void {\n        const oldData = this.data;\n\n        this.data = data;\n        this.beans.valueCache.onDataChanged();\n        this.updateDataOnDetailNode();\n        this.checkRowSelectable();\n        this.resetQuickFilterAggregateText();\n\n        const event: DataChangedEvent<TData> = this.createDataChangedEvent(data, oldData, update);\n\n        this.localEventService?.dispatchEvent(event);\n    }\n\n    // when we are doing master / detail, the detail node is lazy created, but then kept around.\n    // so if we show / hide the detail, the same detail rowNode is used. so we need to keep the data\n    // in sync, otherwise expand/collapse of the detail would still show the old values.\n    private updateDataOnDetailNode(): void {\n        if (this.detailNode) {\n            this.detailNode.data = this.data;\n        }\n    }\n\n    private createDataChangedEvent(\n        newData: TData,\n        oldData: TData | undefined,\n        update: boolean\n    ): DataChangedEvent<TData> {\n        return {\n            type: 'dataChanged',\n            node: this,\n            oldData: oldData,\n            newData: newData,\n            update: update,\n        };\n    }\n\n    public getRowIndexString(): string | null {\n        if (this.rowIndex == null) {\n            _errorOnce(\n                'Could not find rowIndex, this means tasks are being executed on a rowNode that has been removed from the grid.'\n            );\n            return null;\n        }\n\n        if (this.rowPinned === 'top') {\n            return 't-' + this.rowIndex;\n        }\n\n        if (this.rowPinned === 'bottom') {\n            return 'b-' + this.rowIndex;\n        }\n\n        return this.rowIndex.toString();\n    }\n\n    private createDaemonNode(): RowNode {\n        const oldNode = new RowNode(this.beans);\n\n        // just copy the id and data, this is enough for the node to be used\n        // in the selection controller (the selection controller is the only\n        // place where daemon nodes can live).\n        oldNode.id = this.id;\n        oldNode.data = this.data;\n        oldNode.__daemon = true;\n        oldNode.selected = this.selected;\n        oldNode.level = this.level;\n\n        return oldNode;\n    }\n\n    public setDataAndId(data: TData, id: string | undefined): void {\n        const oldNode = _exists(this.id) ? this.createDaemonNode() : null;\n        const oldData = this.data;\n\n        this.data = data;\n        this.updateDataOnDetailNode();\n        this.setId(id);\n        this.checkRowSelectable();\n        this.beans.selectionService.syncInRowNode(this, oldNode);\n\n        const event: DataChangedEvent<TData> = this.createDataChangedEvent(data, oldData, false);\n\n        this.localEventService?.dispatchEvent(event);\n    }\n\n    private checkRowSelectable() {\n        const isRowSelectableFunc = this.beans.gos.get('isRowSelectable');\n        this.setRowSelectable(isRowSelectableFunc ? isRowSelectableFunc!(this) : true);\n    }\n\n    public setRowSelectable(newVal: boolean, suppressSelectionUpdate?: boolean) {\n        if (this.selectable !== newVal) {\n            this.selectable = newVal;\n            this.dispatchRowEvent('selectableChanged');\n\n            if (suppressSelectionUpdate) {\n                return;\n            }\n\n            const isGroupSelectsChildren = this.beans.gos.get('groupSelectsChildren');\n            if (isGroupSelectsChildren) {\n                const selected = this.calculateSelectedFromChildren();\n                this.setSelectedParams({\n                    newValue: selected ?? false,\n                    source: 'selectableChanged',\n                });\n                return;\n            }\n\n            // if row is selected but shouldn't be selectable, then deselect.\n            if (this.isSelected() && !this.selectable) {\n                this.setSelectedParams({\n                    newValue: false,\n                    source: 'selectableChanged',\n                });\n            }\n        }\n    }\n\n    public setId(id?: string): void {\n        // see if user is providing the id's\n        const getRowIdFunc = this.beans.gos.getRowIdCallback();\n\n        if (getRowIdFunc) {\n            // if user is providing the id's, then we set the id only after the data has been set.\n            // this is important for virtual pagination and viewport, where empty rows exist.\n            if (this.data) {\n                // we pass 'true' as we skip this level when generating keys,\n                // as we don't always have the key for this level (eg when updating\n                // data via transaction on SSRM, we are getting key to look up the\n                // RowNode, don't have the RowNode yet, thus no way to get the current key)\n                const parentKeys = this.getGroupKeys(true);\n                this.id = getRowIdFunc({\n                    data: this.data,\n                    parentKeys: parentKeys.length > 0 ? parentKeys : undefined,\n                    level: this.level,\n                });\n\n                // make sure id provided doesn't start with 'row-group-' as this is reserved.\n                if (this.id.startsWith(RowNode.ID_PREFIX_ROW_GROUP)) {\n                    _errorOnce(\n                        `Row IDs cannot start with ${RowNode.ID_PREFIX_ROW_GROUP}, this is a reserved prefix for AG Grid's row grouping feature.`\n                    );\n                }\n            } else {\n                // this can happen if user has set blank into the rowNode after the row previously\n                // having data. this happens in virtual page row model, when data is delete and\n                // the page is refreshed.\n                this.id = undefined;\n            }\n        } else {\n            this.id = id;\n        }\n    }\n\n    public getGroupKeys(excludeSelf = false): string[] {\n        const keys: string[] = [];\n\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let pointer: RowNode | null = this;\n        if (excludeSelf) {\n            pointer = pointer.parent;\n        }\n        while (pointer && pointer.level >= 0) {\n            keys.push(pointer.key!);\n            pointer = pointer.parent;\n        }\n        keys.reverse();\n\n        return keys;\n    }\n\n    public isPixelInRange(pixel: number): boolean {\n        if (!_exists(this.rowTop) || !_exists(this.rowHeight)) {\n            return false;\n        }\n        return pixel >= this.rowTop && pixel < this.rowTop + this.rowHeight;\n    }\n\n    private updateIfDifferent<T extends keyof RowNode>(key: T, value: RowNode[T], eventName: RowNodeEventType): void {\n        if (this[key] === value) {\n            return;\n        }\n        (this as RowNode)[key] = value;\n\n        this.dispatchRowEvent(eventName);\n    }\n\n    public setFirstChild(firstChild: boolean): void {\n        this.updateIfDifferent('firstChild', firstChild, 'firstChildChanged');\n    }\n\n    public setLastChild(lastChild: boolean): void {\n        this.updateIfDifferent('lastChild', lastChild, 'lastChildChanged');\n    }\n\n    public setChildIndex(childIndex: number): void {\n        this.updateIfDifferent('childIndex', childIndex, 'childIndexChanged');\n    }\n\n    public setRowTop(rowTop: number | null): void {\n        this.oldRowTop = this.rowTop;\n\n        if (this.rowTop === rowTop) {\n            return;\n        }\n\n        this.rowTop = rowTop;\n\n        this.dispatchRowEvent('topChanged');\n\n        this.setDisplayed(rowTop !== null);\n    }\n\n    public clearRowTopAndRowIndex(): void {\n        this.oldRowTop = null;\n        this.setRowTop(null);\n        this.setRowIndex(null);\n    }\n\n    private setDisplayed(displayed: boolean): void {\n        this.updateIfDifferent('displayed', displayed, 'displayedChanged');\n    }\n\n    public setDragging(dragging: boolean): void {\n        this.updateIfDifferent('dragging', dragging, 'draggingChanged');\n    }\n\n    public setHighlighted(highlighted: RowHighlightPosition | null): void {\n        this.updateIfDifferent('highlighted', highlighted, 'rowHighlightChanged');\n    }\n\n    public setHovered(hovered: boolean): void {\n        if (this.hovered === hovered) {\n            return;\n        }\n\n        this.hovered = hovered;\n    }\n\n    public isHovered(): boolean {\n        return this.hovered;\n    }\n\n    public setAllChildrenCount(allChildrenCount: number | null): void {\n        this.updateIfDifferent('allChildrenCount', allChildrenCount, 'allChildrenCountChanged');\n    }\n\n    public setMaster(master: boolean): void {\n        if (this.master === master) {\n            return;\n        }\n\n        // if changing AWAY from master, then unexpand, otherwise\n        // next time it's shown it is expanded again\n        if (this.master && !master) {\n            this.expanded = false;\n        }\n\n        this.master = master;\n        this.dispatchRowEvent('masterChanged');\n    }\n\n    public setGroup(group: boolean): void {\n        if (this.group === group) {\n            return;\n        }\n\n        // if we used to be a group, and no longer, then close the node\n        if (this.group && !group) {\n            this.expanded = false;\n        }\n\n        this.group = group;\n        this.updateHasChildren();\n        this.checkRowSelectable();\n        this.dispatchRowEvent('groupChanged');\n    }\n\n    /**\n     * Sets the row height.\n     * Call if you want to change the height initially assigned to the row.\n     * After calling, you must call `api.onRowHeightChanged()` so the grid knows it needs to work out the placement of the rows. */\n    public setRowHeight(rowHeight: number | undefined | null, estimated: boolean = false): void {\n        this.rowHeight = rowHeight;\n        this.rowHeightEstimated = estimated;\n\n        this.dispatchRowEvent('heightChanged');\n    }\n\n    public setRowAutoHeight(cellHeight: number | undefined, column: AgColumn): void {\n        if (!this.__autoHeights) {\n            this.__autoHeights = {};\n        }\n        this.__autoHeights[column.getId()] = cellHeight;\n\n        if (cellHeight != null) {\n            if (this.checkAutoHeightsDebounced == null) {\n                this.checkAutoHeightsDebounced = _debounce(this.checkAutoHeights.bind(this), 1);\n            }\n            this.checkAutoHeightsDebounced();\n        }\n    }\n\n    public checkAutoHeights(): void {\n        let notAllPresent = false;\n        let nonePresent = true;\n        let newRowHeight = 0;\n\n        const autoHeights = this.__autoHeights!;\n        if (autoHeights == null) {\n            return;\n        }\n\n        const displayedAutoHeightCols = this.beans.visibleColsService.getAllAutoHeightCols();\n        displayedAutoHeightCols.forEach((col) => {\n            let cellHeight = autoHeights[col.getId()];\n\n            if (cellHeight == null) {\n                // If column spanning is active a column may not provide auto height for a row if that\n                // cell is not present for the given row due to a previous cell spanning over the auto height column.\n                if (this.beans.columnModel.isColSpanActive()) {\n                    let activeColsForRow: AgColumn[] = [];\n                    switch (col.getPinned()) {\n                        case 'left':\n                            activeColsForRow = this.beans.visibleColsService.getLeftColsForRow(this);\n                            break;\n                        case 'right':\n                            activeColsForRow = this.beans.visibleColsService.getRightColsForRow(this);\n                            break;\n                        case null:\n                            activeColsForRow = this.beans.columnViewportService.getColsWithinViewport(this);\n                            break;\n                    }\n                    if (activeColsForRow.includes(col)) {\n                        // Column is present in the row, i.e not spanned over, but no auto height was provided so we cannot calculate the row height\n                        notAllPresent = true;\n                        return;\n                    }\n                    // Ignore this column as it is spanned over and not present in the row\n                    cellHeight = -1;\n                } else {\n                    notAllPresent = true;\n                    return;\n                }\n            } else {\n                // At least one auto height is present\n                nonePresent = false;\n            }\n\n            if (cellHeight > newRowHeight) {\n                newRowHeight = cellHeight;\n            }\n        });\n\n        if (notAllPresent) {\n            return;\n        }\n\n        // we take min of 10, so we don't adjust for empty rows. if <10, we put to default.\n        // this prevents the row starting very small when waiting for async components,\n        // which would then mean the grid squashes in far to many rows (as small heights\n        // means more rows fit in) which looks crap. so best ignore small values and assume\n        // we are still waiting for values to render.\n        if (nonePresent || newRowHeight < 10) {\n            newRowHeight = this.beans.gos.getRowHeightForNode(this).height;\n        }\n\n        if (newRowHeight == this.rowHeight) {\n            return;\n        }\n\n        this.setRowHeight(newRowHeight);\n\n        const rowModel = this.beans.rowModel as IClientSideRowModel | IServerSideRowModel;\n        if (rowModel.onRowHeightChangedDebounced) {\n            rowModel.onRowHeightChangedDebounced();\n        }\n    }\n\n    public setRowIndex(rowIndex: number | null): void {\n        this.updateIfDifferent('rowIndex', rowIndex, 'rowIndexChanged');\n    }\n\n    public setUiLevel(uiLevel: number): void {\n        this.updateIfDifferent('uiLevel', uiLevel, 'uiLevelChanged');\n    }\n\n    /**\n     * Set the expanded state of this rowNode. Pass `true` to expand and `false` to collapse.\n     */\n    public setExpanded(expanded: boolean, e?: MouseEvent | KeyboardEvent, forceSync?: boolean): void {\n        if (this.expanded === expanded) {\n            return;\n        }\n\n        this.expanded = expanded;\n\n        this.dispatchRowEvent('expandedChanged');\n\n        const event = { ...this.createGlobalRowEvent('rowGroupOpened'), expanded, event: e || null };\n\n        this.beans.rowNodeEventThrottle.dispatchExpanded(event, forceSync);\n\n        // when using footers we need to refresh the group row, as the aggregation\n        // values jump between group and footer, because the footer can be callback\n        // we refresh regardless as the output of the callback could be a moving target\n        this.beans.rowRenderer.refreshCells({ rowNodes: [this] });\n    }\n\n    private createGlobalRowEvent<T extends AgEventType>(type: T): RowEvent<T, TData> {\n        return this.beans.gos.addGridCommonParams({\n            type: type,\n            node: this,\n            data: this.data,\n            rowIndex: this.rowIndex,\n            rowPinned: this.rowPinned,\n        });\n    }\n\n    /**\n     * Replaces the value on the `rowNode` for the specified column. When complete,\n     * the grid will refresh the rendered cell on the required row only.\n     * **Note**: This method only fires `onCellEditRequest` when the Grid is in **Read Only** mode.\n     *\n     * @param colKey The column where the value should be updated\n     * @param newValue The new value\n     * @param eventSource The source of the event\n     * @returns `true` if the value was changed, otherwise `false`.\n     */\n    public setDataValue(colKey: string | AgColumn, newValue: any, eventSource?: string): boolean {\n        const getColumnFromKey = () => {\n            if (typeof colKey !== 'string') {\n                return colKey;\n            }\n            // if in pivot mode, grid columns wont include primary columns\n            return this.beans.columnModel.getCol(colKey) ?? this.beans.columnModel.getColDefCol(colKey);\n        };\n        // When it is done via the editors, no 'cell changed' event gets fired, as it's assumed that\n        // the cell knows about the change given it's in charge of the editing.\n        // this method is for the client to call, so the cell listens for the change\n        // event, and also flashes the cell when the change occurs.\n        const column = getColumnFromKey()!;\n        const oldValue = this.getValueFromValueService(column);\n\n        if (this.beans.gos.get('readOnlyEdit')) {\n            this.dispatchEventForSaveValueReadOnly(column, oldValue, newValue, eventSource);\n            return false;\n        }\n\n        const valueChanged = this.beans.valueService.setValue(this, column, newValue, eventSource);\n\n        this.dispatchCellChangedEvent(column, newValue, oldValue);\n        this.checkRowSelectable();\n\n        return valueChanged;\n    }\n\n    public getValueFromValueService(column: AgColumn): any {\n        // if we don't check this, then the grid will render leaf groups as open even if we are not\n        // allowing the user to open leaf groups. confused? remember for pivot mode we don't allow\n        // opening leaf groups, so we have to force leafGroups to be closed in case the user expanded\n        // them via the API, or user user expanded them in the UI before turning on pivot mode\n        const lockedClosedGroup = this.leafGroup && this.beans.columnModel.isPivotMode();\n\n        const isOpenGroup = this.group && this.expanded && !this.footer && !lockedClosedGroup;\n\n        let includeFooter = false;\n        // are we showing group footers\n        const groupIncludeFooterOpt = this.beans.gos.get('groupTotalRow') ?? this.beans.gos.get('groupIncludeFooter');\n        if (typeof groupIncludeFooterOpt !== 'function') {\n            includeFooter = !!groupIncludeFooterOpt;\n        } else {\n            const groupIncludeFooterCb: any =\n                this.beans.gos.getCallback('groupTotalRow' as any) ??\n                this.beans.gos.getCallback('groupIncludeFooter' as any);\n            includeFooter = !!groupIncludeFooterCb({ node: this });\n        }\n\n        // if doing footers, we normally don't show agg data at group level when group is open\n        const groupAlwaysShowAggData = this.beans.gos.get('groupSuppressBlankHeader');\n\n        // if doing grouping and footers, we don't want to include the agg value\n        // in the header when the group is open\n        const ignoreAggData = isOpenGroup && includeFooter && !groupAlwaysShowAggData;\n\n        const value = this.beans.valueService.getValue(column, this, false, ignoreAggData);\n\n        return value;\n    }\n\n    private dispatchEventForSaveValueReadOnly(\n        column: AgColumn,\n        oldValue: any,\n        newValue: any,\n        eventSource?: string\n    ): void {\n        const event: CellEditRequestEvent = this.beans.gos.addGridCommonParams({\n            type: 'cellEditRequest',\n            event: null,\n            rowIndex: this.rowIndex!,\n            rowPinned: this.rowPinned,\n            column: column,\n            colDef: column.getColDef(),\n            data: this.data,\n            node: this,\n            oldValue,\n            newValue,\n            value: newValue,\n            source: eventSource,\n        });\n\n        this.beans.eventService.dispatchEvent(event);\n    }\n\n    public setGroupValue(colKey: string | AgColumn, newValue: any): void {\n        const column = this.beans.columnModel.getCol(colKey)!;\n\n        if (_missing(this.groupData)) {\n            this.groupData = {};\n        }\n\n        const columnId = column.getColId();\n        const oldValue = this.groupData[columnId];\n\n        if (oldValue === newValue) {\n            return;\n        }\n\n        this.groupData[columnId] = newValue;\n        this.dispatchCellChangedEvent(column, newValue, oldValue);\n    }\n\n    // sets the data for an aggregation\n    public setAggData(newAggData: any): void {\n        const oldAggData = this.aggData;\n        this.aggData = newAggData;\n\n        // if no event service, nobody has registered for events, so no need fire event\n        if (this.localEventService) {\n            const eventFunc = (colId: string) => {\n                const value = this.aggData ? this.aggData[colId] : undefined;\n                const oldValue = oldAggData ? oldAggData[colId] : undefined;\n\n                if (value === oldValue) {\n                    return;\n                }\n\n                // do a quick lookup - despite the event it's possible the column no longer exists\n                const column = this.beans.columnModel.getCol(colId)!;\n                if (!column) {\n                    return;\n                }\n\n                this.dispatchCellChangedEvent(column, value, oldValue);\n            };\n\n            for (const key in this.aggData) {\n                eventFunc(key);\n            }\n            for (const key in newAggData) {\n                if (key in this.aggData) {\n                    continue;\n                } // skip if already fired an event.\n                eventFunc(key);\n            }\n        }\n    }\n\n    public updateHasChildren(): void {\n        // in CSRM, the group property will be set before the childrenAfterGroup property, check both to prevent flickering\n        let newValue: boolean | null =\n            (this.group && !this.footer) || (this.childrenAfterGroup && this.childrenAfterGroup.length > 0);\n\n        const isSsrm = this.beans.gos.isRowModelType('serverSide');\n        if (isSsrm) {\n            const isTreeData = this.beans.gos.get('treeData');\n            const isGroupFunc = this.beans.gos.get('isServerSideGroup');\n            // stubs and footers can never have children, as they're grid rows. if tree data the presence of children\n            // is determined by the isServerSideGroup callback, if not tree data then the rows group property will be set.\n            newValue =\n                !this.stub && !this.footer && (isTreeData ? !!isGroupFunc && isGroupFunc(this.data) : !!this.group);\n        }\n\n        if (newValue !== this.__hasChildren) {\n            this.__hasChildren = !!newValue;\n            this.dispatchRowEvent('hasChildrenChanged');\n        }\n    }\n\n    public hasChildren(): boolean {\n        if (this.__hasChildren == null) {\n            this.updateHasChildren();\n        }\n        return this.__hasChildren;\n    }\n\n    public isEmptyRowGroupNode(): boolean {\n        return (this.group && _missingOrEmpty(this.childrenAfterGroup)) ?? false;\n    }\n\n    private dispatchCellChangedEvent(column: AgColumn, newValue: TData, oldValue: TData): void {\n        const cellChangedEvent: CellChangedEvent<TData> = {\n            type: 'cellChanged',\n            node: this,\n            column: column,\n            newValue: newValue,\n            oldValue: oldValue,\n        };\n        this.localEventService?.dispatchEvent(cellChangedEvent);\n    }\n\n    /**\n     * The first time `quickFilter` runs, the grid creates a one-off string representation of the row.\n     * This string is then used for the quick filter instead of hitting each column separately.\n     * When you edit, using grid editing, this string gets cleared down.\n     * However if you edit without using grid editing, you will need to clear this string down for the row to be updated with the new values.\n     * Otherwise new values will not work with the `quickFilter`. */\n    public resetQuickFilterAggregateText(): void {\n        this.quickFilterAggregateText = null;\n    }\n\n    /** Returns:\n     * - `true` if the node can be expanded, i.e it is a group or master row.\n     * - `false` if the node cannot be expanded\n     */\n    public isExpandable(): boolean {\n        if (this.footer) {\n            return false;\n        }\n\n        if (this.beans.columnModel.isPivotMode()) {\n            // master detail and leaf groups aren't expandable in pivot mode.\n            return this.hasChildren() && !this.leafGroup;\n        }\n        return this.hasChildren() || !!this.master;\n    }\n\n    /** Returns:\n     * - `true` if node is selected,\n     * - `false` if the node isn't selected\n     * - `undefined` if it's partially selected (group where not all children are selected). */\n    public isSelected(): boolean | undefined {\n        // for footers, we just return what our sibling selected state is, as cannot select a footer\n        if (this.footer) {\n            return this.sibling.isSelected();\n        }\n\n        return this.selected;\n    }\n\n    /** Perform a depth-first search of this node and its children. */\n    public depthFirstSearch(callback: (rowNode: RowNode<TData>) => void): void {\n        if (this.childrenAfterGroup) {\n            this.childrenAfterGroup.forEach((child) => child.depthFirstSearch(callback));\n        }\n        callback(this);\n    }\n\n    // + selectionController.calculatedSelectedForAllGroupNodes()\n    public calculateSelectedFromChildren(): boolean | undefined | null {\n        let atLeastOneSelected = false;\n        let atLeastOneDeSelected = false;\n        let atLeastOneMixed = false;\n\n        if (!this.childrenAfterGroup?.length) {\n            return this.selectable ? this.selected : null;\n        }\n\n        for (let i = 0; i < this.childrenAfterGroup.length; i++) {\n            const child = this.childrenAfterGroup[i];\n\n            let childState = child.isSelected();\n            // non-selectable nodes must be calculated from their children, or ignored if no value results.\n            if (!child.selectable) {\n                const selectable = child.calculateSelectedFromChildren();\n                if (selectable === null) {\n                    continue;\n                }\n                childState = selectable;\n            }\n\n            switch (childState) {\n                case true:\n                    atLeastOneSelected = true;\n                    break;\n                case false:\n                    atLeastOneDeSelected = true;\n                    break;\n                default:\n                    atLeastOneMixed = true;\n                    break;\n            }\n        }\n\n        if (atLeastOneMixed || (atLeastOneSelected && atLeastOneDeSelected)) {\n            return undefined;\n        }\n\n        if (atLeastOneSelected) {\n            return true;\n        }\n\n        if (atLeastOneDeSelected) {\n            return false;\n        }\n\n        if (!this.selectable) {\n            return null;\n        }\n\n        return this.selected;\n    }\n\n    public setSelectedInitialValue(selected?: boolean): void {\n        this.selected = selected;\n    }\n\n    public dispatchRowEvent<T extends RowNodeEventType>(type: T): void {\n        const event = {\n            type: type,\n            node: this,\n        };\n        this.localEventService?.dispatchEvent(event);\n    }\n\n    public selectThisNode(newValue?: boolean, e?: Event, source: SelectionEventSourceType = 'api'): boolean {\n        // we only check selectable when newValue=true (ie selecting) to allow unselecting values,\n        // as selectable is dynamic, need a way to unselect rows when selectable becomes false.\n        const selectionNotAllowed = !this.selectable && newValue;\n        const selectionNotChanged = this.selected === newValue;\n\n        if (selectionNotAllowed || selectionNotChanged) {\n            return false;\n        }\n\n        this.selected = newValue;\n\n        this.dispatchRowEvent('rowSelected');\n\n        // in case of root node, sibling may have service while this row may not\n        const sibling = this.sibling;\n        if (sibling && sibling.footer && sibling.localEventService) {\n            sibling.dispatchRowEvent('rowSelected');\n        }\n\n        const event: RowSelectedEvent = {\n            ...this.createGlobalRowEvent('rowSelected'),\n            event: e || null,\n            source,\n        };\n\n        this.beans.eventService.dispatchEvent(event);\n\n        return true;\n    }\n\n    /**\n     * Select (or deselect) the node.\n     * @param newValue -`true` for selection, `false` for deselection.\n     * @param clearSelection - If selecting, then passing `true` will select the node exclusively (i.e. NOT do multi select). If doing deselection, `clearSelection` has no impact.\n     * @param source - Source property that will appear in the `selectionChanged` event.\n     */\n    public setSelected(newValue: boolean, clearSelection: boolean = false, source: SelectionEventSourceType = 'api') {\n        if (typeof source === 'boolean') {\n            _warnOnce(\n                'since version v30, rowNode.setSelected() property `suppressFinishActions` has been removed, please use `gridApi.setNodesSelected()` for bulk actions, and the event `source` property for ignoring events instead.'\n            );\n            return;\n        }\n\n        this.setSelectedParams({\n            newValue,\n            clearSelection,\n            rangeSelect: false,\n            source,\n        });\n    }\n\n    // this is for internal use only. To make calling code more readable, this is the same method as setSelected except it takes names parameters\n    public setSelectedParams(params: SetSelectedParams & { event?: Event }): number {\n        if (this.rowPinned) {\n            _warnOnce('cannot select pinned rows');\n            return 0;\n        }\n\n        if (this.id === undefined) {\n            _warnOnce('cannot select node until id for node is known');\n            return 0;\n        }\n\n        return this.beans.selectionService.setNodesSelected({ ...params, nodes: [this.footer ? this.sibling : this] });\n    }\n\n    /**\n     * Returns:\n     * - `true` if node is either pinned to the `top` or `bottom`\n     * - `false` if the node isn't pinned\n     */\n    public isRowPinned(): boolean {\n        return this.rowPinned === 'top' || this.rowPinned === 'bottom';\n    }\n\n    public isParentOfNode(potentialParent: RowNode): boolean {\n        let parentNode = this.parent;\n\n        while (parentNode) {\n            if (parentNode === potentialParent) {\n                return true;\n            }\n            parentNode = parentNode.parent;\n        }\n\n        return false;\n    }\n\n    /** Add an event listener. */\n    public addEventListener<T extends RowNodeEventType>(eventType: T, userListener: AgRowNodeEventListener<T>): void {\n        if (!this.localEventService) {\n            this.localEventService = new LocalEventService();\n        }\n        if (this.beans.frameworkOverrides.shouldWrapOutgoing && !this.frameworkEventListenerService) {\n            this.localEventService.setFrameworkOverrides(this.beans.frameworkOverrides);\n            this.frameworkEventListenerService = new FrameworkEventListenerService(this.beans.frameworkOverrides);\n        }\n\n        const listener = this.frameworkEventListenerService?.wrap(userListener) ?? userListener;\n        this.localEventService.addEventListener(eventType, listener);\n    }\n\n    /** Remove event listener. */\n    public removeEventListener<T extends RowNodeEventType>(\n        eventType: T,\n        userListener: AgRowNodeEventListener<T>\n    ): void {\n        if (!this.localEventService) {\n            return;\n        }\n\n        const listener = this.frameworkEventListenerService?.unwrap(userListener) ?? userListener;\n        this.localEventService.removeEventListener(eventType, listener);\n        if (this.localEventService.noRegisteredListenersExist()) {\n            this.localEventService = null;\n        }\n    }\n\n    public onMouseEnter(): void {\n        this.dispatchRowEvent('mouseEnter');\n    }\n\n    public onMouseLeave(): void {\n        this.dispatchRowEvent('mouseLeave');\n    }\n\n    public getFirstChildOfFirstChild(rowGroupColumn: AgColumn | null): RowNode | null {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let currentRowNode: RowNode = this;\n        let isCandidate = true;\n        let foundFirstChildPath = false;\n        let nodeToSwapIn: RowNode | null = null;\n\n        // if we are hiding groups, then if we are the first child, of the first child,\n        // all the way up to the column we are interested in, then we show the group cell.\n        while (isCandidate && !foundFirstChildPath) {\n            const parentRowNode = currentRowNode.parent!;\n            const firstChild = _exists(parentRowNode) && currentRowNode.firstChild;\n\n            if (firstChild) {\n                if (parentRowNode.rowGroupColumn === rowGroupColumn) {\n                    foundFirstChildPath = true;\n                    nodeToSwapIn = parentRowNode;\n                }\n            } else {\n                isCandidate = false;\n            }\n\n            currentRowNode = parentRowNode;\n        }\n\n        return foundFirstChildPath ? nodeToSwapIn : null;\n    }\n\n    /**\n     * Returns:\n     * - `true` if the node is a full width cell\n     * - `false` if the node is not a full width cell\n     */\n    public isFullWidthCell(): boolean {\n        if (this.detail) {\n            return true;\n        }\n\n        const isFullWidthCellFunc = this.beans.gos.getCallback('isFullWidthRow');\n        return isFullWidthCellFunc ? isFullWidthCellFunc({ rowNode: this }) : false;\n    }\n\n    /**\n     * Returns the route of the row node. If the Row Node is a group, it returns the route to that Row Node.\n     * If the Row Node is not a group, it returns `undefined`.\n     */\n    public getRoute(): string[] | undefined {\n        if (this.key == null) {\n            return;\n        }\n\n        const res: string[] = [];\n\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let pointer: RowNode | null = this;\n\n        while (pointer && pointer.key != null) {\n            res.push(pointer.key);\n            pointer = pointer.parent;\n        }\n\n        return res.reverse();\n    }\n\n    public createFooter(): void {\n        // only create footer node once, otherwise we have daemons and\n        // the animate screws up with the daemons hanging around\n        if (this.sibling) {\n            return;\n        }\n\n        // we don't copy these properties as they cause the footer node\n        // to have properties which should be unique to the row.\n        const ignoredProperties = new Set(['eventService', '__objectId', 'sticky']);\n        const footerNode = new RowNode(this.beans);\n\n        Object.keys(this).forEach((key) => {\n            if (ignoredProperties.has(key)) {\n                return;\n            }\n            (footerNode as any)[key] = (this as any)[key];\n        });\n\n        footerNode.footer = true;\n        footerNode.setRowTop(null);\n        footerNode.setRowIndex(null);\n\n        // manually set oldRowTop to null so we discard any\n        // previous information about its position.\n        footerNode.oldRowTop = null;\n\n        footerNode.id = 'rowGroupFooter_' + this.id;\n\n        // get both header and footer to reference each other as siblings. this is never undone,\n        // only overwritten. so if a group is expanded, then contracted, it will have a ghost\n        // sibling - but that's fine, as we can ignore this if the header is contracted.\n        footerNode.sibling = this;\n        this.sibling = footerNode;\n    }\n\n    // Only used by SSRM. In CSRM this is never used as footers should always be present for\n    // the purpose of exporting collapsed groups. In SSRM it is not possible to export collapsed\n    // groups anyway, so can destroy footers.\n    public destroyFooter(): void {\n        if (!this.sibling) {\n            return;\n        }\n\n        this.sibling.setRowTop(null);\n        this.sibling.setRowIndex(null);\n\n        this.sibling = undefined as any;\n    }\n}\n", "import type { ColumnModel } from '../columns/columnModel';\nimport type { DataTypeService } from '../columns/dataTypeService';\nimport type { UserCompDetails } from '../components/framework/userComponentFactory';\nimport type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { ColDef } from '../entities/colDef';\nimport type { RowNode } from '../entities/rowNode';\nimport type { FilterChangedEvent, FilterChangedEventSourceType } from '../events';\nimport type { AdvancedFilterModel } from '../interfaces/advancedFilterModel';\nimport type { IAdvancedFilterService } from '../interfaces/iAdvancedFilterService';\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\nimport type { FilterModel, IFilter, IFilterComp, IFilterParams } from '../interfaces/iFilter';\nimport { _warnOnce } from '../utils/function';\nimport { _mergeDeep } from '../utils/object';\nimport { AgPromise } from '../utils/promise';\nimport type { ColumnFilterService, FilterWrapper } from './columnFilterService';\nimport type { QuickFilterService } from './quickFilterService';\n\nexport class FilterManager extends BeanStub implements NamedBean {\n    beanName = 'filterManager' as const;\n\n    private columnModel: ColumnModel;\n    private dataTypeService?: DataTypeService;\n    private quickFilterService?: QuickFilterService;\n    private advancedFilterService: IAdvancedFilterService;\n    private columnFilterService?: ColumnFilterService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.columnModel = beans.columnModel;\n        this.dataTypeService = beans.dataTypeService;\n        this.quickFilterService = beans.quickFilterService;\n        this.advancedFilterService = beans.advancedFilterService;\n        this.columnFilterService = beans.columnFilterService;\n    }\n\n    // A cached version of gridOptions.isExternalFilterPresent so its not called for every row\n    private externalFilterPresent: boolean;\n\n    private aggFiltering: boolean;\n\n    // when we're waiting for cell data types to be inferred, we need to defer filter model updates\n    private advancedFilterModelUpdateQueue: (AdvancedFilterModel | null | undefined)[] = [];\n\n    public postConstruct(): void {\n        this.addManagedEventListeners({\n            columnValueChanged: this.refreshFiltersForAggregations.bind(this),\n            columnPivotChanged: this.refreshFiltersForAggregations.bind(this),\n            columnPivotModeChanged: this.refreshFiltersForAggregations.bind(this),\n            newColumnsLoaded: this.updateAdvancedFilterColumns.bind(this),\n            columnVisible: this.updateAdvancedFilterColumns.bind(this),\n            advancedFilterEnabledChanged: ({ enabled }) => this.onAdvancedFilterEnabledChanged(enabled),\n            dataTypesInferred: this.processFilterModelUpdateQueue.bind(this),\n        });\n\n        this.externalFilterPresent = this.isExternalFilterPresentCallback();\n        this.addManagedPropertyListeners(['isExternalFilterPresent', 'doesExternalFilterPass'], () => {\n            this.onFilterChanged({ source: 'api' });\n        });\n\n        this.updateAggFiltering();\n        this.addManagedPropertyListener('groupAggFiltering', () => {\n            this.updateAggFiltering();\n            this.onFilterChanged();\n        });\n\n        this.addManagedPropertyListener('advancedFilterModel', (event) =>\n            this.setAdvancedFilterModel(event.currentValue)\n        );\n\n        if (this.quickFilterService) {\n            this.addManagedListeners(this.quickFilterService, {\n                quickFilterChanged: () => this.onFilterChanged({ source: 'quickFilter' }),\n            });\n        }\n    }\n\n    private isExternalFilterPresentCallback() {\n        const isFilterPresent = this.gos.getCallback('isExternalFilterPresent');\n        if (typeof isFilterPresent === 'function') {\n            return isFilterPresent({});\n        }\n        return false;\n    }\n\n    private doesExternalFilterPass(node: RowNode) {\n        const doesFilterPass = this.gos.get('doesExternalFilterPass');\n        if (typeof doesFilterPass === 'function') {\n            return doesFilterPass(node);\n        }\n        return false;\n    }\n\n    public setFilterModel(model: FilterModel | null, source: FilterChangedEventSourceType = 'api'): void {\n        if (this.isAdvancedFilterEnabled()) {\n            this.warnAdvancedFilters();\n            return;\n        }\n\n        this.columnFilterService?.setFilterModel(model, source);\n    }\n\n    public getFilterModel(): FilterModel {\n        return this.columnFilterService?.getFilterModel() ?? {};\n    }\n\n    public isColumnFilterPresent(): boolean {\n        return !!this.columnFilterService?.isColumnFilterPresent();\n    }\n\n    public isAggregateFilterPresent(): boolean {\n        return !!this.columnFilterService?.isAggregateFilterPresent();\n    }\n\n    public isExternalFilterPresent(): boolean {\n        return this.externalFilterPresent;\n    }\n\n    public isChildFilterPresent(): boolean {\n        return (\n            this.isColumnFilterPresent() ||\n            this.isQuickFilterPresent() ||\n            this.isExternalFilterPresent() ||\n            this.isAdvancedFilterPresent()\n        );\n    }\n\n    private isAdvancedFilterPresent(): boolean {\n        return this.isAdvancedFilterEnabled() && this.advancedFilterService.isFilterPresent();\n    }\n\n    private onAdvancedFilterEnabledChanged(enabled: boolean): void {\n        if (enabled) {\n            if (this.columnFilterService?.disableColumnFilters()) {\n                this.onFilterChanged({ source: 'advancedFilter' });\n            }\n        } else {\n            if (this.advancedFilterService?.isFilterPresent()) {\n                this.advancedFilterService.setModel(null);\n                this.onFilterChanged({ source: 'advancedFilter' });\n            }\n        }\n    }\n\n    public isAdvancedFilterEnabled(): boolean {\n        return !!this.advancedFilterService?.isEnabled();\n    }\n\n    public isAdvancedFilterHeaderActive(): boolean {\n        return this.isAdvancedFilterEnabled() && this.advancedFilterService.isHeaderActive();\n    }\n\n    public isAnyFilterPresent(): boolean {\n        return (\n            this.isQuickFilterPresent() ||\n            this.isColumnFilterPresent() ||\n            this.isAggregateFilterPresent() ||\n            this.isExternalFilterPresent() ||\n            this.isAdvancedFilterPresent()\n        );\n    }\n\n    public resetQuickFilterCache(): void {\n        this.quickFilterService?.resetQuickFilterCache();\n    }\n\n    private refreshFiltersForAggregations() {\n        const isAggFiltering = this.gos.getGroupAggFiltering();\n        if (isAggFiltering) {\n            this.onFilterChanged();\n        }\n    }\n\n    public onFilterChanged(\n        params: {\n            source?: FilterChangedEventSourceType;\n            filterInstance?: IFilterComp;\n            additionalEventAttributes?: any;\n            columns?: AgColumn[];\n        } = {}\n    ): void {\n        const { source, additionalEventAttributes, columns = [] } = params;\n        this.externalFilterPresent = this.isExternalFilterPresentCallback();\n        (this.columnFilterService\n            ? this.columnFilterService.updateBeforeFilterChanged(params)\n            : AgPromise.resolve()\n        ).then(() => {\n            const filterChangedEvent: WithoutGridCommon<FilterChangedEvent> = {\n                source,\n                type: 'filterChanged',\n                columns,\n            };\n\n            if (additionalEventAttributes) {\n                _mergeDeep(filterChangedEvent, additionalEventAttributes);\n            }\n\n            this.eventService.dispatchEvent(filterChangedEvent);\n\n            this.columnFilterService?.updateAfterFilterChanged();\n        });\n    }\n\n    public isSuppressFlashingCellsBecauseFiltering(): boolean {\n        return !!this.columnFilterService?.isSuppressFlashingCellsBecauseFiltering();\n    }\n\n    public isQuickFilterPresent(): boolean {\n        return !!this.quickFilterService?.isQuickFilterPresent();\n    }\n\n    private updateAggFiltering(): void {\n        this.aggFiltering = !!this.gos.getGroupAggFiltering();\n    }\n\n    public isAggregateQuickFilterPresent(): boolean {\n        return this.isQuickFilterPresent() && this.shouldApplyQuickFilterAfterAgg();\n    }\n\n    private isNonAggregateQuickFilterPresent(): boolean {\n        return this.isQuickFilterPresent() && !this.shouldApplyQuickFilterAfterAgg();\n    }\n\n    private shouldApplyQuickFilterAfterAgg(): boolean {\n        return (\n            (this.aggFiltering || this.columnModel.isPivotMode()) && !this.gos.get('applyQuickFilterBeforePivotOrAgg')\n        );\n    }\n\n    public doesRowPassOtherFilters(filterToSkip: IFilterComp, node: any): boolean {\n        return this.doesRowPassFilter({ rowNode: node, filterInstanceToSkip: filterToSkip });\n    }\n\n    public doesRowPassAggregateFilters(params: { rowNode: RowNode; filterInstanceToSkip?: IFilterComp }): boolean {\n        // check quick filter\n        if (this.isAggregateQuickFilterPresent() && !this.quickFilterService!.doesRowPassQuickFilter(params.rowNode)) {\n            return false;\n        }\n\n        if (\n            this.isAggregateFilterPresent() &&\n            !this.columnFilterService!.doAggregateFiltersPass(params.rowNode, params.filterInstanceToSkip)\n        ) {\n            return false;\n        }\n\n        // got this far, all filters pass\n        return true;\n    }\n\n    public doesRowPassFilter(params: { rowNode: RowNode; filterInstanceToSkip?: IFilterComp }): boolean {\n        // the row must pass ALL of the filters, so if any of them fail,\n        // we return true. that means if a row passes the quick filter,\n        // but fails the column filter, it fails overall\n\n        // first up, check quick filter\n        if (\n            this.isNonAggregateQuickFilterPresent() &&\n            !this.quickFilterService!.doesRowPassQuickFilter(params.rowNode)\n        ) {\n            return false;\n        }\n\n        // secondly, give the client a chance to reject this row\n        if (this.isExternalFilterPresent() && !this.doesExternalFilterPass(params.rowNode)) {\n            return false;\n        }\n\n        // lastly, check column filter\n        if (\n            this.isColumnFilterPresent() &&\n            !this.columnFilterService!.doColumnFiltersPass(params.rowNode, params.filterInstanceToSkip)\n        ) {\n            return false;\n        }\n\n        if (this.isAdvancedFilterPresent() && !this.advancedFilterService.doesFilterPass(params.rowNode)) {\n            return false;\n        }\n\n        // got this far, all filters pass\n        return true;\n    }\n\n    public isFilterActive(column: AgColumn): boolean {\n        return !!this.columnFilterService?.isFilterActive(column);\n    }\n\n    public getOrCreateFilterWrapper(column: AgColumn): FilterWrapper | null {\n        return this.columnFilterService?.getOrCreateFilterWrapper(column) ?? null;\n    }\n\n    public getDefaultFloatingFilter(column: AgColumn): string {\n        return this.columnFilterService!.getDefaultFloatingFilter(column);\n    }\n\n    public createFilterParams(column: AgColumn, colDef: ColDef): IFilterParams {\n        return this.columnFilterService!.createFilterParams(column, colDef);\n    }\n\n    // for group filters, can change dynamically whether they are allowed or not\n    public isFilterAllowed(column: AgColumn): boolean {\n        if (this.isAdvancedFilterEnabled()) {\n            return false;\n        }\n        return !!this.columnFilterService?.isFilterAllowed(column);\n    }\n\n    public getFloatingFilterCompDetails(column: AgColumn, showParentFilter: () => void): UserCompDetails | undefined {\n        return this.columnFilterService?.getFloatingFilterCompDetails(column, showParentFilter);\n    }\n\n    public getCurrentFloatingFilterParentModel(column: AgColumn): any {\n        return this.columnFilterService?.getCurrentFloatingFilterParentModel(column);\n    }\n\n    // destroys the filter, so it no longer takes part\n    public destroyFilter(column: AgColumn, source: 'api' | 'columnChanged' | 'paramsUpdated' = 'api'): void {\n        this.columnFilterService?.destroyFilter(column, source);\n    }\n\n    public areFilterCompsDifferent(\n        oldCompDetails: UserCompDetails | null,\n        newCompDetails: UserCompDetails | null\n    ): boolean {\n        return !!this.columnFilterService?.areFilterCompsDifferent(oldCompDetails, newCompDetails);\n    }\n\n    public getAdvancedFilterModel(): AdvancedFilterModel | null {\n        return this.isAdvancedFilterEnabled() ? this.advancedFilterService.getModel() : null;\n    }\n\n    public setAdvancedFilterModel(expression: AdvancedFilterModel | null | undefined): void {\n        if (!this.isAdvancedFilterEnabled()) {\n            return;\n        }\n        if (this.dataTypeService?.isPendingInference()) {\n            this.advancedFilterModelUpdateQueue.push(expression);\n            return;\n        }\n        this.advancedFilterService.setModel(expression ?? null);\n        this.onFilterChanged({ source: 'advancedFilter' });\n    }\n\n    public toggleAdvancedFilterBuilder(show: boolean, source: 'api' | 'ui'): void {\n        if (!this.isAdvancedFilterEnabled()) {\n            return;\n        }\n        this.advancedFilterService.getCtrl().toggleFilterBuilder(source, show);\n    }\n\n    private updateAdvancedFilterColumns(): void {\n        if (!this.isAdvancedFilterEnabled()) {\n            return;\n        }\n        if (this.advancedFilterService.updateValidity()) {\n            this.onFilterChanged({ source: 'advancedFilter' });\n        }\n    }\n\n    public hasFloatingFilters(): boolean {\n        if (this.isAdvancedFilterEnabled()) {\n            return false;\n        }\n        return !!this.columnFilterService?.hasFloatingFilters();\n    }\n\n    public getFilterInstance<TFilter extends IFilter>(\n        key: string | AgColumn,\n        callback?: (filter: TFilter | null) => void\n    ): undefined {\n        if (this.isAdvancedFilterEnabled()) {\n            this.warnAdvancedFilters();\n            return undefined;\n        }\n        return this.columnFilterService?.getFilterInstance(key, callback);\n    }\n\n    public getColumnFilterInstance<TFilter extends IFilter>(\n        key: string | AgColumn\n    ): Promise<TFilter | null | undefined> {\n        if (this.isAdvancedFilterEnabled()) {\n            this.warnAdvancedFilters();\n            return Promise.resolve(undefined);\n        }\n        return this.columnFilterService?.getColumnFilterInstance(key) ?? Promise.resolve(undefined);\n    }\n\n    private warnAdvancedFilters(): void {\n        _warnOnce('Column Filter API methods have been disabled as Advanced Filters are enabled.');\n    }\n\n    public setupAdvancedFilterHeaderComp(eCompToInsertBefore: HTMLElement): void {\n        this.advancedFilterService?.getCtrl().setupHeaderComp(eCompToInsertBefore);\n    }\n\n    public getHeaderRowCount(): number {\n        return this.isAdvancedFilterHeaderActive() ? 1 : 0;\n    }\n\n    public getHeaderHeight(): number {\n        return this.isAdvancedFilterHeaderActive() ? this.advancedFilterService.getCtrl().getHeaderHeight() : 0;\n    }\n\n    private processFilterModelUpdateQueue(): void {\n        this.advancedFilterModelUpdateQueue.forEach((model) => this.setAdvancedFilterModel(model));\n        this.advancedFilterModelUpdateQueue = [];\n    }\n\n    public getColumnFilterModel(key: string | AgColumn): any {\n        return this.columnFilterService?.getColumnFilterModel(key);\n    }\n\n    public setColumnFilterModel(key: string | AgColumn, model: any): Promise<void> {\n        if (this.isAdvancedFilterEnabled()) {\n            this.warnAdvancedFilters();\n            return Promise.resolve();\n        }\n        return this.columnFilterService?.setColumnFilterModel(key, model) ?? Promise.resolve();\n    }\n}\n", "import type { ColumnModel } from '../columns/columnModel';\nimport type { BeanCollection } from '../context/context';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { FilterDestroyedEvent, FilterOpenedEvent } from '../events';\nimport type { IAfterGuiAttachedParams } from '../interfaces/iAfterGuiAttachedParams';\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\nimport type { IFilterComp } from '../interfaces/iFilter';\nimport { _clearElement } from '../utils/dom';\nimport { _warnOnce } from '../utils/function';\nimport { _exists } from '../utils/generic';\nimport { AgPromise } from '../utils/promise';\nimport { Component } from '../widgets/component';\nimport type { FilterWrapper } from './columnFilterService';\nimport type { FilterManager } from './filterManager';\nimport type { FilterRequestSource } from './iColumnFilter';\n\nexport class FilterWrapperComp extends Component {\n    private filterManager?: FilterManager;\n    private columnModel: ColumnModel;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.filterManager = beans.filterManager;\n        this.columnModel = beans.columnModel;\n    }\n\n    private filterWrapper: FilterWrapper | null = null;\n\n    constructor(\n        private readonly column: AgColumn,\n        private readonly source: FilterRequestSource\n    ) {\n        super(/* html */ `<div class=\"ag-filter\"></div>`);\n    }\n\n    public postConstruct(): void {\n        this.createFilter(true);\n\n        this.addManagedEventListeners({ filterDestroyed: this.onFilterDestroyed.bind(this) });\n    }\n\n    public hasFilter(): boolean {\n        return !!this.filterWrapper;\n    }\n\n    public getFilter(): AgPromise<IFilterComp> | null {\n        return this.filterWrapper?.filterPromise ?? null;\n    }\n\n    public afterInit(): AgPromise<void> {\n        return this.filterWrapper?.filterPromise?.then(() => {}) ?? AgPromise.resolve();\n    }\n\n    public afterGuiAttached(params?: IAfterGuiAttachedParams): void {\n        this.filterWrapper?.filterPromise?.then((filter) => {\n            filter?.afterGuiAttached?.(params);\n        });\n    }\n\n    public afterGuiDetached(): void {\n        this.filterWrapper?.filterPromise?.then((filter) => {\n            filter?.afterGuiDetached?.();\n        });\n    }\n\n    private createFilter(init?: boolean): void {\n        const { column, source } = this;\n        this.filterWrapper = this.filterManager?.getOrCreateFilterWrapper(column) ?? null;\n        if (!this.filterWrapper?.filterPromise) {\n            return;\n        }\n        this.filterWrapper.filterPromise.then((filter) => {\n            const guiFromFilter = filter!.getGui();\n\n            if (!_exists(guiFromFilter)) {\n                _warnOnce(`getGui method from filter returned ${guiFromFilter}; it should be a DOM element.`);\n            }\n\n            this.appendChild(guiFromFilter);\n            if (init) {\n                const event: WithoutGridCommon<FilterOpenedEvent> = {\n                    type: 'filterOpened',\n                    column,\n                    source,\n                    eGui: this.getGui(),\n                };\n                this.eventService.dispatchEvent(event);\n            }\n        });\n    }\n\n    private onFilterDestroyed(event: FilterDestroyedEvent): void {\n        if (\n            (event.source === 'api' || event.source === 'paramsUpdated') &&\n            event.column.getId() === this.column.getId() &&\n            this.columnModel.getColDefCol(this.column)\n        ) {\n            // filter has been destroyed by the API or params changing. If the column still exists, need to recreate UI component\n            _clearElement(this.getGui());\n            this.createFilter();\n        }\n    }\n\n    public override destroy(): void {\n        this.filterWrapper = null;\n        super.destroy();\n    }\n}\n", "import { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { DragListenerParams, DragService } from '../../dragAndDrop/dragService';\nimport type { ResizeObserverService } from '../../misc/resizeObserverService';\nimport { _getAbsoluteHeight, _getAbsoluteWidth, _isVisible, _setFixedHeight, _setFixedWidth } from '../../utils/dom';\nimport type { PopupService } from '../../widgets/popupService';\n\nconst RESIZE_CONTAINER_STYLE = 'ag-resizer-wrapper';\n\nconst RESIZE_TEMPLATE =\n    /* html */\n    `<div class=\"${RESIZE_CONTAINER_STYLE}\">\n        <div data-ref=\"eTopLeftResizer\" class=\"ag-resizer ag-resizer-topLeft\"></div>\n        <div data-ref=\"eTopResizer\" class=\"ag-resizer ag-resizer-top\"></div>\n        <div data-ref=\"eTopRightResizer\" class=\"ag-resizer ag-resizer-topRight\"></div>\n        <div data-ref=\"eRightResizer\" class=\"ag-resizer ag-resizer-right\"></div>\n        <div data-ref=\"eBottomRightResizer\" class=\"ag-resizer ag-resizer-bottomRight\"></div>\n        <div data-ref=\"eBottomResizer\" class=\"ag-resizer ag-resizer-bottom\"></div>\n        <div data-ref=\"eBottomLeftResizer\" class=\"ag-resizer ag-resizer-bottomLeft\"></div>\n        <div data-ref=\"eLeftResizer\" class=\"ag-resizer ag-resizer-left\"></div>\n    </div>`;\n\nexport interface PositionableOptions {\n    popup?: boolean;\n    minWidth?: number | null;\n    width?: number | string | null;\n    minHeight?: number | null;\n    height?: number | string | null;\n    centered?: boolean | null;\n    calculateTopBuffer?: () => number;\n    /**\n     * Used for when a popup needs to be resized by an element within itself\n     * In that case, the feature will configured as `popup=false` but the offsetParent\n     * needs to be the popupParent.\n     */\n    forcePopupParentAsOffsetParent?: boolean;\n    x?: number | null;\n    y?: number | null;\n}\n\nexport type ResizableSides =\n    | 'topLeft'\n    | 'top'\n    | 'topRight'\n    | 'right'\n    | 'bottomRight'\n    | 'bottom'\n    | 'bottomLeft'\n    | 'left';\n\nexport type ResizableStructure = {\n    [key in ResizableSides]?: boolean;\n};\n\ninterface MappedResizer {\n    element: HTMLElement;\n    dragSource?: DragListenerParams;\n}\n\nexport type PositionableFeatureEvent = 'resize';\nexport class PositionableFeature extends BeanStub<PositionableFeatureEvent> {\n    protected popupService: PopupService;\n    private resizeObserverService: ResizeObserverService;\n    private dragService: DragService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.popupService = beans.popupService;\n        this.resizeObserverService = beans.resizeObserverService;\n        this.dragService = beans.dragService;\n    }\n\n    private dragStartPosition = {\n        x: 0,\n        y: 0,\n    };\n\n    private position = {\n        x: 0,\n        y: 0,\n    };\n\n    private lastSize = {\n        width: -1,\n        height: -1,\n    };\n\n    private resizerMap:\n        | {\n              [key in ResizableSides]: MappedResizer;\n          }\n        | undefined;\n\n    private minWidth: number;\n    private minHeight?: number;\n    private positioned = false;\n    private resizersAdded = false;\n    private config: PositionableOptions;\n\n    private resizeListeners: DragListenerParams[] = [];\n    private moveElementDragListener: DragListenerParams | undefined;\n\n    private offsetParent: HTMLElement;\n    private boundaryEl: HTMLElement | null = null;\n\n    private isResizing: boolean = false;\n    private isMoving = false;\n    private resizable: ResizableStructure = {};\n    private movable = false;\n    private currentResizer: { isTop: boolean; isRight: boolean; isBottom: boolean; isLeft: boolean } | null = null;\n    private resizeObserverSubscriber: (() => void) | undefined;\n\n    constructor(\n        private readonly element: HTMLElement,\n        config?: PositionableOptions\n    ) {\n        super();\n        this.config = Object.assign({}, { popup: false }, config);\n    }\n\n    public center() {\n        const { clientHeight, clientWidth } = this.offsetParent;\n\n        const x = clientWidth / 2 - this.getWidth()! / 2;\n        const y = clientHeight / 2 - this.getHeight()! / 2;\n\n        this.offsetElement(x, y);\n    }\n\n    public initialisePosition(): void {\n        if (this.positioned) {\n            return;\n        }\n\n        const { centered, forcePopupParentAsOffsetParent, minWidth, width, minHeight, height, x, y } = this.config;\n\n        if (!this.offsetParent) {\n            this.setOffsetParent();\n        }\n\n        let computedMinHeight = 0;\n        let computedMinWidth = 0;\n\n        // here we don't use the main offset parent but the element's offsetParent\n        // in order to calculated the minWidth and minHeight correctly\n        const isElementVisible = _isVisible(this.element);\n        if (isElementVisible) {\n            const boundaryEl = this.findBoundaryElement();\n            const offsetParentComputedStyles = window.getComputedStyle(boundaryEl);\n            if (offsetParentComputedStyles.minWidth != null) {\n                const paddingWidth = boundaryEl.offsetWidth - this.element.offsetWidth;\n                computedMinWidth = parseInt(offsetParentComputedStyles.minWidth, 10) - paddingWidth;\n            }\n\n            if (offsetParentComputedStyles.minHeight != null) {\n                const paddingHeight = boundaryEl.offsetHeight - this.element.offsetHeight;\n                computedMinHeight = parseInt(offsetParentComputedStyles.minHeight, 10) - paddingHeight;\n            }\n        }\n\n        this.minHeight = minHeight || computedMinHeight;\n        this.minWidth = minWidth || computedMinWidth;\n\n        if (width) {\n            this.setWidth(width);\n        }\n\n        if (height) {\n            this.setHeight(height);\n        }\n\n        if (!width || !height) {\n            this.refreshSize();\n        }\n\n        if (centered) {\n            this.center();\n        } else if (x || y) {\n            this.offsetElement(x!, y!);\n        } else if (isElementVisible && forcePopupParentAsOffsetParent) {\n            let boundaryEl: HTMLElement | null = this.boundaryEl;\n            let initialisedDuringPositioning = true;\n\n            if (!boundaryEl) {\n                boundaryEl = this.findBoundaryElement();\n                initialisedDuringPositioning = false;\n            }\n\n            if (boundaryEl) {\n                const top = parseFloat(boundaryEl.style.top);\n                const left = parseFloat(boundaryEl.style.left);\n\n                if (initialisedDuringPositioning) {\n                    this.offsetElement(isNaN(left) ? 0 : left, isNaN(top) ? 0 : top);\n                } else {\n                    this.setPosition(left, top);\n                }\n            }\n        }\n\n        this.positioned = !!this.offsetParent;\n    }\n\n    public isPositioned(): boolean {\n        return this.positioned;\n    }\n\n    public getPosition(): { x: number; y: number } {\n        return this.position;\n    }\n\n    public setMovable(movable: boolean, moveElement: HTMLElement) {\n        if (!this.config.popup || movable === this.movable) {\n            return;\n        }\n\n        this.movable = movable;\n\n        const params: DragListenerParams = this.moveElementDragListener || {\n            eElement: moveElement,\n            onDragStart: this.onMoveStart.bind(this),\n            onDragging: this.onMove.bind(this),\n            onDragStop: this.onMoveEnd.bind(this),\n        };\n\n        if (movable) {\n            this.dragService.addDragSource(params);\n            this.moveElementDragListener = params;\n        } else {\n            this.dragService.removeDragSource(params);\n            this.moveElementDragListener = undefined;\n        }\n    }\n\n    public setResizable(resizable: boolean | ResizableStructure) {\n        this.clearResizeListeners();\n\n        if (resizable) {\n            this.addResizers();\n        } else {\n            this.removeResizers();\n        }\n\n        if (typeof resizable === 'boolean') {\n            if (resizable === false) {\n                return;\n            }\n\n            resizable = {\n                topLeft: resizable,\n                top: resizable,\n                topRight: resizable,\n                right: resizable,\n                bottomRight: resizable,\n                bottom: resizable,\n                bottomLeft: resizable,\n                left: resizable,\n            } as ResizableStructure;\n        }\n\n        Object.keys(resizable).forEach((side: ResizableSides) => {\n            const resizableStructure = resizable as ResizableStructure;\n            const isSideResizable = !!resizableStructure[side];\n            const resizerEl = this.getResizerElement(side);\n\n            const params: DragListenerParams = {\n                dragStartPixels: 0,\n                eElement: resizerEl!,\n                onDragStart: (e: MouseEvent) => this.onResizeStart(e, side),\n                onDragging: this.onResize.bind(this),\n                onDragStop: (e: MouseEvent) => this.onResizeEnd(e, side),\n            };\n\n            if (isSideResizable || (!this.isAlive() && !isSideResizable)) {\n                if (isSideResizable) {\n                    this.dragService.addDragSource(params);\n                    this.resizeListeners.push(params);\n                    resizerEl!.style.pointerEvents = 'all';\n                } else {\n                    resizerEl!.style.pointerEvents = 'none';\n                }\n                this.resizable[side] = isSideResizable;\n            }\n        });\n    }\n\n    public removeSizeFromEl(): void {\n        this.element.style.removeProperty('height');\n        this.element.style.removeProperty('width');\n        this.element.style.removeProperty('flex');\n    }\n\n    public restoreLastSize(): void {\n        this.element.style.flex = '0 0 auto';\n\n        const { height, width } = this.lastSize;\n\n        if (width !== -1) {\n            this.element.style.width = `${width}px`;\n        }\n\n        if (height !== -1) {\n            this.element.style.height = `${height}px`;\n        }\n    }\n\n    public getHeight(): number | undefined {\n        return this.element.offsetHeight;\n    }\n\n    public setHeight(height: number | string) {\n        const { popup } = this.config;\n        const eGui = this.element;\n\n        let isPercent = false;\n\n        if (typeof height === 'string' && height.indexOf('%') !== -1) {\n            _setFixedHeight(eGui, height);\n            height = _getAbsoluteHeight(eGui);\n            isPercent = true;\n        } else {\n            height = Math.max(this.minHeight!, height as number);\n            if (this.positioned) {\n                const availableHeight = this.getAvailableHeight();\n\n                if (availableHeight && height > availableHeight) {\n                    height = availableHeight;\n                }\n            }\n        }\n\n        if (this.getHeight() === height) {\n            return;\n        }\n\n        if (!isPercent) {\n            if (popup) {\n                _setFixedHeight(eGui, height);\n            } else {\n                eGui.style.height = `${height}px`;\n                eGui.style.flex = '0 0 auto';\n                this.lastSize.height = typeof height === 'number' ? height : parseFloat(height);\n            }\n        } else {\n            eGui.style.maxHeight = 'unset';\n            eGui.style.minHeight = 'unset';\n        }\n    }\n\n    private getAvailableHeight(): number | null {\n        const { popup, forcePopupParentAsOffsetParent } = this.config;\n\n        if (!this.positioned) {\n            this.initialisePosition();\n        }\n\n        const { clientHeight } = this.offsetParent;\n\n        if (!clientHeight) {\n            return null;\n        }\n\n        const elRect = this.element.getBoundingClientRect();\n        const offsetParentRect = this.offsetParent.getBoundingClientRect();\n\n        const yPosition = popup ? this.position.y : elRect.top;\n        const parentTop = popup ? 0 : offsetParentRect.top;\n\n        // When `forcePopupParentAsOffsetParent`, there may be elements that appear after the resizable element, but aren't included in the height.\n        // Take these into account here\n        let additionalHeight = 0;\n        if (forcePopupParentAsOffsetParent) {\n            const parentEl = this.element.parentElement;\n            if (parentEl) {\n                const { bottom } = parentEl.getBoundingClientRect();\n                additionalHeight = bottom - elRect.bottom;\n            }\n        }\n\n        const availableHeight = clientHeight + parentTop - yPosition - additionalHeight;\n\n        return availableHeight;\n    }\n\n    public getWidth(): number | undefined {\n        return this.element.offsetWidth;\n    }\n\n    public setWidth(width: number | string) {\n        const eGui = this.element;\n        const { popup } = this.config;\n\n        let isPercent = false;\n\n        if (typeof width === 'string' && width.indexOf('%') !== -1) {\n            _setFixedWidth(eGui, width);\n            width = _getAbsoluteWidth(eGui);\n            isPercent = true;\n        } else if (this.positioned) {\n            width = Math.max(this.minWidth, width as number);\n            const { clientWidth } = this.offsetParent;\n            const xPosition = popup ? this.position.x : this.element.getBoundingClientRect().left;\n\n            if (clientWidth && width + xPosition > clientWidth) {\n                width = clientWidth - xPosition;\n            }\n        }\n\n        if (this.getWidth() === width) {\n            return;\n        }\n\n        if (!isPercent) {\n            if (this.config.popup) {\n                _setFixedWidth(eGui, width);\n            } else {\n                eGui.style.width = `${width}px`;\n                eGui.style.flex = ' unset';\n                this.lastSize.width = typeof width === 'number' ? width : parseFloat(width);\n            }\n        } else {\n            eGui.style.maxWidth = 'unset';\n            eGui.style.minWidth = 'unset';\n        }\n    }\n\n    public offsetElement(x = 0, y = 0) {\n        const { forcePopupParentAsOffsetParent } = this.config;\n        const ePopup = forcePopupParentAsOffsetParent ? this.boundaryEl : this.element;\n\n        if (!ePopup) {\n            return;\n        }\n\n        this.popupService.positionPopup({\n            ePopup,\n            keepWithinBounds: true,\n            skipObserver: this.movable || this.isResizable(),\n            updatePosition: () => ({ x, y }),\n        });\n\n        this.setPosition(parseFloat(ePopup.style.left), parseFloat(ePopup.style.top));\n    }\n\n    public constrainSizeToAvailableHeight(constrain: boolean): void {\n        if (!this.config.forcePopupParentAsOffsetParent) {\n            return;\n        }\n\n        const applyMaxHeightToElement = () => {\n            const availableHeight = this.getAvailableHeight();\n            this.element.style.setProperty('max-height', `${availableHeight}px`);\n        };\n\n        if (constrain) {\n            this.resizeObserverSubscriber = this.resizeObserverService.observeResize(\n                this.popupService.getPopupParent(),\n                applyMaxHeightToElement\n            );\n        } else {\n            this.element.style.removeProperty('max-height');\n            if (this.resizeObserverSubscriber) {\n                this.resizeObserverSubscriber();\n                this.resizeObserverSubscriber = undefined;\n            }\n        }\n    }\n\n    private setPosition(x: number, y: number): void {\n        this.position.x = x;\n        this.position.y = y;\n    }\n\n    private updateDragStartPosition(x: number, y: number) {\n        this.dragStartPosition = { x, y };\n    }\n\n    private calculateMouseMovement(params: {\n        e: MouseEvent;\n        topBuffer?: number;\n        anywhereWithin?: boolean;\n        isLeft?: boolean;\n        isTop?: boolean;\n    }): { movementX: number; movementY: number } {\n        const { e, isLeft, isTop, anywhereWithin, topBuffer } = params;\n\n        const xDiff = e.clientX - this.dragStartPosition.x;\n        const yDiff = e.clientY - this.dragStartPosition.y;\n\n        const movementX = this.shouldSkipX(e, !!isLeft, !!anywhereWithin, xDiff) ? 0 : xDiff;\n        const movementY = this.shouldSkipY(e, !!isTop, topBuffer, yDiff) ? 0 : yDiff;\n\n        return { movementX, movementY };\n    }\n\n    private shouldSkipX(e: MouseEvent, isLeft: boolean, anywhereWithin: boolean, diff: number): boolean {\n        const elRect = this.element.getBoundingClientRect();\n        const parentRect = this.offsetParent.getBoundingClientRect();\n        const boundaryElRect = this.boundaryEl!.getBoundingClientRect();\n        const xPosition = this.config.popup ? this.position.x : elRect.left;\n        // skip if cursor is outside of popupParent horizontally\n        let skipX =\n            (xPosition <= 0 && parentRect.left >= e.clientX) ||\n            (parentRect.right <= e.clientX && parentRect.right <= boundaryElRect.right);\n\n        if (skipX) {\n            return true;\n        }\n\n        if (isLeft) {\n            skipX =\n                // skip if we are moving to the left and the cursor\n                // is positioned to the right of the left side anchor\n                (diff < 0 && e.clientX > xPosition + parentRect.left) ||\n                // skip if we are moving to the right and the cursor\n                // is positioned to the left of the dialog\n                (diff > 0 && e.clientX < xPosition + parentRect.left);\n        } else {\n            if (anywhereWithin) {\n                // if anywhereWithin is true, we allow to move\n                // as long as the cursor is within the dialog\n                skipX =\n                    (diff < 0 && e.clientX > boundaryElRect.right) ||\n                    (diff > 0 && e.clientX < xPosition + parentRect.left);\n            } else {\n                skipX =\n                    // if the movement is bound to the right side of the dialog\n                    // we skip if we are moving to the left and the cursor\n                    // is to the right of the dialog\n                    (diff < 0 && e.clientX > boundaryElRect.right) ||\n                    // or skip if we are moving to the right and the cursor\n                    // is to the left of the right side anchor\n                    (diff > 0 && e.clientX < boundaryElRect.right);\n            }\n        }\n\n        return skipX;\n    }\n\n    private shouldSkipY(e: MouseEvent, isTop: boolean, topBuffer: number = 0, diff: number): boolean {\n        const elRect = this.element.getBoundingClientRect();\n        const parentRect = this.offsetParent.getBoundingClientRect();\n        const boundaryElRect = this.boundaryEl!.getBoundingClientRect();\n        const yPosition = this.config.popup ? this.position.y : elRect.top;\n\n        // skip if cursor is outside of popupParent vertically\n        let skipY =\n            (yPosition <= 0 && parentRect.top >= e.clientY) ||\n            (parentRect.bottom <= e.clientY && parentRect.bottom <= boundaryElRect.bottom);\n\n        if (skipY) {\n            return true;\n        }\n\n        if (isTop) {\n            skipY =\n                // skip if we are moving to towards top and the cursor is\n                // below the top anchor + topBuffer\n                // note: topBuffer is used when moving the dialog using the title bar\n                (diff < 0 && e.clientY > yPosition + parentRect.top + topBuffer) ||\n                // skip if we are moving to the bottom and the cursor is\n                // above the top anchor\n                (diff > 0 && e.clientY < yPosition + parentRect.top);\n        } else {\n            skipY =\n                // skip if we are moving towards the top and the cursor\n                // is below the bottom anchor\n                (diff < 0 && e.clientY > boundaryElRect.bottom) ||\n                // skip if we are moving towards the bottom and the cursor\n                // is above the bottom anchor\n                (diff > 0 && e.clientY < boundaryElRect.bottom);\n        }\n\n        return skipY;\n    }\n\n    private createResizeMap() {\n        const eGui = this.element;\n\n        this.resizerMap = {\n            topLeft: { element: eGui.querySelector('[data-ref=eTopLeftResizer]') as HTMLElement },\n            top: { element: eGui.querySelector('[data-ref=eTopResizer]') as HTMLElement },\n            topRight: { element: eGui.querySelector('[data-ref=eTopRightResizer]') as HTMLElement },\n            right: { element: eGui.querySelector('[data-ref=eRightResizer]') as HTMLElement },\n            bottomRight: { element: eGui.querySelector('[data-ref=eBottomRightResizer]') as HTMLElement },\n            bottom: { element: eGui.querySelector('[data-ref=eBottomResizer]') as HTMLElement },\n            bottomLeft: { element: eGui.querySelector('[data-ref=eBottomLeftResizer]') as HTMLElement },\n            left: { element: eGui.querySelector('[data-ref=eLeftResizer]') as HTMLElement },\n        };\n    }\n\n    private addResizers() {\n        if (this.resizersAdded) {\n            return;\n        }\n\n        const eGui = this.element;\n\n        if (!eGui) {\n            return;\n        }\n\n        const parser = new DOMParser();\n        const resizers = parser.parseFromString(RESIZE_TEMPLATE, 'text/html').body;\n\n        eGui.appendChild(resizers.firstChild!);\n        this.createResizeMap();\n        this.resizersAdded = true;\n    }\n\n    private removeResizers() {\n        this.resizerMap = undefined;\n        const resizerEl = this.element.querySelector(`.${RESIZE_CONTAINER_STYLE}`);\n\n        if (resizerEl) {\n            this.element.removeChild(resizerEl);\n        }\n        this.resizersAdded = false;\n    }\n\n    private getResizerElement(side: ResizableSides): HTMLElement | null {\n        return this.resizerMap![side].element;\n    }\n\n    private onResizeStart(e: MouseEvent, side: ResizableSides) {\n        this.boundaryEl = this.findBoundaryElement();\n\n        if (!this.positioned) {\n            this.initialisePosition();\n        }\n\n        this.currentResizer = {\n            isTop: !!side.match(/top/i),\n            isRight: !!side.match(/right/i),\n            isBottom: !!side.match(/bottom/i),\n            isLeft: !!side.match(/left/i),\n        };\n\n        this.element.classList.add('ag-resizing');\n        this.resizerMap![side].element.classList.add('ag-active');\n\n        const { popup, forcePopupParentAsOffsetParent } = this.config;\n\n        if (!popup && !forcePopupParentAsOffsetParent) {\n            this.applySizeToSiblings(this.currentResizer.isBottom || this.currentResizer.isTop);\n        }\n\n        this.isResizing = true;\n        this.updateDragStartPosition(e.clientX, e.clientY);\n    }\n\n    private getSiblings(): HTMLElement[] | null {\n        const element = this.element;\n        const parent = element.parentElement;\n        if (!parent) {\n            return null;\n        }\n\n        return Array.prototype.slice\n            .call(parent.children)\n            .filter((el: HTMLElement) => !el.classList.contains('ag-hidden'));\n    }\n\n    private getMinSizeOfSiblings(): { height: number; width: number } {\n        const siblings = this.getSiblings() || [];\n\n        let height = 0;\n        let width = 0;\n\n        for (let i = 0; i < siblings.length; i++) {\n            const currentEl = siblings[i];\n            const isFlex = !!currentEl.style.flex && currentEl.style.flex !== '0 0 auto';\n\n            if (currentEl === this.element) {\n                continue;\n            }\n\n            let nextHeight = this.minHeight || 0;\n            let nextWidth = this.minWidth || 0;\n\n            if (isFlex) {\n                const computedStyle = window.getComputedStyle(currentEl);\n                if (computedStyle.minHeight) {\n                    nextHeight = parseInt(computedStyle.minHeight, 10);\n                }\n                if (computedStyle.minWidth) {\n                    nextWidth = parseInt(computedStyle.minWidth, 10);\n                }\n            } else {\n                nextHeight = currentEl.offsetHeight;\n                nextWidth = currentEl.offsetWidth;\n            }\n\n            height += nextHeight;\n            width += nextWidth;\n        }\n\n        return { height, width };\n    }\n\n    private applySizeToSiblings(vertical: boolean) {\n        let containerToFlex: HTMLElement | null = null;\n        const siblings = this.getSiblings();\n\n        if (!siblings) {\n            return;\n        }\n\n        for (let i = 0; i < siblings.length; i++) {\n            const el = siblings[i];\n\n            if (el === containerToFlex) {\n                continue;\n            }\n\n            if (vertical) {\n                el.style.height = `${el.offsetHeight}px`;\n            } else {\n                el.style.width = `${el.offsetWidth}px`;\n            }\n            el.style.flex = '0 0 auto';\n\n            if (el === this.element) {\n                containerToFlex = siblings[i + 1];\n            }\n        }\n\n        if (containerToFlex) {\n            containerToFlex.style.removeProperty('height');\n            containerToFlex.style.removeProperty('min-height');\n            containerToFlex.style.removeProperty('max-height');\n            containerToFlex.style.flex = '1 1 auto';\n        }\n    }\n\n    public isResizable(): boolean {\n        return Object.values(this.resizable).some((value) => value);\n    }\n\n    private onResize(e: MouseEvent) {\n        if (!this.isResizing || !this.currentResizer) {\n            return;\n        }\n\n        const { popup, forcePopupParentAsOffsetParent } = this.config;\n        const { isTop, isRight, isBottom, isLeft } = this.currentResizer;\n        const isHorizontal = isRight || isLeft;\n        const isVertical = isBottom || isTop;\n        const { movementX, movementY } = this.calculateMouseMovement({ e, isLeft, isTop });\n\n        const xPosition = this.position.x;\n        const yPosition = this.position.y;\n\n        let offsetLeft = 0;\n        let offsetTop = 0;\n\n        if (isHorizontal && movementX) {\n            const direction = isLeft ? -1 : 1;\n            const oldWidth = this.getWidth();\n            const newWidth = oldWidth! + movementX * direction;\n            let skipWidth = false;\n\n            if (isLeft) {\n                offsetLeft = oldWidth! - newWidth;\n                if (xPosition + offsetLeft <= 0 || newWidth <= this.minWidth) {\n                    skipWidth = true;\n                    offsetLeft = 0;\n                }\n            }\n\n            if (!skipWidth) {\n                this.setWidth(newWidth);\n            }\n        }\n\n        if (isVertical && movementY) {\n            const direction = isTop ? -1 : 1;\n            const oldHeight = this.getHeight();\n            const newHeight = oldHeight! + movementY * direction;\n            let skipHeight = false;\n\n            if (isTop) {\n                offsetTop = oldHeight! - newHeight;\n                if (yPosition + offsetTop <= 0 || newHeight <= this.minHeight!) {\n                    skipHeight = true;\n                    offsetTop = 0;\n                }\n            } else {\n                // do not let the size of all siblings be higher than the parent container\n                if (\n                    !this.config.popup &&\n                    !this.config.forcePopupParentAsOffsetParent &&\n                    oldHeight! < newHeight &&\n                    this.getMinSizeOfSiblings().height + newHeight > this.element.parentElement!.offsetHeight\n                ) {\n                    skipHeight = true;\n                }\n            }\n\n            if (!skipHeight) {\n                this.setHeight(newHeight);\n            }\n        }\n\n        this.updateDragStartPosition(e.clientX, e.clientY);\n\n        if (((popup || forcePopupParentAsOffsetParent) && offsetLeft) || offsetTop) {\n            this.offsetElement(xPosition + offsetLeft, yPosition + offsetTop);\n        }\n    }\n\n    private onResizeEnd(e: MouseEvent, side: ResizableSides) {\n        this.isResizing = false;\n        this.currentResizer = null;\n        this.boundaryEl = null;\n\n        this.element.classList.remove('ag-resizing');\n        this.resizerMap![side].element.classList.remove('ag-active');\n\n        this.dispatchLocalEvent({ type: 'resize' });\n    }\n\n    private refreshSize() {\n        const eGui = this.element;\n\n        if (this.config.popup) {\n            if (!this.config.width) {\n                this.setWidth(eGui.offsetWidth);\n            }\n\n            if (!this.config.height) {\n                this.setHeight(eGui.offsetHeight);\n            }\n        }\n    }\n\n    private onMoveStart(e: MouseEvent) {\n        this.boundaryEl = this.findBoundaryElement();\n\n        if (!this.positioned) {\n            this.initialisePosition();\n        }\n\n        this.isMoving = true;\n\n        this.element.classList.add('ag-moving');\n        this.updateDragStartPosition(e.clientX, e.clientY);\n    }\n\n    private onMove(e: MouseEvent) {\n        if (!this.isMoving) {\n            return;\n        }\n\n        const { x, y } = this.position;\n        let topBuffer;\n\n        if (this.config.calculateTopBuffer) {\n            topBuffer = this.config.calculateTopBuffer();\n        }\n\n        const { movementX, movementY } = this.calculateMouseMovement({\n            e,\n            isTop: true,\n            anywhereWithin: true,\n            topBuffer,\n        });\n\n        this.offsetElement(x + movementX, y + movementY);\n        this.updateDragStartPosition(e.clientX, e.clientY);\n    }\n\n    private onMoveEnd() {\n        this.isMoving = false;\n        this.boundaryEl = null;\n        this.element.classList.remove('ag-moving');\n    }\n\n    private setOffsetParent() {\n        if (this.config.forcePopupParentAsOffsetParent) {\n            this.offsetParent = this.popupService.getPopupParent();\n        } else {\n            this.offsetParent = this.element.offsetParent as HTMLElement;\n        }\n    }\n\n    private findBoundaryElement(): HTMLElement {\n        let el = this.element;\n        while (el) {\n            if (window.getComputedStyle(el).position !== 'static') {\n                return el;\n            }\n            el = el.parentElement as HTMLElement;\n        }\n\n        return this.element;\n    }\n\n    private clearResizeListeners(): void {\n        while (this.resizeListeners.length) {\n            const params = this.resizeListeners.pop()!;\n            this.dragService.removeDragSource(params);\n        }\n    }\n\n    public override destroy() {\n        super.destroy();\n\n        if (this.moveElementDragListener) {\n            this.dragService.removeDragSource(this.moveElementDragListener);\n        }\n\n        this.constrainSizeToAvailableHeight(false);\n        this.clearResizeListeners();\n        this.removeResizers();\n    }\n}\n", "import { KeyCode } from '../constants/keyCode';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { FocusService } from '../focusService';\nimport { _isStopPropagationForAgGrid, _stopPropagationForAgGrid } from '../utils/event';\n\nexport interface ManagedFocusCallbacks {\n    shouldStopEventPropagation?: (e: KeyboardEvent) => boolean;\n    onTabKeyDown?: (e: KeyboardEvent) => void;\n    handleKeyDown?: (e: KeyboardEvent) => void;\n    onFocusIn?: (e: FocusEvent) => void;\n    onFocusOut?: (e: FocusEvent) => void;\n}\n\nexport class ManagedFocusFeature extends BeanStub {\n    private focusService: FocusService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.focusService = beans.focusService;\n    }\n\n    public static FOCUS_MANAGED_CLASS = 'ag-focus-managed';\n\n    constructor(\n        private readonly eFocusableElement: HTMLElement,\n        private callbacks: ManagedFocusCallbacks = {}\n    ) {\n        super();\n        this.callbacks = {\n            shouldStopEventPropagation: () => false,\n            onTabKeyDown: (e: KeyboardEvent) => {\n                if (e.defaultPrevented) {\n                    return;\n                }\n\n                const nextRoot = this.focusService.findNextFocusableElement(this.eFocusableElement, false, e.shiftKey);\n\n                if (!nextRoot) {\n                    return;\n                }\n\n                nextRoot.focus();\n                e.preventDefault();\n            },\n            ...callbacks,\n        };\n    }\n\n    public postConstruct(): void {\n        this.eFocusableElement.classList.add(ManagedFocusFeature.FOCUS_MANAGED_CLASS);\n\n        this.addKeyDownListeners(this.eFocusableElement);\n\n        if (this.callbacks.onFocusIn) {\n            this.addManagedElementListeners(this.eFocusableElement, { focusin: this.callbacks.onFocusIn });\n        }\n\n        if (this.callbacks.onFocusOut) {\n            this.addManagedElementListeners(this.eFocusableElement, { focusout: this.callbacks.onFocusOut });\n        }\n    }\n\n    private addKeyDownListeners(eGui: HTMLElement): void {\n        this.addManagedElementListeners(eGui, {\n            keydown: (e: KeyboardEvent) => {\n                if (e.defaultPrevented || _isStopPropagationForAgGrid(e)) {\n                    return;\n                }\n\n                if (this.callbacks.shouldStopEventPropagation!(e)) {\n                    _stopPropagationForAgGrid(e);\n                    return;\n                }\n\n                if (e.key === KeyCode.TAB) {\n                    this.callbacks.onTabKeyDown!(e);\n                } else if (this.callbacks.handleKeyDown) {\n                    this.callbacks.handleKeyDown(e);\n                }\n            },\n        });\n    }\n}\n", "export const FILTER_LOCALE_TEXT = {\n    applyFilter: 'Apply',\n    clearFilter: 'Clear',\n    resetFilter: 'Reset',\n    cancelFilter: 'Cancel',\n    textFilter: 'Text Filter',\n    numberFilter: 'Number Filter',\n    dateFilter: 'Date Filter',\n    setFilter: 'Set Filter',\n    filterOoo: 'Filter...',\n    empty: 'Choose one',\n    equals: 'Equals',\n    notEqual: 'Does not equal',\n    lessThan: 'Less than',\n    greaterThan: 'Greater than',\n    inRange: 'Between',\n    inRangeStart: 'From',\n    inRangeEnd: 'To',\n    lessThanOrEqual: 'Less than or equal to',\n    greaterThanOrEqual: 'Greater than or equal to',\n    contains: 'Contains',\n    notContains: 'Does not contain',\n    startsWith: 'Begins with',\n    endsWith: 'Ends with',\n    blank: 'Blank',\n    notBlank: 'Not blank',\n    before: 'Before',\n    after: 'After',\n    andCondition: 'AND',\n    orCondition: 'OR',\n    dateFormatOoo: 'yyyy-mm-dd',\n};\n", "import { _warnOnce } from '../../../utils/function';\nimport type { ProvidedFilterParams } from '../../provided/iProvidedFilter';\n\nexport function getDebounceMs(params: ProvidedFilterParams, debounceDefault: number): number {\n    if (isUseApplyButton(params)) {\n        if (params.debounceMs != null) {\n            _warnOnce('debounceMs is ignored when apply button is present');\n        }\n\n        return 0;\n    }\n\n    return params.debounceMs != null ? params.debounceMs : debounceDefault;\n}\n\nexport function isUseApplyButton(params: ProvidedFilterParams): boolean {\n    return !!params.buttons && params.buttons.indexOf('apply') >= 0;\n}\n", "import type { BeanCollection } from '../../context/context';\nimport type { FilterChangedEventSourceType } from '../../events';\nimport type { ContainerType, IAfterGuiAttachedParams } from '../../interfaces/iAfterGuiAttachedParams';\nimport type { IDoesFilterPassParams, IFilterComp } from '../../interfaces/iFilter';\nimport type { IRowModel } from '../../interfaces/iRowModel';\nimport type { IRowNode } from '../../interfaces/iRowNode';\nimport { PositionableFeature } from '../../rendering/features/positionableFeature';\nimport { _clearElement, _loadTemplate, _removeFromParent, _setDisabled } from '../../utils/dom';\nimport { _debounce, _warnOnce } from '../../utils/function';\nimport type { AgPromise } from '../../utils/promise';\nimport type { ComponentSelector } from '../../widgets/component';\nimport { Component, RefPlaceholder } from '../../widgets/component';\nimport { ManagedFocusFeature } from '../../widgets/managedFocusFeature';\nimport type { PopupEventParams } from '../../widgets/popupService';\nimport { FILTER_LOCALE_TEXT } from '../filterLocaleText';\nimport { getDebounceMs, isUseApplyButton } from '../floating/provided/providedFilterUtils';\nimport type { IProvidedFilter, ProvidedFilterParams } from './iProvidedFilter';\n\n/**\n * Contains common logic to all provided filters (apply button, clear button, etc).\n * All the filters that come with AG Grid extend this class. User filters do not\n * extend this class.\n *\n * @param M type of filter-model managed by the concrete sub-class that extends this type\n * @param V type of value managed by the concrete sub-class that extends this type\n */\nexport abstract class ProvidedFilter<M, V> extends Component implements IProvidedFilter, IFilterComp {\n    // each level in the hierarchy will save params with the appropriate type for that level.\n    private providedFilterParams: ProvidedFilterParams;\n\n    private applyActive = false;\n    private hidePopup: ((params: PopupEventParams) => void) | null | undefined = null;\n    // a debounce of the onBtApply method\n    private onBtApplyDebounce: () => void;\n    private debouncePending = false;\n\n    // after the user hits 'apply' the model gets copied to here. this is then the model that we use for\n    // all filtering. so if user changes UI but doesn't hit apply, then the UI will be out of sync with this model.\n    // this is what we want, as the UI should only become the 'active' filter once it's applied. when apply is\n    // inactive, this model will be in sync (following the debounce ms). if the UI is not a valid filter\n    // (eg the value is missing so nothing to filter on, or for set filter all checkboxes are checked so filter\n    // not active) then this appliedModel will be null/undefined.\n    private appliedModel: M | null = null;\n\n    private positionableFeature: PositionableFeature | undefined;\n\n    protected rowModel: IRowModel;\n    public wireBeans(beans: BeanCollection): void {\n        this.rowModel = beans.rowModel;\n    }\n\n    protected readonly eFilterBody: HTMLElement = RefPlaceholder;\n\n    private eButtonsPanel: HTMLElement;\n    private buttonListeners: (() => null)[] = [];\n\n    constructor(private readonly filterNameKey: keyof typeof FILTER_LOCALE_TEXT) {\n        super();\n    }\n\n    public abstract doesFilterPass(params: IDoesFilterPassParams): boolean;\n\n    protected abstract updateUiVisibility(): void;\n\n    protected abstract createBodyTemplate(): string;\n    protected abstract getAgComponents(): ComponentSelector[];\n    protected abstract getCssIdentifier(): string;\n    protected abstract resetUiToDefaults(silent?: boolean): AgPromise<void>;\n\n    protected abstract setModelIntoUi(model: M): AgPromise<void>;\n    protected abstract areModelsEqual(a: M, b: M): boolean;\n\n    /** Used to get the filter type for filter models. */\n    protected abstract getFilterType(): string;\n\n    public postConstruct(): void {\n        this.resetTemplate(); // do this first to create the DOM\n        this.createManagedBean(\n            new ManagedFocusFeature(this.getFocusableElement(), {\n                handleKeyDown: this.handleKeyDown.bind(this),\n            })\n        );\n\n        this.positionableFeature = new PositionableFeature(this.getPositionableElement(), {\n            forcePopupParentAsOffsetParent: true,\n        });\n\n        this.createBean(this.positionableFeature);\n    }\n\n    // override\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected handleKeyDown(e: KeyboardEvent): void {}\n\n    public abstract getModelFromUi(): M | null;\n\n    public getFilterTitle(): string {\n        return this.translate(this.filterNameKey);\n    }\n\n    public isFilterActive(): boolean {\n        // filter is active if we have a valid applied model\n        return !!this.appliedModel;\n    }\n\n    protected resetTemplate(paramsMap?: any) {\n        let eGui = this.getGui();\n\n        if (eGui) {\n            eGui.removeEventListener('submit', this.onFormSubmit);\n        }\n        const templateString = /* html */ `\n            <form class=\"ag-filter-wrapper\">\n                <div class=\"ag-filter-body-wrapper ag-${this.getCssIdentifier()}-body-wrapper\" data-ref=\"eFilterBody\">\n                    ${this.createBodyTemplate()}\n                </div>\n            </form>`;\n\n        this.setTemplate(templateString, this.getAgComponents(), paramsMap);\n\n        eGui = this.getGui();\n        if (eGui) {\n            eGui.addEventListener('submit', this.onFormSubmit);\n        }\n    }\n\n    protected isReadOnly(): boolean {\n        return !!this.providedFilterParams.readOnly;\n    }\n\n    public init(params: ProvidedFilterParams): void {\n        this.setParams(params);\n\n        this.resetUiToDefaults(true).then(() => {\n            this.updateUiVisibility();\n            this.setupOnBtApplyDebounce();\n        });\n    }\n\n    protected setParams(params: ProvidedFilterParams): void {\n        this.providedFilterParams = params;\n        this.applyActive = isUseApplyButton(params);\n\n        this.resetButtonsPanel();\n    }\n\n    protected updateParams(params: ProvidedFilterParams): void {\n        this.providedFilterParams = params;\n        this.applyActive = isUseApplyButton(params);\n\n        this.resetUiToActiveModel(this.getModel(), () => {\n            this.updateUiVisibility();\n            this.setupOnBtApplyDebounce();\n        });\n    }\n\n    private resetButtonsPanel(): void {\n        const { buttons } = this.providedFilterParams;\n        const hasButtons = buttons && buttons.length > 0 && !this.isReadOnly();\n\n        if (!this.eButtonsPanel) {\n            // Only create the buttons panel if we need to\n            if (hasButtons) {\n                this.eButtonsPanel = document.createElement('div');\n                this.eButtonsPanel.classList.add('ag-filter-apply-panel');\n            }\n        } else {\n            // Always empty the buttons panel before adding new buttons\n            _clearElement(this.eButtonsPanel);\n            this.buttonListeners.forEach((destroyFunc) => destroyFunc());\n            this.buttonListeners = [];\n        }\n\n        if (!hasButtons) {\n            // The case when we need to hide the buttons panel because there are no buttons\n            if (this.eButtonsPanel) {\n                _removeFromParent(this.eButtonsPanel);\n            }\n\n            return;\n        }\n\n        // At this point we know we have a buttons and a buttons panel has been created.\n\n        // Instead of appending each button to the DOM individually, we create a fragment and append that\n        // to the DOM once. This is much faster than appending each button individually.\n        const fragment = document.createDocumentFragment();\n\n        const addButton = (type: 'apply' | 'clear' | 'reset' | 'cancel'): void => {\n            let text;\n            let clickListener: (e?: Event) => void;\n\n            switch (type) {\n                case 'apply':\n                    text = this.translate('applyFilter');\n                    clickListener = (e) => this.onBtApply(false, false, e);\n                    break;\n                case 'clear':\n                    text = this.translate('clearFilter');\n                    clickListener = () => this.onBtClear();\n                    break;\n                case 'reset':\n                    text = this.translate('resetFilter');\n                    clickListener = () => this.onBtReset();\n                    break;\n                case 'cancel':\n                    text = this.translate('cancelFilter');\n                    clickListener = (e) => {\n                        this.onBtCancel(e!);\n                    };\n                    break;\n                default:\n                    _warnOnce('Unknown button type specified');\n                    return;\n            }\n\n            const buttonType = type === 'apply' ? 'submit' : 'button';\n            const button = _loadTemplate(\n                /* html */\n                `<button\n                    type=\"${buttonType}\"\n                    data-ref=\"${type}FilterButton\"\n                    class=\"ag-button ag-standard-button ag-filter-apply-panel-button\"\n                >${text}\n                </button>`\n            );\n\n            this.buttonListeners.push(...this.addManagedElementListeners(button, { click: clickListener }));\n            fragment.append(button);\n        };\n\n        buttons.forEach((type) => addButton(type));\n\n        this.eButtonsPanel.append(fragment);\n        this.getGui().appendChild(this.eButtonsPanel);\n    }\n\n    // subclasses can override this to provide alternative debounce defaults\n    protected getDefaultDebounceMs(): number {\n        return 0;\n    }\n\n    private setupOnBtApplyDebounce(): void {\n        const debounceMs = getDebounceMs(this.providedFilterParams, this.getDefaultDebounceMs());\n        const debounceFunc = _debounce(this.checkApplyDebounce.bind(this), debounceMs);\n        this.onBtApplyDebounce = () => {\n            this.debouncePending = true;\n            debounceFunc();\n        };\n    }\n\n    private checkApplyDebounce(): void {\n        if (this.debouncePending) {\n            // May already have been applied, so don't apply again (e.g. closing filter before debounce timeout)\n            this.debouncePending = false;\n            this.onBtApply();\n        }\n    }\n\n    public getModel(): M | null {\n        return this.appliedModel ? this.appliedModel : null;\n    }\n\n    public setModel(model: M | null): AgPromise<void> {\n        const promise = model != null ? this.setModelIntoUi(model) : this.resetUiToDefaults();\n\n        return promise.then(() => {\n            this.updateUiVisibility();\n\n            // we set the model from the GUI, rather than the provided model,\n            // so the model is consistent, e.g. handling of null/undefined will be the same,\n            // or if model is case-insensitive, then casing is removed.\n            this.applyModel('api');\n        });\n    }\n\n    private onBtCancel(e: Event): void {\n        this.resetUiToActiveModel(this.getModel(), () => {\n            this.handleCancelEnd(e);\n        });\n    }\n\n    protected handleCancelEnd(e: Event): void {\n        if (this.providedFilterParams.closeOnApply) {\n            this.close(e);\n        }\n    }\n\n    protected resetUiToActiveModel(currentModel: M | null, afterUiUpdatedFunc?: () => void): void {\n        const afterAppliedFunc = () => {\n            this.onUiChanged(false, 'prevent');\n\n            afterUiUpdatedFunc?.();\n        };\n\n        if (currentModel != null) {\n            this.setModelIntoUi(currentModel).then(afterAppliedFunc);\n        } else {\n            this.resetUiToDefaults().then(afterAppliedFunc);\n        }\n    }\n\n    private onBtClear(): void {\n        this.resetUiToDefaults().then(() => this.onUiChanged());\n    }\n\n    private onBtReset(): void {\n        this.onBtClear();\n        this.onBtApply();\n    }\n\n    /**\n     * Applies changes made in the UI to the filter, and returns true if the model has changed.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public applyModel(source: 'api' | 'ui' | 'rowDataUpdated' = 'api'): boolean {\n        const newModel = this.getModelFromUi();\n\n        if (!this.isModelValid(newModel!)) {\n            return false;\n        }\n\n        const previousModel = this.appliedModel;\n\n        this.appliedModel = newModel;\n\n        // models can be same if user pasted same content into text field, or maybe just changed the case\n        // and it's a case insensitive filter\n        return !this.areModelsEqual(previousModel!, newModel!);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected isModelValid(model: M): boolean {\n        return true;\n    }\n\n    private onFormSubmit(e: Event): void {\n        e.preventDefault();\n    }\n\n    protected onBtApply(afterFloatingFilter = false, afterDataChange = false, e?: Event): void {\n        // Prevent form submission\n        if (e) {\n            e.preventDefault();\n        }\n        if (this.applyModel(afterDataChange ? 'rowDataUpdated' : 'ui')) {\n            // the floating filter uses 'afterFloatingFilter' info, so it doesn't refresh after filter changed if change\n            // came from floating filter\n            const source: FilterChangedEventSourceType = 'columnFilter';\n            this.providedFilterParams.filterChangedCallback({ afterFloatingFilter, afterDataChange, source });\n        }\n\n        const { closeOnApply } = this.providedFilterParams;\n\n        // only close if an apply button is visible, otherwise we'd be closing every time a change was made!\n        if (closeOnApply && this.applyActive && !afterFloatingFilter && !afterDataChange) {\n            this.close(e);\n        }\n    }\n\n    public onNewRowsLoaded(): void {}\n\n    public close(e?: Event): void {\n        if (!this.hidePopup) {\n            return;\n        }\n\n        const keyboardEvent = e as KeyboardEvent;\n        const key = keyboardEvent && keyboardEvent.key;\n        let params: PopupEventParams;\n\n        if (key === 'Enter' || key === 'Space') {\n            params = { keyboardEvent };\n        }\n\n        this.hidePopup(params!);\n        this.hidePopup = null;\n    }\n\n    /**\n     * By default, if the change came from a floating filter it will be applied immediately, otherwise if there is no\n     * apply button it will be applied after a debounce, otherwise it will not be applied at all. This behaviour can\n     * be adjusted by using the apply parameter.\n     */\n    protected onUiChanged(fromFloatingFilter = false, apply?: 'immediately' | 'debounce' | 'prevent'): void {\n        this.updateUiVisibility();\n        this.providedFilterParams.filterModifiedCallback();\n\n        if (this.applyActive && !this.isReadOnly()) {\n            const isValid = this.isModelValid(this.getModelFromUi()!);\n            const applyFilterButton = this.queryForHtmlElement(`[data-ref=\"applyFilterButton\"]`);\n            if (applyFilterButton) {\n                _setDisabled(applyFilterButton, !isValid);\n            }\n        }\n\n        if ((fromFloatingFilter && !apply) || apply === 'immediately') {\n            this.onBtApply(fromFloatingFilter);\n        } else if ((!this.applyActive && !apply) || apply === 'debounce') {\n            this.onBtApplyDebounce();\n        }\n    }\n\n    public afterGuiAttached(params?: IAfterGuiAttachedParams): void {\n        if (params) {\n            this.hidePopup = params.hidePopup;\n        }\n\n        this.refreshFilterResizer(params?.container);\n    }\n\n    private refreshFilterResizer(containerType?: ContainerType): void {\n        // tool panel is scrollable, so don't need to size\n        if (!this.positionableFeature || containerType === 'toolPanel') {\n            return;\n        }\n\n        const isResizable = containerType === 'floatingFilter' || containerType === 'columnFilter';\n\n        const { positionableFeature, gos } = this;\n\n        if (isResizable) {\n            positionableFeature.restoreLastSize();\n            positionableFeature.setResizable(\n                gos.get('enableRtl')\n                    ? { bottom: true, bottomLeft: true, left: true }\n                    : { bottom: true, bottomRight: true, right: true }\n            );\n        } else {\n            this.positionableFeature.removeSizeFromEl();\n            this.positionableFeature.setResizable(false);\n        }\n        this.positionableFeature.constrainSizeToAvailableHeight(true);\n    }\n\n    public afterGuiDetached(): void {\n        this.checkApplyDebounce();\n\n        if (this.positionableFeature) {\n            this.positionableFeature.constrainSizeToAvailableHeight(false);\n        }\n    }\n\n    public refresh(newParams: ProvidedFilterParams): boolean {\n        this.providedFilterParams = newParams;\n        return true;\n    }\n\n    public override destroy(): void {\n        const eGui = this.getGui();\n\n        if (eGui) {\n            eGui.removeEventListener('submit', this.onFormSubmit);\n        }\n        this.hidePopup = null;\n\n        if (this.positionableFeature) {\n            this.positionableFeature = this.destroyBean(this.positionableFeature);\n        }\n\n        this.appliedModel = null;\n\n        super.destroy();\n    }\n\n    protected translate(key: keyof typeof FILTER_LOCALE_TEXT): string {\n        const translate = this.localeService.getLocaleTextFunc();\n\n        return translate(key, FILTER_LOCALE_TEXT[key]);\n    }\n\n    protected getCellValue(rowNode: IRowNode): V | null | undefined {\n        return this.providedFilterParams.getValue(rowNode);\n    }\n\n    // override to control positionable feature\n    protected getPositionableElement(): HTMLElement {\n        return this.eFilterBody;\n    }\n}\n", "import type { CheckboxChangedEvent } from '../events';\nimport type { AgCheckboxParams } from '../interfaces/agFieldParams';\nimport { AgCheckbox } from './agCheckbox';\n\nexport interface AgRadioButtonParams extends AgCheckboxParams {}\n\nexport class AgRadioButton extends AgCheckbox<AgRadioButtonParams> {\n    constructor(config?: AgRadioButtonParams) {\n        super(config, 'ag-radio-button', 'radio');\n    }\n\n    protected override isSelected(): boolean {\n        return this.eInput.checked;\n    }\n\n    public override toggle(): void {\n        if (this.eInput.disabled) {\n            return;\n        }\n\n        // do not allow an active radio button to be deselected\n        if (!this.isSelected()) {\n            this.setValue(true);\n        }\n    }\n\n    protected override addInputListeners() {\n        super.addInputListeners();\n\n        this.addManagedEventListeners({ checkboxChanged: this.onChange.bind(this) });\n    }\n\n    /**\n     * This ensures that if another radio button in the same named group is selected, we deselect this radio button.\n     * By default the browser does this for you, but we are managing classes ourselves in order to ensure input\n     * elements are styled correctly in IE11, and the DOM 'changed' event is only fired when a button is selected,\n     * not deselected, so we need to use our own event.\n     */\n    private onChange(event: CheckboxChangedEvent) {\n        if (\n            event.selected &&\n            event.name &&\n            this.eInput.name &&\n            this.eInput.name === event.name &&\n            event.id &&\n            this.eInput.id !== event.id\n        ) {\n            this.setValue(false, true);\n        }\n    }\n}\n", "import { KeyCode } from '../constants/keyCode';\nimport { _setAriaPosInSet, _setAriaRole, _setAriaSelected, _setAriaSetSize } from '../utils/aria';\nimport { _isVisible, _removeFromParent } from '../utils/dom';\nimport { Component } from './component';\nimport { TooltipFeature } from './tooltipFeature';\n\nexport interface ListOption<TValue = string> {\n    value: TValue;\n    text?: string;\n}\n\nexport type AgListEvent = 'fieldValueChanged' | 'selectedItem';\n\nexport class AgList<TEventType extends string = AgListEvent, TValue = string> extends Component<\n    TEventType | AgListEvent\n> {\n    private readonly activeClass = 'ag-active-item';\n\n    private options: ListOption<TValue>[] = [];\n    private itemEls: HTMLElement[] = [];\n    private highlightedEl: HTMLElement | null;\n    private value: TValue | null;\n    private displayValue: string | null;\n\n    constructor(\n        private readonly cssIdentifier = 'default',\n        private readonly unFocusable: boolean = false\n    ) {\n        super(/* html */ `<div class=\"ag-list ag-${cssIdentifier}-list\" role=\"listbox\"></div>`);\n    }\n\n    public postConstruct(): void {\n        const eGui = this.getGui();\n        this.addManagedElementListeners(eGui, { mouseleave: () => this.clearHighlighted() });\n        if (this.unFocusable) {\n            return;\n        }\n        this.addManagedElementListeners(eGui, { keydown: this.handleKeyDown.bind(this) });\n    }\n\n    public handleKeyDown(e: KeyboardEvent): void {\n        const key = e.key;\n        switch (key) {\n            case KeyCode.ENTER:\n                if (!this.highlightedEl) {\n                    this.setValue(this.getValue());\n                } else {\n                    const pos = this.itemEls.indexOf(this.highlightedEl);\n                    this.setValueByIndex(pos);\n                }\n                break;\n            case KeyCode.DOWN:\n            case KeyCode.UP:\n                e.preventDefault();\n                this.navigate(key);\n                break;\n            case KeyCode.PAGE_DOWN:\n            case KeyCode.PAGE_UP:\n            case KeyCode.PAGE_HOME:\n            case KeyCode.PAGE_END:\n                e.preventDefault();\n                this.navigateToPage(key);\n                break;\n        }\n    }\n\n    private navigate(key: 'ArrowUp' | 'ArrowDown'): void {\n        const isDown = key === KeyCode.DOWN;\n        let itemToHighlight: HTMLElement;\n\n        if (!this.highlightedEl) {\n            itemToHighlight = this.itemEls[isDown ? 0 : this.itemEls.length - 1];\n        } else {\n            const currentIdx = this.itemEls.indexOf(this.highlightedEl);\n            let nextPos = currentIdx + (isDown ? 1 : -1);\n            nextPos = Math.min(Math.max(nextPos, 0), this.itemEls.length - 1);\n            itemToHighlight = this.itemEls[nextPos];\n        }\n        this.highlightItem(itemToHighlight);\n    }\n\n    private navigateToPage(key: 'PageUp' | 'PageDown' | 'Home' | 'End'): void {\n        if (!this.highlightedEl || this.itemEls.length === 0) {\n            return;\n        }\n\n        const currentIdx = this.itemEls.indexOf(this.highlightedEl);\n        const rowCount = this.options.length - 1;\n        const itemHeight = this.itemEls[0].clientHeight;\n        const pageSize = Math.floor(this.getGui().clientHeight / itemHeight);\n\n        let newIndex = -1;\n\n        if (key === KeyCode.PAGE_HOME) {\n            newIndex = 0;\n        } else if (key === KeyCode.PAGE_END) {\n            newIndex = rowCount;\n        } else if (key === KeyCode.PAGE_DOWN) {\n            newIndex = Math.min(currentIdx + pageSize, rowCount);\n        } else if (key === KeyCode.PAGE_UP) {\n            newIndex = Math.max(currentIdx - pageSize, 0);\n        }\n\n        if (newIndex === -1) {\n            return;\n        }\n\n        this.highlightItem(this.itemEls[newIndex]);\n    }\n\n    public addOptions(listOptions: ListOption<TValue>[]): this {\n        listOptions.forEach((listOption) => this.addOption(listOption));\n        return this;\n    }\n\n    public addOption(listOption: ListOption<TValue>): this {\n        const { value, text } = listOption;\n        const valueToRender = text || (value as any);\n\n        this.options.push({ value, text: valueToRender });\n        this.renderOption(value, valueToRender);\n\n        this.updateIndices();\n\n        return this;\n    }\n\n    public clearOptions(): void {\n        this.options = [];\n        this.reset(true);\n        this.itemEls.forEach((itemEl) => {\n            _removeFromParent(itemEl);\n        });\n        this.itemEls = [];\n    }\n\n    private updateIndices(): void {\n        const options = this.getGui().querySelectorAll('.ag-list-item');\n        options.forEach((option: HTMLElement, idx) => {\n            _setAriaPosInSet(option, idx + 1);\n            _setAriaSetSize(option, options.length);\n        });\n    }\n\n    private renderOption(value: TValue, text: string): void {\n        const eDocument = this.gos.getDocument();\n        const itemEl = eDocument.createElement('div');\n\n        _setAriaRole(itemEl, 'option');\n        itemEl.classList.add('ag-list-item', `ag-${this.cssIdentifier}-list-item`);\n        const span = eDocument.createElement('span');\n        itemEl.appendChild(span);\n        span.textContent = text;\n\n        if (!this.unFocusable) {\n            itemEl.tabIndex = -1;\n        }\n\n        this.itemEls.push(itemEl);\n\n        this.addManagedListeners(itemEl, {\n            mouseover: () => this.highlightItem(itemEl),\n            mousedown: (e: MouseEvent) => {\n                e.preventDefault();\n                // `setValue` will already close the list popup, without stopPropagation\n                // the mousedown event will close popups that own AgSelect\n                e.stopPropagation();\n                this.setValue(value);\n            },\n        });\n\n        this.createManagedBean(\n            new TooltipFeature({\n                getTooltipValue: () => text,\n                getGui: () => itemEl,\n                getLocation: () => 'UNKNOWN',\n                // only show tooltips for items where the text cannot be fully displayed\n                shouldDisplayTooltip: () => span.scrollWidth > span.clientWidth,\n            })\n        );\n\n        this.getGui().appendChild(itemEl);\n    }\n\n    public setValue(value?: TValue | null, silent?: boolean): this {\n        if (this.value === value) {\n            this.fireItemSelected();\n            return this;\n        }\n\n        if (value == null) {\n            this.reset(silent);\n            return this;\n        }\n\n        const idx = this.options.findIndex((option) => option.value === value);\n\n        if (idx !== -1) {\n            const option = this.options[idx];\n\n            this.value = option.value;\n            this.displayValue = option.text!;\n            this.highlightItem(this.itemEls[idx]);\n\n            if (!silent) {\n                this.fireChangeEvent();\n            }\n        }\n\n        return this;\n    }\n\n    public setValueByIndex(idx: number): this {\n        return this.setValue(this.options[idx].value);\n    }\n\n    public getValue(): TValue | null {\n        return this.value;\n    }\n\n    public getDisplayValue(): string | null {\n        return this.displayValue;\n    }\n\n    public refreshHighlighted(): void {\n        this.clearHighlighted();\n        const idx = this.options.findIndex((option) => option.value === this.value);\n\n        if (idx !== -1) {\n            this.highlightItem(this.itemEls[idx]);\n        }\n    }\n\n    private reset(silent?: boolean): void {\n        this.value = null;\n        this.displayValue = null;\n        this.clearHighlighted();\n        if (!silent) {\n            this.fireChangeEvent();\n        }\n    }\n\n    private highlightItem(el: HTMLElement): void {\n        if (!_isVisible(el)) {\n            return;\n        }\n\n        this.clearHighlighted();\n        this.highlightedEl = el;\n\n        this.highlightedEl.classList.add(this.activeClass);\n        _setAriaSelected(this.highlightedEl, true);\n\n        const eGui = this.getGui();\n\n        const { scrollTop, clientHeight } = eGui;\n        const { offsetTop, offsetHeight } = el;\n\n        if (offsetTop + offsetHeight > scrollTop + clientHeight || offsetTop < scrollTop) {\n            this.highlightedEl.scrollIntoView({ block: 'nearest' });\n        }\n\n        if (!this.unFocusable) {\n            this.highlightedEl.focus();\n        }\n    }\n\n    private clearHighlighted(): void {\n        if (!this.highlightedEl || !_isVisible(this.highlightedEl)) {\n            return;\n        }\n\n        this.highlightedEl.classList.remove(this.activeClass);\n        _setAriaSelected(this.highlightedEl, false);\n\n        this.highlightedEl = null;\n    }\n\n    private fireChangeEvent(): void {\n        this.dispatchLocalEvent({ type: 'fieldValueChanged' });\n        this.fireItemSelected();\n    }\n\n    private fireItemSelected(): void {\n        this.dispatchLocalEvent({ type: 'selectedItem' });\n    }\n}\n", "import { KeyCode } from '../constants/keyCode';\nimport type { BeanCollection } from '../context/context';\nimport type { AgPickerFieldParams } from '../interfaces/agFieldParams';\nimport { _setAriaExpanded, _setAriaRole } from '../utils/aria';\nimport { _formatSize, _getAbsoluteWidth, _getInnerHeight, _setElementWidth } from '../utils/dom';\nimport { _createIconNoSpan } from '../utils/icon';\nimport type { AgAbstractFieldEvent } from './agAbstractField';\nimport { AgAbstractField } from './agAbstractField';\nimport type { Component } from './component';\nimport { RefPlaceholder } from './component';\nimport type { AddPopupParams, PopupService } from './popupService';\n\nexport type AgPickerFieldEvent = AgAbstractFieldEvent;\nexport abstract class AgPickerField<\n    TValue,\n    TConfig extends AgPickerFieldParams = AgPickerFieldParams,\n    TEventType extends string = AgPickerFieldEvent,\n    TComponent extends Component<TEventType | AgPickerFieldEvent> = Component<TEventType | AgPickerFieldEvent>,\n> extends AgAbstractField<TValue, TConfig, TEventType | AgPickerFieldEvent> {\n    protected popupService: PopupService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.popupService = beans.popupService;\n    }\n\n    protected abstract createPickerComponent(): TComponent;\n\n    protected pickerComponent: TComponent | undefined;\n    protected isPickerDisplayed: boolean = false;\n\n    protected maxPickerHeight: string | undefined;\n    protected variableWidth: boolean;\n    protected minPickerWidth: string | undefined;\n    protected maxPickerWidth: string | undefined;\n    protected override value: TValue;\n\n    private skipClick: boolean = false;\n    private pickerGap: number = 4;\n\n    private hideCurrentPicker: (() => void) | null = null;\n    private destroyMouseWheelFunc: (() => null) | undefined;\n    private ariaRole?: string;\n\n    protected readonly eLabel: HTMLElement = RefPlaceholder;\n    protected readonly eWrapper: HTMLElement = RefPlaceholder;\n    protected readonly eDisplayField: HTMLElement = RefPlaceholder;\n    private readonly eIcon: HTMLButtonElement = RefPlaceholder;\n\n    constructor(config?: TConfig) {\n        super(\n            config,\n            config?.template ||\n                /* html */ `\n            <div class=\"ag-picker-field\" role=\"presentation\">\n                <div data-ref=\"eLabel\"></div>\n                    <div data-ref=\"eWrapper\" class=\"ag-wrapper ag-picker-field-wrapper ag-picker-collapsed\">\n                    <div data-ref=\"eDisplayField\" class=\"ag-picker-field-display\"></div>\n                    <div data-ref=\"eIcon\" class=\"ag-picker-field-icon\" aria-hidden=\"true\"></div>\n                </div>\n            </div>`,\n            config?.agComponents || [],\n            config?.className\n        );\n\n        this.ariaRole = config?.ariaRole;\n        this.onPickerFocusIn = this.onPickerFocusIn.bind(this);\n        this.onPickerFocusOut = this.onPickerFocusOut.bind(this);\n\n        if (!config) {\n            return;\n        }\n\n        const { pickerGap, maxPickerHeight, variableWidth, minPickerWidth, maxPickerWidth } = config;\n\n        if (pickerGap != null) {\n            this.pickerGap = pickerGap;\n        }\n\n        this.variableWidth = !!variableWidth;\n\n        if (maxPickerHeight != null) {\n            this.setPickerMaxHeight(maxPickerHeight);\n        }\n\n        if (minPickerWidth != null) {\n            this.setPickerMinWidth(minPickerWidth);\n        }\n\n        if (maxPickerWidth != null) {\n            this.setPickerMaxWidth(maxPickerWidth);\n        }\n    }\n\n    public override postConstruct() {\n        super.postConstruct();\n\n        this.setupAria();\n\n        const displayId = `ag-${this.getCompId()}-display`;\n        this.eDisplayField.setAttribute('id', displayId);\n\n        const ariaEl = this.getAriaElement();\n        this.addManagedElementListeners(ariaEl, { keydown: this.onKeyDown.bind(this) });\n\n        this.addManagedElementListeners(this.eLabel, { mousedown: this.onLabelOrWrapperMouseDown.bind(this) });\n        this.addManagedElementListeners(this.eWrapper, { mousedown: this.onLabelOrWrapperMouseDown.bind(this) });\n\n        const { pickerIcon, inputWidth } = this.config;\n\n        if (pickerIcon) {\n            const icon = _createIconNoSpan(pickerIcon, this.gos);\n            if (icon) {\n                this.eIcon.appendChild(icon);\n            }\n        }\n\n        if (inputWidth != null) {\n            this.setInputWidth(inputWidth);\n        }\n    }\n\n    protected setupAria(): void {\n        const ariaEl = this.getAriaElement();\n\n        ariaEl.setAttribute('tabindex', this.gos.get('tabIndex').toString());\n\n        _setAriaExpanded(ariaEl, false);\n\n        if (this.ariaRole) {\n            _setAriaRole(ariaEl, this.ariaRole);\n        }\n    }\n\n    private onLabelOrWrapperMouseDown(e?: MouseEvent): void {\n        if (e) {\n            const focusableEl = this.getFocusableElement();\n            // if the focusableEl is not the wrapper and the mousedown\n            // targets the focusableEl, we should not expand/collapse the picker.\n            // Note: this will happen when AgRichSelect is set with `allowTyping=true`\n            if (focusableEl !== this.eWrapper && e?.target === focusableEl) {\n                return;\n            }\n\n            // this prevents a BUG where MouseDown causes the element to be focused\n            // after the picker is shown and focus ends up being lost.\n            e.preventDefault();\n            this.getFocusableElement().focus();\n        }\n\n        if (this.skipClick) {\n            this.skipClick = false;\n            return;\n        }\n\n        if (this.isDisabled()) {\n            return;\n        }\n\n        if (this.isPickerDisplayed) {\n            this.hidePicker();\n        } else {\n            this.showPicker();\n        }\n    }\n\n    protected onKeyDown(e: KeyboardEvent): void {\n        switch (e.key) {\n            case KeyCode.UP:\n            case KeyCode.DOWN:\n            case KeyCode.ENTER:\n            case KeyCode.SPACE:\n                e.preventDefault();\n                this.onLabelOrWrapperMouseDown();\n                break;\n            case KeyCode.ESCAPE:\n                if (this.isPickerDisplayed) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    if (this.hideCurrentPicker) {\n                        this.hideCurrentPicker();\n                    }\n                }\n                break;\n        }\n    }\n\n    public showPicker() {\n        this.isPickerDisplayed = true;\n\n        if (!this.pickerComponent) {\n            this.pickerComponent = this.createPickerComponent();\n        }\n\n        const pickerGui = this.pickerComponent.getGui();\n        pickerGui.addEventListener('focusin', this.onPickerFocusIn);\n        pickerGui.addEventListener('focusout', this.onPickerFocusOut);\n\n        this.hideCurrentPicker = this.renderAndPositionPicker();\n\n        this.toggleExpandedStyles(true);\n    }\n\n    protected renderAndPositionPicker(): () => void {\n        const eDocument = this.gos.getDocument();\n        const ePicker = this.pickerComponent!.getGui();\n\n        if (!this.gos.get('suppressScrollWhenPopupsAreOpen')) {\n            [this.destroyMouseWheelFunc] = this.addManagedEventListeners({\n                bodyScroll: () => {\n                    this.hidePicker();\n                },\n            });\n        }\n\n        const translate = this.localeService.getLocaleTextFunc();\n\n        const { pickerAriaLabelKey, pickerAriaLabelValue, modalPicker = true } = this.config;\n\n        const popupParams: AddPopupParams = {\n            modal: modalPicker,\n            eChild: ePicker,\n            closeOnEsc: true,\n            closedCallback: () => {\n                const activeEl = this.gos.getActiveDomElement();\n                const shouldRestoreFocus = !activeEl || activeEl === eDocument.body;\n                this.beforeHidePicker();\n\n                if (shouldRestoreFocus && this.isAlive()) {\n                    this.getFocusableElement().focus();\n                }\n            },\n            ariaLabel: translate(pickerAriaLabelKey, pickerAriaLabelValue),\n        };\n\n        const addPopupRes = this.popupService.addPopup(popupParams);\n\n        const { maxPickerHeight, minPickerWidth, maxPickerWidth, variableWidth } = this;\n\n        if (variableWidth) {\n            if (minPickerWidth) {\n                ePicker.style.minWidth = minPickerWidth;\n            }\n            ePicker.style.width = _formatSize(_getAbsoluteWidth(this.eWrapper));\n            if (maxPickerWidth) {\n                ePicker.style.maxWidth = maxPickerWidth;\n            }\n        } else {\n            _setElementWidth(ePicker, maxPickerWidth ?? _getAbsoluteWidth(this.eWrapper));\n        }\n\n        const maxHeight = maxPickerHeight ?? `${_getInnerHeight(this.popupService.getPopupParent())}px`;\n\n        ePicker.style.setProperty('max-height', maxHeight);\n        ePicker.style.position = 'absolute';\n\n        this.alignPickerToComponent();\n\n        return addPopupRes.hideFunc;\n    }\n\n    protected alignPickerToComponent(): void {\n        if (!this.pickerComponent) {\n            return;\n        }\n\n        const { pickerType } = this.config;\n        const { pickerGap } = this;\n\n        const alignSide = this.gos.get('enableRtl') ? 'right' : 'left';\n\n        this.popupService.positionPopupByComponent({\n            type: pickerType,\n            eventSource: this.eWrapper,\n            ePopup: this.pickerComponent.getGui(),\n            position: 'under',\n            alignSide,\n            keepWithinBounds: true,\n            nudgeY: pickerGap,\n        });\n    }\n\n    protected beforeHidePicker(): void {\n        if (this.destroyMouseWheelFunc) {\n            this.destroyMouseWheelFunc();\n            this.destroyMouseWheelFunc = undefined;\n        }\n\n        this.toggleExpandedStyles(false);\n\n        const pickerGui = this.pickerComponent!.getGui();\n\n        pickerGui.removeEventListener('focusin', this.onPickerFocusIn);\n        pickerGui.removeEventListener('focusout', this.onPickerFocusOut);\n\n        this.isPickerDisplayed = false;\n        this.pickerComponent = undefined;\n        this.hideCurrentPicker = null;\n    }\n\n    protected toggleExpandedStyles(expanded: boolean): void {\n        if (!this.isAlive()) {\n            return;\n        }\n\n        const ariaEl = this.getAriaElement();\n\n        _setAriaExpanded(ariaEl, expanded);\n\n        this.eWrapper.classList.toggle('ag-picker-expanded', expanded);\n        this.eWrapper.classList.toggle('ag-picker-collapsed', !expanded);\n    }\n\n    private onPickerFocusIn(): void {\n        this.togglePickerHasFocus(true);\n    }\n\n    private onPickerFocusOut(e: FocusEvent): void {\n        if (!this.pickerComponent?.getGui().contains(e.relatedTarget as Element)) {\n            this.togglePickerHasFocus(false);\n        }\n    }\n\n    private togglePickerHasFocus(focused: boolean): void {\n        if (!this.pickerComponent) {\n            return;\n        }\n\n        this.eWrapper.classList.toggle('ag-picker-has-focus', focused);\n    }\n\n    public hidePicker(): void {\n        if (this.hideCurrentPicker) {\n            this.hideCurrentPicker();\n        }\n    }\n\n    public setInputWidth(width: number | 'flex'): this {\n        _setElementWidth(this.eWrapper, width);\n        return this;\n    }\n\n    public override getFocusableElement(): HTMLElement {\n        return this.eWrapper;\n    }\n\n    public setPickerGap(gap: number): this {\n        this.pickerGap = gap;\n\n        return this;\n    }\n\n    public setPickerMinWidth(width?: number | string): this {\n        if (typeof width === 'number') {\n            width = `${width}px`;\n        }\n        this.minPickerWidth = width == null ? undefined : width;\n        return this;\n    }\n\n    public setPickerMaxWidth(width?: number | string): this {\n        if (typeof width === 'number') {\n            width = `${width}px`;\n        }\n        this.maxPickerWidth = width == null ? undefined : width;\n        return this;\n    }\n\n    public setPickerMaxHeight(height?: number | string): this {\n        if (typeof height === 'number') {\n            height = `${height}px`;\n        }\n\n        this.maxPickerHeight = height == null ? undefined : height;\n        return this;\n    }\n\n    public override destroy(): void {\n        this.hidePicker();\n        super.destroy();\n    }\n}\n", "import { KeyCode } from '../constants/keyCode';\nimport type { AgPickerFieldParams } from '../interfaces/agFieldParams';\nimport { _setAriaControls } from '../utils/aria';\nimport type { ListOption } from './agList';\nimport { AgList } from './agList';\nimport { AgPickerField } from './agPickerField';\nimport type { ComponentSelector } from './component';\n\nexport interface AgSelectParams<TValue = string>\n    extends Omit<AgPickerFieldParams, 'pickerType' | 'pickerAriaLabelKey' | 'pickerAriaLabelValue'> {\n    options?: ListOption<TValue>[];\n    pickerType?: string;\n    pickerAriaLabelKey?: string;\n    pickerAriaLabelValue?: string;\n    placeholder?: string;\n}\nexport type AgSelectEvent = 'selectedItem';\nexport class AgSelect<TValue = string | null> extends AgPickerField<\n    TValue,\n    AgSelectParams<TValue> & AgPickerFieldParams,\n    AgSelectEvent,\n    AgList<AgSelectEvent, TValue>\n> {\n    protected listComponent: AgList<AgSelectEvent, TValue> | undefined;\n\n    constructor(config?: AgSelectParams<TValue>) {\n        super({\n            pickerAriaLabelKey: 'ariaLabelSelectField',\n            pickerAriaLabelValue: 'Select Field',\n            pickerType: 'ag-list',\n            className: 'ag-select',\n            pickerIcon: 'smallDown',\n            ariaRole: 'combobox',\n            ...config,\n        });\n    }\n\n    public override postConstruct(): void {\n        super.postConstruct();\n        this.createListComponent();\n        this.eWrapper.tabIndex = this.gos.get('tabIndex');\n\n        const { options, value, placeholder } = this.config;\n        if (options != null) {\n            this.addOptions(options);\n        }\n        if (value != null) {\n            // need to reapply value after list component created\n            this.setValue(value, true);\n        }\n        if (placeholder && value == null) {\n            this.eDisplayField.textContent = placeholder;\n        }\n\n        this.addManagedElementListeners(this.eWrapper, { focusout: this.onWrapperFocusOut.bind(this) });\n    }\n\n    private onWrapperFocusOut(e: FocusEvent): void {\n        if (!this.eWrapper.contains(e.relatedTarget as Element)) {\n            this.hidePicker();\n        }\n    }\n\n    private createListComponent(): void {\n        this.listComponent = this.createBean(new AgList<AgSelectEvent, TValue>('select', true));\n        this.listComponent.setParentComponent(this);\n\n        const eListAriaEl = this.listComponent.getAriaElement();\n        const listId = `ag-select-list-${this.listComponent.getCompId()}`;\n\n        eListAriaEl.setAttribute('id', listId);\n        _setAriaControls(this.getAriaElement(), eListAriaEl);\n\n        this.listComponent.addManagedListeners(this.listComponent, {\n            selectedItem: () => {\n                this.hidePicker();\n                this.dispatchLocalEvent({ type: 'selectedItem' });\n            },\n        });\n\n        this.listComponent.addManagedListeners(this.listComponent, {\n            fieldValueChanged: () => {\n                if (!this.listComponent) {\n                    return;\n                }\n                this.setValue(this.listComponent.getValue()!, false, true);\n                this.hidePicker();\n            },\n        });\n    }\n\n    protected createPickerComponent() {\n        // do not create the picker every time to save state\n        return this.listComponent!;\n    }\n\n    protected override onKeyDown(e: KeyboardEvent): void {\n        const { key } = e;\n\n        if (key === KeyCode.TAB) {\n            this.hidePicker();\n        }\n\n        switch (key) {\n            case KeyCode.ENTER:\n            case KeyCode.UP:\n            case KeyCode.DOWN:\n            case KeyCode.PAGE_UP:\n            case KeyCode.PAGE_DOWN:\n            case KeyCode.PAGE_HOME:\n            case KeyCode.PAGE_END:\n                e.preventDefault();\n                if (this.isPickerDisplayed) {\n                    this.listComponent?.handleKeyDown(e);\n                } else {\n                    super.onKeyDown(e);\n                }\n                break;\n            case KeyCode.ESCAPE:\n                super.onKeyDown(e);\n                break;\n        }\n    }\n\n    public override showPicker() {\n        if (!this.listComponent) {\n            return;\n        }\n\n        super.showPicker();\n\n        this.listComponent.refreshHighlighted();\n    }\n\n    public addOptions(options: ListOption<TValue>[]): this {\n        options.forEach((option) => this.addOption(option));\n\n        return this;\n    }\n\n    public addOption(option: ListOption<TValue>): this {\n        this.listComponent!.addOption(option);\n\n        return this;\n    }\n\n    public clearOptions(): this {\n        this.listComponent?.clearOptions();\n\n        return this;\n    }\n\n    public override setValue(value?: TValue, silent?: boolean, fromPicker?: boolean): this {\n        if (this.value === value || !this.listComponent) {\n            return this;\n        }\n\n        if (!fromPicker) {\n            this.listComponent.setValue(value, true);\n        }\n\n        const newValue = this.listComponent.getValue();\n\n        if (newValue === this.getValue()) {\n            return this;\n        }\n\n        let displayValue = this.listComponent.getDisplayValue();\n        if (displayValue == null && this.config.placeholder) {\n            displayValue = this.config.placeholder;\n        }\n\n        this.eDisplayField.textContent = displayValue!;\n\n        this.setTooltip({\n            newTooltipText: displayValue ?? null,\n            shouldDisplayTooltip: () => this.eDisplayField.scrollWidth > this.eDisplayField.clientWidth,\n        });\n\n        return super.setValue(value, silent);\n    }\n\n    public override destroy(): void {\n        if (this.listComponent) {\n            this.listComponent = this.destroyBean(this.listComponent);\n        }\n\n        super.destroy();\n    }\n}\n\nexport const AgSelectSelector: ComponentSelector = {\n    selector: 'AG-SELECT',\n    component: AgSelect,\n};\n", "import type { IFilterOptionDef } from '../../interfaces/iFilter';\nimport { _warnOnce } from '../../utils/function';\nimport type { ScalarFilterParams } from './iScalarFilter';\nimport type { SimpleFilterParams } from './iSimpleFilter';\n\n/* Common logic for options, used by both filters and floating filters. */\nexport class OptionsFactory {\n    protected customFilterOptions: { [name: string]: IFilterOptionDef } = {};\n    protected filterOptions: (IFilterOptionDef | string)[];\n    protected defaultOption: string;\n\n    public init(params: ScalarFilterParams, defaultOptions: string[]): void {\n        this.filterOptions = params.filterOptions || defaultOptions;\n        this.mapCustomOptions();\n        this.selectDefaultItem(params);\n    }\n\n    public getFilterOptions(): (IFilterOptionDef | string)[] {\n        return this.filterOptions;\n    }\n\n    private mapCustomOptions(): void {\n        if (!this.filterOptions) {\n            return;\n        }\n\n        this.filterOptions.forEach((filterOption) => {\n            if (typeof filterOption === 'string') {\n                return;\n            }\n\n            const requiredProperties = [['displayKey'], ['displayName'], ['predicate', 'test']];\n            const propertyCheck = (keys: [keyof IFilterOptionDef]) => {\n                if (!keys.some((key) => filterOption[key] != null)) {\n                    _warnOnce(`ignoring FilterOptionDef as it doesn't contain one of '${keys}'`);\n                    return false;\n                }\n\n                return true;\n            };\n\n            if (!requiredProperties.every(propertyCheck)) {\n                this.filterOptions = this.filterOptions.filter((v) => v === filterOption) || [];\n                return;\n            }\n\n            this.customFilterOptions[filterOption.displayKey] = filterOption;\n        });\n    }\n\n    private selectDefaultItem(params: SimpleFilterParams): void {\n        if (params.defaultOption) {\n            this.defaultOption = params.defaultOption;\n        } else if (this.filterOptions.length >= 1) {\n            const firstFilterOption = this.filterOptions[0];\n\n            if (typeof firstFilterOption === 'string') {\n                this.defaultOption = firstFilterOption;\n            } else if (firstFilterOption.displayKey) {\n                this.defaultOption = firstFilterOption.displayKey;\n            } else {\n                _warnOnce(`invalid FilterOptionDef supplied as it doesn't contain a 'displayKey'`);\n            }\n        } else {\n            _warnOnce('no filter options for filter');\n        }\n    }\n\n    public getDefaultOption(): string {\n        return this.defaultOption;\n    }\n\n    public getCustomOption(name?: string | null): IFilterOptionDef | undefined {\n        return this.customFilterOptions[name!];\n    }\n}\n", "import type { IAfterGuiAttachedParams } from '../../interfaces/iAfterGuiAttachedParams';\nimport type { IDoesFilterPassParams, IFilterOptionDef } from '../../interfaces/iFilter';\nimport { _areEqual } from '../../utils/array';\nimport { _removeFromParent, _setDisabled, _setDisplayed } from '../../utils/dom';\nimport { _isFunction, _warnOnce } from '../../utils/function';\nimport { AgPromise } from '../../utils/promise';\nimport { AgAbstractInputField } from '../../widgets/agAbstractInputField';\nimport type { AgInputTextField } from '../../widgets/agInputTextField';\nimport type { ListOption } from '../../widgets/agList';\nimport { AgRadioButton } from '../../widgets/agRadioButton';\nimport { AgSelect } from '../../widgets/agSelect';\nimport type { ComponentSelector } from '../../widgets/component';\nimport { Component } from '../../widgets/component';\nimport type { FILTER_LOCALE_TEXT } from '../filterLocaleText';\nimport type {\n    FilterPlaceholderFunction,\n    ICombinedSimpleModel,\n    ISimpleFilter,\n    ISimpleFilterModel,\n    ISimpleFilterModelType,\n    JoinOperator,\n    SimpleFilterParams,\n    Tuple,\n} from './iSimpleFilter';\nimport { OptionsFactory } from './optionsFactory';\nimport { ProvidedFilter } from './providedFilter';\n\n/**\n * Every filter with a dropdown where the user can specify a comparing type against the filter values.\n *\n * @param M type of filter-model managed by the concrete sub-class that extends this type\n * @param V type of value managed by the concrete sub-class that extends this type\n * @param E type of UI element used for collecting user-input\n */\nexport abstract class SimpleFilter<M extends ISimpleFilterModel, V, E = AgInputTextField>\n    extends ProvidedFilter<M | ICombinedSimpleModel<M>, V>\n    implements ISimpleFilter\n{\n    protected readonly eTypes: AgSelect[] = [];\n    protected readonly eJoinOperatorPanels: HTMLElement[] = [];\n    protected readonly eJoinOperatorsAnd: AgRadioButton[] = [];\n    protected readonly eJoinOperatorsOr: AgRadioButton[] = [];\n    protected readonly eConditionBodies: HTMLElement[] = [];\n    private readonly listener = () => this.onUiChanged();\n\n    private maxNumConditions: number;\n    private numAlwaysVisibleConditions: number;\n    private defaultJoinOperator: JoinOperator;\n    private filterPlaceholder: SimpleFilterParams['filterPlaceholder'];\n    private lastUiCompletePosition: number | null = null;\n    private joinOperatorId = 0;\n    private filterListOptions: ListOption[];\n\n    protected optionsFactory: OptionsFactory;\n    protected abstract getDefaultFilterOptions(): string[];\n\n    protected abstract createValueElement(): HTMLElement;\n\n    protected abstract removeValueElements(startPosition: number, deleteCount?: number): void;\n\n    // filter uses this to know if new model is different from previous model, ie if filter has changed\n    protected abstract areSimpleModelsEqual(a: ISimpleFilterModel, b: ISimpleFilterModel): boolean;\n\n    // getModel() calls this to create the two conditions. if only one condition,\n    // the result is returned by getModel(), otherwise is called twice and both results\n    // returned in a CombinedFilter object.\n    protected abstract createCondition(position: number): M;\n\n    // because the sub-class filter models have different attribute names, we have to map\n    protected abstract mapValuesFromModel(filterModel: ISimpleFilterModel | null): Tuple<V>;\n\n    // allow value-type specific handling of null cell values.\n    protected abstract evaluateNullValue(filterType?: ISimpleFilterModelType | null): boolean;\n\n    // allow value-type specific handling of non-null cell values.\n    protected abstract evaluateNonNullValue(\n        range: Tuple<V>,\n        cellValue: V,\n        filterModel: M,\n        params: IDoesFilterPassParams\n    ): boolean;\n\n    // allow iteration of all condition inputs managed by sub-classes.\n    protected abstract getInputs(position: number): Tuple<E>;\n\n    // allow retrieval of all condition input values.\n    protected abstract getValues(position: number): Tuple<V>;\n\n    protected getNumberOfInputs(type?: ISimpleFilterModelType | null): number {\n        const customOpts = this.optionsFactory.getCustomOption(type);\n        if (customOpts) {\n            const { numberOfInputs } = customOpts;\n            return numberOfInputs != null ? numberOfInputs : 1;\n        }\n\n        const zeroInputTypes: ISimpleFilterModelType[] = ['empty', 'notBlank', 'blank'];\n\n        if (type && zeroInputTypes.indexOf(type) >= 0) {\n            return 0;\n        } else if (type === 'inRange') {\n            return 2;\n        }\n\n        return 1;\n    }\n\n    // floating filter calls this when user applies filter from floating filter\n    public onFloatingFilterChanged(type: string | null | undefined, value: V | null): void {\n        this.setTypeFromFloatingFilter(type);\n        this.setValueFromFloatingFilter(value);\n        this.onUiChanged(true);\n    }\n\n    private setTypeFromFloatingFilter(type?: string | null): void {\n        this.eTypes.forEach((eType, position) => {\n            if (position === 0) {\n                eType.setValue(type, true);\n            } else {\n                eType.setValue(this.optionsFactory.getDefaultOption(), true);\n            }\n        });\n    }\n\n    public getModelFromUi(): M | ICombinedSimpleModel<M> | null {\n        const conditions = this.getUiCompleteConditions();\n        if (conditions.length === 0) {\n            return null;\n        }\n\n        if (this.maxNumConditions > 1 && conditions.length > 1) {\n            return {\n                filterType: this.getFilterType(),\n                operator: this.getJoinOperator(),\n                conditions,\n            };\n        }\n\n        return conditions[0];\n    }\n\n    protected getConditionTypes(): (ISimpleFilterModelType | null)[] {\n        return this.eTypes.map((eType) => eType.getValue() as ISimpleFilterModelType);\n    }\n\n    protected getConditionType(position: number): ISimpleFilterModelType | null {\n        return this.eTypes[position].getValue() as ISimpleFilterModelType;\n    }\n\n    protected getJoinOperator(): JoinOperator {\n        if (this.eJoinOperatorsOr.length === 0) {\n            return this.defaultJoinOperator;\n        }\n        return this.eJoinOperatorsOr[0].getValue() === true ? 'OR' : 'AND';\n    }\n\n    protected areModelsEqual(a: M | ICombinedSimpleModel<M>, b: M | ICombinedSimpleModel<M>): boolean {\n        // both are missing\n        if (!a && !b) {\n            return true;\n        }\n\n        // one is missing, other present\n        if ((!a && b) || (a && !b)) {\n            return false;\n        }\n\n        // one is combined, the other is not\n        const aIsSimple = !(a as any).operator;\n        const bIsSimple = !(b as any).operator;\n        const oneSimpleOneCombined = (!aIsSimple && bIsSimple) || (aIsSimple && !bIsSimple);\n        if (oneSimpleOneCombined) {\n            return false;\n        }\n\n        let res: boolean;\n\n        // otherwise both present, so compare\n        if (aIsSimple) {\n            const aSimple = a as M;\n            const bSimple = b as M;\n\n            res = this.areSimpleModelsEqual(aSimple, bSimple);\n        } else {\n            const aCombined = a as ICombinedSimpleModel<M>;\n            const bCombined = b as ICombinedSimpleModel<M>;\n\n            res =\n                aCombined.operator === bCombined.operator &&\n                _areEqual(aCombined.conditions, bCombined.conditions, (aModel, bModel) =>\n                    this.areSimpleModelsEqual(aModel, bModel)\n                );\n        }\n\n        return res;\n    }\n\n    private shouldRefresh(newParams: SimpleFilterParams): boolean {\n        const model = this.getModel();\n        const conditions: ISimpleFilterModel[] | null = model ? (<any>model).conditions ?? [model] : null;\n\n        // Do Not refresh when one of the existing condition options is not in new options list\n        const newOptionsList =\n            newParams.filterOptions?.map((option) => (typeof option === 'string' ? option : option.displayKey)) ??\n            this.getDefaultFilterOptions();\n\n        const allConditionsExistInNewOptionsList =\n            !conditions ||\n            conditions.every((condition) => newOptionsList.find((option) => option === condition.type) !== undefined);\n        if (!allConditionsExistInNewOptionsList) {\n            return false;\n        }\n\n        // Check number of conditions vs maxNumConditions\n        if (\n            typeof newParams.maxNumConditions === 'number' &&\n            conditions &&\n            conditions.length > newParams.maxNumConditions\n        ) {\n            return false;\n        }\n\n        return true;\n    }\n\n    override refresh(newParams: SimpleFilterParams): boolean {\n        if (!this.shouldRefresh(newParams)) {\n            return false;\n        }\n\n        const parentRefreshed = super.refresh(newParams);\n        if (!parentRefreshed) {\n            return false;\n        }\n\n        this.setParams(newParams);\n        this.removeConditionsAndOperators(0);\n        this.createOption();\n        this.setModel(this.getModel());\n\n        return true;\n    }\n\n    protected setModelIntoUi(model: ISimpleFilterModel | ICombinedSimpleModel<M>): AgPromise<void> {\n        const isCombined = (model as any).operator;\n\n        if (isCombined) {\n            const combinedModel = model as ICombinedSimpleModel<M>;\n\n            let conditions = combinedModel.conditions;\n            if (conditions == null) {\n                conditions = [];\n                _warnOnce(`Filter model is missing 'conditions'`);\n            }\n\n            const numConditions = this.validateAndUpdateConditions(conditions);\n            const numPrevConditions = this.getNumConditions();\n            if (numConditions < numPrevConditions) {\n                this.removeConditionsAndOperators(numConditions);\n            } else if (numConditions > numPrevConditions) {\n                for (let i = numPrevConditions; i < numConditions; i++) {\n                    this.createJoinOperatorPanel();\n                    this.createOption();\n                }\n            }\n\n            const orChecked = combinedModel.operator === 'OR';\n            this.eJoinOperatorsAnd.forEach((eJoinOperatorAnd) => eJoinOperatorAnd.setValue(!orChecked, true));\n            this.eJoinOperatorsOr.forEach((eJoinOperatorOr) => eJoinOperatorOr.setValue(orChecked, true));\n\n            conditions.forEach((condition, position) => {\n                this.eTypes[position].setValue(condition.type, true);\n                this.setConditionIntoUi(condition, position);\n            });\n        } else {\n            const simpleModel = model as M;\n\n            if (this.getNumConditions() > 1) {\n                this.removeConditionsAndOperators(1);\n            }\n\n            this.eTypes[0].setValue(simpleModel.type, true);\n            this.setConditionIntoUi(simpleModel, 0);\n        }\n\n        this.lastUiCompletePosition = this.getNumConditions() - 1;\n\n        this.createMissingConditionsAndOperators();\n\n        this.onUiChanged();\n\n        return AgPromise.resolve();\n    }\n\n    private validateAndUpdateConditions(conditions: M[]): number {\n        let numConditions = conditions.length;\n        if (numConditions > this.maxNumConditions) {\n            conditions.splice(this.maxNumConditions);\n            _warnOnce(\n                'Filter Model contains more conditions than \"filterParams.maxNumConditions\". Additional conditions have been ignored.'\n            );\n            numConditions = this.maxNumConditions;\n        }\n        return numConditions;\n    }\n\n    public doesFilterPass(params: IDoesFilterPassParams): boolean {\n        const model = this.getModel();\n\n        if (model == null) {\n            return true;\n        }\n\n        const { operator } = model as ICombinedSimpleModel<M>;\n        const models: M[] = [];\n\n        if (operator) {\n            const combinedModel = model as ICombinedSimpleModel<M>;\n\n            models.push(...(combinedModel.conditions ?? []));\n        } else {\n            models.push(model as M);\n        }\n\n        const combineFunction = operator && operator === 'OR' ? 'some' : 'every';\n\n        return models[combineFunction]((m) => this.individualConditionPasses(params, m));\n    }\n\n    protected override setParams(params: SimpleFilterParams): void {\n        super.setParams(params);\n\n        this.setNumConditions(params);\n\n        this.defaultJoinOperator = this.getDefaultJoinOperator(params.defaultJoinOperator);\n        this.filterPlaceholder = params.filterPlaceholder;\n\n        this.optionsFactory = new OptionsFactory();\n        this.optionsFactory.init(params, this.getDefaultFilterOptions());\n        this.createFilterListOptions();\n\n        this.createOption();\n        this.createMissingConditionsAndOperators();\n\n        if (this.isReadOnly()) {\n            // only do this when read only (so no other focusable elements), otherwise the tab order breaks\n            // as the tabbed layout managed focus feature will focus the body when it shouldn't\n            this.eFilterBody.setAttribute('tabindex', '-1');\n        }\n    }\n\n    private setNumConditions(params: SimpleFilterParams): void {\n        this.maxNumConditions = params.maxNumConditions ?? 2;\n        if (this.maxNumConditions < 1) {\n            _warnOnce('\"filterParams.maxNumConditions\" must be greater than or equal to zero.');\n            this.maxNumConditions = 1;\n        }\n        this.numAlwaysVisibleConditions = params.numAlwaysVisibleConditions ?? 1;\n        if (this.numAlwaysVisibleConditions < 1) {\n            _warnOnce('\"filterParams.numAlwaysVisibleConditions\" must be greater than or equal to zero.');\n            this.numAlwaysVisibleConditions = 1;\n        }\n        if (this.numAlwaysVisibleConditions > this.maxNumConditions) {\n            _warnOnce(\n                '\"filterParams.numAlwaysVisibleConditions\" cannot be greater than \"filterParams.maxNumConditions\".'\n            );\n            this.numAlwaysVisibleConditions = this.maxNumConditions;\n        }\n    }\n\n    private createOption(): void {\n        const eType = this.createManagedBean(new AgSelect());\n        this.eTypes.push(eType);\n        eType.addCssClass('ag-filter-select');\n        this.eFilterBody.appendChild(eType.getGui());\n\n        const eConditionBody = this.createValueElement();\n        this.eConditionBodies.push(eConditionBody);\n        this.eFilterBody.appendChild(eConditionBody);\n\n        this.putOptionsIntoDropdown(eType);\n        this.resetType(eType);\n        const position = this.getNumConditions() - 1;\n        this.forEachPositionInput(position, (element) => this.resetInput(element));\n        this.addChangedListeners(eType, position);\n    }\n\n    private createJoinOperatorPanel(): void {\n        const eJoinOperatorPanel = document.createElement('div');\n        this.eJoinOperatorPanels.push(eJoinOperatorPanel);\n        eJoinOperatorPanel.classList.add('ag-filter-condition');\n\n        const eJoinOperatorAnd = this.createJoinOperator(this.eJoinOperatorsAnd, eJoinOperatorPanel, 'and');\n        const eJoinOperatorOr = this.createJoinOperator(this.eJoinOperatorsOr, eJoinOperatorPanel, 'or');\n\n        this.eFilterBody.appendChild(eJoinOperatorPanel);\n\n        const index = this.eJoinOperatorPanels.length - 1;\n        const uniqueGroupId = this.joinOperatorId++;\n        this.resetJoinOperatorAnd(eJoinOperatorAnd, index, uniqueGroupId);\n        this.resetJoinOperatorOr(eJoinOperatorOr, index, uniqueGroupId);\n\n        if (!this.isReadOnly()) {\n            eJoinOperatorAnd.onValueChange(this.listener);\n            eJoinOperatorOr.onValueChange(this.listener);\n        }\n    }\n\n    private createJoinOperator(\n        eJoinOperators: AgRadioButton[],\n        eJoinOperatorPanel: HTMLElement,\n        andOr: string\n    ): AgRadioButton {\n        const eJoinOperator = this.createManagedBean(new AgRadioButton());\n        eJoinOperators.push(eJoinOperator);\n        eJoinOperator.addCssClass('ag-filter-condition-operator');\n        eJoinOperator.addCssClass(`ag-filter-condition-operator-${andOr}`);\n        eJoinOperatorPanel.appendChild(eJoinOperator.getGui());\n        return eJoinOperator;\n    }\n\n    private getDefaultJoinOperator(defaultJoinOperator?: JoinOperator): JoinOperator {\n        return defaultJoinOperator === 'AND' || defaultJoinOperator === 'OR' ? defaultJoinOperator : 'AND';\n    }\n\n    private createFilterListOptions(): void {\n        const filterOptions = this.optionsFactory.getFilterOptions();\n\n        this.filterListOptions = filterOptions.map((option) =>\n            typeof option === 'string' ? this.createBoilerplateListOption(option) : this.createCustomListOption(option)\n        );\n    }\n\n    private putOptionsIntoDropdown(eType: AgSelect): void {\n        // Add specified options to condition drop-down.\n        this.filterListOptions.forEach((listOption) => {\n            eType.addOption(listOption);\n        });\n\n        // Make drop-downs read-only if there is only one option.\n        eType.setDisabled(this.filterListOptions.length <= 1);\n    }\n\n    private createBoilerplateListOption(option: string): ListOption {\n        return { value: option, text: this.translate(option as keyof typeof FILTER_LOCALE_TEXT) };\n    }\n\n    private createCustomListOption(option: IFilterOptionDef): ListOption {\n        const { displayKey } = option;\n        const customOption = this.optionsFactory.getCustomOption(option.displayKey);\n        return {\n            value: displayKey,\n            text: customOption\n                ? this.localeService.getLocaleTextFunc()(customOption.displayKey, customOption.displayName)\n                : this.translate(displayKey as keyof typeof FILTER_LOCALE_TEXT),\n        };\n    }\n\n    protected createBodyTemplate(): string {\n        // created dynamically\n        return '';\n    }\n    protected getAgComponents(): ComponentSelector[] {\n        // created dynamically\n        return [];\n    }\n\n    protected getCssIdentifier() {\n        return 'simple-filter';\n    }\n\n    protected updateUiVisibility(): void {\n        const joinOperator = this.getJoinOperator();\n        this.updateNumConditions();\n\n        // from here, the number of elements in all the collections is correct, so can just update the values/statuses\n        this.updateConditionStatusesAndValues(this.lastUiCompletePosition!, joinOperator);\n    }\n\n    private updateNumConditions(): void {\n        // Collection sizes are already correct if updated via API, so only need to handle UI updates here\n        let lastUiCompletePosition = -1;\n        let areAllConditionsUiComplete = true;\n        for (let position = 0; position < this.getNumConditions(); position++) {\n            if (this.isConditionUiComplete(position)) {\n                lastUiCompletePosition = position;\n            } else {\n                areAllConditionsUiComplete = false;\n            }\n        }\n        if (this.shouldAddNewConditionAtEnd(areAllConditionsUiComplete)) {\n            this.createJoinOperatorPanel();\n            this.createOption();\n        } else {\n            const activePosition = this.lastUiCompletePosition ?? this.getNumConditions() - 2;\n            if (lastUiCompletePosition < activePosition) {\n                // remove any incomplete conditions at the end, excluding the active position\n                this.removeConditionsAndOperators(activePosition + 1);\n                const removeStartPosition = lastUiCompletePosition + 1;\n                const numConditionsToRemove = activePosition - removeStartPosition;\n                if (numConditionsToRemove > 0) {\n                    this.removeConditionsAndOperators(removeStartPosition, numConditionsToRemove);\n                }\n                this.createMissingConditionsAndOperators();\n            }\n        }\n        this.lastUiCompletePosition = lastUiCompletePosition;\n    }\n\n    private updateConditionStatusesAndValues(lastUiCompletePosition: number, joinOperator?: JoinOperator): void {\n        this.eTypes.forEach((eType, position) => {\n            const disabled = this.isConditionDisabled(position, lastUiCompletePosition);\n\n            eType.setDisabled(disabled || this.filterListOptions.length <= 1);\n            if (position === 1) {\n                _setDisabled(this.eJoinOperatorPanels[0], disabled);\n                this.eJoinOperatorsAnd[0].setDisabled(disabled);\n                this.eJoinOperatorsOr[0].setDisabled(disabled);\n            }\n        });\n\n        this.eConditionBodies.forEach((element, index) => {\n            _setDisplayed(element, this.isConditionBodyVisible(index));\n        });\n\n        const orChecked = (joinOperator ?? this.getJoinOperator()) === 'OR';\n        this.eJoinOperatorsAnd.forEach((eJoinOperatorAnd) => {\n            eJoinOperatorAnd.setValue(!orChecked, true);\n        });\n        this.eJoinOperatorsOr.forEach((eJoinOperatorOr) => {\n            eJoinOperatorOr.setValue(orChecked, true);\n        });\n\n        this.forEachInput((element, index, position, numberOfInputs) => {\n            this.setElementDisplayed(element, index < numberOfInputs);\n            this.setElementDisabled(element, this.isConditionDisabled(position, lastUiCompletePosition));\n        });\n\n        this.resetPlaceholder();\n    }\n\n    private shouldAddNewConditionAtEnd(areAllConditionsUiComplete: boolean): boolean {\n        return areAllConditionsUiComplete && this.getNumConditions() < this.maxNumConditions && !this.isReadOnly();\n    }\n\n    private removeConditionsAndOperators(startPosition: number, deleteCount?: number): void {\n        if (startPosition >= this.getNumConditions()) {\n            return;\n        }\n        this.removeComponents(this.eTypes, startPosition, deleteCount);\n        this.removeElements(this.eConditionBodies, startPosition, deleteCount);\n        this.removeValueElements(startPosition, deleteCount);\n        const joinOperatorIndex = Math.max(startPosition - 1, 0);\n        this.removeElements(this.eJoinOperatorPanels, joinOperatorIndex, deleteCount);\n        this.removeComponents(this.eJoinOperatorsAnd, joinOperatorIndex, deleteCount);\n        this.removeComponents(this.eJoinOperatorsOr, joinOperatorIndex, deleteCount);\n    }\n\n    private removeElements(elements: HTMLElement[], startPosition: number, deleteCount?: number): void {\n        const removedElements = this.removeItems(elements, startPosition, deleteCount);\n        removedElements.forEach((element) => _removeFromParent(element));\n    }\n\n    protected removeComponents<TEventType extends string>(\n        components: Component<TEventType>[],\n        startPosition: number,\n        deleteCount?: number\n    ): void {\n        const removedComponents = this.removeItems(components, startPosition, deleteCount);\n        removedComponents.forEach((comp) => {\n            _removeFromParent(comp.getGui());\n            this.destroyBean(comp);\n        });\n    }\n\n    protected removeItems<T>(items: T[], startPosition: number, deleteCount?: number): T[] {\n        return deleteCount == null ? items.splice(startPosition) : items.splice(startPosition, deleteCount);\n    }\n\n    public override afterGuiAttached(params?: IAfterGuiAttachedParams) {\n        super.afterGuiAttached(params);\n\n        this.resetPlaceholder();\n\n        if (!params?.suppressFocus) {\n            if (this.isReadOnly()) {\n                // something needs focus otherwise keyboard navigation breaks, so focus the filter body\n                this.eFilterBody.focus();\n            } else {\n                const firstInput = this.getInputs(0)[0];\n                if (!firstInput) {\n                    return;\n                }\n\n                if (firstInput instanceof AgAbstractInputField) {\n                    firstInput.getInputElement().focus();\n                }\n            }\n        }\n    }\n\n    public override afterGuiDetached(): void {\n        super.afterGuiDetached();\n\n        const appliedModel = this.getModel();\n\n        // Reset temporary UI state that was applied to the DOM but not committed to the model\n        this.resetUiToActiveModel(appliedModel);\n\n        // remove incomplete positions\n        let lastUiCompletePosition = -1;\n        // as we remove incomplete positions, the last UI complete position will change\n        let updatedLastUiCompletePosition = -1;\n        let conditionsRemoved = false;\n        const joinOperator = this.getJoinOperator();\n        for (let position = this.getNumConditions() - 1; position >= 0; position--) {\n            if (this.isConditionUiComplete(position)) {\n                if (lastUiCompletePosition === -1) {\n                    lastUiCompletePosition = position;\n                    updatedLastUiCompletePosition = position;\n                }\n            } else {\n                const shouldRemovePositionAtEnd =\n                    position >= this.numAlwaysVisibleConditions && !this.isConditionUiComplete(position - 1);\n                const positionBeforeLastUiCompletePosition = position < lastUiCompletePosition;\n                if (shouldRemovePositionAtEnd || positionBeforeLastUiCompletePosition) {\n                    this.removeConditionsAndOperators(position, 1);\n                    conditionsRemoved = true;\n                    if (positionBeforeLastUiCompletePosition) {\n                        updatedLastUiCompletePosition--;\n                    }\n                }\n            }\n        }\n        let shouldUpdateConditionStatusesAndValues = false;\n        if (this.getNumConditions() < this.numAlwaysVisibleConditions) {\n            // if conditions have been removed, need to recreate new ones at the end up to the number required\n            this.createMissingConditionsAndOperators();\n            shouldUpdateConditionStatusesAndValues = true;\n        }\n        if (this.shouldAddNewConditionAtEnd(updatedLastUiCompletePosition === this.getNumConditions() - 1)) {\n            this.createJoinOperatorPanel();\n            this.createOption();\n            shouldUpdateConditionStatusesAndValues = true;\n        }\n        if (shouldUpdateConditionStatusesAndValues) {\n            this.updateConditionStatusesAndValues(updatedLastUiCompletePosition, joinOperator);\n        }\n        if (conditionsRemoved) {\n            this.updateJoinOperatorsDisabled();\n        }\n        this.lastUiCompletePosition = updatedLastUiCompletePosition;\n    }\n\n    private getPlaceholderText(defaultPlaceholder: keyof typeof FILTER_LOCALE_TEXT, position: number): string {\n        let placeholder = this.translate(defaultPlaceholder);\n        if (_isFunction(this.filterPlaceholder)) {\n            const filterPlaceholderFn = this.filterPlaceholder as FilterPlaceholderFunction;\n            const filterOptionKey = this.eTypes[position].getValue() as ISimpleFilterModelType;\n            const filterOption = this.translate(filterOptionKey);\n            placeholder = filterPlaceholderFn({\n                filterOptionKey,\n                filterOption,\n                placeholder,\n            });\n        } else if (typeof this.filterPlaceholder === 'string') {\n            placeholder = this.filterPlaceholder;\n        }\n\n        return placeholder;\n    }\n\n    // allow sub-classes to reset HTML placeholders after UI update.\n    protected resetPlaceholder(): void {\n        const globalTranslate = this.localeService.getLocaleTextFunc();\n\n        this.forEachInput((element, index, position, numberOfInputs) => {\n            if (!(element instanceof AgAbstractInputField)) {\n                return;\n            }\n\n            const placeholder =\n                index === 0 && numberOfInputs > 1 ? 'inRangeStart' : index === 0 ? 'filterOoo' : 'inRangeEnd';\n            const ariaLabel =\n                index === 0 && numberOfInputs > 1\n                    ? globalTranslate('ariaFilterFromValue', 'Filter from value')\n                    : index === 0\n                      ? globalTranslate('ariaFilterValue', 'Filter Value')\n                      : globalTranslate('ariaFilterToValue', 'Filter to Value');\n\n            element.setInputPlaceholder(this.getPlaceholderText(placeholder, position));\n            element.setInputAriaLabel(ariaLabel);\n        });\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected setElementValue(element: E, value: V | null, fromFloatingFilter?: boolean): void {\n        if (element instanceof AgAbstractInputField) {\n            element.setValue(value != null ? String(value) : null, true);\n        }\n    }\n\n    protected setElementDisplayed(element: E, displayed: boolean): void {\n        if (element instanceof Component) {\n            _setDisplayed(element.getGui(), displayed);\n        }\n    }\n\n    protected setElementDisabled(element: E, disabled: boolean): void {\n        if (element instanceof Component) {\n            _setDisabled(element.getGui(), disabled);\n        }\n    }\n\n    protected attachElementOnChange(element: E, listener: () => void): void {\n        if (element instanceof AgAbstractInputField) {\n            element.onValueChange(listener);\n        }\n    }\n\n    protected forEachInput(cb: (element: E, index: number, position: number, numberOfInputs: number) => void): void {\n        this.getConditionTypes().forEach((type, position) => {\n            this.forEachPositionTypeInput(position, type, cb);\n        });\n    }\n\n    protected forEachPositionInput(\n        position: number,\n        cb: (element: E, index: number, position: number, numberOfInputs: number) => void\n    ): void {\n        const type = this.getConditionType(position);\n        this.forEachPositionTypeInput(position, type, cb);\n    }\n\n    private forEachPositionTypeInput(\n        position: number,\n        type: ISimpleFilterModelType | null,\n        cb: (element: E, index: number, position: number, numberOfInputs: number) => void\n    ): void {\n        const numberOfInputs = this.getNumberOfInputs(type);\n        const inputs = this.getInputs(position);\n        for (let index = 0; index < inputs.length; index++) {\n            const input = inputs[index];\n            if (input != null) {\n                cb(input, index, position, numberOfInputs);\n            }\n        }\n    }\n\n    private isConditionDisabled(position: number, lastUiCompletePosition: number): boolean {\n        if (this.isReadOnly()) {\n            return true;\n        } // Read-only mode trumps everything.\n        if (position === 0) {\n            return false;\n        } // Position 0 should typically be editable.\n\n        // Only allow editing of a 2nd or later condition if the previous condition is complete and no subsequent conditions are complete.\n        return position > lastUiCompletePosition + 1;\n    }\n\n    private isConditionBodyVisible(position: number): boolean {\n        // Check that the condition needs inputs.\n        const type = this.getConditionType(position);\n        const numberOfInputs = this.getNumberOfInputs(type);\n        return numberOfInputs > 0;\n    }\n\n    // returns true if the UI represents a working filter, eg all parts are filled out.\n    // eg if text filter and textfield blank then returns false.\n    protected isConditionUiComplete(position: number): boolean {\n        if (position >= this.getNumConditions()) {\n            return false;\n        } // Condition doesn't exist.\n\n        const type = this.getConditionType(position);\n\n        if (type === 'empty') {\n            return false;\n        }\n\n        if (this.getValues(position).some((v) => v == null)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private getNumConditions(): number {\n        return this.eTypes.length;\n    }\n\n    private getUiCompleteConditions(): M[] {\n        const conditions: M[] = [];\n        for (let position = 0; position < this.getNumConditions(); position++) {\n            if (this.isConditionUiComplete(position)) {\n                conditions.push(this.createCondition(position));\n            }\n        }\n        return conditions;\n    }\n\n    private createMissingConditionsAndOperators(): void {\n        if (this.isReadOnly()) {\n            return;\n        } // don't show incomplete conditions when read only\n        for (let i = this.getNumConditions(); i < this.numAlwaysVisibleConditions; i++) {\n            this.createJoinOperatorPanel();\n            this.createOption();\n        }\n    }\n\n    protected resetUiToDefaults(silent?: boolean): AgPromise<void> {\n        this.removeConditionsAndOperators(this.isReadOnly() ? 1 : this.numAlwaysVisibleConditions);\n\n        this.eTypes.forEach((eType) => this.resetType(eType));\n\n        this.eJoinOperatorsAnd.forEach((eJoinOperatorAnd, index) =>\n            this.resetJoinOperatorAnd(eJoinOperatorAnd, index, this.joinOperatorId + index)\n        );\n        this.eJoinOperatorsOr.forEach((eJoinOperatorOr, index) =>\n            this.resetJoinOperatorOr(eJoinOperatorOr, index, this.joinOperatorId + index)\n        );\n        this.joinOperatorId++;\n\n        this.forEachInput((element) => this.resetInput(element));\n\n        this.resetPlaceholder();\n\n        this.createMissingConditionsAndOperators();\n\n        this.lastUiCompletePosition = null;\n\n        if (!silent) {\n            this.onUiChanged();\n        }\n\n        return AgPromise.resolve();\n    }\n\n    private resetType(eType: AgSelect): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const filteringLabel = translate('ariaFilteringOperator', 'Filtering operator');\n        eType\n            .setValue(this.optionsFactory.getDefaultOption(), true)\n            .setAriaLabel(filteringLabel)\n            .setDisabled(this.isReadOnly() || this.filterListOptions.length <= 1);\n    }\n\n    private resetJoinOperatorAnd(eJoinOperatorAnd: AgRadioButton, index: number, uniqueGroupId: number): void {\n        this.resetJoinOperator(\n            eJoinOperatorAnd,\n            index,\n            this.isDefaultOperator('AND'),\n            this.translate('andCondition'),\n            uniqueGroupId\n        );\n    }\n\n    private resetJoinOperatorOr(eJoinOperatorOr: AgRadioButton, index: number, uniqueGroupId: number): void {\n        this.resetJoinOperator(\n            eJoinOperatorOr,\n            index,\n            this.isDefaultOperator('OR'),\n            this.translate('orCondition'),\n            uniqueGroupId\n        );\n    }\n\n    private resetJoinOperator(\n        eJoinOperator: AgRadioButton,\n        index: number,\n        value: boolean,\n        label: string,\n        uniqueGroupId: number\n    ): void {\n        this.updateJoinOperatorDisabled(\n            eJoinOperator\n                .setValue(value, true)\n                .setName(`ag-simple-filter-and-or-${this.getCompId()}-${uniqueGroupId}`)\n                .setLabel(label),\n            index\n        );\n    }\n\n    private updateJoinOperatorsDisabled(): void {\n        this.eJoinOperatorsAnd.forEach((eJoinOperator, index) => this.updateJoinOperatorDisabled(eJoinOperator, index));\n        this.eJoinOperatorsOr.forEach((eJoinOperator, index) => this.updateJoinOperatorDisabled(eJoinOperator, index));\n    }\n\n    private updateJoinOperatorDisabled(eJoinOperator: AgRadioButton, index: number): void {\n        eJoinOperator.setDisabled(this.isReadOnly() || index > 0);\n    }\n\n    private resetInput(element: E): void {\n        this.setElementValue(element, null);\n        this.setElementDisabled(element, this.isReadOnly());\n    }\n\n    // puts model values into the UI\n    private setConditionIntoUi(model: M | null, position: number): void {\n        const values = this.mapValuesFromModel(model);\n        this.forEachInput((element, index, elPosition) => {\n            if (elPosition !== position) {\n                return;\n            }\n\n            this.setElementValue(element, values[index] != null ? values[index] : null);\n        });\n    }\n\n    // after floating filter changes, this sets the 'value' section. this is implemented by the base class\n    // (as that's where value is controlled), the 'type' part from the floating filter is dealt with in this class.\n    private setValueFromFloatingFilter(value: V | null): void {\n        this.forEachInput((element, index, position) => {\n            this.setElementValue(element, index === 0 && position === 0 ? value : null, true);\n        });\n    }\n\n    private isDefaultOperator(operator: JoinOperator): boolean {\n        return operator === this.defaultJoinOperator;\n    }\n\n    private addChangedListeners(eType: AgSelect, position: number) {\n        if (this.isReadOnly()) {\n            return;\n        }\n\n        eType.onValueChange(this.listener);\n\n        this.forEachPositionInput(position, (element) => {\n            this.attachElementOnChange(element, this.listener);\n        });\n    }\n\n    /** returns true if the row passes the said condition */\n    protected individualConditionPasses(params: IDoesFilterPassParams, filterModel: M) {\n        const cellValue = this.getCellValue(params.node);\n        const values = this.mapValuesFromModel(filterModel);\n        const customFilterOption = this.optionsFactory.getCustomOption(filterModel.type);\n\n        const customFilterResult = this.evaluateCustomFilter(customFilterOption, values, cellValue);\n        if (customFilterResult != null) {\n            return customFilterResult;\n        }\n\n        if (cellValue == null) {\n            return this.evaluateNullValue(filterModel.type);\n        }\n\n        return this.evaluateNonNullValue(values, cellValue, filterModel, params);\n    }\n\n    protected evaluateCustomFilter(\n        customFilterOption: IFilterOptionDef | undefined,\n        values: Tuple<V>,\n        cellValue: V | null | undefined\n    ): boolean | undefined {\n        if (customFilterOption == null) {\n            return;\n        }\n\n        const { predicate } = customFilterOption;\n        // only execute the custom filter if a value exists or a value isn't required, i.e. input is hidden\n        if (predicate != null && !values.some((v) => v == null)) {\n            return predicate(values, cellValue);\n        }\n\n        // No custom filter invocation, indicate that to the caller.\n        return;\n    }\n\n    protected isBlank(cellValue: V) {\n        return cellValue == null || (typeof cellValue === 'string' && cellValue.trim().length === 0);\n    }\n\n    protected hasInvalidInputs(): boolean {\n        return false;\n    }\n}\n", "import { _warnOnce } from '../../utils/function';\nimport type { AgInputTextField } from '../../widgets/agInputTextField';\nimport type { Comparator, ScalarFilterParams } from './iScalarFilter';\nimport type { ISimpleFilterModel, ISimpleFilterModelType, Tuple } from './iSimpleFilter';\nimport { SimpleFilter } from './simpleFilter';\n\nexport abstract class ScalarFilter<M extends ISimpleFilterModel, V, E = AgInputTextField> extends SimpleFilter<\n    M,\n    V,\n    E\n> {\n    private scalarFilterParams: ScalarFilterParams;\n\n    protected abstract comparator(): Comparator<V>;\n\n    protected override setParams(params: ScalarFilterParams): void {\n        super.setParams(params);\n        this.scalarFilterParams = params;\n    }\n\n    protected evaluateNullValue(filterType?: ISimpleFilterModelType | null) {\n        switch (filterType) {\n            case 'equals':\n            case 'notEqual':\n                if (this.scalarFilterParams.includeBlanksInEquals) {\n                    return true;\n                }\n                break;\n\n            case 'greaterThan':\n            case 'greaterThanOrEqual':\n                if (this.scalarFilterParams.includeBlanksInGreaterThan) {\n                    return true;\n                }\n                break;\n\n            case 'lessThan':\n            case 'lessThanOrEqual':\n                if (this.scalarFilterParams.includeBlanksInLessThan) {\n                    return true;\n                }\n                break;\n            case 'inRange':\n                if (this.scalarFilterParams.includeBlanksInRange) {\n                    return true;\n                }\n                break;\n            case 'blank':\n                return true;\n            case 'notBlank':\n                return false;\n        }\n\n        return false;\n    }\n\n    protected evaluateNonNullValue(values: Tuple<V>, cellValue: V, filterModel: M): boolean {\n        const comparator = this.comparator();\n        const compareResult = values[0] != null ? comparator(values[0]!, cellValue) : 0;\n\n        switch (filterModel.type) {\n            case 'equals':\n                return compareResult === 0;\n\n            case 'notEqual':\n                return compareResult !== 0;\n\n            case 'greaterThan':\n                return compareResult > 0;\n\n            case 'greaterThanOrEqual':\n                return compareResult >= 0;\n\n            case 'lessThan':\n                return compareResult < 0;\n\n            case 'lessThanOrEqual':\n                return compareResult <= 0;\n\n            case 'inRange': {\n                const compareToResult = comparator(values[1]!, cellValue);\n\n                return this.scalarFilterParams.inRangeInclusive\n                    ? compareResult >= 0 && compareToResult <= 0\n                    : compareResult > 0 && compareToResult < 0;\n            }\n\n            case 'blank':\n                return this.isBlank(cellValue);\n\n            case 'notBlank':\n                return !this.isBlank(cellValue);\n\n            default:\n                _warnOnce(\n                    'Unexpected type of filter \"' +\n                        filterModel.type +\n                        '\", it looks like the filter was configured with incorrect Filter Options'\n                );\n                return true;\n        }\n    }\n}\n", "import { KeyCode } from '../constants/keyCode';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { AgColumnGroup } from '../entities/agColumnGroup';\nimport type { SuppressHeaderKeyboardEventParams, SuppressKeyboardEventParams } from '../entities/colDef';\nimport type { GridOptionsService } from '../gridOptionsService';\nimport type { IRowNode } from '../interfaces/iRowNode';\nimport { _isMacOsUserAgent } from './browser';\nimport { _exists } from './generic';\n\nconst A_KEYCODE = 65;\nconst C_KEYCODE = 67;\nconst V_KEYCODE = 86;\nconst D_KEYCODE = 68;\nconst Z_KEYCODE = 90;\nconst Y_KEYCODE = 89;\n\nexport function _isEventFromPrintableCharacter(event: KeyboardEvent): boolean {\n    // no allowed printable chars have alt or ctrl key combinations\n    if (event.altKey || event.ctrlKey || event.metaKey) {\n        return false;\n    }\n\n    // if key is length 1, eg if it is 'a' for the a key, or '2' for the '2' key.\n    // non-printable characters have names, eg 'Enter' or 'Backspace'.\n    const printableCharacter = event.key.length === 1;\n\n    return printableCharacter;\n}\n\n/**\n * Allows user to tell the grid to skip specific keyboard events\n * @param {GridOptionsService} gos\n * @param {KeyboardEvent} keyboardEvent\n * @param {IRowNode} rowNode\n * @param {Column} column\n * @param {boolean} editing\n * @returns {boolean}\n */\nexport function _isUserSuppressingKeyboardEvent(\n    gos: GridOptionsService,\n    keyboardEvent: KeyboardEvent,\n    rowNode: IRowNode,\n    column: AgColumn,\n    editing: boolean\n): boolean {\n    const colDefFunc = column ? column.getColDef().suppressKeyboardEvent : undefined;\n\n    // if no callbacks provided by user, then do nothing\n    if (!colDefFunc) {\n        return false;\n    }\n\n    const params: SuppressKeyboardEventParams = gos.addGridCommonParams({\n        event: keyboardEvent,\n        editing,\n        column,\n        node: rowNode,\n        data: rowNode.data,\n        colDef: column.getColDef(),\n    });\n\n    // colDef get first preference on suppressing events\n    if (colDefFunc) {\n        const colDefFuncResult = colDefFunc(params);\n        // if colDef func suppressed, then return now, no need to call gridOption func\n        if (colDefFuncResult) {\n            return true;\n        }\n    }\n\n    // otherwise return false, don't suppress, as colDef didn't suppress and no func on gridOptions\n    return false;\n}\n\nexport function _isUserSuppressingHeaderKeyboardEvent(\n    gos: GridOptionsService,\n    keyboardEvent: KeyboardEvent,\n    headerRowIndex: number,\n    column: AgColumn | AgColumnGroup\n): boolean {\n    const colDef = column.getDefinition();\n    const colDefFunc = colDef && colDef.suppressHeaderKeyboardEvent;\n\n    if (!_exists(colDefFunc)) {\n        return false;\n    }\n\n    const params: SuppressHeaderKeyboardEventParams = gos.addGridCommonParams({\n        colDef: colDef,\n        column,\n        headerRowIndex,\n        event: keyboardEvent,\n    });\n\n    return !!colDefFunc(params);\n}\n\nexport function _normaliseQwertyAzerty(keyboardEvent: KeyboardEvent): string {\n    const { keyCode } = keyboardEvent;\n    let code: string;\n\n    switch (keyCode) {\n        case A_KEYCODE:\n            code = KeyCode.A;\n            break;\n        case C_KEYCODE:\n            code = KeyCode.C;\n            break;\n        case V_KEYCODE:\n            code = KeyCode.V;\n            break;\n        case D_KEYCODE:\n            code = KeyCode.D;\n            break;\n        case Z_KEYCODE:\n            code = KeyCode.Z;\n            break;\n        case Y_KEYCODE:\n            code = KeyCode.Y;\n            break;\n        default:\n            code = keyboardEvent.code;\n    }\n\n    return code;\n}\n\nexport function _isDeleteKey(key: string, alwaysReturnFalseOnBackspace = false) {\n    if (key === KeyCode.DELETE) {\n        return true;\n    }\n    if (!alwaysReturnFalseOnBackspace && key === KeyCode.BACKSPACE) {\n        return _isMacOsUserAgent();\n    }\n    return false;\n}\n", "import type { AgInputFieldParams } from '../interfaces/agFieldParams';\nimport { _exists } from '../utils/generic';\nimport { _isEventFromPrintableCharacter } from '../utils/keyboard';\nimport type { AgAbstractInputFieldEvent } from './agAbstractInputField';\nimport { AgAbstractInputField } from './agAbstractInputField';\nimport type { ComponentSelector } from './component';\n\nexport interface AgInputTextFieldParams extends AgInputFieldParams {\n    allowedCharPattern?: string;\n}\nexport type AgInputTextFieldEvent = AgAbstractInputFieldEvent;\nexport class AgInputTextField<\n    TConfig extends AgInputTextFieldParams = AgInputTextFieldParams,\n    TEventType extends string = AgInputTextFieldEvent,\n> extends AgAbstractInputField<HTMLInputElement, string, TConfig, AgInputTextFieldEvent | TEventType> {\n    constructor(config?: TConfig, className = 'ag-text-field', inputType = 'text') {\n        super(config, className, inputType);\n    }\n\n    public override postConstruct() {\n        super.postConstruct();\n\n        if (this.config.allowedCharPattern) {\n            this.preventDisallowedCharacters();\n        }\n    }\n\n    public override setValue(value?: string | null, silent?: boolean): this {\n        // update the input before we call super.setValue, so it's updated before the value changed event is fired\n        if (this.eInput.value !== value) {\n            this.eInput.value = _exists(value) ? value : '';\n        }\n\n        return super.setValue(value, silent);\n    }\n\n    /** Used to set an initial value into the input without necessarily setting `this.value` or triggering events (e.g. to set an invalid value) */\n    public setStartValue(value?: string | null): void {\n        this.setValue(value, true);\n    }\n\n    private preventDisallowedCharacters(): void {\n        const pattern = new RegExp(`[${this.config.allowedCharPattern}]`);\n\n        const preventCharacters = (event: KeyboardEvent) => {\n            if (!_isEventFromPrintableCharacter(event)) {\n                return;\n            }\n\n            if (event.key && !pattern.test(event.key)) {\n                event.preventDefault();\n            }\n        };\n\n        this.addManagedListeners(this.eInput, {\n            keydown: preventCharacters,\n            paste: (e: ClipboardEvent) => {\n                const text = e.clipboardData?.getData('text');\n\n                if (text && text.split('').some((c: string) => !pattern.test(c))) {\n                    e.preventDefault();\n                }\n            },\n        });\n    }\n}\nexport const AgInputTextFieldSelector: ComponentSelector = {\n    selector: 'AG-INPUT-TEXT-FIELD',\n    component: AgInputTextField,\n};\n", "import { _addOrRemoveAttribute } from '../utils/dom';\nimport { _exists } from '../utils/generic';\nimport type { AgInputTextFieldParams } from './agInputTextField';\nimport { AgInputTextField } from './agInputTextField';\nimport type { ComponentSelector } from './component';\n\nexport interface AgInputNumberFieldParams extends AgInputTextFieldParams {\n    precision?: number;\n    step?: number;\n    min?: number;\n    max?: number;\n}\n\nexport class AgInputNumberField extends AgInputTextField<AgInputNumberFieldParams> {\n    private precision?: number;\n    private step?: number;\n    private min?: number;\n    private max?: number;\n\n    constructor(config?: AgInputNumberFieldParams) {\n        super(config, 'ag-number-field', 'number');\n    }\n\n    public override postConstruct() {\n        super.postConstruct();\n        this.addManagedListeners(this.eInput, {\n            blur: () => {\n                const floatedValue = parseFloat(this.eInput.value);\n                const value = isNaN(floatedValue) ? '' : this.normalizeValue(floatedValue.toString());\n\n                if (this.value !== value) {\n                    this.setValue(value);\n                }\n            },\n            wheel: this.onWheel.bind(this),\n        });\n\n        this.eInput.step = 'any';\n\n        const { precision, min, max, step } = this.config;\n        if (typeof precision === 'number') this.setPrecision(precision);\n        if (typeof min === 'number') this.setMin(min);\n        if (typeof max === 'number') this.setMax(max);\n        if (typeof step === 'number') this.setStep(step);\n    }\n\n    private onWheel(e: WheelEvent) {\n        // Prevent default scroll events from incrementing / decrementing the input, since its inconsistent between browsers\n        if (this.gos.getActiveDomElement() === this.eInput) {\n            e.preventDefault();\n        }\n    }\n\n    public normalizeValue(value: string): string {\n        if (value === '') {\n            return '';\n        }\n\n        if (this.precision != null) {\n            value = this.adjustPrecision(value);\n        }\n\n        const val = parseFloat(value);\n\n        if (this.min != null && val < this.min) {\n            value = this.min.toString();\n        } else if (this.max != null && val > this.max) {\n            value = this.max.toString();\n        }\n\n        return value;\n    }\n\n    private adjustPrecision(value: string, isScientificNotation?: boolean): string {\n        if (this.precision == null) {\n            return value;\n        }\n        if (isScientificNotation) {\n            const floatString = parseFloat(value).toFixed(this.precision);\n            return parseFloat(floatString).toString();\n        }\n\n        // can't use toFixed here because we don't want to round up\n        const parts = String(value).split('.');\n        if (parts.length > 1) {\n            if (parts[1].length <= this.precision) {\n                return value;\n            } else if (this.precision > 0) {\n                return `${parts[0]}.${parts[1].slice(0, this.precision)}`;\n            }\n        }\n        return parts[0];\n    }\n\n    public setMin(min: number | undefined): this {\n        if (this.min === min) {\n            return this;\n        }\n\n        this.min = min;\n\n        _addOrRemoveAttribute(this.eInput, 'min', min);\n\n        return this;\n    }\n\n    public setMax(max: number | undefined): this {\n        if (this.max === max) {\n            return this;\n        }\n\n        this.max = max;\n\n        _addOrRemoveAttribute(this.eInput, 'max', max);\n\n        return this;\n    }\n\n    public setPrecision(precision: number): this {\n        this.precision = precision;\n\n        return this;\n    }\n\n    public setStep(step?: number): this {\n        if (this.step === step) {\n            return this;\n        }\n\n        this.step = step;\n\n        _addOrRemoveAttribute(this.eInput, 'step', step);\n\n        return this;\n    }\n\n    public override setValue(value?: string | null, silent?: boolean): this {\n        return this.setValueOrInputValue(\n            (v) => super.setValue(v, silent),\n            () => this,\n            value\n        );\n    }\n\n    public override setStartValue(value?: string | null): void {\n        return this.setValueOrInputValue<void>(\n            (v) => super.setValue(v, true),\n            (v) => {\n                this.eInput.value = v;\n            },\n            value\n        );\n    }\n\n    private setValueOrInputValue<T>(\n        setValueFunc: (value?: string | null) => T,\n        setInputValueOnlyFunc: (value: string) => T,\n        value?: string | null\n    ): T {\n        if (_exists(value)) {\n            // need to maintain the scientific notation format whilst typing (e.g. 1e10)\n            let setInputValueOnly = this.isScientificNotation(value);\n            if (setInputValueOnly && this.eInput.validity.valid) {\n                return setValueFunc(value);\n            }\n            if (!setInputValueOnly) {\n                value = this.adjustPrecision(value);\n                const normalizedValue = this.normalizeValue(value);\n                // outside of valid range\n                setInputValueOnly = value != normalizedValue;\n            }\n\n            if (setInputValueOnly) {\n                return setInputValueOnlyFunc(value);\n            }\n        }\n\n        return setValueFunc(value);\n    }\n\n    public override getValue(): string | null | undefined {\n        if (!this.eInput.validity.valid) {\n            return undefined;\n        }\n        const inputValue = this.eInput.value;\n        if (this.isScientificNotation(inputValue)) {\n            return this.adjustPrecision(inputValue, true);\n        }\n        return super.getValue();\n    }\n\n    private isScientificNotation(value: string): boolean {\n        return typeof value === 'string' && value.includes('e');\n    }\n}\n\nexport const AgInputNumberFieldSelector: ComponentSelector = {\n    selector: 'AG-INPUT-NUMBER-FIELD',\n    component: AgInputNumberField,\n};\n", "import type { ISimpleFilterModelType } from '../iSimpleFilter';\n\nexport const DEFAULT_NUMBER_FILTER_OPTIONS: ISimpleFilterModelType[] = [\n    'equals',\n    'notEqual',\n    'greaterThan',\n    'greaterThanOrEqual',\n    'lessThan',\n    'lessThanOrEqual',\n    'inRange',\n    'blank',\n    'notBlank',\n];\n", "import type { IFilterOptionDef, ProvidedFilterModel } from '../../interfaces/iFilter';\nimport type { LocaleService } from '../../localeService';\nimport { FILTER_LOCALE_TEXT } from '../filterLocaleText';\nimport type { ICombinedSimpleModel, ISimpleFilterModel } from './iSimpleFilter';\nimport type { OptionsFactory } from './optionsFactory';\n\nexport abstract class SimpleFilterModelFormatter<TValue = any> {\n    constructor(\n        private readonly localeService: LocaleService,\n        private optionsFactory: OptionsFactory,\n        protected readonly valueFormatter?: (value: TValue | null) => string | null\n    ) {}\n\n    // used by:\n    // 1) NumberFloatingFilter & TextFloatingFilter: Always, for both when editable and read only.\n    // 2) DateFloatingFilter: Only when read only (as we show text rather than a date picker when read only)\n    public getModelAsString(model: ISimpleFilterModel | null): string | null {\n        if (!model) {\n            return null;\n        }\n        const isCombined = (model as any).operator != null;\n        const translate = this.localeService.getLocaleTextFunc();\n        if (isCombined) {\n            const combinedModel = model as ICombinedSimpleModel<ISimpleFilterModel>;\n            const conditions = combinedModel.conditions ?? [];\n            const customOptions = conditions.map((condition) => this.getModelAsString(condition));\n            const joinOperatorTranslateKey = combinedModel.operator === 'AND' ? 'andCondition' : 'orCondition';\n            return customOptions.join(\n                ` ${translate(joinOperatorTranslateKey, FILTER_LOCALE_TEXT[joinOperatorTranslateKey])} `\n            );\n        } else if (model.type === 'blank' || model.type === 'notBlank') {\n            return translate(model.type, model.type);\n        } else {\n            const condition = model as ISimpleFilterModel;\n            const customOption = this.optionsFactory.getCustomOption(condition.type);\n\n            // For custom filter options we display the Name of the filter instead\n            // of displaying the `from` value, as it wouldn't be relevant\n            const { displayKey, displayName, numberOfInputs } = customOption || {};\n            if (displayKey && displayName && numberOfInputs === 0) {\n                translate(displayKey, displayName);\n                return displayName;\n            }\n            return this.conditionToString(condition, customOption);\n        }\n    }\n\n    // creates text equivalent of FilterModel. if it's a combined model, this takes just one condition.\n    protected abstract conditionToString(condition: ProvidedFilterModel, opts?: IFilterOptionDef): string;\n\n    public updateParams(params: { optionsFactory: OptionsFactory }) {\n        this.optionsFactory = params.optionsFactory;\n    }\n\n    protected formatValue(value?: TValue | null): string {\n        return this.valueFormatter ? this.valueFormatter(value ?? null) ?? '' : String(value);\n    }\n}\n", "import type { IFilterOptionDef } from '../../../interfaces/iFilter';\nimport { SimpleFilterModelFormatter } from '../simpleFilterModelFormatter';\nimport type { NumberFilterModel } from './iNumberFilter';\n\nexport class NumberFilterModelFormatter extends SimpleFilterModelFormatter<number> {\n    protected conditionToString(condition: NumberFilterModel, options?: IFilterOptionDef): string {\n        const { numberOfInputs } = options || {};\n        const isRange = condition.type == 'inRange' || numberOfInputs === 2;\n\n        if (isRange) {\n            return `${this.formatValue(condition.filter)}-${this.formatValue(condition.filterTo)}`;\n        }\n\n        // cater for when the type doesn't need a value\n        if (condition.filter != null) {\n            return this.formatValue(condition.filter);\n        }\n\n        return `${condition.type}`;\n    }\n}\n", "import type { NumberFilterParams } from './iNumberFilter';\n\nexport function getAllowedCharPattern(filterParams?: NumberFilterParams): string | null {\n    const { allowedCharPattern } = filterParams ?? {};\n\n    return allowedCharPattern ?? null;\n}\n", "import { _setAriaRole } from '../../../utils/aria';\nimport { _makeNull } from '../../../utils/generic';\nimport { AgInputNumberField } from '../../../widgets/agInputNumberField';\nimport { AgInputTextField } from '../../../widgets/agInputTextField';\nimport type { Comparator } from '../iScalarFilter';\nimport type { ISimpleFilterModel, Tuple } from '../iSimpleFilter';\nimport { ScalarFilter } from '../scalarFilter';\nimport type { SimpleFilterModelFormatter } from '../simpleFilterModelFormatter';\nimport type { NumberFilterModel, NumberFilterParams } from './iNumberFilter';\nimport { DEFAULT_NUMBER_FILTER_OPTIONS } from './numberFilterConstants';\nimport { NumberFilterModelFormatter } from './numberFilterModelFormatter';\nimport { getAllowedCharPattern } from './numberFilterUtils';\n\nexport class NumberFilter extends ScalarFilter<NumberFilterModel, number> {\n    private readonly eValuesFrom: (AgInputTextField | AgInputNumberField)[] = [];\n    private readonly eValuesTo: (AgInputTextField | AgInputNumberField)[] = [];\n\n    private numberFilterParams: NumberFilterParams;\n    private filterModelFormatter: SimpleFilterModelFormatter;\n\n    constructor() {\n        super('numberFilter');\n    }\n\n    override refresh(params: NumberFilterParams): boolean {\n        if (this.numberFilterParams.allowedCharPattern !== params.allowedCharPattern) {\n            return false;\n        }\n\n        return super.refresh(params);\n    }\n\n    protected mapValuesFromModel(filterModel: NumberFilterModel | null): Tuple<number> {\n        const { filter, filterTo, type } = filterModel || {};\n        return [this.processValue(filter), this.processValue(filterTo)].slice(0, this.getNumberOfInputs(type));\n    }\n\n    protected override getDefaultDebounceMs(): number {\n        return 500;\n    }\n\n    protected comparator(): Comparator<number> {\n        return (left: number, right: number): number => {\n            if (left === right) {\n                return 0;\n            }\n\n            return left < right ? 1 : -1;\n        };\n    }\n\n    protected override setParams(params: NumberFilterParams): void {\n        this.numberFilterParams = params;\n\n        super.setParams(params);\n        this.filterModelFormatter = new NumberFilterModelFormatter(\n            this.localeService,\n            this.optionsFactory,\n            this.numberFilterParams.numberFormatter\n        );\n    }\n\n    protected getDefaultFilterOptions(): string[] {\n        return DEFAULT_NUMBER_FILTER_OPTIONS;\n    }\n\n    protected override setElementValue(\n        element: AgInputTextField | AgInputNumberField,\n        value: number | null,\n        fromFloatingFilter?: boolean\n    ): void {\n        // values from floating filter are directly from the input, not from the model\n        const valueToSet =\n            !fromFloatingFilter && this.numberFilterParams.numberFormatter\n                ? this.numberFilterParams.numberFormatter(value ?? null)\n                : value;\n        super.setElementValue(element, valueToSet as any);\n    }\n\n    protected createValueElement(): HTMLElement {\n        const allowedCharPattern = getAllowedCharPattern(this.numberFilterParams);\n\n        const eCondition = document.createElement('div');\n        eCondition.classList.add('ag-filter-body');\n        _setAriaRole(eCondition, 'presentation');\n\n        this.createFromToElement(eCondition, this.eValuesFrom, 'from', allowedCharPattern);\n        this.createFromToElement(eCondition, this.eValuesTo, 'to', allowedCharPattern);\n\n        return eCondition;\n    }\n\n    private createFromToElement(\n        eCondition: HTMLElement,\n        eValues: (AgInputTextField | AgInputNumberField)[],\n        fromTo: string,\n        allowedCharPattern: string | null\n    ): void {\n        const eValue = this.createManagedBean(\n            allowedCharPattern ? new AgInputTextField({ allowedCharPattern }) : new AgInputNumberField()\n        );\n        eValue.addCssClass(`ag-filter-${fromTo}`);\n        eValue.addCssClass('ag-filter-filter');\n        eValues.push(eValue);\n        eCondition.appendChild(eValue.getGui());\n    }\n\n    protected removeValueElements(startPosition: number, deleteCount?: number): void {\n        this.removeComponents(this.eValuesFrom, startPosition, deleteCount);\n        this.removeComponents(this.eValuesTo, startPosition, deleteCount);\n    }\n\n    protected getValues(position: number): Tuple<number> {\n        const result: Tuple<number> = [];\n        this.forEachPositionInput(position, (element, index, _elPosition, numberOfInputs) => {\n            if (index < numberOfInputs) {\n                result.push(this.processValue(this.stringToFloat(element.getValue())));\n            }\n        });\n\n        return result;\n    }\n\n    protected areSimpleModelsEqual(aSimple: NumberFilterModel, bSimple: NumberFilterModel): boolean {\n        return (\n            aSimple.filter === bSimple.filter && aSimple.filterTo === bSimple.filterTo && aSimple.type === bSimple.type\n        );\n    }\n\n    protected getFilterType(): 'number' {\n        return 'number';\n    }\n\n    private processValue(value?: number | null): number | null {\n        if (value == null) {\n            return null;\n        }\n        return isNaN(value) ? null : value;\n    }\n\n    private stringToFloat(value?: string | number | null): number | null {\n        if (typeof value === 'number') {\n            return value;\n        }\n\n        let filterText = _makeNull(value);\n\n        if (filterText != null && filterText.trim() === '') {\n            filterText = null;\n        }\n\n        if (this.numberFilterParams.numberParser) {\n            return this.numberFilterParams.numberParser(filterText);\n        }\n\n        return filterText == null || filterText.trim() === '-' ? null : parseFloat(filterText);\n    }\n\n    protected createCondition(position: number): NumberFilterModel {\n        const type = this.getConditionType(position);\n        const model: NumberFilterModel = {\n            filterType: this.getFilterType(),\n            type,\n        };\n\n        const values = this.getValues(position);\n        if (values.length > 0) {\n            model.filter = values[0];\n        }\n        if (values.length > 1) {\n            model.filterTo = values[1];\n        }\n\n        return model;\n    }\n\n    protected getInputs(position: number): Tuple<AgInputTextField | AgInputNumberField> {\n        if (position >= this.eValuesFrom.length) {\n            return [null, null];\n        }\n        return [this.eValuesFrom[position], this.eValuesTo[position]];\n    }\n\n    public getModelAsString(model: ISimpleFilterModel): string {\n        return this.filterModelFormatter.getModelAsString(model) ?? '';\n    }\n\n    protected override hasInvalidInputs(): boolean {\n        let invalidInputs = false;\n        this.forEachInput((element) => {\n            if (!element.getInputElement().validity.valid) {\n                invalidInputs = true;\n                return;\n            }\n        });\n        return invalidInputs;\n    }\n}\n", "import type { ISimpleFilterModelType } from '../iSimpleFilter';\n\nexport const DEFAULT_TEXT_FILTER_OPTIONS: ISimpleFilterModelType[] = [\n    'contains',\n    'notContains',\n    'equals',\n    'notEqual',\n    'startsWith',\n    'endsWith',\n    'blank',\n    'notBlank',\n];\n", "import type { IFilterOptionDef } from '../../../interfaces/iFilter';\nimport { SimpleFilterModelFormatter } from '../simpleFilterModelFormatter';\nimport type { TextFilterModel } from './iTextFilter';\n\nexport class TextFilterModelFormatter extends SimpleFilterModelFormatter {\n    protected conditionToString(condition: TextFilterModel, options?: IFilterOptionDef): string {\n        const { numberOfInputs } = options || {};\n        const isRange = condition.type == 'inRange' || numberOfInputs === 2;\n\n        if (isRange) {\n            return `${condition.filter}-${condition.filterTo}`;\n        }\n\n        // cater for when the type doesn't need a value\n        if (condition.filter != null) {\n            return `${condition.filter}`;\n        }\n\n        return `${condition.type}`;\n    }\n}\n", "export function trimInputForFilter(value?: string | null): string | null | undefined {\n    const trimmedInput = value && value.trim();\n\n    // trim the input, unless it is all whitespace (this is consistent with Excel behaviour)\n    return trimmedInput === '' ? value : trimmedInput;\n}\n", "import type { IDoesFilterPassParams } from '../../../interfaces/iFilter';\nimport { _setAriaRole } from '../../../utils/aria';\nimport { _warnOnce } from '../../../utils/function';\nimport { _makeNull } from '../../../utils/generic';\nimport { AgInputTextField } from '../../../widgets/agInputTextField';\nimport type { ISimpleFilterModel, ISimpleFilterModelType, Tuple } from '../iSimpleFilter';\nimport { SimpleFilter } from '../simpleFilter';\nimport type { TextFilterModel, TextFilterParams, TextFormatter, TextMatcher } from './iTextFilter';\nimport { DEFAULT_TEXT_FILTER_OPTIONS } from './textFilterConstants';\nimport { TextFilterModelFormatter } from './textFilterModelFormatter';\nimport { trimInputForFilter } from './textFilterUtils';\n\nexport class TextFilter extends SimpleFilter<TextFilterModel, string> {\n    private readonly defaultFormatter: TextFormatter = (from: string) => from;\n\n    private readonly defaultLowercaseFormatter: TextFormatter = (from: string) =>\n        from == null ? null : from.toString().toLowerCase();\n\n    private readonly defaultMatcher: TextMatcher = ({ filterOption, value, filterText }) => {\n        if (filterText == null) {\n            return false;\n        }\n\n        switch (filterOption) {\n            case 'contains':\n                return value.indexOf(filterText) >= 0;\n            case 'notContains':\n                return value.indexOf(filterText) < 0;\n            case 'equals':\n                return value === filterText;\n            case 'notEqual':\n                return value != filterText;\n            case 'startsWith':\n                return value.indexOf(filterText) === 0;\n            case 'endsWith': {\n                const index = value.lastIndexOf(filterText);\n                return index >= 0 && index === value.length - filterText.length;\n            }\n            default:\n                return false;\n        }\n    };\n\n    private readonly eValuesFrom: AgInputTextField[] = [];\n    private readonly eValuesTo: AgInputTextField[] = [];\n\n    private matcher: TextMatcher;\n    private formatter: TextFormatter;\n\n    private textFilterParams: TextFilterParams;\n    private filterModelFormatter: TextFilterModelFormatter;\n\n    constructor() {\n        super('textFilter');\n    }\n\n    protected override getDefaultDebounceMs(): number {\n        return 500;\n    }\n\n    protected override setParams(params: TextFilterParams): void {\n        this.textFilterParams = params;\n\n        super.setParams(params);\n\n        this.matcher = this.getTextMatcher();\n        this.formatter =\n            this.textFilterParams.textFormatter ||\n            (this.textFilterParams.caseSensitive ? this.defaultFormatter : this.defaultLowercaseFormatter);\n        this.filterModelFormatter = new TextFilterModelFormatter(this.localeService, this.optionsFactory);\n    }\n\n    private getTextMatcher(): TextMatcher {\n        const legacyComparator = (this.textFilterParams as any).textCustomComparator;\n        if (legacyComparator) {\n            _warnOnce('textCustomComparator is deprecated, use textMatcher instead.');\n            return ({ filterOption, value, filterText }) => legacyComparator(filterOption, value, filterText);\n        }\n        return this.textFilterParams.textMatcher || this.defaultMatcher;\n    }\n\n    protected createCondition(position: number): TextFilterModel {\n        const type = this.getConditionType(position);\n\n        const model: TextFilterModel = {\n            filterType: this.getFilterType(),\n            type,\n        };\n\n        const values = this.getValuesWithSideEffects(position, true);\n        if (values.length > 0) {\n            model.filter = values[0];\n        }\n        if (values.length > 1) {\n            model.filterTo = values[1];\n        }\n\n        return model;\n    }\n\n    protected getFilterType(): 'text' {\n        return 'text';\n    }\n\n    protected areSimpleModelsEqual(aSimple: TextFilterModel, bSimple: TextFilterModel): boolean {\n        return (\n            aSimple.filter === bSimple.filter && aSimple.filterTo === bSimple.filterTo && aSimple.type === bSimple.type\n        );\n    }\n\n    protected getInputs(position: number): Tuple<AgInputTextField> {\n        if (position >= this.eValuesFrom.length) {\n            return [null, null];\n        }\n        return [this.eValuesFrom[position], this.eValuesTo[position]];\n    }\n\n    protected getValues(position: number): Tuple<string> {\n        return this.getValuesWithSideEffects(position, false);\n    }\n\n    private getValuesWithSideEffects(position: number, applySideEffects: boolean): Tuple<string> {\n        const result: Tuple<string> = [];\n        this.forEachPositionInput(position, (element, index, _elPosition, numberOfInputs) => {\n            if (index < numberOfInputs) {\n                let value = _makeNull(element.getValue());\n                if (applySideEffects && this.textFilterParams.trimInput) {\n                    value = trimInputForFilter(value) ?? null;\n                    element.setValue(value, true); // ensure clean value is visible\n                }\n                result.push(value);\n            }\n        });\n\n        return result;\n    }\n\n    protected getDefaultFilterOptions(): string[] {\n        return DEFAULT_TEXT_FILTER_OPTIONS;\n    }\n\n    protected createValueElement(): HTMLElement {\n        const eCondition = document.createElement('div');\n        eCondition.classList.add('ag-filter-body');\n        _setAriaRole(eCondition, 'presentation');\n\n        this.createFromToElement(eCondition, this.eValuesFrom, 'from');\n        this.createFromToElement(eCondition, this.eValuesTo, 'to');\n\n        return eCondition;\n    }\n\n    private createFromToElement(eCondition: HTMLElement, eValues: AgInputTextField[], fromTo: string): void {\n        const eValue = this.createManagedBean(new AgInputTextField());\n        eValue.addCssClass(`ag-filter-${fromTo}`);\n        eValue.addCssClass('ag-filter-filter');\n        eValues.push(eValue);\n        eCondition.appendChild(eValue.getGui());\n    }\n\n    protected removeValueElements(startPosition: number, deleteCount?: number): void {\n        this.removeComponents(this.eValuesFrom, startPosition, deleteCount);\n        this.removeComponents(this.eValuesTo, startPosition, deleteCount);\n    }\n\n    protected mapValuesFromModel(filterModel: TextFilterModel | null): Tuple<string> {\n        const { filter, filterTo, type } = filterModel || {};\n        return [filter || null, filterTo || null].slice(0, this.getNumberOfInputs(type));\n    }\n\n    protected evaluateNullValue(filterType: ISimpleFilterModelType | null) {\n        const filterTypesAllowNulls: ISimpleFilterModelType[] = ['notEqual', 'notContains', 'blank'];\n\n        return filterType ? filterTypesAllowNulls.indexOf(filterType) >= 0 : false;\n    }\n\n    protected evaluateNonNullValue(\n        values: Tuple<string>,\n        cellValue: string,\n        filterModel: TextFilterModel,\n        params: IDoesFilterPassParams\n    ): boolean {\n        const formattedValues = values.map((v) => this.formatter(v)) || [];\n        const cellValueFormatted = this.formatter(cellValue);\n        const { api, colDef, column, context, textFormatter } = this.textFilterParams;\n\n        if (filterModel.type === 'blank') {\n            return this.isBlank(cellValue);\n        } else if (filterModel.type === 'notBlank') {\n            return !this.isBlank(cellValue);\n        }\n\n        const matcherParams = {\n            api,\n            colDef,\n            column,\n            context,\n            node: params.node,\n            data: params.data,\n            filterOption: filterModel.type,\n            value: cellValueFormatted,\n            textFormatter,\n        };\n\n        return formattedValues.some((v) => this.matcher({ ...matcherParams, filterText: v }));\n    }\n\n    public getModelAsString(model: ISimpleFilterModel): string {\n        return this.filterModelFormatter.getModelAsString(model) ?? '';\n    }\n}\n", "export function toNumber(value: any): number | undefined {\n    if (typeof value === 'number') {\n        return value;\n    }\n\n    if (typeof value === 'string') {\n        const parsed = parseInt(value);\n        if (isNaN(parsed)) {\n            return undefined;\n        }\n        return parsed;\n    }\n    return undefined;\n}\n\nexport function toConstrainedNum(min: number, max: number = Number.MAX_VALUE): (value: any) => number | undefined {\n    return (value: any) => {\n        const num = toNumber(value);\n        if (num == null || num < min || num > max) {\n            return undefined; // return undefined if outside bounds, this will then be coerced to the default value.\n        }\n        return num;\n    };\n}\n\nexport function _padStartWidthZeros(value: number, totalStringSize: number): string {\n    return value.toString().padStart(totalStringSize, '0');\n}\n\nexport function _createArrayOfNumbers(first: number, last: number): number[] {\n    const result: number[] = [];\n\n    for (let i = first; i <= last; i++) {\n        result.push(i);\n    }\n\n    return result;\n}\n\nexport function _formatNumberTwoDecimalPlacesAndCommas(\n    value: number,\n    thousandSeparator: string,\n    decimalSeparator: string\n): string {\n    if (typeof value !== 'number') {\n        return '';\n    }\n\n    return _formatNumberCommas(Math.round(value * 100) / 100, thousandSeparator, decimalSeparator);\n}\n\n/**\n * the native method number.toLocaleString(undefined, {minimumFractionDigits: 0})\n * puts in decimal places in IE, so we use this method instead\n * from: http://blog.tompawlak.org/number-currency-formatting-javascript\n * @param {number} value\n * @returns {string}\n */\nexport function _formatNumberCommas(value: number, thousandSeparator: string, decimalSeparator: string): string {\n    if (typeof value !== 'number') {\n        return '';\n    }\n\n    return value\n        .toString()\n        .replace('.', decimalSeparator)\n        .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, `$1${thousandSeparator}`);\n}\n\nexport function _sum(values: number[] | null) {\n    return values == null ? null : values.reduce((total, value) => total + value, 0);\n}\n", "import { _padStartWidthZeros } from './number';\n\n/**\n * Serialises a Date to a string of format `yyyy-MM-dd HH:mm:ss`.\n * An alternative separator can be provided to be used instead of hyphens.\n * @param date The date to serialise\n * @param includeTime Whether to include the time in the serialised string\n * @param separator The separator to use between date parts\n */\nexport function _serialiseDate(date: Date | null, includeTime = true, separator = '-'): string | null {\n    if (!date) {\n        return null;\n    }\n\n    let serialised = [date.getFullYear(), date.getMonth() + 1, date.getDate()]\n        .map((part) => _padStartWidthZeros(part, 2))\n        .join(separator);\n\n    if (includeTime) {\n        serialised +=\n            ' ' +\n            [date.getHours(), date.getMinutes(), date.getSeconds()]\n                .map((part) => _padStartWidthZeros(part, 2))\n                .join(':');\n    }\n\n    return serialised;\n}\n\nconst calculateOrdinal = (value: number) => {\n    if (value > 3 && value < 21) {\n        return 'th';\n    }\n    const remainder = value % 10;\n    switch (remainder) {\n        case 1:\n            return 'st';\n        case 2:\n            return 'nd';\n        case 3:\n            return 'rd';\n    }\n    return 'th';\n};\n\n/**\n * Serialises a Date to a string of format the defined format, does not include time.\n * @param date The date to serialise\n * @param format The string to format the date to, defaults to YYYY-MM-DD\n */\nexport function _dateToFormattedString(date: Date, format: string = 'YYYY-MM-DD'): string {\n    const fullYear = _padStartWidthZeros(date.getFullYear(), 4);\n    const months = [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December',\n    ];\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const replace: { [key: string]: () => string } = {\n        YYYY: () => fullYear.slice(fullYear.length - 4, fullYear.length),\n        YY: () => fullYear.slice(fullYear.length - 2, fullYear.length),\n        Y: () => `${date.getFullYear()}`,\n        MMMM: () => months[date.getMonth()],\n        MMM: () => months[date.getMonth()].slice(0, 3),\n        MM: () => _padStartWidthZeros(date.getMonth() + 1, 2),\n        Mo: () => `${date.getMonth() + 1}${calculateOrdinal(date.getMonth() + 1)}`,\n        M: () => `${date.getMonth() + 1}`,\n        Do: () => `${date.getDate()}${calculateOrdinal(date.getDate())}`,\n        DD: () => _padStartWidthZeros(date.getDate(), 2),\n        D: () => `${date.getDate()}`,\n        dddd: () => days[date.getDay()],\n        ddd: () => days[date.getDay()].slice(0, 3),\n        dd: () => days[date.getDay()].slice(0, 2),\n        do: () => `${date.getDay()}${calculateOrdinal(date.getDay())}`,\n        d: () => `${date.getDay()}`,\n    };\n    const regexp = new RegExp(Object.keys(replace).join('|'), 'g');\n    return format.replace(regexp, (match) => {\n        if (match in replace) {\n            return replace[match]();\n        }\n        return match;\n    });\n}\n\n/**\n * Parses a date and time from a string in the format `yyyy-MM-dd HH:mm:ss`\n */\nexport function _parseDateTimeFromString(value?: string | null): Date | null {\n    if (!value) {\n        return null;\n    }\n\n    const [dateStr, timeStr] = value.split(' ');\n\n    if (!dateStr) {\n        return null;\n    }\n\n    const fields = dateStr.split('-').map((f) => parseInt(f, 10));\n\n    if (fields.filter((f) => !isNaN(f)).length !== 3) {\n        return null;\n    }\n\n    const [year, month, day] = fields;\n    const date = new Date(year, month - 1, day);\n\n    if (date.getFullYear() !== year || date.getMonth() !== month - 1 || date.getDate() !== day) {\n        // date was not parsed as expected so must have been invalid\n        return null;\n    }\n\n    if (!timeStr || timeStr === '00:00:00') {\n        return date;\n    }\n\n    const [hours, minutes, seconds] = timeStr.split(':').map((part) => parseInt(part, 10));\n\n    if (hours >= 0 && hours < 24) {\n        date.setHours(hours);\n    }\n\n    if (minutes >= 0 && minutes < 60) {\n        date.setMinutes(minutes);\n    }\n\n    if (seconds >= 0 && seconds < 60) {\n        date.setSeconds(seconds);\n    }\n\n    return date;\n}\n", "import type { UserComponentFactory } from '../../../components/framework/userComponentFactory';\nimport type { Context } from '../../../context/context';\nimport type { IDateComp, IDateParams } from '../../../interfaces/dateComponent';\nimport type { IAfterGuiAttachedParams } from '../../../interfaces/iAfterGuiAttachedParams';\nimport type { WithoutGridCommon } from '../../../interfaces/iCommon';\nimport { _setDisplayed } from '../../../utils/dom';\nimport { _warnOnce } from '../../../utils/function';\n\n/** Provides sync access to async component. Date component can be lazy created - this class encapsulates\n * this by keeping value locally until DateComp has loaded, then passing DateComp the value. */\nexport class DateCompWrapper {\n    private dateComp: IDateComp | null | undefined;\n    private tempValue: Date | null;\n    private disabled: boolean | null;\n    private alive = true;\n    private context: Context;\n    private eParent: HTMLElement;\n\n    constructor(\n        context: Context,\n        userComponentFactory: UserComponentFactory,\n        dateComponentParams: WithoutGridCommon<IDateParams>,\n        eParent: HTMLElement,\n        onReady?: (comp: DateCompWrapper) => void\n    ) {\n        this.context = context;\n        this.eParent = eParent;\n\n        const compDetails = userComponentFactory.getDateCompDetails(dateComponentParams);\n        const promise = compDetails.newAgStackInstance();\n\n        promise!.then((dateComp) => {\n            // because async, check the filter still exists after component comes back\n            if (!this.alive) {\n                context.destroyBean(dateComp);\n                return;\n            }\n\n            this.dateComp = dateComp;\n\n            if (!dateComp) {\n                return;\n            }\n\n            eParent.appendChild(dateComp.getGui());\n\n            if (dateComp.afterGuiAttached) {\n                dateComp.afterGuiAttached();\n            }\n\n            if (this.tempValue) {\n                dateComp.setDate(this.tempValue);\n            }\n            if (this.disabled != null) {\n                this.setDateCompDisabled(this.disabled);\n            }\n\n            onReady?.(this);\n        });\n    }\n\n    public destroy(): void {\n        this.alive = false;\n        this.dateComp = this.context.destroyBean(this.dateComp);\n    }\n\n    public getDate(): Date | null {\n        return this.dateComp ? this.dateComp.getDate() : this.tempValue;\n    }\n\n    public setDate(value: Date | null): void {\n        if (this.dateComp) {\n            this.dateComp.setDate(value);\n        } else {\n            this.tempValue = value;\n        }\n    }\n\n    public setDisabled(disabled: boolean): void {\n        if (this.dateComp) {\n            this.setDateCompDisabled(disabled);\n        } else {\n            this.disabled = disabled;\n        }\n    }\n\n    public setDisplayed(displayed: boolean) {\n        _setDisplayed(this.eParent, displayed);\n    }\n\n    public setInputPlaceholder(placeholder: string): void {\n        if (this.dateComp && this.dateComp.setInputPlaceholder) {\n            this.dateComp.setInputPlaceholder(placeholder);\n        }\n    }\n\n    public setInputAriaLabel(label: string): void {\n        if (this.dateComp && this.dateComp.setInputAriaLabel) {\n            this.dateComp.setInputAriaLabel(label);\n        }\n    }\n\n    public afterGuiAttached(params?: IAfterGuiAttachedParams): void {\n        if (this.dateComp && typeof this.dateComp.afterGuiAttached === 'function') {\n            this.dateComp.afterGuiAttached(params);\n        }\n    }\n\n    public updateParams(params: IDateParams): void {\n        let hasRefreshed = false;\n        if (this.dateComp?.refresh && typeof this.dateComp.refresh === 'function') {\n            const result = this.dateComp.refresh(params);\n            // framework wrapper always implements optional methods, but returns null if no underlying method\n            if (result !== null) {\n                hasRefreshed = true;\n            }\n        }\n        if (!hasRefreshed && this.dateComp?.onParamsUpdated && typeof this.dateComp.onParamsUpdated === 'function') {\n            const result = this.dateComp.onParamsUpdated(params);\n            if (result !== null) {\n                _warnOnce(`Custom date component method 'onParamsUpdated' is deprecated. Use 'refresh' instead.`);\n            }\n        }\n    }\n\n    private setDateCompDisabled(disabled: boolean): void {\n        if (this.dateComp == null) {\n            return;\n        }\n        if (this.dateComp.setDisabled == null) {\n            return;\n        }\n\n        this.dateComp.setDisabled(disabled);\n    }\n}\n", "import type { ISimpleFilterModelType } from '../iSimpleFilter';\n\nexport const DEFAULT_DATE_FILTER_OPTIONS: ISimpleFilterModelType[] = [\n    'equals',\n    'notEqual',\n    'lessThan',\n    'greaterThan',\n    'inRange',\n    'blank',\n    'notBlank',\n];\n", "import type { IFilterOptionDef } from '../../../interfaces/iFilter';\nimport type { LocaleService } from '../../../localeService';\nimport { _dateToFormattedString, _parseDateTimeFromString } from '../../../utils/date';\nimport type { OptionsFactory } from '../optionsFactory';\nimport { SimpleFilterModelFormatter } from '../simpleFilterModelFormatter';\nimport type { DateFilterModel, DateFilterParams } from './iDateFilter';\n\nexport class DateFilterModelFormatter extends SimpleFilterModelFormatter {\n    constructor(\n        private dateFilterParams: DateFilterParams,\n        localeService: LocaleService,\n        optionsFactory: OptionsFactory\n    ) {\n        super(localeService, optionsFactory);\n    }\n\n    protected conditionToString(condition: DateFilterModel, options?: IFilterOptionDef): string {\n        const { type } = condition;\n        const { numberOfInputs } = options || {};\n        const isRange = type == 'inRange' || numberOfInputs === 2;\n\n        const dateFrom = _parseDateTimeFromString(condition.dateFrom);\n        const dateTo = _parseDateTimeFromString(condition.dateTo);\n\n        const format = this.dateFilterParams.inRangeFloatingFilterDateFormat;\n        if (isRange) {\n            const formattedFrom = dateFrom !== null ? _dateToFormattedString(dateFrom, format) : 'null';\n            const formattedTo = dateTo !== null ? _dateToFormattedString(dateTo, format) : 'null';\n            return `${formattedFrom}-${formattedTo}`;\n        }\n\n        if (dateFrom != null) {\n            return _dateToFormattedString(dateFrom, format);\n        }\n\n        // cater for when the type doesn't need a value\n        return `${type}`;\n    }\n\n    public override updateParams(params: { dateFilterParams: DateFilterParams; optionsFactory: OptionsFactory }): void {\n        super.updateParams(params);\n        this.dateFilterParams = params.dateFilterParams;\n    }\n}\n", "import type { UserComponentFactory } from '../../../components/framework/userComponentFactory';\nimport type { BeanCollection, Context } from '../../../context/context';\nimport type { IAfterGuiAttachedParams } from '../../../interfaces/iAfterGuiAttachedParams';\nimport { _parseDateTimeFromString, _serialiseDate } from '../../../utils/date';\nimport { _warnOnce } from '../../../utils/function';\nimport type { FILTER_LOCALE_TEXT } from '../../filterLocaleText';\nimport type { Comparator } from '../iScalarFilter';\nimport type { ISimpleFilterModel, Tuple } from '../iSimpleFilter';\nimport { ScalarFilter } from '../scalarFilter';\nimport { DateCompWrapper } from './dateCompWrapper';\nimport { DEFAULT_DATE_FILTER_OPTIONS } from './dateFilterConstants';\nimport { DateFilterModelFormatter } from './dateFilterModelFormatter';\nimport type { DateFilterModel, DateFilterParams } from './iDateFilter';\n\nconst DEFAULT_MIN_YEAR = 1000;\nconst DEFAULT_MAX_YEAR = Infinity;\n\nexport class DateFilter extends ScalarFilter<DateFilterModel, Date, DateCompWrapper> {\n    private userComponentFactory: UserComponentFactory;\n    private context: Context;\n\n    public override wireBeans(beans: BeanCollection): void {\n        super.wireBeans(beans);\n        this.context = beans.context;\n        this.userComponentFactory = beans.userComponentFactory;\n    }\n\n    private readonly eConditionPanelsFrom: HTMLElement[] = [];\n    private readonly eConditionPanelsTo: HTMLElement[] = [];\n\n    private readonly dateConditionFromComps: DateCompWrapper[] = [];\n    private readonly dateConditionToComps: DateCompWrapper[] = [];\n\n    private dateFilterParams: DateFilterParams;\n    private minValidYear: number = DEFAULT_MIN_YEAR;\n    private maxValidYear: number = DEFAULT_MAX_YEAR;\n    private minValidDate: Date | null = null;\n    private maxValidDate: Date | null = null;\n    private filterModelFormatter: DateFilterModelFormatter;\n\n    constructor() {\n        super('dateFilter');\n    }\n\n    public override afterGuiAttached(params?: IAfterGuiAttachedParams): void {\n        super.afterGuiAttached(params);\n\n        this.dateConditionFromComps[0].afterGuiAttached(params);\n    }\n\n    protected mapValuesFromModel(filterModel: DateFilterModel | null): Tuple<Date> {\n        // unlike the other filters, we do two things here:\n        // 1) allow for different attribute names (same as done for other filters) (eg the 'from' and 'to'\n        //    are in different locations in Date and Number filter models)\n        // 2) convert the type (because Date filter uses Dates, however model is 'string')\n        //\n        // NOTE: The conversion of string to date also removes the timezone - i.e. when user picks\n        //       a date from the UI, it will have timezone info in it. This is lost when creating\n        //       the model. When we recreate the date again here, it's without a timezone.\n        const { dateFrom, dateTo, type } = filterModel || {};\n        return [\n            (dateFrom && _parseDateTimeFromString(dateFrom)) || null,\n            (dateTo && _parseDateTimeFromString(dateTo)) || null,\n        ].slice(0, this.getNumberOfInputs(type));\n    }\n\n    protected comparator(): Comparator<Date> {\n        return this.dateFilterParams.comparator ? this.dateFilterParams.comparator : this.defaultComparator.bind(this);\n    }\n\n    private defaultComparator(filterDate: Date, cellValue: any): number {\n        // The default comparator assumes that the cellValue is a date\n        const cellAsDate = cellValue as Date;\n\n        if (cellValue == null || cellAsDate < filterDate) {\n            return -1;\n        }\n        if (cellAsDate > filterDate) {\n            return 1;\n        }\n\n        return 0;\n    }\n\n    protected override setParams(params: DateFilterParams): void {\n        this.dateFilterParams = params;\n\n        super.setParams(params);\n\n        const yearParser = (param: keyof DateFilterParams, fallback: number) => {\n            if (params[param] != null) {\n                if (!isNaN(params[param])) {\n                    return params[param] == null ? fallback : Number(params[param]);\n                } else {\n                    _warnOnce(`DateFilter ${param} is not a number`);\n                }\n            }\n\n            return fallback;\n        };\n\n        this.minValidYear = yearParser('minValidYear', DEFAULT_MIN_YEAR);\n        this.maxValidYear = yearParser('maxValidYear', DEFAULT_MAX_YEAR);\n\n        if (this.minValidYear > this.maxValidYear) {\n            _warnOnce(`DateFilter minValidYear should be <= maxValidYear`);\n        }\n\n        if (params.minValidDate) {\n            this.minValidDate =\n                params.minValidDate instanceof Date\n                    ? params.minValidDate\n                    : _parseDateTimeFromString(params.minValidDate);\n        } else {\n            this.minValidDate = null;\n        }\n\n        if (params.maxValidDate) {\n            this.maxValidDate =\n                params.maxValidDate instanceof Date\n                    ? params.maxValidDate\n                    : _parseDateTimeFromString(params.maxValidDate);\n        } else {\n            this.maxValidDate = null;\n        }\n\n        if (this.minValidDate && this.maxValidDate && this.minValidDate > this.maxValidDate) {\n            _warnOnce(`DateFilter minValidDate should be <= maxValidDate`);\n        }\n\n        this.filterModelFormatter = new DateFilterModelFormatter(\n            this.dateFilterParams,\n            this.localeService,\n            this.optionsFactory\n        );\n    }\n\n    createDateCompWrapper(element: HTMLElement): DateCompWrapper {\n        const dateCompWrapper = new DateCompWrapper(\n            this.context,\n            this.userComponentFactory,\n            {\n                onDateChanged: () => this.onUiChanged(),\n                filterParams: this.dateFilterParams,\n            },\n            element\n        );\n        this.addDestroyFunc(() => dateCompWrapper.destroy());\n        return dateCompWrapper;\n    }\n\n    protected override setElementValue(element: DateCompWrapper, value: Date | null): void {\n        element.setDate(value);\n    }\n\n    protected override setElementDisplayed(element: DateCompWrapper, displayed: boolean): void {\n        element.setDisplayed(displayed);\n    }\n\n    protected override setElementDisabled(element: DateCompWrapper, disabled: boolean): void {\n        element.setDisabled(disabled);\n    }\n\n    protected getDefaultFilterOptions(): string[] {\n        return DEFAULT_DATE_FILTER_OPTIONS;\n    }\n\n    protected createValueElement(): HTMLElement {\n        const eDocument = this.gos.getDocument();\n        const eCondition = eDocument.createElement('div');\n        eCondition.classList.add('ag-filter-body');\n\n        this.createFromToElement(eCondition, this.eConditionPanelsFrom, this.dateConditionFromComps, 'from');\n        this.createFromToElement(eCondition, this.eConditionPanelsTo, this.dateConditionToComps, 'to');\n\n        return eCondition;\n    }\n\n    private createFromToElement(\n        eCondition: HTMLElement,\n        eConditionPanels: HTMLElement[],\n        dateConditionComps: DateCompWrapper[],\n        fromTo: string\n    ): void {\n        const eDocument = this.gos.getDocument();\n        const eConditionPanel = eDocument.createElement('div');\n        eConditionPanel.classList.add(`ag-filter-${fromTo}`);\n        eConditionPanel.classList.add(`ag-filter-date-${fromTo}`);\n        eConditionPanels.push(eConditionPanel);\n        eCondition.appendChild(eConditionPanel);\n        dateConditionComps.push(this.createDateCompWrapper(eConditionPanel));\n    }\n\n    protected removeValueElements(startPosition: number, deleteCount?: number): void {\n        this.removeDateComps(this.dateConditionFromComps, startPosition, deleteCount);\n        this.removeDateComps(this.dateConditionToComps, startPosition, deleteCount);\n        this.removeItems(this.eConditionPanelsFrom, startPosition, deleteCount);\n        this.removeItems(this.eConditionPanelsTo, startPosition, deleteCount);\n    }\n\n    protected removeDateComps(components: DateCompWrapper[], startPosition: number, deleteCount?: number): void {\n        const removedComponents = this.removeItems(components, startPosition, deleteCount);\n        removedComponents.forEach((comp) => comp.destroy());\n    }\n\n    private isValidDateValue(value: Date | null): boolean {\n        if (value === null) {\n            return false;\n        }\n\n        if (this.minValidDate) {\n            if (value < this.minValidDate) {\n                return false;\n            }\n        } else {\n            if (value.getUTCFullYear() < this.minValidYear) {\n                return false;\n            }\n        }\n\n        if (this.maxValidDate) {\n            if (value > this.maxValidDate) {\n                return false;\n            }\n        } else {\n            if (value.getUTCFullYear() > this.maxValidYear) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    protected override isConditionUiComplete(position: number): boolean {\n        if (!super.isConditionUiComplete(position)) {\n            return false;\n        }\n\n        let valid = true;\n        this.forEachInput((element, index, elPosition, numberOfInputs) => {\n            if (elPosition !== position || !valid || index >= numberOfInputs) {\n                return;\n            }\n            valid = valid && this.isValidDateValue(element.getDate());\n        });\n\n        return valid;\n    }\n\n    protected areSimpleModelsEqual(aSimple: DateFilterModel, bSimple: DateFilterModel): boolean {\n        return (\n            aSimple.dateFrom === bSimple.dateFrom && aSimple.dateTo === bSimple.dateTo && aSimple.type === bSimple.type\n        );\n    }\n\n    protected getFilterType(): 'date' {\n        return 'date';\n    }\n\n    protected createCondition(position: number): DateFilterModel {\n        const type = this.getConditionType(position);\n        const model: Partial<DateFilterModel> = {};\n\n        const values = this.getValues(position);\n        if (values.length > 0) {\n            model.dateFrom = _serialiseDate(values[0]);\n        }\n        if (values.length > 1) {\n            model.dateTo = _serialiseDate(values[1]);\n        }\n\n        return {\n            dateFrom: null,\n            dateTo: null,\n            filterType: this.getFilterType(),\n            type,\n            ...model,\n        };\n    }\n\n    protected override resetPlaceholder(): void {\n        const globalTranslate = this.localeService.getLocaleTextFunc();\n        const placeholder = this.translate('dateFormatOoo');\n        const ariaLabel = globalTranslate('ariaFilterValue', 'Filter Value');\n\n        this.forEachInput((element) => {\n            element.setInputPlaceholder(placeholder);\n            element.setInputAriaLabel(ariaLabel);\n        });\n    }\n\n    protected getInputs(position: number): Tuple<DateCompWrapper> {\n        if (position >= this.dateConditionFromComps.length) {\n            return [null, null];\n        }\n        return [this.dateConditionFromComps[position], this.dateConditionToComps[position]];\n    }\n\n    protected getValues(position: number): Tuple<Date> {\n        const result: Tuple<Date> = [];\n        this.forEachPositionInput(position, (element, index, _elPosition, numberOfInputs) => {\n            if (index < numberOfInputs) {\n                result.push(element.getDate());\n            }\n        });\n\n        return result;\n    }\n\n    protected override translate(key: keyof typeof FILTER_LOCALE_TEXT): string {\n        if (key === 'lessThan') {\n            return super.translate('before');\n        }\n        if (key === 'greaterThan') {\n            return super.translate('after');\n        }\n        return super.translate(key);\n    }\n\n    public getModelAsString(model: ISimpleFilterModel): string {\n        return this.filterModelFormatter.getModelAsString(model) ?? '';\n    }\n}\n", "import { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { AgColumn } from '../../entities/agColumn';\nimport type { AgColumnGroup } from '../../entities/agColumnGroup';\nimport { isColumnGroup } from '../../entities/agColumnGroup';\nimport { _setAriaColSpan } from '../../utils/aria';\nimport { _last } from '../../utils/array';\nimport { _exists } from '../../utils/generic';\n\nexport class SetLeftFeature extends BeanStub {\n    private eCell: HTMLElement;\n    private ariaEl: HTMLElement;\n\n    private actualLeft: number;\n\n    // if we are spanning columns, this tells what columns,\n    // otherwise this is empty\n    private colsSpanning: AgColumn[] | undefined;\n\n    private beans: BeanCollection;\n\n    constructor(\n        private readonly columnOrGroup: AgColumn | AgColumnGroup,\n        eCell: HTMLElement,\n        beans: BeanCollection,\n        colsSpanning?: AgColumn[]\n    ) {\n        super();\n        this.columnOrGroup = columnOrGroup;\n        this.eCell = eCell;\n        this.ariaEl = this.eCell.querySelector('[role=columnheader]') || this.eCell;\n        this.colsSpanning = colsSpanning;\n        this.beans = beans;\n    }\n\n    public setColsSpanning(colsSpanning: AgColumn[]): void {\n        this.colsSpanning = colsSpanning;\n        this.onLeftChanged();\n    }\n\n    public getColumnOrGroup(): AgColumn | AgColumnGroup {\n        if (this.beans.gos.get('enableRtl') && this.colsSpanning) {\n            return _last(this.colsSpanning);\n        }\n        return this.columnOrGroup;\n    }\n\n    public postConstruct(): void {\n        const onLeftChanged = this.onLeftChanged.bind(this);\n        this.addManagedListeners(this.columnOrGroup, { leftChanged: onLeftChanged });\n        this.setLeftFirstTime();\n\n        // when in print layout, the left position is also dependent on the width of the pinned sections.\n        // so additionally update left if any column width changes.\n        this.addManagedEventListeners({ displayedColumnsWidthChanged: onLeftChanged });\n\n        // setting left has a dependency on print layout\n        this.addManagedPropertyListener('domLayout', onLeftChanged);\n    }\n\n    private setLeftFirstTime(): void {\n        const suppressMoveAnimation = this.beans.gos.get('suppressColumnMoveAnimation');\n        const oldLeftExists = _exists(this.columnOrGroup.getOldLeft());\n        const animateColumnMove =\n            this.beans.columnAnimationService.isActive() && oldLeftExists && !suppressMoveAnimation;\n        if (animateColumnMove) {\n            this.animateInLeft();\n        } else {\n            this.onLeftChanged();\n        }\n    }\n\n    private animateInLeft(): void {\n        const colOrGroup = this.getColumnOrGroup();\n\n        const left = colOrGroup.getLeft();\n        const oldLeft = colOrGroup.getOldLeft();\n\n        const oldActualLeft = this.modifyLeftForPrintLayout(colOrGroup, oldLeft!);\n        const actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left!);\n\n        this.setLeft(oldActualLeft!);\n\n        // we must keep track of the left we want to set to, as this would otherwise lead to a race\n        // condition, if the user changed the left value many times in one VM turn, then we want to make\n        // make sure the actualLeft we set in the timeout below (in the next VM turn) is the correct left\n        // position. eg if user changes column position twice, then setLeft() below executes twice in next\n        // VM turn, but only one (the correct one) should get applied.\n        this.actualLeft = actualLeft;\n\n        this.beans.columnAnimationService.executeNextVMTurn(() => {\n            // test this left value is the latest one to be applied, and if not, do nothing\n            if (this.actualLeft === actualLeft) {\n                this.setLeft(actualLeft);\n            }\n        });\n    }\n\n    private onLeftChanged(): void {\n        const colOrGroup = this.getColumnOrGroup();\n        const left = colOrGroup.getLeft();\n        this.actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left!);\n        this.setLeft(this.actualLeft);\n    }\n\n    private modifyLeftForPrintLayout(colOrGroup: AgColumn | AgColumnGroup, leftPosition: number): number {\n        const printLayout = this.beans.gos.isDomLayout('print');\n\n        if (!printLayout) {\n            return leftPosition;\n        }\n\n        if (colOrGroup.getPinned() === 'left') {\n            return leftPosition;\n        }\n\n        const leftWidth = this.beans.visibleColsService.getColsLeftWidth();\n\n        if (colOrGroup.getPinned() === 'right') {\n            const bodyWidth = this.beans.visibleColsService.getBodyContainerWidth();\n            return leftWidth + bodyWidth + leftPosition;\n        }\n\n        // is in body\n        return leftWidth + leftPosition;\n    }\n\n    private setLeft(value: number): void {\n        // if the value is null, then that means the column is no longer\n        // displayed. there is logic in the rendering to fade these columns\n        // out, so we don't try and change their left positions.\n        if (_exists(value)) {\n            this.eCell.style.left = `${value}px`;\n        }\n\n        if (isColumnGroup(this.columnOrGroup)) {\n            const children = this.columnOrGroup.getLeafColumns();\n\n            if (!children.length) {\n                return;\n            }\n\n            if (children.length > 1) {\n                _setAriaColSpan(this.ariaEl, children.length);\n            }\n        }\n    }\n}\n", "import type { VisibleColsService } from '../../columns/visibleColsService';\nimport type { AgColumn } from '../../entities/agColumn';\nimport type { AgColumnGroup } from '../../entities/agColumnGroup';\nimport type { AgProvidedColumnGroup } from '../../entities/agProvidedColumnGroup';\nimport type { AbstractColDef, HeaderClassParams, ToolPanelClassParams } from '../../entities/colDef';\nimport type { GridOptionsService } from '../../gridOptionsService';\nimport type { WithoutGridCommon } from '../../interfaces/iCommon';\nimport type { ICellComp } from '../../rendering/cell/cellCtrl';\nimport { _missing } from '../../utils/generic';\nimport type { IAbstractHeaderCellComp } from './abstractCell/abstractHeaderCellCtrl';\n\nconst CSS_FIRST_COLUMN = 'ag-column-first';\nconst CSS_LAST_COLUMN = 'ag-column-last';\n\nexport function _getHeaderClassesFromColDef(\n    abstractColDef: AbstractColDef | null,\n    gos: GridOptionsService,\n    column: AgColumn | null,\n    columnGroup: AgColumnGroup | null\n): string[] {\n    if (_missing(abstractColDef)) {\n        return [];\n    }\n\n    return getColumnClassesFromCollDef(abstractColDef.headerClass, abstractColDef, gos, column, columnGroup);\n}\n\nexport function _getToolPanelClassesFromColDef(\n    abstractColDef: AbstractColDef | null,\n    gos: GridOptionsService,\n    column: AgColumn | null,\n    columnGroup: AgProvidedColumnGroup | null\n): string[] {\n    if (_missing(abstractColDef)) {\n        return [];\n    }\n\n    return getColumnClassesFromCollDef(abstractColDef.toolPanelClass, abstractColDef, gos, column, columnGroup);\n}\n\nexport function refreshFirstAndLastStyles(\n    comp: IAbstractHeaderCellComp | ICellComp,\n    column: AgColumn | AgColumnGroup,\n    presentedColsService: VisibleColsService\n) {\n    comp.addOrRemoveCssClass(CSS_FIRST_COLUMN, presentedColsService.isColAtEdge(column, 'first'));\n    comp.addOrRemoveCssClass(CSS_LAST_COLUMN, presentedColsService.isColAtEdge(column, 'last'));\n}\n\nfunction getClassParams<T extends HeaderClassParams | ToolPanelClassParams>(\n    abstractColDef: AbstractColDef,\n    gos: GridOptionsService,\n    column: AgColumn | null,\n    columnGroup: T['columnGroup']\n): T {\n    return gos.addGridCommonParams({\n        // bad naming, as colDef here can be a group or a column,\n        // however most people won't appreciate the difference,\n        // so keeping it as colDef to avoid confusion.\n        colDef: abstractColDef,\n        column: column,\n        columnGroup: columnGroup,\n    } as WithoutGridCommon<T>);\n}\n\nfunction getColumnClassesFromCollDef<T extends HeaderClassParams | ToolPanelClassParams>(\n    classesOrFunc: string | string[] | ((params: T) => string | string[] | undefined) | null | undefined,\n    abstractColDef: AbstractColDef,\n    gos: GridOptionsService,\n    column: AgColumn | null,\n    columnGroup: AgColumnGroup | AgProvidedColumnGroup | null\n): string[] {\n    if (_missing(classesOrFunc)) {\n        return [];\n    }\n\n    let classToUse: string | string[] | undefined;\n\n    if (typeof classesOrFunc === 'function') {\n        const params: T = getClassParams(abstractColDef, gos, column, columnGroup);\n        classToUse = classesOrFunc(params);\n    } else {\n        classToUse = classesOrFunc;\n    }\n\n    if (typeof classToUse === 'string') {\n        return [classToUse];\n    }\n    if (Array.isArray(classToUse)) {\n        return [...classToUse];\n    }\n\n    return [];\n}\n", "import type { UserComponentFactory } from '../../../components/framework/userComponentFactory';\nimport { HorizontalDirection } from '../../../constants/direction';\nimport { BeanStub } from '../../../context/beanStub';\nimport type { BeanCollection } from '../../../context/context';\nimport type { CtrlsService } from '../../../ctrlsService';\nimport type { DragAndDropService, DragSource } from '../../../dragAndDrop/dragAndDropService';\nimport type { AgColumn } from '../../../entities/agColumn';\nimport { isColumn } from '../../../entities/agColumn';\nimport type { AgColumnGroup } from '../../../entities/agColumnGroup';\nimport type { AgProvidedColumnGroup } from '../../../entities/agProvidedColumnGroup';\nimport type { ColumnHeaderClickedEvent, ColumnHeaderContextMenuEvent, HeaderFocusedEvent } from '../../../events';\nimport type { FocusService } from '../../../focusService';\nimport type { PinnedWidthService } from '../../../gridBodyComp/pinnedWidthService';\nimport type { BrandedType } from '../../../interfaces/brandedType';\nimport type { ColumnPinnedType } from '../../../interfaces/iColumn';\nimport type { WithoutGridCommon } from '../../../interfaces/iCommon';\nimport type { MenuService } from '../../../misc/menuService';\nimport { _setAriaColIndex } from '../../../utils/aria';\nimport { _getInnerWidth } from '../../../utils/dom';\nimport { _isUserSuppressingHeaderKeyboardEvent } from '../../../utils/keyboard';\nimport { KeyCode } from '../.././../constants/keyCode';\nimport type { HeaderRowCtrl } from '../../row/headerRowCtrl';\nimport { refreshFirstAndLastStyles } from '../cssClassApplier';\n\nlet instanceIdSequence = 0;\n\nexport interface IAbstractHeaderCellComp {\n    addOrRemoveCssClass(cssClassName: string, on: boolean): void;\n}\n\nexport interface IHeaderResizeFeature {\n    toggleColumnResizing(resizing: boolean): void;\n}\n\nexport type HeaderCellCtrlInstanceId = BrandedType<string, 'HeaderCellCtrlInstanceId'>;\n\nexport abstract class AbstractHeaderCellCtrl<\n    TComp extends IAbstractHeaderCellComp = any,\n    TColumn extends AgColumn | AgColumnGroup = any,\n    TFeature extends IHeaderResizeFeature = any,\n> extends BeanStub {\n    public static DOM_DATA_KEY_HEADER_CTRL = 'headerCtrl';\n\n    private pinnedWidthService: PinnedWidthService;\n    protected focusService: FocusService;\n    protected userComponentFactory: UserComponentFactory;\n    protected ctrlsService: CtrlsService;\n    protected dragAndDropService: DragAndDropService;\n    protected menuService: MenuService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.pinnedWidthService = beans.pinnedWidthService;\n        this.focusService = beans.focusService;\n        this.userComponentFactory = beans.userComponentFactory;\n        this.ctrlsService = beans.ctrlsService;\n        this.dragAndDropService = beans.dragAndDropService;\n        this.menuService = beans.menuService;\n    }\n\n    protected beans: BeanCollection;\n    private instanceId: HeaderCellCtrlInstanceId;\n    private columnGroupChild: AgColumn | AgColumnGroup;\n    private parentRowCtrl: HeaderRowCtrl;\n\n    private isResizing: boolean;\n    private resizeToggleTimeout = 0;\n    protected resizeMultiplier = 1;\n\n    protected eGui: HTMLElement;\n    protected resizeFeature: TFeature | null = null;\n    protected comp: TComp;\n    protected column: TColumn;\n\n    public lastFocusEvent: KeyboardEvent | null = null;\n\n    protected dragSource: DragSource | null = null;\n\n    protected abstract resizeHeader(delta: number, shiftKey: boolean): void;\n    protected abstract moveHeader(direction: HorizontalDirection): void;\n\n    constructor(columnGroupChild: AgColumn | AgColumnGroup, beans: BeanCollection, parentRowCtrl: HeaderRowCtrl) {\n        super();\n\n        this.columnGroupChild = columnGroupChild;\n        this.parentRowCtrl = parentRowCtrl;\n        this.beans = beans;\n\n        // unique id to this instance, including the column ID to help with debugging in React as it's used in 'key'\n        this.instanceId = (columnGroupChild.getUniqueId() + '-' + instanceIdSequence++) as HeaderCellCtrlInstanceId;\n    }\n\n    public postConstruct(): void {\n        this.addManagedPropertyListeners(['suppressHeaderFocus'], () => this.refreshTabIndex());\n    }\n\n    protected shouldStopEventPropagation(e: KeyboardEvent): boolean {\n        const { headerRowIndex, column } = this.focusService.getFocusedHeader()!;\n\n        return _isUserSuppressingHeaderKeyboardEvent(this.gos, e, headerRowIndex, column as AgColumn);\n    }\n\n    protected getWrapperHasFocus(): boolean {\n        const activeEl = this.gos.getActiveDomElement();\n\n        return activeEl === this.eGui;\n    }\n\n    protected setGui(eGui: HTMLElement): void {\n        this.eGui = eGui;\n        this.addDomData();\n        this.addManagedListeners(this.beans.eventService, {\n            displayedColumnsChanged: this.onDisplayedColumnsChanged.bind(this),\n        });\n\n        this.addManagedElementListeners(this.eGui, {\n            focus: this.onGuiFocus.bind(this),\n        });\n\n        this.onDisplayedColumnsChanged();\n        this.refreshTabIndex();\n    }\n\n    private onGuiFocus(): void {\n        const event: WithoutGridCommon<HeaderFocusedEvent> = {\n            type: 'headerFocused',\n            column: this.column,\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    protected onDisplayedColumnsChanged(): void {\n        if (!this.comp || !this.column) {\n            return;\n        }\n        this.refreshFirstAndLastStyles();\n        this.refreshAriaColIndex();\n    }\n\n    private refreshFirstAndLastStyles(): void {\n        const { comp, column, beans } = this;\n        refreshFirstAndLastStyles(comp, column, beans.visibleColsService);\n    }\n\n    private refreshAriaColIndex(): void {\n        const { beans, column } = this;\n\n        const colIdx = beans.visibleColsService.getAriaColIndex(column);\n        _setAriaColIndex(this.eGui, colIdx); // for react, we don't use JSX, as it slowed down column moving\n    }\n\n    protected addResizeAndMoveKeyboardListeners(): void {\n        if (!this.resizeFeature) {\n            return;\n        }\n\n        this.addManagedListeners(this.eGui, {\n            keydown: this.onGuiKeyDown.bind(this),\n            keyup: this.onGuiKeyUp.bind(this),\n        });\n    }\n\n    private refreshTabIndex(): void {\n        const suppressHeaderFocus = this.gos.get('suppressHeaderFocus');\n        if (suppressHeaderFocus) {\n            this.eGui.removeAttribute('tabindex');\n        } else {\n            this.eGui.setAttribute('tabindex', '-1');\n        }\n    }\n\n    private onGuiKeyDown(e: KeyboardEvent): void {\n        const activeEl = this.gos.getActiveDomElement();\n\n        const isLeftOrRight = e.key === KeyCode.LEFT || e.key === KeyCode.RIGHT;\n\n        if (this.isResizing) {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n        }\n\n        if (\n            // if elements within the header are focused, we don't process the event\n            activeEl !== this.eGui ||\n            // if shiftKey and altKey are not pressed, it's cell navigation so we don't process the event\n            (!e.shiftKey && !e.altKey)\n        ) {\n            return;\n        }\n\n        if (this.isResizing || isLeftOrRight) {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n        }\n\n        if (!isLeftOrRight) {\n            return;\n        }\n\n        const isLeft = (e.key === KeyCode.LEFT) !== this.gos.get('enableRtl');\n        const direction = HorizontalDirection[isLeft ? 'Left' : 'Right'];\n\n        if (e.altKey) {\n            this.isResizing = true;\n            this.resizeMultiplier += 1;\n            const diff = this.getViewportAdjustedResizeDiff(e);\n            this.resizeHeader(diff, e.shiftKey);\n            this.resizeFeature?.toggleColumnResizing(true);\n        } else {\n            this.moveHeader(direction);\n        }\n    }\n\n    private getViewportAdjustedResizeDiff(e: KeyboardEvent): number {\n        let diff = this.getResizeDiff(e);\n\n        const pinned = this.column.getPinned();\n        if (pinned) {\n            const leftWidth = this.pinnedWidthService.getPinnedLeftWidth();\n            const rightWidth = this.pinnedWidthService.getPinnedRightWidth();\n            const bodyWidth = _getInnerWidth(this.ctrlsService.getGridBodyCtrl().getBodyViewportElement()) - 50;\n\n            if (leftWidth + rightWidth + diff > bodyWidth) {\n                if (bodyWidth > leftWidth + rightWidth) {\n                    // allow body width to ignore resize multiplier and fill space for last tick\n                    diff = bodyWidth - leftWidth - rightWidth;\n                } else {\n                    return 0;\n                }\n            }\n        }\n\n        return diff;\n    }\n\n    private getResizeDiff(e: KeyboardEvent): number {\n        let isLeft = (e.key === KeyCode.LEFT) !== this.gos.get('enableRtl');\n\n        const pinned = this.column.getPinned();\n        const isRtl = this.gos.get('enableRtl');\n        if (pinned) {\n            if (isRtl !== (pinned === 'right')) {\n                isLeft = !isLeft;\n            }\n        }\n\n        return (isLeft ? -1 : 1) * this.resizeMultiplier;\n    }\n\n    private onGuiKeyUp(): void {\n        if (!this.isResizing) {\n            return;\n        }\n        if (this.resizeToggleTimeout) {\n            window.clearTimeout(this.resizeToggleTimeout);\n            this.resizeToggleTimeout = 0;\n        }\n\n        this.isResizing = false;\n        this.resizeMultiplier = 1;\n\n        this.resizeToggleTimeout = window.setTimeout(() => {\n            this.resizeFeature?.toggleColumnResizing(false);\n        }, 150);\n    }\n\n    protected handleKeyDown(e: KeyboardEvent): void {\n        const wrapperHasFocus = this.getWrapperHasFocus();\n\n        switch (e.key) {\n            case KeyCode.PAGE_DOWN:\n            case KeyCode.PAGE_UP:\n            case KeyCode.PAGE_HOME:\n            case KeyCode.PAGE_END:\n                if (wrapperHasFocus) {\n                    e.preventDefault();\n                }\n        }\n    }\n\n    private addDomData(): void {\n        const key = AbstractHeaderCellCtrl.DOM_DATA_KEY_HEADER_CTRL;\n        this.gos.setDomData(this.eGui, key, this);\n        this.addDestroyFunc(() => this.gos.setDomData(this.eGui, key, null));\n    }\n\n    public getGui(): HTMLElement {\n        return this.eGui;\n    }\n\n    public focus(event?: KeyboardEvent): boolean {\n        if (!this.eGui) {\n            return false;\n        }\n\n        this.lastFocusEvent = event || null;\n        this.eGui.focus();\n        return true;\n    }\n\n    public getRowIndex(): number {\n        return this.parentRowCtrl.getRowIndex();\n    }\n\n    public getParentRowCtrl(): HeaderRowCtrl {\n        return this.parentRowCtrl;\n    }\n\n    public getPinned(): ColumnPinnedType {\n        return this.parentRowCtrl.getPinned();\n    }\n\n    public getInstanceId(): HeaderCellCtrlInstanceId {\n        return this.instanceId;\n    }\n\n    public getColumnGroupChild(): AgColumn | AgColumnGroup {\n        return this.columnGroupChild;\n    }\n\n    protected removeDragSource(): void {\n        if (this.dragSource) {\n            this.dragAndDropService.removeDragSource(this.dragSource);\n            this.dragSource = null;\n        }\n    }\n\n    protected handleContextMenuMouseEvent(\n        mouseEvent: MouseEvent | undefined,\n        touchEvent: TouchEvent | undefined,\n        column: AgColumn | AgProvidedColumnGroup\n    ): void {\n        const event = mouseEvent ?? touchEvent!;\n        if (this.gos.get('preventDefaultOnContextMenu')) {\n            event.preventDefault();\n        }\n        const columnToUse = isColumn(column) ? column : undefined;\n        if (this.menuService.isHeaderContextMenuEnabled(columnToUse)) {\n            this.menuService.showHeaderContextMenu(columnToUse, mouseEvent, touchEvent);\n        }\n\n        this.dispatchColumnMouseEvent('columnHeaderContextMenu', column);\n    }\n\n    protected dispatchColumnMouseEvent(\n        eventType: 'columnHeaderContextMenu' | 'columnHeaderClicked',\n        column: AgColumn | AgProvidedColumnGroup\n    ): void {\n        const event: WithoutGridCommon<ColumnHeaderClickedEvent | ColumnHeaderContextMenuEvent> = {\n            type: eventType,\n            column,\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public override destroy(): void {\n        super.destroy();\n\n        this.removeDragSource();\n        (this.comp as any) = null;\n        (this.column as any) = null;\n        (this.resizeFeature as any) = null;\n        (this.lastFocusEvent as any) = null;\n        (this.columnGroupChild as any) = null;\n        (this.parentRowCtrl as any) = null;\n        (this.eGui as any) = null;\n    }\n}\n", "import { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { AgColumn } from '../../entities/agColumn';\nimport type { ColumnHoverService } from '../../rendering/columnHoverService';\n\nexport class HoverFeature extends BeanStub {\n    private columnHoverService: ColumnHoverService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.columnHoverService = beans.columnHoverService;\n    }\n\n    private readonly columns: AgColumn[];\n\n    private element: HTMLElement;\n\n    constructor(columns: AgColumn[], element: HTMLElement) {\n        super();\n        this.columns = columns;\n        this.element = element;\n    }\n\n    public postConstruct(): void {\n        if (this.gos.get('columnHoverHighlight')) {\n            this.addMouseHoverListeners();\n        }\n    }\n\n    private addMouseHoverListeners(): void {\n        this.addManagedListeners(this.element, {\n            mouseout: this.onMouseOut.bind(this),\n            mouseover: this.onMouseOver.bind(this),\n        });\n    }\n\n    private onMouseOut(): void {\n        this.columnHoverService.clearMouseOver();\n    }\n\n    private onMouseOver(): void {\n        this.columnHoverService.setMouseOver(this.columns);\n    }\n}\n", "import type { UserCompDetails } from '../../../components/framework/userComponentFactory';\nimport { KeyCode } from '../../../constants/keyCode';\nimport type { BeanCollection } from '../../../context/context';\nimport type { AgColumn } from '../../../entities/agColumn';\nimport type { ColumnEvent, FilterChangedEvent } from '../../../events';\nimport { SetLeftFeature } from '../../../rendering/features/setLeftFeature';\nimport { _setAriaLabel } from '../../../utils/aria';\nimport { _isElementChildOfClass } from '../../../utils/dom';\nimport { _warnOnce } from '../../../utils/function';\nimport { _createIconNoSpan } from '../../../utils/icon';\nimport { ManagedFocusFeature } from '../../../widgets/managedFocusFeature';\nimport type { HeaderRowCtrl } from '../../row/headerRowCtrl';\nimport { AbstractHeaderCellCtrl } from '../abstractCell/abstractHeaderCellCtrl';\nimport { HoverFeature } from '../hoverFeature';\nimport type { IHeaderFilterCellComp } from './iHeaderFilterCellComp';\n\nexport class HeaderFilterCellCtrl extends AbstractHeaderCellCtrl<IHeaderFilterCellComp, AgColumn> {\n    private eButtonShowMainFilter: HTMLElement;\n    private eFloatingFilterBody: HTMLElement;\n\n    private suppressFilterButton: boolean;\n    private highlightFilterButtonWhenActive: boolean;\n    private active: boolean;\n    private iconCreated: boolean = false;\n\n    private userCompDetails?: UserCompDetails | null;\n    private destroySyncListener: () => null;\n    private destroyFilterChangedListener: () => null;\n\n    constructor(column: AgColumn, beans: BeanCollection, parentRowCtrl: HeaderRowCtrl) {\n        super(column, beans, parentRowCtrl);\n        this.column = column;\n    }\n\n    public setComp(\n        comp: IHeaderFilterCellComp,\n        eGui: HTMLElement,\n        eButtonShowMainFilter: HTMLElement,\n        eFloatingFilterBody: HTMLElement\n    ): void {\n        this.comp = comp;\n        this.eButtonShowMainFilter = eButtonShowMainFilter;\n        this.eFloatingFilterBody = eFloatingFilterBody;\n\n        this.setGui(eGui);\n        this.setupActive();\n\n        this.setupWidth();\n        this.setupLeft();\n        this.setupHover();\n        this.setupFocus();\n        this.setupAria();\n        this.setupFilterButton();\n        this.setupUserComp();\n        this.setupSyncWithFilter();\n        this.setupUi();\n\n        this.addManagedElementListeners(this.eButtonShowMainFilter, { click: this.showParentFilter.bind(this) });\n        this.setupFilterChangedListener();\n        this.addManagedListeners(this.column, { colDefChanged: this.onColDefChanged.bind(this) });\n    }\n\n    // empty abstract method\n    protected resizeHeader(): void {}\n    // empty abstract method\n    protected moveHeader(): void {}\n\n    private setupActive(): void {\n        const colDef = this.column.getColDef();\n        const filterExists = !!colDef.filter;\n        const floatingFilterExists = !!colDef.floatingFilter;\n        this.active = filterExists && floatingFilterExists;\n    }\n\n    private setupUi(): void {\n        this.comp.setButtonWrapperDisplayed(!this.suppressFilterButton && this.active);\n\n        this.comp.addOrRemoveBodyCssClass('ag-floating-filter-full-body', this.suppressFilterButton);\n        this.comp.addOrRemoveBodyCssClass('ag-floating-filter-body', !this.suppressFilterButton);\n\n        if (!this.active || this.iconCreated) {\n            return;\n        }\n\n        const eMenuIcon = _createIconNoSpan('filter', this.gos, this.column);\n\n        if (eMenuIcon) {\n            this.iconCreated = true;\n            this.eButtonShowMainFilter.appendChild(eMenuIcon);\n        }\n    }\n\n    private setupFocus(): void {\n        this.createManagedBean(\n            new ManagedFocusFeature(this.eGui, {\n                shouldStopEventPropagation: this.shouldStopEventPropagation.bind(this),\n                onTabKeyDown: this.onTabKeyDown.bind(this),\n                handleKeyDown: this.handleKeyDown.bind(this),\n                onFocusIn: this.onFocusIn.bind(this),\n            })\n        );\n    }\n\n    private setupAria(): void {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        _setAriaLabel(this.eButtonShowMainFilter, localeTextFunc('ariaFilterMenuOpen', 'Open Filter Menu'));\n    }\n\n    private onTabKeyDown(e: KeyboardEvent) {\n        const activeEl = this.gos.getActiveDomElement();\n        const wrapperHasFocus = activeEl === this.eGui;\n\n        if (wrapperHasFocus) {\n            return;\n        }\n\n        const nextFocusableEl = this.focusService.findNextFocusableElement(this.eGui, null, e.shiftKey);\n\n        if (nextFocusableEl) {\n            this.beans.headerNavigationService.scrollToColumn(this.column);\n            e.preventDefault();\n            nextFocusableEl.focus();\n            return;\n        }\n\n        const nextFocusableColumn = this.findNextColumnWithFloatingFilter(e.shiftKey);\n\n        if (!nextFocusableColumn) {\n            return;\n        }\n\n        if (\n            this.focusService.focusHeaderPosition({\n                headerPosition: {\n                    headerRowIndex: this.getParentRowCtrl().getRowIndex(),\n                    column: nextFocusableColumn,\n                },\n                event: e,\n            })\n        ) {\n            e.preventDefault();\n        }\n    }\n\n    private findNextColumnWithFloatingFilter(backwards: boolean): AgColumn | null {\n        const presentedColsService = this.beans.visibleColsService;\n        let nextCol: AgColumn | null = this.column;\n\n        do {\n            nextCol = backwards\n                ? presentedColsService.getColBefore(nextCol)\n                : presentedColsService.getColAfter(nextCol);\n\n            if (!nextCol) {\n                break;\n            }\n        } while (!nextCol.getColDef().filter || !nextCol.getColDef().floatingFilter);\n\n        return nextCol;\n    }\n\n    protected override handleKeyDown(e: KeyboardEvent): void {\n        super.handleKeyDown(e);\n\n        const wrapperHasFocus = this.getWrapperHasFocus();\n\n        switch (e.key) {\n            case KeyCode.UP:\n            case KeyCode.DOWN:\n                if (!wrapperHasFocus) {\n                    e.preventDefault();\n                }\n            // eslint-disable-next-line no-fallthrough\n            case KeyCode.LEFT:\n            case KeyCode.RIGHT:\n                if (wrapperHasFocus) {\n                    return;\n                }\n                e.stopPropagation();\n            // eslint-disable-next-line no-fallthrough\n            case KeyCode.ENTER:\n                if (wrapperHasFocus) {\n                    if (this.focusService.focusInto(this.eGui)) {\n                        e.preventDefault();\n                    }\n                }\n                break;\n            case KeyCode.ESCAPE:\n                if (!wrapperHasFocus) {\n                    this.eGui.focus();\n                }\n        }\n    }\n\n    private onFocusIn(e: FocusEvent): void {\n        const isRelatedWithin = this.eGui.contains(e.relatedTarget as HTMLElement);\n\n        // when the focus is already within the component,\n        // we default to the browser's behavior\n        if (isRelatedWithin) {\n            return;\n        }\n\n        const notFromHeaderWrapper =\n            !!e.relatedTarget && !(e.relatedTarget as HTMLElement).classList.contains('ag-floating-filter');\n        const fromWithinHeader =\n            !!e.relatedTarget && _isElementChildOfClass(e.relatedTarget as HTMLElement, 'ag-floating-filter');\n\n        if (notFromHeaderWrapper && fromWithinHeader && e.target === this.eGui) {\n            const lastFocusEvent = this.lastFocusEvent;\n            const fromTab = !!(lastFocusEvent && lastFocusEvent.key === KeyCode.TAB);\n\n            if (lastFocusEvent && fromTab) {\n                const shouldFocusLast = lastFocusEvent.shiftKey;\n\n                this.focusService.focusInto(this.eGui, shouldFocusLast);\n            }\n        }\n\n        const rowIndex = this.getRowIndex();\n        this.beans.focusService.setFocusedHeader(rowIndex, this.column);\n    }\n\n    private setupHover(): void {\n        this.createManagedBean(new HoverFeature([this.column], this.eGui));\n\n        const listener = () => {\n            if (!this.gos.get('columnHoverHighlight')) {\n                return;\n            }\n            const hovered = this.beans.columnHoverService.isHovered(this.column);\n            this.comp.addOrRemoveCssClass('ag-column-hover', hovered);\n        };\n\n        this.addManagedEventListeners({ columnHoverChanged: listener });\n        listener();\n    }\n\n    private setupLeft(): void {\n        const setLeftFeature = new SetLeftFeature(this.column, this.eGui, this.beans);\n        this.createManagedBean(setLeftFeature);\n    }\n\n    private setupFilterButton(): void {\n        this.suppressFilterButton = !this.menuService.isFloatingFilterButtonEnabled(this.column);\n        this.highlightFilterButtonWhenActive = !this.menuService.isLegacyMenuEnabled();\n    }\n\n    private setupUserComp(): void {\n        if (!this.active) {\n            return;\n        }\n\n        const compDetails = this.beans.filterManager?.getFloatingFilterCompDetails(this.column, () =>\n            this.showParentFilter()\n        );\n\n        if (compDetails) {\n            this.setCompDetails(compDetails);\n        }\n    }\n\n    private setCompDetails(compDetails?: UserCompDetails | null): void {\n        this.userCompDetails = compDetails;\n        this.comp.setCompDetails(compDetails);\n    }\n\n    private showParentFilter() {\n        const eventSource = this.suppressFilterButton ? this.eFloatingFilterBody : this.eButtonShowMainFilter;\n        this.menuService.showFilterMenu({\n            column: this.column,\n            buttonElement: eventSource,\n            containerType: 'floatingFilter',\n            positionBy: 'button',\n        });\n    }\n\n    private setupSyncWithFilter(): void {\n        if (!this.active) {\n            return;\n        }\n        const { filterManager } = this.beans;\n\n        const syncWithFilter = (event: ColumnEvent | null) => {\n            if (event?.source === 'filterDestroyed' && !this.isAlive()) {\n                return;\n            }\n            const compPromise = this.comp.getFloatingFilterComp();\n\n            if (!compPromise) {\n                return;\n            }\n\n            compPromise.then((comp) => {\n                if (comp) {\n                    const parentModel = filterManager?.getCurrentFloatingFilterParentModel(this.column);\n                    const filterChangedEvent: FilterChangedEvent | null = event\n                        ? {\n                              // event can have additional params like `afterDataChange` which need to be passed through\n                              ...event,\n                              columns: event.columns ?? [],\n                              source: event.source === 'api' ? 'api' : 'columnFilter',\n                          }\n                        : null;\n                    comp.onParentModelChanged(parentModel, filterChangedEvent);\n                }\n            });\n        };\n\n        [this.destroySyncListener] = this.addManagedListeners(this.column, { filterChanged: syncWithFilter });\n\n        if (filterManager?.isFilterActive(this.column)) {\n            syncWithFilter(null);\n        }\n    }\n\n    private setupWidth(): void {\n        const listener = () => {\n            const width = `${this.column.getActualWidth()}px`;\n            this.comp.setWidth(width);\n        };\n\n        this.addManagedListeners(this.column, { widthChanged: listener });\n        listener();\n    }\n\n    private setupFilterChangedListener(): void {\n        if (this.active) {\n            [this.destroyFilterChangedListener] = this.addManagedListeners(this.column, {\n                filterChanged: this.updateFilterButton.bind(this),\n            });\n            this.updateFilterButton();\n        }\n    }\n\n    private updateFilterButton(): void {\n        if (!this.suppressFilterButton && this.comp) {\n            const isFilterAllowed = !!this.beans.filterManager?.isFilterAllowed(this.column);\n            this.comp.setButtonWrapperDisplayed(isFilterAllowed);\n            if (this.highlightFilterButtonWhenActive && isFilterAllowed) {\n                this.eButtonShowMainFilter.classList.toggle('ag-filter-active', this.column.isFilterActive());\n            }\n        }\n    }\n\n    private onColDefChanged(): void {\n        const wasActive = this.active;\n        this.setupActive();\n        const becomeActive = !wasActive && this.active;\n        if (wasActive && !this.active) {\n            this.destroySyncListener();\n            this.destroyFilterChangedListener();\n        }\n\n        const newCompDetails = this.active\n            ? this.beans.filterManager?.getFloatingFilterCompDetails(this.column, () => this.showParentFilter())\n            : null;\n\n        const compPromise = this.comp.getFloatingFilterComp();\n        if (!compPromise || !newCompDetails) {\n            this.updateCompDetails(newCompDetails, becomeActive);\n        } else {\n            compPromise.then((compInstance) => {\n                if (\n                    !compInstance ||\n                    this.beans.filterManager?.areFilterCompsDifferent(this.userCompDetails ?? null, newCompDetails)\n                ) {\n                    this.updateCompDetails(newCompDetails, becomeActive);\n                } else {\n                    this.updateFloatingFilterParams(newCompDetails);\n                }\n            });\n        }\n    }\n\n    private updateCompDetails(compDetails: UserCompDetails | null | undefined, becomeActive: boolean): void {\n        if (!this.isAlive()) {\n            return;\n        }\n        this.setCompDetails(compDetails);\n        // filter button and UI can change based on params, so always want to update\n        this.setupFilterButton();\n        this.setupUi();\n        if (becomeActive) {\n            this.setupSyncWithFilter();\n            this.setupFilterChangedListener();\n        }\n    }\n\n    private updateFloatingFilterParams(userCompDetails?: UserCompDetails | null): void {\n        if (!userCompDetails) {\n            return;\n        }\n\n        const params = userCompDetails.params;\n\n        this.comp.getFloatingFilterComp()?.then((floatingFilter) => {\n            let hasRefreshed = false;\n            if (floatingFilter?.refresh && typeof floatingFilter.refresh === 'function') {\n                const result = floatingFilter.refresh(params);\n                // framework wrapper always implements optional methods, but returns null if no underlying method\n                if (result !== null) {\n                    hasRefreshed = true;\n                }\n            }\n            if (\n                !hasRefreshed &&\n                floatingFilter?.onParamsUpdated &&\n                typeof floatingFilter.onParamsUpdated === 'function'\n            ) {\n                const result = floatingFilter.onParamsUpdated(params);\n                if (result !== null) {\n                    _warnOnce(`Custom floating filter method 'onParamsUpdated' is deprecated. Use 'refresh' instead.`);\n                }\n            }\n        });\n    }\n\n    public override destroy(): void {\n        super.destroy();\n\n        (this.eButtonShowMainFilter as any) = null;\n        (this.eFloatingFilterBody as any) = null;\n        (this.userCompDetails as any) = null;\n        (this.destroySyncListener as any) = null;\n        (this.destroyFilterChangedListener as any) = null;\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.3.1';\n", "import type { BeanCollection } from '../context/context';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { Column } from '../interfaces/iColumn';\nimport type { FilterModel, IFilter } from '../interfaces/iFilter';\nimport { _errorOnce } from '../utils/function';\n\nexport function isColumnFilterPresent(beans: BeanCollection): boolean {\n    return !!beans.filterManager?.isColumnFilterPresent() || !!beans.filterManager?.isAggregateFilterPresent();\n}\n\n/** @deprecated v31.1 */\nexport function getFilterInstance<TFilter extends IFilter>(\n    beans: BeanCollection,\n    key: string | Column,\n    callback?: (filter: TFilter | null) => void\n): undefined {\n    return beans.filterManager?.getFilterInstance(key as string | AgColumn, callback);\n}\n\nexport function getColumnFilterInstance<TFilter extends IFilter>(\n    beans: BeanCollection,\n    key: string | Column\n): Promise<TFilter | null | undefined> {\n    return beans.filterManager?.getColumnFilterInstance(key as string | AgColumn) ?? Promise.resolve(undefined);\n}\n\nexport function destroyFilter(beans: BeanCollection, key: string | Column) {\n    const column = beans.columnModel.getColDefCol(key);\n    if (column) {\n        return beans.filterManager?.destroyFilter(column, 'api');\n    }\n}\n\nexport function setFilterModel(beans: BeanCollection, model: FilterModel | null): void {\n    beans.frameworkOverrides.wrapIncoming(() => beans.filterManager?.setFilterModel(model));\n}\n\nexport function getFilterModel(beans: BeanCollection): FilterModel {\n    return beans.filterManager?.getFilterModel() ?? {};\n}\n\nexport function getColumnFilterModel<TModel>(beans: BeanCollection, column: string | Column): TModel | null {\n    return beans.filterManager?.getColumnFilterModel(column as string | AgColumn) ?? null;\n}\n\nexport function setColumnFilterModel<TModel>(\n    beans: BeanCollection,\n    column: string | Column,\n    model: TModel | null\n): Promise<void> {\n    return beans.filterManager?.setColumnFilterModel(column as string | AgColumn, model) ?? Promise.resolve();\n}\n\nexport function showColumnFilter(beans: BeanCollection, colKey: string | Column): void {\n    const column = beans.columnModel.getCol(colKey);\n    if (!column) {\n        _errorOnce(`column '${colKey}' not found`);\n        return;\n    }\n    beans.menuService.showFilterMenu({\n        column,\n        containerType: 'columnFilter',\n        positionBy: 'auto',\n    });\n}\n", "import { FilterComponent } from '../../components/framework/componentTypes';\nimport { UserComponentFactory } from '../../components/framework/userComponentFactory';\nimport type { IFilterDef } from '../../interfaces/iFilter';\nimport type { IFrameworkOverrides } from '../../interfaces/iFrameworkOverrides';\n\nexport function getDefaultFloatingFilterType(\n    frameworkOverrides: IFrameworkOverrides,\n    def: IFilterDef,\n    getFromDefault: () => string\n): string | null {\n    if (def == null) {\n        return null;\n    }\n\n    let defaultFloatingFilterType: string | null = null;\n\n    const { compName, jsComp, fwComp } = UserComponentFactory.getCompKeys(frameworkOverrides, def, FilterComponent);\n\n    if (compName) {\n        const floatingFilterTypeMap: { [p: string]: string } = {\n            set: 'agSetColumnFloatingFilter',\n            agSetColumnFilter: 'agSetColumnFloatingFilter',\n\n            multi: 'agMultiColumnFloatingFilter',\n            agMultiColumnFilter: 'agMultiColumnFloatingFilter',\n\n            group: 'agGroupColumnFloatingFilter',\n            agGroupColumnFilter: 'agGroupColumnFloatingFilter',\n\n            number: 'agNumberColumnFloatingFilter',\n            agNumberColumnFilter: 'agNumberColumnFloatingFilter',\n\n            date: 'agDateColumnFloatingFilter',\n            agDateColumnFilter: 'agDateColumnFloatingFilter',\n\n            text: 'agTextColumnFloatingFilter',\n            agTextColumnFilter: 'agTextColumnFloatingFilter',\n        };\n        // will be undefined if not in the map\n        defaultFloatingFilterType = floatingFilterTypeMap[compName];\n    } else {\n        const usingDefaultFilter = jsComp == null && fwComp == null && def.filter === true;\n        if (usingDefaultFilter) {\n            defaultFloatingFilterType = getFromDefault();\n        }\n    }\n\n    return defaultFloatingFilterType;\n}\n", "import type { ColumnModel } from '../columns/columnModel';\nimport type { DataTypeService } from '../columns/dataTypeService';\nimport { FilterComponent } from '../components/framework/componentTypes';\nimport { _unwrapUserComp } from '../components/framework/unwrapUserComp';\nimport type { UserCompDetails, UserComponentFactory } from '../components/framework/userComponentFactory';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection, BeanName } from '../context/context';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { ColDef } from '../entities/colDef';\nimport type { RowNode } from '../entities/rowNode';\nimport type {\n    ColumnEventType,\n    FilterChangedEventSourceType,\n    FilterDestroyedEvent,\n    FilterModifiedEvent,\n} from '../events';\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\nimport type { FilterModel, IFilter, IFilterComp, IFilterParams } from '../interfaces/iFilter';\nimport type { IRowModel } from '../interfaces/iRowModel';\nimport { ModuleNames } from '../modules/moduleNames';\nimport { ModuleRegistry } from '../modules/moduleRegistry';\nimport type { RowRenderer } from '../rendering/rowRenderer';\nimport { _warnOnce } from '../utils/function';\nimport { _exists, _jsonEquals } from '../utils/generic';\nimport { _cloneObject } from '../utils/object';\nimport { AgPromise } from '../utils/promise';\nimport type { ValueService } from '../valueService/valueService';\nimport type { FilterManager } from './filterManager';\nimport type { IFloatingFilterParams, IFloatingFilterParentCallback } from './floating/floatingFilter';\nimport { getDefaultFloatingFilterType } from './floating/floatingFilterMapper';\n\nexport class ColumnFilterService extends BeanStub {\n    beanName: BeanName = 'columnFilterService';\n\n    private valueService: ValueService;\n    private columnModel: ColumnModel;\n    private rowModel: IRowModel;\n    private userComponentFactory: UserComponentFactory;\n    private rowRenderer: RowRenderer;\n    private dataTypeService?: DataTypeService;\n    private filterManager?: FilterManager;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.valueService = beans.valueService;\n        this.columnModel = beans.columnModel;\n        this.rowModel = beans.rowModel;\n        this.userComponentFactory = beans.userComponentFactory;\n        this.rowRenderer = beans.rowRenderer;\n        this.dataTypeService = beans.dataTypeService;\n        this.filterManager = beans.filterManager;\n    }\n\n    private allColumnFilters = new Map<string, FilterWrapper>();\n    private allColumnListeners = new Map<string, (() => null) | undefined>();\n    private activeAggregateFilters: IFilterComp[] = [];\n    private activeColumnFilters: IFilterComp[] = [];\n\n    // this is true when the grid is processing the filter change. this is used by the cell comps, so that they\n    // don't flash when data changes due to filter changes. there is no need to flash when filter changes as the\n    // user is in control, so doesn't make sense to show flashing changes. for example, go to main demo where\n    // this feature is turned off (hack code to always return false for isSuppressFlashingCellsBecauseFiltering(), put in)\n    // 100,000 rows and group by country. then do some filtering. all the cells flash, which is silly.\n    private processingFilterChange = false;\n\n    // when we're waiting for cell data types to be inferred, we need to defer filter model updates\n    private filterModelUpdateQueue: { model: FilterModel | null; source: FilterChangedEventSourceType }[] = [];\n    private columnFilterModelUpdateQueue: { key: string | AgColumn; model: any; resolve: () => void }[] = [];\n\n    private initialFilterModel: FilterModel;\n\n    public postConstruct(): void {\n        this.addManagedEventListeners({\n            gridColumnsChanged: this.onColumnsChanged.bind(this),\n            rowDataUpdated: () => this.onNewRowsLoaded('rowDataUpdated'),\n            dataTypesInferred: this.processFilterModelUpdateQueue.bind(this),\n        });\n\n        this.initialFilterModel = {\n            ...(this.gos.get('initialState')?.filter?.filterModel ?? {}),\n        };\n    }\n\n    public setFilterModel(model: FilterModel | null, source: FilterChangedEventSourceType = 'api'): void {\n        if (this.dataTypeService?.isPendingInference()) {\n            this.filterModelUpdateQueue.push({ model, source });\n            return;\n        }\n\n        const allPromises: AgPromise<void>[] = [];\n        const previousModel = this.getFilterModel();\n\n        if (model) {\n            // mark the filters as we set them, so any active filters left over we stop\n            const modelKeys = new Set(Object.keys(model));\n\n            this.allColumnFilters.forEach((filterWrapper, colId) => {\n                const newModel = model[colId];\n\n                allPromises.push(this.setModelOnFilterWrapper(filterWrapper.filterPromise!, newModel));\n                modelKeys.delete(colId);\n            });\n\n            // at this point, processedFields contains data for which we don't have a filter working yet\n            modelKeys.forEach((colId) => {\n                const column = this.columnModel.getColDefCol(colId) || this.columnModel.getCol(colId);\n\n                if (!column) {\n                    _warnOnce('setFilterModel() - no column found for colId: ' + colId);\n                    return;\n                }\n\n                if (!column.isFilterAllowed()) {\n                    _warnOnce('setFilterModel() - unable to fully apply model, filtering disabled for colId: ' + colId);\n                    return;\n                }\n\n                const filterWrapper = this.getOrCreateFilterWrapper(column);\n                if (!filterWrapper) {\n                    _warnOnce(\n                        'setFilterModel() - unable to fully apply model, unable to create filter for colId: ' + colId\n                    );\n                    return;\n                }\n                allPromises.push(this.setModelOnFilterWrapper(filterWrapper.filterPromise!, model[colId]));\n            });\n        } else {\n            this.allColumnFilters.forEach((filterWrapper) => {\n                allPromises.push(this.setModelOnFilterWrapper(filterWrapper.filterPromise!, null));\n            });\n        }\n\n        AgPromise.all(allPromises).then(() => {\n            const currentModel = this.getFilterModel();\n\n            const columns: AgColumn[] = [];\n            this.allColumnFilters.forEach((filterWrapper, colId) => {\n                const before = previousModel ? previousModel[colId] : null;\n                const after = currentModel ? currentModel[colId] : null;\n\n                if (!_jsonEquals(before, after)) {\n                    columns.push(filterWrapper.column);\n                }\n            });\n\n            if (columns.length > 0) {\n                this.filterManager?.onFilterChanged({ columns, source });\n            }\n        });\n    }\n\n    private setModelOnFilterWrapper(filterPromise: AgPromise<IFilterComp>, newModel: any): AgPromise<void> {\n        return new AgPromise<void>((resolve) => {\n            filterPromise.then((filter) => {\n                if (typeof filter!.setModel !== 'function') {\n                    _warnOnce('filter missing setModel method, which is needed for setFilterModel');\n                    resolve();\n                }\n\n                (filter!.setModel(newModel) || AgPromise.resolve()).then(() => resolve());\n            });\n        });\n    }\n\n    public getFilterModel(): FilterModel {\n        const result: FilterModel = {};\n\n        this.allColumnFilters.forEach((filterWrapper, key) => {\n            const model = this.getModelFromFilterWrapper(filterWrapper);\n\n            if (_exists(model)) {\n                result[key] = model;\n            }\n        });\n\n        return result;\n    }\n\n    private getModelFromFilterWrapper(filterWrapper: FilterWrapper): any {\n        const { filter } = filterWrapper;\n        if (filter) {\n            if (typeof filter.getModel !== 'function') {\n                _warnOnce('filter API missing getModel method, which is needed for getFilterModel');\n                return null;\n            }\n\n            return filter.getModel();\n        } else {\n            // filter still being created. return initial state if it exists and hasn't been applied yet\n            return this.getModelFromInitialState(filterWrapper.column);\n        }\n    }\n\n    private getModelFromInitialState(column: AgColumn): any {\n        return this.initialFilterModel[column.getColId()] ?? null;\n    }\n\n    public isColumnFilterPresent(): boolean {\n        return this.activeColumnFilters.length > 0;\n    }\n\n    public isAggregateFilterPresent(): boolean {\n        return !!this.activeAggregateFilters.length;\n    }\n\n    public disableColumnFilters(): boolean {\n        if (this.allColumnFilters.size) {\n            this.allColumnFilters.forEach((filterWrapper) =>\n                this.disposeFilterWrapper(filterWrapper, 'advancedFilterEnabled')\n            );\n            return true;\n        }\n        return false;\n    }\n\n    public doAggregateFiltersPass(node: RowNode, filterToSkip?: IFilterComp) {\n        return this.doColumnFiltersPass(node, filterToSkip, true);\n    }\n\n    private updateActiveFilters(): AgPromise<void> {\n        const isFilterActive = (filter: IFilter | null) => {\n            if (!filter) {\n                return false;\n            } // this never happens, including to avoid compile error\n            if (!filter.isFilterActive) {\n                _warnOnce('Filter is missing isFilterActive() method');\n                return false;\n            }\n            return filter.isFilterActive();\n        };\n\n        const groupFilterEnabled = !!this.gos.getGroupAggFiltering();\n\n        const isAggFilter = (column: AgColumn) => {\n            const isSecondary = !column.isPrimary();\n            // the only filters that can appear on secondary columns are groupAgg filters\n            if (isSecondary) {\n                return true;\n            }\n\n            const isShowingPrimaryColumns = !this.columnModel.isPivotActive();\n            const isValueActive = column.isValueActive();\n\n            // primary columns are only ever groupAgg filters if a) value is active and b) showing primary columns\n            if (!isValueActive || !isShowingPrimaryColumns) {\n                return false;\n            }\n\n            // from here on we know: isPrimary=true, isValueActive=true, isShowingPrimaryColumns=true\n            if (this.columnModel.isPivotMode()) {\n                // primary column is pretending to be a pivot column, ie pivotMode=true, but we are\n                // still showing primary columns\n                return true;\n            }\n            // we are not pivoting, so we groupFilter when it's an agg column\n            return groupFilterEnabled;\n        };\n\n        const activeAggregateFilters: IFilterComp[] = [];\n        const activeColumnFilters: IFilterComp[] = [];\n\n        return this.forEachColumnFilter((filter, filterWrapper) => {\n            const filterActive = isFilterActive(filter);\n            if (filterActive) {\n                if (isAggFilter(filterWrapper.column)) {\n                    activeAggregateFilters.push(filter!);\n                } else {\n                    activeColumnFilters.push(filter!);\n                }\n            }\n        }).then(() => {\n            this.activeAggregateFilters = activeAggregateFilters;\n            this.activeColumnFilters = activeColumnFilters;\n        });\n    }\n\n    private updateFilterFlagInColumns(\n        source: ColumnEventType,\n        additionalEventAttributes?: any\n    ): AgPromise<(void | null)[]> {\n        return this.forEachColumnFilter((filter, filterWrapper) =>\n            filterWrapper.column.setFilterActive(filter!.isFilterActive(), source, additionalEventAttributes)\n        );\n    }\n\n    private forEachColumnFilter(\n        callback: (filter: IFilterComp | null, filterWrapper: FilterWrapper) => void\n    ): AgPromise<(void | null)[]> {\n        return AgPromise.all(\n            Array.from(this.allColumnFilters.values()).map((filterWrapper) =>\n                filterWrapper.filterPromise!.then((filter) => callback(filter, filterWrapper))\n            )\n        );\n    }\n\n    public doColumnFiltersPass(node: RowNode, filterToSkip?: IFilterComp, targetAggregates?: boolean): boolean {\n        const { data, aggData } = node;\n\n        const targetedFilters = targetAggregates ? this.activeAggregateFilters : this.activeColumnFilters;\n        const targetedData = targetAggregates ? aggData : data;\n        for (let i = 0; i < targetedFilters.length; i++) {\n            const filter = targetedFilters[i];\n\n            if (filter == null || filter === filterToSkip) {\n                continue;\n            }\n\n            if (typeof filter.doesFilterPass !== 'function') {\n                // because users can do custom filters, give nice error message\n                throw new Error('Filter is missing method doesFilterPass');\n            }\n\n            if (!filter.doesFilterPass({ node, data: targetedData })) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    // sometimes (especially in React) the filter can call onFilterChanged when we are in the middle\n    // of a render cycle. this would be bad, so we wait for render cycle to complete when this happens.\n    // this happens in react when we change React State in the grid (eg setting RowCtrl's in RowContainer)\n    // which results in React State getting applied in the main application, triggering a useEffect() to\n    // be kicked off adn then the application calling the grid's API. in AG-6554, the custom filter was\n    // getting it's useEffect() triggered in this way.\n    private callOnFilterChangedOutsideRenderCycle(params: {\n        source?: FilterChangedEventSourceType;\n        filterInstance?: IFilterComp;\n        additionalEventAttributes?: any;\n        columns?: AgColumn[];\n    }): void {\n        const action = () => this.filterManager?.onFilterChanged(params);\n        if (this.rowRenderer.isRefreshInProgress()) {\n            setTimeout(action, 0);\n        } else {\n            action();\n        }\n    }\n\n    public updateBeforeFilterChanged(\n        params: {\n            filterInstance?: IFilterComp;\n            additionalEventAttributes?: any;\n        } = {}\n    ): AgPromise<void> {\n        const { filterInstance, additionalEventAttributes } = params;\n\n        this.updateDependentFilters();\n        return this.updateActiveFilters().then(() =>\n            this.updateFilterFlagInColumns('filterChanged', additionalEventAttributes).then(() => {\n                this.allColumnFilters.forEach((filterWrapper) => {\n                    if (!filterWrapper.filterPromise) {\n                        return;\n                    }\n                    filterWrapper.filterPromise.then((filter) => {\n                        if (filter && filter !== filterInstance && filter.onAnyFilterChanged) {\n                            filter!.onAnyFilterChanged();\n                        }\n                    });\n                });\n\n                // because internal events are not async in ag-grid, when the dispatchEvent\n                // method comes back, we know all listeners have finished executing.\n                this.processingFilterChange = true;\n            })\n        ) as AgPromise<void>;\n    }\n\n    public updateAfterFilterChanged(): void {\n        this.processingFilterChange = false;\n    }\n\n    public isSuppressFlashingCellsBecauseFiltering(): boolean {\n        // if user has elected to always flash cell changes, then always return false, otherwise we suppress flashing\n        // changes when filtering\n        const allowShowChangeAfterFilter = this.gos.get('allowShowChangeAfterFilter') ?? false;\n        return !allowShowChangeAfterFilter && this.processingFilterChange;\n    }\n\n    private onNewRowsLoaded(source: ColumnEventType): void {\n        this.forEachColumnFilter((filter) => {\n            if (filter!.onNewRowsLoaded) {\n                filter!.onNewRowsLoaded();\n            }\n        })\n            .then(() => this.updateFilterFlagInColumns(source, { afterDataChange: true }))\n            .then(() => this.updateActiveFilters());\n    }\n\n    private createValueGetter(column: AgColumn): IFilterParams['valueGetter'] {\n        return ({ node }) => this.valueService.getValue(column, node as RowNode, true);\n    }\n\n    private createGetValue(filterColumn: AgColumn): IFilterParams['getValue'] {\n        return (rowNode, column) => {\n            const columnToUse = column ? this.columnModel.getCol(column) : filterColumn;\n            return columnToUse ? this.valueService.getValue(columnToUse, rowNode, true) : undefined;\n        };\n    }\n\n    public isFilterActive(column: AgColumn): boolean {\n        const { filter } = this.cachedFilter(column) ?? {};\n        if (filter) {\n            return filter.isFilterActive();\n        }\n        // if not created, should only be active if there's a model\n        return this.getModelFromInitialState(column) != null;\n    }\n\n    public getOrCreateFilterWrapper(column: AgColumn): FilterWrapper | null {\n        if (!column.isFilterAllowed()) {\n            return null;\n        }\n\n        let filterWrapper = this.cachedFilter(column);\n\n        if (!filterWrapper) {\n            filterWrapper = this.createFilterWrapper(column);\n            this.setColumnFilterWrapper(column, filterWrapper);\n        }\n\n        return filterWrapper;\n    }\n\n    private cachedFilter(column: AgColumn): FilterWrapper | undefined {\n        return this.allColumnFilters.get(column.getColId());\n    }\n\n    private getDefaultFilter(column: AgColumn): string {\n        let defaultFilter;\n        if (ModuleRegistry.__isRegistered(ModuleNames.SetFilterModule, this.gridId)) {\n            defaultFilter = 'agSetColumnFilter';\n        } else {\n            const cellDataType = this.dataTypeService?.getBaseDataType(column);\n            if (cellDataType === 'number') {\n                defaultFilter = 'agNumberColumnFilter';\n            } else if (cellDataType === 'date' || cellDataType === 'dateString') {\n                defaultFilter = 'agDateColumnFilter';\n            } else {\n                defaultFilter = 'agTextColumnFilter';\n            }\n        }\n        return defaultFilter;\n    }\n\n    public getDefaultFloatingFilter(column: AgColumn): string {\n        let defaultFloatingFilterType: string;\n        if (ModuleRegistry.__isRegistered(ModuleNames.SetFilterModule, this.gridId)) {\n            defaultFloatingFilterType = 'agSetColumnFloatingFilter';\n        } else {\n            const cellDataType = this.dataTypeService?.getBaseDataType(column);\n            if (cellDataType === 'number') {\n                defaultFloatingFilterType = 'agNumberColumnFloatingFilter';\n            } else if (cellDataType === 'date' || cellDataType === 'dateString') {\n                defaultFloatingFilterType = 'agDateColumnFloatingFilter';\n            } else {\n                defaultFloatingFilterType = 'agTextColumnFloatingFilter';\n            }\n        }\n        return defaultFloatingFilterType;\n    }\n\n    private createFilterInstance(\n        column: AgColumn,\n        filterWrapper?: FilterWrapper\n    ): {\n        filterPromise: (() => AgPromise<IFilterComp> | null) | null;\n        compDetails: UserCompDetails | null;\n    } {\n        const defaultFilter = this.getDefaultFilter(column);\n\n        const colDef = column.getColDef();\n\n        let filterInstance: IFilterComp;\n\n        const params: IFilterParams = {\n            ...this.createFilterParams(column, colDef),\n            filterModifiedCallback: () => this.filterModifiedCallbackFactory(filterInstance, column)(),\n            filterChangedCallback: (additionalEventAttributes?: any) =>\n                this.filterChangedCallbackFactory(filterInstance, column)(additionalEventAttributes),\n            doesRowPassOtherFilter: (node) =>\n                this.filterManager ? this.filterManager.doesRowPassOtherFilters(filterInstance, node) : true,\n        };\n\n        const compDetails = this.userComponentFactory.getFilterDetails(colDef, params, defaultFilter);\n        if (!compDetails) {\n            return { filterPromise: null, compDetails: null };\n        }\n        return {\n            filterPromise: () => {\n                const filterPromise = compDetails.newAgStackInstance();\n                if (filterPromise != null) {\n                    filterPromise.then((r) => {\n                        filterInstance = r!;\n                        if (filterWrapper) {\n                            filterWrapper.filter = r;\n                        }\n                    });\n                }\n                return filterPromise;\n            },\n            compDetails,\n        };\n    }\n\n    public createFilterParams(column: AgColumn, colDef: ColDef): IFilterParams {\n        const params: IFilterParams = this.gos.addGridCommonParams({\n            column,\n            colDef: _cloneObject(colDef),\n            rowModel: this.rowModel,\n            filterChangedCallback: () => {},\n            filterModifiedCallback: () => {},\n            valueGetter: this.createValueGetter(column),\n            getValue: this.createGetValue(column),\n            doesRowPassOtherFilter: () => true,\n        });\n\n        return params;\n    }\n\n    private createFilterWrapper(column: AgColumn): FilterWrapper {\n        const filterWrapper: FilterWrapper = {\n            column: column,\n            filterPromise: null,\n            compiledElement: null,\n            compDetails: null,\n        };\n\n        const { filterPromise, compDetails } = this.createFilterInstance(column, filterWrapper);\n        filterWrapper.filterPromise = filterPromise?.() ?? null;\n        filterWrapper.compDetails = compDetails;\n\n        return filterWrapper;\n    }\n\n    private onColumnsChanged(): void {\n        const columns: AgColumn[] = [];\n\n        this.allColumnFilters.forEach((wrapper, colId) => {\n            let currentColumn: AgColumn | null;\n            if (wrapper.column.isPrimary()) {\n                currentColumn = this.columnModel.getColDefCol(colId);\n            } else {\n                currentColumn = this.columnModel.getCol(colId);\n            }\n            // group columns can be recreated with the same colId\n            if (currentColumn && currentColumn === wrapper.column) {\n                return;\n            }\n\n            columns.push(wrapper.column);\n            this.disposeFilterWrapper(wrapper, 'columnChanged');\n            this.disposeColumnListener(colId);\n        });\n\n        if (columns.length > 0) {\n            // When a filter changes as a side effect of a column changes,\n            // we report 'api' as the source, so that the client can distinguish\n            this.filterManager?.onFilterChanged({ columns, source: 'api' });\n        } else {\n            // onFilterChanged does this already\n            this.updateDependentFilters();\n        }\n    }\n\n    private updateDependentFilters(): void {\n        // Group column filters can be dependant on underlying column filters, but don't normally get created until they're used for the first time.\n        // Instead, create them by default when any filter changes.\n        const groupColumns = this.columnModel.getAutoCols();\n        groupColumns?.forEach((groupColumn) => {\n            if (groupColumn.getColDef().filter === 'agGroupColumnFilter') {\n                this.getOrCreateFilterWrapper(groupColumn);\n            }\n        });\n    }\n\n    // for group filters, can change dynamically whether they are allowed or not\n    public isFilterAllowed(column: AgColumn): boolean {\n        const isFilterAllowed = column.isFilterAllowed();\n        if (!isFilterAllowed) {\n            return false;\n        }\n        const { filter } = this.allColumnFilters.get(column.getColId()) ?? {};\n        if (filter) {\n            // defer to filter component isFilterAllowed if it exists\n            return typeof (filter as any)?.isFilterAllowed === 'function' ? (filter as any).isFilterAllowed() : true;\n        }\n        return true;\n    }\n\n    public getFloatingFilterCompDetails(column: AgColumn, showParentFilter: () => void): UserCompDetails | undefined {\n        const parentFilterInstance = (callback: IFloatingFilterParentCallback<IFilter>) => {\n            const filterComponent = this.getOrCreateFilterWrapper(column)?.filterPromise;\n\n            if (filterComponent == null) {\n                return;\n            }\n\n            filterComponent.then((instance) => {\n                callback(_unwrapUserComp(instance!));\n            });\n        };\n\n        const colDef = column.getColDef();\n        const filterParams = {\n            ...this.createFilterParams(column, colDef),\n            filterChangedCallback: () =>\n                parentFilterInstance((filterInstance) =>\n                    this.filterChangedCallbackFactory(filterInstance as IFilterComp, column)()\n                ),\n        };\n        const finalFilterParams = this.userComponentFactory.mergeParamsWithApplicationProvidedParams(\n            colDef,\n            FilterComponent,\n            filterParams\n        );\n\n        let defaultFloatingFilterType = getDefaultFloatingFilterType(this.frameworkOverrides, colDef, () =>\n            this.getDefaultFloatingFilter(column)\n        );\n\n        if (defaultFloatingFilterType == null) {\n            defaultFloatingFilterType = 'agReadOnlyFloatingFilter';\n        }\n\n        const params: WithoutGridCommon<IFloatingFilterParams<IFilter>> = {\n            column: column,\n            filterParams: finalFilterParams,\n            currentParentModel: () => this.getCurrentFloatingFilterParentModel(column),\n            parentFilterInstance,\n            showParentFilter,\n            suppressFilterButton: false, // This one might be overridden from the colDef\n        };\n\n        return this.userComponentFactory.getFloatingFilterCompDetails(colDef, params, defaultFloatingFilterType);\n    }\n\n    public getCurrentFloatingFilterParentModel(column: AgColumn): any {\n        return this.getModelFromFilterWrapper(this.cachedFilter(column) ?? ({ column } as FilterWrapper));\n    }\n\n    // destroys the filter, so it no longer takes part\n    public destroyFilter(column: AgColumn, source: 'api' | 'columnChanged' | 'paramsUpdated' = 'api'): void {\n        const colId = column.getColId();\n        const filterWrapper = this.allColumnFilters.get(colId);\n\n        this.disposeColumnListener(colId);\n\n        delete this.initialFilterModel[colId];\n\n        if (filterWrapper) {\n            this.disposeFilterWrapper(filterWrapper, source);\n            this.filterManager?.onFilterChanged({\n                columns: [column],\n                source: 'api',\n            });\n        }\n    }\n\n    private disposeColumnListener(colId: string): void {\n        const columnListener = this.allColumnListeners.get(colId);\n\n        if (columnListener) {\n            this.allColumnListeners.delete(colId);\n            columnListener();\n        }\n    }\n\n    private disposeFilterWrapper(\n        filterWrapper: FilterWrapper,\n        source: 'api' | 'columnChanged' | 'gridDestroyed' | 'advancedFilterEnabled' | 'paramsUpdated'\n    ): void {\n        filterWrapper.filterPromise!.then((filter) => {\n            this.destroyBean(filter);\n\n            filterWrapper.column.setFilterActive(false, 'filterDestroyed');\n\n            this.allColumnFilters.delete(filterWrapper.column.getColId());\n\n            const event: WithoutGridCommon<FilterDestroyedEvent> = {\n                type: 'filterDestroyed',\n                source,\n                column: filterWrapper.column,\n            };\n            this.eventService.dispatchEvent(event);\n        });\n    }\n\n    private filterModifiedCallbackFactory(filter: IFilterComp<any>, column: AgColumn<any>) {\n        return () => {\n            const event: WithoutGridCommon<FilterModifiedEvent> = {\n                type: 'filterModified',\n                column,\n                filterInstance: filter,\n            };\n\n            this.eventService.dispatchEvent(event);\n        };\n    }\n\n    private filterChangedCallbackFactory(filter: IFilterComp<any>, column: AgColumn<any>) {\n        return (additionalEventAttributes?: any) => {\n            const source: FilterChangedEventSourceType = additionalEventAttributes?.source ?? 'columnFilter';\n            const params = {\n                filter,\n                additionalEventAttributes,\n                columns: [column],\n                source,\n            };\n            this.callOnFilterChangedOutsideRenderCycle(params);\n        };\n    }\n\n    private checkDestroyFilter(colId: string): void {\n        const filterWrapper = this.allColumnFilters.get(colId);\n        if (!filterWrapper) {\n            return;\n        }\n\n        const column = filterWrapper.column;\n        const { compDetails } = column.isFilterAllowed() ? this.createFilterInstance(column) : { compDetails: null };\n\n        // Case when filter component changes\n        if (this.areFilterCompsDifferent(filterWrapper.compDetails, compDetails)) {\n            this.destroyFilter(column, 'paramsUpdated');\n            return;\n        }\n\n        // Case when filter params changes\n        const newFilterParams = column.getColDef().filterParams;\n        // When filter wrapper does not have promise to retrieve FilterComp, destroy\n        if (!filterWrapper.filterPromise) {\n            this.destroyFilter(column, 'paramsUpdated');\n            return;\n        }\n\n        // Otherwise - Check for refresh method before destruction\n        // If refresh() method is implemented - call it and destroy filter if it returns false\n        // Otherwise - do nothing ( filter will not be destroyed - we assume new params are compatible with old ones )\n        filterWrapper.filterPromise.then((filter) => {\n            const shouldRefreshFilter = filter?.refresh\n                ? filter.refresh({\n                      ...this.createFilterParams(column, column.getColDef()),\n                      filterModifiedCallback: this.filterModifiedCallbackFactory(filter, column),\n                      filterChangedCallback: this.filterChangedCallbackFactory(filter, column),\n                      doesRowPassOtherFilter: (node) =>\n                          this.filterManager ? this.filterManager.doesRowPassOtherFilters(filter, node) : true,\n                      ...newFilterParams,\n                  })\n                : true;\n            // framework wrapper always implements optional methods, but returns null if no underlying method\n            if (shouldRefreshFilter === false) {\n                this.destroyFilter(column, 'paramsUpdated');\n            }\n        });\n    }\n\n    private setColumnFilterWrapper(column: AgColumn, filterWrapper: FilterWrapper): void {\n        const colId = column.getColId();\n        this.allColumnFilters.set(colId, filterWrapper);\n        this.allColumnListeners.set(\n            colId,\n            this.addManagedListeners(column, { colDefChanged: () => this.checkDestroyFilter(colId) })[0]\n        );\n    }\n\n    public areFilterCompsDifferent(\n        oldCompDetails: UserCompDetails | null,\n        newCompDetails: UserCompDetails | null\n    ): boolean {\n        if (!newCompDetails || !oldCompDetails) {\n            return true;\n        }\n        const { componentClass: oldComponentClass } = oldCompDetails;\n        const { componentClass: newComponentClass } = newCompDetails;\n        const isSameComponentClass =\n            oldComponentClass === newComponentClass ||\n            // react hooks returns new wrappers, so check nested render method\n            (oldComponentClass?.render &&\n                newComponentClass?.render &&\n                oldComponentClass.render === newComponentClass.render);\n        return !isSameComponentClass;\n    }\n\n    public hasFloatingFilters(): boolean {\n        const gridColumns = this.columnModel.getCols();\n        return gridColumns.some((col) => col.getColDef().floatingFilter);\n    }\n\n    public getFilterInstance<TFilter extends IFilter>(\n        key: string | AgColumn,\n        callback?: (filter: TFilter | null) => void\n    ): undefined {\n        if (!callback) {\n            return undefined;\n        }\n        this.getFilterInstanceImpl(key).then((filter) => {\n            const unwrapped = _unwrapUserComp(filter) as any;\n            callback(unwrapped);\n        });\n        return undefined;\n    }\n\n    public getColumnFilterInstance<TFilter extends IFilter>(\n        key: string | AgColumn\n    ): Promise<TFilter | null | undefined> {\n        return new Promise((resolve) => {\n            this.getFilterInstanceImpl(key).then((filter) => {\n                resolve(_unwrapUserComp(filter) as any);\n            });\n        });\n    }\n\n    private getFilterInstanceImpl(key: string | AgColumn): AgPromise<IFilter | null | undefined> {\n        const column = this.columnModel.getColDefCol(key);\n\n        if (!column) {\n            return AgPromise.resolve(undefined);\n        }\n\n        const filterPromise = this.getOrCreateFilterWrapper(column)?.filterPromise;\n        return filterPromise ?? AgPromise.resolve(null);\n    }\n\n    private processFilterModelUpdateQueue(): void {\n        this.filterModelUpdateQueue.forEach(({ model, source }) => this.setFilterModel(model, source));\n        this.filterModelUpdateQueue = [];\n        this.columnFilterModelUpdateQueue.forEach(({ key, model, resolve }) => {\n            this.setColumnFilterModel(key, model).then(() => resolve());\n        });\n        this.columnFilterModelUpdateQueue = [];\n    }\n\n    public getColumnFilterModel(key: string | AgColumn): any {\n        const filterWrapper = this.getFilterWrapper(key);\n        return filterWrapper ? this.getModelFromFilterWrapper(filterWrapper) : null;\n    }\n\n    public setColumnFilterModel(key: string | AgColumn, model: any): Promise<void> {\n        if (this.dataTypeService?.isPendingInference()) {\n            let resolve: () => void = () => {};\n            const promise = new Promise<void>((res) => {\n                resolve = res;\n            });\n            this.columnFilterModelUpdateQueue.push({ key, model, resolve });\n            return promise;\n        }\n\n        const column = this.columnModel.getColDefCol(key);\n        const filterWrapper = column ? this.getOrCreateFilterWrapper(column) : null;\n        const convertPromise = <T>(promise: AgPromise<T>): Promise<T> => {\n            return new Promise((resolve) => {\n                promise.then((result) => resolve(result!));\n            });\n        };\n        return filterWrapper\n            ? convertPromise(this.setModelOnFilterWrapper(filterWrapper.filterPromise!, model))\n            : Promise.resolve();\n    }\n\n    private getFilterWrapper(key: string | AgColumn): FilterWrapper | null {\n        const column = this.columnModel.getColDefCol(key);\n        return column ? this.cachedFilter(column) ?? null : null;\n    }\n\n    public override destroy() {\n        super.destroy();\n        this.allColumnFilters.forEach((filterWrapper) => this.disposeFilterWrapper(filterWrapper, 'gridDestroyed'));\n        // don't need to destroy the listeners as they are managed listeners\n        this.allColumnListeners.clear();\n    }\n}\n\nexport interface FilterWrapper {\n    compiledElement: any;\n    column: AgColumn;\n    filterPromise: AgPromise<IFilterComp> | null;\n    filter?: IFilterComp;\n    compDetails: UserCompDetails | null;\n}\n", "import type { BeanCollection } from '../context/context';\nimport type { FilterChangedEventSourceType } from '../events';\n\nexport function isAnyFilterPresent(beans: BeanCollection): boolean {\n    return !!beans.filterManager?.isAnyFilterPresent();\n}\n\nexport function onFilterChanged(beans: BeanCollection, source: FilterChangedEventSourceType = 'api') {\n    beans.filterManager?.onFilterChanged({ source });\n}\n", "import type { ColumnNameService } from '../../../columns/columnNameService';\nimport type { BeanCollection } from '../../../context/context';\nimport type { AgColumn } from '../../../entities/agColumn';\nimport type { IFilter } from '../../../interfaces/iFilter';\nimport type { AgInputTextField } from '../../../widgets/agInputTextField';\nimport { AgInputTextFieldSelector } from '../../../widgets/agInputTextField';\nimport { Component, RefPlaceholder } from '../../../widgets/component';\nimport type { IFloatingFilterComp, IFloatingFilterParams, IFloatingFilterParent } from '../floatingFilter';\n\n// optional floating filter for user provided filters - instead of providing a floating filter,\n// they can provide a getModelAsString() method on the filter instead. this class just displays\n// the string returned from getModelAsString()\nexport class ReadOnlyFloatingFilter extends Component implements IFloatingFilterComp<IFilter & IFloatingFilterParent> {\n    private columnNameService: ColumnNameService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.columnNameService = beans.columnNameService;\n    }\n\n    private readonly eFloatingFilterText: AgInputTextField = RefPlaceholder;\n\n    private params: IFloatingFilterParams;\n\n    constructor() {\n        super(\n            /* html */ `\n            <div class=\"ag-floating-filter-input\" role=\"presentation\">\n                <ag-input-text-field data-ref=\"eFloatingFilterText\"></ag-input-text-field>\n            </div>`,\n            [AgInputTextFieldSelector]\n        );\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public override destroy(): void {\n        super.destroy();\n    }\n\n    public init(params: IFloatingFilterParams): void {\n        this.params = params;\n        const displayName = this.columnNameService.getDisplayNameForColumn(params.column as AgColumn, 'header', true);\n        const translate = this.localeService.getLocaleTextFunc();\n        this.eFloatingFilterText\n            .setDisabled(true)\n            .setInputAriaLabel(`${displayName} ${translate('ariaFilterInput', 'Filter Input')}`);\n    }\n\n    public onParentModelChanged(parentModel: any): void {\n        if (parentModel == null) {\n            this.eFloatingFilterText.setValue('');\n            return;\n        }\n\n        this.params.parentFilterInstance((filterInstance) => {\n            // it would be nice to check if getModelAsString was present before creating this component,\n            // however that is not possible, as React Hooks and VueJS don't attached the methods to the Filter until\n            // AFTER the filter is created, not allowing inspection before this (we create floating filters as columns\n            // are drawn, but the parent filters are only created when needed).\n            if (filterInstance.getModelAsString) {\n                const modelAsString = filterInstance.getModelAsString(parentModel);\n                this.eFloatingFilterText.setValue(modelAsString);\n            }\n        });\n    }\n\n    public onParamsUpdated(params: IFloatingFilterParams): void {\n        this.refresh(params);\n    }\n\n    public refresh(params: IFloatingFilterParams): void {\n        this.init(params);\n    }\n}\n", "import type { ColumnNameService } from '../../../columns/columnNameService';\nimport type { BeanCollection } from '../../../context/context';\nimport type { AgColumn } from '../../../entities/agColumn';\nimport type { FilterChangedEvent } from '../../../events';\nimport type { ProvidedFilterModel } from '../../../interfaces/iFilter';\nimport { Component } from '../../../widgets/component';\nimport type { ProvidedFilterParams } from '../../provided/iProvidedFilter';\nimport type { ScalarFilterParams } from '../../provided/iScalarFilter';\nimport type {\n    ICombinedSimpleModel,\n    ISimpleFilter,\n    ISimpleFilterModel,\n    ISimpleFilterModelType,\n} from '../../provided/iSimpleFilter';\nimport { OptionsFactory } from '../../provided/optionsFactory';\nimport type { SimpleFilterModelFormatter } from '../../provided/simpleFilterModelFormatter';\nimport type { IFloatingFilterComp, IFloatingFilterParams } from '../floatingFilter';\n\nexport abstract class SimpleFloatingFilter extends Component implements IFloatingFilterComp<ISimpleFilter> {\n    private columnNameService: ColumnNameService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.columnNameService = beans.columnNameService;\n    }\n\n    // this method is on IFloatingFilterComp. because it's not implemented at this level, we have to\n    // define it as an abstract method. it gets implemented in sub classes.\n    public abstract onParentModelChanged(model: ProvidedFilterModel, event: FilterChangedEvent): void;\n\n    protected abstract getDefaultFilterOptions(): string[];\n    protected abstract setEditable(editable: boolean): void;\n\n    protected abstract getFilterModelFormatter(): SimpleFilterModelFormatter;\n\n    private lastType: string | null | undefined;\n\n    protected optionsFactory: OptionsFactory;\n\n    private readOnly: boolean;\n\n    protected getDefaultDebounceMs(): number {\n        return 0;\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public override destroy(): void {\n        super.destroy();\n    }\n\n    protected isEventFromFloatingFilter(event: FilterChangedEvent): boolean | undefined {\n        return event && event.afterFloatingFilter;\n    }\n\n    protected isEventFromDataChange(event: FilterChangedEvent): boolean | undefined {\n        return event?.afterDataChange;\n    }\n\n    protected getLastType(): string | null | undefined {\n        return this.lastType;\n    }\n\n    protected isReadOnly(): boolean {\n        return this.readOnly;\n    }\n\n    protected setLastTypeFromModel(model: ProvidedFilterModel): void {\n        // if no model provided by the parent filter use default\n        if (!model) {\n            this.lastType = this.optionsFactory.getDefaultOption();\n            return;\n        }\n\n        const isCombined = (model as any).operator;\n\n        let condition: ISimpleFilterModel;\n\n        if (isCombined) {\n            const combinedModel = model as ICombinedSimpleModel<ISimpleFilterModel>;\n            condition = combinedModel.conditions![0];\n        } else {\n            condition = model as ISimpleFilterModel;\n        }\n\n        this.lastType = condition.type;\n    }\n\n    protected canWeEditAfterModelFromParentFilter(model: ProvidedFilterModel): boolean {\n        if (!model) {\n            // if no model, then we can edit as long as the lastType is something we can edit, as this\n            // is the type we will provide to the parent filter if the user decides to use the floating filter.\n            return this.isTypeEditable(this.lastType);\n        }\n\n        // never allow editing if the filter is combined (ie has two parts)\n        const isCombined = (model as any).operator;\n\n        if (isCombined) {\n            return false;\n        }\n\n        const simpleModel = model as ISimpleFilterModel;\n\n        return this.isTypeEditable(simpleModel.type);\n    }\n\n    public init(params: IFloatingFilterParams): void {\n        this.setSimpleParams(params, false);\n    }\n\n    private setSimpleParams(params: IFloatingFilterParams, update: boolean = true): void {\n        this.optionsFactory = new OptionsFactory();\n        this.optionsFactory.init(params.filterParams as ScalarFilterParams, this.getDefaultFilterOptions());\n\n        // Initial call\n        if (!update) {\n            this.lastType = this.optionsFactory.getDefaultOption();\n        }\n\n        // readOnly is a property of ProvidedFilterParams - we need to find a better (type-safe)\n        // way to support reading this in the future.\n        this.readOnly = !!(params.filterParams as ProvidedFilterParams).readOnly;\n\n        // we are editable if:\n        // 1) there is a type (user has configured filter wrong if not type)\n        //  AND\n        // 2) the default type is not 'inRange'\n        const editable = this.isTypeEditable(this.optionsFactory.getDefaultOption());\n        this.setEditable(editable);\n    }\n\n    public onParamsUpdated(params: IFloatingFilterParams): void {\n        this.refresh(params);\n    }\n\n    public refresh(params: IFloatingFilterParams): void {\n        this.setSimpleParams(params);\n    }\n\n    private doesFilterHaveSingleInput(filterType: string) {\n        const customFilterOption = this.optionsFactory.getCustomOption(filterType);\n        const { numberOfInputs } = customFilterOption || {};\n        return numberOfInputs == null || numberOfInputs == 1;\n    }\n\n    private isTypeEditable(type?: string | null): boolean {\n        const uneditableTypes: ISimpleFilterModelType[] = ['inRange', 'empty', 'blank', 'notBlank'];\n        return (\n            !!type &&\n            !this.isReadOnly() &&\n            this.doesFilterHaveSingleInput(type) &&\n            uneditableTypes.indexOf(type as ISimpleFilterModelType) < 0\n        );\n    }\n\n    protected getAriaLabel(params: IFloatingFilterParams): string {\n        const displayName = this.columnNameService.getDisplayNameForColumn(params.column as AgColumn, 'header', true);\n        const translate = this.localeService.getLocaleTextFunc();\n        return `${displayName} ${translate('ariaFilterInput', 'Filter Input')}`;\n    }\n}\n", "import type { UserComponentFactory } from '../../../components/framework/userComponentFactory';\nimport type { BeanCollection, Context } from '../../../context/context';\nimport type { FilterChangedEvent } from '../../../events';\nimport type { IDateParams } from '../../../interfaces/dateComponent';\nimport type { WithoutGridCommon } from '../../../interfaces/iCommon';\nimport { _parseDateTimeFromString, _serialiseDate } from '../../../utils/date';\nimport { _setDisplayed } from '../../../utils/dom';\nimport { _debounce } from '../../../utils/function';\nimport type { AgInputTextField } from '../../../widgets/agInputTextField';\nimport { AgInputTextFieldSelector } from '../../../widgets/agInputTextField';\nimport { RefPlaceholder } from '../../../widgets/component';\nimport type { IFloatingFilterParams } from '../../floating/floatingFilter';\nimport { getDebounceMs } from '../../floating/provided/providedFilterUtils';\nimport { SimpleFloatingFilter } from '../../floating/provided/simpleFloatingFilter';\nimport type { ISimpleFilterModel } from '../iSimpleFilter';\nimport type { SimpleFilterModelFormatter } from '../simpleFilterModelFormatter';\nimport { DateCompWrapper } from './dateCompWrapper';\nimport type { DateFilter } from './dateFilter';\nimport { DEFAULT_DATE_FILTER_OPTIONS } from './dateFilterConstants';\nimport { DateFilterModelFormatter } from './dateFilterModelFormatter';\nimport type { DateFilterModel, DateFilterParams } from './iDateFilter';\n\nexport class DateFloatingFilter extends SimpleFloatingFilter {\n    private userComponentFactory: UserComponentFactory;\n    private context: Context;\n\n    public override wireBeans(beans: BeanCollection): void {\n        super.wireBeans(beans);\n        this.context = beans.context;\n        this.userComponentFactory = beans.userComponentFactory;\n    }\n\n    private readonly eReadOnlyText: AgInputTextField = RefPlaceholder;\n    private readonly eDateWrapper: HTMLInputElement = RefPlaceholder;\n\n    private dateComp: DateCompWrapper;\n    private params: IFloatingFilterParams<DateFilter>;\n    private filterParams: DateFilterParams;\n    private filterModelFormatter: DateFilterModelFormatter;\n\n    constructor() {\n        super(\n            /* html */ `\n            <div class=\"ag-floating-filter-input\" role=\"presentation\">\n                <ag-input-text-field data-ref=\"eReadOnlyText\"></ag-input-text-field>\n                <div data-ref=\"eDateWrapper\" style=\"display: flex;\"></div>\n            </div>`,\n            [AgInputTextFieldSelector]\n        );\n    }\n\n    protected getDefaultFilterOptions(): string[] {\n        return DEFAULT_DATE_FILTER_OPTIONS;\n    }\n\n    public override init(params: IFloatingFilterParams<DateFilter>): void {\n        super.init(params);\n        this.params = params;\n        this.filterParams = params.filterParams;\n\n        this.createDateComponent();\n        this.filterModelFormatter = new DateFilterModelFormatter(\n            this.filterParams,\n            this.localeService,\n            this.optionsFactory\n        );\n        const translate = this.localeService.getLocaleTextFunc();\n        this.eReadOnlyText.setDisabled(true).setInputAriaLabel(translate('ariaDateFilterInput', 'Date Filter Input'));\n    }\n\n    public override onParamsUpdated(params: IFloatingFilterParams<DateFilter>): void {\n        this.refresh(params);\n    }\n\n    public override refresh(params: IFloatingFilterParams<DateFilter>): void {\n        super.refresh(params);\n        this.params = params;\n        this.filterParams = params.filterParams;\n\n        this.updateDateComponent();\n        this.filterModelFormatter.updateParams({\n            optionsFactory: this.optionsFactory,\n            dateFilterParams: this.filterParams,\n        });\n        this.updateCompOnModelChange(params.currentParentModel());\n    }\n\n    private updateCompOnModelChange(model: any): void {\n        // Update the read-only text field\n        const allowEditing = !this.isReadOnly() && this.canWeEditAfterModelFromParentFilter(model);\n        this.setEditable(allowEditing);\n\n        if (allowEditing) {\n            if (model) {\n                const dateModel = model as DateFilterModel;\n                this.dateComp.setDate(_parseDateTimeFromString(dateModel.dateFrom));\n            } else {\n                this.dateComp.setDate(null);\n            }\n\n            this.eReadOnlyText.setValue('');\n        } else {\n            this.eReadOnlyText.setValue(this.filterModelFormatter.getModelAsString(model));\n            this.dateComp.setDate(null);\n        }\n    }\n\n    protected setEditable(editable: boolean): void {\n        _setDisplayed(this.eDateWrapper, editable);\n        _setDisplayed(this.eReadOnlyText.getGui(), !editable);\n    }\n\n    public onParentModelChanged(model: ISimpleFilterModel, event: FilterChangedEvent): void {\n        // We don't want to update the floating filter if the floating filter caused the change,\n        // because the UI is already in sync. if we didn't do this, the UI would behave strangely\n        // as it would be updating as the user is typing.\n        // This is similar for data changes, which don't affect provided date floating filters\n        if (this.isEventFromFloatingFilter(event) || this.isEventFromDataChange(event)) {\n            return;\n        }\n\n        super.setLastTypeFromModel(model);\n        this.updateCompOnModelChange(model);\n    }\n\n    private onDateChanged(): void {\n        const filterValueDate = this.dateComp.getDate();\n        const filterValueText = _serialiseDate(filterValueDate);\n\n        this.params.parentFilterInstance((filterInstance) => {\n            if (filterInstance) {\n                const date = _parseDateTimeFromString(filterValueText);\n                filterInstance.onFloatingFilterChanged(this.getLastType() || null, date);\n            }\n        });\n    }\n\n    private getDateComponentParams(): WithoutGridCommon<IDateParams> {\n        const debounceMs = getDebounceMs(this.params.filterParams, this.getDefaultDebounceMs());\n        return {\n            onDateChanged: _debounce(this.onDateChanged.bind(this), debounceMs),\n            filterParams: this.params.column.getColDef().filterParams,\n        };\n    }\n\n    private createDateComponent(): void {\n        this.dateComp = new DateCompWrapper(\n            this.context,\n            this.userComponentFactory,\n            this.getDateComponentParams(),\n            this.eDateWrapper,\n            (dateComp) => {\n                dateComp.setInputAriaLabel(this.getAriaLabel(this.params));\n            }\n        );\n\n        this.addDestroyFunc(() => this.dateComp.destroy());\n    }\n\n    private updateDateComponent(): void {\n        const params = this.gos.addGridCommonParams(this.getDateComponentParams());\n        this.dateComp.updateParams(params);\n    }\n\n    protected getFilterModelFormatter(): SimpleFilterModelFormatter {\n        return this.filterModelFormatter;\n    }\n}\n", "import type { IDateComp, IDateParams } from '../../../interfaces/dateComponent';\nimport type { IAfterGuiAttachedParams } from '../../../interfaces/iAfterGuiAttachedParams';\nimport { _getSafariVersion, _isBrowserChrome, _isBrowserFirefox, _isBrowserSafari } from '../../../utils/browser';\nimport { _dateToFormattedString, _parseDateTimeFromString, _serialiseDate } from '../../../utils/date';\nimport { _warnOnce } from '../../../utils/function';\nimport type { AgInputTextField } from '../../../widgets/agInputTextField';\nimport { AgInputTextFieldSelector } from '../../../widgets/agInputTextField';\nimport { Component, RefPlaceholder } from '../../../widgets/component';\n\nexport class DefaultDateComponent extends Component implements IDateComp {\n    private readonly eDateInput: AgInputTextField = RefPlaceholder;\n\n    constructor() {\n        super(\n            /* html */ `\n            <div class=\"ag-filter-filter\">\n                <ag-input-text-field class=\"ag-date-filter\" data-ref=\"eDateInput\"></ag-input-text-field>\n            </div>`,\n            [AgInputTextFieldSelector]\n        );\n    }\n\n    private params: IDateParams;\n    private usingSafariDatePicker: boolean;\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public override destroy(): void {\n        super.destroy();\n    }\n\n    public init(params: IDateParams): void {\n        this.params = params;\n        this.setParams(params);\n\n        const inputElement = this.eDateInput.getInputElement();\n\n        this.addManagedListeners(inputElement, {\n            // ensures that the input element is focussed when a clear button is clicked,\n            // unless using safari as there is no clear button and focus does not work properly\n            mouseDown: () => {\n                if (this.eDateInput.isDisabled() || this.usingSafariDatePicker) {\n                    return;\n                }\n                inputElement.focus();\n            },\n            input: (e) => {\n                if (e.target !== this.gos.getActiveDomElement()) {\n                    return;\n                }\n                if (this.eDateInput.isDisabled()) {\n                    return;\n                }\n\n                this.params.onDateChanged();\n            },\n        });\n    }\n\n    private setParams(params: IDateParams): void {\n        const inputElement = this.eDateInput.getInputElement();\n\n        const shouldUseBrowserDatePicker = this.shouldUseBrowserDatePicker(params);\n        this.usingSafariDatePicker = shouldUseBrowserDatePicker && _isBrowserSafari();\n\n        inputElement.type = shouldUseBrowserDatePicker ? 'date' : 'text';\n\n        const { minValidYear, maxValidYear, minValidDate, maxValidDate } = params.filterParams || {};\n\n        if (minValidDate && minValidYear) {\n            _warnOnce(\n                'DateFilter should not have both minValidDate and minValidYear parameters set at the same time! minValidYear will be ignored.'\n            );\n        }\n\n        if (maxValidDate && maxValidYear) {\n            _warnOnce(\n                'DateFilter should not have both maxValidDate and maxValidYear parameters set at the same time! maxValidYear will be ignored.'\n            );\n        }\n\n        if (minValidDate && maxValidDate) {\n            const [parsedMinValidDate, parsedMaxValidDate] = [minValidDate, maxValidDate].map((v) =>\n                v instanceof Date ? v : _parseDateTimeFromString(v)\n            );\n\n            if (\n                parsedMinValidDate &&\n                parsedMaxValidDate &&\n                parsedMinValidDate.getTime() > parsedMaxValidDate.getTime()\n            ) {\n                _warnOnce(\n                    'DateFilter parameter minValidDate should always be lower than or equal to parameter maxValidDate.'\n                );\n            }\n        }\n\n        if (minValidDate) {\n            if (minValidDate instanceof Date) {\n                inputElement.min = _dateToFormattedString(minValidDate);\n            } else {\n                inputElement.min = minValidDate;\n            }\n        } else {\n            if (minValidYear) {\n                inputElement.min = `${minValidYear}-01-01`;\n            }\n        }\n\n        if (maxValidDate) {\n            if (maxValidDate instanceof Date) {\n                inputElement.max = _dateToFormattedString(maxValidDate);\n            } else {\n                inputElement.max = maxValidDate;\n            }\n        } else {\n            if (maxValidYear) {\n                inputElement.max = `${maxValidYear}-12-31`;\n            }\n        }\n    }\n\n    public onParamsUpdated(params: IDateParams): void {\n        this.refresh(params);\n    }\n\n    public refresh(params: IDateParams): void {\n        this.params = params;\n        this.setParams(params);\n    }\n\n    public getDate(): Date | null {\n        return _parseDateTimeFromString(this.eDateInput.getValue());\n    }\n\n    public setDate(date: Date): void {\n        this.eDateInput.setValue(_serialiseDate(date, false));\n    }\n\n    public setInputPlaceholder(placeholder: string): void {\n        this.eDateInput.setInputPlaceholder(placeholder);\n    }\n\n    public setInputAriaLabel(ariaLabel: string): void {\n        this.eDateInput.setAriaLabel(ariaLabel);\n    }\n\n    public setDisabled(disabled: boolean): void {\n        this.eDateInput.setDisabled(disabled);\n    }\n\n    public afterGuiAttached(params?: IAfterGuiAttachedParams): void {\n        if (!params || !params.suppressFocus) {\n            this.eDateInput.getInputElement().focus();\n        }\n    }\n\n    private shouldUseBrowserDatePicker(params: IDateParams): boolean {\n        if (params.filterParams && params.filterParams.browserDatePicker != null) {\n            return params.filterParams.browserDatePicker;\n        }\n\n        return _isBrowserChrome() || _isBrowserFirefox() || (_isBrowserSafari() && _getSafariVersion() >= 14.1);\n    }\n}\n", "import { BeanStub } from '../../../context/beanStub';\nimport type { AgInputTextFieldParams } from '../../../widgets/agInputTextField';\nimport { AgInputTextField } from '../../../widgets/agInputTextField';\nimport { RefPlaceholder } from '../../../widgets/component';\nimport type { FloatingFilterInputService } from './iFloatingFilterInputService';\n\nexport class FloatingFilterTextInputService extends BeanStub implements FloatingFilterInputService {\n    private eFloatingFilterTextInput: AgInputTextField = RefPlaceholder;\n    private valueChangedListener: (e: KeyboardEvent) => void = () => {};\n\n    constructor(private params?: { config?: AgInputTextFieldParams }) {\n        super();\n    }\n\n    public setupGui(parentElement: HTMLElement): void {\n        this.eFloatingFilterTextInput = this.createManagedBean(new AgInputTextField(this.params?.config));\n\n        const eInput = this.eFloatingFilterTextInput.getGui();\n\n        parentElement.appendChild(eInput);\n\n        const listener = (e: KeyboardEvent) => this.valueChangedListener(e);\n        this.addManagedListeners(eInput, {\n            input: listener,\n            keydown: listener,\n        });\n    }\n\n    public setEditable(editable: boolean): void {\n        this.eFloatingFilterTextInput.setDisabled(!editable);\n    }\n\n    public setAutoComplete(autoComplete: boolean | string): void {\n        this.eFloatingFilterTextInput.setAutoComplete(autoComplete);\n    }\n\n    public getValue(): string | null | undefined {\n        return this.eFloatingFilterTextInput.getValue();\n    }\n\n    public setValue(value: string | null | undefined, silent?: boolean): void {\n        this.eFloatingFilterTextInput.setValue(value, silent);\n    }\n\n    public setValueChangedListener(listener: (e: KeyboardEvent) => void): void {\n        this.valueChangedListener = listener;\n    }\n\n    public setParams(params: { ariaLabel: string; autoComplete?: boolean | string }): void {\n        this.setAriaLabel(params.ariaLabel);\n\n        if (params.autoComplete !== undefined) {\n            this.setAutoComplete(params.autoComplete);\n        }\n    }\n\n    private setAriaLabel(ariaLabel: string): void {\n        this.eFloatingFilterTextInput.setInputAriaLabel(ariaLabel);\n    }\n}\n", "import { KeyCode } from '../../../constants/keyCode';\nimport type { FilterChangedEvent } from '../../../events';\nimport { _clearElement } from '../../../utils/dom';\nimport { _debounce } from '../../../utils/function';\nimport { RefPlaceholder } from '../../../widgets/component';\nimport type { NumberFilterModel } from '../../provided/number/iNumberFilter';\nimport type {\n    ITextInputFloatingFilterParams,\n    TextFilterModel,\n    TextFilterParams,\n} from '../../provided/text/iTextFilter';\nimport { trimInputForFilter } from '../../provided/text/textFilterUtils';\nimport type { FloatingFilterInputService } from './iFloatingFilterInputService';\nimport { getDebounceMs, isUseApplyButton } from './providedFilterUtils';\nimport { SimpleFloatingFilter } from './simpleFloatingFilter';\n\ntype ModelUnion = TextFilterModel | NumberFilterModel;\nexport abstract class TextInputFloatingFilter<M extends ModelUnion> extends SimpleFloatingFilter {\n    private readonly eFloatingFilterInputContainer: HTMLElement = RefPlaceholder;\n    private floatingFilterInputService: FloatingFilterInputService;\n\n    protected params: ITextInputFloatingFilterParams;\n\n    private applyActive: boolean;\n\n    protected abstract createFloatingFilterInputService(\n        params: ITextInputFloatingFilterParams\n    ): FloatingFilterInputService;\n\n    public postConstruct(): void {\n        this.setTemplate(/* html */ `\n            <div class=\"ag-floating-filter-input\" role=\"presentation\" data-ref=\"eFloatingFilterInputContainer\"></div>\n        `);\n    }\n\n    protected override getDefaultDebounceMs(): number {\n        return 500;\n    }\n\n    public onParentModelChanged(model: M, event: FilterChangedEvent): void {\n        if (this.isEventFromFloatingFilter(event) || this.isEventFromDataChange(event)) {\n            // if the floating filter triggered the change, it is already in sync.\n            // Data changes also do not affect provided text floating filters\n            return;\n        }\n\n        this.setLastTypeFromModel(model);\n        this.setEditable(this.canWeEditAfterModelFromParentFilter(model));\n        this.floatingFilterInputService.setValue(this.getFilterModelFormatter().getModelAsString(model));\n    }\n\n    public override init(params: ITextInputFloatingFilterParams): void {\n        this.setupFloatingFilterInputService(params);\n        super.init(params);\n        this.setTextInputParams(params);\n    }\n\n    private setupFloatingFilterInputService(params: ITextInputFloatingFilterParams): void {\n        this.floatingFilterInputService = this.createFloatingFilterInputService(params);\n        this.floatingFilterInputService.setupGui(this.eFloatingFilterInputContainer);\n    }\n\n    private setTextInputParams(params: ITextInputFloatingFilterParams): void {\n        this.params = params;\n\n        const autoComplete = params.browserAutoComplete ?? false;\n        this.floatingFilterInputService.setParams({\n            ariaLabel: this.getAriaLabel(params),\n            autoComplete,\n        });\n\n        this.applyActive = isUseApplyButton(this.params.filterParams);\n\n        if (!this.isReadOnly()) {\n            const debounceMs = getDebounceMs(this.params.filterParams, this.getDefaultDebounceMs());\n            const toDebounce: (e: KeyboardEvent) => void = _debounce(\n                this.syncUpWithParentFilter.bind(this),\n                debounceMs\n            );\n\n            this.floatingFilterInputService.setValueChangedListener(toDebounce);\n        }\n    }\n\n    public override onParamsUpdated(params: ITextInputFloatingFilterParams): void {\n        this.refresh(params);\n    }\n\n    public override refresh(params: ITextInputFloatingFilterParams): void {\n        super.refresh(params);\n        this.setTextInputParams(params);\n    }\n\n    protected recreateFloatingFilterInputService(params: ITextInputFloatingFilterParams): void {\n        const value = this.floatingFilterInputService.getValue();\n        _clearElement(this.eFloatingFilterInputContainer);\n        this.destroyBean(this.floatingFilterInputService);\n        this.setupFloatingFilterInputService(params);\n        this.floatingFilterInputService.setValue(value, true);\n    }\n\n    private syncUpWithParentFilter(e: KeyboardEvent): void {\n        const isEnterKey = e.key === KeyCode.ENTER;\n\n        if (this.applyActive && !isEnterKey) {\n            return;\n        }\n\n        let value = this.floatingFilterInputService.getValue();\n\n        if ((this.params.filterParams as TextFilterParams).trimInput) {\n            value = trimInputForFilter(value);\n            this.floatingFilterInputService.setValue(value, true); // ensure visible value is trimmed\n        }\n\n        this.params.parentFilterInstance((filterInstance) => {\n            if (filterInstance) {\n                // NumberFilter is typed as number, but actually receives string values\n                filterInstance.onFloatingFilterChanged(this.getLastType() || null, (value as never) || null);\n            }\n        });\n    }\n\n    protected setEditable(editable: boolean): void {\n        this.floatingFilterInputService.setEditable(editable);\n    }\n}\n", "import { BeanStub } from '../../../context/beanStub';\nimport { AgInputNumberField } from '../../../widgets/agInputNumberField';\nimport { AgInputTextField } from '../../../widgets/agInputTextField';\nimport { FloatingFilterTextInputService } from '../../floating/provided/floatingFilterTextInputService';\nimport type { FloatingFilterInputService } from '../../floating/provided/iFloatingFilterInputService';\nimport { TextInputFloatingFilter } from '../../floating/provided/textInputFloatingFilter';\nimport type { SimpleFilterModelFormatter } from '../simpleFilterModelFormatter';\nimport type { INumberFloatingFilterParams, NumberFilterModel, NumberFilterParams } from './iNumberFilter';\nimport { DEFAULT_NUMBER_FILTER_OPTIONS } from './numberFilterConstants';\nimport { NumberFilterModelFormatter } from './numberFilterModelFormatter';\nimport { getAllowedCharPattern } from './numberFilterUtils';\n\nclass FloatingFilterNumberInputService extends BeanStub implements FloatingFilterInputService {\n    private eFloatingFilterTextInput: AgInputTextField;\n    private eFloatingFilterNumberInput: AgInputNumberField;\n    private valueChangedListener: (e: KeyboardEvent) => void = () => {};\n\n    private numberInputActive = true;\n\n    public setupGui(parentElement: HTMLElement): void {\n        this.eFloatingFilterNumberInput = this.createManagedBean(new AgInputNumberField());\n        this.eFloatingFilterTextInput = this.createManagedBean(new AgInputTextField());\n\n        this.eFloatingFilterTextInput.setDisabled(true);\n\n        const eNumberInput = this.eFloatingFilterNumberInput.getGui();\n        const eTextInput = this.eFloatingFilterTextInput.getGui();\n\n        parentElement.appendChild(eNumberInput);\n        parentElement.appendChild(eTextInput);\n\n        this.setupListeners(eNumberInput, (e: KeyboardEvent) => this.valueChangedListener(e));\n        this.setupListeners(eTextInput, (e: KeyboardEvent) => this.valueChangedListener(e));\n    }\n\n    public setEditable(editable: boolean): void {\n        this.numberInputActive = editable;\n        this.eFloatingFilterNumberInput.setDisplayed(this.numberInputActive);\n        this.eFloatingFilterTextInput.setDisplayed(!this.numberInputActive);\n    }\n\n    public setAutoComplete(autoComplete: boolean | string): void {\n        this.eFloatingFilterNumberInput.setAutoComplete(autoComplete);\n        this.eFloatingFilterTextInput.setAutoComplete(autoComplete);\n    }\n\n    public getValue(): string | null | undefined {\n        return this.getActiveInputElement().getValue();\n    }\n\n    public setValue(value: string | null | undefined, silent?: boolean): void {\n        this.getActiveInputElement().setValue(value, silent);\n    }\n\n    private getActiveInputElement(): AgInputTextField | AgInputNumberField {\n        return this.numberInputActive ? this.eFloatingFilterNumberInput : this.eFloatingFilterTextInput;\n    }\n\n    public setValueChangedListener(listener: (e: KeyboardEvent) => void): void {\n        this.valueChangedListener = listener;\n    }\n\n    private setupListeners(element: HTMLElement, listener: (e: KeyboardEvent) => void): void {\n        this.addManagedListeners(element, {\n            input: listener,\n            keydown: listener,\n        });\n    }\n\n    public setParams(params: { ariaLabel: string; autoComplete?: boolean | string }): void {\n        this.setAriaLabel(params.ariaLabel);\n\n        if (params.autoComplete !== undefined) {\n            this.setAutoComplete(params.autoComplete);\n        }\n    }\n\n    private setAriaLabel(ariaLabel: string): void {\n        this.eFloatingFilterNumberInput.setInputAriaLabel(ariaLabel);\n        this.eFloatingFilterTextInput.setInputAriaLabel(ariaLabel);\n    }\n}\n\nexport class NumberFloatingFilter extends TextInputFloatingFilter<NumberFilterModel> {\n    private filterModelFormatter: SimpleFilterModelFormatter;\n    private allowedCharPattern: string | null;\n\n    public override init(params: INumberFloatingFilterParams): void {\n        super.init(params);\n        this.filterModelFormatter = new NumberFilterModelFormatter(\n            this.localeService,\n            this.optionsFactory,\n            (params.filterParams as NumberFilterParams)?.numberFormatter\n        );\n    }\n\n    public override onParamsUpdated(params: INumberFloatingFilterParams): void {\n        this.refresh(params);\n    }\n\n    public override refresh(params: INumberFloatingFilterParams): void {\n        const allowedCharPattern = getAllowedCharPattern(params.filterParams);\n        if (allowedCharPattern !== this.allowedCharPattern) {\n            this.recreateFloatingFilterInputService(params);\n        }\n        super.refresh(params);\n        this.filterModelFormatter.updateParams({ optionsFactory: this.optionsFactory });\n    }\n\n    protected getDefaultFilterOptions(): string[] {\n        return DEFAULT_NUMBER_FILTER_OPTIONS;\n    }\n\n    protected getFilterModelFormatter(): SimpleFilterModelFormatter {\n        return this.filterModelFormatter;\n    }\n\n    protected createFloatingFilterInputService(params: INumberFloatingFilterParams): FloatingFilterInputService {\n        this.allowedCharPattern = getAllowedCharPattern(params.filterParams);\n        if (this.allowedCharPattern) {\n            // need to use text input\n            return this.createManagedBean(\n                new FloatingFilterTextInputService({\n                    config: { allowedCharPattern: this.allowedCharPattern },\n                })\n            );\n        }\n        return this.createManagedBean(new FloatingFilterNumberInputService());\n    }\n}\n", "import { FloatingFilterTextInputService } from '../../floating/provided/floatingFilterTextInputService';\nimport type { FloatingFilterInputService } from '../../floating/provided/iFloatingFilterInputService';\nimport { TextInputFloatingFilter } from '../../floating/provided/textInputFloatingFilter';\nimport type { SimpleFilterModelFormatter } from '../simpleFilterModelFormatter';\nimport type { ITextFloatingFilterParams, TextFilterModel } from './iTextFilter';\nimport { DEFAULT_TEXT_FILTER_OPTIONS } from './textFilterConstants';\nimport { TextFilterModelFormatter } from './textFilterModelFormatter';\n\nexport class TextFloatingFilter extends TextInputFloatingFilter<TextFilterModel> {\n    private filterModelFormatter: SimpleFilterModelFormatter;\n\n    public override init(params: ITextFloatingFilterParams): void {\n        super.init(params);\n        this.filterModelFormatter = new TextFilterModelFormatter(this.localeService, this.optionsFactory);\n    }\n\n    public override onParamsUpdated(params: ITextFloatingFilterParams): void {\n        this.refresh(params);\n    }\n\n    public override refresh(params: ITextFloatingFilterParams): void {\n        super.refresh(params);\n        this.filterModelFormatter.updateParams({ optionsFactory: this.optionsFactory });\n    }\n\n    protected getDefaultFilterOptions(): string[] {\n        return DEFAULT_TEXT_FILTER_OPTIONS;\n    }\n\n    protected getFilterModelFormatter(): SimpleFilterModelFormatter {\n        return this.filterModelFormatter;\n    }\n\n    protected createFloatingFilterInputService(): FloatingFilterInputService {\n        return this.createManagedBean(new FloatingFilterTextInputService());\n    }\n}\n", "import type { BeanCollection } from '../context/context';\n\nexport function isQuickFilterPresent(beans: BeanCollection): boolean {\n    return !!beans.filterManager?.isQuickFilterPresent();\n}\n\nexport function getQuickFilter(beans: BeanCollection): string | undefined {\n    return beans.gos.get('quickFilterText');\n}\n\nexport function resetQuickFilter(beans: BeanCollection): void {\n    beans.filterManager?.resetQuickFilterCache();\n}\n", "import type { ColumnModel } from '../columns/columnModel';\nimport type { PivotResultColsService } from '../columns/pivotResultColsService';\nimport type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { GetQuickFilterTextParams } from '../entities/colDef';\nimport type { RowNode } from '../entities/rowNode';\nimport type { IRowModel } from '../interfaces/iRowModel';\nimport { _warnOnce } from '../utils/function';\nimport { _exists } from '../utils/generic';\nimport type { ValueService } from '../valueService/valueService';\n\nexport type QuickFilterServiceEvent = 'quickFilterChanged';\nexport class QuickFilterService extends BeanStub<QuickFilterServiceEvent> implements NamedBean {\n    beanName = 'quickFilterService' as const;\n\n    private valueService: ValueService;\n    private columnModel: ColumnModel;\n    private rowModel: IRowModel;\n    private pivotResultColsService: PivotResultColsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.valueService = beans.valueService;\n        this.columnModel = beans.columnModel;\n        this.rowModel = beans.rowModel;\n        this.pivotResultColsService = beans.pivotResultColsService;\n    }\n\n    // the columns the quick filter should use. this will be all primary columns plus the autoGroupColumns if any exist\n    private colsForQuickFilter: AgColumn[];\n\n    private quickFilter: string | null = null;\n    private quickFilterParts: string[] | null = null;\n    private parser?: (quickFilter: string) => string[];\n    private matcher?: (quickFilterParts: string[], rowQuickFilterAggregateText: string) => boolean;\n\n    public postConstruct(): void {\n        const resetListener = this.resetQuickFilterCache.bind(this);\n        this.addManagedEventListeners({\n            columnPivotModeChanged: resetListener,\n            newColumnsLoaded: resetListener,\n            columnRowGroupChanged: resetListener,\n            columnVisible: () => {\n                if (!this.gos.get('includeHiddenColumnsInQuickFilter')) {\n                    this.resetQuickFilterCache();\n                }\n            },\n        });\n\n        this.addManagedPropertyListener('quickFilterText', (e) => this.setQuickFilter(e.currentValue));\n        this.addManagedPropertyListeners(\n            ['includeHiddenColumnsInQuickFilter', 'applyQuickFilterBeforePivotOrAgg'],\n            () => this.onQuickFilterColumnConfigChanged()\n        );\n\n        this.quickFilter = this.parseQuickFilter(this.gos.get('quickFilterText'));\n        this.parser = this.gos.get('quickFilterParser');\n        this.matcher = this.gos.get('quickFilterMatcher');\n        this.setQuickFilterParts();\n\n        this.addManagedPropertyListeners(['quickFilterMatcher', 'quickFilterParser'], () =>\n            this.setQuickFilterParserAndMatcher()\n        );\n    }\n\n    // if we are using autoGroupCols, then they should be included for quick filter. this covers the\n    // following scenarios:\n    // a) user provides 'field' into autoGroupCol of normal grid, so now because a valid col to filter leafs on\n    // b) using tree data and user depends on autoGroupCol for first col, and we also want to filter on this\n    //    (tree data is a bit different, as parent rows can be filtered on, unlike row grouping)\n    public refreshQuickFilterCols(): void {\n        const pivotMode = this.columnModel.isPivotMode();\n        const groupAutoCols = this.columnModel.getAutoCols();\n        const providedCols = this.columnModel.getColDefCols();\n\n        let columnsForQuickFilter =\n            (pivotMode && !this.gos.get('applyQuickFilterBeforePivotOrAgg')\n                ? this.pivotResultColsService.getPivotResultCols()?.list\n                : providedCols) ?? [];\n        if (groupAutoCols) {\n            columnsForQuickFilter = columnsForQuickFilter.concat(groupAutoCols);\n        }\n        this.colsForQuickFilter = this.gos.get('includeHiddenColumnsInQuickFilter')\n            ? columnsForQuickFilter\n            : columnsForQuickFilter.filter((col) => col.isVisible() || col.isRowGroupActive());\n    }\n\n    public isQuickFilterPresent(): boolean {\n        return this.quickFilter !== null;\n    }\n\n    public doesRowPassQuickFilter(node: RowNode): boolean {\n        const usingCache = this.gos.get('cacheQuickFilter');\n\n        if (this.matcher) {\n            return this.doesRowPassQuickFilterMatcher(usingCache, node);\n        }\n\n        // each part must pass, if any fails, then the whole filter fails\n        return this.quickFilterParts!.every((part) =>\n            usingCache ? this.doesRowPassQuickFilterCache(node, part) : this.doesRowPassQuickFilterNoCache(node, part)\n        );\n    }\n\n    public resetQuickFilterCache(): void {\n        this.rowModel.forEachNode((node) => (node.quickFilterAggregateText = null));\n    }\n\n    private setQuickFilterParts(): void {\n        const { quickFilter, parser } = this;\n        if (quickFilter) {\n            this.quickFilterParts = parser ? parser(quickFilter) : quickFilter.split(' ');\n        } else {\n            this.quickFilterParts = null;\n        }\n    }\n\n    private parseQuickFilter(newFilter?: string): string | null {\n        if (!_exists(newFilter)) {\n            return null;\n        }\n\n        if (!this.gos.isRowModelType('clientSide')) {\n            _warnOnce('Quick filtering only works with the Client-Side Row Model');\n            return null;\n        }\n\n        return newFilter.toUpperCase();\n    }\n\n    private setQuickFilter(newFilter: string | undefined): void {\n        if (newFilter != null && typeof newFilter !== 'string') {\n            _warnOnce(`Grid option quickFilterText only supports string inputs, received: ${typeof newFilter}`);\n            return;\n        }\n\n        const parsedFilter = this.parseQuickFilter(newFilter);\n\n        if (this.quickFilter !== parsedFilter) {\n            this.quickFilter = parsedFilter;\n            this.setQuickFilterParts();\n            this.dispatchLocalEvent({ type: 'quickFilterChanged' });\n        }\n    }\n\n    private setQuickFilterParserAndMatcher(): void {\n        const parser = this.gos.get('quickFilterParser');\n        const matcher = this.gos.get('quickFilterMatcher');\n        const hasChanged = parser !== this.parser || matcher !== this.matcher;\n        this.parser = parser;\n        this.matcher = matcher;\n        if (hasChanged) {\n            this.setQuickFilterParts();\n            this.dispatchLocalEvent({ type: 'quickFilterChanged' });\n        }\n    }\n\n    private onQuickFilterColumnConfigChanged(): void {\n        this.refreshQuickFilterCols();\n        this.resetQuickFilterCache();\n        if (this.isQuickFilterPresent()) {\n            this.dispatchLocalEvent({ type: 'quickFilterChanged' });\n        }\n    }\n\n    private doesRowPassQuickFilterNoCache(node: RowNode, filterPart: string): boolean {\n        return this.colsForQuickFilter.some((column) => {\n            const part = this.getQuickFilterTextForColumn(column, node);\n\n            return _exists(part) && part.indexOf(filterPart) >= 0;\n        });\n    }\n\n    private doesRowPassQuickFilterCache(node: RowNode, filterPart: string): boolean {\n        this.checkGenerateQuickFilterAggregateText(node);\n\n        return node.quickFilterAggregateText!.indexOf(filterPart) >= 0;\n    }\n\n    private doesRowPassQuickFilterMatcher(usingCache: boolean, node: RowNode): boolean {\n        let quickFilterAggregateText: string;\n        if (usingCache) {\n            this.checkGenerateQuickFilterAggregateText(node);\n            quickFilterAggregateText = node.quickFilterAggregateText!;\n        } else {\n            quickFilterAggregateText = this.getQuickFilterAggregateText(node);\n        }\n        const { quickFilterParts, matcher } = this;\n        return matcher!(quickFilterParts!, quickFilterAggregateText);\n    }\n\n    private checkGenerateQuickFilterAggregateText(node: RowNode): void {\n        if (!node.quickFilterAggregateText) {\n            node.quickFilterAggregateText = this.getQuickFilterAggregateText(node);\n        }\n    }\n\n    private getQuickFilterTextForColumn(column: AgColumn, node: RowNode): string {\n        let value = this.valueService.getValue(column, node, true);\n        const colDef = column.getColDef();\n\n        if (colDef.getQuickFilterText) {\n            const params: GetQuickFilterTextParams = this.gos.addGridCommonParams({\n                value,\n                node,\n                data: node.data,\n                column,\n                colDef,\n            });\n\n            value = colDef.getQuickFilterText(params);\n        }\n\n        return _exists(value) ? value.toString().toUpperCase() : null;\n    }\n\n    private getQuickFilterAggregateText(node: RowNode): string {\n        const stringParts: string[] = [];\n\n        this.colsForQuickFilter.forEach((column) => {\n            const part = this.getQuickFilterTextForColumn(column, node);\n\n            if (_exists(part)) {\n                stringParts.push(part);\n            }\n        });\n\n        return stringParts.join('\\n');\n    }\n}\n", "import { HeaderFilterCellCtrl } from '../headerRendering/cells/floatingFilter/headerFilterCellCtrl';\nimport type { Module } from '../interfaces/iModule';\nimport { VERSION } from '../version';\nimport {\n    destroyFilter,\n    getColumnFilterInstance,\n    getColumnFilterModel,\n    getFilterInstance,\n    getFilterModel,\n    isColumnFilterPresent,\n    setColumnFilterModel,\n    setFilterModel,\n    showColumnFilter,\n} from './columnFilterApi';\nimport { ColumnFilterService } from './columnFilterService';\nimport { isAnyFilterPresent, onFilterChanged } from './filterApi';\nimport { FilterManager } from './filterManager';\nimport { ReadOnlyFloatingFilter } from './floating/provided/readOnlyFloatingFilter';\nimport { DateFilter } from './provided/date/dateFilter';\nimport { DateFloatingFilter } from './provided/date/dateFloatingFilter';\nimport { DefaultDateComponent } from './provided/date/defaultDateComponent';\nimport { NumberFilter } from './provided/number/numberFilter';\nimport { NumberFloatingFilter } from './provided/number/numberFloatingFilter';\nimport { TextFilter } from './provided/text/textFilter';\nimport { TextFloatingFilter } from './provided/text/textFloatingFilter';\nimport { getQuickFilter, isQuickFilterPresent, resetQuickFilter } from './quickFilterApi';\nimport { QuickFilterService } from './quickFilterService';\n\nexport const FilterCoreModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/filter-core',\n    beans: [FilterManager],\n};\n\nexport const FilterApiModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/filter-api',\n    apiFunctions: {\n        isAnyFilterPresent,\n        onFilterChanged,\n    },\n    dependantModules: [FilterCoreModule],\n};\n\nexport const ColumnFilterModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/column-filter',\n    beans: [ColumnFilterService],\n    dependantModules: [FilterCoreModule],\n};\n\nexport const ColumnFilterApiModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/column-filter-api',\n    apiFunctions: {\n        isColumnFilterPresent,\n        getFilterInstance,\n        getColumnFilterInstance,\n        destroyFilter,\n        setFilterModel,\n        getFilterModel,\n        getColumnFilterModel,\n        setColumnFilterModel,\n        showColumnFilter,\n    },\n    dependantModules: [ColumnFilterModule, FilterApiModule],\n};\n\nexport const FloatingFilterCoreModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/floating-filter-core',\n    controllers: [{ name: 'headerFilterCell', classImp: HeaderFilterCellCtrl as any }],\n    dependantModules: [ColumnFilterModule],\n};\n\nexport const FloatingFilterModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/floating-filter',\n    dependantModules: [FloatingFilterCoreModule, ColumnFilterModule],\n};\n\nexport const ReadOnlyFloatingFilterModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/read-only-floating-filter',\n    userComponents: [{ name: 'agReadOnlyFloatingFilter', classImp: ReadOnlyFloatingFilter }],\n    dependantModules: [FloatingFilterCoreModule],\n};\n\nexport const SimpleFilterModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/simple-filter',\n    dependantModules: [ColumnFilterModule],\n    userComponents: [\n        { name: 'agTextColumnFilter', classImp: TextFilter },\n        { name: 'agNumberColumnFilter', classImp: NumberFilter },\n        { name: 'agDateColumnFilter', classImp: DateFilter },\n        { name: 'agDateInput', classImp: DefaultDateComponent },\n    ],\n};\n\nexport const SimpleFloatingFilterModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/simple-floating-filter',\n    dependantModules: [SimpleFilterModule, FloatingFilterCoreModule],\n    userComponents: [\n        { name: 'agTextColumnFloatingFilter', classImp: TextFloatingFilter },\n        { name: 'agNumberColumnFloatingFilter', classImp: NumberFloatingFilter },\n        { name: 'agDateColumnFloatingFilter', classImp: DateFloatingFilter },\n    ],\n};\n\nexport const QuickFilterCoreModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/quick-filter-core',\n    beans: [QuickFilterService],\n    dependantModules: [FilterCoreModule],\n};\n\nexport const QuickFilterApiModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/quick-filter-api',\n    apiFunctions: {\n        isQuickFilterPresent,\n        getQuickFilter,\n        resetQuickFilter,\n    },\n    dependantModules: [QuickFilterCoreModule],\n};\n\nexport const QuickFilterModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/quick-filter',\n    dependantModules: [QuickFilterCoreModule, QuickFilterApiModule],\n};\n\nexport const FilterModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/filter',\n    dependantModules: [\n        SimpleFloatingFilterModule,\n        ReadOnlyFloatingFilterModule,\n        QuickFilterModule,\n        ColumnFilterApiModule,\n    ],\n};\n", "import { Component } from '../../../widgets/component';\nimport type { AbstractHeaderCellCtrl } from './abstractHeaderCellCtrl';\n\nexport abstract class AbstractHeaderCellComp<T extends AbstractHeaderCellCtrl> extends Component {\n    protected ctrl: T;\n\n    constructor(template: string, ctrl: T) {\n        super(template);\n        this.ctrl = ctrl;\n    }\n\n    public getCtrl(): T {\n        return this.ctrl;\n    }\n}\n", "import type { UserCompDetails } from '../../../components/framework/userComponentFactory';\nimport type { IFloatingFilterComp } from '../../../filter/floating/floatingFilter';\nimport { _setDisplayed } from '../../../utils/dom';\nimport type { AgPromise } from '../../../utils/promise';\nimport { RefPlaceholder } from '../../../widgets/component';\nimport { AbstractHeaderCellComp } from '../abstractCell/abstractHeaderCellComp';\nimport type { HeaderFilterCellCtrl } from './headerFilterCellCtrl';\nimport type { IHeaderFilterCellComp } from './iHeaderFilterCellComp';\n\nexport class HeaderFilterCellComp extends AbstractHeaderCellComp<HeaderFilterCellCtrl> {\n    private readonly eFloatingFilterBody: HTMLElement = RefPlaceholder;\n    private readonly eButtonWrapper: HTMLElement = RefPlaceholder;\n    private readonly eButtonShowMainFilter: HTMLElement = RefPlaceholder;\n\n    private floatingFilterComp: IFloatingFilterComp | undefined;\n    private compPromise: AgPromise<IFloatingFilterComp> | null;\n\n    constructor(ctrl: HeaderFilterCellCtrl) {\n        super(\n            /* html */ `<div class=\"ag-header-cell ag-floating-filter\" role=\"gridcell\">\n            <div data-ref=\"eFloatingFilterBody\" role=\"presentation\"></div>\n            <div class=\"ag-floating-filter-button ag-hidden\" data-ref=\"eButtonWrapper\" role=\"presentation\">\n                <button type=\"button\" class=\"ag-button ag-floating-filter-button-button\" data-ref=\"eButtonShowMainFilter\" tabindex=\"-1\"></button>\n            </div>\n        </div>`,\n            ctrl\n        );\n    }\n\n    public postConstruct(): void {\n        const eGui = this.getGui();\n\n        const compProxy: IHeaderFilterCellComp = {\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\n            addOrRemoveBodyCssClass: (cssClassName, on) => this.eFloatingFilterBody.classList.toggle(cssClassName, on),\n            setButtonWrapperDisplayed: (displayed) => _setDisplayed(this.eButtonWrapper, displayed),\n            setCompDetails: (compDetails) => this.setCompDetails(compDetails),\n            getFloatingFilterComp: () => this.compPromise,\n            setWidth: (width) => (eGui.style.width = width),\n            setMenuIcon: (eIcon) => this.eButtonShowMainFilter.appendChild(eIcon),\n        };\n\n        this.ctrl.setComp(compProxy, eGui, this.eButtonShowMainFilter, this.eFloatingFilterBody);\n    }\n\n    private setCompDetails(compDetails?: UserCompDetails | null): void {\n        if (!compDetails) {\n            this.destroyFloatingFilterComp();\n            this.compPromise = null;\n            return;\n        }\n        // because we are providing defaultFloatingFilterType, we know it will never be undefined;\n        this.compPromise = compDetails.newAgStackInstance();\n        this.compPromise.then((comp) => this.afterCompCreated(comp));\n    }\n\n    public override destroy(): void {\n        this.destroyFloatingFilterComp();\n        super.destroy();\n    }\n\n    private destroyFloatingFilterComp(): void {\n        if (this.floatingFilterComp) {\n            this.eFloatingFilterBody.removeChild(this.floatingFilterComp.getGui());\n            this.floatingFilterComp = this.destroyBean(this.floatingFilterComp);\n        }\n    }\n\n    private afterCompCreated(comp: IFloatingFilterComp | null): void {\n        if (!comp) {\n            return;\n        }\n\n        if (!this.isAlive()) {\n            this.destroyBean(comp);\n            return;\n        }\n\n        this.destroyFloatingFilterComp();\n\n        this.floatingFilterComp = comp;\n        this.eFloatingFilterBody.appendChild(comp.getGui());\n\n        if (comp.afterGuiAttached) {\n            comp.afterGuiAttached();\n        }\n    }\n}\n", "import type { UserCompDetails } from '../../../components/framework/userComponentFactory';\nimport type { AgColumn } from '../../../entities/agColumn';\nimport type { ColumnPinnedType } from '../../../interfaces/iColumn';\nimport { _removeAriaSort, _setAriaSort } from '../../../utils/aria';\nimport { RefPlaceholder } from '../../../widgets/component';\nimport { AbstractHeaderCellComp } from '../abstractCell/abstractHeaderCellComp';\nimport type { HeaderCellCtrl, IHeaderCellComp } from './headerCellCtrl';\nimport type { IHeaderComp } from './headerComp';\n\nexport class HeaderCellComp extends AbstractHeaderCellComp<HeaderCellCtrl> {\n    private readonly eResize: HTMLElement = RefPlaceholder;\n    private readonly eHeaderCompWrapper: HTMLElement = RefPlaceholder;\n\n    protected readonly column: AgColumn;\n    protected readonly pinned: ColumnPinnedType;\n\n    private headerComp: IHeaderComp | undefined;\n    private headerCompGui: HTMLElement | undefined;\n    private headerCompVersion = 0;\n\n    constructor(ctrl: HeaderCellCtrl) {\n        super(\n            /* html */ `<div class=\"ag-header-cell\" role=\"columnheader\">\n            <div data-ref=\"eResize\" class=\"ag-header-cell-resize\" role=\"presentation\"></div>\n            <div data-ref=\"eHeaderCompWrapper\" class=\"ag-header-cell-comp-wrapper\" role=\"presentation\"></div>\n        </div>`,\n            ctrl\n        );\n        this.column = ctrl.getColumnGroupChild() as AgColumn;\n        this.pinned = ctrl.getPinned();\n    }\n\n    public postConstruct(): void {\n        const eGui = this.getGui();\n\n        const setAttribute = (name: string, value: string | null | undefined) => {\n            if (value != null && value != '') {\n                eGui.setAttribute(name, value);\n            } else {\n                eGui.removeAttribute(name);\n            }\n        };\n\n        setAttribute('col-id', this.column.getColId());\n\n        const compProxy: IHeaderCellComp = {\n            setWidth: (width) => (eGui.style.width = width),\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\n            setAriaSort: (sort) => (sort ? _setAriaSort(eGui, sort) : _removeAriaSort(eGui)),\n            setUserCompDetails: (compDetails) => this.setUserCompDetails(compDetails),\n            getUserCompInstance: () => this.headerComp,\n        };\n\n        this.ctrl.setComp(compProxy, this.getGui(), this.eResize, this.eHeaderCompWrapper);\n\n        const selectAllGui = this.ctrl.getSelectAllGui();\n        this.eResize.insertAdjacentElement('afterend', selectAllGui);\n    }\n\n    public override destroy(): void {\n        this.destroyHeaderComp();\n        super.destroy();\n    }\n\n    private destroyHeaderComp(): void {\n        if (this.headerComp) {\n            this.eHeaderCompWrapper.removeChild(this.headerCompGui!);\n            this.headerComp = this.destroyBean(this.headerComp);\n            this.headerCompGui = undefined;\n        }\n    }\n\n    private setUserCompDetails(compDetails: UserCompDetails): void {\n        this.headerCompVersion++;\n\n        const versionCopy = this.headerCompVersion;\n\n        compDetails.newAgStackInstance()!.then((comp) => this.afterCompCreated(versionCopy, comp));\n    }\n\n    private afterCompCreated(version: number, headerComp: IHeaderComp): void {\n        if (version != this.headerCompVersion || !this.isAlive()) {\n            this.destroyBean(headerComp);\n            return;\n        }\n\n        this.destroyHeaderComp();\n\n        this.headerComp = headerComp;\n        this.headerCompGui = headerComp.getGui();\n        this.eHeaderCompWrapper.appendChild(this.headerCompGui);\n        this.ctrl.setDragSource(this.getGui()!);\n    }\n}\n", "import type { UserCompDetails } from '../../../components/framework/userComponentFactory';\nimport { _setDisplayed } from '../../../utils/dom';\nimport { RefPlaceholder } from '../../../widgets/component';\nimport { AbstractHeaderCellComp } from '../abstractCell/abstractHeaderCellComp';\nimport type { HeaderGroupCellCtrl, IHeaderGroupCellComp } from './headerGroupCellCtrl';\nimport type { IHeaderGroupComp } from './headerGroupComp';\n\nexport class HeaderGroupCellComp extends AbstractHeaderCellComp<HeaderGroupCellCtrl> {\n    private eResize: HTMLElement = RefPlaceholder;\n\n    private headerGroupComp: IHeaderGroupComp | undefined;\n\n    constructor(ctrl: HeaderGroupCellCtrl) {\n        super(\n            /* html */ `<div class=\"ag-header-group-cell\" role=\"columnheader\">\n            <div data-ref=\"eResize\" class=\"ag-header-cell-resize\" role=\"presentation\"></div>\n        </div>`,\n            ctrl\n        );\n    }\n\n    public postConstruct(): void {\n        const eGui = this.getGui();\n\n        const setAttribute = (key: string, value: string | undefined) =>\n            value != undefined ? eGui.setAttribute(key, value) : eGui.removeAttribute(key);\n\n        eGui.setAttribute('col-id', this.ctrl.getColId());\n\n        const compProxy: IHeaderGroupCellComp = {\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\n            setResizableDisplayed: (displayed) => _setDisplayed(this.eResize, displayed),\n            setWidth: (width) => (eGui.style.width = width),\n            setAriaExpanded: (expanded: 'true' | 'false' | undefined) => setAttribute('aria-expanded', expanded),\n            setUserCompDetails: (details) => this.setUserCompDetails(details),\n            getUserCompInstance: () => this.headerGroupComp,\n        };\n\n        this.ctrl.setComp(compProxy, eGui, this.eResize);\n    }\n\n    private setUserCompDetails(details: UserCompDetails): void {\n        details.newAgStackInstance()!.then((comp) => this.afterHeaderCompCreated(comp));\n    }\n\n    private afterHeaderCompCreated(headerGroupComp: IHeaderGroupComp): void {\n        const destroyFunc = () => this.destroyBean(headerGroupComp);\n\n        if (!this.isAlive()) {\n            destroyFunc();\n            return;\n        }\n\n        const eGui = this.getGui();\n        const eHeaderGroupGui = headerGroupComp.getGui();\n\n        eGui.appendChild(eHeaderGroupGui);\n        this.addDestroyFunc(destroyFunc);\n\n        this.headerGroupComp = headerGroupComp;\n        this.ctrl.setDragSource(eGui);\n    }\n}\n", "import { _setAriaRowIndex } from '../../utils/aria';\nimport { _setDomChildOrder } from '../../utils/dom';\nimport { _getAllValuesInObject, _iterateObject } from '../../utils/object';\nimport { Component } from '../../widgets/component';\nimport type { AbstractHeaderCellComp } from '../cells/abstractCell/abstractHeaderCellComp';\nimport type { AbstractHeaderCellCtrl, HeaderCellCtrlInstanceId } from '../cells/abstractCell/abstractHeaderCellCtrl';\nimport { HeaderCellComp } from '../cells/column/headerCellComp';\nimport type { HeaderCellCtrl } from '../cells/column/headerCellCtrl';\nimport { HeaderGroupCellComp } from '../cells/columnGroup/headerGroupCellComp';\nimport type { HeaderGroupCellCtrl } from '../cells/columnGroup/headerGroupCellCtrl';\nimport { HeaderFilterCellComp } from '../cells/floatingFilter/headerFilterCellComp';\nimport type { HeaderFilterCellCtrl } from '../cells/floatingFilter/headerFilterCellCtrl';\nimport type { HeaderRowCtrl, IHeaderRowComp } from './headerRowCtrl';\n\nexport enum HeaderRowType {\n    COLUMN_GROUP = 'group',\n    COLUMN = 'column',\n    FLOATING_FILTER = 'filter',\n}\n\nexport class HeaderRowComp extends Component {\n    private ctrl: HeaderRowCtrl;\n\n    private headerComps: { [key: HeaderCellCtrlInstanceId]: AbstractHeaderCellComp<AbstractHeaderCellCtrl> } = {};\n\n    constructor(ctrl: HeaderRowCtrl) {\n        super();\n\n        this.ctrl = ctrl;\n        this.setTemplate(/* html */ `<div class=\"${this.ctrl.getHeaderRowClass()}\" role=\"row\"></div>`);\n    }\n\n    public postConstruct(): void {\n        _setAriaRowIndex(this.getGui(), this.ctrl.getAriaRowIndex());\n\n        const compProxy: IHeaderRowComp = {\n            setHeight: (height) => (this.getGui().style.height = height),\n            setTop: (top) => (this.getGui().style.top = top),\n            setHeaderCtrls: (ctrls, forceOrder) => this.setHeaderCtrls(ctrls, forceOrder),\n            setWidth: (width) => (this.getGui().style.width = width),\n        };\n\n        this.ctrl.setComp(compProxy);\n    }\n\n    public override destroy(): void {\n        this.setHeaderCtrls([], false);\n        super.destroy();\n    }\n\n    private setHeaderCtrls(ctrls: AbstractHeaderCellCtrl[], forceOrder: boolean): void {\n        if (!this.isAlive()) {\n            return;\n        }\n\n        const oldComps = this.headerComps;\n        this.headerComps = {};\n\n        ctrls.forEach((ctrl) => {\n            const id = ctrl.getInstanceId();\n            let comp = oldComps[id];\n            delete oldComps[id];\n\n            if (comp == null) {\n                comp = this.createHeaderComp(ctrl);\n                this.getGui().appendChild(comp.getGui());\n            }\n\n            this.headerComps[id] = comp;\n        });\n\n        _iterateObject(oldComps, (id: string, comp: AbstractHeaderCellComp<AbstractHeaderCellCtrl>) => {\n            this.getGui().removeChild(comp.getGui());\n            this.destroyBean(comp);\n        });\n\n        if (forceOrder) {\n            const comps = _getAllValuesInObject(this.headerComps);\n            // ordering the columns by left position orders them in the order they appear on the screen\n            comps.sort(\n                (\n                    a: AbstractHeaderCellComp<AbstractHeaderCellCtrl>,\n                    b: AbstractHeaderCellComp<AbstractHeaderCellCtrl>\n                ) => {\n                    const leftA = a.getCtrl().getColumnGroupChild().getLeft()!;\n                    const leftB = b.getCtrl().getColumnGroupChild().getLeft()!;\n                    return leftA - leftB;\n                }\n            );\n            const elementsInOrder = comps.map((c) => c.getGui());\n            _setDomChildOrder(this.getGui(), elementsInOrder);\n        }\n    }\n\n    private createHeaderComp(headerCtrl: AbstractHeaderCellCtrl): AbstractHeaderCellComp<AbstractHeaderCellCtrl> {\n        let result: AbstractHeaderCellComp<AbstractHeaderCellCtrl>;\n\n        switch (this.ctrl.getType()) {\n            case HeaderRowType.COLUMN_GROUP:\n                result = new HeaderGroupCellComp(headerCtrl as HeaderGroupCellCtrl);\n                break;\n            case HeaderRowType.FLOATING_FILTER:\n                result = new HeaderFilterCellComp(headerCtrl as HeaderFilterCellCtrl);\n                break;\n            default:\n                result = new HeaderCellComp(headerCtrl as HeaderCellCtrl);\n                break;\n        }\n\n        this.createBean(result);\n        result.setParentComponent(this);\n\n        return result;\n    }\n}\n", "import type { ColumnModel } from '../../columns/columnModel';\nimport type { VisibleColsService } from '../../columns/visibleColsService';\nimport type { NamedBean } from '../../context/bean';\nimport { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { CtrlsService } from '../../ctrlsService';\nimport type { AgColumn } from '../../entities/agColumn';\nimport type { AgColumnGroup } from '../../entities/agColumnGroup';\nimport { isColumnGroup } from '../../entities/agColumnGroup';\nimport type { FocusService } from '../../focusService';\nimport type { GridBodyCtrl } from '../../gridBodyComp/gridBodyCtrl';\nimport type { Column, ColumnGroup } from '../../interfaces/iColumn';\nimport { _last } from '../../utils/array';\nimport { HeaderRowType } from '../row/headerRowComp';\nimport type { HeaderPosition, HeaderPositionUtils } from './headerPosition';\n\nexport enum HeaderNavigationDirection {\n    UP,\n    DOWN,\n    LEFT,\n    RIGHT,\n}\n\nexport class HeaderNavigationService extends BeanStub implements NamedBean {\n    beanName = 'headerNavigationService' as const;\n\n    private focusService: FocusService;\n    private headerPositionUtils: HeaderPositionUtils;\n    private ctrlsService: CtrlsService;\n    private columnModel: ColumnModel;\n    private visibleColService: VisibleColsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.focusService = beans.focusService;\n        this.headerPositionUtils = beans.headerPositionUtils;\n        this.ctrlsService = beans.ctrlsService;\n        this.columnModel = beans.columnModel;\n        this.visibleColService = beans.visibleColsService;\n    }\n\n    private gridBodyCon: GridBodyCtrl;\n    private currentHeaderRowWithoutSpan: number = -1;\n\n    public postConstruct(): void {\n        this.ctrlsService.whenReady((p) => {\n            this.gridBodyCon = p.gridBodyCtrl;\n        });\n\n        const eDocument = this.gos.getDocument();\n        this.addManagedElementListeners(eDocument, { mousedown: () => this.setCurrentHeaderRowWithoutSpan(-1) });\n    }\n\n    public getHeaderRowCount(): number {\n        const centerHeaderContainer = this.ctrlsService.getHeaderRowContainerCtrl();\n        return centerHeaderContainer ? centerHeaderContainer.getRowCount() : 0;\n    }\n\n    public getHeaderPositionForColumn(\n        colKey: string | Column | ColumnGroup,\n        floatingFilter: boolean\n    ): HeaderPosition | null {\n        let column: AgColumn | AgColumnGroup | null;\n\n        if (typeof colKey === 'string') {\n            column = this.columnModel.getCol(colKey);\n            if (!column) {\n                column = this.visibleColService.getColumnGroup(colKey);\n            }\n        } else {\n            column = colKey as AgColumn | AgColumnGroup;\n        }\n\n        if (!column) {\n            return null;\n        }\n\n        const centerHeaderContainer = this.ctrlsService.getHeaderRowContainerCtrl();\n        const allCtrls = centerHeaderContainer.getAllCtrls();\n        const isFloatingFilterVisible = _last(allCtrls).getType() === HeaderRowType.FLOATING_FILTER;\n        const headerRowCount = this.getHeaderRowCount() - 1;\n\n        let row = -1;\n        let col: AgColumn | AgColumnGroup | null = column;\n\n        while (col) {\n            row++;\n            col = col.getParent();\n        }\n\n        let headerRowIndex = row;\n\n        if (floatingFilter && isFloatingFilterVisible && headerRowIndex === headerRowCount - 1) {\n            headerRowIndex++;\n        }\n\n        return headerRowIndex === -1\n            ? null\n            : {\n                  headerRowIndex,\n                  column,\n              };\n    }\n\n    /*\n     * This method navigates grid header vertically\n     * @return {boolean} true to preventDefault on the event that caused this navigation.\n     */\n    public navigateVertically(\n        direction: HeaderNavigationDirection,\n        fromHeader: HeaderPosition | null,\n        event: KeyboardEvent\n    ): boolean {\n        if (!fromHeader) {\n            fromHeader = this.focusService.getFocusedHeader();\n        }\n\n        if (!fromHeader) {\n            return false;\n        }\n\n        const { headerRowIndex } = fromHeader;\n        const column = fromHeader.column as AgColumn;\n        const rowLen = this.getHeaderRowCount();\n        const isUp = direction === HeaderNavigationDirection.UP;\n\n        let {\n            headerRowIndex: nextRow,\n            column: nextFocusColumn,\n            // eslint-disable-next-line prefer-const\n            headerRowIndexWithoutSpan,\n        } = isUp\n            ? this.headerPositionUtils.getColumnVisibleParent(column, headerRowIndex)\n            : this.headerPositionUtils.getColumnVisibleChild(column, headerRowIndex);\n\n        let skipColumn = false;\n\n        if (nextRow < 0) {\n            nextRow = 0;\n            nextFocusColumn = column;\n            skipColumn = true;\n        }\n\n        if (nextRow >= rowLen) {\n            nextRow = -1; // -1 indicates the focus should move to grid rows.\n            this.setCurrentHeaderRowWithoutSpan(-1);\n        } else if (headerRowIndexWithoutSpan !== undefined) {\n            this.currentHeaderRowWithoutSpan = headerRowIndexWithoutSpan;\n        }\n\n        if (!skipColumn && !nextFocusColumn) {\n            return false;\n        }\n\n        return this.focusService.focusHeaderPosition({\n            headerPosition: { headerRowIndex: nextRow, column: nextFocusColumn! },\n            allowUserOverride: true,\n            event,\n        });\n    }\n\n    public setCurrentHeaderRowWithoutSpan(row: number): void {\n        this.currentHeaderRowWithoutSpan = row;\n    }\n\n    /*\n     * This method navigates grid header horizontally\n     * @return {boolean} true to preventDefault on the event that caused this navigation.\n     */\n    public navigateHorizontally(\n        direction: HeaderNavigationDirection,\n        fromTab: boolean = false,\n        event: KeyboardEvent\n    ): boolean {\n        const focusedHeader = this.focusService.getFocusedHeader()!;\n        const isLeft = direction === HeaderNavigationDirection.LEFT;\n        const isRtl = this.gos.get('enableRtl');\n        let nextHeader: HeaderPosition;\n        let normalisedDirection: 'Before' | 'After';\n\n        // either navigating to the left or isRtl (cannot be both)\n        if (this.currentHeaderRowWithoutSpan !== -1) {\n            focusedHeader.headerRowIndex = this.currentHeaderRowWithoutSpan;\n        } else {\n            this.currentHeaderRowWithoutSpan = focusedHeader.headerRowIndex;\n        }\n\n        if (isLeft !== isRtl) {\n            normalisedDirection = 'Before';\n            nextHeader = this.headerPositionUtils.findHeader(focusedHeader, normalisedDirection)!;\n        } else {\n            normalisedDirection = 'After';\n            nextHeader = this.headerPositionUtils.findHeader(focusedHeader, normalisedDirection)!;\n        }\n\n        if (nextHeader || !fromTab) {\n            return this.focusService.focusHeaderPosition({\n                headerPosition: nextHeader,\n                direction: normalisedDirection,\n                fromTab,\n                allowUserOverride: true,\n                event,\n            });\n        } else if (fromTab) {\n            const userFunc = this.gos.getCallback('tabToNextHeader');\n            if (userFunc) {\n                return this.focusService.focusHeaderPositionFromUserFunc({\n                    userFunc,\n                    headerPosition: nextHeader,\n                    direction: normalisedDirection,\n                });\n            }\n        }\n\n        return this.focusNextHeaderRow(focusedHeader, normalisedDirection, event);\n    }\n\n    private focusNextHeaderRow(\n        focusedHeader: HeaderPosition,\n        direction: 'Before' | 'After',\n        event: KeyboardEvent\n    ): boolean {\n        const currentIndex = focusedHeader.headerRowIndex;\n        let nextPosition: HeaderPosition | null = null;\n        let nextRowIndex: number;\n\n        if (direction === 'Before') {\n            if (currentIndex > 0) {\n                nextRowIndex = currentIndex - 1;\n                this.currentHeaderRowWithoutSpan -= 1;\n                nextPosition = this.headerPositionUtils.findColAtEdgeForHeaderRow(nextRowIndex, 'end')!;\n            }\n        } else {\n            nextRowIndex = currentIndex + 1;\n            if (this.currentHeaderRowWithoutSpan < this.getHeaderRowCount()) {\n                this.currentHeaderRowWithoutSpan += 1;\n            } else {\n                this.setCurrentHeaderRowWithoutSpan(-1);\n            }\n            nextPosition = this.headerPositionUtils.findColAtEdgeForHeaderRow(nextRowIndex, 'start')!;\n        }\n\n        if (!nextPosition) {\n            return false;\n        }\n\n        const { column, headerRowIndex } = this.headerPositionUtils.getHeaderIndexToFocus(\n            nextPosition.column as AgColumn,\n            nextPosition?.headerRowIndex\n        );\n\n        return this.focusService.focusHeaderPosition({\n            headerPosition: { column, headerRowIndex },\n            direction,\n            fromTab: true,\n            allowUserOverride: true,\n            event,\n        });\n    }\n\n    public scrollToColumn(column: AgColumn | AgColumnGroup, direction: 'Before' | 'After' | null = 'After'): void {\n        if (column.getPinned()) {\n            return;\n        }\n\n        let columnToScrollTo: AgColumn;\n\n        if (isColumnGroup(column)) {\n            const columns = column.getDisplayedLeafColumns();\n            columnToScrollTo = direction === 'Before' ? _last(columns) : columns[0];\n        } else {\n            columnToScrollTo = column;\n        }\n\n        this.gridBodyCon.getScrollFeature().ensureColumnVisible(columnToScrollTo);\n    }\n}\n", "import type { ColumnModel } from '../columns/columnModel';\nimport type { VisibleColsService } from '../columns/visibleColsService';\nimport { KeyCode } from '../constants/keyCode';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { CtrlsService } from '../ctrlsService';\nimport type { FilterManager } from '../filter/filterManager';\nimport type { FocusService } from '../focusService';\nimport type { MenuService } from '../misc/menuService';\nimport { _isIOSUserAgent } from '../utils/browser';\nimport { _exists } from '../utils/generic';\nimport { ManagedFocusFeature } from '../widgets/managedFocusFeature';\nimport type { LongTapEvent } from '../widgets/touchListener';\nimport { TouchListener } from '../widgets/touchListener';\nimport type { HeaderNavigationService } from './common/headerNavigationService';\nimport { HeaderNavigationDirection } from './common/headerNavigationService';\n\nexport interface IGridHeaderComp {\n    addOrRemoveCssClass(cssClassName: string, on: boolean): void;\n    setHeightAndMinHeight(height: string): void;\n}\n\nexport class GridHeaderCtrl extends BeanStub {\n    private headerNavigationService: HeaderNavigationService;\n    private focusService: FocusService;\n    private columnModel: ColumnModel;\n    private visibleColsService: VisibleColsService;\n    private ctrlsService: CtrlsService;\n    private filterManager?: FilterManager;\n    private menuService: MenuService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.headerNavigationService = beans.headerNavigationService;\n        this.focusService = beans.focusService;\n        this.columnModel = beans.columnModel;\n        this.visibleColsService = beans.visibleColsService;\n        this.ctrlsService = beans.ctrlsService;\n        this.filterManager = beans.filterManager;\n        this.menuService = beans.menuService;\n    }\n\n    private comp: IGridHeaderComp;\n    private eGui: HTMLElement;\n    private headerHeight: number;\n\n    public setComp(comp: IGridHeaderComp, eGui: HTMLElement, eFocusableElement: HTMLElement): void {\n        this.comp = comp;\n        this.eGui = eGui;\n\n        this.createManagedBean(\n            new ManagedFocusFeature(eFocusableElement, {\n                onTabKeyDown: this.onTabKeyDown.bind(this),\n                handleKeyDown: this.handleKeyDown.bind(this),\n                onFocusOut: this.onFocusOut.bind(this),\n            })\n        );\n\n        // for setting ag-pivot-on / ag-pivot-off CSS classes\n        this.addManagedEventListeners({\n            columnPivotModeChanged: this.onPivotModeChanged.bind(this),\n            displayedColumnsChanged: this.onDisplayedColumnsChanged.bind(this),\n        });\n\n        this.onPivotModeChanged();\n        this.setupHeaderHeight();\n\n        const listener = this.onHeaderContextMenu.bind(this);\n        this.addManagedElementListeners(this.eGui, { contextmenu: listener });\n        this.mockContextMenuForIPad(listener);\n\n        this.ctrlsService.register('gridHeaderCtrl', this);\n    }\n\n    private setupHeaderHeight(): void {\n        const listener = this.setHeaderHeight.bind(this);\n        listener();\n\n        this.addManagedPropertyListener('headerHeight', listener);\n        this.addManagedPropertyListener('pivotHeaderHeight', listener);\n        this.addManagedPropertyListener('groupHeaderHeight', listener);\n        this.addManagedPropertyListener('pivotGroupHeaderHeight', listener);\n        this.addManagedPropertyListener('floatingFiltersHeight', listener);\n\n        this.addManagedEventListeners({\n            displayedColumnsChanged: listener,\n            columnHeaderHeightChanged: listener,\n            gridStylesChanged: listener,\n            advancedFilterEnabledChanged: listener,\n        });\n    }\n\n    public getHeaderHeight(): number {\n        return this.headerHeight;\n    }\n\n    private setHeaderHeight(): void {\n        const { columnModel } = this;\n\n        let numberOfFloating = 0;\n        let headerRowCount = columnModel.getHeaderRowCount();\n        let totalHeaderHeight: number;\n\n        const hasFloatingFilters = this.filterManager?.hasFloatingFilters();\n\n        if (hasFloatingFilters) {\n            headerRowCount++;\n            numberOfFloating = 1;\n        }\n\n        const groupHeight = this.columnModel.getColumnGroupHeaderRowHeight();\n        const headerHeight = this.columnModel.getColumnHeaderRowHeight();\n\n        const numberOfNonGroups = 1 + numberOfFloating;\n        const numberOfGroups = headerRowCount - numberOfNonGroups;\n\n        totalHeaderHeight = numberOfFloating * columnModel.getFloatingFiltersHeight()!;\n        totalHeaderHeight += numberOfGroups * groupHeight!;\n        totalHeaderHeight += headerHeight!;\n\n        if (this.headerHeight === totalHeaderHeight) {\n            return;\n        }\n\n        this.headerHeight = totalHeaderHeight;\n\n        // one extra pixel is needed here to account for the\n        // height of the border\n        const px = `${totalHeaderHeight + 1}px`;\n        this.comp.setHeightAndMinHeight(px);\n\n        this.eventService.dispatchEvent({\n            type: 'headerHeightChanged',\n        });\n    }\n\n    private onPivotModeChanged(): void {\n        const pivotMode = this.columnModel.isPivotMode();\n\n        this.comp.addOrRemoveCssClass('ag-pivot-on', pivotMode);\n        this.comp.addOrRemoveCssClass('ag-pivot-off', !pivotMode);\n    }\n\n    private onDisplayedColumnsChanged(): void {\n        const columns = this.visibleColsService.getAllCols();\n        const shouldAllowOverflow = columns.some((col) => col.isSpanHeaderHeight());\n\n        this.comp.addOrRemoveCssClass('ag-header-allow-overflow', shouldAllowOverflow);\n    }\n\n    protected onTabKeyDown(e: KeyboardEvent): void {\n        const isRtl = this.gos.get('enableRtl');\n        const direction = e.shiftKey !== isRtl ? HeaderNavigationDirection.LEFT : HeaderNavigationDirection.RIGHT;\n\n        if (\n            this.headerNavigationService.navigateHorizontally(direction, true, e) ||\n            this.focusService.focusNextGridCoreContainer(e.shiftKey)\n        ) {\n            e.preventDefault();\n        }\n    }\n\n    protected handleKeyDown(e: KeyboardEvent): void {\n        let direction: HeaderNavigationDirection | null = null;\n\n        switch (e.key) {\n            case KeyCode.LEFT:\n                direction = HeaderNavigationDirection.LEFT;\n            // eslint-disable-next-line no-fallthrough\n            case KeyCode.RIGHT: {\n                if (!_exists(direction)) {\n                    direction = HeaderNavigationDirection.RIGHT;\n                }\n                this.headerNavigationService.navigateHorizontally(direction, false, e);\n                break;\n            }\n            case KeyCode.UP:\n                direction = HeaderNavigationDirection.UP;\n            // eslint-disable-next-line no-fallthrough\n            case KeyCode.DOWN: {\n                if (!_exists(direction)) {\n                    direction = HeaderNavigationDirection.DOWN;\n                }\n                if (this.headerNavigationService.navigateVertically(direction, null, e)) {\n                    e.preventDefault();\n                }\n                break;\n            }\n            default:\n                return;\n        }\n    }\n\n    protected onFocusOut(e: FocusEvent): void {\n        const { relatedTarget } = e;\n\n        if (!relatedTarget && this.eGui.contains(this.gos.getActiveDomElement())) {\n            return;\n        }\n\n        if (!this.eGui.contains(relatedTarget as HTMLElement)) {\n            this.focusService.clearFocusedHeader();\n        }\n    }\n\n    private onHeaderContextMenu(mouseEvent?: MouseEvent, touch?: Touch, touchEvent?: TouchEvent): void {\n        if ((!mouseEvent && !touchEvent) || !this.menuService.isHeaderContextMenuEnabled()) {\n            return;\n        }\n\n        const { target } = (mouseEvent ?? touch)!;\n\n        if (target === this.eGui || target === this.ctrlsService.getHeaderRowContainerCtrl().getViewport()) {\n            this.menuService.showHeaderContextMenu(undefined, mouseEvent, touchEvent);\n        }\n    }\n\n    private mockContextMenuForIPad(\n        listener: (mouseListener?: MouseEvent, touch?: Touch, touchEvent?: TouchEvent) => void\n    ): void {\n        // we do NOT want this when not in iPad\n        if (!_isIOSUserAgent()) {\n            return;\n        }\n\n        const touchListener = new TouchListener(this.eGui);\n        const longTapListener = (event: LongTapEvent) => {\n            listener(undefined, event.touchStart, event.touchEvent);\n        };\n\n        this.addManagedListeners(touchListener, { longTap: longTapListener });\n        this.addDestroyFunc(() => touchListener.destroy());\n    }\n}\n", "import type { VisibleColsService } from '../columns/visibleColsService';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { ScrollVisibleService } from './scrollVisibleService';\n\nexport class CenterWidthFeature extends BeanStub {\n    private visibleColsService: VisibleColsService;\n    private scrollVisibleService: ScrollVisibleService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.visibleColsService = beans.visibleColsService;\n        this.scrollVisibleService = beans.scrollVisibleService;\n    }\n\n    constructor(\n        private readonly callback: (width: number) => void,\n        private readonly addSpacer: boolean = false\n    ) {\n        super();\n    }\n\n    public postConstruct(): void {\n        const listener = this.setWidth.bind(this);\n        this.addManagedPropertyListener('domLayout', listener);\n\n        this.addManagedEventListeners({\n            columnContainerWidthChanged: listener,\n            displayedColumnsChanged: listener,\n            leftPinnedWidthChanged: listener,\n        });\n\n        if (this.addSpacer) {\n            this.addManagedEventListeners({\n                rightPinnedWidthChanged: listener,\n                scrollVisibilityChanged: listener,\n                scrollbarWidthChanged: listener,\n            });\n        }\n\n        this.setWidth();\n    }\n\n    private setWidth(): void {\n        const printLayout = this.gos.isDomLayout('print');\n\n        const centerWidth = this.visibleColsService.getBodyContainerWidth();\n        const leftWidth = this.visibleColsService.getColsLeftWidth();\n        const rightWidth = this.visibleColsService.getDisplayedColumnsRightWidth();\n\n        let totalWidth: number;\n\n        if (printLayout) {\n            totalWidth = centerWidth + leftWidth + rightWidth;\n        } else {\n            totalWidth = centerWidth;\n\n            if (this.addSpacer) {\n                const relevantWidth = this.gos.get('enableRtl') ? leftWidth : rightWidth;\n                if (relevantWidth === 0 && this.scrollVisibleService.isVerticalScrollShowing()) {\n                    totalWidth += this.gos.getScrollbarWidth();\n                }\n            }\n        }\n\n        this.callback(totalWidth);\n    }\n}\n", "import type { FuncColsService } from '../../columns/funcColsService';\nimport { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { DragAndDropIcon, DraggingEvent } from '../../dragAndDrop/dragAndDropService';\nimport type { AgColumn } from '../../entities/agColumn';\nimport type { ColumnPinnedType } from '../../interfaces/iColumn';\nimport type { DropListener } from './bodyDropTarget';\n\nexport class BodyDropPivotTarget extends BeanStub implements DropListener {\n    private funcColsService: FuncColsService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.funcColsService = beans.funcColsService;\n    }\n\n    private columnsToAggregate: AgColumn[] = [];\n    private columnsToGroup: AgColumn[] = [];\n    private columnsToPivot: AgColumn[] = [];\n\n    private pinned: ColumnPinnedType;\n\n    constructor(pinned: ColumnPinnedType) {\n        super();\n        this.pinned = pinned;\n    }\n\n    /** Callback for when drag enters */\n    public onDragEnter(draggingEvent: DraggingEvent): void {\n        this.clearColumnsList();\n\n        // in pivot mode, we don't accept any drops if functions are read only\n        if (this.gos.get('functionsReadOnly')) {\n            return;\n        }\n\n        const dragColumns = draggingEvent.dragItem.columns as AgColumn[] | undefined;\n\n        if (!dragColumns) {\n            return;\n        }\n\n        dragColumns.forEach((column) => {\n            // we don't allow adding secondary columns\n            if (!column.isPrimary()) {\n                return;\n            }\n\n            if (column.isAnyFunctionActive()) {\n                return;\n            }\n\n            if (column.isAllowValue()) {\n                this.columnsToAggregate.push(column);\n            } else if (column.isAllowRowGroup()) {\n                this.columnsToGroup.push(column);\n            } else if (column.isAllowPivot()) {\n                this.columnsToPivot.push(column);\n            }\n        });\n    }\n\n    public getIconName(): DragAndDropIcon | null {\n        const totalColumns = this.columnsToAggregate.length + this.columnsToGroup.length + this.columnsToPivot.length;\n        if (totalColumns > 0) {\n            return this.pinned ? 'pinned' : 'move';\n        }\n\n        return null;\n    }\n\n    /** Callback for when drag leaves */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public onDragLeave(draggingEvent: DraggingEvent): void {\n        // if we are taking columns out of the center, then we remove them from the report\n        this.clearColumnsList();\n    }\n\n    private clearColumnsList(): void {\n        this.columnsToAggregate.length = 0;\n        this.columnsToGroup.length = 0;\n        this.columnsToPivot.length = 0;\n    }\n\n    /** Callback for when dragging */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public onDragging(draggingEvent: DraggingEvent): void {}\n\n    /** Callback for when drag stops */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public onDragStop(draggingEvent: DraggingEvent): void {\n        if (this.columnsToAggregate.length > 0) {\n            this.funcColsService.addValueColumns(this.columnsToAggregate, 'toolPanelDragAndDrop');\n        }\n        if (this.columnsToGroup.length > 0) {\n            this.funcColsService.addRowGroupColumns(this.columnsToGroup, 'toolPanelDragAndDrop');\n        }\n        if (this.columnsToPivot.length > 0) {\n            this.funcColsService.addPivotColumns(this.columnsToPivot, 'toolPanelDragAndDrop');\n        }\n    }\n}\n", "import type { ColumnModel } from '../columns/columnModel';\nimport type { ColumnMoveService } from '../columns/columnMoveService';\nimport type { VisibleColsService } from '../columns/visibleColsService';\nimport { HorizontalDirection } from '../constants/direction';\nimport type { CtrlsService } from '../ctrlsService';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { AgColumnGroup } from '../entities/agColumnGroup';\nimport type { AgProvidedColumnGroup } from '../entities/agProvidedColumnGroup';\nimport type { ColumnEventType } from '../events';\nimport type { GridOptionsService } from '../gridOptionsService';\nimport type { ColumnPinnedType } from '../interfaces/iColumn';\nimport { _areEqual, _includes, _last, _sortNumerically } from '../utils/array';\n\nexport function attemptMoveColumns(params: {\n    allMovingColumns: AgColumn[];\n    isFromHeader: boolean;\n    hDirection?: HorizontalDirection;\n    xPosition: number;\n    fromEnter: boolean;\n    fakeEvent: boolean;\n    pinned: ColumnPinnedType;\n    gos: GridOptionsService;\n    columnModel: ColumnModel;\n    columnMoveService: ColumnMoveService;\n    presentedColsService: VisibleColsService;\n}): { columns: AgColumn[]; toIndex: number } | null | undefined {\n    const {\n        isFromHeader,\n        hDirection,\n        xPosition,\n        fromEnter,\n        fakeEvent,\n        pinned,\n        gos,\n        columnModel,\n        columnMoveService,\n        presentedColsService,\n    } = params;\n\n    const draggingLeft = hDirection === HorizontalDirection.Left;\n    const draggingRight = hDirection === HorizontalDirection.Right;\n\n    let { allMovingColumns } = params;\n    if (isFromHeader) {\n        // If the columns we're dragging are the only visible columns of their group, move the hidden ones too\n        const newCols: AgColumn[] = [];\n        allMovingColumns.forEach((col) => {\n            let movingGroup: AgColumnGroup | null = null;\n\n            let parent = col.getParent();\n            while (parent != null && parent.getDisplayedLeafColumns().length === 1) {\n                movingGroup = parent;\n                parent = parent.getParent();\n            }\n            if (movingGroup != null) {\n                const isMarryChildren = !!movingGroup.getColGroupDef()?.marryChildren;\n                const columnsToMove = isMarryChildren\n                    ? // when marry children is true, we also have to move hidden\n                      // columns within the group, so grab them from the `providedColumnGroup`\n                      movingGroup.getProvidedColumnGroup().getLeafColumns()\n                    : movingGroup.getLeafColumns();\n\n                columnsToMove.forEach((newCol) => {\n                    if (!newCols.includes(newCol)) {\n                        newCols.push(newCol);\n                    }\n                });\n            } else if (!newCols.includes(col)) {\n                newCols.push(col);\n            }\n        });\n        allMovingColumns = newCols;\n    }\n\n    // it is important to sort the moving columns as they are in grid columns, as the list of moving columns\n    // could themselves be part of 'married children' groups, which means we need to maintain the order within\n    // the moving list.\n    const allMovingColumnsOrdered = allMovingColumns.slice();\n    columnModel.sortColsLikeCols(allMovingColumnsOrdered);\n\n    const validMoves = calculateValidMoves({\n        movingCols: allMovingColumnsOrdered,\n        draggingRight,\n        xPosition,\n        pinned,\n        gos,\n        columnModel,\n        presentedColsService,\n    });\n\n    // if cols are not adjacent, then this returns null. when moving, we constrain the direction of the move\n    // (ie left or right) to the mouse direction. however\n    const oldIndex = calculateOldIndex(allMovingColumnsOrdered, columnModel);\n\n    if (validMoves.length === 0) {\n        return;\n    }\n\n    const firstValidMove = validMoves[0];\n\n    // the two check below stop an error when the user grabs a group my a middle column, then\n    // it is possible the mouse pointer is to the right of a column while been dragged left.\n    // so we need to make sure that the mouse pointer is actually left of the left most column\n    // if moving left, and right of the right most column if moving right\n\n    // we check 'fromEnter' below so we move the column to the new spot if the mouse is coming from\n    // outside the grid, eg if the column is moving from side panel, mouse is moving left, then we should\n    // place the column to the RHS even if the mouse is moving left and the column is already on\n    // the LHS. otherwise we stick to the rule described above.\n\n    let constrainDirection = oldIndex !== null && !fromEnter;\n\n    // don't consider 'fromEnter' when dragging header cells, otherwise group can jump to opposite direction of drag\n    if (isFromHeader) {\n        constrainDirection = oldIndex !== null;\n    }\n\n    // if the event was faked by a change in column pin state, then the original location of the column\n    // is not reliable for dictating where the column may now be placed.\n    if (constrainDirection && !fakeEvent) {\n        // only allow left drag if this column is moving left\n        if (draggingLeft && firstValidMove >= (oldIndex as number)) {\n            return;\n        }\n\n        // only allow right drag if this column is moving right\n        if (draggingRight && firstValidMove <= (oldIndex as number)) {\n            return;\n        }\n    }\n\n    // From when we find a move that passes all the rules\n    // Remember what that move would look like in terms of displayed cols\n    // keep going with further moves until we find a different result in displayed output\n    // In this way potentialMoves contains all potential moves over 'hidden' columns\n    const displayedCols = presentedColsService.getAllCols();\n\n    const potentialMoves: { move: number; fragCount: number }[] = [];\n    let targetOrder: AgColumn[] | null = null;\n\n    for (let i = 0; i < validMoves.length; i++) {\n        const move: number = validMoves[i];\n\n        const order = columnMoveService.getProposedColumnOrder(allMovingColumnsOrdered, move);\n\n        if (!columnMoveService.doesOrderPassRules(order)) {\n            continue;\n        }\n        const displayedOrder = order.filter((col) => displayedCols.includes(col));\n        if (targetOrder === null) {\n            targetOrder = displayedOrder;\n        } else if (!_areEqual(displayedOrder, targetOrder)) {\n            break; // Stop looking for potential moves if the displayed result changes from the target\n        }\n        const fragCount = groupFragCount(order);\n        potentialMoves.push({ move, fragCount });\n    }\n\n    if (potentialMoves.length === 0) {\n        return;\n    }\n\n    // The best move is the move with least group fragmentation\n    potentialMoves.sort((a, b) => a.fragCount - b.fragCount);\n\n    return moveColumns(allMovingColumns, potentialMoves[0].move, 'uiColumnMoved', false, columnMoveService);\n}\n\nexport function moveColumns(\n    columns: AgColumn[],\n    toIndex: number,\n    source: ColumnEventType,\n    finished: boolean,\n    columnMoveService: ColumnMoveService\n): { columns: AgColumn[]; toIndex: number } | null {\n    columnMoveService.moveColumns(columns, toIndex, source, finished);\n\n    return finished ? null : { columns, toIndex };\n}\n\n// returns the index of the first column in the list ONLY if the cols are all beside\n// each other. if the cols are not beside each other, then returns null\nfunction calculateOldIndex(movingCols: AgColumn[], columnModel: ColumnModel): number | null {\n    const gridCols: AgColumn[] = columnModel.getCols();\n    const indexes = _sortNumerically(movingCols.map((col) => gridCols.indexOf(col)));\n    const firstIndex = indexes[0];\n    const lastIndex = _last(indexes);\n    const spread = lastIndex - firstIndex;\n    const gapsExist = spread !== indexes.length - 1;\n\n    return gapsExist ? null : firstIndex;\n}\n\n// A measure of how fragmented in terms of groups an order of columns is\nfunction groupFragCount(columns: AgColumn[]): number {\n    function parents(col: AgColumn): AgProvidedColumnGroup[] {\n        const result: AgProvidedColumnGroup[] = [];\n        let parent = col.getOriginalParent();\n        while (parent != null) {\n            result.push(parent);\n            parent = parent.getOriginalParent();\n        }\n        return result;\n    }\n    let count = 0;\n    for (let i = 0; i < columns.length - 1; i++) {\n        let a = parents(columns[i]);\n        let b = parents(columns[i + 1]);\n        // iterate over the longest one\n        [a, b] = a.length > b.length ? [a, b] : [b, a];\n        a.forEach((parent) => {\n            if (b.indexOf(parent) === -1) {\n                count++; // More fragmented if other column doesn't share the parent\n            }\n        });\n    }\n    return count;\n}\n\nfunction getDisplayedColumns(presentedColsService: VisibleColsService, type: ColumnPinnedType): AgColumn[] {\n    switch (type) {\n        case 'left':\n            return presentedColsService.getLeftCols();\n        case 'right':\n            return presentedColsService.getRightCols();\n        default:\n            return presentedColsService.getCenterCols();\n    }\n}\n\nfunction calculateValidMoves(params: {\n    movingCols: AgColumn[];\n    draggingRight: boolean;\n    xPosition: number;\n    pinned: ColumnPinnedType;\n    gos: GridOptionsService;\n    columnModel: ColumnModel;\n    presentedColsService: VisibleColsService;\n}): number[] {\n    const { movingCols, draggingRight, xPosition, pinned, gos, columnModel, presentedColsService } = params;\n    const isMoveBlocked =\n        gos.get('suppressMovableColumns') || movingCols.some((col) => col.getColDef().suppressMovable);\n\n    if (isMoveBlocked) {\n        return [];\n    }\n    // this is the list of cols on the screen, so it's these we use when comparing the x mouse position\n    const allDisplayedCols = getDisplayedColumns(presentedColsService, pinned);\n    // but this list is the list of all cols, when we move a col it's the index within this list that gets used,\n    // so the result we return has to be and index location for this list\n    const allGridCols = columnModel.getCols();\n\n    const movingDisplayedCols = allDisplayedCols.filter((col) => _includes(movingCols, col));\n    const otherDisplayedCols = allDisplayedCols.filter((col) => !_includes(movingCols, col));\n    const otherGridCols = allGridCols.filter((col) => !_includes(movingCols, col));\n\n    // work out how many DISPLAYED columns fit before the 'x' position. this gives us the displayIndex.\n    // for example, if cols are a,b,c,d and we find a,b fit before 'x', then we want to place the moving\n    // col between b and c (so that it is under the mouse position).\n    let displayIndex = 0;\n    let availableWidth = xPosition;\n\n    // if we are dragging right, then the columns will be to the left of the mouse, so we also want to\n    // include the width of the moving columns\n    if (draggingRight) {\n        let widthOfMovingDisplayedCols = 0;\n        movingDisplayedCols.forEach((col) => (widthOfMovingDisplayedCols += col.getActualWidth()));\n        availableWidth -= widthOfMovingDisplayedCols;\n    }\n\n    if (availableWidth > 0) {\n        // now count how many of the displayed columns will fit to the left\n        for (let i = 0; i < otherDisplayedCols.length; i++) {\n            const col = otherDisplayedCols[i];\n            availableWidth -= col.getActualWidth();\n            if (availableWidth < 0) {\n                break;\n            }\n            displayIndex++;\n        }\n        // trial and error, if going right, we adjust by one, i didn't manage to quantify why, but it works\n        if (draggingRight) {\n            displayIndex++;\n        }\n    }\n\n    // the display index is with respect to all the showing columns, however when we move, it's with\n    // respect to all grid columns, so we need to translate from display index to grid index\n\n    let firstValidMove: number;\n    if (displayIndex > 0) {\n        const leftColumn = otherDisplayedCols[displayIndex - 1];\n        firstValidMove = otherGridCols.indexOf(leftColumn) + 1;\n    } else {\n        firstValidMove = otherGridCols.indexOf(otherDisplayedCols[0]);\n        if (firstValidMove === -1) {\n            firstValidMove = 0;\n        }\n    }\n\n    const validMoves = [firstValidMove];\n    const numberComparator = (a: number, b: number) => a - b;\n\n    // add in other valid moves due to hidden columns and married children. for example, a particular\n    // move might break a group that has married children (so move isn't valid), however there could\n    // be hidden columns (not displayed) that we could jump over to make the move valid. because\n    // they are hidden, user doesn't see any different, however it allows moves that would otherwise\n    // not work. for example imagine a group with 9 columns and all columns are hidden except the\n    // middle one (so 4 hidden to left, 4 hidden to right), then when moving 'firstValidMove' will\n    // be relative to the not-shown column, however we need to consider the move jumping over all the\n    // hidden children. if we didn't do this, then if the group just described was at the end (RHS) of the\n    // grid, there would be no way to put a column after it (as the grid would only consider beside the\n    // visible column, which would fail valid move rules).\n    if (draggingRight) {\n        // if dragging right, then we add all the additional moves to the right. so in other words\n        // if the next move is not valid, find the next move to the right that is valid.\n        let pointer = firstValidMove + 1;\n        const lastIndex = allGridCols.length - 1;\n        while (pointer <= lastIndex) {\n            validMoves.push(pointer);\n            pointer++;\n        }\n\n        // adding columns here means the order is now messed up\n        validMoves.sort(numberComparator);\n    } else {\n        // if dragging left we do the reverse of dragging right, we add in all the valid moves to the\n        // left. however we also have to consider moves to the right for all hidden columns first.\n        // (this logic is hard to reason with, it was worked out with trial and error,\n        // more observation rather than science).\n\n        // add moves to the right\n        let pointer = firstValidMove;\n        const lastIndex = allGridCols.length - 1;\n        let displacedCol = allGridCols[pointer];\n\n        // takes into account visible=false and group=closed, ie it is not displayed\n        while (pointer <= lastIndex && allDisplayedCols.indexOf(displacedCol) < 0) {\n            pointer++;\n            validMoves.push(pointer);\n            displacedCol = allGridCols[pointer];\n        }\n\n        // add moves to the left\n        pointer = firstValidMove - 1;\n        const firstDisplayIndex = 0;\n        while (pointer >= firstDisplayIndex) {\n            validMoves.push(pointer);\n            pointer--;\n        }\n\n        // adding columns here means the order is now messed up\n        validMoves.sort(numberComparator).reverse();\n    }\n\n    return validMoves;\n}\n\nexport function normaliseX(\n    x: number,\n    pinned: ColumnPinnedType,\n    fromKeyboard: boolean,\n    gos: GridOptionsService,\n    ctrlsService: CtrlsService\n): number {\n    const eViewport = ctrlsService.getHeaderRowContainerCtrl(pinned).getViewport();\n\n    if (fromKeyboard) {\n        x -= eViewport.getBoundingClientRect().left;\n    }\n\n    // flip the coordinate if doing RTL\n    if (gos.get('enableRtl')) {\n        const clientWidth = eViewport.clientWidth;\n        x = clientWidth - x;\n    }\n\n    // adjust for scroll only if centre container (the pinned containers don't scroll)\n    if (pinned == null) {\n        x += ctrlsService.get('center').getCenterViewportScrollLeft();\n    }\n\n    return x;\n}\n", "import type { ColumnModel } from '../../columns/columnModel';\nimport type { ColumnMoveService } from '../../columns/columnMoveService';\nimport type { VisibleColsService } from '../../columns/visibleColsService';\nimport { HorizontalDirection } from '../../constants/direction';\nimport { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { CtrlsService } from '../../ctrlsService';\nimport type { DragAndDropIcon, DragAndDropService, DraggingEvent } from '../../dragAndDrop/dragAndDropService';\nimport { DragSourceType } from '../../dragAndDrop/dragAndDropService';\nimport type { AgColumn } from '../../entities/agColumn';\nimport type { ColumnEventType } from '../../events';\nimport type { GridBodyCtrl } from '../../gridBodyComp/gridBodyCtrl';\nimport type { ColumnPinnedType } from '../../interfaces/iColumn';\nimport { _errorOnce } from '../../utils/function';\nimport { _exists, _missing } from '../../utils/generic';\nimport { attemptMoveColumns, moveColumns, normaliseX } from '../columnMoveHelper';\nimport type { DropListener } from './bodyDropTarget';\n\nexport class MoveColumnFeature extends BeanStub implements DropListener {\n    private columnModel: ColumnModel;\n    private visibleColsService: VisibleColsService;\n    private columnMoveService: ColumnMoveService;\n    private dragAndDropService: DragAndDropService;\n    private ctrlsService: CtrlsService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n        this.visibleColsService = beans.visibleColsService;\n        this.columnMoveService = beans.columnMoveService;\n        this.dragAndDropService = beans.dragAndDropService;\n        this.ctrlsService = beans.ctrlsService;\n    }\n\n    private gridBodyCon: GridBodyCtrl;\n\n    private needToMoveLeft = false;\n    private needToMoveRight = false;\n    private movingIntervalId: number | null;\n    private intervalCount: number;\n\n    private pinned: ColumnPinnedType;\n    private isCenterContainer: boolean;\n\n    private lastDraggingEvent: DraggingEvent;\n    private lastMovedInfo: { columns: AgColumn[]; toIndex: number } | null = null;\n\n    // this counts how long the user has been trying to scroll by dragging and failing,\n    // if they fail x amount of times, then the column will get pinned. this is what gives\n    // the 'hold and pin' functionality\n    private failedMoveAttempts: number;\n\n    constructor(pinned: ColumnPinnedType) {\n        super();\n        this.pinned = pinned;\n        this.isCenterContainer = !_exists(pinned);\n    }\n\n    public postConstruct(): void {\n        this.ctrlsService.whenReady((p) => {\n            this.gridBodyCon = p.gridBodyCtrl;\n        });\n    }\n\n    public getIconName(): DragAndDropIcon {\n        return this.pinned ? 'pinned' : 'move';\n    }\n\n    public onDragEnter(draggingEvent: DraggingEvent): void {\n        // we do dummy drag, so make sure column appears in the right location when first placed\n\n        const columns = draggingEvent.dragItem.columns as AgColumn[] | undefined;\n        const dragCameFromToolPanel = draggingEvent.dragSource.type === DragSourceType.ToolPanel;\n\n        if (dragCameFromToolPanel) {\n            // the if statement doesn't work if drag leaves grid, then enters again\n            this.setColumnsVisible(columns, true, 'uiColumnDragged');\n        } else {\n            // restore previous state of visible columns upon re-entering. this means if the user drags\n            // a group out, and then drags the group back in, only columns that were originally visible\n            // will be visible again. otherwise a group with three columns (but only two visible) could\n            // be dragged out, then when it's dragged in again, all three are visible. this stops that.\n            const visibleState = draggingEvent.dragItem.visibleState;\n            const visibleColumns: AgColumn[] = (columns || []).filter((column) => visibleState![column.getId()]);\n            this.setColumnsVisible(visibleColumns, true, 'uiColumnDragged');\n        }\n\n        this.setColumnsPinned(columns, this.pinned, 'uiColumnDragged');\n        this.onDragging(draggingEvent, true, true);\n    }\n\n    public onDragLeave(): void {\n        this.ensureIntervalCleared();\n        this.lastMovedInfo = null;\n    }\n\n    public setColumnsVisible(columns: AgColumn[] | null | undefined, visible: boolean, source: ColumnEventType) {\n        if (columns) {\n            const allowedCols = columns.filter((c) => !c.getColDef().lockVisible);\n            this.columnModel.setColsVisible(allowedCols, visible, source);\n        }\n    }\n\n    public setColumnsPinned(columns: AgColumn[] | null | undefined, pinned: ColumnPinnedType, source: ColumnEventType) {\n        if (columns) {\n            const allowedCols = columns.filter((c) => !c.getColDef().lockPinned);\n            this.columnModel.setColsPinned(allowedCols, pinned, source);\n        }\n    }\n\n    public onDragStop(): void {\n        this.onDragging(this.lastDraggingEvent, false, true, true);\n        this.ensureIntervalCleared();\n        this.lastMovedInfo = null;\n    }\n\n    private checkCenterForScrolling(xAdjustedForScroll: number): void {\n        if (this.isCenterContainer) {\n            // scroll if the mouse has gone outside the grid (or just outside the scrollable part if pinning)\n            // putting in 50 buffer, so even if user gets to edge of grid, a scroll will happen\n            const centerCtrl = this.ctrlsService.get('center');\n            const firstVisiblePixel = centerCtrl.getCenterViewportScrollLeft();\n            const lastVisiblePixel = firstVisiblePixel + centerCtrl.getCenterWidth();\n\n            if (this.gos.get('enableRtl')) {\n                this.needToMoveRight = xAdjustedForScroll < firstVisiblePixel + 50;\n                this.needToMoveLeft = xAdjustedForScroll > lastVisiblePixel - 50;\n            } else {\n                this.needToMoveLeft = xAdjustedForScroll < firstVisiblePixel + 50;\n                this.needToMoveRight = xAdjustedForScroll > lastVisiblePixel - 50;\n            }\n\n            if (this.needToMoveLeft || this.needToMoveRight) {\n                this.ensureIntervalStarted();\n            } else {\n                this.ensureIntervalCleared();\n            }\n        }\n    }\n\n    public onDragging(\n        draggingEvent: DraggingEvent = this.lastDraggingEvent,\n        fromEnter = false,\n        fakeEvent = false,\n        finished = false\n    ): void {\n        if (finished) {\n            if (this.lastMovedInfo) {\n                const { columns, toIndex } = this.lastMovedInfo;\n                moveColumns(columns, toIndex, 'uiColumnMoved', true, this.columnMoveService);\n            }\n            return;\n        }\n        this.lastDraggingEvent = draggingEvent;\n\n        // if moving up or down (ie not left or right) then do nothing\n        if (_missing(draggingEvent.hDirection)) {\n            return;\n        }\n\n        const mouseX = normaliseX(draggingEvent.x, this.pinned, false, this.gos, this.ctrlsService);\n\n        // if the user is dragging into the panel, ie coming from the side panel into the main grid,\n        // we don't want to scroll the grid this time, it would appear like the table is jumping\n        // each time a column is dragged in.\n        if (!fromEnter) {\n            this.checkCenterForScrolling(mouseX);\n        }\n\n        const hDirection = this.normaliseDirection(draggingEvent.hDirection);\n\n        const dragSourceType: DragSourceType = draggingEvent.dragSource.type;\n\n        const allMovingColumns = (draggingEvent.dragSource.getDragItem().columns?.filter((col) => {\n            if (col.getColDef().lockPinned) {\n                // if locked return true only if both col and container are same pin type.\n                // double equals (==) here on purpose so that null==undefined is true (for not pinned options)\n                return col.getPinned() == this.pinned;\n            }\n            // if not pin locked, then always allowed to be in this container\n            return true;\n        }) || []) as AgColumn[];\n\n        const lastMovedInfo = attemptMoveColumns({\n            allMovingColumns,\n            isFromHeader: dragSourceType === DragSourceType.HeaderCell,\n            hDirection,\n            xPosition: mouseX,\n            pinned: this.pinned,\n            fromEnter,\n            fakeEvent,\n            gos: this.gos,\n            columnModel: this.columnModel,\n            columnMoveService: this.columnMoveService,\n            presentedColsService: this.visibleColsService,\n        });\n\n        if (lastMovedInfo) {\n            this.lastMovedInfo = lastMovedInfo;\n        }\n    }\n\n    private normaliseDirection(hDirection: HorizontalDirection): HorizontalDirection | undefined {\n        if (this.gos.get('enableRtl')) {\n            switch (hDirection) {\n                case HorizontalDirection.Left:\n                    return HorizontalDirection.Right;\n                case HorizontalDirection.Right:\n                    return HorizontalDirection.Left;\n                default:\n                    _errorOnce(`Unknown direction ${hDirection}`);\n            }\n        } else {\n            return hDirection;\n        }\n    }\n\n    private ensureIntervalStarted(): void {\n        if (!this.movingIntervalId) {\n            this.intervalCount = 0;\n            this.failedMoveAttempts = 0;\n            this.movingIntervalId = window.setInterval(this.moveInterval.bind(this), 100);\n            this.dragAndDropService.setGhostIcon(this.needToMoveLeft ? 'left' : 'right', true);\n        }\n    }\n\n    private ensureIntervalCleared(): void {\n        if (this.movingIntervalId) {\n            window.clearInterval(this.movingIntervalId);\n            this.movingIntervalId = null;\n            this.dragAndDropService.setGhostIcon('move');\n        }\n    }\n\n    private moveInterval(): void {\n        // the amounts we move get bigger at each interval, so the speed accelerates, starting a bit slow\n        // and getting faster. this is to give smoother user experience. we max at 100px to limit the speed.\n        let pixelsToMove: number;\n        this.intervalCount++;\n        pixelsToMove = 10 + this.intervalCount * 5;\n        if (pixelsToMove > 100) {\n            pixelsToMove = 100;\n        }\n\n        let pixelsMoved: number | null = null;\n        const scrollFeature = this.gridBodyCon.getScrollFeature();\n        if (this.needToMoveLeft) {\n            pixelsMoved = scrollFeature.scrollHorizontally(-pixelsToMove);\n        } else if (this.needToMoveRight) {\n            pixelsMoved = scrollFeature.scrollHorizontally(pixelsToMove);\n        }\n\n        if (pixelsMoved !== 0) {\n            this.onDragging(this.lastDraggingEvent);\n            this.failedMoveAttempts = 0;\n        } else {\n            // we count the failed move attempts. if we fail to move 7 times, then we pin the column.\n            // this is how we achieve pining by dragging the column to the edge of the grid.\n            this.failedMoveAttempts++;\n\n            const columns = this.lastDraggingEvent.dragItem.columns as AgColumn[] | undefined;\n            const columnsThatCanPin = columns!.filter((c) => !c.getColDef().lockPinned);\n\n            if (columnsThatCanPin.length > 0) {\n                this.dragAndDropService.setGhostIcon('pinned');\n                if (this.failedMoveAttempts > 7) {\n                    const pinType = this.needToMoveLeft ? 'left' : 'right';\n                    this.setColumnsPinned(columnsThatCanPin, pinType, 'uiColumnDragged');\n                    this.dragAndDropService.nudge();\n                }\n            }\n        }\n    }\n}\n", "import type { ColumnModel } from '../../columns/columnModel';\nimport { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { CtrlsService } from '../../ctrlsService';\nimport type {\n    DragAndDropIcon,\n    DragAndDropService,\n    DraggingEvent,\n    DropTarget,\n} from '../../dragAndDrop/dragAndDropService';\nimport { DragSourceType } from '../../dragAndDrop/dragAndDropService';\nimport type { ColumnPinnedType } from '../../interfaces/iColumn';\nimport { BodyDropPivotTarget } from './bodyDropPivotTarget';\nimport { MoveColumnFeature } from './moveColumnFeature';\n\nexport interface DropListener {\n    getIconName(): DragAndDropIcon | null;\n    onDragEnter(params: DraggingEvent): void;\n    onDragLeave(params: DraggingEvent): void;\n    onDragging(params: DraggingEvent): void;\n    onDragStop(params: DraggingEvent): void;\n}\n\nexport class BodyDropTarget extends BeanStub implements DropTarget {\n    private dragAndDropService: DragAndDropService;\n    private columnModel: ColumnModel;\n    private ctrlsService: CtrlsService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.dragAndDropService = beans.dragAndDropService;\n        this.columnModel = beans.columnModel;\n        this.ctrlsService = beans.ctrlsService;\n    }\n\n    private pinned: ColumnPinnedType;\n    // public because it's part of the DropTarget interface\n    private eContainer: HTMLElement;\n    // public because it's part of the DropTarget interface\n    private eSecondaryContainers: HTMLElement[][];\n    private currentDropListener: DropListener;\n\n    private moveColumnFeature: MoveColumnFeature;\n    private bodyDropPivotTarget: BodyDropPivotTarget;\n\n    constructor(pinned: ColumnPinnedType, eContainer: HTMLElement) {\n        super();\n        this.pinned = pinned;\n        this.eContainer = eContainer;\n    }\n\n    public postConstruct(): void {\n        this.ctrlsService.whenReady((p) => {\n            switch (this.pinned) {\n                case 'left':\n                    this.eSecondaryContainers = [\n                        [p.gridBodyCtrl.getBodyViewportElement(), p.left.getContainerElement()],\n                        [p.bottomLeft.getContainerElement()],\n                        [p.topLeft.getContainerElement()],\n                    ];\n                    break;\n                case 'right':\n                    this.eSecondaryContainers = [\n                        [p.gridBodyCtrl.getBodyViewportElement(), p.right.getContainerElement()],\n                        [p.bottomRight.getContainerElement()],\n                        [p.topRight.getContainerElement()],\n                    ];\n                    break;\n                default:\n                    this.eSecondaryContainers = [\n                        [p.gridBodyCtrl.getBodyViewportElement(), p.center.getViewportElement()],\n                        [p.bottomCenter.getViewportElement()],\n                        [p.topCenter.getViewportElement()],\n                    ];\n                    break;\n            }\n        });\n\n        this.moveColumnFeature = this.createManagedBean(new MoveColumnFeature(this.pinned));\n        this.bodyDropPivotTarget = this.createManagedBean(new BodyDropPivotTarget(this.pinned));\n\n        this.dragAndDropService.addDropTarget(this);\n    }\n\n    public isInterestedIn(type: DragSourceType): boolean {\n        return (\n            type === DragSourceType.HeaderCell ||\n            (type === DragSourceType.ToolPanel && this.gos.get('allowDragFromColumnsToolPanel'))\n        );\n    }\n\n    public getSecondaryContainers(): HTMLElement[][] {\n        return this.eSecondaryContainers;\n    }\n\n    public getContainer(): HTMLElement {\n        return this.eContainer;\n    }\n\n    public getIconName(): DragAndDropIcon | null {\n        return this.currentDropListener.getIconName();\n    }\n\n    // we want to use the bodyPivotTarget if the user is dragging columns in from the toolPanel\n    // and we are in pivot mode, as it has to logic to set pivot/value/group on the columns when\n    // dropped into the grid's body.\n    private isDropColumnInPivotMode(draggingEvent: DraggingEvent): boolean {\n        // in pivot mode, then if moving a column (ie didn't come from toolpanel) then it's\n        // a standard column move, however if it came from the toolpanel, then we are introducing\n        // dimensions or values to the grid\n        return this.columnModel.isPivotMode() && draggingEvent.dragSource.type === DragSourceType.ToolPanel;\n    }\n\n    public onDragEnter(draggingEvent: DraggingEvent): void {\n        // we pick the drop listener depending on whether we are in pivot mode are not. if we are\n        // in pivot mode, then dropping cols changes the row group, pivot, value stats. otherwise\n        // we change visibility state and position.\n        this.currentDropListener = this.isDropColumnInPivotMode(draggingEvent)\n            ? this.bodyDropPivotTarget\n            : this.moveColumnFeature;\n        this.currentDropListener.onDragEnter(draggingEvent);\n    }\n\n    public onDragLeave(params: DraggingEvent): void {\n        this.currentDropListener.onDragLeave(params);\n    }\n\n    public onDragging(params: DraggingEvent): void {\n        this.currentDropListener.onDragging(params);\n    }\n\n    public onDragStop(params: DraggingEvent): void {\n        this.currentDropListener.onDragStop(params);\n    }\n}\n", "import type { ColumnAutosizeService } from '../../../columns/columnAutosizeService';\nimport type { ColumnSizeService } from '../../../columns/columnSizeService';\nimport { BeanStub } from '../../../context/beanStub';\nimport type { BeanCollection } from '../../../context/context';\nimport type { CtrlsService } from '../../../ctrlsService';\nimport type { AgColumn } from '../../../entities/agColumn';\nimport type { PinnedWidthService } from '../../../gridBodyComp/pinnedWidthService';\nimport type { ColumnPinnedType } from '../../../interfaces/iColumn';\nimport { _getInnerWidth, _setDisplayed } from '../../../utils/dom';\nimport { TouchListener } from '../../../widgets/touchListener';\nimport type { HorizontalResizeService } from '../../common/horizontalResizeService';\nimport type { IHeaderResizeFeature } from '../abstractCell/abstractHeaderCellCtrl';\nimport type { HeaderCellCtrl, IHeaderCellComp } from './headerCellCtrl';\n\nexport class ResizeFeature extends BeanStub implements IHeaderResizeFeature {\n    private horizontalResizeService: HorizontalResizeService;\n    private pinnedWidthService: PinnedWidthService;\n    private ctrlsService: CtrlsService;\n    private columnSizeService: ColumnSizeService;\n    private columnAutosizeService: ColumnAutosizeService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.horizontalResizeService = beans.horizontalResizeService;\n        this.pinnedWidthService = beans.pinnedWidthService;\n        this.ctrlsService = beans.ctrlsService;\n        this.columnSizeService = beans.columnSizeService;\n        this.columnAutosizeService = beans.columnAutosizeService;\n    }\n\n    private pinned: ColumnPinnedType;\n    private column: AgColumn;\n    private eResize: HTMLElement;\n    private comp: IHeaderCellComp;\n\n    private lastResizeAmount: number;\n    private resizeStartWidth: number;\n    private resizeWithShiftKey: boolean;\n\n    private ctrl: HeaderCellCtrl;\n\n    constructor(\n        pinned: ColumnPinnedType,\n        column: AgColumn,\n        eResize: HTMLElement,\n        comp: IHeaderCellComp,\n        ctrl: HeaderCellCtrl\n    ) {\n        super();\n        this.pinned = pinned;\n        this.column = column;\n        this.eResize = eResize;\n        this.comp = comp;\n        this.ctrl = ctrl;\n    }\n\n    public postConstruct(): void {\n        const destroyResizeFuncs: (() => void)[] = [];\n\n        let canResize: boolean;\n        let canAutosize: boolean;\n\n        const addResize = () => {\n            _setDisplayed(this.eResize, canResize);\n\n            if (!canResize) {\n                return;\n            }\n\n            const finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({\n                eResizeBar: this.eResize,\n                onResizeStart: this.onResizeStart.bind(this),\n                onResizing: this.onResizing.bind(this, false),\n                onResizeEnd: this.onResizing.bind(this, true),\n            });\n            destroyResizeFuncs.push(finishedWithResizeFunc);\n\n            if (canAutosize) {\n                const skipHeaderOnAutoSize = this.gos.get('skipHeaderOnAutoSize');\n\n                const autoSizeColListener = () => {\n                    this.columnAutosizeService.autoSizeColumn(this.column, 'uiColumnResized', skipHeaderOnAutoSize);\n                };\n\n                this.eResize.addEventListener('dblclick', autoSizeColListener);\n                const touchListener: TouchListener = new TouchListener(this.eResize);\n                touchListener.addEventListener('doubleTap', autoSizeColListener);\n\n                destroyResizeFuncs.push(() => {\n                    this.eResize.removeEventListener('dblclick', autoSizeColListener);\n                    touchListener.removeEventListener('doubleTap', autoSizeColListener);\n                    touchListener.destroy();\n                });\n            }\n        };\n\n        const removeResize = () => {\n            destroyResizeFuncs.forEach((f) => f());\n            destroyResizeFuncs.length = 0;\n        };\n\n        const refresh = () => {\n            const resize = this.column.isResizable();\n            const autoSize = !this.gos.get('suppressAutoSize') && !this.column.getColDef().suppressAutoSize;\n            const propertyChange = resize !== canResize || autoSize !== canAutosize;\n            if (propertyChange) {\n                canResize = resize;\n                canAutosize = autoSize;\n                removeResize();\n                addResize();\n            }\n        };\n\n        refresh();\n        this.addDestroyFunc(removeResize);\n        this.ctrl.addRefreshFunction(refresh);\n    }\n\n    private onResizing(finished: boolean, resizeAmount: number): void {\n        const { column: key, lastResizeAmount, resizeStartWidth } = this;\n\n        const resizeAmountNormalised = this.normaliseResizeAmount(resizeAmount);\n        const newWidth = resizeStartWidth + resizeAmountNormalised;\n\n        const columnWidths = [{ key, newWidth }];\n\n        if (this.column.getPinned()) {\n            const leftWidth = this.pinnedWidthService.getPinnedLeftWidth();\n            const rightWidth = this.pinnedWidthService.getPinnedRightWidth();\n            const bodyWidth = _getInnerWidth(this.ctrlsService.getGridBodyCtrl().getBodyViewportElement()) - 50;\n\n            if (leftWidth + rightWidth + (resizeAmountNormalised - lastResizeAmount) > bodyWidth) {\n                return;\n            }\n        }\n\n        this.lastResizeAmount = resizeAmountNormalised;\n\n        this.columnSizeService.setColumnWidths(columnWidths, this.resizeWithShiftKey, finished, 'uiColumnResized');\n\n        if (finished) {\n            this.toggleColumnResizing(false);\n        }\n    }\n\n    private onResizeStart(shiftKey: boolean): void {\n        this.resizeStartWidth = this.column.getActualWidth();\n        this.lastResizeAmount = 0;\n        this.resizeWithShiftKey = shiftKey;\n\n        this.toggleColumnResizing(true);\n    }\n\n    public toggleColumnResizing(resizing: boolean): void {\n        this.comp.addOrRemoveCssClass('ag-column-resizing', resizing);\n    }\n\n    // optionally inverts the drag, depending on pinned and RTL\n    // note - this method is duplicated in RenderedHeaderGroupCell - should refactor out?\n    private normaliseResizeAmount(dragChange: number): number {\n        let result = dragChange;\n\n        const notPinningLeft = this.pinned !== 'left';\n        const pinningRight = this.pinned === 'right';\n\n        if (this.gos.get('enableRtl')) {\n            // for RTL, dragging left makes the col bigger, except when pinning left\n            if (notPinningLeft) {\n                result *= -1;\n            }\n        } else {\n            // for LTR (ie normal), dragging left makes the col smaller, except when pinning right\n            if (pinningRight) {\n                result *= -1;\n            }\n        }\n\n        return result;\n    }\n}\n", "import { BeanStub } from '../../../context/beanStub';\nimport type { BeanCollection } from '../../../context/context';\nimport type { AgColumn } from '../../../entities/agColumn';\nimport type { HeaderCheckboxSelectionCallbackParams } from '../../../entities/colDef';\nimport type { SelectionEventSourceType } from '../../../events';\nimport type { IRowModel } from '../../../interfaces/iRowModel';\nimport type { ISelectionService } from '../../../interfaces/iSelectionService';\nimport { _setAriaHidden, _setAriaRole } from '../../../utils/aria';\nimport { _warnOnce } from '../../../utils/function';\nimport { AgCheckbox } from '../../../widgets/agCheckbox';\nimport type { HeaderCellCtrl } from './headerCellCtrl';\n\nexport class SelectAllFeature extends BeanStub {\n    private rowModel: IRowModel;\n    private selectionService: ISelectionService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.rowModel = beans.rowModel;\n        this.selectionService = beans.selectionService;\n    }\n\n    private cbSelectAllVisible = false;\n    private processingEventFromCheckbox = false;\n    private column: AgColumn;\n    private headerCellCtrl: HeaderCellCtrl;\n\n    private cbSelectAll: AgCheckbox;\n\n    constructor(column: AgColumn) {\n        super();\n        this.column = column;\n    }\n\n    public onSpaceKeyDown(e: KeyboardEvent): void {\n        const checkbox = this.cbSelectAll;\n\n        if (checkbox.isDisplayed() && !checkbox.getGui().contains(this.gos.getActiveDomElement())) {\n            e.preventDefault();\n            checkbox.setValue(!checkbox.getValue());\n        }\n    }\n\n    public getCheckboxGui(): HTMLElement {\n        return this.cbSelectAll.getGui();\n    }\n\n    public setComp(ctrl: HeaderCellCtrl): void {\n        this.headerCellCtrl = ctrl;\n        this.cbSelectAll = this.createManagedBean(new AgCheckbox());\n        this.cbSelectAll.addCssClass('ag-header-select-all');\n        _setAriaRole(this.cbSelectAll.getGui(), 'presentation');\n        this.showOrHideSelectAll();\n\n        this.addManagedEventListeners({\n            newColumnsLoaded: this.onNewColumnsLoaded.bind(this),\n            displayedColumnsChanged: this.onDisplayedColumnsChanged.bind(this),\n            selectionChanged: this.onSelectionChanged.bind(this),\n            paginationChanged: this.onSelectionChanged.bind(this),\n            modelUpdated: this.onModelChanged.bind(this),\n        });\n\n        this.addManagedListeners(this.cbSelectAll, { fieldValueChanged: this.onCbSelectAll.bind(this) });\n        _setAriaHidden(this.cbSelectAll.getGui(), true);\n        this.cbSelectAll.getInputElement().setAttribute('tabindex', '-1');\n        this.refreshSelectAllLabel();\n    }\n\n    private onNewColumnsLoaded(): void {\n        this.showOrHideSelectAll();\n    }\n\n    private onDisplayedColumnsChanged(): void {\n        if (!this.isAlive()) {\n            return;\n        }\n        this.showOrHideSelectAll();\n    }\n\n    private showOrHideSelectAll(): void {\n        this.cbSelectAllVisible = this.isCheckboxSelection();\n        this.cbSelectAll.setDisplayed(this.cbSelectAllVisible, { skipAriaHidden: true });\n        if (this.cbSelectAllVisible) {\n            // in case user is trying this feature with the wrong model type\n            this.checkRightRowModelType('selectAllCheckbox');\n            // in case user is trying this feature with the wrong model type\n            this.checkSelectionType('selectAllCheckbox');\n            // make sure checkbox is showing the right state\n            this.updateStateOfCheckbox();\n        }\n        this.refreshSelectAllLabel();\n    }\n\n    private onModelChanged(): void {\n        if (!this.cbSelectAllVisible) {\n            return;\n        }\n        this.updateStateOfCheckbox();\n    }\n\n    private onSelectionChanged(): void {\n        if (!this.cbSelectAllVisible) {\n            return;\n        }\n        this.updateStateOfCheckbox();\n    }\n\n    private updateStateOfCheckbox(): void {\n        if (this.processingEventFromCheckbox) {\n            return;\n        }\n\n        this.processingEventFromCheckbox = true;\n\n        const allSelected = this.selectionService.getSelectAllState(this.isFilteredOnly(), this.isCurrentPageOnly());\n\n        this.cbSelectAll.setValue(allSelected!);\n        const hasNodesToSelect = this.selectionService.hasNodesToSelect(\n            this.isFilteredOnly(),\n            this.isCurrentPageOnly()\n        );\n        this.cbSelectAll.setDisabled(!hasNodesToSelect);\n        this.refreshSelectAllLabel();\n\n        this.processingEventFromCheckbox = false;\n    }\n\n    private refreshSelectAllLabel(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const checked = this.cbSelectAll.getValue();\n        const ariaStatus = checked ? translate('ariaChecked', 'checked') : translate('ariaUnchecked', 'unchecked');\n        const ariaLabel = translate('ariaRowSelectAll', 'Press Space to toggle all rows selection');\n\n        if (!this.cbSelectAllVisible) {\n            this.headerCellCtrl.setAriaDescriptionProperty('selectAll', null);\n        } else {\n            this.headerCellCtrl.setAriaDescriptionProperty('selectAll', `${ariaLabel} (${ariaStatus})`);\n        }\n\n        this.cbSelectAll.setInputAriaLabel(`${ariaLabel} (${ariaStatus})`);\n        this.headerCellCtrl.announceAriaDescription();\n    }\n\n    private checkSelectionType(feature: string): boolean {\n        const isMultiSelect = this.gos.get('rowSelection') === 'multiple';\n\n        if (!isMultiSelect) {\n            _warnOnce(`${feature} is only available if using 'multiple' rowSelection.`);\n            return false;\n        }\n        return true;\n    }\n\n    private checkRightRowModelType(feature: string): boolean {\n        const rowModelType = this.rowModel.getType();\n        const rowModelMatches = rowModelType === 'clientSide' || rowModelType === 'serverSide';\n\n        if (!rowModelMatches) {\n            _warnOnce(\n                `${feature} is only available if using 'clientSide' or 'serverSide' rowModelType, you are using ${rowModelType}.`\n            );\n            return false;\n        }\n        return true;\n    }\n\n    private onCbSelectAll(): void {\n        if (this.processingEventFromCheckbox) {\n            return;\n        }\n        if (!this.cbSelectAllVisible) {\n            return;\n        }\n\n        const value = this.cbSelectAll.getValue();\n        const justFiltered = this.isFilteredOnly();\n        const justCurrentPage = this.isCurrentPageOnly();\n\n        let source: SelectionEventSourceType = 'uiSelectAll';\n        if (justCurrentPage) {\n            source = 'uiSelectAllCurrentPage';\n        } else if (justFiltered) {\n            source = 'uiSelectAllFiltered';\n        }\n\n        const params = {\n            source,\n            justFiltered,\n            justCurrentPage,\n        };\n        if (value) {\n            this.selectionService.selectAllRowNodes(params);\n        } else {\n            this.selectionService.deselectAllRowNodes(params);\n        }\n    }\n\n    private isCheckboxSelection(): boolean {\n        let result = this.column.getColDef().headerCheckboxSelection;\n\n        if (typeof result === 'function') {\n            const func = result as (params: HeaderCheckboxSelectionCallbackParams) => boolean;\n            const params: HeaderCheckboxSelectionCallbackParams = this.gos.addGridCommonParams({\n                column: this.column,\n                colDef: this.column.getColDef(),\n            });\n            result = func(params);\n        }\n\n        if (result) {\n            return (\n                this.checkRightRowModelType('headerCheckboxSelection') &&\n                this.checkSelectionType('headerCheckboxSelection')\n            );\n        }\n\n        return false;\n    }\n\n    private isFilteredOnly(): boolean {\n        return !!this.column.getColDef().headerCheckboxSelectionFilteredOnly;\n    }\n\n    private isCurrentPageOnly(): boolean {\n        return !!this.column.getColDef().headerCheckboxSelectionCurrentPageOnly;\n    }\n}\n", "import type { UserCompDetails } from '../../../components/framework/userComponentFactory';\nimport { HorizontalDirection } from '../../../constants/direction';\nimport { KeyCode } from '../../../constants/keyCode';\nimport type { BeanCollection } from '../../../context/context';\nimport type { DragItem } from '../../../dragAndDrop/dragAndDropService';\nimport { DragSourceType } from '../../../dragAndDrop/dragAndDropService';\nimport type { AgColumn } from '../../../entities/agColumn';\nimport type { SortDirection } from '../../../entities/colDef';\nimport type { ColumnHeaderMouseLeaveEvent, ColumnHeaderMouseOverEvent } from '../../../events';\nimport type { WithoutGridCommon } from '../../../interfaces/iCommon';\nimport { SetLeftFeature } from '../../../rendering/features/setLeftFeature';\nimport type { ColumnSortState } from '../../../utils/aria';\nimport { _getAriaSortState } from '../../../utils/aria';\nimport { _getElementSize } from '../../../utils/dom';\nimport { ManagedFocusFeature } from '../../../widgets/managedFocusFeature';\nimport type { ITooltipFeatureCtrl } from '../../../widgets/tooltipFeature';\nimport { TooltipFeature } from '../../../widgets/tooltipFeature';\nimport { attemptMoveColumns, normaliseX } from '../../columnMoveHelper';\nimport type { HeaderRowCtrl } from '../../row/headerRowCtrl';\nimport type { IAbstractHeaderCellComp } from '../abstractCell/abstractHeaderCellCtrl';\nimport { AbstractHeaderCellCtrl } from '../abstractCell/abstractHeaderCellCtrl';\nimport { _getHeaderClassesFromColDef } from '../cssClassApplier';\nimport { HoverFeature } from '../hoverFeature';\nimport type { IHeader, IHeaderParams } from './headerComp';\nimport { HeaderComp } from './headerComp';\nimport { ResizeFeature } from './resizeFeature';\nimport { SelectAllFeature } from './selectAllFeature';\n\nexport interface IHeaderCellComp extends IAbstractHeaderCellComp {\n    setWidth(width: string): void;\n    setAriaSort(sort?: ColumnSortState): void;\n    setUserCompDetails(compDetails: UserCompDetails): void;\n    getUserCompInstance(): IHeader | undefined;\n}\n\ntype HeaderAriaDescriptionKey = 'filter' | 'menu' | 'sort' | 'selectAll' | 'filterButton';\n\nexport class HeaderCellCtrl extends AbstractHeaderCellCtrl<IHeaderCellComp, AgColumn, ResizeFeature> {\n    private refreshFunctions: (() => void)[] = [];\n    private selectAllFeature: SelectAllFeature;\n\n    private sortable: boolean | null | undefined;\n    private displayName: string | null;\n    private draggable: boolean;\n    private menuEnabled: boolean;\n    private openFilterEnabled: boolean;\n    private dragSourceElement: HTMLElement | undefined;\n\n    private userCompDetails: UserCompDetails;\n\n    private userHeaderClasses: Set<string> = new Set();\n    private ariaDescriptionProperties = new Map<HeaderAriaDescriptionKey, string>();\n    private tooltipFeature: TooltipFeature | undefined;\n\n    constructor(column: AgColumn, beans: BeanCollection, parentRowCtrl: HeaderRowCtrl) {\n        super(column, beans, parentRowCtrl);\n        this.column = column;\n    }\n\n    public setComp(\n        comp: IHeaderCellComp,\n        eGui: HTMLElement,\n        eResize: HTMLElement,\n        eHeaderCompWrapper: HTMLElement\n    ): void {\n        this.comp = comp;\n\n        this.setGui(eGui);\n        this.updateState();\n        this.setupWidth();\n        this.setupMovingCss();\n        this.setupMenuClass();\n        this.setupSortableClass();\n        this.setupWrapTextClass();\n        this.refreshSpanHeaderHeight();\n        this.setupAutoHeight(eHeaderCompWrapper);\n        this.addColumnHoverListener();\n        this.setupFilterClass();\n        this.setupClassesFromColDef();\n        this.setupTooltip();\n        this.addActiveHeaderMouseListeners();\n        this.setupSelectAll();\n        this.setupUserComp();\n        this.refreshAria();\n\n        this.resizeFeature = this.createManagedBean(\n            new ResizeFeature(this.getPinned(), this.column, eResize, comp, this)\n        );\n        this.createManagedBean(new HoverFeature([this.column], eGui));\n        this.createManagedBean(new SetLeftFeature(this.column, eGui, this.beans));\n        this.createManagedBean(\n            new ManagedFocusFeature(eGui, {\n                shouldStopEventPropagation: (e) => this.shouldStopEventPropagation(e),\n                onTabKeyDown: () => null,\n                handleKeyDown: this.handleKeyDown.bind(this),\n                onFocusIn: this.onFocusIn.bind(this),\n                onFocusOut: this.onFocusOut.bind(this),\n            })\n        );\n\n        this.addResizeAndMoveKeyboardListeners();\n\n        this.addManagedPropertyListeners(\n            ['suppressMovableColumns', 'suppressMenuHide', 'suppressAggFuncInHeader'],\n            this.refresh.bind(this)\n        );\n        this.addManagedListeners(this.column, { colDefChanged: this.refresh.bind(this) });\n\n        this.addManagedEventListeners({\n            columnValueChanged: this.onColumnValueChanged.bind(this),\n            columnRowGroupChanged: this.onColumnRowGroupChanged.bind(this),\n            columnPivotChanged: this.onColumnPivotChanged.bind(this),\n            headerHeightChanged: this.onHeaderHeightChanged.bind(this),\n        });\n    }\n\n    protected resizeHeader(delta: number, shiftKey: boolean): void {\n        if (!this.column.isResizable()) {\n            return;\n        }\n\n        const actualWidth = this.column.getActualWidth();\n        const minWidth = this.column.getMinWidth();\n        const maxWidth = this.column.getMaxWidth();\n\n        const newWidth = Math.min(Math.max(actualWidth + delta, minWidth), maxWidth);\n\n        this.beans.columnSizeService.setColumnWidths(\n            [{ key: this.column, newWidth }],\n            shiftKey,\n            true,\n            'uiColumnResized'\n        );\n    }\n\n    protected moveHeader(hDirection: HorizontalDirection): void {\n        const { eGui, column, gos, ctrlsService } = this;\n        const pinned = this.getPinned();\n        const left = eGui.getBoundingClientRect().left;\n        const width = column.getActualWidth();\n        const isRtl = gos.get('enableRtl');\n        const isLeft = (hDirection === HorizontalDirection.Left) !== isRtl;\n\n        const xPosition = normaliseX(isLeft ? left - 20 : left + width + 20, pinned, true, gos, ctrlsService);\n\n        attemptMoveColumns({\n            allMovingColumns: [column],\n            isFromHeader: true,\n            hDirection,\n            xPosition,\n            pinned,\n            fromEnter: false,\n            fakeEvent: false,\n            gos,\n            columnModel: this.beans.columnModel,\n            columnMoveService: this.beans.columnMoveService,\n            presentedColsService: this.beans.visibleColsService,\n        });\n\n        ctrlsService.getGridBodyCtrl().getScrollFeature().ensureColumnVisible(column, 'auto');\n    }\n\n    private setupUserComp(): void {\n        const compDetails = this.lookupUserCompDetails();\n        this.setCompDetails(compDetails);\n    }\n\n    private setCompDetails(compDetails: UserCompDetails): void {\n        this.userCompDetails = compDetails;\n        this.comp.setUserCompDetails(compDetails);\n    }\n\n    private lookupUserCompDetails(): UserCompDetails {\n        const params = this.createParams();\n        const colDef = this.column.getColDef();\n        return this.userComponentFactory.getHeaderCompDetails(colDef, params)!;\n    }\n\n    private createParams(): IHeaderParams {\n        const params: IHeaderParams = this.gos.addGridCommonParams({\n            column: this.column,\n            displayName: this.displayName!,\n            enableSorting: this.column.isSortable(),\n            enableMenu: this.menuEnabled,\n            enableFilterButton: this.openFilterEnabled && this.menuService.isHeaderFilterButtonEnabled(this.column),\n            enableFilterIcon: !this.openFilterEnabled || this.menuService.isLegacyMenuEnabled(),\n            showColumnMenu: (buttonElement: HTMLElement) => {\n                this.menuService.showColumnMenu({\n                    column: this.column,\n                    buttonElement,\n                    positionBy: 'button',\n                });\n            },\n            showColumnMenuAfterMouseClick: (mouseEvent: MouseEvent | Touch) => {\n                this.menuService.showColumnMenu({\n                    column: this.column,\n                    mouseEvent,\n                    positionBy: 'mouse',\n                });\n            },\n            showFilter: (buttonElement: HTMLElement) => {\n                this.menuService.showFilterMenu({\n                    column: this.column,\n                    buttonElement: buttonElement,\n                    containerType: 'columnFilter',\n                    positionBy: 'button',\n                });\n            },\n            progressSort: (multiSort?: boolean) => {\n                this.beans.sortController.progressSort(this.column, !!multiSort, 'uiColumnSorted');\n            },\n            setSort: (sort: SortDirection, multiSort?: boolean) => {\n                this.beans.sortController.setSortForColumn(this.column, sort, !!multiSort, 'uiColumnSorted');\n            },\n            eGridHeader: this.getGui(),\n            setTooltip: (value: string, shouldDisplayTooltip: () => boolean) => {\n                this.setupTooltip(value, shouldDisplayTooltip);\n            },\n        });\n\n        return params;\n    }\n\n    private setupSelectAll(): void {\n        this.selectAllFeature = this.createManagedBean(new SelectAllFeature(this.column));\n        this.selectAllFeature.setComp(this);\n    }\n\n    public getSelectAllGui(): HTMLElement {\n        return this.selectAllFeature.getCheckboxGui();\n    }\n\n    protected override handleKeyDown(e: KeyboardEvent): void {\n        super.handleKeyDown(e);\n\n        if (e.key === KeyCode.SPACE) {\n            this.selectAllFeature.onSpaceKeyDown(e);\n        }\n        if (e.key === KeyCode.ENTER) {\n            this.onEnterKeyDown(e);\n        }\n        if (e.key === KeyCode.DOWN && e.altKey) {\n            this.showMenuOnKeyPress(e, false);\n        }\n    }\n\n    private onEnterKeyDown(e: KeyboardEvent): void {\n        if (e.ctrlKey || e.metaKey) {\n            this.showMenuOnKeyPress(e, true);\n        } else if (this.sortable) {\n            const multiSort = e.shiftKey;\n            this.beans.sortController.progressSort(this.column, multiSort, 'uiColumnSorted');\n        }\n    }\n\n    private showMenuOnKeyPress(e: KeyboardEvent, isFilterShortcut: boolean): void {\n        const headerComp = this.comp.getUserCompInstance();\n        if (!headerComp || !(headerComp instanceof HeaderComp)) {\n            return;\n        }\n\n        // the header comp knows what features are enabled, so let it handle the shortcut\n        if (headerComp.onMenuKeyboardShortcut(isFilterShortcut)) {\n            e.preventDefault();\n        }\n    }\n\n    private onFocusIn(e: FocusEvent) {\n        if (!this.getGui().contains(e.relatedTarget as HTMLElement)) {\n            const rowIndex = this.getRowIndex();\n            this.focusService.setFocusedHeader(rowIndex, this.column);\n            this.announceAriaDescription();\n        }\n\n        if (this.focusService.isKeyboardMode()) {\n            this.setActiveHeader(true);\n        }\n    }\n\n    private onFocusOut(e: FocusEvent) {\n        if (this.getGui().contains(e.relatedTarget as HTMLElement)) {\n            return;\n        }\n\n        this.setActiveHeader(false);\n    }\n\n    private setupTooltip(value?: string, shouldDisplayTooltip?: () => boolean): void {\n        if (this.tooltipFeature) {\n            this.tooltipFeature = this.destroyBean(this.tooltipFeature);\n        }\n\n        const isTooltipWhenTruncated = this.gos.get('tooltipShowMode') === 'whenTruncated';\n        const eGui = this.eGui;\n        const colDef = this.column.getColDef();\n\n        if (!shouldDisplayTooltip && isTooltipWhenTruncated && !colDef.headerComponent) {\n            shouldDisplayTooltip = () => {\n                const textEl = eGui.querySelector('.ag-header-cell-text');\n                if (!textEl) {\n                    return true;\n                }\n\n                return textEl.scrollWidth > textEl.clientWidth;\n            };\n        }\n\n        const tooltipCtrl: ITooltipFeatureCtrl = {\n            getColumn: () => this.column,\n            getColDef: () => this.column.getColDef(),\n            getGui: () => eGui,\n            getLocation: () => 'header',\n            getTooltipValue: () => {\n                if (value != null) {\n                    return value;\n                }\n\n                const res = this.column.getColDef().headerTooltip;\n                return res;\n            },\n            shouldDisplayTooltip,\n        };\n\n        const tooltipFeature = this.createManagedBean(new TooltipFeature(tooltipCtrl));\n        this.refreshFunctions.push(() => tooltipFeature.refreshToolTip());\n    }\n\n    private setupClassesFromColDef(): void {\n        const refreshHeaderClasses = () => {\n            const colDef = this.column.getColDef();\n            const classes = _getHeaderClassesFromColDef(colDef, this.gos, this.column, null);\n\n            const oldClasses = this.userHeaderClasses;\n            this.userHeaderClasses = new Set(classes);\n\n            classes.forEach((c) => {\n                if (oldClasses.has(c)) {\n                    // class already added, no need to apply it, but remove from old set\n                    oldClasses.delete(c);\n                } else {\n                    // class new since last time, so apply it\n                    this.comp.addOrRemoveCssClass(c, true);\n                }\n            });\n\n            // now old set only has classes that were applied last time, but not this time, so remove them\n            oldClasses.forEach((c) => this.comp.addOrRemoveCssClass(c, false));\n        };\n\n        this.refreshFunctions.push(refreshHeaderClasses);\n        refreshHeaderClasses();\n    }\n\n    public setDragSource(eSource: HTMLElement | undefined): void {\n        this.dragSourceElement = eSource;\n        this.removeDragSource();\n\n        if (!eSource || !this.draggable) {\n            return;\n        }\n\n        const { column, beans, displayName, dragAndDropService, gos } = this;\n        const { columnModel } = beans;\n\n        let hideColumnOnExit = !this.gos.get('suppressDragLeaveHidesColumns');\n        const dragSource = (this.dragSource = {\n            type: DragSourceType.HeaderCell,\n            eElement: eSource,\n            getDefaultIconName: () => (hideColumnOnExit ? 'hide' : 'notAllowed'),\n            getDragItem: () => this.createDragItem(column),\n            dragItemName: displayName,\n            onDragStarted: () => {\n                hideColumnOnExit = !gos.get('suppressDragLeaveHidesColumns');\n                column.setMoving(true, 'uiColumnMoved');\n            },\n            onDragStopped: () => column.setMoving(false, 'uiColumnMoved'),\n            onGridEnter: (dragItem) => {\n                if (hideColumnOnExit) {\n                    const unlockedColumns = dragItem?.columns?.filter((col) => !col.getColDef().lockVisible) || [];\n                    columnModel.setColsVisible(unlockedColumns as AgColumn[], true, 'uiColumnMoved');\n                }\n            },\n            onGridExit: (dragItem) => {\n                if (hideColumnOnExit) {\n                    const unlockedColumns = dragItem?.columns?.filter((col) => !col.getColDef().lockVisible) || [];\n                    columnModel.setColsVisible(unlockedColumns as AgColumn[], false, 'uiColumnMoved');\n                }\n            },\n        });\n\n        dragAndDropService.addDragSource(dragSource, true);\n    }\n\n    private createDragItem(column: AgColumn): DragItem {\n        const visibleState: { [key: string]: boolean } = {};\n        visibleState[column.getId()] = column.isVisible();\n\n        return {\n            columns: [column],\n            visibleState: visibleState,\n        };\n    }\n\n    private updateState(): void {\n        this.menuEnabled = this.menuService.isColumnMenuInHeaderEnabled(this.column);\n        this.openFilterEnabled = this.menuService.isFilterMenuInHeaderEnabled(this.column);\n        this.sortable = this.column.isSortable();\n        this.displayName = this.calculateDisplayName();\n        this.draggable = this.workOutDraggable();\n    }\n\n    public addRefreshFunction(func: () => void): void {\n        this.refreshFunctions.push(func);\n    }\n\n    private refresh(): void {\n        this.updateState();\n        this.refreshHeaderComp();\n        this.refreshAria();\n        this.refreshFunctions.forEach((f) => f());\n    }\n\n    private refreshHeaderComp(): void {\n        const newCompDetails = this.lookupUserCompDetails();\n\n        const compInstance = this.comp.getUserCompInstance();\n\n        // only try refresh if old comp exists adn it is the correct type\n        const attemptRefresh =\n            compInstance != null && this.userCompDetails.componentClass == newCompDetails.componentClass;\n\n        const headerCompRefreshed = attemptRefresh ? this.attemptHeaderCompRefresh(newCompDetails.params) : false;\n\n        if (headerCompRefreshed) {\n            // we do this as a refresh happens after colDefs change, and it's possible the column has had it's\n            // draggable property toggled. no need to call this if not refreshing, as setDragSource is done\n            // as part of appendHeaderComp\n            this.setDragSource(this.dragSourceElement);\n        } else {\n            this.setCompDetails(newCompDetails);\n        }\n    }\n\n    public attemptHeaderCompRefresh(params: IHeaderParams): boolean {\n        const headerComp = this.comp.getUserCompInstance();\n        if (!headerComp) {\n            return false;\n        }\n\n        // if no refresh method, then we want to replace the headerComp\n        if (!headerComp.refresh) {\n            return false;\n        }\n\n        const res = headerComp.refresh(params);\n\n        return res;\n    }\n\n    private calculateDisplayName(): string | null {\n        return this.beans.columnNameService.getDisplayNameForColumn(this.column, 'header', true);\n    }\n\n    private checkDisplayName(): void {\n        // display name can change if aggFunc different, eg sum(Gold) is now max(Gold)\n        if (this.displayName !== this.calculateDisplayName()) {\n            this.refresh();\n        }\n    }\n\n    private workOutDraggable(): boolean {\n        const colDef = this.column.getColDef();\n        const isSuppressMovableColumns = this.gos.get('suppressMovableColumns');\n\n        const colCanMove = !isSuppressMovableColumns && !colDef.suppressMovable && !colDef.lockPosition;\n\n        // we should still be allowed drag the column, even if it can't be moved, if the column\n        // can be dragged to a rowGroup or pivot drop zone\n        return !!colCanMove || !!colDef.enableRowGroup || !!colDef.enablePivot;\n    }\n\n    private onColumnRowGroupChanged(): void {\n        this.checkDisplayName();\n    }\n\n    private onColumnPivotChanged(): void {\n        this.checkDisplayName();\n    }\n\n    private onColumnValueChanged(): void {\n        this.checkDisplayName();\n    }\n\n    private setupWidth(): void {\n        const listener = () => {\n            const columnWidth = this.column.getActualWidth();\n            this.comp.setWidth(`${columnWidth}px`);\n        };\n\n        this.addManagedListeners(this.column, { widthChanged: listener });\n        listener();\n    }\n\n    private setupMovingCss(): void {\n        const listener = () => {\n            // this is what makes the header go dark when it is been moved (gives impression to\n            // user that the column was picked up).\n            this.comp.addOrRemoveCssClass('ag-header-cell-moving', this.column.isMoving());\n        };\n\n        this.addManagedListeners(this.column, { movingChanged: listener });\n        listener();\n    }\n\n    private setupMenuClass(): void {\n        const listener = () => {\n            this.comp.addOrRemoveCssClass('ag-column-menu-visible', this.column.isMenuVisible());\n        };\n\n        this.addManagedListeners(this.column, { menuVisibleChanged: listener });\n        listener();\n    }\n\n    private setupSortableClass(): void {\n        const updateSortableCssClass = () => {\n            this.comp.addOrRemoveCssClass('ag-header-cell-sortable', !!this.sortable);\n        };\n\n        updateSortableCssClass();\n\n        this.addRefreshFunction(updateSortableCssClass);\n        this.addManagedEventListeners({ sortChanged: this.refreshAriaSort.bind(this) });\n    }\n\n    private setupFilterClass(): void {\n        const listener = () => {\n            const isFilterActive = this.column.isFilterActive();\n            this.comp.addOrRemoveCssClass('ag-header-cell-filtered', isFilterActive);\n            this.refreshAria();\n        };\n\n        this.addManagedListeners(this.column, { filterActiveChanged: listener });\n        listener();\n    }\n\n    private setupWrapTextClass() {\n        const listener = () => {\n            const wrapText = !!this.column.getColDef().wrapHeaderText;\n            this.comp.addOrRemoveCssClass('ag-header-cell-wrap-text', wrapText);\n        };\n        listener();\n        this.addRefreshFunction(listener);\n    }\n\n    protected override onDisplayedColumnsChanged(): void {\n        super.onDisplayedColumnsChanged();\n        if (!this.isAlive()) {\n            return;\n        }\n        this.onHeaderHeightChanged();\n    }\n\n    private onHeaderHeightChanged() {\n        this.refreshSpanHeaderHeight();\n    }\n\n    private refreshSpanHeaderHeight() {\n        const { eGui, column, comp, beans } = this;\n        if (!column.isSpanHeaderHeight()) {\n            eGui.style.removeProperty('top');\n            eGui.style.removeProperty('height');\n            comp.addOrRemoveCssClass('ag-header-span-height', false);\n            comp.addOrRemoveCssClass('ag-header-span-total', false);\n            return;\n        }\n\n        const { numberOfParents, isSpanningTotal } = this.column.getColumnGroupPaddingInfo();\n\n        comp.addOrRemoveCssClass('ag-header-span-height', numberOfParents > 0);\n\n        const { columnModel } = beans;\n\n        const headerHeight = columnModel.getColumnHeaderRowHeight();\n        if (numberOfParents === 0) {\n            // if spanning has stopped then need to reset these values.\n            comp.addOrRemoveCssClass('ag-header-span-total', false);\n            eGui.style.setProperty('top', `0px`);\n            eGui.style.setProperty('height', `${headerHeight}px`);\n            return;\n        }\n\n        comp.addOrRemoveCssClass('ag-header-span-total', isSpanningTotal);\n\n        const pivotMode = columnModel.isPivotMode();\n        const groupHeaderHeight = pivotMode\n            ? columnModel.getPivotGroupHeaderHeight()\n            : columnModel.getGroupHeaderHeight();\n\n        const extraHeight = numberOfParents * groupHeaderHeight;\n\n        eGui.style.setProperty('top', `${-extraHeight}px`);\n        eGui.style.setProperty('height', `${headerHeight + extraHeight}px`);\n    }\n\n    private setupAutoHeight(wrapperElement: HTMLElement) {\n        const { columnModel, resizeObserverService } = this.beans;\n        const measureHeight = (timesCalled: number) => {\n            if (!this.isAlive()) {\n                return;\n            }\n\n            const { paddingTop, paddingBottom, borderBottomWidth, borderTopWidth } = _getElementSize(this.getGui());\n            const extraHeight = paddingTop + paddingBottom + borderBottomWidth + borderTopWidth;\n\n            const wrapperHeight = wrapperElement.offsetHeight;\n            const autoHeight = wrapperHeight + extraHeight;\n\n            if (timesCalled < 5) {\n                // if not in doc yet, means framework not yet inserted, so wait for next VM turn,\n                // maybe it will be ready next VM turn\n                const doc = this.beans.gos.getDocument();\n                const notYetInDom = !doc || !doc.contains(wrapperElement);\n\n                // this happens in React, where React hasn't put any content in. we say 'possibly'\n                // as a) may not be React and b) the cell could be empty anyway\n                const possiblyNoContentYet = autoHeight == 0;\n\n                if (notYetInDom || possiblyNoContentYet) {\n                    window.setTimeout(() => measureHeight(timesCalled + 1), 0);\n                    return;\n                }\n            }\n            columnModel.setColHeaderHeight(this.column, autoHeight);\n        };\n\n        let isMeasuring = false;\n        let stopResizeObserver: (() => void) | undefined;\n\n        const checkMeasuring = () => {\n            const newValue = this.column.isAutoHeaderHeight();\n\n            if (newValue && !isMeasuring) {\n                startMeasuring();\n            }\n            if (!newValue && isMeasuring) {\n                stopMeasuring();\n            }\n        };\n\n        const startMeasuring = () => {\n            isMeasuring = true;\n            measureHeight(0);\n            this.comp.addOrRemoveCssClass('ag-header-cell-auto-height', true);\n            stopResizeObserver = resizeObserverService.observeResize(wrapperElement, () => measureHeight(0));\n        };\n\n        const stopMeasuring = () => {\n            isMeasuring = false;\n            if (stopResizeObserver) {\n                stopResizeObserver();\n            }\n            this.comp.addOrRemoveCssClass('ag-header-cell-auto-height', false);\n            stopResizeObserver = undefined;\n        };\n\n        checkMeasuring();\n\n        this.addDestroyFunc(() => stopMeasuring());\n\n        // In theory we could rely on the resize observer for everything - but since it's debounced\n        // it can be a little janky for smooth movement. in this case its better to react to our own events\n        // And unfortunately we cant _just_ rely on our own events, since custom components can change whenever\n        this.addManagedListeners(this.column, { widthChanged: () => isMeasuring && measureHeight(0) });\n        // Displaying the sort icon changes the available area for text, so sort changes can affect height\n        this.addManagedEventListeners({\n            sortChanged: () => {\n                // Rendering changes for sort, happen after the event... not ideal\n                if (isMeasuring) {\n                    window.setTimeout(() => measureHeight(0));\n                }\n            },\n        });\n        this.addRefreshFunction(checkMeasuring);\n    }\n\n    private refreshAriaSort(): void {\n        if (this.sortable) {\n            const translate = this.localeService.getLocaleTextFunc();\n            const sort = this.beans.sortController.getDisplaySortForColumn(this.column) || null;\n            this.comp.setAriaSort(_getAriaSortState(sort));\n            this.setAriaDescriptionProperty('sort', translate('ariaSortableColumn', 'Press ENTER to sort'));\n        } else {\n            this.comp.setAriaSort();\n            this.setAriaDescriptionProperty('sort', null);\n        }\n    }\n\n    private refreshAriaMenu(): void {\n        if (this.menuEnabled) {\n            const translate = this.localeService.getLocaleTextFunc();\n            this.setAriaDescriptionProperty('menu', translate('ariaMenuColumn', 'Press ALT DOWN to open column menu'));\n        } else {\n            this.setAriaDescriptionProperty('menu', null);\n        }\n    }\n\n    private refreshAriaFilterButton(): void {\n        if (this.openFilterEnabled && !this.menuService.isLegacyMenuEnabled()) {\n            const translate = this.localeService.getLocaleTextFunc();\n            this.setAriaDescriptionProperty(\n                'filterButton',\n                translate('ariaFilterColumn', 'Press CTRL ENTER to open filter')\n            );\n        } else {\n            this.setAriaDescriptionProperty('filterButton', null);\n        }\n    }\n\n    private refreshAriaFiltered(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const isFilterActive = this.column.isFilterActive();\n        if (isFilterActive) {\n            this.setAriaDescriptionProperty('filter', translate('ariaColumnFiltered', 'Column Filtered'));\n        } else {\n            this.setAriaDescriptionProperty('filter', null);\n        }\n    }\n\n    public setAriaDescriptionProperty(property: HeaderAriaDescriptionKey, value: string | null): void {\n        if (value != null) {\n            this.ariaDescriptionProperties.set(property, value);\n        } else {\n            this.ariaDescriptionProperties.delete(property);\n        }\n    }\n\n    public announceAriaDescription(): void {\n        if (!this.eGui.contains(this.beans.gos.getActiveDomElement())) {\n            return;\n        }\n        const ariaDescription = Array.from(this.ariaDescriptionProperties.keys())\n            // always announce the filter description first\n            .sort((a: string, b: string) => (a === 'filter' ? -1 : b.charCodeAt(0) - a.charCodeAt(0)))\n            .map((key: HeaderAriaDescriptionKey) => this.ariaDescriptionProperties.get(key))\n            .join('. ');\n\n        this.beans.ariaAnnouncementService.announceValue(ariaDescription);\n    }\n\n    private refreshAria(): void {\n        this.refreshAriaSort();\n        this.refreshAriaMenu();\n        this.refreshAriaFilterButton();\n        this.refreshAriaFiltered();\n    }\n\n    private addColumnHoverListener(): void {\n        const listener = () => {\n            if (!this.gos.get('columnHoverHighlight')) {\n                return;\n            }\n            const isHovered = this.beans.columnHoverService.isHovered(this.column);\n            this.comp.addOrRemoveCssClass('ag-column-hover', isHovered);\n        };\n\n        this.addManagedEventListeners({ columnHoverChanged: listener });\n        listener();\n    }\n\n    public getColId(): string {\n        return this.column.getColId();\n    }\n\n    private addActiveHeaderMouseListeners(): void {\n        const listener = (e: MouseEvent) => this.handleMouseOverChange(e.type === 'mouseenter');\n        const clickListener = () => this.dispatchColumnMouseEvent('columnHeaderClicked', this.column);\n        const contextMenuListener = (event: MouseEvent) =>\n            this.handleContextMenuMouseEvent(event, undefined, this.column);\n\n        this.addManagedListeners(this.getGui(), {\n            mouseenter: listener,\n            mouseleave: listener,\n            click: clickListener,\n            contextmenu: contextMenuListener,\n        });\n    }\n\n    private handleMouseOverChange(isMouseOver: boolean): void {\n        this.setActiveHeader(isMouseOver);\n        const eventType = isMouseOver ? 'columnHeaderMouseOver' : 'columnHeaderMouseLeave';\n\n        const event: WithoutGridCommon<ColumnHeaderMouseOverEvent> | WithoutGridCommon<ColumnHeaderMouseLeaveEvent> = {\n            type: eventType,\n            column: this.column,\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    private setActiveHeader(active: boolean): void {\n        this.comp.addOrRemoveCssClass('ag-header-active', active);\n    }\n\n    public getAnchorElementForMenu(isFilter?: boolean): HTMLElement {\n        const headerComp = this.comp.getUserCompInstance();\n        if (headerComp instanceof HeaderComp) {\n            return headerComp.getAnchorElementForMenu(isFilter);\n        }\n        return this.getGui();\n    }\n\n    public override destroy(): void {\n        super.destroy();\n\n        (this.refreshFunctions as any) = null;\n        (this.selectAllFeature as any) = null;\n        (this.dragSourceElement as any) = null;\n        (this.userCompDetails as any) = null;\n        (this.userHeaderClasses as any) = null;\n        (this.ariaDescriptionProperties as any) = null;\n    }\n}\n", "import type { ColumnAutosizeService } from '../../../columns/columnAutosizeService';\nimport type { ColumnResizeSet, ColumnSizeService } from '../../../columns/columnSizeService';\nimport type { VisibleColsService } from '../../../columns/visibleColsService';\nimport { BeanStub } from '../../../context/beanStub';\nimport type { BeanCollection } from '../../../context/context';\nimport type { AgColumn } from '../../../entities/agColumn';\nimport type { AgColumnGroup } from '../../../entities/agColumnGroup';\nimport type { ColumnEventType } from '../../../events';\nimport type { ColumnPinnedType } from '../../../interfaces/iColumn';\nimport type { AutoWidthCalculator } from '../../../rendering/autoWidthCalculator';\nimport type { HorizontalResizeService } from '../../common/horizontalResizeService';\nimport type { IHeaderResizeFeature } from '../abstractCell/abstractHeaderCellCtrl';\nimport type { IHeaderGroupCellComp } from './headerGroupCellCtrl';\n\ninterface ColumnSizeAndRatios {\n    columnsToResize: AgColumn[];\n    resizeStartWidth: number;\n    resizeRatios: number[];\n    groupAfterColumns?: AgColumn[];\n    groupAfterStartWidth?: number;\n    groupAfterRatios?: number[];\n}\nexport class GroupResizeFeature extends BeanStub implements IHeaderResizeFeature {\n    private horizontalResizeService: HorizontalResizeService;\n    private autoWidthCalculator: AutoWidthCalculator;\n    private visibleColsService: VisibleColsService;\n    private columnSizeService: ColumnSizeService;\n    private columnAutosizeService: ColumnAutosizeService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.horizontalResizeService = beans.horizontalResizeService;\n        this.autoWidthCalculator = beans.autoWidthCalculator;\n        this.visibleColsService = beans.visibleColsService;\n        this.columnSizeService = beans.columnSizeService;\n        this.columnAutosizeService = beans.columnAutosizeService;\n    }\n\n    private eResize: HTMLElement;\n    private columnGroup: AgColumnGroup;\n    private comp: IHeaderGroupCellComp;\n    private pinned: ColumnPinnedType;\n\n    private resizeCols?: AgColumn[];\n    private resizeStartWidth: number;\n    private resizeRatios?: number[];\n\n    private resizeTakeFromCols?: AgColumn[];\n    private resizeTakeFromStartWidth?: number;\n    private resizeTakeFromRatios?: number[];\n\n    constructor(\n        comp: IHeaderGroupCellComp,\n        eResize: HTMLElement,\n        pinned: ColumnPinnedType,\n        columnGroup: AgColumnGroup\n    ) {\n        super();\n\n        this.eResize = eResize;\n        this.comp = comp;\n        this.pinned = pinned;\n        this.columnGroup = columnGroup;\n    }\n\n    public postConstruct(): void {\n        if (!this.columnGroup.isResizable()) {\n            this.comp.setResizableDisplayed(false);\n            return;\n        }\n\n        const finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({\n            eResizeBar: this.eResize,\n            onResizeStart: this.onResizeStart.bind(this),\n            onResizing: this.onResizing.bind(this, false),\n            onResizeEnd: this.onResizing.bind(this, true),\n        });\n\n        this.addDestroyFunc(finishedWithResizeFunc);\n\n        if (!this.gos.get('suppressAutoSize')) {\n            const skipHeaderOnAutoSize = this.gos.get('skipHeaderOnAutoSize');\n\n            this.eResize.addEventListener('dblclick', () => {\n                // get list of all the column keys we are responsible for\n                const keys: string[] = [];\n                const leafCols = this.columnGroup.getDisplayedLeafColumns();\n\n                leafCols.forEach((column) => {\n                    // not all cols in the group may be participating with auto-resize\n                    if (!column.getColDef().suppressAutoSize) {\n                        keys.push(column.getColId());\n                    }\n                });\n\n                if (keys.length > 0) {\n                    this.columnAutosizeService.autoSizeCols({\n                        colKeys: keys,\n                        skipHeader: skipHeaderOnAutoSize,\n                        stopAtGroup: this.columnGroup,\n                        source: 'uiColumnResized',\n                    });\n                }\n\n                this.resizeLeafColumnsToFit('uiColumnResized');\n            });\n        }\n    }\n\n    private onResizeStart(shiftKey: boolean): void {\n        const initialValues = this.getInitialValues(shiftKey);\n        this.storeLocalValues(initialValues);\n        this.toggleColumnResizing(true);\n    }\n\n    public onResizing(finished: boolean, resizeAmount: any, source: ColumnEventType = 'uiColumnResized'): void {\n        const resizeAmountNormalised = this.normaliseDragChange(resizeAmount);\n        const width = this.resizeStartWidth + resizeAmountNormalised;\n\n        this.resizeColumnsFromLocalValues(width, source, finished);\n    }\n\n    public getInitialValues(shiftKey?: boolean): ColumnSizeAndRatios {\n        const columnsToResize = this.getColumnsToResize();\n        const resizeStartWidth = this.getInitialSizeOfColumns(columnsToResize);\n        const resizeRatios = this.getSizeRatiosOfColumns(columnsToResize, resizeStartWidth);\n\n        const columnSizeAndRatios: ColumnSizeAndRatios = {\n            columnsToResize,\n            resizeStartWidth,\n            resizeRatios,\n        };\n\n        let groupAfter: AgColumnGroup | null = null;\n\n        if (shiftKey) {\n            groupAfter = this.visibleColsService.getGroupAtDirection(this.columnGroup, 'After');\n        }\n\n        if (groupAfter) {\n            const takeFromLeafCols = groupAfter.getDisplayedLeafColumns();\n            const groupAfterColumns = (columnSizeAndRatios.groupAfterColumns = takeFromLeafCols.filter((col) =>\n                col.isResizable()\n            ));\n            const groupAfterStartWidth = (columnSizeAndRatios.groupAfterStartWidth =\n                this.getInitialSizeOfColumns(groupAfterColumns));\n            columnSizeAndRatios.groupAfterRatios = this.getSizeRatiosOfColumns(groupAfterColumns, groupAfterStartWidth);\n        } else {\n            columnSizeAndRatios.groupAfterColumns = undefined;\n            columnSizeAndRatios.groupAfterStartWidth = undefined;\n            columnSizeAndRatios.groupAfterRatios = undefined;\n        }\n\n        return columnSizeAndRatios;\n    }\n\n    private storeLocalValues(initialValues: ColumnSizeAndRatios): void {\n        const {\n            columnsToResize,\n            resizeStartWidth,\n            resizeRatios,\n            groupAfterColumns,\n            groupAfterStartWidth,\n            groupAfterRatios,\n        } = initialValues;\n\n        this.resizeCols = columnsToResize;\n        this.resizeStartWidth = resizeStartWidth;\n        this.resizeRatios = resizeRatios;\n\n        this.resizeTakeFromCols = groupAfterColumns;\n        this.resizeTakeFromStartWidth = groupAfterStartWidth;\n        this.resizeTakeFromRatios = groupAfterRatios;\n    }\n\n    private clearLocalValues(): void {\n        this.resizeCols = undefined;\n        this.resizeRatios = undefined;\n\n        this.resizeTakeFromCols = undefined;\n        this.resizeTakeFromRatios = undefined;\n    }\n\n    public resizeLeafColumnsToFit(source: ColumnEventType): void {\n        const preferredSize = this.autoWidthCalculator.getPreferredWidthForColumnGroup(this.columnGroup);\n        const initialValues = this.getInitialValues();\n\n        if (preferredSize > initialValues.resizeStartWidth) {\n            this.resizeColumns(initialValues, preferredSize, source, true);\n        }\n    }\n\n    private resizeColumnsFromLocalValues(totalWidth: number, source: ColumnEventType, finished: boolean = true): void {\n        if (!this.resizeCols || !this.resizeRatios) {\n            return;\n        }\n\n        const initialValues: ColumnSizeAndRatios = {\n            columnsToResize: this.resizeCols,\n            resizeStartWidth: this.resizeStartWidth,\n            resizeRatios: this.resizeRatios,\n            groupAfterColumns: this.resizeTakeFromCols ?? undefined,\n            groupAfterStartWidth: this.resizeTakeFromStartWidth ?? undefined,\n            groupAfterRatios: this.resizeTakeFromRatios ?? undefined,\n        };\n\n        this.resizeColumns(initialValues, totalWidth, source, finished);\n    }\n\n    public resizeColumns(\n        initialValues: ColumnSizeAndRatios,\n        totalWidth: number,\n        source: ColumnEventType,\n        finished: boolean = true\n    ): void {\n        const {\n            columnsToResize,\n            resizeStartWidth,\n            resizeRatios,\n            groupAfterColumns,\n            groupAfterStartWidth,\n            groupAfterRatios,\n        } = initialValues;\n\n        const resizeSets: ColumnResizeSet[] = [];\n\n        resizeSets.push({\n            columns: columnsToResize,\n            ratios: resizeRatios,\n            width: totalWidth,\n        });\n\n        if (groupAfterColumns) {\n            const diff = totalWidth - resizeStartWidth;\n            resizeSets.push({\n                columns: groupAfterColumns,\n                ratios: groupAfterRatios!,\n                width: groupAfterStartWidth! - diff,\n            });\n        }\n\n        this.columnSizeService.resizeColumnSets({\n            resizeSets,\n            finished,\n            source: source,\n        });\n\n        if (finished) {\n            this.toggleColumnResizing(false);\n        }\n    }\n\n    public toggleColumnResizing(resizing: boolean): void {\n        this.comp.addOrRemoveCssClass('ag-column-resizing', resizing);\n    }\n\n    private getColumnsToResize(): AgColumn[] {\n        const leafCols = this.columnGroup.getDisplayedLeafColumns();\n        return leafCols.filter((col) => col.isResizable());\n    }\n\n    private getInitialSizeOfColumns(columns: AgColumn[]): number {\n        return columns.reduce((totalWidth: number, column: AgColumn) => totalWidth + column.getActualWidth(), 0);\n    }\n\n    private getSizeRatiosOfColumns(columns: AgColumn[], initialSizeOfColumns: number): number[] {\n        return columns.map((column) => column.getActualWidth() / initialSizeOfColumns);\n    }\n\n    // optionally inverts the drag, depending on pinned and RTL\n    // note - this method is duplicated in RenderedHeaderCell - should refactor out?\n    private normaliseDragChange(dragChange: number): number {\n        let result = dragChange;\n\n        if (this.gos.get('enableRtl')) {\n            // for RTL, dragging left makes the col bigger, except when pinning left\n            if (this.pinned !== 'left') {\n                result *= -1;\n            }\n        } else if (this.pinned === 'right') {\n            // for LTR (ie normal), dragging left makes the col smaller, except when pinning right\n            result *= -1;\n        }\n\n        return result;\n    }\n\n    public override destroy(): void {\n        super.destroy();\n        this.clearLocalValues();\n    }\n}\n", "import { BeanStub } from '../../../context/beanStub';\nimport type { AgColumnGroup } from '../../../entities/agColumnGroup';\nimport type { IHeaderGroupCellComp } from './headerGroupCellCtrl';\n\nexport class GroupWidthFeature extends BeanStub {\n    private columnGroup: AgColumnGroup;\n    private comp: IHeaderGroupCellComp;\n\n    // the children can change, we keep destroy functions related to listening to the children here\n    private removeChildListenersFuncs: (() => void)[] = [];\n\n    constructor(comp: IHeaderGroupCellComp, columnGroup: AgColumnGroup) {\n        super();\n        this.columnGroup = columnGroup;\n        this.comp = comp;\n    }\n\n    public postConstruct(): void {\n        // we need to listen to changes in child columns, as they impact our width\n        this.addListenersToChildrenColumns();\n\n        // the children belonging to this group can change, so we need to add and remove listeners as they change\n        this.addManagedListeners(this.columnGroup, {\n            displayedChildrenChanged: this.onDisplayedChildrenChanged.bind(this),\n        });\n\n        this.onWidthChanged();\n\n        // the child listeners are not tied to this components life-cycle, as children can get added and removed\n        // to the group - hence they are on a different life-cycle. so we must make sure the existing children\n        // listeners are removed when we finally get destroyed\n        this.addDestroyFunc(this.removeListenersOnChildrenColumns.bind(this));\n    }\n\n    private addListenersToChildrenColumns(): void {\n        // first destroy any old listeners\n        this.removeListenersOnChildrenColumns();\n\n        // now add new listeners to the new set of children\n        const widthChangedListener = this.onWidthChanged.bind(this);\n        this.columnGroup.getLeafColumns().forEach((column) => {\n            column.addEventListener('widthChanged', widthChangedListener);\n            column.addEventListener('visibleChanged', widthChangedListener);\n            this.removeChildListenersFuncs.push(() => {\n                column.removeEventListener('widthChanged', widthChangedListener);\n                column.removeEventListener('visibleChanged', widthChangedListener);\n            });\n        });\n    }\n\n    private removeListenersOnChildrenColumns(): void {\n        this.removeChildListenersFuncs.forEach((func) => func());\n        this.removeChildListenersFuncs = [];\n    }\n\n    private onDisplayedChildrenChanged(): void {\n        this.addListenersToChildrenColumns();\n        this.onWidthChanged();\n    }\n\n    private onWidthChanged(): void {\n        const columnWidth = this.columnGroup.getActualWidth();\n        this.comp.setWidth(`${columnWidth}px`);\n        this.comp.addOrRemoveCssClass('ag-hidden', columnWidth === 0);\n    }\n}\n", "import type { UserCompDetails } from '../../../components/framework/userComponentFactory';\nimport { HorizontalDirection } from '../../../constants/direction';\nimport { KeyCode } from '../../../constants/keyCode';\nimport type { BeanCollection } from '../../../context/context';\nimport type { DragItem } from '../../../dragAndDrop/dragAndDropService';\nimport { DragSourceType } from '../../../dragAndDrop/dragAndDropService';\nimport type { AgColumn } from '../../../entities/agColumn';\nimport type { AgColumnGroup } from '../../../entities/agColumnGroup';\nimport type { ColumnEventType, ColumnHeaderMouseLeaveEvent, ColumnHeaderMouseOverEvent } from '../../../events';\nimport type { HeaderColumnId } from '../../../interfaces/iColumn';\nimport type { WithoutGridCommon } from '../../../interfaces/iCommon';\nimport { SetLeftFeature } from '../../../rendering/features/setLeftFeature';\nimport { _last, _removeFromArray } from '../../../utils/array';\nimport { ManagedFocusFeature } from '../../../widgets/managedFocusFeature';\nimport type { ITooltipFeatureCtrl } from '../../../widgets/tooltipFeature';\nimport { TooltipFeature } from '../../../widgets/tooltipFeature';\nimport { attemptMoveColumns, normaliseX } from '../../columnMoveHelper';\nimport type { HeaderPosition } from '../../common/headerPosition';\nimport type { HeaderRowCtrl } from '../../row/headerRowCtrl';\nimport type { IAbstractHeaderCellComp } from '../abstractCell/abstractHeaderCellCtrl';\nimport { AbstractHeaderCellCtrl } from '../abstractCell/abstractHeaderCellCtrl';\nimport { _getHeaderClassesFromColDef } from '../cssClassApplier';\nimport { HoverFeature } from '../hoverFeature';\nimport { GroupResizeFeature } from './groupResizeFeature';\nimport { GroupWidthFeature } from './groupWidthFeature';\nimport type { IHeaderGroupComp, IHeaderGroupParams } from './headerGroupComp';\n\nexport interface IHeaderGroupCellComp extends IAbstractHeaderCellComp {\n    setResizableDisplayed(displayed: boolean): void;\n    setWidth(width: string): void;\n    setAriaExpanded(expanded: 'true' | 'false' | undefined): void;\n    setUserCompDetails(compDetails: UserCompDetails): void;\n    getUserCompInstance(): IHeaderGroupComp | undefined;\n}\n\nexport class HeaderGroupCellCtrl extends AbstractHeaderCellCtrl<\n    IHeaderGroupCellComp,\n    AgColumnGroup,\n    GroupResizeFeature\n> {\n    private expandable: boolean;\n    private displayName: string | null;\n    private tooltipFeature: TooltipFeature | undefined;\n\n    constructor(columnGroup: AgColumnGroup, beans: BeanCollection, parentRowCtrl: HeaderRowCtrl) {\n        super(columnGroup, beans, parentRowCtrl);\n        this.column = columnGroup;\n    }\n\n    public setComp(comp: IHeaderGroupCellComp, eGui: HTMLElement, eResize: HTMLElement): void {\n        this.comp = comp;\n        this.setGui(eGui);\n\n        this.displayName = this.beans.columnNameService.getDisplayNameForColumnGroup(this.column, 'header');\n\n        this.addClasses();\n        this.setupMovingCss();\n        this.setupExpandable();\n        this.setupTooltip();\n        this.addDestroyFunc(() => {\n            if (this.tooltipFeature) {\n                this.tooltipFeature = this.destroyBean(this.tooltipFeature);\n            }\n        });\n        this.setupUserComp();\n        this.addHeaderMouseListeners();\n\n        const pinned = this.getParentRowCtrl().getPinned();\n        const leafCols = this.column.getProvidedColumnGroup().getLeafColumns();\n\n        this.createManagedBean(new HoverFeature(leafCols, eGui));\n        this.createManagedBean(new SetLeftFeature(this.column, eGui, this.beans));\n        this.createManagedBean(new GroupWidthFeature(comp, this.column));\n        this.resizeFeature = this.createManagedBean(new GroupResizeFeature(comp, eResize, pinned, this.column));\n\n        this.createManagedBean(\n            new ManagedFocusFeature(eGui, {\n                shouldStopEventPropagation: this.shouldStopEventPropagation.bind(this),\n                onTabKeyDown: () => undefined,\n                handleKeyDown: this.handleKeyDown.bind(this),\n                onFocusIn: this.onFocusIn.bind(this),\n            })\n        );\n\n        this.addManagedPropertyListener('suppressMovableColumns', this.onSuppressColMoveChange);\n        this.addResizeAndMoveKeyboardListeners();\n    }\n\n    protected resizeHeader(delta: number, shiftKey: boolean): void {\n        // check to avoid throwing when a component has not been setup yet (React 18)\n        if (!this.resizeFeature) {\n            return;\n        }\n\n        const initialValues = this.resizeFeature.getInitialValues(shiftKey);\n\n        this.resizeFeature.resizeColumns(\n            initialValues,\n            initialValues.resizeStartWidth + delta,\n            'uiColumnResized',\n            true\n        );\n    }\n\n    protected moveHeader(hDirection: HorizontalDirection): void {\n        const { beans, eGui, column, gos, ctrlsService } = this;\n        const isRtl = gos.get('enableRtl');\n        const isLeft = hDirection === HorizontalDirection.Left;\n\n        const pinned = this.getPinned();\n        const rect = eGui.getBoundingClientRect();\n        const left = rect.left;\n        const width = rect.width;\n\n        const xPosition = normaliseX(isLeft !== isRtl ? left - 20 : left + width + 20, pinned, true, gos, ctrlsService);\n\n        const id = column.getGroupId();\n        const headerPosition = this.focusService.getFocusedHeader();\n\n        attemptMoveColumns({\n            allMovingColumns: this.column.getLeafColumns(),\n            isFromHeader: true,\n            hDirection,\n            xPosition,\n            pinned,\n            fromEnter: false,\n            fakeEvent: false,\n            gos: gos,\n            columnModel: beans.columnModel,\n            columnMoveService: beans.columnMoveService,\n            presentedColsService: beans.visibleColsService,\n        });\n\n        const displayedLeafColumns = column.getDisplayedLeafColumns();\n        const targetColumn = isLeft ? displayedLeafColumns[0] : _last(displayedLeafColumns);\n\n        this.ctrlsService.getGridBodyCtrl().getScrollFeature().ensureColumnVisible(targetColumn, 'auto');\n\n        if (!this.isAlive() && headerPosition) {\n            this.restoreFocus(id, column, headerPosition);\n        }\n    }\n\n    private restoreFocus(groupId: any, previousColumnGroup: AgColumnGroup, previousPosition: HeaderPosition): void {\n        const leafCols = previousColumnGroup.getLeafColumns();\n        if (!leafCols.length) {\n            return;\n        }\n        const parent = leafCols[0].getParent();\n        if (!parent) {\n            return;\n        }\n\n        const newColumnGroup = this.findGroupWidthId(parent, groupId);\n        if (newColumnGroup) {\n            this.focusService.focusHeaderPosition({\n                headerPosition: {\n                    ...previousPosition,\n                    column: newColumnGroup,\n                },\n            });\n        }\n    }\n\n    private findGroupWidthId(columnGroup: AgColumnGroup | null, id: any): AgColumnGroup | null {\n        while (columnGroup) {\n            if (columnGroup.getGroupId() === id) {\n                return columnGroup;\n            }\n            columnGroup = columnGroup.getParent();\n        }\n\n        return null;\n    }\n\n    public resizeLeafColumnsToFit(source: ColumnEventType): void {\n        // check to avoid throwing when a component has not been setup yet (React 18)\n        if (!this.resizeFeature) {\n            return;\n        }\n\n        this.resizeFeature.resizeLeafColumnsToFit(source);\n    }\n\n    private setupUserComp(): void {\n        const params: IHeaderGroupParams = this.gos.addGridCommonParams({\n            displayName: this.displayName!,\n            columnGroup: this.column,\n            setExpanded: (expanded: boolean) => {\n                this.beans.columnModel.setColumnGroupOpened(\n                    this.column.getProvidedColumnGroup(),\n                    expanded,\n                    'gridInitializing'\n                );\n            },\n            setTooltip: (value: string, shouldDisplayTooltip: () => boolean) => {\n                this.setupTooltip(value, shouldDisplayTooltip);\n            },\n        });\n\n        const compDetails = this.userComponentFactory.getHeaderGroupCompDetails(params)!;\n        this.comp.setUserCompDetails(compDetails);\n    }\n\n    private addHeaderMouseListeners(): void {\n        const listener = (e: MouseEvent) => this.handleMouseOverChange(e.type === 'mouseenter');\n        const clickListener = () =>\n            this.dispatchColumnMouseEvent('columnHeaderClicked', this.column.getProvidedColumnGroup());\n        const contextMenuListener = (event: MouseEvent) =>\n            this.handleContextMenuMouseEvent(event, undefined, this.column.getProvidedColumnGroup());\n\n        this.addManagedListeners(this.getGui(), {\n            mouseenter: listener,\n            mouseleave: listener,\n            click: clickListener,\n            contextmenu: contextMenuListener,\n        });\n    }\n\n    private handleMouseOverChange(isMouseOver: boolean): void {\n        const eventType = isMouseOver ? 'columnHeaderMouseOver' : 'columnHeaderMouseLeave';\n\n        const event: WithoutGridCommon<ColumnHeaderMouseOverEvent> | WithoutGridCommon<ColumnHeaderMouseLeaveEvent> = {\n            type: eventType,\n            column: this.column.getProvidedColumnGroup(),\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    private setupTooltip(value?: string, shouldDisplayTooltip?: () => boolean): void {\n        if (this.tooltipFeature) {\n            this.tooltipFeature = this.destroyBean(this.tooltipFeature);\n        }\n\n        const colGroupDef = this.column.getColGroupDef();\n        const isTooltipWhenTruncated = this.gos.get('tooltipShowMode') === 'whenTruncated';\n        const eGui = this.eGui;\n\n        if (!shouldDisplayTooltip && isTooltipWhenTruncated && !colGroupDef?.headerGroupComponent) {\n            shouldDisplayTooltip = () => {\n                const textEl = eGui.querySelector('.ag-header-group-text');\n                if (!textEl) {\n                    return true;\n                }\n\n                return textEl.scrollWidth > textEl.clientWidth;\n            };\n        }\n\n        const tooltipCtrl: ITooltipFeatureCtrl = {\n            getColumn: () => this.column,\n            getGui: () => eGui,\n            getLocation: () => 'headerGroup',\n            getTooltipValue: () => value ?? (colGroupDef && colGroupDef.headerTooltip),\n            shouldDisplayTooltip,\n        };\n\n        if (colGroupDef) {\n            tooltipCtrl.getColDef = () => colGroupDef;\n        }\n\n        this.createManagedBean(new TooltipFeature(tooltipCtrl));\n    }\n\n    private setupExpandable(): void {\n        const providedColGroup = this.column.getProvidedColumnGroup();\n\n        this.refreshExpanded();\n\n        const listener = this.refreshExpanded.bind(this);\n        this.addManagedListeners(providedColGroup, {\n            expandedChanged: listener,\n            expandableChanged: listener,\n        });\n    }\n\n    private refreshExpanded(): void {\n        const { column } = this;\n        this.expandable = column.isExpandable();\n        const expanded = column.isExpanded();\n\n        if (this.expandable) {\n            this.comp.setAriaExpanded(expanded ? 'true' : 'false');\n        } else {\n            this.comp.setAriaExpanded(undefined);\n        }\n    }\n\n    public getColId(): HeaderColumnId {\n        return this.column.getUniqueId();\n    }\n\n    private addClasses(): void {\n        const colGroupDef = this.column.getColGroupDef();\n        const classes = _getHeaderClassesFromColDef(colGroupDef, this.gos, null, this.column);\n\n        // having different classes below allows the style to not have a bottom border\n        // on the group header, if no group is specified\n        if (this.column.isPadding()) {\n            classes.push('ag-header-group-cell-no-group');\n            const leafCols = this.column.getLeafColumns();\n            if (leafCols.every((col) => col.isSpanHeaderHeight())) {\n                classes.push('ag-header-span-height');\n            }\n        } else {\n            classes.push('ag-header-group-cell-with-group');\n        }\n\n        classes.forEach((c) => this.comp.addOrRemoveCssClass(c, true));\n    }\n\n    private setupMovingCss(): void {\n        const providedColumnGroup = this.column.getProvidedColumnGroup();\n        const leafColumns = providedColumnGroup.getLeafColumns();\n\n        // function adds or removes the moving css, based on if the col is moving.\n        // this is what makes the header go dark when it is been moved (gives impression to\n        // user that the column was picked up).\n        const listener = () => this.comp.addOrRemoveCssClass('ag-header-cell-moving', this.column.isMoving());\n\n        leafColumns.forEach((col) => {\n            this.addManagedListeners(col, { movingChanged: listener });\n        });\n\n        listener();\n    }\n\n    private onSuppressColMoveChange = () => {\n        if (!this.isAlive() || this.isSuppressMoving()) {\n            this.removeDragSource();\n        } else {\n            if (!this.dragSource) {\n                const eGui = this.getGui();\n                this.setDragSource(eGui);\n            }\n        }\n    };\n\n    private onFocusIn(e: FocusEvent) {\n        if (!this.eGui.contains(e.relatedTarget as HTMLElement)) {\n            const rowIndex = this.getRowIndex();\n            this.beans.focusService.setFocusedHeader(rowIndex, this.column);\n        }\n    }\n\n    protected override handleKeyDown(e: KeyboardEvent): void {\n        super.handleKeyDown(e);\n\n        const wrapperHasFocus = this.getWrapperHasFocus();\n\n        if (!this.expandable || !wrapperHasFocus) {\n            return;\n        }\n\n        if (e.key === KeyCode.ENTER) {\n            const column = this.column;\n            const newExpandedValue = !column.isExpanded();\n\n            this.beans.columnModel.setColumnGroupOpened(\n                column.getProvidedColumnGroup(),\n                newExpandedValue,\n                'uiColumnExpanded'\n            );\n        }\n    }\n\n    // unlike columns, this will only get called once, as we don't react on props on column groups\n    // (we will always destroy and recreate this comp if something changes)\n    public setDragSource(eHeaderGroup: HTMLElement): void {\n        if (!this.isAlive() || this.isSuppressMoving()) {\n            return;\n        }\n\n        this.removeDragSource();\n\n        if (!eHeaderGroup) {\n            return;\n        }\n\n        const { beans, column, displayName, gos, dragAndDropService } = this;\n        const { columnModel } = beans;\n\n        const allLeafColumns = column.getProvidedColumnGroup().getLeafColumns();\n        let hideColumnOnExit = !gos.get('suppressDragLeaveHidesColumns');\n\n        const dragSource = (this.dragSource = {\n            type: DragSourceType.HeaderCell,\n            eElement: eHeaderGroup,\n            getDefaultIconName: () => (hideColumnOnExit ? 'hide' : 'notAllowed'),\n            dragItemName: displayName,\n            // we add in the original group leaf columns, so we move both visible and non-visible items\n            getDragItem: () => this.getDragItemForGroup(column),\n            onDragStarted: () => {\n                hideColumnOnExit = !gos.get('suppressDragLeaveHidesColumns');\n                allLeafColumns.forEach((col) => col.setMoving(true, 'uiColumnDragged'));\n            },\n            onDragStopped: () => allLeafColumns.forEach((col) => col.setMoving(false, 'uiColumnDragged')),\n            onGridEnter: (dragItem) => {\n                if (hideColumnOnExit) {\n                    const unlockedColumns = dragItem?.columns?.filter((col) => !col.getColDef().lockVisible) || [];\n                    columnModel.setColsVisible(unlockedColumns as AgColumn[], true, 'uiColumnMoved');\n                }\n            },\n            onGridExit: (dragItem) => {\n                if (hideColumnOnExit) {\n                    const unlockedColumns = dragItem?.columns?.filter((col) => !col.getColDef().lockVisible) || [];\n                    columnModel.setColsVisible(unlockedColumns as AgColumn[], false, 'uiColumnMoved');\n                }\n            },\n        });\n\n        dragAndDropService.addDragSource(dragSource, true);\n    }\n\n    // when moving the columns, we want to move all the columns (contained within the DragItem) in this group in one go,\n    // and in the order they are currently in the screen.\n    public getDragItemForGroup(columnGroup: AgColumnGroup): DragItem {\n        const allColumnsOriginalOrder = columnGroup.getProvidedColumnGroup().getLeafColumns();\n\n        // capture visible state, used when re-entering grid to dictate which columns should be visible\n        const visibleState: { [key: string]: boolean } = {};\n        allColumnsOriginalOrder.forEach((column) => (visibleState[column.getId()] = column.isVisible()));\n\n        const allColumnsCurrentOrder: AgColumn[] = [];\n        this.beans.visibleColsService.getAllCols().forEach((column) => {\n            if (allColumnsOriginalOrder.indexOf(column) >= 0) {\n                allColumnsCurrentOrder.push(column);\n                _removeFromArray(allColumnsOriginalOrder, column);\n            }\n        });\n\n        // we are left with non-visible columns, stick these in at the end\n        allColumnsOriginalOrder.forEach((column) => allColumnsCurrentOrder.push(column));\n\n        // create and return dragItem\n        return {\n            columns: allColumnsCurrentOrder,\n            visibleState: visibleState,\n        };\n    }\n\n    private isSuppressMoving(): boolean {\n        // if any child is fixed, then don't allow moving\n        let childSuppressesMoving = false;\n        this.column.getLeafColumns().forEach((column) => {\n            if (column.getColDef().suppressMovable || column.getColDef().lockPosition) {\n                childSuppressesMoving = true;\n            }\n        });\n\n        const result = childSuppressesMoving || this.gos.get('suppressMovableColumns');\n\n        return result;\n    }\n}\n", "import { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { AgColumn } from '../../entities/agColumn';\nimport type { AgColumnGroup } from '../../entities/agColumnGroup';\nimport type { BrandedType } from '../../interfaces/brandedType';\nimport type { ColumnPinnedType, HeaderColumnId } from '../../interfaces/iColumn';\nimport { _values } from '../../utils/generic';\nimport type { AbstractHeaderCellCtrl } from '../cells/abstractCell/abstractHeaderCellCtrl';\nimport { HeaderCellCtrl } from '../cells/column/headerCellCtrl';\nimport { HeaderGroupCellCtrl } from '../cells/columnGroup/headerGroupCellCtrl';\nimport type { HeaderFilterCellCtrl } from '../cells/floatingFilter/headerFilterCellCtrl';\nimport { HeaderRowType } from './headerRowComp';\n\nexport interface IHeaderRowComp {\n    setTop(top: string): void;\n    setHeight(height: string): void;\n    setHeaderCtrls(ctrls: AbstractHeaderCellCtrl[], forceOrder: boolean, afterScroll: boolean): void;\n    setWidth(width: string): void;\n}\n\nlet instanceIdSequence = 0;\nexport type HeaderRowCtrlInstanceId = BrandedType<number, 'HeaderRowCtrlInstanceId'>;\n\nexport class HeaderRowCtrl extends BeanStub {\n    private beans: BeanCollection;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.beans = beans;\n    }\n\n    private comp: IHeaderRowComp;\n    private rowIndex: number;\n    private pinned: ColumnPinnedType;\n    private type: HeaderRowType;\n    private headerRowClass: string;\n\n    private instanceId: HeaderRowCtrlInstanceId = instanceIdSequence++ as HeaderRowCtrlInstanceId;\n\n    private headerCellCtrls: Map<HeaderColumnId, AbstractHeaderCellCtrl> | undefined;\n\n    private isPrintLayout: boolean;\n    private isEnsureDomOrder: boolean;\n\n    constructor(rowIndex: number, pinned: ColumnPinnedType, type: HeaderRowType) {\n        super();\n        this.rowIndex = rowIndex;\n        this.pinned = pinned;\n        this.type = type;\n\n        const typeClass =\n            type == HeaderRowType.COLUMN_GROUP\n                ? `ag-header-row-column-group`\n                : type == HeaderRowType.FLOATING_FILTER\n                  ? `ag-header-row-column-filter`\n                  : `ag-header-row-column`;\n        this.headerRowClass = `ag-header-row ${typeClass}`;\n    }\n\n    public postConstruct(): void {\n        this.isPrintLayout = this.gos.isDomLayout('print');\n        this.isEnsureDomOrder = this.gos.get('ensureDomOrder');\n    }\n\n    public getInstanceId(): HeaderRowCtrlInstanceId {\n        return this.instanceId;\n    }\n\n    /** Checks that every header cell that is currently visible has been rendered.\n     * Can only be false under some circumstances when using React\n     */\n    public areCellsRendered(): boolean {\n        if (!this.comp) {\n            return false;\n        }\n        return this.getHeaderCellCtrls().every((ctrl) => ctrl.getGui() != null);\n    }\n\n    /**\n     *\n     * @param comp Proxy to the actual component\n     * @param initCompState Should the component be initialised with the current state of the controller. Default: true\n     */\n    public setComp(comp: IHeaderRowComp, initCompState: boolean = true): void {\n        this.comp = comp;\n\n        if (initCompState) {\n            this.onRowHeightChanged();\n            this.onVirtualColumnsChanged();\n        }\n        // width is managed directly regardless of framework and so is not included in initCompState\n        this.setWidth();\n\n        this.addEventListeners();\n    }\n\n    public getHeaderRowClass(): string {\n        return this.headerRowClass;\n    }\n    public getAriaRowIndex(): number {\n        return this.rowIndex + 1;\n    }\n\n    private addEventListeners(): void {\n        const onHeightChanged = this.onRowHeightChanged.bind(this);\n        this.addManagedEventListeners({\n            columnResized: this.onColumnResized.bind(this),\n            displayedColumnsChanged: this.onDisplayedColumnsChanged.bind(this),\n            virtualColumnsChanged: (params) => this.onVirtualColumnsChanged(params.afterScroll),\n            columnHeaderHeightChanged: onHeightChanged,\n            gridStylesChanged: onHeightChanged,\n            advancedFilterEnabledChanged: onHeightChanged,\n        });\n\n        // when print layout changes, it changes what columns are in what section\n        this.addManagedPropertyListener('domLayout', this.onDisplayedColumnsChanged.bind(this));\n        this.addManagedPropertyListener('ensureDomOrder', (e) => (this.isEnsureDomOrder = e.currentValue));\n\n        this.addManagedPropertyListeners(\n            [\n                'headerHeight',\n                'pivotHeaderHeight',\n                'groupHeaderHeight',\n                'pivotGroupHeaderHeight',\n                'floatingFiltersHeight',\n            ],\n            onHeightChanged\n        );\n    }\n\n    public getHeaderCellCtrl(column: AgColumnGroup): HeaderGroupCellCtrl | undefined;\n    public getHeaderCellCtrl(column: AgColumn): HeaderCellCtrl | undefined;\n    public getHeaderCellCtrl(column: any): any {\n        if (!this.headerCellCtrls) {\n            return;\n        }\n        return _values(this.headerCellCtrls).find((cellCtrl) => cellCtrl.getColumnGroupChild() === column);\n    }\n\n    private onDisplayedColumnsChanged(): void {\n        this.isPrintLayout = this.gos.isDomLayout('print');\n        this.onVirtualColumnsChanged();\n        this.setWidth();\n        this.onRowHeightChanged();\n    }\n\n    public getType(): HeaderRowType {\n        return this.type;\n    }\n\n    private onColumnResized(): void {\n        this.setWidth();\n    }\n\n    private setWidth(): void {\n        const width = this.getWidthForRow();\n        this.comp.setWidth(`${width}px`);\n    }\n\n    private getWidthForRow(): number {\n        const { visibleColsService: presentedColsService } = this.beans;\n        if (this.isPrintLayout) {\n            const pinned = this.pinned != null;\n            if (pinned) {\n                return 0;\n            }\n\n            return (\n                presentedColsService.getContainerWidth('right') +\n                presentedColsService.getContainerWidth('left') +\n                presentedColsService.getContainerWidth(null)\n            );\n        }\n\n        // if not printing, just return the width as normal\n        return presentedColsService.getContainerWidth(this.pinned);\n    }\n\n    private onRowHeightChanged(): void {\n        const { topOffset, rowHeight } = this.getTopAndHeight();\n\n        this.comp.setTop(topOffset + 'px');\n        this.comp.setHeight(rowHeight + 'px');\n    }\n\n    public getTopAndHeight() {\n        const { columnModel, filterManager } = this.beans;\n        let headerRowCount = columnModel.getHeaderRowCount();\n        const sizes: number[] = [];\n\n        let numberOfFloating = 0;\n\n        if (filterManager?.hasFloatingFilters()) {\n            headerRowCount++;\n            numberOfFloating = 1;\n        }\n\n        const groupHeight = columnModel.getColumnGroupHeaderRowHeight();\n        const headerHeight = columnModel.getColumnHeaderRowHeight();\n\n        const numberOfNonGroups = 1 + numberOfFloating;\n        const numberOfGroups = headerRowCount - numberOfNonGroups;\n\n        for (let i = 0; i < numberOfGroups; i++) {\n            sizes.push(groupHeight as number);\n        }\n\n        sizes.push(headerHeight);\n\n        for (let i = 0; i < numberOfFloating; i++) {\n            sizes.push(columnModel.getFloatingFiltersHeight() as number);\n        }\n\n        let topOffset = 0;\n\n        for (let i = 0; i < this.rowIndex; i++) {\n            topOffset += sizes[i];\n        }\n\n        const rowHeight = sizes[this.rowIndex];\n        return { topOffset, rowHeight };\n    }\n\n    public getPinned(): ColumnPinnedType {\n        return this.pinned;\n    }\n\n    public getRowIndex(): number {\n        return this.rowIndex;\n    }\n\n    private onVirtualColumnsChanged(afterScroll: boolean = false): void {\n        const ctrlsToDisplay = this.getHeaderCtrls();\n        const forceOrder = this.isEnsureDomOrder || this.isPrintLayout;\n        this.comp.setHeaderCtrls(ctrlsToDisplay, forceOrder, afterScroll);\n    }\n\n    public getHeaderCtrls() {\n        const oldCtrls = this.headerCellCtrls;\n        this.headerCellCtrls = new Map();\n        const columns = this.getColumnsInViewport();\n\n        for (const child of columns) {\n            this.recycleAndCreateHeaderCtrls(child, oldCtrls);\n        }\n\n        // we want to keep columns that are focused, otherwise keyboard navigation breaks\n        const isFocusedAndDisplayed = (ctrl: HeaderCellCtrl) => {\n            const { focusService, visibleColsService: visibleColsService } = this.beans;\n\n            const isFocused = focusService.isHeaderWrapperFocused(ctrl);\n            if (!isFocused) {\n                return false;\n            }\n            const isDisplayed = visibleColsService.isVisible(ctrl.getColumnGroupChild());\n            return isDisplayed;\n        };\n\n        if (oldCtrls) {\n            for (const [id, oldCtrl] of oldCtrls) {\n                const keepCtrl = isFocusedAndDisplayed(oldCtrl as HeaderCellCtrl);\n                if (keepCtrl) {\n                    this.headerCellCtrls.set(id, oldCtrl);\n                } else {\n                    this.destroyBean(oldCtrl);\n                }\n            }\n        }\n\n        return this.getHeaderCellCtrls();\n    }\n\n    private getHeaderCellCtrls(): AbstractHeaderCellCtrl[] {\n        return Array.from(this.headerCellCtrls?.values() ?? []);\n    }\n\n    private recycleAndCreateHeaderCtrls(\n        headerColumn: AgColumn | AgColumnGroup,\n        oldCtrls?: Map<HeaderColumnId, AbstractHeaderCellCtrl>\n    ): void {\n        if (!this.headerCellCtrls) {\n            return;\n        }\n        // skip groups that have no displayed children. this can happen when the group is broken,\n        // and this section happens to have nothing to display for the open / closed state.\n        // (a broken group is one that is split, ie columns in the group have a non-group column\n        // in between them)\n        if (headerColumn.isEmptyGroup()) {\n            return;\n        }\n\n        const idOfChild = headerColumn.getUniqueId();\n\n        // if we already have this cell rendered, do nothing\n        let headerCtrl: AbstractHeaderCellCtrl | undefined;\n        if (oldCtrls) {\n            headerCtrl = oldCtrls.get(idOfChild);\n            oldCtrls.delete(idOfChild);\n        }\n\n        // it's possible there is a new Column with the same ID, but it's for a different Column.\n        // this is common with pivoting, where the pivot cols change, but the id's are still pivot_0,\n        // pivot_1 etc. so if new col but same ID, need to remove the old col here first as we are\n        // about to replace it in the this.headerComps map.\n        const forOldColumn = headerCtrl && headerCtrl.getColumnGroupChild() != headerColumn;\n        if (forOldColumn) {\n            this.destroyBean(headerCtrl);\n            headerCtrl = undefined;\n        }\n\n        if (headerCtrl == null) {\n            switch (this.type) {\n                case HeaderRowType.FLOATING_FILTER: {\n                    headerCtrl = this.createBean(\n                        this.beans.ctrlsFactory.getInstance<HeaderFilterCellCtrl>(\n                            'headerFilterCell',\n                            headerColumn as AgColumn,\n                            this.beans,\n                            this\n                        )!\n                    );\n                    break;\n                }\n                case HeaderRowType.COLUMN_GROUP:\n                    headerCtrl = this.createBean(\n                        new HeaderGroupCellCtrl(headerColumn as AgColumnGroup, this.beans, this)\n                    );\n                    break;\n                default:\n                    headerCtrl = this.createBean(new HeaderCellCtrl(headerColumn as AgColumn, this.beans, this));\n                    break;\n            }\n        }\n\n        this.headerCellCtrls.set(idOfChild, headerCtrl);\n    }\n\n    private getColumnsInViewport(): (AgColumn | AgColumnGroup)[] {\n        return this.isPrintLayout ? this.getColumnsInViewportPrintLayout() : this.getColumnsInViewportNormalLayout();\n    }\n\n    private getColumnsInViewportPrintLayout(): (AgColumn | AgColumnGroup)[] {\n        // for print layout, we add all columns into the center\n        if (this.pinned != null) {\n            return [];\n        }\n\n        let viewportColumns: (AgColumn | AgColumnGroup)[] = [];\n        const actualDepth = this.getActualDepth();\n        const { columnViewportService } = this.beans;\n\n        (['left', null, 'right'] as ColumnPinnedType[]).forEach((pinned) => {\n            const items = columnViewportService.getHeadersToRender(pinned, actualDepth);\n            viewportColumns = viewportColumns.concat(items);\n        });\n\n        return viewportColumns;\n    }\n\n    private getActualDepth(): number {\n        return this.type == HeaderRowType.FLOATING_FILTER ? this.rowIndex - 1 : this.rowIndex;\n    }\n\n    private getColumnsInViewportNormalLayout(): (AgColumn | AgColumnGroup)[] {\n        // when in normal layout, we add the columns for that container only\n        return this.beans.columnViewportService.getHeadersToRender(this.pinned, this.getActualDepth());\n    }\n\n    public findHeaderCellCtrl(column: AgColumn | AgColumnGroup): AbstractHeaderCellCtrl | undefined {\n        if (!this.headerCellCtrls) {\n            return;\n        }\n\n        const allCtrls = this.getHeaderCellCtrls();\n        const ctrl: AbstractHeaderCellCtrl | undefined = allCtrls.find((ctrl) => ctrl.getColumnGroupChild() == column);\n\n        return ctrl;\n    }\n\n    public focusHeader(column: AgColumn | AgColumnGroup, event?: KeyboardEvent): boolean {\n        const ctrl = this.findHeaderCellCtrl(column);\n\n        if (!ctrl) {\n            return false;\n        }\n\n        const focused = ctrl.focus(event);\n\n        return focused;\n    }\n\n    public override destroy(): void {\n        if (this.headerCellCtrls) {\n            this.headerCellCtrls.forEach((ctrl) => {\n                this.destroyBean(ctrl);\n            });\n        }\n        this.headerCellCtrls = undefined;\n        super.destroy();\n    }\n}\n", "import type { ColumnModel } from '../../columns/columnModel';\nimport { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { CtrlsService } from '../../ctrlsService';\nimport type { AgColumn } from '../../entities/agColumn';\nimport { isColumn } from '../../entities/agColumn';\nimport type { AgColumnGroup } from '../../entities/agColumnGroup';\nimport type { FilterManager } from '../../filter/filterManager';\nimport type { FocusService } from '../../focusService';\nimport { CenterWidthFeature } from '../../gridBodyComp/centerWidthFeature';\nimport type { PinnedWidthService } from '../../gridBodyComp/pinnedWidthService';\nimport type { ScrollVisibleService } from '../../gridBodyComp/scrollVisibleService';\nimport type { ColumnPinnedType } from '../../interfaces/iColumn';\nimport { NumberSequence } from '../../utils/numberSequence';\nimport type { HeaderCellCtrl } from '../cells/column/headerCellCtrl';\nimport type { HeaderGroupCellCtrl } from '../cells/columnGroup/headerGroupCellCtrl';\nimport { BodyDropTarget } from '../columnDrag/bodyDropTarget';\nimport type { HeaderPosition } from '../common/headerPosition';\nimport { HeaderRowType } from '../row/headerRowComp';\nimport { HeaderRowCtrl } from '../row/headerRowCtrl';\n\nexport interface IHeaderRowContainerComp {\n    setCenterWidth(width: string): void;\n    setViewportScrollLeft(left: number): void;\n    setPinnedContainerWidth(width: string): void;\n    setDisplayed(displayed: boolean): void;\n    setCtrls(ctrls: HeaderRowCtrl[]): void;\n}\n\nexport class HeaderRowContainerCtrl extends BeanStub {\n    private ctrlsService: CtrlsService;\n    private scrollVisibleService: ScrollVisibleService;\n    private pinnedWidthService: PinnedWidthService;\n    private columnModel: ColumnModel;\n    private focusService: FocusService;\n    private filterManager?: FilterManager;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.ctrlsService = beans.ctrlsService;\n        this.scrollVisibleService = beans.scrollVisibleService;\n        this.pinnedWidthService = beans.pinnedWidthService;\n        this.columnModel = beans.columnModel;\n        this.focusService = beans.focusService;\n        this.filterManager = beans.filterManager;\n    }\n\n    private pinned: ColumnPinnedType;\n    private comp: IHeaderRowContainerComp;\n    private hidden: boolean = false;\n    private includeFloatingFilter: boolean = false;\n\n    private filtersRowCtrl: HeaderRowCtrl | undefined;\n    private columnsRowCtrl: HeaderRowCtrl | undefined;\n    private groupsRowCtrls: HeaderRowCtrl[] = [];\n    private eViewport: HTMLElement;\n\n    constructor(pinned: ColumnPinnedType) {\n        super();\n        this.pinned = pinned;\n    }\n\n    public setComp(comp: IHeaderRowContainerComp, eGui: HTMLElement): void {\n        this.comp = comp;\n        this.eViewport = eGui;\n\n        this.setupCenterWidth();\n        this.setupPinnedWidth();\n\n        this.setupDragAndDrop(this.eViewport);\n\n        const onDisplayedColsChanged = this.onDisplayedColumnsChanged.bind(this);\n        this.addManagedEventListeners({\n            gridColumnsChanged: this.onGridColumnsChanged.bind(this),\n            displayedColumnsChanged: onDisplayedColsChanged,\n            advancedFilterEnabledChanged: onDisplayedColsChanged,\n        });\n\n        this.ctrlsService.registerHeaderContainer(this, this.pinned);\n\n        if (this.columnModel.isReady()) {\n            this.refresh();\n        }\n    }\n\n    public getAllCtrls(): HeaderRowCtrl[] {\n        const res: HeaderRowCtrl[] = [...this.groupsRowCtrls];\n\n        if (this.columnsRowCtrl) {\n            res.push(this.columnsRowCtrl);\n        }\n\n        if (this.filtersRowCtrl) {\n            res.push(this.filtersRowCtrl);\n        }\n\n        return res;\n    }\n\n    public refresh(keepColumns = false): void {\n        const sequence = new NumberSequence();\n        const focusedHeaderPosition = this.focusService.getFocusHeaderToUseAfterRefresh();\n\n        const refreshColumnGroups = () => {\n            const groupRowCount = this.columnModel.getHeaderRowCount() - 1;\n\n            this.groupsRowCtrls = this.destroyBeans(this.groupsRowCtrls);\n\n            for (let i = 0; i < groupRowCount; i++) {\n                const ctrl = this.createBean(\n                    new HeaderRowCtrl(sequence.next(), this.pinned, HeaderRowType.COLUMN_GROUP)\n                );\n                this.groupsRowCtrls.push(ctrl);\n            }\n        };\n\n        const refreshColumns = () => {\n            const rowIndex = sequence.next();\n\n            const needNewInstance =\n                !this.hidden &&\n                (this.columnsRowCtrl == null || !keepColumns || this.columnsRowCtrl.getRowIndex() !== rowIndex);\n            const shouldDestroyInstance = needNewInstance || this.hidden;\n\n            if (shouldDestroyInstance) {\n                this.columnsRowCtrl = this.destroyBean(this.columnsRowCtrl);\n            }\n\n            if (needNewInstance) {\n                this.columnsRowCtrl = this.createBean(new HeaderRowCtrl(rowIndex, this.pinned, HeaderRowType.COLUMN));\n            }\n        };\n\n        const refreshFilters = () => {\n            this.includeFloatingFilter = !!this.filterManager?.hasFloatingFilters() && !this.hidden;\n\n            const destroyPreviousComp = () => {\n                this.filtersRowCtrl = this.destroyBean(this.filtersRowCtrl);\n            };\n\n            if (!this.includeFloatingFilter) {\n                destroyPreviousComp();\n                return;\n            }\n\n            const rowIndex = sequence.next();\n\n            if (this.filtersRowCtrl) {\n                const rowIndexMismatch = this.filtersRowCtrl.getRowIndex() !== rowIndex;\n                if (!keepColumns || rowIndexMismatch) {\n                    destroyPreviousComp();\n                }\n            }\n\n            if (!this.filtersRowCtrl) {\n                this.filtersRowCtrl = this.createBean(\n                    new HeaderRowCtrl(rowIndex, this.pinned, HeaderRowType.FLOATING_FILTER)\n                );\n            }\n        };\n\n        refreshColumnGroups();\n        refreshColumns();\n        refreshFilters();\n\n        const allCtrls = this.getAllCtrls();\n        this.comp.setCtrls(allCtrls);\n\n        this.restoreFocusOnHeader(focusedHeaderPosition);\n    }\n\n    public getHeaderCtrlForColumn(column: AgColumn): HeaderCellCtrl | undefined;\n    public getHeaderCtrlForColumn(column: AgColumnGroup): HeaderGroupCellCtrl | undefined;\n    public getHeaderCtrlForColumn(column: any): any {\n        if (isColumn(column)) {\n            if (!this.columnsRowCtrl) {\n                return;\n            }\n            return this.columnsRowCtrl.getHeaderCellCtrl(column);\n        }\n\n        if (this.groupsRowCtrls.length === 0) {\n            return;\n        }\n\n        for (let i = 0; i < this.groupsRowCtrls.length; i++) {\n            const ctrl = this.groupsRowCtrls[i].getHeaderCellCtrl(column);\n\n            if (ctrl) {\n                return ctrl;\n            }\n        }\n    }\n\n    /* tslint:disable */\n    public getHtmlElementForColumnHeader(column: AgColumnGroup): HTMLElement | null;\n    public getHtmlElementForColumnHeader(column: AgColumn): HTMLElement | null;\n    public getHtmlElementForColumnHeader(column: any): any {\n        /* tslint:enable */\n        const cellCtrl = this.getHeaderCtrlForColumn(column);\n\n        if (!cellCtrl) {\n            return null;\n        }\n\n        return cellCtrl.getGui();\n    }\n\n    public getRowType(rowIndex: number): HeaderRowType | undefined {\n        const allCtrls = this.getAllCtrls();\n        const ctrl = allCtrls[rowIndex];\n        return ctrl ? ctrl.getType() : undefined;\n    }\n\n    public focusHeader(rowIndex: number, column: AgColumn | AgColumnGroup, event?: KeyboardEvent): boolean {\n        const allCtrls = this.getAllCtrls();\n        const ctrl = allCtrls[rowIndex];\n        if (!ctrl) {\n            return false;\n        }\n\n        return ctrl.focusHeader(column, event);\n    }\n\n    public getViewport(): HTMLElement {\n        return this.eViewport;\n    }\n\n    public getRowCount(): number {\n        return this.groupsRowCtrls.length + (this.columnsRowCtrl ? 1 : 0) + (this.filtersRowCtrl ? 1 : 0);\n    }\n\n    public setHorizontalScroll(offset: number): void {\n        this.comp.setViewportScrollLeft(offset);\n    }\n\n    public override destroy(): void {\n        if (this.filtersRowCtrl) {\n            this.filtersRowCtrl = this.destroyBean(this.filtersRowCtrl);\n        }\n\n        if (this.columnsRowCtrl) {\n            this.columnsRowCtrl = this.destroyBean(this.columnsRowCtrl);\n        }\n\n        if (this.groupsRowCtrls && this.groupsRowCtrls.length) {\n            this.groupsRowCtrls = this.destroyBeans(this.groupsRowCtrls);\n        }\n\n        super.destroy();\n    }\n\n    private setupDragAndDrop(dropContainer: HTMLElement): void {\n        const bodyDropTarget = new BodyDropTarget(this.pinned, dropContainer);\n        this.createManagedBean(bodyDropTarget);\n    }\n\n    private restoreFocusOnHeader(position: HeaderPosition | null): void {\n        if (!position) {\n            return;\n        }\n\n        const { column } = position;\n\n        if ((column as AgColumn | AgColumnGroup).getPinned() != this.pinned) {\n            return;\n        }\n\n        this.focusService.focusHeaderPosition({ headerPosition: position });\n    }\n\n    // grid cols have changed - this also means the number of rows in the header can have\n    // changed. so we remove all the old rows and insert new ones for a complete refresh\n    private onGridColumnsChanged() {\n        this.refresh(true);\n    }\n\n    private onDisplayedColumnsChanged(): void {\n        const includeFloatingFilter = this.filterManager?.hasFloatingFilters() && !this.hidden;\n        if (this.includeFloatingFilter !== includeFloatingFilter) {\n            this.refresh(true);\n        }\n    }\n\n    private setupCenterWidth(): void {\n        if (this.pinned != null) {\n            return;\n        }\n\n        this.createManagedBean(new CenterWidthFeature((width) => this.comp.setCenterWidth(`${width}px`), true));\n    }\n\n    private setupPinnedWidth(): void {\n        if (this.pinned == null) {\n            return;\n        }\n\n        const pinningLeft = this.pinned === 'left';\n        const pinningRight = this.pinned === 'right';\n\n        this.hidden = true;\n\n        const listener = () => {\n            const width = pinningLeft\n                ? this.pinnedWidthService.getPinnedLeftWidth()\n                : this.pinnedWidthService.getPinnedRightWidth();\n            if (width == null) {\n                return;\n            } // can happen at initialisation, width not yet set\n\n            const hidden = width == 0;\n            const hiddenChanged = this.hidden !== hidden;\n            const isRtl = this.gos.get('enableRtl');\n            const scrollbarWidth = this.gos.getScrollbarWidth();\n\n            // if there is a scroll showing (and taking up space, so Windows, and not iOS)\n            // in the body, then we add extra space to keep header aligned with the body,\n            // as body width fits the cols and the scrollbar\n            const addPaddingForScrollbar =\n                this.scrollVisibleService.isVerticalScrollShowing() &&\n                ((isRtl && pinningLeft) || (!isRtl && pinningRight));\n            const widthWithPadding = addPaddingForScrollbar ? width + scrollbarWidth : width;\n\n            this.comp.setPinnedContainerWidth(`${widthWithPadding}px`);\n            this.comp.setDisplayed(!hidden);\n\n            if (hiddenChanged) {\n                this.hidden = hidden;\n                this.refresh();\n            }\n        };\n\n        this.addManagedEventListeners({\n            leftPinnedWidthChanged: listener,\n            rightPinnedWidthChanged: listener,\n            scrollVisibilityChanged: listener,\n            scrollbarWidthChanged: listener,\n        });\n    }\n}\n", "import type { ColumnPinnedType } from '../../interfaces/iColumn';\nimport { _ensureDomOrder } from '../../utils/dom';\nimport { _getAllValuesInObject } from '../../utils/object';\nimport { Component, RefPlaceholder } from '../../widgets/component';\nimport { HeaderRowComp } from '../row/headerRowComp';\nimport type { HeaderRowCtrl, HeaderRowCtrlInstanceId } from '../row/headerRowCtrl';\nimport type { IHeaderRowContainerComp } from './headerRowContainerCtrl';\nimport { HeaderRowContainerCtrl } from './headerRowContainerCtrl';\n\nconst PINNED_LEFT_TEMPLATE = /* html */ `<div class=\"ag-pinned-left-header\" role=\"rowgroup\"></div>`;\n\nconst PINNED_RIGHT_TEMPLATE = /* html */ `<div class=\"ag-pinned-right-header\" role=\"rowgroup\"></div>`;\n\nconst CENTER_TEMPLATE = /* html */ `<div class=\"ag-header-viewport\" role=\"presentation\">\n        <div class=\"ag-header-container\" data-ref=\"eCenterContainer\" role=\"rowgroup\"></div>\n    </div>`;\n\nexport class HeaderRowContainerComp extends Component {\n    private eCenterContainer: HTMLElement = RefPlaceholder;\n\n    private eRowContainer: HTMLElement;\n\n    private pinned: ColumnPinnedType;\n\n    private headerRowComps: { [ctrlId: HeaderRowCtrlInstanceId]: HeaderRowComp } = {};\n    private rowCompsList: HeaderRowComp[] = [];\n\n    constructor(pinned: ColumnPinnedType) {\n        super();\n        this.pinned = pinned;\n    }\n\n    public postConstruct(): void {\n        this.selectAndSetTemplate();\n\n        const compProxy: IHeaderRowContainerComp = {\n            setDisplayed: (displayed) => this.setDisplayed(displayed),\n            setCtrls: (ctrls) => this.setCtrls(ctrls),\n\n            // only gets called for center section\n            setCenterWidth: (width) => (this.eCenterContainer.style.width = width),\n            setViewportScrollLeft: (left) => (this.getGui().scrollLeft = left),\n\n            // only gets called for pinned sections\n            setPinnedContainerWidth: (width) => {\n                const eGui = this.getGui();\n                eGui.style.width = width;\n                eGui.style.maxWidth = width;\n                eGui.style.minWidth = width;\n            },\n        };\n\n        const ctrl = this.createManagedBean(new HeaderRowContainerCtrl(this.pinned));\n        ctrl.setComp(compProxy, this.getGui());\n    }\n\n    private selectAndSetTemplate(): void {\n        const pinnedLeft = this.pinned == 'left';\n        const pinnedRight = this.pinned == 'right';\n\n        const template = pinnedLeft ? PINNED_LEFT_TEMPLATE : pinnedRight ? PINNED_RIGHT_TEMPLATE : CENTER_TEMPLATE;\n\n        this.setTemplate(template);\n\n        // for left and right, we add rows directly to the root element,\n        // but for center container we add elements to the child container.\n        this.eRowContainer = this.eCenterContainer !== RefPlaceholder ? this.eCenterContainer : this.getGui();\n    }\n\n    public override destroy(): void {\n        this.setCtrls([]);\n        super.destroy();\n    }\n\n    private destroyRowComp(rowComp: HeaderRowComp): void {\n        this.destroyBean(rowComp);\n        this.eRowContainer.removeChild(rowComp.getGui());\n    }\n\n    private setCtrls(ctrls: HeaderRowCtrl[]): void {\n        const oldRowComps = this.headerRowComps;\n        this.headerRowComps = {};\n        this.rowCompsList = [];\n\n        let prevGui: HTMLElement;\n\n        const appendEnsuringDomOrder = (rowComp: HeaderRowComp) => {\n            const eGui = rowComp.getGui();\n\n            const notAlreadyIn = eGui.parentElement != this.eRowContainer;\n            if (notAlreadyIn) {\n                this.eRowContainer.appendChild(eGui);\n            }\n            if (prevGui) {\n                _ensureDomOrder(this.eRowContainer, eGui, prevGui);\n            }\n\n            prevGui = eGui;\n        };\n\n        ctrls.forEach((ctrl) => {\n            const ctrlId = ctrl.getInstanceId();\n            const existingComp = oldRowComps[ctrlId];\n            delete oldRowComps[ctrlId];\n\n            const rowComp = existingComp ? existingComp : this.createBean(new HeaderRowComp(ctrl));\n            this.headerRowComps[ctrlId] = rowComp;\n            this.rowCompsList.push(rowComp);\n\n            appendEnsuringDomOrder(rowComp);\n        });\n\n        _getAllValuesInObject(oldRowComps).forEach((c) => this.destroyRowComp(c));\n    }\n}\n", "import type { ComponentSelector } from '../widgets/component';\nimport { Component } from '../widgets/component';\nimport type { IGridHeaderComp } from './gridHeaderCtrl';\nimport { GridHeaderCtrl } from './gridHeaderCtrl';\nimport { HeaderRowContainerComp } from './rowContainer/headerRowContainerComp';\n\nexport class GridHeaderComp extends Component {\n    constructor() {\n        super(/* html */ `<div class=\"ag-header\" role=\"presentation\"/>`);\n    }\n\n    public postConstruct(): void {\n        const compProxy: IGridHeaderComp = {\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\n            setHeightAndMinHeight: (height) => {\n                this.getGui().style.height = height;\n                this.getGui().style.minHeight = height;\n            },\n        };\n\n        const ctrl = this.createManagedBean(new GridHeaderCtrl());\n        ctrl.setComp(compProxy, this.getGui(), this.getFocusableElement());\n\n        const addContainer = (container: HeaderRowContainerComp) => {\n            this.createManagedBean(container);\n            this.appendChild(container);\n        };\n\n        addContainer(new HeaderRowContainerComp('left'));\n        addContainer(new HeaderRowContainerComp(null));\n        addContainer(new HeaderRowContainerComp('right'));\n    }\n}\nexport const GridHeaderSelector: ComponentSelector = {\n    selector: 'AG-HEADER-ROOT',\n    component: GridHeaderComp,\n};\n", "import { BeanStub } from '../context/beanStub';\nimport type { DomLayoutType } from '../entities/gridOptions';\nimport { _warnOnce } from '../utils/function';\n\nexport interface LayoutView {\n    updateLayoutClasses(layoutClass: string, params: UpdateLayoutClassesParams): void;\n}\n\nexport enum LayoutCssClasses {\n    AUTO_HEIGHT = 'ag-layout-auto-height',\n    NORMAL = 'ag-layout-normal',\n    PRINT = 'ag-layout-print',\n}\n\nexport interface UpdateLayoutClassesParams {\n    autoHeight: boolean;\n    normal: boolean;\n    print: boolean;\n}\n\nexport class LayoutFeature extends BeanStub {\n    private view: LayoutView;\n\n    constructor(view: LayoutView) {\n        super();\n        this.view = view;\n    }\n\n    public postConstruct(): void {\n        this.addManagedPropertyListener('domLayout', this.updateLayoutClasses.bind(this));\n        this.updateLayoutClasses();\n    }\n\n    private updateLayoutClasses(): void {\n        const domLayout = this.getDomLayout();\n        const params = {\n            autoHeight: domLayout === 'autoHeight',\n            normal: domLayout === 'normal',\n            print: domLayout === 'print',\n        };\n        const cssClass = params.autoHeight\n            ? LayoutCssClasses.AUTO_HEIGHT\n            : params.print\n              ? LayoutCssClasses.PRINT\n              : LayoutCssClasses.NORMAL;\n        this.view.updateLayoutClasses(cssClass, params);\n    }\n\n    // returns either 'print', 'autoHeight' or 'normal' (normal is the default)\n    private getDomLayout(): DomLayoutType {\n        const domLayout: DomLayoutType = this.gos.get('domLayout') ?? 'normal';\n        const validLayouts: DomLayoutType[] = ['normal', 'print', 'autoHeight'];\n\n        if (validLayouts.indexOf(domLayout) === -1) {\n            _warnOnce(`${domLayout} is not valid for DOM Layout, valid values are 'normal', 'autoHeight', 'print'.`);\n            return 'normal';\n        }\n\n        return domLayout;\n    }\n}\n", "import type { BeanCollection } from '../../context/context';\nimport type { GridOptions } from '../../entities/gridOptions';\nimport type { LayoutView, UpdateLayoutClassesParams } from '../../styling/layoutFeature';\nimport { LayoutCssClasses, LayoutFeature } from '../../styling/layoutFeature';\nimport { _clearElement } from '../../utils/dom';\nimport type { AgPromise } from '../../utils/promise';\nimport type { ComponentSelector } from '../../widgets/component';\nimport { Component, RefPlaceholder } from '../../widgets/component';\nimport type { IOverlayComp } from './overlayComponent';\nimport type { OverlayService } from './overlayService';\n\nexport class OverlayWrapperComponent extends Component implements LayoutView {\n    private overlayService: OverlayService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.overlayService = beans.overlayService;\n    }\n\n    private readonly eOverlayWrapper: HTMLElement = RefPlaceholder;\n\n    private activePromise: AgPromise<IOverlayComp> | null = null;\n    private activeOverlay: IOverlayComp | null = null;\n    private updateListenerDestroyFunc: (() => null) | null = null;\n    private activeOverlayWrapperCssClass: string | null = null;\n\n    constructor() {\n        // wrapping in outer div, and wrapper, is needed to center the loading icon\n        super(/* html */ `\n            <div class=\"ag-overlay\" role=\"presentation\">\n                <div class=\"ag-overlay-panel\" role=\"presentation\">\n                    <div class=\"ag-overlay-wrapper\" data-ref=\"eOverlayWrapper\" role=\"presentation\"></div>\n                </div>\n            </div>`);\n    }\n\n    public updateLayoutClasses(cssClass: string, params: UpdateLayoutClassesParams): void {\n        const overlayWrapperClassList = this.eOverlayWrapper.classList;\n        overlayWrapperClassList.toggle(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);\n        overlayWrapperClassList.toggle(LayoutCssClasses.NORMAL, params.normal);\n        overlayWrapperClassList.toggle(LayoutCssClasses.PRINT, params.print);\n    }\n\n    public postConstruct(): void {\n        this.createManagedBean(new LayoutFeature(this));\n        this.setDisplayed(false, { skipAriaHidden: true });\n\n        this.overlayService.registerOverlayWrapperComp(this);\n    }\n\n    private setWrapperTypeClass(overlayWrapperCssClass: string): void {\n        const overlayWrapperClassList = this.eOverlayWrapper.classList;\n        if (this.activeOverlayWrapperCssClass) {\n            overlayWrapperClassList.toggle(this.activeOverlayWrapperCssClass, false);\n        }\n        this.activeOverlayWrapperCssClass = overlayWrapperCssClass;\n        overlayWrapperClassList.toggle(overlayWrapperCssClass, true);\n    }\n\n    public showOverlay(\n        overlayComponentPromise: AgPromise<IOverlayComp> | null,\n        overlayWrapperCssClass: string,\n        gridOption?: keyof GridOptions\n    ): void {\n        this.setWrapperTypeClass(overlayWrapperCssClass);\n        this.destroyActiveOverlay();\n\n        this.activePromise = overlayComponentPromise;\n\n        overlayComponentPromise?.then((comp) => {\n            if (this.activePromise !== overlayComponentPromise) {\n                // Another promise was started, we need to cancel this old operation\n                if (this.activeOverlay !== comp) {\n                    // We can destroy the component as it will not be used\n                    this.destroyBean(comp);\n                    comp = null;\n                }\n                return;\n            }\n\n            this.activePromise = null; // Promise completed, so we can reset this\n\n            if (!comp) {\n                return; // Error handling\n            }\n\n            if (this.activeOverlay == comp) {\n                return; // same component, already active\n            }\n\n            this.eOverlayWrapper.appendChild(comp.getGui());\n            this.activeOverlay = comp;\n\n            if (gridOption) {\n                const component = comp;\n                this.updateListenerDestroyFunc = this.addManagedPropertyListener(gridOption, ({ currentValue }) => {\n                    component.refresh?.(this.gos.addGridCommonParams({ ...(currentValue ?? {}) }));\n                });\n            }\n        });\n\n        this.setDisplayed(true, { skipAriaHidden: true });\n    }\n\n    private destroyActiveOverlay(): void {\n        this.activePromise = null;\n\n        const activeOverlay = this.activeOverlay;\n        if (!activeOverlay) {\n            return; // Nothing to destroy\n        }\n\n        this.activeOverlay = null;\n\n        const updateListenerDestroyFunc = this.updateListenerDestroyFunc;\n        if (updateListenerDestroyFunc) {\n            updateListenerDestroyFunc();\n            this.updateListenerDestroyFunc = null;\n        }\n\n        this.destroyBean(activeOverlay);\n\n        _clearElement(this.eOverlayWrapper);\n    }\n\n    public hideOverlay(): void {\n        this.destroyActiveOverlay();\n        this.setDisplayed(false, { skipAriaHidden: true });\n    }\n\n    public override destroy(): void {\n        this.destroyActiveOverlay();\n        super.destroy();\n    }\n}\nexport const OverlayWrapperSelector: ComponentSelector = {\n    selector: 'AG-OVERLAY-WRAPPER',\n    component: OverlayWrapperComponent,\n};\n", "import type { BeanCollection } from '../context/context';\nimport type { AnimationFrameService } from '../misc/animationFrameService';\nimport { _isIOSUserAgent, _isInvisibleScrollbar, _isMacOsUserAgent } from '../utils/browser';\nimport { _isVisible } from '../utils/dom';\nimport { _waitUntil } from '../utils/function';\nimport { Component, RefPlaceholder } from '../widgets/component';\n\nexport abstract class AbstractFakeScrollComp extends Component {\n    private animationFrameService: AnimationFrameService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.animationFrameService = beans.animationFrameService;\n    }\n\n    protected readonly eViewport: HTMLElement = RefPlaceholder;\n    protected readonly eContainer: HTMLElement = RefPlaceholder;\n\n    protected invisibleScrollbar: boolean;\n    protected hideTimeout: number | null = null;\n\n    protected abstract setScrollVisible(): void;\n    public abstract getScrollPosition(): number;\n    public abstract setScrollPosition(value: number): void;\n\n    constructor(\n        template: string,\n        private readonly direction: 'horizontal' | 'vertical'\n    ) {\n        super();\n        this.setTemplate(template);\n    }\n\n    public postConstruct(): void {\n        this.addManagedEventListeners({\n            scrollVisibilityChanged: this.onScrollVisibilityChanged.bind(this),\n        });\n        this.onScrollVisibilityChanged();\n        this.addOrRemoveCssClass('ag-apple-scrollbar', _isMacOsUserAgent() || _isIOSUserAgent());\n    }\n\n    protected initialiseInvisibleScrollbar(): void {\n        if (this.invisibleScrollbar !== undefined) {\n            return;\n        }\n\n        this.invisibleScrollbar = _isInvisibleScrollbar();\n\n        if (this.invisibleScrollbar) {\n            this.hideAndShowInvisibleScrollAsNeeded();\n            this.addActiveListenerToggles();\n        }\n    }\n\n    protected addActiveListenerToggles(): void {\n        const eGui = this.getGui();\n        const onActivate = () => this.addOrRemoveCssClass('ag-scrollbar-active', true);\n        const onDeactivate = () => this.addOrRemoveCssClass('ag-scrollbar-active', false);\n        this.addManagedListeners(eGui, {\n            mouseenter: onActivate,\n            mousedown: onActivate,\n            touchstart: onActivate,\n            mouseleave: onDeactivate,\n            touchend: onDeactivate,\n        });\n    }\n\n    protected onScrollVisibilityChanged(): void {\n        // initialiseInvisibleScrollbar should only be called once, but the reason\n        // this can't be inside `setComp` or `postConstruct` is the DOM might not\n        // be ready, so we call it until eventually, it gets calculated.\n        if (this.invisibleScrollbar === undefined) {\n            this.initialiseInvisibleScrollbar();\n        }\n\n        this.animationFrameService.requestAnimationFrame(() => this.setScrollVisible());\n    }\n\n    protected hideAndShowInvisibleScrollAsNeeded(): void {\n        this.addManagedEventListeners({\n            bodyScroll: (params) => {\n                if (params.direction === this.direction) {\n                    if (this.hideTimeout !== null) {\n                        window.clearTimeout(this.hideTimeout);\n                        this.hideTimeout = null;\n                    }\n                    this.addOrRemoveCssClass('ag-scrollbar-scrolling', true);\n                }\n            },\n            bodyScrollEnd: () => {\n                this.hideTimeout = window.setTimeout(() => {\n                    this.addOrRemoveCssClass('ag-scrollbar-scrolling', false);\n                    this.hideTimeout = null;\n                }, 400);\n            },\n        });\n    }\n\n    protected attemptSettingScrollPosition(value: number) {\n        const viewport = this.getViewport();\n        _waitUntil(\n            () => _isVisible(viewport),\n            () => this.setScrollPosition(value),\n            100\n        );\n    }\n\n    protected getViewport(): HTMLElement {\n        return this.eViewport;\n    }\n\n    public getContainer(): HTMLElement {\n        return this.eContainer;\n    }\n\n    public onScrollCallback(fn: () => void): void {\n        this.addManagedElementListeners(this.getViewport(), { scroll: fn });\n    }\n}\n", "import type { VisibleColsService } from '../columns/visibleColsService';\nimport type { BeanCollection } from '../context/context';\nimport type { CtrlsService } from '../ctrlsService';\nimport type { PinnedRowModel } from '../pinnedRowModel/pinnedRowModel';\nimport { _getScrollLeft, _isVisible, _setFixedHeight, _setFixedWidth, _setScrollLeft } from '../utils/dom';\nimport type { ComponentSelector } from '../widgets/component';\nimport { RefPlaceholder } from '../widgets/component';\nimport { AbstractFakeScrollComp } from './abstractFakeScrollComp';\nimport { CenterWidthFeature } from './centerWidthFeature';\nimport type { ScrollVisibleService } from './scrollVisibleService';\n\nexport class FakeHScrollComp extends AbstractFakeScrollComp {\n    private visibleColsService: VisibleColsService;\n    private pinnedRowModel: PinnedRowModel;\n    private ctrlsService: CtrlsService;\n    private scrollVisibleService: ScrollVisibleService;\n\n    public override wireBeans(beans: BeanCollection): void {\n        super.wireBeans(beans);\n        this.visibleColsService = beans.visibleColsService;\n        this.pinnedRowModel = beans.pinnedRowModel;\n        this.ctrlsService = beans.ctrlsService;\n        this.scrollVisibleService = beans.scrollVisibleService;\n    }\n\n    private readonly eLeftSpacer: HTMLElement = RefPlaceholder;\n    private readonly eRightSpacer: HTMLElement = RefPlaceholder;\n\n    private enableRtl: boolean;\n\n    constructor() {\n        super(\n            /* html */ `<div class=\"ag-body-horizontal-scroll\" aria-hidden=\"true\">\n            <div class=\"ag-horizontal-left-spacer\" data-ref=\"eLeftSpacer\"></div>\n            <div class=\"ag-body-horizontal-scroll-viewport\" data-ref=\"eViewport\">\n                <div class=\"ag-body-horizontal-scroll-container\" data-ref=\"eContainer\"></div>\n            </div>\n            <div class=\"ag-horizontal-right-spacer\" data-ref=\"eRightSpacer\"></div>\n        </div>`,\n            'horizontal'\n        );\n    }\n\n    public override postConstruct(): void {\n        super.postConstruct();\n\n        // When doing printing, this changes whether cols are pinned or not\n        const spacerWidthsListener = this.setFakeHScrollSpacerWidths.bind(this);\n\n        this.addManagedEventListeners({\n            displayedColumnsChanged: spacerWidthsListener,\n            displayedColumnsWidthChanged: spacerWidthsListener,\n            pinnedRowDataChanged: this.onPinnedRowDataChanged.bind(this),\n        });\n\n        this.addManagedPropertyListener('domLayout', spacerWidthsListener);\n\n        this.ctrlsService.register('fakeHScrollComp', this);\n        this.createManagedBean(new CenterWidthFeature((width) => (this.eContainer.style.width = `${width}px`)));\n\n        this.addManagedPropertyListeners(['suppressHorizontalScroll'], this.onScrollVisibilityChanged.bind(this));\n    }\n\n    protected override initialiseInvisibleScrollbar(): void {\n        if (this.invisibleScrollbar !== undefined) {\n            return;\n        }\n\n        this.enableRtl = this.gos.get('enableRtl');\n        super.initialiseInvisibleScrollbar();\n\n        if (this.invisibleScrollbar) {\n            this.refreshCompBottom();\n        }\n    }\n\n    private onPinnedRowDataChanged(): void {\n        this.refreshCompBottom();\n    }\n\n    private refreshCompBottom(): void {\n        if (!this.invisibleScrollbar) {\n            return;\n        }\n        const bottomPinnedHeight = this.pinnedRowModel.getPinnedBottomTotalHeight();\n\n        this.getGui().style.bottom = `${bottomPinnedHeight}px`;\n    }\n\n    protected override onScrollVisibilityChanged(): void {\n        super.onScrollVisibilityChanged();\n        this.setFakeHScrollSpacerWidths();\n    }\n\n    private setFakeHScrollSpacerWidths(): void {\n        const vScrollShowing = this.scrollVisibleService.isVerticalScrollShowing();\n\n        // we pad the right based on a) if cols are pinned to the right and\n        // b) if v scroll is showing on the right (normal position of scroll)\n        let rightSpacing = this.visibleColsService.getDisplayedColumnsRightWidth();\n        const scrollOnRight = !this.enableRtl && vScrollShowing;\n        const scrollbarWidth = this.gos.getScrollbarWidth();\n\n        if (scrollOnRight) {\n            rightSpacing += scrollbarWidth;\n        }\n        _setFixedWidth(this.eRightSpacer, rightSpacing);\n        this.eRightSpacer.classList.toggle('ag-scroller-corner', rightSpacing <= scrollbarWidth);\n\n        // we pad the left based on a) if cols are pinned to the left and\n        // b) if v scroll is showing on the left (happens in LTR layout only)\n        let leftSpacing = this.visibleColsService.getColsLeftWidth();\n        const scrollOnLeft = this.enableRtl && vScrollShowing;\n\n        if (scrollOnLeft) {\n            leftSpacing += scrollbarWidth;\n        }\n\n        _setFixedWidth(this.eLeftSpacer, leftSpacing);\n        this.eLeftSpacer.classList.toggle('ag-scroller-corner', leftSpacing <= scrollbarWidth);\n    }\n\n    protected setScrollVisible(): void {\n        const hScrollShowing = this.scrollVisibleService.isHorizontalScrollShowing();\n        const invisibleScrollbar = this.invisibleScrollbar;\n        const isSuppressHorizontalScroll = this.gos.get('suppressHorizontalScroll');\n        const scrollbarWidth = hScrollShowing ? this.gos.getScrollbarWidth() || 0 : 0;\n        const adjustedScrollbarWidth = scrollbarWidth === 0 && invisibleScrollbar ? 16 : scrollbarWidth;\n        const scrollContainerSize = !isSuppressHorizontalScroll ? adjustedScrollbarWidth : 0;\n\n        this.addOrRemoveCssClass('ag-scrollbar-invisible', invisibleScrollbar);\n        _setFixedHeight(this.getGui(), scrollContainerSize);\n        _setFixedHeight(this.eViewport, scrollContainerSize);\n        _setFixedHeight(this.eContainer, scrollContainerSize);\n        this.setDisplayed(hScrollShowing, { skipAriaHidden: true });\n    }\n\n    public getScrollPosition(): number {\n        return _getScrollLeft(this.getViewport(), this.enableRtl);\n    }\n\n    public setScrollPosition(value: number): void {\n        if (!_isVisible(this.getViewport())) {\n            this.attemptSettingScrollPosition(value);\n        }\n        _setScrollLeft(this.getViewport(), value, this.enableRtl);\n    }\n}\n\nexport const FakeHScrollSelector: ComponentSelector = {\n    selector: 'AG-FAKE-HORIZONTAL-SCROLL',\n    component: FakeHScrollComp,\n};\n", "import { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { RowContainerHeightService } from '../../rendering/rowContainerHeightService';\n\nexport class SetHeightFeature extends BeanStub {\n    private maxDivHeightScaler: RowContainerHeightService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.maxDivHeightScaler = beans.rowContainerHeightService;\n    }\n\n    private eContainer: HTMLElement;\n    private eViewport: HTMLElement | undefined;\n\n    constructor(eContainer: HTMLElement, eViewport?: HTMLElement) {\n        super();\n        this.eContainer = eContainer;\n        this.eViewport = eViewport;\n    }\n\n    public postConstruct(): void {\n        this.addManagedEventListeners({ rowContainerHeightChanged: this.onHeightChanged.bind(this) });\n    }\n\n    private onHeightChanged(): void {\n        const height = this.maxDivHeightScaler.getUiContainerHeight();\n        const heightString = height != null ? `${height}px` : ``;\n\n        this.eContainer.style.height = heightString;\n        if (this.eViewport) {\n            this.eViewport.style.height = heightString;\n        }\n    }\n}\n", "import type { BeanCollection } from '../context/context';\nimport type { CtrlsService } from '../ctrlsService';\nimport { _isVisible, _setFixedWidth } from '../utils/dom';\nimport type { ComponentSelector } from '../widgets/component';\nimport { AbstractFakeScrollComp } from './abstractFakeScrollComp';\nimport { SetHeightFeature } from './rowContainer/setHeightFeature';\nimport type { ScrollVisibleService } from './scrollVisibleService';\n\nexport class FakeVScrollComp extends AbstractFakeScrollComp {\n    private ctrlsService: CtrlsService;\n    private scrollVisibleService: ScrollVisibleService;\n\n    public override wireBeans(beans: BeanCollection) {\n        super.wireBeans(beans);\n        this.ctrlsService = beans.ctrlsService;\n        this.scrollVisibleService = beans.scrollVisibleService;\n    }\n\n    constructor() {\n        super(\n            /* html */ `<div class=\"ag-body-vertical-scroll\" aria-hidden=\"true\">\n            <div class=\"ag-body-vertical-scroll-viewport\" data-ref=\"eViewport\">\n                <div class=\"ag-body-vertical-scroll-container\" data-ref=\"eContainer\"></div>\n            </div>\n        </div>`,\n            'vertical'\n        );\n    }\n\n    public override postConstruct(): void {\n        super.postConstruct();\n\n        this.createManagedBean(new SetHeightFeature(this.eContainer));\n        this.ctrlsService.register('fakeVScrollComp', this);\n\n        this.addManagedEventListeners({ rowContainerHeightChanged: this.onRowContainerHeightChanged.bind(this) });\n    }\n\n    protected setScrollVisible(): void {\n        const vScrollShowing = this.scrollVisibleService.isVerticalScrollShowing();\n        const invisibleScrollbar = this.invisibleScrollbar;\n\n        const scrollbarWidth = vScrollShowing ? this.gos.getScrollbarWidth() || 0 : 0;\n        const adjustedScrollbarWidth = scrollbarWidth === 0 && invisibleScrollbar ? 16 : scrollbarWidth;\n\n        this.addOrRemoveCssClass('ag-scrollbar-invisible', invisibleScrollbar);\n        _setFixedWidth(this.getGui(), adjustedScrollbarWidth);\n        _setFixedWidth(this.eViewport, adjustedScrollbarWidth);\n        _setFixedWidth(this.eContainer, adjustedScrollbarWidth);\n        this.setDisplayed(vScrollShowing, { skipAriaHidden: true });\n    }\n\n    private onRowContainerHeightChanged(): void {\n        const { ctrlsService } = this;\n        const gridBodyCtrl = ctrlsService.getGridBodyCtrl();\n        const gridBodyViewportEl = gridBodyCtrl.getBodyViewportElement();\n\n        const eViewportScrollTop = this.getScrollPosition();\n        const gridBodyViewportScrollTop = gridBodyViewportEl.scrollTop;\n\n        if (eViewportScrollTop != gridBodyViewportScrollTop) {\n            this.setScrollPosition(gridBodyViewportScrollTop, true);\n        }\n    }\n\n    public getScrollPosition(): number {\n        return this.getViewport().scrollTop;\n    }\n\n    public setScrollPosition(value: number, force?: boolean): void {\n        if (!force && !_isVisible(this.getViewport())) {\n            this.attemptSettingScrollPosition(value);\n        }\n        this.getViewport().scrollTop = value;\n    }\n}\n\nexport const FakeVScrollSelector: ComponentSelector = {\n    selector: 'AG-FAKE-VERTICAL-SCROLL',\n    component: FakeVScrollComp,\n};\n", "import type { ColumnModel } from '../columns/columnModel';\nimport type { VisibleColsService } from '../columns/visibleColsService';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { CtrlsService } from '../ctrlsService';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { BodyScrollEndEvent, BodyScrollEvent } from '../events';\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\nimport type { IRowModel } from '../interfaces/iRowModel';\nimport type { IRowNode, VerticalScrollPosition } from '../interfaces/iRowNode';\nimport type { AnimationFrameService } from '../misc/animationFrameService';\nimport type { PageBoundsService } from '../pagination/pageBoundsService';\nimport type { PaginationService } from '../pagination/paginationService';\nimport type { RowContainerHeightService } from '../rendering/rowContainerHeightService';\nimport type { RowRenderer } from '../rendering/rowRenderer';\nimport { _isIOSUserAgent } from '../utils/browser';\nimport { _getInnerHeight, _getScrollLeft, _isRtlNegativeScroll, _setScrollLeft } from '../utils/dom';\nimport { _debounce, _warnOnce } from '../utils/function';\nimport type { RowContainerCtrl } from './rowContainer/rowContainerCtrl';\n\nenum ScrollDirection {\n    Vertical,\n    Horizontal,\n}\n\nenum ScrollSource {\n    Container,\n    FakeContainer,\n}\n\nexport class GridBodyScrollFeature extends BeanStub {\n    private ctrlsService: CtrlsService;\n    private animationFrameService: AnimationFrameService;\n    private paginationService?: PaginationService;\n    private pageBoundsService: PageBoundsService;\n    private rowModel: IRowModel;\n    private heightScaler: RowContainerHeightService;\n    private rowRenderer: RowRenderer;\n    private columnModel: ColumnModel;\n    private visibleColsService: VisibleColsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.ctrlsService = beans.ctrlsService;\n        this.animationFrameService = beans.animationFrameService;\n        this.paginationService = beans.paginationService;\n        this.pageBoundsService = beans.pageBoundsService;\n        this.rowModel = beans.rowModel;\n        this.heightScaler = beans.rowContainerHeightService;\n        this.rowRenderer = beans.rowRenderer;\n        this.columnModel = beans.columnModel;\n        this.visibleColsService = beans.visibleColsService;\n    }\n\n    private enableRtl: boolean;\n\n    private lastScrollSource: (number | null)[] = [null, null];\n\n    private eBodyViewport: HTMLElement;\n\n    private scrollLeft = -1;\n    private nextScrollTop = -1;\n    private scrollTop = -1;\n\n    // Used to provide approximate values of scrollTop and offsetHeight\n    // without forcing the browser to recalculate styles.\n    private lastOffsetHeight = -1;\n    private lastScrollTop = -1;\n\n    private scrollTimer: number | undefined;\n\n    private readonly resetLastHScrollDebounced: () => void;\n    private readonly resetLastVScrollDebounced: () => void;\n\n    private centerRowsCtrl: RowContainerCtrl;\n\n    constructor(eBodyViewport: HTMLElement) {\n        super();\n        this.eBodyViewport = eBodyViewport;\n        this.resetLastHScrollDebounced = _debounce(\n            () => (this.lastScrollSource[ScrollDirection.Horizontal] = null),\n            500\n        );\n        this.resetLastVScrollDebounced = _debounce(() => (this.lastScrollSource[ScrollDirection.Vertical] = null), 500);\n    }\n\n    public postConstruct(): void {\n        this.enableRtl = this.gos.get('enableRtl');\n        this.addManagedEventListeners({\n            displayedColumnsWidthChanged: this.onDisplayedColumnsWidthChanged.bind(this),\n        });\n\n        this.ctrlsService.whenReady((p) => {\n            this.centerRowsCtrl = p.center;\n            this.onDisplayedColumnsWidthChanged();\n            this.addScrollListener();\n        });\n    }\n\n    private addScrollListener() {\n        const { fakeHScrollComp, fakeVScrollComp } = this.ctrlsService.getParams();\n\n        this.addManagedElementListeners(this.centerRowsCtrl.getViewportElement(), {\n            scroll: this.onHScroll.bind(this),\n        });\n        fakeHScrollComp.onScrollCallback(this.onFakeHScroll.bind(this));\n\n        const isDebounce = this.gos.get('debounceVerticalScrollbar');\n\n        const onVScroll = isDebounce ? _debounce(this.onVScroll.bind(this), 100) : this.onVScroll.bind(this);\n        const onFakeVScroll = isDebounce\n            ? _debounce(this.onFakeVScroll.bind(this), 100)\n            : this.onFakeVScroll.bind(this);\n\n        this.addManagedElementListeners(this.eBodyViewport, { scroll: onVScroll });\n        fakeVScrollComp.onScrollCallback(onFakeVScroll);\n    }\n\n    private onDisplayedColumnsWidthChanged(): void {\n        if (this.enableRtl) {\n            // because RTL is all backwards, a change in the width of the row\n            // can cause a change in the scroll position, without a scroll event,\n            // because the scroll position in RTL is a function that depends on\n            // the width. to be convinced of this, take out this line, enable RTL,\n            // scroll all the way to the left and then resize a column\n            this.horizontallyScrollHeaderCenterAndFloatingCenter();\n        }\n    }\n\n    public horizontallyScrollHeaderCenterAndFloatingCenter(scrollLeft?: number): void {\n        // when doing RTL, this method gets called once prematurely\n        const notYetInitialised = this.centerRowsCtrl == null;\n        if (notYetInitialised) {\n            return;\n        }\n\n        if (scrollLeft === undefined) {\n            scrollLeft = this.centerRowsCtrl.getCenterViewportScrollLeft();\n        }\n\n        const offset = this.enableRtl ? scrollLeft : -scrollLeft;\n        const { topCenter, stickyTopCenter, stickyBottomCenter, centerHeader, bottomCenter, fakeHScrollComp } =\n            this.ctrlsService.getParams();\n\n        centerHeader.setHorizontalScroll(-offset);\n        bottomCenter.setContainerTranslateX(offset);\n        topCenter.setContainerTranslateX(offset);\n        stickyTopCenter.setContainerTranslateX(offset);\n        stickyBottomCenter.setContainerTranslateX(offset);\n\n        const centerViewport = this.centerRowsCtrl.getViewportElement();\n        const isCenterViewportLastHorizontal =\n            this.lastScrollSource[ScrollDirection.Horizontal] === ScrollSource.Container;\n\n        scrollLeft = Math.abs(scrollLeft);\n\n        if (isCenterViewportLastHorizontal) {\n            fakeHScrollComp.setScrollPosition(scrollLeft);\n        } else {\n            _setScrollLeft(centerViewport, scrollLeft, this.enableRtl);\n        }\n    }\n\n    private isControllingScroll(source: ScrollSource, direction: ScrollDirection): boolean {\n        if (this.lastScrollSource[direction] == null) {\n            this.lastScrollSource[direction] = source;\n            return true;\n        }\n\n        return this.lastScrollSource[direction] === source;\n    }\n\n    private onFakeHScroll(): void {\n        if (!this.isControllingScroll(ScrollSource.FakeContainer, ScrollDirection.Horizontal)) {\n            return;\n        }\n        this.onHScrollCommon(ScrollSource.FakeContainer);\n    }\n\n    private onHScroll(): void {\n        if (!this.isControllingScroll(ScrollSource.Container, ScrollDirection.Horizontal)) {\n            return;\n        }\n        this.onHScrollCommon(ScrollSource.Container);\n    }\n\n    private onHScrollCommon(source: ScrollSource): void {\n        const centerContainerViewport = this.centerRowsCtrl.getViewportElement();\n        const { scrollLeft } = centerContainerViewport;\n\n        if (this.shouldBlockScrollUpdate(ScrollDirection.Horizontal, scrollLeft, true)) {\n            return;\n        }\n\n        let newScrollLeft: number;\n\n        if (source === ScrollSource.Container) {\n            newScrollLeft = _getScrollLeft(centerContainerViewport, this.enableRtl);\n        } else {\n            newScrollLeft = this.ctrlsService.get('fakeHScrollComp').getScrollPosition();\n        }\n\n        // we do Math.round() rather than Math.floor(), to mirror how scroll values are applied.\n        // eg if a scale is applied (ie user has zoomed the browser), then applying scroll=200\n        // could result in 199.88, which then floor(199.88) = 199, however round(199.88) = 200.\n        // initially Math.floor() was used, however this caused (almost) infinite loop with aligned grids,\n        // as the scroll would move 1px at at time bouncing from one grid to the next (eg one grid would cause\n        // scroll to 200px, the next to 199px, then the first back to 198px and so on).\n        this.doHorizontalScroll(Math.round(newScrollLeft));\n        this.resetLastHScrollDebounced();\n    }\n\n    private onFakeVScroll(): void {\n        if (!this.isControllingScroll(ScrollSource.FakeContainer, ScrollDirection.Vertical)) {\n            return;\n        }\n        this.onVScrollCommon(ScrollSource.FakeContainer);\n    }\n\n    private onVScroll(): void {\n        if (!this.isControllingScroll(ScrollSource.Container, ScrollDirection.Vertical)) {\n            return;\n        }\n        this.onVScrollCommon(ScrollSource.Container);\n    }\n\n    private onVScrollCommon(source: ScrollSource): void {\n        let scrollTop: number;\n\n        if (source === ScrollSource.Container) {\n            scrollTop = this.eBodyViewport.scrollTop;\n        } else {\n            scrollTop = this.ctrlsService.get('fakeVScrollComp').getScrollPosition();\n        }\n\n        if (this.shouldBlockScrollUpdate(ScrollDirection.Vertical, scrollTop, true)) {\n            return;\n        }\n        this.animationFrameService.setScrollTop(scrollTop);\n        this.nextScrollTop = scrollTop;\n\n        if (source === ScrollSource.Container) {\n            this.ctrlsService.get('fakeVScrollComp').setScrollPosition(scrollTop);\n        } else {\n            this.eBodyViewport.scrollTop = scrollTop;\n        }\n\n        // the `scrollGridIfNeeded` will recalculate the rows to be rendered by the grid\n        // so it should only be called after `eBodyViewport` has been scrolled to the correct\n        // position, otherwise the `first` and `last` row could be miscalculated.\n        if (this.gos.get('suppressAnimationFrame')) {\n            this.scrollGridIfNeeded();\n        } else {\n            this.animationFrameService.schedule();\n        }\n\n        this.resetLastVScrollDebounced();\n    }\n\n    private doHorizontalScroll(scrollLeft: number): void {\n        const fakeScrollLeft = this.ctrlsService.get('fakeHScrollComp').getScrollPosition();\n\n        if (this.scrollLeft === scrollLeft && scrollLeft === fakeScrollLeft) {\n            return;\n        }\n\n        this.scrollLeft = scrollLeft;\n\n        this.fireScrollEvent(ScrollDirection.Horizontal);\n        this.horizontallyScrollHeaderCenterAndFloatingCenter(scrollLeft);\n        this.centerRowsCtrl.onHorizontalViewportChanged(true);\n    }\n\n    private fireScrollEvent(direction: ScrollDirection): void {\n        const bodyScrollEvent: WithoutGridCommon<BodyScrollEvent> = {\n            type: 'bodyScroll',\n            direction: direction === ScrollDirection.Horizontal ? 'horizontal' : 'vertical',\n            left: this.scrollLeft,\n            top: this.scrollTop,\n        };\n\n        this.eventService.dispatchEvent(bodyScrollEvent);\n\n        window.clearTimeout(this.scrollTimer);\n        this.scrollTimer = undefined;\n\n        this.scrollTimer = window.setTimeout(() => {\n            const bodyScrollEndEvent: WithoutGridCommon<BodyScrollEndEvent> = {\n                ...bodyScrollEvent,\n                type: 'bodyScrollEnd',\n            };\n\n            this.eventService.dispatchEvent(bodyScrollEndEvent);\n        }, 100);\n    }\n\n    private shouldBlockScrollUpdate(direction: ScrollDirection, scrollTo: number, touchOnly: boolean = false): boolean {\n        // touch devices allow elastic scroll - which temporally scrolls the panel outside of the viewport\n        // (eg user uses touch to go to the left of the grid, but drags past the left, the rows will actually\n        // scroll past the left until the user releases the mouse). when this happens, we want ignore the scroll,\n        // as otherwise it was causing the rows and header to flicker.\n\n        // sometimes when scrolling, we got values that extended the maximum scroll allowed. we used to\n        // ignore these scrolls. problem is the max scroll position could be skipped (eg the previous scroll event\n        // could be 10px before the max position, and then current scroll event could be 20px after the max position).\n        // if we just ignored the last event, we would be setting the scroll to 10px before the max position, when in\n        // actual fact the user has exceeded the max scroll and thus scroll should be set to the max.\n\n        if (touchOnly && !_isIOSUserAgent()) {\n            return false;\n        }\n\n        if (direction === ScrollDirection.Vertical) {\n            return this.shouldBlockVerticalScroll(scrollTo);\n        }\n\n        return this.shouldBlockHorizontalScroll(scrollTo);\n    }\n\n    private shouldBlockVerticalScroll(scrollTo: number): boolean {\n        const clientHeight = _getInnerHeight(this.eBodyViewport);\n        const { scrollHeight } = this.eBodyViewport;\n\n        if (scrollTo < 0 || scrollTo + clientHeight > scrollHeight) {\n            return true;\n        }\n\n        return false;\n    }\n\n    private shouldBlockHorizontalScroll(scrollTo: number): boolean {\n        const clientWidth = this.centerRowsCtrl.getCenterWidth();\n        const { scrollWidth } = this.centerRowsCtrl.getViewportElement();\n\n        if (this.enableRtl && _isRtlNegativeScroll()) {\n            if (scrollTo > 0) {\n                return true;\n            }\n        } else if (scrollTo < 0) {\n            return true;\n        }\n\n        if (Math.abs(scrollTo) + clientWidth > scrollWidth) {\n            return true;\n        }\n\n        return false;\n    }\n\n    private redrawRowsAfterScroll(): void {\n        this.fireScrollEvent(ScrollDirection.Vertical);\n    }\n\n    // this is to cater for AG-3274, where grid is removed from the dom and then inserted back in again.\n    // (which happens with some implementations of tabbing). this can result in horizontal scroll getting\n    // reset back to the left, however no scroll event is fired. so we need to get header to also scroll\n    // back to the left to be kept in sync.\n    // adding and removing the grid from the DOM both resets the scroll position and\n    // triggers a resize event, so notify listeners if the scroll position has changed\n    public checkScrollLeft(): void {\n        if (this.scrollLeft !== this.centerRowsCtrl.getCenterViewportScrollLeft()) {\n            this.onHScrollCommon(ScrollSource.Container);\n        }\n    }\n\n    public scrollGridIfNeeded(): boolean {\n        const frameNeeded = this.scrollTop != this.nextScrollTop;\n\n        if (frameNeeded) {\n            this.scrollTop = this.nextScrollTop;\n            this.redrawRowsAfterScroll();\n        }\n\n        return frameNeeded;\n    }\n\n    // called by scrollHorizontally method and alignedGridsService\n    public setHorizontalScrollPosition(hScrollPosition: number, fromAlignedGridsService = false): void {\n        const minScrollLeft = 0;\n        const maxScrollLeft =\n            this.centerRowsCtrl.getViewportElement().scrollWidth - this.centerRowsCtrl.getCenterWidth();\n\n        // if this is call is coming from the alignedGridsService, we don't need to validate the\n        // scroll, because it has already been validated by the grid firing the scroll event.\n        if (!fromAlignedGridsService && this.shouldBlockScrollUpdate(ScrollDirection.Horizontal, hScrollPosition)) {\n            if (this.enableRtl && _isRtlNegativeScroll()) {\n                hScrollPosition = hScrollPosition > 0 ? 0 : maxScrollLeft;\n            } else {\n                hScrollPosition = Math.min(Math.max(hScrollPosition, minScrollLeft), maxScrollLeft);\n            }\n        }\n\n        _setScrollLeft(this.centerRowsCtrl.getViewportElement(), Math.abs(hScrollPosition), this.enableRtl);\n        // we need to manually do the event handling (rather than wait for the event)\n        // for the alignedGridsService, as if we don't, the aligned grid service gets\n        // notified async, and then it's 'consuming' flag doesn't get used right, and\n        // we can end up with an infinite loop\n        this.doHorizontalScroll(hScrollPosition);\n    }\n\n    public setVerticalScrollPosition(vScrollPosition: number): void {\n        this.eBodyViewport.scrollTop = vScrollPosition;\n    }\n\n    public getVScrollPosition(): VerticalScrollPosition {\n        this.lastScrollTop = this.eBodyViewport.scrollTop;\n        this.lastOffsetHeight = this.eBodyViewport.offsetHeight;\n        const result = {\n            top: this.lastScrollTop,\n            bottom: this.lastScrollTop + this.lastOffsetHeight,\n        };\n        return result;\n    }\n\n    /** Get an approximate scroll position that returns the last real value read.\n     * This is useful for avoiding repeated DOM reads that force the browser to recalculate styles.\n     * This can have big performance improvements but may not be 100% accurate so only use if this is acceptable.\n     */\n    public getApproximateVScollPosition(): VerticalScrollPosition {\n        if (this.lastScrollTop >= 0 && this.lastOffsetHeight >= 0) {\n            return {\n                top: this.scrollTop,\n                bottom: this.scrollTop + this.lastOffsetHeight,\n            };\n        }\n        return this.getVScrollPosition();\n    }\n\n    public getHScrollPosition(): { left: number; right: number } {\n        return this.centerRowsCtrl.getHScrollPosition();\n    }\n\n    public isHorizontalScrollShowing(): boolean {\n        return this.centerRowsCtrl.isHorizontalScrollShowing();\n    }\n\n    // called by the headerRootComp and moveColumnController\n    public scrollHorizontally(pixels: number): number {\n        const oldScrollPosition = this.centerRowsCtrl.getViewportElement().scrollLeft;\n\n        this.setHorizontalScrollPosition(oldScrollPosition + pixels);\n        return this.centerRowsCtrl.getViewportElement().scrollLeft - oldScrollPosition;\n    }\n\n    // gets called by rowRenderer when new data loaded, as it will want to scroll to the top\n    public scrollToTop(): void {\n        this.eBodyViewport.scrollTop = 0;\n    }\n\n    // Valid values for position are bottom, middle and top\n    public ensureNodeVisible<TData = any>(\n        comparator: TData | IRowNode<TData> | ((row: IRowNode<TData>) => boolean),\n        position: 'top' | 'bottom' | 'middle' | null = null\n    ) {\n        // look for the node index we want to display\n        const rowCount = this.rowModel.getRowCount();\n        let indexToSelect = -1;\n        // go through all the nodes, find the one we want to show\n        for (let i = 0; i < rowCount; i++) {\n            const node = this.rowModel.getRow(i);\n            if (typeof comparator === 'function') {\n                // Have to assert type here, as type could be TData & Function\n                const predicate = comparator as (row: IRowNode<TData>) => boolean;\n                if (node && predicate(node)) {\n                    indexToSelect = i;\n                    break;\n                }\n            } else {\n                // check object equality against node and data\n                if (comparator === node || comparator === node!.data) {\n                    indexToSelect = i;\n                    break;\n                }\n            }\n        }\n        if (indexToSelect >= 0) {\n            this.ensureIndexVisible(indexToSelect, position);\n        }\n    }\n\n    // Valid values for position are bottom, middle and top\n    // position should be {'top','middle','bottom', or undefined/null}.\n    // if undefined/null, then the grid will to the minimal amount of scrolling,\n    // eg if grid needs to scroll up, it scrolls until row is on top,\n    //    if grid needs to scroll down, it scrolls until row is on bottom,\n    //    if row is already in view, grid does not scroll\n    public ensureIndexVisible(index: number, position?: 'top' | 'bottom' | 'middle' | null) {\n        // if for print or auto height, everything is always visible\n        if (this.gos.isDomLayout('print')) {\n            return;\n        }\n\n        const rowCount = this.rowModel.getRowCount();\n\n        if (typeof index !== 'number' || index < 0 || index >= rowCount) {\n            _warnOnce('Invalid row index for ensureIndexVisible: ' + index);\n            return;\n        }\n\n        const isPaging = this.gos.get('pagination');\n        const paginationPanelEnabled = isPaging && !this.gos.get('suppressPaginationPanel');\n\n        this.getFrameworkOverrides().wrapIncoming(() => {\n            if (!paginationPanelEnabled) {\n                this.paginationService?.goToPageWithIndex(index);\n            }\n\n            const gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();\n            const stickyTopHeight = gridBodyCtrl.getStickyTopHeight();\n            const stickyBottomHeight = gridBodyCtrl.getStickyBottomHeight();\n\n            const rowNode = this.rowModel.getRow(index);\n            let rowGotShiftedDuringOperation: boolean;\n\n            do {\n                const startingRowTop = rowNode!.rowTop;\n                const startingRowHeight = rowNode!.rowHeight;\n\n                const paginationOffset = this.pageBoundsService.getPixelOffset();\n                const rowTopPixel = rowNode!.rowTop! - paginationOffset;\n                const rowBottomPixel = rowTopPixel + rowNode!.rowHeight!;\n\n                const scrollPosition = this.getVScrollPosition();\n                const heightOffset = this.heightScaler.getDivStretchOffset();\n\n                const vScrollTop = scrollPosition.top + heightOffset;\n                const vScrollBottom = scrollPosition.bottom + heightOffset;\n\n                const viewportHeight = vScrollBottom - vScrollTop;\n\n                // work out the pixels for top, middle and bottom up front,\n                // make the if/else below easier to read\n                const pxTop = this.heightScaler.getScrollPositionForPixel(rowTopPixel);\n                const pxBottom = this.heightScaler.getScrollPositionForPixel(rowBottomPixel - viewportHeight);\n                // make sure if middle, the row is not outside the top of the grid\n                const pxMiddle = Math.min((pxTop + pxBottom) / 2, rowTopPixel);\n\n                const rowAboveViewport = vScrollTop + stickyTopHeight > rowTopPixel;\n                const rowBelowViewport = vScrollBottom - stickyBottomHeight < rowBottomPixel;\n\n                let newScrollPosition: number | null = null;\n\n                if (position === 'top') {\n                    newScrollPosition = pxTop;\n                } else if (position === 'bottom') {\n                    newScrollPosition = pxBottom;\n                } else if (position === 'middle') {\n                    newScrollPosition = pxMiddle;\n                } else if (rowAboveViewport) {\n                    // if row is before, scroll up with row at top\n                    newScrollPosition = pxTop - stickyTopHeight;\n                } else if (rowBelowViewport) {\n                    // if row is after, scroll down with row at bottom\n                    newScrollPosition = pxBottom + stickyBottomHeight;\n                }\n\n                if (newScrollPosition !== null) {\n                    this.setVerticalScrollPosition(newScrollPosition);\n                    this.rowRenderer.redraw({ afterScroll: true });\n                }\n\n                // the row can get shifted if during the rendering (during rowRenderer.redraw()),\n                // the height of a row changes due to lazy calculation of row heights when using\n                // colDef.autoHeight or gridOptions.getRowHeight.\n                // if row was shifted, then the position we scrolled to is incorrect.\n                rowGotShiftedDuringOperation =\n                    startingRowTop !== rowNode!.rowTop || startingRowHeight !== rowNode!.rowHeight;\n            } while (rowGotShiftedDuringOperation);\n\n            // so when we return back to user, the cells have rendered\n            this.animationFrameService.flushAllFrames();\n        });\n    }\n\n    public ensureColumnVisible(key: any, position: 'auto' | 'start' | 'middle' | 'end' = 'auto'): void {\n        const column = this.columnModel.getCol(key);\n\n        if (!column) {\n            return;\n        }\n\n        // calling ensureColumnVisible on a pinned column doesn't make sense\n        if (column.isPinned()) {\n            return;\n        }\n\n        // defensive\n        if (!this.visibleColsService.isColDisplayed(column)) {\n            return;\n        }\n\n        const newHorizontalScroll: number | null = this.getPositionedHorizontalScroll(column, position);\n\n        this.getFrameworkOverrides().wrapIncoming(() => {\n            if (newHorizontalScroll !== null) {\n                this.centerRowsCtrl.setCenterViewportScrollLeft(newHorizontalScroll);\n            }\n\n            // this will happen anyway, as the move will cause a 'scroll' event on the body, however\n            // it is possible that the ensureColumnVisible method is called from within AG Grid and\n            // the caller will need to have the columns rendered to continue, which will be before\n            // the event has been worked on (which is the case for cell navigation).\n            this.centerRowsCtrl.onHorizontalViewportChanged();\n\n            // so when we return back to user, the cells have rendered\n            this.animationFrameService.flushAllFrames();\n        });\n    }\n\n    public setScrollPosition(top: number, left: number): void {\n        this.getFrameworkOverrides().wrapIncoming(() => {\n            this.centerRowsCtrl.setCenterViewportScrollLeft(left);\n            this.setVerticalScrollPosition(top);\n            this.rowRenderer.redraw({ afterScroll: true });\n            this.animationFrameService.flushAllFrames();\n        });\n    }\n\n    private getPositionedHorizontalScroll(\n        column: AgColumn,\n        position: 'auto' | 'start' | 'middle' | 'end'\n    ): number | null {\n        const { columnBeforeStart, columnAfterEnd } = this.isColumnOutsideViewport(column);\n\n        const viewportTooSmallForColumn = this.centerRowsCtrl.getCenterWidth() < column.getActualWidth();\n        const viewportWidth = this.centerRowsCtrl.getCenterWidth();\n\n        const isRtl = this.enableRtl;\n\n        let alignColToStart = (isRtl ? columnBeforeStart : columnAfterEnd) || viewportTooSmallForColumn;\n        let alignColToEnd = isRtl ? columnAfterEnd : columnBeforeStart;\n\n        if (position !== 'auto') {\n            alignColToStart = position === 'start';\n            alignColToEnd = position === 'end';\n        }\n\n        const isMiddle = position === 'middle';\n\n        if (alignColToStart || alignColToEnd || isMiddle) {\n            const { colLeft, colMiddle, colRight } = this.getColumnBounds(column);\n\n            if (isMiddle) {\n                return colMiddle - viewportWidth / 2;\n            }\n\n            if (alignColToStart) {\n                return isRtl ? colRight : colLeft;\n            }\n\n            return isRtl ? colLeft - viewportWidth : colRight - viewportWidth;\n        }\n\n        return null;\n    }\n\n    private isColumnOutsideViewport(column: AgColumn): { columnBeforeStart: boolean; columnAfterEnd: boolean } {\n        const { start: viewportStart, end: viewportEnd } = this.getViewportBounds();\n        const { colLeft, colRight } = this.getColumnBounds(column);\n\n        const isRtl = this.enableRtl;\n\n        const columnBeforeStart = isRtl ? viewportStart > colRight : viewportEnd < colRight;\n        const columnAfterEnd = isRtl ? viewportEnd < colLeft : viewportStart > colLeft;\n\n        return { columnBeforeStart, columnAfterEnd };\n    }\n\n    private getColumnBounds(column: AgColumn): { colLeft: number; colMiddle: number; colRight: number } {\n        const isRtl = this.enableRtl;\n        const bodyWidth = this.visibleColsService.getBodyContainerWidth();\n        const colWidth = column.getActualWidth();\n        const colLeft = column.getLeft()!;\n        const multiplier = isRtl ? -1 : 1;\n\n        const colLeftPixel = isRtl ? bodyWidth - colLeft : colLeft;\n        const colRightPixel = colLeftPixel + colWidth * multiplier;\n        const colMidPixel = colLeftPixel + (colWidth / 2) * multiplier;\n\n        return { colLeft: colLeftPixel, colMiddle: colMidPixel, colRight: colRightPixel };\n    }\n\n    private getViewportBounds(): { start: number; end: number; width: number } {\n        const viewportWidth = this.centerRowsCtrl.getCenterWidth();\n        const scrollPosition = this.centerRowsCtrl.getCenterViewportScrollLeft();\n\n        const viewportStartPixel = scrollPosition;\n        const viewportEndPixel = viewportWidth + scrollPosition;\n\n        return { start: viewportStartPixel, end: viewportEndPixel, width: viewportWidth };\n    }\n}\n", "import type { ColumnModel } from '../columns/columnModel';\nimport type { ColumnSizeService, ISizeColumnsToFitParams } from '../columns/columnSizeService';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { CtrlsService } from '../ctrlsService';\nimport type { DragAndDropService } from '../dragAndDrop/dragAndDropService';\nimport type { Environment } from '../environment';\nimport type { FilterManager } from '../filter/filterManager';\nimport type { HeaderNavigationService } from '../headerRendering/common/headerNavigationService';\nimport type { IRowModel } from '../interfaces/iRowModel';\nimport type { AnimationFrameService } from '../misc/animationFrameService';\nimport type { EventShowContextMenuParams, MenuService } from '../misc/menuService';\nimport type { PinnedRowModel } from '../pinnedRowModel/pinnedRowModel';\nimport type { RowContainerHeightService } from '../rendering/rowContainerHeightService';\nimport type { RowRenderer } from '../rendering/rowRenderer';\nimport type { LayoutView } from '../styling/layoutFeature';\nimport { LayoutFeature } from '../styling/layoutFeature';\nimport { _getTabIndex, _isIOSUserAgent, _isInvisibleScrollbar } from '../utils/browser';\nimport { _getInnerWidth, _isElementChildOfClass, _isVerticalScrollShowing } from '../utils/dom';\nimport { _warnOnce } from '../utils/function';\nimport type { PopupService } from '../widgets/popupService';\nimport type { LongTapEvent } from '../widgets/touchListener';\nimport { TouchListener } from '../widgets/touchListener';\nimport { GridBodyScrollFeature } from './gridBodyScrollFeature';\nimport type { MouseEventService } from './mouseEventService';\nimport { RowDragFeature } from './rowDragFeature';\nimport type { ScrollVisibleService } from './scrollVisibleService';\n\nexport type RowAnimationCssClasses = 'ag-row-animation' | 'ag-row-no-animation';\n\nexport const CSS_CLASS_FORCE_VERTICAL_SCROLL = 'ag-force-vertical-scroll';\n\nconst CSS_CLASS_CELL_SELECTABLE = 'ag-selectable';\nconst CSS_CLASS_COLUMN_MOVING = 'ag-column-moving';\n\nexport interface IGridBodyComp extends LayoutView {\n    setColumnMovingCss(cssClass: string, on: boolean): void;\n    setCellSelectableCss(cssClass: string | null, on: boolean): void;\n    setTopHeight(height: number): void;\n    setTopDisplay(display: string): void;\n    setBottomHeight(height: number): void;\n    setBottomDisplay(display: string): void;\n    setStickyTopHeight(height: string): void;\n    setStickyTopTop(offsetTop: string): void;\n    setStickyTopWidth(width: string): void;\n    setStickyBottomHeight(height: string): void;\n    setStickyBottomBottom(offsetBottom: string): void;\n    setStickyBottomWidth(width: string): void;\n    setColumnCount(count: number): void;\n    setRowCount(count: number): void;\n    setRowAnimationCssOnBodyViewport(cssClass: RowAnimationCssClasses, animate: boolean): void;\n    setAlwaysVerticalScrollClass(cssClass: string | null, on: boolean): void;\n    setPinnedTopBottomOverflowY(overflow: 'scroll' | 'hidden'): void;\n    registerBodyViewportResizeListener(listener: () => void): void;\n    setBodyViewportWidth(width: string): void;\n}\n\nexport class GridBodyCtrl extends BeanStub {\n    private animationFrameService: AnimationFrameService;\n    private rowContainerHeightService: RowContainerHeightService;\n    private ctrlsService: CtrlsService;\n    private columnModel: ColumnModel;\n    private columnSizeService: ColumnSizeService;\n    private scrollVisibleService: ScrollVisibleService;\n    private menuService: MenuService;\n    private headerNavigationService: HeaderNavigationService;\n    private dragAndDropService: DragAndDropService;\n    private pinnedRowModel: PinnedRowModel;\n    private rowRenderer: RowRenderer;\n    private popupService: PopupService;\n    private mouseEventService: MouseEventService;\n    private rowModel: IRowModel;\n    private filterManager?: FilterManager;\n    private environment: Environment;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.animationFrameService = beans.animationFrameService;\n        this.rowContainerHeightService = beans.rowContainerHeightService;\n        this.ctrlsService = beans.ctrlsService;\n        this.columnModel = beans.columnModel;\n        this.columnSizeService = beans.columnSizeService;\n        this.scrollVisibleService = beans.scrollVisibleService;\n        this.menuService = beans.menuService;\n        this.headerNavigationService = beans.headerNavigationService;\n        this.dragAndDropService = beans.dragAndDropService;\n        this.pinnedRowModel = beans.pinnedRowModel;\n        this.rowRenderer = beans.rowRenderer;\n        this.popupService = beans.popupService;\n        this.mouseEventService = beans.mouseEventService;\n        this.rowModel = beans.rowModel;\n        this.filterManager = beans.filterManager;\n        this.environment = beans.environment;\n    }\n\n    private comp: IGridBodyComp;\n    private eGridBody: HTMLElement;\n    private eBodyViewport: HTMLElement;\n    private eTop: HTMLElement;\n    private eBottom: HTMLElement;\n    private eStickyTop: HTMLElement;\n    private stickyTopHeight: number = 0;\n    private eStickyBottom: HTMLElement;\n    private stickyBottomHeight: number = 0;\n\n    private bodyScrollFeature: GridBodyScrollFeature;\n    private rowDragFeature: RowDragFeature;\n\n    public getScrollFeature(): GridBodyScrollFeature {\n        return this.bodyScrollFeature;\n    }\n\n    public getBodyViewportElement(): HTMLElement {\n        return this.eBodyViewport;\n    }\n\n    public setComp(\n        comp: IGridBodyComp,\n        eGridBody: HTMLElement,\n        eBodyViewport: HTMLElement,\n        eTop: HTMLElement,\n        eBottom: HTMLElement,\n        eStickyTop: HTMLElement,\n        eStickyBottom: HTMLElement\n    ): void {\n        this.comp = comp;\n        this.eGridBody = eGridBody;\n        this.eBodyViewport = eBodyViewport;\n        this.eTop = eTop;\n        this.eBottom = eBottom;\n        this.eStickyTop = eStickyTop;\n        this.eStickyBottom = eStickyBottom;\n\n        this.setCellTextSelection(this.gos.get('enableCellTextSelection'));\n        this.addManagedPropertyListener('enableCellTextSelection', (props) =>\n            this.setCellTextSelection(props.currentValue)\n        );\n\n        this.createManagedBean(new LayoutFeature(this.comp));\n        this.bodyScrollFeature = this.createManagedBean(new GridBodyScrollFeature(this.eBodyViewport));\n        this.addRowDragListener();\n\n        this.setupRowAnimationCssClass();\n\n        this.addEventListeners();\n        this.addFocusListeners([eTop, eBodyViewport, eBottom, eStickyTop, eStickyBottom]);\n        this.onGridColumnsChanged();\n        this.addBodyViewportListener();\n        this.setFloatingHeights();\n        this.disableBrowserDragging();\n        this.addStopEditingWhenGridLosesFocus();\n\n        this.filterManager?.setupAdvancedFilterHeaderComp(eTop);\n\n        this.ctrlsService.register('gridBodyCtrl', this);\n    }\n\n    public getComp(): IGridBodyComp {\n        return this.comp;\n    }\n\n    private addEventListeners(): void {\n        this.addManagedEventListeners({\n            gridColumnsChanged: this.onGridColumnsChanged.bind(this),\n            scrollVisibilityChanged: this.onScrollVisibilityChanged.bind(this),\n            pinnedRowDataChanged: this.setFloatingHeights.bind(this),\n            pinnedHeightChanged: this.setFloatingHeights.bind(this),\n            headerHeightChanged: this.onHeaderHeightChanged.bind(this),\n        });\n    }\n\n    private addFocusListeners(elements: HTMLElement[]): void {\n        elements.forEach((element) => {\n            this.addManagedElementListeners(element, {\n                focusin: (e: FocusEvent) => {\n                    const { target } = e;\n                    // element being focused is nested?\n                    const isFocusedElementNested = _isElementChildOfClass(target as HTMLElement, 'ag-root', element);\n\n                    element.classList.toggle('ag-has-focus', !isFocusedElementNested);\n                },\n                focusout: (e: FocusEvent) => {\n                    const { target, relatedTarget } = e;\n                    const gridContainRelatedTarget = element.contains(relatedTarget as HTMLElement);\n                    const isNestedRelatedTarget = _isElementChildOfClass(\n                        relatedTarget as HTMLElement,\n                        'ag-root',\n                        element\n                    );\n                    const isNestedTarget = _isElementChildOfClass(target as HTMLElement, 'ag-root', element);\n\n                    // element losing focus belongs to a nested grid,\n                    // it should not be handled here.\n                    if (isNestedTarget) {\n                        return;\n                    }\n\n                    // the grid does not contain, or the focus element is within\n                    // a nested grid\n                    if (!gridContainRelatedTarget || isNestedRelatedTarget) {\n                        element.classList.remove('ag-has-focus');\n                    }\n                },\n            });\n        });\n    }\n\n    // used by ColumnAnimationService\n    public setColumnMovingCss(moving: boolean): void {\n        this.comp.setColumnMovingCss(CSS_CLASS_COLUMN_MOVING, moving);\n    }\n\n    public setCellTextSelection(selectable: boolean = false): void {\n        this.comp.setCellSelectableCss(CSS_CLASS_CELL_SELECTABLE, selectable);\n    }\n\n    private onScrollVisibilityChanged(): void {\n        const visible = this.scrollVisibleService.isVerticalScrollShowing();\n        this.setVerticalScrollPaddingVisible(visible);\n        this.setStickyWidth(visible);\n        this.setStickyBottomOffsetBottom();\n\n        const scrollbarWidth = visible ? this.gos.getScrollbarWidth() || 0 : 0;\n        const pad = _isInvisibleScrollbar() ? 16 : 0;\n        const width = `calc(100% + ${scrollbarWidth + pad}px)`;\n\n        this.animationFrameService.requestAnimationFrame(() => this.comp.setBodyViewportWidth(width));\n    }\n\n    private onGridColumnsChanged(): void {\n        const columns = this.columnModel.getCols();\n        this.comp.setColumnCount(columns.length);\n    }\n\n    // if we do not do this, then the user can select a pic in the grid (eg an image in a custom cell renderer)\n    // and then that will start the browser native drag n' drop, which messes up with our own drag and drop.\n    private disableBrowserDragging(): void {\n        this.addManagedElementListeners(this.eGridBody, {\n            dragstart: (event: DragEvent) => {\n                if (event.target instanceof HTMLImageElement) {\n                    event.preventDefault();\n                    return false;\n                }\n            },\n        });\n    }\n\n    private addStopEditingWhenGridLosesFocus(): void {\n        if (!this.gos.get('stopEditingWhenCellsLoseFocus')) {\n            return;\n        }\n\n        const focusOutListener = (event: FocusEvent): void => {\n            // this is the element the focus is moving to\n            const elementWithFocus = event.relatedTarget as HTMLElement;\n\n            if (_getTabIndex(elementWithFocus) === null) {\n                this.rowRenderer.stopEditing();\n                return;\n            }\n\n            let clickInsideGrid =\n                // see if click came from inside the viewports\n                viewports.some((viewport) => viewport.contains(elementWithFocus)) &&\n                // and also that it's not from a detail grid\n                this.mouseEventService.isElementInThisGrid(elementWithFocus);\n\n            if (!clickInsideGrid) {\n                const popupService = this.popupService;\n\n                clickInsideGrid =\n                    popupService.getActivePopups().some((popup) => popup.contains(elementWithFocus)) ||\n                    popupService.isElementWithinCustomPopup(elementWithFocus);\n            }\n\n            if (!clickInsideGrid) {\n                this.rowRenderer.stopEditing();\n            }\n        };\n\n        const viewports = [this.eBodyViewport, this.eBottom, this.eTop, this.eStickyTop, this.eStickyBottom];\n\n        viewports.forEach((viewport) => this.addManagedElementListeners(viewport, { focusout: focusOutListener }));\n    }\n\n    public updateRowCount(): void {\n        const headerCount =\n            this.headerNavigationService.getHeaderRowCount() + (this.filterManager?.getHeaderRowCount() ?? 0);\n\n        const rowCount = this.rowModel.isLastRowIndexKnown() ? this.rowModel.getRowCount() : -1;\n        const total = rowCount === -1 ? -1 : headerCount + rowCount;\n\n        this.comp.setRowCount(total);\n    }\n\n    public registerBodyViewportResizeListener(listener: () => void): void {\n        this.comp.registerBodyViewportResizeListener(listener);\n    }\n\n    public setVerticalScrollPaddingVisible(visible: boolean): void {\n        const overflowY = visible ? 'scroll' : 'hidden';\n        this.comp.setPinnedTopBottomOverflowY(overflowY);\n    }\n\n    public isVerticalScrollShowing(): boolean {\n        const show = this.gos.get('alwaysShowVerticalScroll');\n        const cssClass = show ? CSS_CLASS_FORCE_VERTICAL_SCROLL : null;\n        const allowVerticalScroll = this.gos.isDomLayout('normal');\n        this.comp.setAlwaysVerticalScrollClass(cssClass, show);\n        return show || (allowVerticalScroll && _isVerticalScrollShowing(this.eBodyViewport));\n    }\n\n    private setupRowAnimationCssClass(): void {\n        let initialSizeMeasurementComplete = this.environment.hasMeasuredSizes();\n\n        const updateAnimationClass = () => {\n            // we don't want to use row animation if scaling, as rows jump strangely as you scroll,\n            // when scaling and doing row animation.\n            const animateRows =\n                initialSizeMeasurementComplete &&\n                this.gos.isAnimateRows() &&\n                !this.rowContainerHeightService.isStretching();\n            const animateRowsCssClass: RowAnimationCssClasses = animateRows\n                ? 'ag-row-animation'\n                : 'ag-row-no-animation';\n            this.comp.setRowAnimationCssOnBodyViewport(animateRowsCssClass, animateRows);\n        };\n\n        updateAnimationClass();\n\n        this.addManagedEventListeners({ heightScaleChanged: updateAnimationClass });\n        this.addManagedPropertyListener('animateRows', updateAnimationClass);\n\n        this.addManagedEventListeners({\n            gridStylesChanged: () => {\n                if (!initialSizeMeasurementComplete && this.environment.hasMeasuredSizes()) {\n                    initialSizeMeasurementComplete = true;\n                    updateAnimationClass();\n                }\n            },\n        });\n    }\n\n    public getGridBodyElement(): HTMLElement {\n        return this.eGridBody;\n    }\n\n    private addBodyViewportListener(): void {\n        // we want to listen for clicks directly on the eBodyViewport, so the user has a way of showing\n        // the context menu if no rows or columns are displayed, or user simply clicks outside of a cell\n        const listener = this.onBodyViewportContextMenu.bind(this);\n        this.addManagedElementListeners(this.eBodyViewport, { contextmenu: listener });\n        this.mockContextMenuForIPad(listener);\n\n        this.addManagedElementListeners(this.eBodyViewport, { wheel: this.onBodyViewportWheel.bind(this) });\n        this.addManagedElementListeners(this.eStickyTop, { wheel: this.onStickyWheel.bind(this) });\n        this.addManagedElementListeners(this.eStickyBottom, { wheel: this.onStickyWheel.bind(this) });\n\n        // allow mouseWheel on the Full Width Container to Scroll the Viewport\n        this.addFullWidthContainerWheelListener();\n    }\n\n    private addFullWidthContainerWheelListener(): void {\n        const fullWidthContainer = this.eBodyViewport.querySelector('.ag-full-width-container');\n        const eCenterColsViewport = this.eBodyViewport.querySelector('.ag-center-cols-viewport');\n\n        if (fullWidthContainer && eCenterColsViewport) {\n            this.addManagedElementListeners(fullWidthContainer, {\n                wheel: (e: WheelEvent) => this.onFullWidthContainerWheel(e, eCenterColsViewport),\n            });\n        }\n    }\n\n    private onFullWidthContainerWheel(e: WheelEvent, eCenterColsViewport: Element): void {\n        if (!e.deltaX || Math.abs(e.deltaY) > Math.abs(e.deltaX) || !this.mouseEventService.isEventFromThisGrid(e)) {\n            return;\n        }\n\n        e.preventDefault();\n        eCenterColsViewport.scrollBy({ left: e.deltaX });\n    }\n\n    private onBodyViewportContextMenu(mouseEvent?: MouseEvent, touch?: Touch, touchEvent?: TouchEvent): void {\n        if (!mouseEvent && !touchEvent) {\n            return;\n        }\n\n        if (this.gos.get('preventDefaultOnContextMenu')) {\n            const event = (mouseEvent || touchEvent)!;\n            event.preventDefault();\n        }\n\n        const { target } = (mouseEvent || touch)!;\n\n        if (target === this.eBodyViewport || target === this.ctrlsService.get('center').getViewportElement()) {\n            // show it\n            this.menuService.showContextMenu({\n                mouseEvent,\n                touchEvent,\n                value: null,\n                anchorToElement: this.eGridBody,\n            } as EventShowContextMenuParams);\n        }\n    }\n\n    private mockContextMenuForIPad(\n        listener: (mouseListener?: MouseEvent, touch?: Touch, touchEvent?: TouchEvent) => void\n    ): void {\n        // we do NOT want this when not in iPad\n        if (!_isIOSUserAgent()) {\n            return;\n        }\n\n        const touchListener = new TouchListener(this.eBodyViewport);\n        const longTapListener = (event: LongTapEvent) => {\n            listener(undefined, event.touchStart, event.touchEvent);\n        };\n\n        this.addManagedListeners(touchListener, { longTap: longTapListener });\n        this.addDestroyFunc(() => touchListener.destroy());\n    }\n\n    private onBodyViewportWheel(e: WheelEvent): void {\n        if (!this.gos.get('suppressScrollWhenPopupsAreOpen')) {\n            return;\n        }\n\n        if (this.popupService.hasAnchoredPopup()) {\n            e.preventDefault();\n        }\n    }\n\n    private onStickyWheel(e: WheelEvent): void {\n        e.preventDefault();\n\n        if (e.offsetY) {\n            this.scrollVertically(e.deltaY);\n        }\n    }\n\n    public getGui(): HTMLElement {\n        return this.eGridBody;\n    }\n\n    // called by rowDragFeature\n    public scrollVertically(pixels: number): number {\n        const oldScrollPosition = this.eBodyViewport.scrollTop;\n\n        this.bodyScrollFeature.setVerticalScrollPosition(oldScrollPosition + pixels);\n        return this.eBodyViewport.scrollTop - oldScrollPosition;\n    }\n\n    private addRowDragListener(): void {\n        this.rowDragFeature = this.createManagedBean(new RowDragFeature(this.eBodyViewport));\n        this.dragAndDropService.addDropTarget(this.rowDragFeature);\n    }\n\n    public getRowDragFeature(): RowDragFeature {\n        return this.rowDragFeature;\n    }\n\n    private setFloatingHeights(): void {\n        const { pinnedRowModel } = this;\n\n        const floatingTopHeight = pinnedRowModel.getPinnedTopTotalHeight();\n        const floatingBottomHeight = pinnedRowModel.getPinnedBottomTotalHeight();\n        this.comp.setTopHeight(floatingTopHeight);\n        this.comp.setBottomHeight(floatingBottomHeight);\n        this.comp.setTopDisplay(floatingTopHeight ? 'inherit' : 'none');\n        this.comp.setBottomDisplay(floatingBottomHeight ? 'inherit' : 'none');\n        this.setStickyTopOffsetTop();\n        this.setStickyBottomOffsetBottom();\n    }\n\n    public setStickyTopHeight(height: number = 0): void {\n        // console.log('setting sticky top height ' + height);\n        this.comp.setStickyTopHeight(`${height}px`);\n        this.stickyTopHeight = height;\n    }\n\n    public getStickyTopHeight(): number {\n        return this.stickyTopHeight;\n    }\n\n    public setStickyBottomHeight(height: number = 0): void {\n        this.comp.setStickyBottomHeight(`${height}px`);\n        this.stickyBottomHeight = height;\n    }\n\n    public getStickyBottomHeight(): number {\n        return this.stickyBottomHeight;\n    }\n\n    private setStickyWidth(vScrollVisible: boolean) {\n        if (!vScrollVisible) {\n            this.comp.setStickyTopWidth('100%');\n            this.comp.setStickyBottomWidth('100%');\n        } else {\n            const scrollbarWidth = this.gos.getScrollbarWidth();\n            this.comp.setStickyTopWidth(`calc(100% - ${scrollbarWidth}px)`);\n            this.comp.setStickyBottomWidth(`calc(100% - ${scrollbarWidth}px)`);\n        }\n    }\n\n    private onHeaderHeightChanged(): void {\n        this.setStickyTopOffsetTop();\n    }\n\n    private setStickyTopOffsetTop(): void {\n        const headerCtrl = this.ctrlsService.get('gridHeaderCtrl');\n        const headerHeight = headerCtrl.getHeaderHeight() + (this.filterManager?.getHeaderHeight() ?? 0);\n        const pinnedTopHeight = this.pinnedRowModel.getPinnedTopTotalHeight();\n\n        let height = 0;\n\n        if (headerHeight > 0) {\n            height += headerHeight;\n        }\n        if (pinnedTopHeight > 0) {\n            height += pinnedTopHeight;\n        }\n        if (height > 0) {\n            height += 1;\n        }\n\n        this.comp.setStickyTopTop(`${height}px`);\n    }\n\n    private setStickyBottomOffsetBottom(): void {\n        const pinnedBottomHeight = this.pinnedRowModel.getPinnedBottomTotalHeight();\n        const hScrollShowing = this.scrollVisibleService.isHorizontalScrollShowing();\n        const scrollbarWidth = hScrollShowing ? this.gos.getScrollbarWidth() || 0 : 0;\n        const height = pinnedBottomHeight + scrollbarWidth;\n\n        this.comp.setStickyBottomBottom(`${height}px`);\n    }\n\n    // method will call itself if no available width. this covers if the grid\n    // isn't visible, but is just about to be visible.\n    public sizeColumnsToFit(params?: ISizeColumnsToFitParams, nextTimeout?: number) {\n        const removeScrollWidth = this.isVerticalScrollShowing();\n        const scrollWidthToRemove = removeScrollWidth ? this.gos.getScrollbarWidth() : 0;\n        // bodyViewportWidth should be calculated from eGridBody, not eBodyViewport\n        // because we change the width of the bodyViewport to hide the real browser scrollbar\n        const bodyViewportWidth = _getInnerWidth(this.eGridBody);\n        const availableWidth = bodyViewportWidth - scrollWidthToRemove;\n\n        if (availableWidth > 0) {\n            this.columnSizeService.sizeColumnsToFit(availableWidth, 'sizeColumnsToFit', false, params);\n            return;\n        }\n\n        if (nextTimeout === undefined) {\n            window.setTimeout(() => {\n                this.sizeColumnsToFit(params, 100);\n            }, 0);\n        } else if (nextTimeout === 100) {\n            window.setTimeout(() => {\n                this.sizeColumnsToFit(params, 500);\n            }, 100);\n        } else if (nextTimeout === 500) {\n            window.setTimeout(() => {\n                this.sizeColumnsToFit(params, -1);\n            }, 500);\n        } else {\n            _warnOnce(\n                'tried to call sizeColumnsToFit() but the grid is coming back with ' +\n                    'zero width, maybe the grid is not visible yet on the screen?'\n            );\n        }\n    }\n\n    // + rangeService\n    public addScrollEventListener(listener: () => void): void {\n        this.eBodyViewport.addEventListener('scroll', listener, { passive: true });\n    }\n\n    // + focusService\n    public removeScrollEventListener(listener: () => void): void {\n        this.eBodyViewport.removeEventListener('scroll', listener);\n    }\n}\n", "import type { UserCompDetails } from '../../components/framework/userComponentFactory';\nimport type { BeanCollection } from '../../context/context';\nimport type { PopupEditorWrapper } from '../../edit/cellEditors/popupEditorWrapper';\nimport type { AgColumn } from '../../entities/agColumn';\nimport type { CellStyle } from '../../entities/colDef';\nimport type { RowNode } from '../../entities/rowNode';\nimport type { ICellEditorComp, ICellEditorParams } from '../../interfaces/iCellEditor';\nimport { _setAriaRole } from '../../utils/aria';\nimport { _browserSupportsPreventScroll } from '../../utils/browser';\nimport { _addStylesToElement, _clearElement, _removeFromParent } from '../../utils/dom';\nimport { _warnOnce } from '../../utils/function';\nimport { _missing } from '../../utils/generic';\nimport { _escapeString } from '../../utils/string';\nimport { Component } from '../../widgets/component';\nimport type { TooltipParentComp } from '../../widgets/tooltipStateManager';\nimport type { ICellRendererComp } from './../cellRenderers/iCellRenderer';\nimport type { CheckboxSelectionComponent } from './../checkboxSelectionComponent';\nimport type { DndSourceComp } from './../dndSourceComp';\nimport type { RowCtrl } from './../row/rowCtrl';\nimport type { RowDragComp } from './../row/rowDragComp';\nimport type { CellCtrl, ICellComp } from './cellCtrl';\n\nexport class CellComp extends Component implements TooltipParentComp {\n    private eCellWrapper: HTMLElement | undefined;\n    private eCellValue: HTMLElement | undefined;\n\n    private beans: BeanCollection;\n    private column: AgColumn;\n    private rowNode: RowNode;\n    private eRow: HTMLElement;\n\n    private includeSelection: boolean;\n    private includeRowDrag: boolean;\n    private includeDndSource: boolean;\n\n    private forceWrapper: boolean;\n\n    private checkboxSelectionComp: CheckboxSelectionComponent | undefined;\n    private dndSourceComp: DndSourceComp | undefined;\n    private rowDraggingComp: RowDragComp | undefined;\n\n    private hideEditorPopup: ((...args: any[]) => any) | null | undefined;\n    private cellEditorPopupWrapper: PopupEditorWrapper | undefined;\n    private cellEditor: ICellEditorComp | null | undefined;\n    private cellEditorGui: HTMLElement | null;\n\n    private cellRenderer: ICellRendererComp | null | undefined;\n    private cellRendererGui: HTMLElement | null;\n    private cellRendererClass: any;\n\n    private rowCtrl: RowCtrl | null;\n\n    private cellCtrl: CellCtrl;\n\n    private firstRender: boolean;\n\n    // every time we go into edit mode, or back again, this gets incremented.\n    // it's the components way of dealing with the async nature of framework components,\n    // so if a framework component takes a while to be created, we know if the object\n    // is still relevant when creating is finished. eg we could click edit / un-edit 20\n    // times before the first React edit component comes back - we should discard\n    // the first 19.\n    private rendererVersion = 0;\n    private editorVersion = 0;\n\n    constructor(\n        beans: BeanCollection,\n        cellCtrl: CellCtrl,\n        printLayout: boolean,\n        eRow: HTMLElement,\n        editingRow: boolean\n    ) {\n        super();\n        this.beans = beans;\n        this.column = cellCtrl.getColumn();\n        this.rowNode = cellCtrl.getRowNode();\n        this.rowCtrl = cellCtrl.getRowCtrl();\n        this.eRow = eRow;\n        this.cellCtrl = cellCtrl;\n\n        const cellDiv = document.createElement('div');\n        cellDiv.setAttribute('comp-id', `${this.getCompId()}`);\n        this.setTemplateFromElement(cellDiv);\n\n        const eGui = this.getGui();\n\n        this.forceWrapper = cellCtrl.isForceWrapper();\n\n        this.refreshWrapper(false);\n\n        const setAttribute = (name: string, value: string | null | undefined) => {\n            if (value != null && value != '') {\n                eGui.setAttribute(name, value);\n            } else {\n                eGui.removeAttribute(name);\n            }\n        };\n\n        _setAriaRole(eGui, cellCtrl.getCellAriaRole());\n        setAttribute('col-id', cellCtrl.getColumnIdSanitised());\n        const tabIndex = cellCtrl.getTabIndex();\n        if (tabIndex !== undefined) {\n            setAttribute('tabindex', tabIndex.toString());\n        }\n\n        const compProxy: ICellComp = {\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\n            setUserStyles: (styles: CellStyle) => _addStylesToElement(eGui, styles),\n            getFocusableElement: () => this.getFocusableElement(),\n\n            setIncludeSelection: (include) => (this.includeSelection = include),\n            setIncludeRowDrag: (include) => (this.includeRowDrag = include),\n            setIncludeDndSource: (include) => (this.includeDndSource = include),\n\n            setRenderDetails: (compDetails, valueToDisplay, force) =>\n                this.setRenderDetails(compDetails, valueToDisplay, force),\n            setEditDetails: (compDetails, popup, position) => this.setEditDetails(compDetails, popup, position),\n\n            getCellEditor: () => this.cellEditor || null,\n            getCellRenderer: () => this.cellRenderer || null,\n            getParentOfValue: () => this.getParentOfValue(),\n        };\n\n        cellCtrl.setComp(compProxy, this.getGui(), this.eCellWrapper, printLayout, editingRow);\n    }\n\n    private getParentOfValue(): HTMLElement {\n        if (this.eCellValue) {\n            // if not editing, and using wrapper, then value goes in eCellValue\n            return this.eCellValue;\n        }\n        if (this.eCellWrapper) {\n            // if editing, and using wrapper, value (cell editor) goes in eCellWrapper\n            return this.eCellWrapper;\n        }\n\n        // if editing or rendering, and not using wrapper, value (or comp) is directly inside cell\n        return this.getGui();\n    }\n\n    private setRenderDetails(\n        compDetails: UserCompDetails | undefined,\n        valueToDisplay: any,\n        forceNewCellRendererInstance: boolean\n    ): void {\n        // this can happen if the users asks for the cell to refresh, but we are not showing the vale as we are editing\n        const isInlineEditing = this.cellEditor && !this.cellEditorPopupWrapper;\n        if (isInlineEditing) {\n            return;\n        }\n\n        // this means firstRender will be true for one pass only, as it's initialised to undefined\n        this.firstRender = this.firstRender == null;\n\n        // if display template has changed, means any previous Cell Renderer is in the wrong location\n        const controlWrapperChanged = this.refreshWrapper(false);\n        this.refreshEditStyles(false);\n\n        // all of these have dependencies on the eGui, so only do them after eGui is set\n        if (compDetails) {\n            const neverRefresh = forceNewCellRendererInstance || controlWrapperChanged;\n            const cellRendererRefreshSuccessful = neverRefresh ? false : this.refreshCellRenderer(compDetails);\n            if (!cellRendererRefreshSuccessful) {\n                this.destroyRenderer();\n                this.createCellRendererInstance(compDetails);\n            }\n        } else {\n            this.destroyRenderer();\n            this.insertValueWithoutCellRenderer(valueToDisplay);\n        }\n    }\n\n    private setEditDetails(\n        compDetails: UserCompDetails | undefined,\n        popup?: boolean,\n        position?: 'over' | 'under'\n    ): void {\n        if (compDetails) {\n            this.createCellEditorInstance(compDetails, popup, position);\n        } else {\n            this.destroyEditor();\n        }\n    }\n\n    private removeControls(): void {\n        this.checkboxSelectionComp = this.beans.context.destroyBean(this.checkboxSelectionComp);\n        this.dndSourceComp = this.beans.context.destroyBean(this.dndSourceComp);\n        this.rowDraggingComp = this.beans.context.destroyBean(this.rowDraggingComp);\n    }\n\n    // returns true if wrapper was changed\n    private refreshWrapper(editing: boolean): boolean {\n        const providingControls = this.includeRowDrag || this.includeDndSource || this.includeSelection;\n        const usingWrapper = providingControls || this.forceWrapper;\n\n        const putWrapperIn = usingWrapper && this.eCellWrapper == null;\n        if (putWrapperIn) {\n            const wrapperDiv = document.createElement('div');\n            wrapperDiv.setAttribute('role', 'presentation');\n            wrapperDiv.setAttribute('class', 'ag-cell-wrapper');\n            this.eCellWrapper = wrapperDiv;\n            this.getGui().appendChild(this.eCellWrapper);\n        }\n        const takeWrapperOut = !usingWrapper && this.eCellWrapper != null;\n        if (takeWrapperOut) {\n            _removeFromParent(this.eCellWrapper!);\n            this.eCellWrapper = undefined;\n        }\n\n        this.addOrRemoveCssClass('ag-cell-value', !usingWrapper);\n\n        const usingCellValue = !editing && usingWrapper;\n        const putCellValueIn = usingCellValue && this.eCellValue == null;\n        if (putCellValueIn) {\n            const cellSpan = document.createElement('span');\n            cellSpan.setAttribute('role', 'presentation');\n            cellSpan.setAttribute('class', 'ag-cell-value');\n            this.eCellValue = cellSpan;\n            this.eCellWrapper!.appendChild(this.eCellValue);\n        }\n        const takeCellValueOut = !usingCellValue && this.eCellValue != null;\n        if (takeCellValueOut) {\n            _removeFromParent(this.eCellValue!);\n            this.eCellValue = undefined;\n        }\n\n        const templateChanged = putWrapperIn || takeWrapperOut || putCellValueIn || takeCellValueOut;\n\n        if (templateChanged) {\n            this.removeControls();\n        }\n\n        if (!editing) {\n            if (providingControls) {\n                this.addControls();\n            }\n        }\n\n        return templateChanged;\n    }\n\n    private addControls(): void {\n        if (this.includeRowDrag) {\n            if (this.rowDraggingComp == null) {\n                this.rowDraggingComp = this.cellCtrl.createRowDragComp();\n                if (this.rowDraggingComp) {\n                    // put the checkbox in before the value\n                    this.eCellWrapper!.insertBefore(this.rowDraggingComp.getGui(), this.eCellValue!);\n                }\n            }\n        }\n\n        if (this.includeDndSource) {\n            if (this.dndSourceComp == null) {\n                this.dndSourceComp = this.cellCtrl.createDndSource();\n                // put the checkbox in before the value\n                this.eCellWrapper!.insertBefore(this.dndSourceComp.getGui(), this.eCellValue!);\n            }\n        }\n\n        if (this.includeSelection) {\n            if (this.checkboxSelectionComp == null) {\n                this.checkboxSelectionComp = this.cellCtrl.createSelectionCheckbox();\n                this.eCellWrapper!.insertBefore(this.checkboxSelectionComp.getGui(), this.eCellValue!);\n            }\n        }\n    }\n\n    private createCellEditorInstance(compDetails: UserCompDetails, popup?: boolean, position?: 'over' | 'under'): void {\n        const versionCopy = this.editorVersion;\n\n        const cellEditorPromise = compDetails.newAgStackInstance();\n        if (cellEditorPromise == null) {\n            return;\n        } // if empty, userComponentFactory already did a console message\n\n        const { params } = compDetails;\n        cellEditorPromise.then((c) => this.afterCellEditorCreated(versionCopy, c!, params, popup, position));\n\n        // if we don't do this, and editor component is async, then there will be a period\n        // when the component isn't present and keyboard navigation won't work - so example\n        // of user hitting tab quickly (more quickly than renderers getting created) won't work\n        const cellEditorAsync = _missing(this.cellEditor);\n        if (cellEditorAsync && params.cellStartedEdit) {\n            this.cellCtrl.focusCell(true);\n        }\n    }\n\n    private insertValueWithoutCellRenderer(valueToDisplay: any): void {\n        const eParent = this.getParentOfValue();\n        _clearElement(eParent);\n\n        const escapedValue = valueToDisplay != null ? _escapeString(valueToDisplay, true) : null;\n        if (escapedValue != null) {\n            eParent.textContent = escapedValue;\n        }\n    }\n\n    private destroyEditorAndRenderer(): void {\n        this.destroyRenderer();\n        this.destroyEditor();\n    }\n\n    private destroyRenderer(): void {\n        const { context } = this.beans;\n        this.cellRenderer = context.destroyBean(this.cellRenderer);\n        _removeFromParent(this.cellRendererGui);\n        this.cellRendererGui = null;\n        this.rendererVersion++;\n    }\n\n    private destroyEditor(): void {\n        const { context } = this.beans;\n\n        if (this.hideEditorPopup) {\n            this.hideEditorPopup();\n        }\n        this.hideEditorPopup = undefined;\n\n        this.cellEditor = context.destroyBean(this.cellEditor);\n        this.cellEditorPopupWrapper = context.destroyBean(this.cellEditorPopupWrapper);\n\n        _removeFromParent(this.cellEditorGui);\n        this.cellEditorGui = null;\n\n        this.editorVersion++;\n    }\n\n    private refreshCellRenderer(compClassAndParams: UserCompDetails): boolean {\n        if (this.cellRenderer == null || this.cellRenderer.refresh == null) {\n            return false;\n        }\n\n        // if different Cell Renderer configured this time (eg user is using selector, and\n        // returns different component) then don't refresh, force recreate of Cell Renderer\n        if (this.cellRendererClass !== compClassAndParams.componentClass) {\n            return false;\n        }\n\n        // take any custom params off of the user\n        const result = this.cellRenderer.refresh(compClassAndParams.params);\n\n        // NOTE on undefined: previous version of the cellRenderer.refresh() interface\n        // returned nothing, if the method existed, we assumed it refreshed. so for\n        // backwards compatibility, we assume if method exists and returns nothing,\n        // that it was successful.\n        return result === true || result === undefined;\n    }\n\n    private createCellRendererInstance(compDetails: UserCompDetails): void {\n        // never use task service if animation frame service is turned off.\n        // and lastly we never use it if doing auto-height, as the auto-height service checks the\n        // row height directly after the cell is created, it doesn't wait around for the tasks to complete\n        const suppressAnimationFrame = this.beans.gos.get('suppressAnimationFrame');\n        const useTaskService = !suppressAnimationFrame;\n\n        const displayComponentVersionCopy = this.rendererVersion;\n\n        const { componentClass } = compDetails;\n\n        const createCellRendererFunc = () => {\n            const staleTask = this.rendererVersion !== displayComponentVersionCopy || !this.isAlive();\n            if (staleTask) {\n                return;\n            }\n\n            // this can return null in the event that the user has switched from a renderer component to nothing, for example\n            // when using a cellRendererSelect to return a component or null depending on row data etc\n            const componentPromise = compDetails.newAgStackInstance();\n            const callback = this.afterCellRendererCreated.bind(this, displayComponentVersionCopy, componentClass);\n            if (componentPromise) {\n                componentPromise.then(callback);\n            }\n        };\n\n        // we only use task service when rendering for first time, which means it is not used when doing edits.\n        // if we changed this (always use task service) would make sense, however it would break tests, possibly\n        // test of users.\n        if (useTaskService && this.firstRender) {\n            this.beans.animationFrameService.createTask(\n                createCellRendererFunc,\n                this.rowNode.rowIndex!,\n                'createTasksP2'\n            );\n        } else {\n            createCellRendererFunc();\n        }\n    }\n\n    public getCtrl(): CellCtrl {\n        return this.cellCtrl;\n    }\n\n    public getRowCtrl(): RowCtrl | null {\n        return this.rowCtrl;\n    }\n\n    public getCellRenderer(): ICellRendererComp | null | undefined {\n        return this.cellRenderer;\n    }\n\n    public getCellEditor(): ICellEditorComp | null | undefined {\n        return this.cellEditor;\n    }\n\n    private afterCellRendererCreated(\n        cellRendererVersion: number,\n        cellRendererClass: any,\n        cellRenderer: ICellRendererComp\n    ): void {\n        const staleTask = !this.isAlive() || cellRendererVersion !== this.rendererVersion;\n\n        if (staleTask) {\n            this.beans.context.destroyBean(cellRenderer);\n            return;\n        }\n\n        this.cellRenderer = cellRenderer;\n        this.cellRendererClass = cellRendererClass;\n        this.cellRendererGui = this.cellRenderer.getGui();\n\n        if (this.cellRendererGui != null) {\n            const eParent = this.getParentOfValue();\n            _clearElement(eParent);\n            eParent.appendChild(this.cellRendererGui);\n        }\n    }\n\n    private afterCellEditorCreated(\n        requestVersion: number,\n        cellEditor: ICellEditorComp,\n        params: ICellEditorParams,\n        popup?: boolean,\n        position?: 'over' | 'under'\n    ): void {\n        // if editingCell=false, means user cancelled the editor before component was ready.\n        // if versionMismatch, then user cancelled the edit, then started the edit again, and this\n        //   is the first editor which is now stale.\n        const staleComp = requestVersion !== this.editorVersion;\n\n        if (staleComp) {\n            this.beans.context.destroyBean(cellEditor);\n            return;\n        }\n\n        const editingCancelledByUserComp = cellEditor.isCancelBeforeStart && cellEditor.isCancelBeforeStart();\n        if (editingCancelledByUserComp) {\n            this.beans.context.destroyBean(cellEditor);\n            this.cellCtrl.stopEditing(true);\n            return;\n        }\n\n        if (!cellEditor.getGui) {\n            _warnOnce(`cellEditor for column ${this.column.getId()} is missing getGui() method`);\n            this.beans.context.destroyBean(cellEditor);\n            return;\n        }\n\n        this.cellEditor = cellEditor;\n        this.cellEditorGui = cellEditor.getGui();\n\n        const cellEditorInPopup = popup || (cellEditor.isPopup !== undefined && cellEditor.isPopup());\n        if (cellEditorInPopup) {\n            this.addPopupCellEditor(params, position);\n        } else {\n            this.addInCellEditor();\n        }\n\n        this.refreshEditStyles(true, cellEditorInPopup);\n\n        if (cellEditor.afterGuiAttached) {\n            cellEditor.afterGuiAttached();\n        }\n    }\n\n    private refreshEditStyles(editing: boolean, isPopup?: boolean): void {\n        this.addOrRemoveCssClass('ag-cell-inline-editing', editing && !isPopup);\n        this.addOrRemoveCssClass('ag-cell-popup-editing', editing && !!isPopup);\n        this.addOrRemoveCssClass('ag-cell-not-inline-editing', !editing || !!isPopup);\n\n        this.rowCtrl?.setInlineEditingCss(editing);\n    }\n\n    private addInCellEditor(): void {\n        const eGui = this.getGui();\n\n        // if focus is inside the cell, we move focus to the cell itself\n        // before removing it's contents, otherwise errors could be thrown.\n        if (eGui.contains(this.beans.gos.getActiveDomElement())) {\n            eGui.focus();\n        }\n\n        this.destroyRenderer();\n        this.refreshWrapper(true);\n        this.clearParentOfValue();\n        if (this.cellEditorGui) {\n            const eParent = this.getParentOfValue();\n            eParent.appendChild(this.cellEditorGui);\n        }\n    }\n\n    private addPopupCellEditor(params: ICellEditorParams, position?: 'over' | 'under'): void {\n        if (this.beans.gos.get('editType') === 'fullRow') {\n            _warnOnce(\n                'popup cellEditor does not work with fullRowEdit - you cannot use them both ' +\n                    '- either turn off fullRowEdit, or stop using popup editors.'\n            );\n        }\n\n        const cellEditor = this.cellEditor!;\n\n        // if a popup, then we wrap in a popup editor and return the popup\n        this.cellEditorPopupWrapper = this.beans.context.createBean(\n            this.beans.editService!.createPopupEditorWrapper(params)\n        );\n        const ePopupGui = this.cellEditorPopupWrapper.getGui();\n        if (this.cellEditorGui) {\n            ePopupGui.appendChild(this.cellEditorGui);\n        }\n\n        const popupService = this.beans.popupService;\n\n        const useModelPopup = this.beans.gos.get('stopEditingWhenCellsLoseFocus');\n\n        // see if position provided by colDef, if not then check old way of method on cellComp\n        const positionToUse: 'over' | 'under' | undefined =\n            position != null ? position : cellEditor.getPopupPosition ? cellEditor.getPopupPosition() : 'over';\n        const isRtl = this.beans.gos.get('enableRtl');\n\n        const positionParams = {\n            ePopup: ePopupGui,\n            column: this.column,\n            rowNode: this.rowNode,\n            type: 'popupCellEditor',\n            eventSource: this.getGui(),\n            position: positionToUse,\n            alignSide: isRtl ? 'right' : 'left',\n            keepWithinBounds: true,\n        };\n\n        const positionCallback = popupService.positionPopupByComponent.bind(popupService, positionParams);\n\n        const translate = this.beans.localeService.getLocaleTextFunc();\n\n        const addPopupRes = popupService.addPopup({\n            modal: useModelPopup,\n            eChild: ePopupGui,\n            closeOnEsc: true,\n            closedCallback: () => {\n                this.cellCtrl.onPopupEditorClosed();\n            },\n            anchorToElement: this.getGui(),\n            positionCallback,\n            ariaLabel: translate('ariaLabelCellEditor', 'Cell Editor'),\n        });\n        if (addPopupRes) {\n            this.hideEditorPopup = addPopupRes.hideFunc;\n        }\n    }\n\n    public detach(): void {\n        this.eRow.removeChild(this.getGui());\n    }\n\n    // if the row is also getting destroyed, then we don't need to remove from dom,\n    // as the row will also get removed, so no need to take out the cells from the row\n    // if the row is going (removing is an expensive operation, so only need to remove\n    // the top part)\n    //\n    // note - this is NOT called by context, as we don't wire / unwire the CellComp for performance reasons.\n    public override destroy(): void {\n        this.cellCtrl.stopEditing();\n\n        this.destroyEditorAndRenderer();\n        this.removeControls();\n\n        super.destroy();\n    }\n\n    private clearParentOfValue(): void {\n        const eGui = this.getGui();\n\n        // if focus is inside the cell, we move focus to the cell itself\n        // before removing it's contents, otherwise errors could be thrown.\n        if (eGui.contains(this.beans.gos.getActiveDomElement()) && _browserSupportsPreventScroll()) {\n            eGui.focus({ preventScroll: true });\n        }\n\n        _clearElement(this.getParentOfValue());\n    }\n}\n", "import type { UserCompDetails } from '../../components/framework/userComponentFactory';\nimport type { BeanCollection } from '../../context/context';\nimport type { RowStyle } from '../../entities/gridOptions';\nimport type { RowContainerType } from '../../gridBodyComp/rowContainer/rowContainerCtrl';\nimport { _setAriaRole } from '../../utils/aria';\nimport { _addStylesToElement, _setDomChildOrder } from '../../utils/dom';\nimport { _errorOnce } from '../../utils/function';\nimport { _getAllValuesInObject } from '../../utils/object';\nimport { Component } from '../../widgets/component';\nimport { CellComp } from '../cell/cellComp';\nimport type { CellCtrl, CellCtrlInstanceId } from '../cell/cellCtrl';\nimport type { ICellRendererComp, ICellRendererParams } from '../cellRenderers/iCellRenderer';\nimport type { IRowComp, RowCtrl } from './rowCtrl';\n\nexport class RowComp extends Component {\n    private fullWidthCellRenderer: ICellRendererComp | null | undefined;\n\n    private beans: BeanCollection;\n\n    private rowCtrl: RowCtrl;\n\n    private domOrder: boolean;\n    private cellComps: { [key: CellCtrlInstanceId]: CellComp | null } = {};\n\n    constructor(ctrl: RowCtrl, beans: BeanCollection, containerType: RowContainerType) {\n        super();\n\n        this.beans = beans;\n        this.rowCtrl = ctrl;\n\n        const rowDiv = document.createElement('div');\n        rowDiv.setAttribute('comp-id', `${this.getCompId()}`);\n        rowDiv.setAttribute('style', this.getInitialStyle(containerType));\n        this.setTemplateFromElement(rowDiv);\n\n        const eGui = this.getGui();\n        const style = eGui.style;\n        this.domOrder = this.rowCtrl.getDomOrder();\n        _setAriaRole(eGui, 'row');\n        const tabIndex = this.rowCtrl.getTabIndex();\n        if (tabIndex != null) {\n            eGui.setAttribute('tabindex', tabIndex.toString());\n        }\n\n        const compProxy: IRowComp = {\n            setDomOrder: (domOrder) => (this.domOrder = domOrder),\n            setCellCtrls: (cellCtrls) => this.setCellCtrls(cellCtrls),\n            showFullWidth: (compDetails) => this.showFullWidth(compDetails),\n            getFullWidthCellRenderer: () => this.getFullWidthCellRenderer(),\n            addOrRemoveCssClass: (name, on) => this.addOrRemoveCssClass(name, on),\n            setUserStyles: (styles: RowStyle | undefined) => _addStylesToElement(eGui, styles),\n            setTop: (top) => (style.top = top),\n            setTransform: (transform) => (style.transform = transform),\n            setRowIndex: (rowIndex) => eGui.setAttribute('row-index', rowIndex),\n            setRowId: (rowId: string) => eGui.setAttribute('row-id', rowId),\n            setRowBusinessKey: (businessKey) => eGui.setAttribute('row-business-key', businessKey),\n            refreshFullWidth: (getUpdatedParams) => this.refreshFullWidth(getUpdatedParams),\n        };\n\n        ctrl.setComp(compProxy, this.getGui(), containerType);\n        this.addDestroyFunc(() => {\n            ctrl.unsetComp(containerType);\n        });\n    }\n\n    private getInitialStyle(containerType: RowContainerType): string {\n        const transform = this.rowCtrl.getInitialTransform(containerType);\n        return transform ? `transform: ${transform}` : `top: ${this.rowCtrl.getInitialRowTop(containerType)}`;\n    }\n\n    private showFullWidth(compDetails: UserCompDetails): void {\n        const callback = (cellRenderer: ICellRendererComp) => {\n            if (this.isAlive()) {\n                const eGui = cellRenderer.getGui();\n                this.getGui().appendChild(eGui);\n                this.rowCtrl.setupDetailRowAutoHeight(eGui);\n                this.setFullWidthRowComp(cellRenderer);\n            } else {\n                this.beans.context.destroyBean(cellRenderer);\n            }\n        };\n\n        // if not in cache, create new one\n        const res = compDetails.newAgStackInstance();\n\n        if (!res) {\n            return;\n        }\n\n        res.then(callback);\n    }\n\n    private setCellCtrls(cellCtrls: CellCtrl[]): void {\n        const cellsToRemove = Object.assign({}, this.cellComps);\n\n        cellCtrls.forEach((cellCtrl) => {\n            const key = cellCtrl.getInstanceId();\n            const existingCellComp = this.cellComps[key];\n\n            if (existingCellComp == null) {\n                this.newCellComp(cellCtrl);\n            } else {\n                cellsToRemove[key] = null;\n            }\n        });\n\n        const cellCompsToRemove = _getAllValuesInObject(cellsToRemove).filter((cellComp) => cellComp != null);\n\n        this.destroyCells(cellCompsToRemove as CellComp[]);\n        this.ensureDomOrder(cellCtrls);\n    }\n\n    private ensureDomOrder(cellCtrls: CellCtrl[]): void {\n        if (!this.domOrder) {\n            return;\n        }\n\n        const elementsInOrder: HTMLElement[] = [];\n        cellCtrls.forEach((cellCtrl) => {\n            const cellComp = this.cellComps[cellCtrl.getInstanceId()];\n            if (cellComp) {\n                elementsInOrder.push(cellComp.getGui());\n            }\n        });\n\n        _setDomChildOrder(this.getGui(), elementsInOrder);\n    }\n\n    private newCellComp(cellCtrl: CellCtrl): void {\n        const cellComp = new CellComp(\n            this.beans,\n            cellCtrl,\n            this.rowCtrl.isPrintLayout(),\n            this.getGui(),\n            this.rowCtrl.isEditing()\n        );\n        this.cellComps[cellCtrl.getInstanceId()] = cellComp;\n        this.getGui().appendChild(cellComp.getGui());\n    }\n\n    public override destroy(): void {\n        super.destroy();\n        this.destroyAllCells();\n    }\n\n    private destroyAllCells(): void {\n        const cellsToDestroy = _getAllValuesInObject(this.cellComps).filter((cp) => cp != null);\n        this.destroyCells(cellsToDestroy as CellComp[]);\n    }\n\n    private setFullWidthRowComp(fullWidthRowComponent: ICellRendererComp): void {\n        if (this.fullWidthCellRenderer) {\n            _errorOnce('should not be setting fullWidthRowComponent twice');\n        }\n\n        this.fullWidthCellRenderer = fullWidthRowComponent;\n        this.addDestroyFunc(() => {\n            this.fullWidthCellRenderer = this.beans.context.destroyBean(this.fullWidthCellRenderer);\n        });\n    }\n\n    private getFullWidthCellRenderer(): ICellRendererComp | null | undefined {\n        return this.fullWidthCellRenderer;\n    }\n\n    private destroyCells(cellComps: CellComp[]): void {\n        cellComps.forEach((cellComp) => {\n            // could be old reference, ie removed cell\n            if (!cellComp) {\n                return;\n            }\n\n            // check cellComp belongs in this container\n            const instanceId = cellComp.getCtrl().getInstanceId();\n            if (this.cellComps[instanceId] !== cellComp) {\n                return;\n            }\n\n            cellComp.detach();\n            cellComp.destroy();\n            this.cellComps[instanceId] = null;\n        });\n    }\n\n    private refreshFullWidth(getUpdatedParams: () => ICellRendererParams): boolean {\n        const { fullWidthCellRenderer } = this;\n        if (!fullWidthCellRenderer || !fullWidthCellRenderer.refresh) {\n            return false;\n        }\n\n        const params = getUpdatedParams();\n\n        return fullWidthCellRenderer.refresh(params);\n    }\n}\n", "import type { ColumnModel } from '../columns/columnModel';\nimport type { ColumnSizeService } from '../columns/columnSizeService';\nimport type { ColumnViewportService } from '../columns/columnViewportService';\nimport type { VisibleColsService } from '../columns/visibleColsService';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { CtrlsService } from '../ctrlsService';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { BodyHeightChangedEvent } from '../events';\nimport type { ScrollVisibleService, SetScrollsVisibleParams } from '../gridBodyComp/scrollVisibleService';\nimport type { ProcessUnpinnedColumnsParams } from '../interfaces/iCallbackParams';\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\nimport { _getInnerHeight, _getInnerWidth } from '../utils/dom';\nimport type { GridBodyCtrl } from './gridBodyCtrl';\nimport type { PinnedWidthService } from './pinnedWidthService';\nimport type { RowContainerCtrl } from './rowContainer/rowContainerCtrl';\n\n// listens to changes in the center viewport size, for column and row virtualisation,\n// and adjusts grid as necessary. there are two viewports, one for horizontal and one for\n// vertical scrolling.\nexport class ViewportSizeFeature extends BeanStub {\n    private ctrlsService: CtrlsService;\n    private pinnedWidthService: PinnedWidthService;\n    private columnModel: ColumnModel;\n    private visibleColsService: VisibleColsService;\n    private columnSizeService: ColumnSizeService;\n    private scrollVisibleService: ScrollVisibleService;\n    private columnViewportService: ColumnViewportService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.ctrlsService = beans.ctrlsService;\n        this.pinnedWidthService = beans.pinnedWidthService;\n        this.columnModel = beans.columnModel;\n        this.visibleColsService = beans.visibleColsService;\n        this.columnSizeService = beans.columnSizeService;\n        this.scrollVisibleService = beans.scrollVisibleService;\n        this.columnViewportService = beans.columnViewportService;\n    }\n\n    private centerContainerCtrl: RowContainerCtrl;\n    private gridBodyCtrl: GridBodyCtrl;\n\n    private centerWidth: number;\n    private bodyHeight: number;\n\n    constructor(centerContainerCtrl: RowContainerCtrl) {\n        super();\n        this.centerContainerCtrl = centerContainerCtrl;\n    }\n\n    public postConstruct(): void {\n        this.ctrlsService.whenReady((p) => {\n            this.gridBodyCtrl = p.gridBodyCtrl;\n            this.listenForResize();\n        });\n        this.addManagedEventListeners({ scrollbarWidthChanged: this.onScrollbarWidthChanged.bind(this) });\n        this.addManagedPropertyListeners(['alwaysShowHorizontalScroll', 'alwaysShowVerticalScroll'], () => {\n            this.checkViewportAndScrolls();\n        });\n    }\n\n    private listenForResize(): void {\n        const listener = () => this.onCenterViewportResized();\n\n        // centerContainer gets horizontal resizes\n        this.centerContainerCtrl.registerViewportResizeListener(listener);\n\n        // eBodyViewport gets vertical resizes\n        this.gridBodyCtrl.registerBodyViewportResizeListener(listener);\n    }\n\n    private onScrollbarWidthChanged() {\n        this.checkViewportAndScrolls();\n    }\n\n    private onCenterViewportResized(): void {\n        if (this.centerContainerCtrl.isViewportInTheDOMTree()) {\n            this.keepPinnedColumnsNarrowerThanViewport();\n            this.checkViewportAndScrolls();\n\n            const newWidth = this.centerContainerCtrl.getCenterWidth();\n\n            if (newWidth !== this.centerWidth) {\n                this.centerWidth = newWidth;\n                this.columnSizeService.refreshFlexedColumns({\n                    viewportWidth: this.centerWidth,\n                    updateBodyWidths: true,\n                    fireResizedEvent: true,\n                });\n            }\n        } else {\n            this.bodyHeight = 0;\n        }\n    }\n\n    private keepPinnedColumnsNarrowerThanViewport(): void {\n        const eBodyViewport = this.gridBodyCtrl.getBodyViewportElement();\n        const bodyWidth = _getInnerWidth(eBodyViewport);\n\n        if (bodyWidth <= 50) {\n            return;\n        }\n\n        // remove 50px from the bodyWidth to give some margin\n        let columnsToRemove = this.getPinnedColumnsOverflowingViewport(bodyWidth - 50);\n        const processUnpinnedColumns = this.gos.getCallback('processUnpinnedColumns');\n\n        if (!columnsToRemove.length) {\n            return;\n        }\n\n        if (processUnpinnedColumns) {\n            const params: WithoutGridCommon<ProcessUnpinnedColumnsParams> = {\n                columns: columnsToRemove,\n                viewportWidth: bodyWidth,\n            };\n            columnsToRemove = processUnpinnedColumns(params) as AgColumn[];\n        }\n\n        this.columnModel.setColsPinned(columnsToRemove, null, 'viewportSizeFeature');\n    }\n\n    private getPinnedColumnsOverflowingViewport(viewportWidth: number): AgColumn[] {\n        const pinnedRightWidth = this.pinnedWidthService.getPinnedRightWidth();\n        const pinnedLeftWidth = this.pinnedWidthService.getPinnedLeftWidth();\n        const totalPinnedWidth = pinnedRightWidth + pinnedLeftWidth;\n\n        if (totalPinnedWidth < viewportWidth) {\n            return [];\n        }\n\n        const pinnedLeftColumns = [...this.visibleColsService.getLeftCols()];\n        const pinnedRightColumns = [...this.visibleColsService.getRightCols()];\n\n        let indexRight = 0;\n        let indexLeft = 0;\n        const totalWidthRemoved = 0;\n\n        const columnsToRemove: AgColumn[] = [];\n\n        let spaceNecessary = totalPinnedWidth - totalWidthRemoved - viewportWidth;\n\n        while ((indexLeft < pinnedLeftColumns.length || indexRight < pinnedRightColumns.length) && spaceNecessary > 0) {\n            if (indexRight < pinnedRightColumns.length) {\n                const currentColumn = pinnedRightColumns[indexRight++];\n                spaceNecessary -= currentColumn.getActualWidth();\n                columnsToRemove.push(currentColumn);\n            }\n\n            if (indexLeft < pinnedLeftColumns.length && spaceNecessary > 0) {\n                const currentColumn = pinnedLeftColumns[indexLeft++];\n                spaceNecessary -= currentColumn.getActualWidth();\n                columnsToRemove.push(currentColumn);\n            }\n        }\n\n        return columnsToRemove;\n    }\n\n    // gets called every time the viewport size changes. we use this to check visibility of scrollbars\n    // in the grid panel, and also to check size and position of viewport for row and column virtualisation.\n    private checkViewportAndScrolls(): void {\n        // results in updating anything that depends on scroll showing\n        this.updateScrollVisibleService();\n\n        // fires event if height changes, used by PaginationService, HeightScalerService, RowRenderer\n        this.checkBodyHeight();\n\n        // check for virtual columns for ColumnController\n        this.onHorizontalViewportChanged();\n\n        this.gridBodyCtrl.getScrollFeature().checkScrollLeft();\n    }\n\n    public getBodyHeight(): number {\n        return this.bodyHeight;\n    }\n\n    private checkBodyHeight(): void {\n        const eBodyViewport = this.gridBodyCtrl.getBodyViewportElement();\n        const bodyHeight = _getInnerHeight(eBodyViewport);\n\n        if (this.bodyHeight !== bodyHeight) {\n            this.bodyHeight = bodyHeight;\n            const event: WithoutGridCommon<BodyHeightChangedEvent> = {\n                type: 'bodyHeightChanged',\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    private updateScrollVisibleService(): void {\n        // because of column animation (which takes 200ms), we have to do this twice.\n        // eg if user removes cols anywhere except at the RHS, then the cols on the RHS\n        // will animate to the left to fill the gap. this animation means just after\n        // the cols are removed, the remaining cols are still in the original location\n        // at the start of the animation, so pre animation the H scrollbar is still needed,\n        // but post animation it is not.\n        this.updateScrollVisibleServiceImpl();\n        setTimeout(this.updateScrollVisibleServiceImpl.bind(this), 500);\n    }\n\n    private updateScrollVisibleServiceImpl(): void {\n        const params: SetScrollsVisibleParams = {\n            horizontalScrollShowing: this.isHorizontalScrollShowing(),\n            verticalScrollShowing: this.gridBodyCtrl.isVerticalScrollShowing(),\n        };\n\n        this.scrollVisibleService.setScrollsVisible(params);\n    }\n\n    private isHorizontalScrollShowing(): boolean {\n        return this.centerContainerCtrl.isHorizontalScrollShowing();\n    }\n\n    // this gets called whenever a change in the viewport, so we can inform column controller it has to work\n    // out the virtual columns again. gets called from following locations:\n    // + ensureColVisible, scroll, init, layoutChanged, displayedColumnsChanged\n    private onHorizontalViewportChanged(): void {\n        const scrollWidth = this.centerContainerCtrl.getCenterWidth();\n        const scrollPosition = this.centerContainerCtrl.getViewportScrollLeft();\n\n        this.columnViewportService.setScrollPosition(scrollWidth, scrollPosition);\n    }\n}\n", "import { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { DragListenerParams, DragService } from '../../dragAndDrop/dragService';\nimport type { IRangeService } from '../../interfaces/IRangeService';\n\nexport class DragListenerFeature extends BeanStub {\n    private dragService: DragService;\n    private rangeService?: IRangeService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.dragService = beans.dragService;\n        this.rangeService = beans.rangeService;\n    }\n\n    private eContainer: HTMLElement;\n\n    constructor(eContainer: HTMLElement) {\n        super();\n        this.eContainer = eContainer;\n    }\n\n    private params: DragListenerParams;\n\n    public postConstruct(): void {\n        if (!this.rangeService) {\n            return;\n        }\n\n        this.params = {\n            eElement: this.eContainer,\n            onDragStart: this.rangeService.onDragStart.bind(this.rangeService),\n            onDragStop: this.rangeService.onDragStop.bind(this.rangeService),\n            onDragging: this.rangeService.onDragging.bind(this.rangeService),\n        };\n\n        this.addManagedPropertyListener('enableRangeSelection', (props) => {\n            const isEnabled = props.currentValue;\n            if (isEnabled) {\n                this.enableFeature();\n                return;\n            }\n            this.disableFeature();\n        });\n\n        this.addDestroyFunc(() => this.disableFeature());\n\n        const isRangeSelection = this.gos.get('enableRangeSelection');\n        if (isRangeSelection) {\n            this.enableFeature();\n        }\n    }\n\n    private enableFeature() {\n        this.dragService.addDragSource(this.params);\n    }\n\n    private disableFeature() {\n        this.dragService.removeDragSource(this.params);\n    }\n}\n", "import type { AgColumn } from '../entities/agColumn';\nimport type { CheckboxSelectionCallback } from '../entities/colDef';\nimport type { RowNode } from '../entities/rowNode';\nimport type { GroupCheckboxSelectionCallback } from '../interfaces/groupCellRenderer';\nimport { _getAriaCheckboxStateName } from '../utils/aria';\nimport { _stopPropagationForAgGrid } from '../utils/event';\nimport type { AgCheckbox } from '../widgets/agCheckbox';\nimport { AgCheckboxSelector } from '../widgets/agCheckbox';\nimport { Component, RefPlaceholder } from '../widgets/component';\n\nexport class CheckboxSelectionComponent extends Component {\n    private readonly eCheckbox: AgCheckbox = RefPlaceholder;\n\n    private rowNode: RowNode;\n    private column: AgColumn | undefined;\n    private overrides?: {\n        isVisible: boolean | CheckboxSelectionCallback | GroupCheckboxSelectionCallback | undefined;\n        callbackParams: any;\n        removeHidden: boolean;\n    };\n\n    constructor() {\n        super(\n            /* html*/ `\n            <div class=\"ag-selection-checkbox\" role=\"presentation\">\n                <ag-checkbox role=\"presentation\" data-ref=\"eCheckbox\"></ag-checkbox>\n            </div>`,\n            [AgCheckboxSelector]\n        );\n    }\n\n    public postConstruct(): void {\n        this.eCheckbox.setPassive(true);\n    }\n\n    public getCheckboxId(): string {\n        return this.eCheckbox.getInputElement().id;\n    }\n\n    private onDataChanged(): void {\n        // when rows are loaded for the second time, this can impact the selection, as a row\n        // could be loaded as already selected (if user scrolls down, and then up again).\n        this.onSelectionChanged();\n    }\n\n    private onSelectableChanged(): void {\n        this.showOrHideSelect();\n    }\n\n    private onSelectionChanged(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const state = this.rowNode.isSelected();\n        const stateName = _getAriaCheckboxStateName(translate, state);\n        const [ariaKey, ariaLabel] = this.rowNode.selectable\n            ? ['ariaRowToggleSelection', 'Press Space to toggle row selection']\n            : ['ariaRowSelectionDisabled', 'Row Selection is disabled for this row'];\n        const translatedLabel = translate(ariaKey, ariaLabel);\n\n        this.eCheckbox.setValue(state, true);\n        this.eCheckbox.setInputAriaLabel(`${translatedLabel} (${stateName})`);\n    }\n\n    private onClicked(newValue: boolean, groupSelectsFiltered: boolean | undefined, event: MouseEvent): number {\n        return this.rowNode.setSelectedParams({\n            newValue,\n            rangeSelect: event.shiftKey,\n            groupSelectsFiltered,\n            event,\n            source: 'checkboxSelected',\n        });\n    }\n\n    public init(params: {\n        rowNode: RowNode;\n        column?: AgColumn;\n        overrides?: {\n            isVisible: boolean | CheckboxSelectionCallback | GroupCheckboxSelectionCallback | undefined;\n            callbackParams: any;\n            removeHidden: boolean;\n        };\n    }): void {\n        this.rowNode = params.rowNode;\n        this.column = params.column;\n        this.overrides = params.overrides;\n\n        this.onSelectionChanged();\n\n        this.addManagedListeners(this.eCheckbox.getInputElement(), {\n            // we don't want double click on this icon to open a group\n            dblclick: (event) => _stopPropagationForAgGrid(event),\n            click: (event) => {\n                // we don't want the row clicked event to fire when selecting the checkbox, otherwise the row\n                // would possibly get selected twice\n                _stopPropagationForAgGrid(event);\n\n                const groupSelectsFiltered = this.gos.get('groupSelectsFiltered');\n                const isSelected = this.eCheckbox.getValue();\n\n                if (this.shouldHandleIndeterminateState(isSelected, groupSelectsFiltered)) {\n                    // try toggling children to determine action.\n                    const result = this.onClicked(true, groupSelectsFiltered, event || {});\n                    if (result === 0) {\n                        this.onClicked(false, groupSelectsFiltered, event);\n                    }\n                } else if (isSelected) {\n                    this.onClicked(false, groupSelectsFiltered, event);\n                } else {\n                    this.onClicked(true, groupSelectsFiltered, event || {});\n                }\n            },\n        });\n\n        this.addManagedListeners(this.rowNode, {\n            rowSelected: this.onSelectionChanged.bind(this),\n            dataChanged: this.onDataChanged.bind(this),\n            selectableChanged: this.onSelectableChanged.bind(this),\n        });\n\n        const isRowSelectableFunc = this.gos.get('isRowSelectable');\n        const checkboxVisibleIsDynamic = isRowSelectableFunc || typeof this.getIsVisible() === 'function';\n\n        if (checkboxVisibleIsDynamic) {\n            const showOrHideSelectListener = this.showOrHideSelect.bind(this);\n            this.addManagedEventListeners({ displayedColumnsChanged: showOrHideSelectListener });\n\n            this.addManagedListeners(this.rowNode, {\n                dataChanged: showOrHideSelectListener,\n                cellChanged: showOrHideSelectListener,\n            });\n\n            this.showOrHideSelect();\n        }\n\n        this.eCheckbox.getInputElement().setAttribute('tabindex', '-1');\n    }\n\n    private shouldHandleIndeterminateState(isSelected: boolean | undefined, groupSelectsFiltered: boolean): boolean {\n        // for CSRM groupSelectsFiltered, we can get an indeterminate state where all filtered children are selected,\n        // and we would expect clicking to deselect all rather than select all\n        return (\n            groupSelectsFiltered &&\n            (this.eCheckbox.getPreviousValue() === undefined || isSelected === undefined) &&\n            this.gos.isRowModelType('clientSide')\n        );\n    }\n\n    private showOrHideSelect(): void {\n        // if the isRowSelectable() is not provided the row node is selectable by default\n        let selectable = this.rowNode.selectable;\n\n        // checkboxSelection callback is deemed a legacy solution however we will still consider it's result.\n        // If selectable, then also check the colDef callback. if not selectable, this it short circuits - no need\n        // to call the colDef callback.\n        const isVisible = this.getIsVisible();\n        if (selectable) {\n            if (typeof isVisible === 'function') {\n                const extraParams = this.overrides?.callbackParams;\n\n                if (!this.column) {\n                    // full width row\n                    selectable = isVisible({ ...extraParams, node: this.rowNode, data: this.rowNode.data });\n                } else {\n                    const params = this.column.createColumnFunctionCallbackParams(this.rowNode);\n                    selectable = isVisible({ ...extraParams, ...params });\n                }\n            } else {\n                selectable = isVisible ?? false;\n            }\n        }\n\n        const disableInsteadOfHide = this.column?.getColDef().showDisabledCheckboxes;\n        if (disableInsteadOfHide) {\n            this.eCheckbox.setDisabled(!selectable);\n            this.setVisible(true);\n            this.setDisplayed(true);\n            return;\n        }\n\n        if (this.overrides?.removeHidden) {\n            this.setDisplayed(selectable);\n            return;\n        }\n\n        this.setVisible(selectable);\n    }\n\n    private getIsVisible(): boolean | CheckboxSelectionCallback<any> | undefined {\n        if (this.overrides) {\n            return this.overrides.isVisible;\n        }\n\n        // column will be missing if groupDisplayType = 'groupRows'\n        return this.column?.getColDef()?.checkboxSelection;\n    }\n}\n", "import type { AgColumn } from '../entities/agColumn';\nimport type { DndSourceOnRowDragParams } from '../entities/colDef';\nimport type { RowNode } from '../entities/rowNode';\nimport { _createIconNoSpan } from '../utils/icon';\nimport { Component } from '../widgets/component';\n\nexport class DndSourceComp extends Component {\n    private readonly rowNode: RowNode;\n    private readonly column: AgColumn;\n    private readonly eCell: HTMLElement;\n\n    constructor(rowNode: RowNode, column: AgColumn, eCell: HTMLElement) {\n        super(/* html */ `<div class=\"ag-drag-handle ag-row-drag\" draggable=\"true\"></div>`);\n        this.rowNode = rowNode;\n        this.column = column;\n        this.eCell = eCell;\n    }\n\n    public postConstruct(): void {\n        const eGui = this.getGui();\n        eGui.appendChild(_createIconNoSpan('rowDrag', this.gos, null)!);\n        // we need to stop the event propagation here to avoid starting a range selection while dragging\n        this.addGuiEventListener('mousedown', (e: MouseEvent) => {\n            e.stopPropagation();\n        });\n        this.addDragSource();\n        this.checkVisibility();\n    }\n\n    private addDragSource(): void {\n        this.addGuiEventListener('dragstart', this.onDragStart.bind(this));\n    }\n\n    private onDragStart(dragEvent: DragEvent): void {\n        const providedOnRowDrag = this.column.getColDef().dndSourceOnRowDrag;\n\n        dragEvent.dataTransfer!.setDragImage(this.eCell, 0, 0);\n\n        // default behaviour is to convert data to json and set into drag component\n        const defaultOnRowDrag = () => {\n            try {\n                const jsonData = JSON.stringify(this.rowNode.data);\n\n                dragEvent.dataTransfer!.setData('application/json', jsonData);\n                dragEvent.dataTransfer!.setData('text/plain', jsonData);\n            } catch (e) {\n                // if we cannot convert the data to json, then we do not set the type\n            }\n        };\n\n        if (providedOnRowDrag) {\n            const params: DndSourceOnRowDragParams = this.gos.addGridCommonParams({\n                rowNode: this.rowNode,\n                dragEvent: dragEvent,\n            });\n            providedOnRowDrag(params);\n        } else {\n            defaultOnRowDrag();\n        }\n    }\n\n    private checkVisibility(): void {\n        const visible = this.column.isDndSource(this.rowNode);\n        this.setDisplayed(visible);\n    }\n}\n", "import { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { AgColumn } from '../../entities/agColumn';\nimport type { CellClassParams, CellClassRules } from '../../entities/colDef';\nimport type { CellStyle, CellStyleFunc } from '../../entities/colDef';\nimport type { RowNode } from '../../entities/rowNode';\nimport type { CellCtrl, ICellComp } from './cellCtrl';\n\nexport class CellCustomStyleFeature extends BeanStub {\n    private readonly cellCtrl: CellCtrl;\n    private readonly column: AgColumn;\n    private readonly rowNode: RowNode;\n    private readonly beans: BeanCollection;\n    private staticClasses: string[] = [];\n\n    private cellComp: ICellComp;\n\n    private cellClassRules?: CellClassRules;\n\n    constructor(ctrl: CellCtrl, beans: BeanCollection) {\n        super();\n\n        this.cellCtrl = ctrl;\n        this.beans = beans;\n\n        this.column = ctrl.getColumn();\n        this.rowNode = ctrl.getRowNode();\n    }\n\n    public setComp(comp: ICellComp): void {\n        this.cellComp = comp;\n\n        this.applyUserStyles();\n        this.applyCellClassRules();\n        this.applyClassesFromColDef();\n    }\n\n    public applyCellClassRules(): void {\n        const colDef = this.column.getColDef();\n        const { cellClassRules } = colDef;\n        const cellClassParams: CellClassParams = this.beans.gos.addGridCommonParams({\n            value: this.cellCtrl.getValue(),\n            data: this.rowNode.data,\n            node: this.rowNode,\n            colDef: colDef,\n            column: this.column,\n            rowIndex: this.rowNode.rowIndex!,\n        });\n\n        this.beans.stylingService.processClassRules(\n            // if current was previous, skip\n            cellClassRules === this.cellClassRules ? undefined : this.cellClassRules,\n            cellClassRules,\n            cellClassParams,\n            (className) => this.cellComp.addOrRemoveCssClass(className, true),\n            (className) => this.cellComp.addOrRemoveCssClass(className, false)\n        );\n        this.cellClassRules = cellClassRules;\n    }\n\n    public applyUserStyles() {\n        const colDef = this.column.getColDef();\n\n        if (!colDef.cellStyle) {\n            return;\n        }\n\n        let styles: CellStyle | null | undefined;\n\n        if (typeof colDef.cellStyle === 'function') {\n            const cellStyleParams: CellClassParams = this.beans.gos.addGridCommonParams({\n                column: this.column,\n                value: this.cellCtrl.getValue(),\n                colDef: colDef,\n                data: this.rowNode.data,\n                node: this.rowNode,\n                rowIndex: this.rowNode.rowIndex!,\n            });\n            const cellStyleFunc = colDef.cellStyle as CellStyleFunc;\n            styles = cellStyleFunc(cellStyleParams);\n        } else {\n            styles = colDef.cellStyle;\n        }\n\n        if (styles) {\n            this.cellComp.setUserStyles(styles);\n        }\n    }\n\n    public applyClassesFromColDef() {\n        const colDef = this.column.getColDef();\n        const cellClassParams: CellClassParams = this.beans.gos.addGridCommonParams({\n            value: this.cellCtrl.getValue(),\n            data: this.rowNode.data,\n            node: this.rowNode,\n            column: this.column,\n            colDef: colDef,\n            rowIndex: this.rowNode.rowIndex!,\n        });\n\n        if (this.staticClasses.length) {\n            this.staticClasses.forEach((className) => this.cellComp.addOrRemoveCssClass(className, false));\n        }\n\n        this.staticClasses = this.beans.stylingService.getStaticCellClasses(colDef, cellClassParams);\n\n        if (this.staticClasses.length) {\n            this.staticClasses.forEach((className) => this.cellComp.addOrRemoveCssClass(className, true));\n        }\n    }\n\n    // overriding to make public, as we don't dispose this bean via context\n    public override destroy() {\n        super.destroy();\n    }\n}\n", "import { KeyCode } from '../../constants/keyCode';\nimport { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { AgColumn } from '../../entities/agColumn';\nimport type { RowNode } from '../../entities/rowNode';\nimport { _isDeleteKey } from '../../utils/keyboard';\nimport type { RowCtrl } from '../row/rowCtrl';\nimport type { CellCtrl } from './cellCtrl';\n\nexport class CellKeyboardListenerFeature extends BeanStub {\n    private readonly cellCtrl: CellCtrl;\n    private readonly beans: BeanCollection;\n    private readonly rowNode: RowNode;\n    private readonly rowCtrl: RowCtrl;\n\n    private eGui: HTMLElement;\n\n    constructor(ctrl: CellCtrl, beans: BeanCollection, column: AgColumn, rowNode: RowNode, rowCtrl: RowCtrl) {\n        super();\n        this.cellCtrl = ctrl;\n        this.beans = beans;\n        this.rowNode = rowNode;\n        this.rowCtrl = rowCtrl;\n    }\n\n    public setComp(eGui: HTMLElement): void {\n        this.eGui = eGui;\n    }\n\n    public onKeyDown(event: KeyboardEvent): void {\n        const key = event.key;\n\n        switch (key) {\n            case KeyCode.ENTER:\n                this.onEnterKeyDown(event);\n                break;\n            case KeyCode.F2:\n                this.onF2KeyDown(event);\n                break;\n            case KeyCode.ESCAPE:\n                this.onEscapeKeyDown(event);\n                break;\n            case KeyCode.TAB:\n                this.onTabKeyDown(event);\n                break;\n            case KeyCode.BACKSPACE:\n            case KeyCode.DELETE:\n                this.onBackspaceOrDeleteKeyDown(key, event);\n                break;\n            case KeyCode.DOWN:\n            case KeyCode.UP:\n            case KeyCode.RIGHT:\n            case KeyCode.LEFT:\n                this.onNavigationKeyDown(event, key);\n                break;\n        }\n    }\n\n    private onNavigationKeyDown(event: KeyboardEvent, key: string): void {\n        if (this.cellCtrl.isEditing()) {\n            return;\n        }\n\n        if (event.shiftKey && this.cellCtrl.isRangeSelectionEnabled()) {\n            this.onShiftRangeSelect(event);\n        } else {\n            this.beans.navigationService.navigateToNextCell(event, key, this.cellCtrl.getCellPosition(), true);\n        }\n\n        // if we don't prevent default, the grid will scroll with the navigation keys\n        event.preventDefault();\n    }\n\n    private onShiftRangeSelect(event: KeyboardEvent): void {\n        if (!this.beans.rangeService) {\n            return;\n        }\n\n        const endCell = this.beans.rangeService.extendLatestRangeInDirection(event);\n\n        if (endCell) {\n            this.beans.navigationService.ensureCellVisible(endCell);\n        }\n    }\n\n    private onTabKeyDown(event: KeyboardEvent): void {\n        this.beans.navigationService.onTabKeyDown(this.cellCtrl, event);\n    }\n\n    private onBackspaceOrDeleteKeyDown(key: string, event: KeyboardEvent): void {\n        const { cellCtrl, beans, rowNode } = this;\n        const { gos, rangeService, eventService } = beans;\n\n        if (cellCtrl.isEditing()) {\n            return;\n        }\n\n        eventService.dispatchEvent({ type: 'keyShortcutChangedCellStart' });\n\n        if (_isDeleteKey(key, gos.get('enableCellEditingOnBackspace'))) {\n            if (rangeService && gos.get('enableRangeSelection')) {\n                rangeService.clearCellRangeCellValues({ dispatchWrapperEvents: true, wrapperEventSource: 'deleteKey' });\n            } else if (cellCtrl.isCellEditable()) {\n                const column = cellCtrl.getColumn();\n                const emptyValue =\n                    this.beans.valueService.parseValue(column, rowNode, '', rowNode.getValueFromValueService(column)) ??\n                    null;\n                rowNode.setDataValue(column, emptyValue, 'cellClear');\n            }\n        } else {\n            cellCtrl.startRowOrCellEdit(key, event);\n        }\n\n        eventService.dispatchEvent({ type: 'keyShortcutChangedCellEnd' });\n    }\n\n    private onEnterKeyDown(e: KeyboardEvent): void {\n        if (this.cellCtrl.isEditing() || this.rowCtrl.isEditing()) {\n            this.cellCtrl.stopEditingAndFocus(false, e.shiftKey);\n        } else {\n            if (this.beans.gos.get('enterNavigatesVertically')) {\n                const key = e.shiftKey ? KeyCode.UP : KeyCode.DOWN;\n                this.beans.navigationService.navigateToNextCell(null, key, this.cellCtrl.getCellPosition(), false);\n            } else {\n                this.cellCtrl.startRowOrCellEdit(KeyCode.ENTER, e);\n                if (this.cellCtrl.isEditing()) {\n                    // if we started editing, then we need to prevent default, otherwise the Enter action can get\n                    // applied to the cell editor. this happened, for example, with largeTextCellEditor where not\n                    // preventing default results in a 'new line' character getting inserted in the text area\n                    // when the editing was started\n                    e.preventDefault();\n                }\n            }\n        }\n    }\n\n    private onF2KeyDown(event: KeyboardEvent): void {\n        if (!this.cellCtrl.isEditing()) {\n            this.cellCtrl.startRowOrCellEdit(KeyCode.F2, event);\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    private onEscapeKeyDown(event: KeyboardEvent): void {\n        if (this.cellCtrl.isEditing()) {\n            this.cellCtrl.stopRowOrCellEdit(true);\n            this.cellCtrl.focusCell(true);\n        }\n    }\n\n    public processCharacter(event: KeyboardEvent): void {\n        // check this, in case focus is on a (for example) a text field inside the cell,\n        // in which cse we should not be listening for these key pressed\n        const eventTarget = event.target;\n        const eventOnChildComponent = eventTarget !== this.eGui;\n\n        if (eventOnChildComponent || this.cellCtrl.isEditing()) {\n            return;\n        }\n\n        const key = event.key;\n        if (key === ' ') {\n            this.onSpaceKeyDown(event);\n        } else {\n            this.cellCtrl.startRowOrCellEdit(key, event);\n            // if we don't prevent default, then the event also gets applied to the text field\n            // (at least when doing the default editor), but we need to allow the editor to decide\n            // what it wants to do. we only do this IF editing was started - otherwise it messes\n            // up when the use is not doing editing, but using rendering with text fields in cellRenderer\n            // (as it would block the the user from typing into text fields).\n            event.preventDefault();\n        }\n    }\n\n    private onSpaceKeyDown(event: KeyboardEvent): void {\n        const { gos } = this.beans;\n\n        if (!this.cellCtrl.isEditing() && gos.isRowSelection()) {\n            const currentSelection = this.rowNode.isSelected();\n            const newSelection = !currentSelection;\n            if (newSelection || !gos.get('suppressRowDeselection')) {\n                const groupSelectsFiltered = this.beans.gos.get('groupSelectsFiltered');\n                const updatedCount = this.rowNode.setSelectedParams({\n                    newValue: newSelection,\n                    rangeSelect: event.shiftKey,\n                    groupSelectsFiltered: groupSelectsFiltered,\n                    event,\n                    source: 'spaceKey',\n                });\n                if (currentSelection === undefined && updatedCount === 0) {\n                    this.rowNode.setSelectedParams({\n                        newValue: false,\n                        rangeSelect: event.shiftKey,\n                        groupSelectsFiltered: groupSelectsFiltered,\n                        event,\n                        source: 'spaceKey',\n                    });\n                }\n            }\n        }\n\n        // prevent default as space key, by default, moves browser scroll down\n        event.preventDefault();\n    }\n\n    public override destroy(): void {\n        super.destroy();\n    }\n}\n", "import { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { AgColumn } from '../../entities/agColumn';\nimport type { CellClickedEvent, CellDoubleClickedEvent, CellMouseOutEvent, CellMouseOverEvent } from '../../events';\nimport { _isBrowserSafari, _isIOSUserAgent } from '../../utils/browser';\nimport { _isElementChildOfClass, _isFocusableFormField } from '../../utils/dom';\nimport { _isEventSupported, _isStopPropagationForAgGrid } from '../../utils/event';\nimport type { CellCtrl } from './cellCtrl';\n\nexport class CellMouseListenerFeature extends BeanStub {\n    private readonly cellCtrl: CellCtrl;\n    private readonly beans: BeanCollection;\n    private readonly column: AgColumn;\n\n    private lastIPadMouseClickEvent: number;\n\n    constructor(ctrl: CellCtrl, beans: BeanCollection, column: AgColumn) {\n        super();\n        this.cellCtrl = ctrl;\n        this.beans = beans;\n        this.column = column;\n    }\n\n    public onMouseEvent(eventName: string, mouseEvent: MouseEvent): void {\n        if (_isStopPropagationForAgGrid(mouseEvent)) {\n            return;\n        }\n\n        switch (eventName) {\n            case 'click':\n                this.onCellClicked(mouseEvent);\n                break;\n            case 'mousedown':\n            case 'touchstart':\n                this.onMouseDown(mouseEvent);\n                break;\n            case 'dblclick':\n                this.onCellDoubleClicked(mouseEvent);\n                break;\n            case 'mouseout':\n                this.onMouseOut(mouseEvent);\n                break;\n            case 'mouseover':\n                this.onMouseOver(mouseEvent);\n                break;\n        }\n    }\n\n    private onCellClicked(mouseEvent: MouseEvent): void {\n        // iPad doesn't have double click - so we need to mimic it to enable editing for iPad.\n        if (this.isDoubleClickOnIPad()) {\n            this.onCellDoubleClicked(mouseEvent);\n            mouseEvent.preventDefault(); // if we don't do this, then iPad zooms in\n\n            return;\n        }\n\n        const { eventService, rangeService, gos } = this.beans;\n        const isMultiKey = mouseEvent.ctrlKey || mouseEvent.metaKey;\n\n        if (rangeService && isMultiKey) {\n            // the mousedown event has created the range already, so we only intersect if there is more than one\n            // range on this cell\n            if (rangeService.getCellRangeCount(this.cellCtrl.getCellPosition()) > 1) {\n                rangeService.intersectLastRange(true);\n            }\n        }\n\n        const cellClickedEvent: CellClickedEvent = this.cellCtrl.createEvent(mouseEvent, 'cellClicked');\n        eventService.dispatchEvent(cellClickedEvent);\n\n        const colDef = this.column.getColDef();\n\n        if (colDef.onCellClicked) {\n            // to make callback async, do in a timeout\n            window.setTimeout(() => {\n                this.beans.frameworkOverrides.wrapOutgoing(() => {\n                    colDef.onCellClicked!(cellClickedEvent);\n                });\n            }, 0);\n        }\n\n        const editOnSingleClick =\n            (gos.get('singleClickEdit') || colDef.singleClickEdit) && !gos.get('suppressClickEdit');\n\n        // edit on single click, but not if extending a range\n        if (editOnSingleClick && !(mouseEvent.shiftKey && rangeService?.getCellRanges().length != 0)) {\n            this.cellCtrl.startRowOrCellEdit();\n        }\n    }\n\n    // returns true if on iPad and this is second 'click' event in 200ms\n    private isDoubleClickOnIPad(): boolean {\n        if (!_isIOSUserAgent() || _isEventSupported('dblclick')) {\n            return false;\n        }\n\n        const nowMillis = new Date().getTime();\n        const res = nowMillis - this.lastIPadMouseClickEvent < 200;\n        this.lastIPadMouseClickEvent = nowMillis;\n\n        return res;\n    }\n\n    private onCellDoubleClicked(mouseEvent: MouseEvent) {\n        const colDef = this.column.getColDef();\n        // always dispatch event to eventService\n        const cellDoubleClickedEvent: CellDoubleClickedEvent = this.cellCtrl.createEvent(\n            mouseEvent,\n            'cellDoubleClicked'\n        );\n        this.beans.eventService.dispatchEvent(cellDoubleClickedEvent);\n\n        // check if colDef also wants to handle event\n        if (typeof colDef.onCellDoubleClicked === 'function') {\n            // to make the callback async, do in a timeout\n            window.setTimeout(() => {\n                this.beans.frameworkOverrides.wrapOutgoing(() => {\n                    (colDef.onCellDoubleClicked as any)(cellDoubleClickedEvent);\n                });\n            }, 0);\n        }\n\n        const editOnDoubleClick = !this.beans.gos.get('singleClickEdit') && !this.beans.gos.get('suppressClickEdit');\n        if (editOnDoubleClick) {\n            this.cellCtrl.startRowOrCellEdit(null, mouseEvent);\n        }\n    }\n\n    private onMouseDown(mouseEvent: MouseEvent): void {\n        const { ctrlKey, metaKey, shiftKey } = mouseEvent;\n        const target = mouseEvent.target as HTMLElement;\n        const { cellCtrl, beans } = this;\n        const { eventService, rangeService, focusService } = beans;\n\n        // do not change the range for right-clicks inside an existing range\n        if (this.isRightClickInExistingRange(mouseEvent)) {\n            return;\n        }\n\n        const ranges = rangeService && rangeService.getCellRanges().length != 0;\n\n        if (!shiftKey || !ranges) {\n            // We only need to pass true to focusCell when the browser is Safari and we are trying\n            // to focus the cell itself. This should never be true if the mousedown was triggered\n            // due to a click on a cell editor for example.\n            const forceBrowserFocus = _isBrowserSafari() && !cellCtrl.isEditing() && !_isFocusableFormField(target);\n\n            cellCtrl.focusCell(forceBrowserFocus);\n        }\n\n        // if shift clicking, and a range exists, we keep the focus on the cell that started the\n        // range as the user then changes the range selection.\n        if (shiftKey && ranges && !focusService.isCellFocused(cellCtrl.getCellPosition())) {\n            // this stops the cell from getting focused\n            mouseEvent.preventDefault();\n\n            const focusedCellPosition = focusService.getFocusedCell();\n            if (focusedCellPosition) {\n                const { column, rowIndex, rowPinned } = focusedCellPosition;\n                const focusedRowCtrl = beans.rowRenderer.getRowByPosition({ rowIndex, rowPinned });\n                const focusedCellCtrl = focusedRowCtrl?.getCellCtrl(column as AgColumn);\n\n                // if the focused cell is editing, need to stop editing first\n                if (focusedCellCtrl?.isEditing()) {\n                    focusedCellCtrl.stopEditing();\n                }\n\n                // focus could have been lost, so restore it to the starting cell in the range if needed\n                focusService.setFocusedCell({\n                    column,\n                    rowIndex,\n                    rowPinned,\n                    forceBrowserFocus: true,\n                    preventScrollOnBrowserFocus: true,\n                });\n            }\n        }\n\n        // if we are clicking on a checkbox, we need to make sure the cell wrapping that checkbox\n        // is focused but we don't want to change the range selection, so return here.\n        if (this.containsWidget(target)) {\n            return;\n        }\n\n        if (rangeService) {\n            const thisCell = this.cellCtrl.getCellPosition();\n\n            if (shiftKey) {\n                rangeService.extendLatestRangeToCell(thisCell);\n            } else {\n                const isMultiKey = ctrlKey || metaKey;\n                rangeService.setRangeToCell(thisCell, isMultiKey);\n            }\n        }\n\n        eventService.dispatchEvent(this.cellCtrl.createEvent(mouseEvent, 'cellMouseDown'));\n    }\n\n    private isRightClickInExistingRange(mouseEvent: MouseEvent): boolean {\n        const { rangeService } = this.beans;\n\n        if (rangeService) {\n            const cellInRange = rangeService.isCellInAnyRange(this.cellCtrl.getCellPosition());\n            const isRightClick =\n                mouseEvent.button === 2 || (mouseEvent.ctrlKey && this.beans.gos.get('allowContextMenuWithControlKey'));\n\n            if (cellInRange && isRightClick) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private containsWidget(target: HTMLElement): boolean {\n        return _isElementChildOfClass(target, 'ag-selection-checkbox', 3);\n    }\n\n    private onMouseOut(mouseEvent: MouseEvent): void {\n        if (this.mouseStayingInsideCell(mouseEvent)) {\n            return;\n        }\n        const cellMouseOutEvent: CellMouseOutEvent = this.cellCtrl.createEvent(mouseEvent, 'cellMouseOut');\n        this.beans.eventService.dispatchEvent(cellMouseOutEvent);\n        this.beans.columnHoverService.clearMouseOver();\n    }\n\n    private onMouseOver(mouseEvent: MouseEvent): void {\n        if (this.mouseStayingInsideCell(mouseEvent)) {\n            return;\n        }\n        const cellMouseOverEvent: CellMouseOverEvent = this.cellCtrl.createEvent(mouseEvent, 'cellMouseOver');\n        this.beans.eventService.dispatchEvent(cellMouseOverEvent);\n        this.beans.columnHoverService.setMouseOver([this.column]);\n    }\n\n    private mouseStayingInsideCell(e: MouseEvent): boolean {\n        if (!e.target || !e.relatedTarget) {\n            return false;\n        }\n        const eGui = this.cellCtrl.getGui();\n        const cellContainsTarget = eGui.contains(e.target as Node);\n        const cellContainsRelatedTarget = eGui.contains(e.relatedTarget as Node);\n        return cellContainsTarget && cellContainsRelatedTarget;\n    }\n\n    public override destroy(): void {\n        super.destroy();\n    }\n}\n", "import { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { AgColumn } from '../../entities/agColumn';\nimport type { RowNode } from '../../entities/rowNode';\nimport { _areEqual, _last } from '../../utils/array';\nimport { _missing } from '../../utils/generic';\nimport type { CellCtrl } from './cellCtrl';\n\n/**\n * Takes care of:\n *  #) Cell Width (including when doing cell spanning, which makes width cover many columns)\n *  #) Cell Height (when doing row span, otherwise we don't touch the height as it's just row height)\n *  #) Cell Left (the horizontal positioning of the cell, the vertical positioning is on the row)\n */\nexport class CellPositionFeature extends BeanStub {\n    private cellCtrl: CellCtrl;\n    private eGui: HTMLElement;\n\n    private readonly column: AgColumn;\n    private readonly rowNode: RowNode;\n\n    private colsSpanning: AgColumn[];\n    private rowSpan: number;\n\n    private beans: BeanCollection;\n\n    constructor(ctrl: CellCtrl, beans: BeanCollection) {\n        super();\n\n        this.cellCtrl = ctrl;\n        this.beans = beans;\n\n        this.column = ctrl.getColumn();\n        this.rowNode = ctrl.getRowNode();\n    }\n\n    private setupRowSpan(): void {\n        this.rowSpan = this.column.getRowSpan(this.rowNode);\n\n        this.addManagedListeners(this.beans.eventService, { newColumnsLoaded: () => this.onNewColumnsLoaded() });\n    }\n\n    public setComp(eGui: HTMLElement): void {\n        this.eGui = eGui;\n\n        // add event handlers only after GUI is attached,\n        // so we don't get events before we are ready\n        this.setupColSpan();\n        this.setupRowSpan();\n\n        this.onLeftChanged();\n        this.onWidthChanged();\n        this.applyRowSpan();\n    }\n\n    private onNewColumnsLoaded(): void {\n        const rowSpan = this.column.getRowSpan(this.rowNode);\n        if (this.rowSpan === rowSpan) {\n            return;\n        }\n\n        this.rowSpan = rowSpan;\n        this.applyRowSpan(true);\n    }\n\n    private onDisplayColumnsChanged(): void {\n        const colsSpanning: AgColumn[] = this.getColSpanningList();\n\n        if (!_areEqual(this.colsSpanning, colsSpanning)) {\n            this.colsSpanning = colsSpanning;\n            this.onWidthChanged();\n            this.onLeftChanged(); // left changes when doing RTL\n        }\n    }\n\n    private setupColSpan(): void {\n        // if no col span is active, then we don't set it up, as it would be wasteful of CPU\n        if (this.column.getColDef().colSpan == null) {\n            return;\n        }\n\n        this.colsSpanning = this.getColSpanningList();\n\n        this.addManagedListeners(this.beans.eventService, {\n            // because we are col spanning, a reorder of the cols can change what cols we are spanning over\n            displayedColumnsChanged: this.onDisplayColumnsChanged.bind(this),\n            // because we are spanning over multiple cols, we check for width any time any cols width changes.\n            // this is expensive - really we should be explicitly checking only the cols we are spanning over\n            // instead of every col, however it would be tricky code to track the cols we are spanning over, so\n            // because hardly anyone will be using colSpan, am favouring this easier way for more maintainable code.\n            displayedColumnsWidthChanged: this.onWidthChanged.bind(this),\n        });\n    }\n\n    public onWidthChanged(): void {\n        if (!this.eGui) {\n            return;\n        }\n        const width = this.getCellWidth();\n        this.eGui.style.width = `${width}px`;\n    }\n\n    private getCellWidth(): number {\n        if (!this.colsSpanning) {\n            return this.column.getActualWidth();\n        }\n\n        return this.colsSpanning.reduce((width, col) => width + col.getActualWidth(), 0);\n    }\n\n    public getColSpanningList(): AgColumn[] {\n        const colSpan = this.column.getColSpan(this.rowNode);\n        const colsSpanning: AgColumn[] = [];\n\n        // if just one col, the col span is just the column we are in\n        if (colSpan === 1) {\n            colsSpanning.push(this.column);\n        } else {\n            let pointer: AgColumn | null = this.column;\n            const pinned = this.column.getPinned();\n            for (let i = 0; pointer && i < colSpan; i++) {\n                colsSpanning.push(pointer);\n                pointer = this.beans.visibleColsService.getColAfter(pointer);\n                if (!pointer || _missing(pointer)) {\n                    break;\n                }\n                // we do not allow col spanning to span outside of pinned areas\n                if (pinned !== pointer.getPinned()) {\n                    break;\n                }\n            }\n        }\n\n        return colsSpanning;\n    }\n\n    public onLeftChanged(): void {\n        if (!this.eGui) {\n            return;\n        }\n        const left = this.modifyLeftForPrintLayout(this.getCellLeft());\n        this.eGui.style.left = left + 'px';\n    }\n\n    private getCellLeft(): number | null {\n        let mostLeftCol: AgColumn;\n\n        if (this.beans.gos.get('enableRtl') && this.colsSpanning) {\n            mostLeftCol = _last(this.colsSpanning);\n        } else {\n            mostLeftCol = this.column;\n        }\n\n        return mostLeftCol.getLeft();\n    }\n\n    private modifyLeftForPrintLayout(leftPosition: number | null): number | null {\n        if (!this.cellCtrl.isPrintLayout() || this.column.getPinned() === 'left') {\n            return leftPosition;\n        }\n\n        const leftWidth = this.beans.visibleColsService.getColsLeftWidth();\n\n        if (this.column.getPinned() === 'right') {\n            const bodyWidth = this.beans.visibleColsService.getBodyContainerWidth();\n            return leftWidth + bodyWidth + (leftPosition || 0);\n        }\n\n        // is in body\n        return leftWidth + (leftPosition || 0);\n    }\n\n    private applyRowSpan(force?: boolean): void {\n        if (this.rowSpan === 1 && !force) {\n            return;\n        }\n\n        const singleRowHeight = this.beans.gos.getRowHeightAsNumber();\n        const totalRowHeight = singleRowHeight * this.rowSpan;\n\n        this.eGui.style.height = `${totalRowHeight}px`;\n        this.eGui.style.zIndex = '1';\n    }\n\n    // overriding to make public, as we don't dispose this bean via context\n    public override destroy() {\n        super.destroy();\n    }\n}\n", "import type { Bean } from '../context/bean';\nimport type { CellPosition } from '../entities/cellPositionUtils';\nimport type { RowPosition } from '../entities/rowPositionUtils';\nimport type { Column } from '../interfaces/iColumn';\nimport type { RowPinnedType } from '../interfaces/iRowNode';\nimport type { CellCtrl } from '../rendering/cell/cellCtrl';\n\nexport interface IRangeService {\n    isEmpty(): boolean;\n    removeAllCellRanges(silent?: boolean): void;\n    getCellRangeCount(cell: CellPosition): number;\n    isCellInAnyRange(cell: CellPosition): boolean;\n    isCellInSpecificRange(cell: CellPosition, range: CellRange): boolean;\n    isBottomRightCell(cellRange: CellRange, cell: CellPosition): boolean;\n    isContiguousRange(cellRange: CellRange): boolean;\n    isMoreThanOneCell(): boolean;\n    areAllRangesAbleToMerge(): boolean;\n    onDragStart(mouseEvent: MouseEvent): void;\n    onDragStop(): void;\n    onDragging(mouseEvent: MouseEvent): void;\n    getCellRanges(): CellRange[];\n    setRangeToCell(cell: CellPosition, appendRange?: boolean): void;\n    intersectLastRange(fromMouseClick?: boolean): void;\n    setCellRange(params: CellRangeParams): void;\n    addCellRange(params: CellRangeParams): void;\n    extendLatestRangeInDirection(event: KeyboardEvent): CellPosition | undefined;\n    extendLatestRangeToCell(cell: CellPosition): void;\n    updateRangeEnd(cellRange: CellRange, cellPosition: CellPosition, silent?: boolean): void;\n    getRangeStartRow(cellRange: PartialCellRange): RowPosition;\n    getRangeEndRow(cellRange: PartialCellRange): RowPosition;\n    createCellRangeFromCellRangeParams(params: CellRangeParams): CellRange | undefined;\n    createPartialCellRangeFromRangeParams(\n        params: CellRangeParams,\n        allowEmptyColumns: boolean\n    ): PartialCellRange | undefined;\n    setCellRanges(cellRanges: CellRange[]): void;\n    clearCellRangeCellValues(params: ClearCellRangeParams): void;\n}\n\nexport interface ISelectionHandle extends Bean {\n    getGui(): HTMLElement;\n    getType(): SelectionHandleType;\n    refresh(cellCtrl: CellCtrl): void;\n}\n\nexport interface ISelectionHandleFactory {\n    createSelectionHandle(type: SelectionHandleType): ISelectionHandle;\n}\n\nexport enum SelectionHandleType {\n    FILL,\n    RANGE,\n}\n\nexport enum CellRangeType {\n    VALUE,\n    DIMENSION,\n}\n\nexport interface CellRange {\n    id?: string;\n    type?: CellRangeType;\n    /** The start row of the range */\n    startRow?: RowPosition;\n    /** The end row of the range */\n    endRow?: RowPosition;\n    /** The columns in the range */\n    columns: Column[];\n    /** The start column for the range */\n    startColumn: Column;\n}\n\nexport type PartialCellRange = Omit<CellRange, 'startColumn'> & Partial<Pick<CellRange, 'startColumn'>>;\n\nexport interface CellRangeParams {\n    /** Start row index */\n    rowStartIndex: number | null;\n    /** Pinned state of start row. Either 'top', 'bottom' or null */\n    rowStartPinned?: RowPinnedType;\n    /** End row index */\n    rowEndIndex: number | null;\n    /** Pinned state of end row. Either 'top', 'bottom' or null */\n    rowEndPinned?: RowPinnedType;\n\n    /** Starting column for range */\n    columnStart?: string | Column;\n    /** End column for range */\n    columnEnd?: string | Column;\n    /** Specify Columns to include instead of using `columnStart` and `columnEnd` */\n    columns?: (string | Column)[];\n}\n\nexport interface ClearCellRangeParams {\n    cellRanges?: CellRange[];\n    /** Source passed to `cellValueChanged` event */\n    cellEventSource?: string;\n    /** `true` to dispatch `rangeDeleteStart` and `rangeDeleteEnd` events */\n    dispatchWrapperEvents?: boolean;\n    /** Source passed to `rangeDeleteStart` and `rangeDeleteEnd` events */\n    wrapperEventSource?: 'deleteKey';\n}\n", "import type { BeanCollection } from '../../context/context';\nimport type { AgColumn } from '../../entities/agColumn';\nimport type { IRangeService, ISelectionHandle, ISelectionHandleFactory } from '../../interfaces/IRangeService';\nimport { CellRangeType, SelectionHandleType } from '../../interfaces/IRangeService';\nimport { _setAriaSelected } from '../../utils/aria';\nimport { _includes, _last } from '../../utils/array';\nimport { _missing } from '../../utils/generic';\nimport type { CellCtrl, ICellComp } from './cellCtrl';\n\nconst CSS_CELL_RANGE_SELECTED = 'ag-cell-range-selected';\nconst CSS_CELL_RANGE_CHART = 'ag-cell-range-chart';\nconst CSS_CELL_RANGE_SINGLE_CELL = 'ag-cell-range-single-cell';\nconst CSS_CELL_RANGE_CHART_CATEGORY = 'ag-cell-range-chart-category';\nconst CSS_CELL_RANGE_HANDLE = 'ag-cell-range-handle';\nconst CSS_CELL_RANGE_TOP = 'ag-cell-range-top';\nconst CSS_CELL_RANGE_RIGHT = 'ag-cell-range-right';\nconst CSS_CELL_RANGE_BOTTOM = 'ag-cell-range-bottom';\nconst CSS_CELL_RANGE_LEFT = 'ag-cell-range-left';\n\nexport class CellRangeFeature {\n    private beans: BeanCollection;\n    private rangeService: IRangeService;\n    private selectionHandleFactory: ISelectionHandleFactory;\n    private cellComp: ICellComp;\n    private cellCtrl: CellCtrl;\n    private eGui: HTMLElement;\n\n    private rangeCount: number;\n    private hasChartRange: boolean;\n\n    private selectionHandle: ISelectionHandle | null | undefined;\n\n    constructor(beans: BeanCollection, ctrl: CellCtrl) {\n        this.beans = beans;\n        // We know these are defined otherwise the feature wouldn't be registered\n        this.rangeService = beans.rangeService!;\n        this.selectionHandleFactory = beans.selectionHandleFactory!;\n        this.cellCtrl = ctrl;\n    }\n\n    public setComp(cellComp: ICellComp, eGui: HTMLElement): void {\n        this.cellComp = cellComp;\n        this.eGui = eGui;\n        this.onRangeSelectionChanged();\n    }\n\n    public onRangeSelectionChanged(): void {\n        // when using reactUi, given UI is async, it's possible this method is called before the comp is registered\n        if (!this.cellComp) {\n            return;\n        }\n\n        this.rangeCount = this.rangeService.getCellRangeCount(this.cellCtrl.getCellPosition());\n        this.hasChartRange = this.getHasChartRange();\n\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SELECTED, this.rangeCount !== 0);\n        this.cellComp.addOrRemoveCssClass(`${CSS_CELL_RANGE_SELECTED}-1`, this.rangeCount === 1);\n        this.cellComp.addOrRemoveCssClass(`${CSS_CELL_RANGE_SELECTED}-2`, this.rangeCount === 2);\n        this.cellComp.addOrRemoveCssClass(`${CSS_CELL_RANGE_SELECTED}-3`, this.rangeCount === 3);\n        this.cellComp.addOrRemoveCssClass(`${CSS_CELL_RANGE_SELECTED}-4`, this.rangeCount >= 4);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_CHART, this.hasChartRange);\n\n        _setAriaSelected(this.eGui, this.rangeCount > 0 ? true : undefined);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SINGLE_CELL, this.isSingleCell());\n\n        this.updateRangeBorders();\n\n        this.refreshHandle();\n    }\n\n    private updateRangeBorders(): void {\n        const rangeBorders = this.getRangeBorders();\n        const isSingleCell = this.isSingleCell();\n        const isTop = !isSingleCell && rangeBorders.top;\n        const isRight = !isSingleCell && rangeBorders.right;\n        const isBottom = !isSingleCell && rangeBorders.bottom;\n        const isLeft = !isSingleCell && rangeBorders.left;\n\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_TOP, isTop);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_RIGHT, isRight);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_BOTTOM, isBottom);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_LEFT, isLeft);\n    }\n\n    private isSingleCell(): boolean {\n        const { rangeService } = this.beans;\n        return this.rangeCount === 1 && !!rangeService && !rangeService.isMoreThanOneCell();\n    }\n\n    private getHasChartRange(): boolean {\n        const { rangeService } = this.beans;\n\n        if (!this.rangeCount || !rangeService) {\n            return false;\n        }\n\n        const cellRanges = rangeService.getCellRanges();\n\n        return (\n            cellRanges.length > 0 &&\n            cellRanges.every((range) => _includes([CellRangeType.DIMENSION, CellRangeType.VALUE], range.type))\n        );\n    }\n\n    public updateRangeBordersIfRangeCount(): void {\n        // we only need to update range borders if we are in a range\n        if (this.rangeCount > 0) {\n            this.updateRangeBorders();\n            this.refreshHandle();\n        }\n    }\n\n    private getRangeBorders(): {\n        top: boolean;\n        right: boolean;\n        bottom: boolean;\n        left: boolean;\n    } {\n        const isRtl = this.beans.gos.get('enableRtl');\n\n        let top = false;\n        let right = false;\n        let bottom = false;\n        let left = false;\n\n        const thisCol = this.cellCtrl.getCellPosition().column as AgColumn;\n        const presentedColsService = this.beans.visibleColsService;\n\n        let leftCol: AgColumn | null;\n        let rightCol: AgColumn | null;\n\n        if (isRtl) {\n            leftCol = presentedColsService.getColAfter(thisCol);\n            rightCol = presentedColsService.getColBefore(thisCol);\n        } else {\n            leftCol = presentedColsService.getColBefore(thisCol);\n            rightCol = presentedColsService.getColAfter(thisCol);\n        }\n\n        const ranges = this.rangeService\n            .getCellRanges()\n            .filter((range) => this.rangeService.isCellInSpecificRange(this.cellCtrl.getCellPosition(), range));\n\n        // this means we are the first column in the grid\n        if (!leftCol) {\n            left = true;\n        }\n\n        // this means we are the last column in the grid\n        if (!rightCol) {\n            right = true;\n        }\n\n        for (let i = 0; i < ranges.length; i++) {\n            if (top && right && bottom && left) {\n                break;\n            }\n\n            const range = ranges[i];\n            const startRow = this.rangeService.getRangeStartRow(range);\n            const endRow = this.rangeService.getRangeEndRow(range);\n\n            if (!top && this.beans.rowPositionUtils.sameRow(startRow, this.cellCtrl.getCellPosition())) {\n                top = true;\n            }\n\n            if (!bottom && this.beans.rowPositionUtils.sameRow(endRow, this.cellCtrl.getCellPosition())) {\n                bottom = true;\n            }\n\n            if (!left && leftCol && range.columns.indexOf(leftCol) < 0) {\n                left = true;\n            }\n\n            if (!right && rightCol && range.columns.indexOf(rightCol) < 0) {\n                right = true;\n            }\n        }\n\n        return { top, right, bottom, left };\n    }\n\n    public refreshHandle(): void {\n        if (this.beans.context.isDestroyed()) {\n            return;\n        }\n\n        const shouldHaveSelectionHandle = this.shouldHaveSelectionHandle();\n\n        if (this.selectionHandle && !shouldHaveSelectionHandle) {\n            this.selectionHandle = this.beans.context.destroyBean(this.selectionHandle);\n        }\n\n        if (shouldHaveSelectionHandle) {\n            this.addSelectionHandle();\n        }\n\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_HANDLE, !!this.selectionHandle);\n    }\n\n    private shouldHaveSelectionHandle(): boolean {\n        const gos = this.beans.gos;\n        const cellRanges = this.rangeService.getCellRanges();\n        const rangesLen = cellRanges.length;\n\n        if (this.rangeCount < 1 || rangesLen < 1) {\n            return false;\n        }\n\n        const cellRange = _last(cellRanges);\n        const cellPosition = this.cellCtrl.getCellPosition();\n        const isFillHandleAvailable = gos.get('enableFillHandle') && !this.cellCtrl.isSuppressFillHandle();\n        const isRangeHandleAvailable = gos.get('enableRangeHandle');\n\n        let handleIsAvailable =\n            rangesLen === 1 && !this.cellCtrl.isEditing() && (isFillHandleAvailable || isRangeHandleAvailable);\n\n        if (this.hasChartRange) {\n            const hasCategoryRange = cellRanges[0].type === CellRangeType.DIMENSION;\n            const isCategoryCell =\n                hasCategoryRange && this.rangeService.isCellInSpecificRange(cellPosition, cellRanges[0]);\n\n            this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_CHART_CATEGORY, isCategoryCell);\n            handleIsAvailable = cellRange.type === CellRangeType.VALUE;\n        }\n\n        return (\n            handleIsAvailable &&\n            cellRange.endRow != null &&\n            this.rangeService.isContiguousRange(cellRange) &&\n            this.rangeService.isBottomRightCell(cellRange, cellPosition)\n        );\n    }\n\n    private addSelectionHandle() {\n        const gos = this.beans.gos;\n        const cellRangeType = _last(this.rangeService.getCellRanges()).type;\n        const selectionHandleFill = gos.get('enableFillHandle') && _missing(cellRangeType);\n        const type = selectionHandleFill ? SelectionHandleType.FILL : SelectionHandleType.RANGE;\n\n        if (this.selectionHandle && this.selectionHandle.getType() !== type) {\n            this.selectionHandle = this.beans.context.destroyBean(this.selectionHandle);\n        }\n\n        if (!this.selectionHandle) {\n            this.selectionHandle = this.selectionHandleFactory.createSelectionHandle(type);\n        }\n\n        this.selectionHandle.refresh(this.cellCtrl);\n    }\n\n    public destroy(): void {\n        this.beans.context.destroyBean(this.selectionHandle);\n    }\n}\n", "import type { UserCompDetails } from '../../components/framework/userComponentFactory';\nimport { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { AgColumn } from '../../entities/agColumn';\nimport type { CellPosition } from '../../entities/cellPositionUtils';\nimport type { CellStyle } from '../../entities/colDef';\nimport type { RowNode } from '../../entities/rowNode';\nimport type { RowPosition } from '../../entities/rowPositionUtils';\nimport type { AgEventType } from '../../eventTypes';\nimport type { CellContextMenuEvent, CellEvent, CellFocusedEvent, FlashCellsEvent } from '../../events';\nimport { refreshFirstAndLastStyles } from '../../headerRendering/cells/cssClassApplier';\nimport type { BrandedType } from '../../interfaces/brandedType';\nimport type { ICellEditor } from '../../interfaces/iCellEditor';\nimport type { CellChangedEvent } from '../../interfaces/iRowNode';\nimport { _setAriaColIndex } from '../../utils/aria';\nimport { _getElementSize } from '../../utils/dom';\nimport { _warnOnce } from '../../utils/function';\nimport { _exists, _makeNull } from '../../utils/generic';\nimport { _getValueUsingField } from '../../utils/object';\nimport { _escapeString } from '../../utils/string';\nimport type { ITooltipFeatureCtrl } from '../../widgets/tooltipFeature';\nimport { TooltipFeature } from '../../widgets/tooltipFeature';\nimport type { ICellRenderer, ICellRendererParams } from '../cellRenderers/iCellRenderer';\nimport { CheckboxSelectionComponent } from '../checkboxSelectionComponent';\nimport { DndSourceComp } from '../dndSourceComp';\nimport type { RowCtrl } from '../row/rowCtrl';\nimport { RowDragComp } from '../row/rowDragComp';\nimport type { FlashCellsParams } from '../rowRenderer';\nimport { CellCustomStyleFeature } from './cellCustomStyleFeature';\nimport { CellKeyboardListenerFeature } from './cellKeyboardListenerFeature';\nimport { CellMouseListenerFeature } from './cellMouseListenerFeature';\nimport { CellPositionFeature } from './cellPositionFeature';\nimport { CellRangeFeature } from './cellRangeFeature';\n\nconst CSS_CELL = 'ag-cell';\nconst CSS_AUTO_HEIGHT = 'ag-cell-auto-height';\nconst CSS_NORMAL_HEIGHT = 'ag-cell-normal-height';\nconst CSS_CELL_FOCUS = 'ag-cell-focus';\nconst CSS_CELL_FIRST_RIGHT_PINNED = 'ag-cell-first-right-pinned';\nconst CSS_CELL_LAST_LEFT_PINNED = 'ag-cell-last-left-pinned';\nconst CSS_CELL_NOT_INLINE_EDITING = 'ag-cell-not-inline-editing';\nconst CSS_COLUMN_HOVER = 'ag-column-hover';\nconst CSS_CELL_WRAP_TEXT = 'ag-cell-wrap-text';\n\nexport interface ICellComp {\n    addOrRemoveCssClass(cssClassName: string, on: boolean): void;\n    setUserStyles(styles: CellStyle): void;\n    getFocusableElement(): HTMLElement;\n\n    setIncludeSelection(include: boolean): void;\n    setIncludeRowDrag(include: boolean): void;\n    setIncludeDndSource(include: boolean): void;\n\n    getCellEditor(): ICellEditor | null;\n    getCellRenderer(): ICellRenderer | null;\n    getParentOfValue(): HTMLElement | null;\n\n    setRenderDetails(\n        compDetails: UserCompDetails | undefined,\n        valueToDisplay: any,\n        forceNewCellRendererInstance: boolean\n    ): void;\n    setEditDetails(\n        compDetails?: UserCompDetails,\n        popup?: boolean,\n        position?: 'over' | 'under',\n        reactiveCustomComponents?: boolean\n    ): void;\n}\n\nlet instanceIdSequence = 0;\nexport type CellCtrlInstanceId = BrandedType<string, 'CellCtrlInstanceId'>;\n\nexport class CellCtrl extends BeanStub {\n    public static DOM_DATA_KEY_CELL_CTRL = 'cellCtrl';\n\n    private instanceId: CellCtrlInstanceId;\n\n    private eGui: HTMLElement;\n    private cellComp: ICellComp;\n    private editCompDetails?: UserCompDetails;\n\n    private focusEventToRestore: CellFocusedEvent | undefined;\n\n    private printLayout: boolean;\n\n    private value: any;\n    private valueFormatted: any;\n\n    private cellRangeFeature: CellRangeFeature | null = null;\n    private cellPositionFeature: CellPositionFeature | null = null;\n    private cellCustomStyleFeature: CellCustomStyleFeature | null = null;\n    private tooltipFeature: TooltipFeature | null = null;\n    private cellMouseListenerFeature: CellMouseListenerFeature | null = null;\n    private cellKeyboardListenerFeature: CellKeyboardListenerFeature | null = null;\n\n    private cellPosition: CellPosition;\n    private editing: boolean;\n\n    private includeSelection: boolean;\n    private includeDndSource: boolean;\n    private includeRowDrag: boolean;\n    private colIdSanitised: string;\n    private tabIndex: number | undefined;\n    private isAutoHeight: boolean;\n\n    private suppressRefreshCell = false;\n\n    // this comp used only for custom row drag handle (ie when user calls params.registerRowDragger)\n    private customRowDragComp: RowDragComp;\n\n    private onCellCompAttachedFuncs: (() => void)[] = [];\n\n    constructor(\n        private readonly column: AgColumn,\n        private readonly rowNode: RowNode,\n        private readonly beans: BeanCollection,\n        private readonly rowCtrl: RowCtrl\n    ) {\n        super();\n\n        // unique id to this instance, including the column ID to help with debugging in React as it's used in 'key'\n        this.instanceId = (column.getId() + '-' + instanceIdSequence++) as CellCtrlInstanceId;\n\n        this.colIdSanitised = _escapeString(this.column.getId())!;\n        if (!beans.gos.get('suppressCellFocus')) {\n            this.tabIndex = -1;\n        }\n\n        this.createCellPosition();\n        this.addFeatures();\n        this.updateAndFormatValue(false);\n    }\n\n    public shouldRestoreFocus(): boolean {\n        // Used in React to determine if the cell should restore focus after re-rendering\n        return this.beans.focusService.shouldRestoreFocus(this.cellPosition);\n    }\n\n    private addFeatures(): void {\n        this.cellPositionFeature = new CellPositionFeature(this, this.beans);\n        this.addDestroyFunc(() => {\n            this.cellPositionFeature?.destroy();\n            this.cellPositionFeature = null;\n        });\n\n        this.cellCustomStyleFeature = new CellCustomStyleFeature(this, this.beans);\n        this.addDestroyFunc(() => {\n            this.cellCustomStyleFeature?.destroy();\n            this.cellCustomStyleFeature = null;\n        });\n\n        this.cellMouseListenerFeature = new CellMouseListenerFeature(this, this.beans, this.column);\n        this.addDestroyFunc(() => {\n            this.cellMouseListenerFeature?.destroy();\n            this.cellMouseListenerFeature = null;\n        });\n\n        this.cellKeyboardListenerFeature = new CellKeyboardListenerFeature(\n            this,\n            this.beans,\n            this.column,\n            this.rowNode,\n            this.rowCtrl\n        );\n        this.addDestroyFunc(() => {\n            this.cellKeyboardListenerFeature?.destroy();\n            this.cellKeyboardListenerFeature = null;\n        });\n\n        if (this.column.isTooltipEnabled()) {\n            this.enableTooltipFeature();\n            this.addDestroyFunc(() => {\n                this.disableTooltipFeature();\n            });\n        }\n\n        const rangeSelectionEnabled = this.beans.rangeService && this.beans.gos.get('enableRangeSelection');\n        if (rangeSelectionEnabled) {\n            this.cellRangeFeature = new CellRangeFeature(this.beans, this);\n            this.addDestroyFunc(() => {\n                this.cellRangeFeature?.destroy();\n                this.cellRangeFeature = null;\n            });\n        }\n    }\n\n    private enableTooltipFeature(value?: string, shouldDisplayTooltip?: () => boolean): void {\n        const getTooltipValue = () => {\n            const colDef = this.column.getColDef();\n            const data = this.rowNode.data;\n\n            if (colDef.tooltipField && _exists(data)) {\n                return _getValueUsingField(data, colDef.tooltipField, this.column.isTooltipFieldContainsDots());\n            }\n\n            const valueGetter = colDef.tooltipValueGetter;\n\n            if (valueGetter) {\n                return valueGetter(\n                    this.beans.gos.addGridCommonParams({\n                        location: 'cell',\n                        colDef: this.column.getColDef(),\n                        column: this.column,\n                        rowIndex: this.cellPosition.rowIndex,\n                        node: this.rowNode,\n                        data: this.rowNode.data,\n                        value: this.value,\n                        valueFormatted: this.valueFormatted,\n                    })\n                );\n            }\n\n            return null;\n        };\n\n        const isTooltipWhenTruncated = this.beans.gos.get('tooltipShowMode') === 'whenTruncated';\n\n        if (!shouldDisplayTooltip && isTooltipWhenTruncated && !this.isCellRenderer()) {\n            shouldDisplayTooltip = () => {\n                const eGui = this.getGui();\n                const textEl = eGui.children.length === 0 ? eGui : eGui.querySelector('.ag-cell-value');\n                if (!textEl) {\n                    return true;\n                }\n\n                return textEl.scrollWidth > textEl.clientWidth;\n            };\n        }\n\n        const tooltipCtrl: ITooltipFeatureCtrl = {\n            getColumn: () => this.column,\n            getColDef: () => this.column.getColDef(),\n            getRowIndex: () => this.cellPosition.rowIndex,\n            getRowNode: () => this.rowNode,\n            getGui: () => this.getGui(),\n            getLocation: () => 'cell',\n            getTooltipValue: value != null ? () => value : getTooltipValue,\n\n            // this makes no sense, why is the cell formatted value passed to the tooltip???\n            getValueFormatted: () => this.valueFormatted,\n            shouldDisplayTooltip,\n        };\n\n        this.tooltipFeature = new TooltipFeature(tooltipCtrl, this.beans);\n    }\n\n    private disableTooltipFeature() {\n        if (!this.tooltipFeature) {\n            return;\n        }\n\n        this.tooltipFeature.destroy();\n        this.tooltipFeature = null;\n    }\n\n    public setComp(\n        comp: ICellComp,\n        eGui: HTMLElement,\n        eCellWrapper: HTMLElement | undefined,\n        printLayout: boolean,\n        startEditing: boolean\n    ): void {\n        this.cellComp = comp;\n        this.eGui = eGui;\n        this.printLayout = printLayout;\n\n        this.addDomData();\n\n        this.onCellFocused(this.focusEventToRestore);\n        this.applyStaticCssClasses();\n        this.setWrapText();\n\n        this.onFirstRightPinnedChanged();\n        this.onLastLeftPinnedChanged();\n        this.onColumnHover();\n        this.setupControlComps();\n\n        this.setupAutoHeight(eCellWrapper);\n\n        this.refreshFirstAndLastStyles();\n        this.refreshAriaColIndex();\n\n        this.cellPositionFeature?.setComp(eGui);\n        this.cellCustomStyleFeature?.setComp(comp);\n        this.tooltipFeature?.refreshToolTip();\n        this.cellKeyboardListenerFeature?.setComp(this.eGui);\n\n        if (this.cellRangeFeature) {\n            this.cellRangeFeature.setComp(comp, eGui);\n        }\n\n        if (startEditing && this.isCellEditable()) {\n            this.startEditing();\n        } else {\n            this.showValue();\n        }\n\n        if (this.onCellCompAttachedFuncs.length) {\n            this.onCellCompAttachedFuncs.forEach((func) => func());\n            this.onCellCompAttachedFuncs = [];\n        }\n    }\n\n    private setupAutoHeight(eCellWrapper?: HTMLElement): void {\n        this.isAutoHeight = this.column.isAutoHeight();\n        if (!this.isAutoHeight || !eCellWrapper) {\n            return;\n        }\n\n        const eParentCell = eCellWrapper.parentElement!;\n        // taking minRowHeight from getRowHeightForNode means the getRowHeight() callback is used,\n        // thus allowing different min heights for different rows.\n        const minRowHeight = this.beans.gos.getRowHeightForNode(this.rowNode).height;\n\n        const measureHeight = (timesCalled: number) => {\n            if (this.editing) {\n                return;\n            }\n            // because of the retry's below, it's possible the retry's go beyond\n            // the rows life.\n            if (!this.isAlive()) {\n                return;\n            }\n\n            const { paddingTop, paddingBottom, borderBottomWidth, borderTopWidth } = _getElementSize(eParentCell);\n            const extraHeight = paddingTop + paddingBottom + borderBottomWidth + borderTopWidth;\n\n            const wrapperHeight = eCellWrapper!.offsetHeight;\n            const autoHeight = wrapperHeight + extraHeight;\n\n            if (timesCalled < 5) {\n                // if not in doc yet, means framework not yet inserted, so wait for next VM turn,\n                // maybe it will be ready next VM turn\n                const doc = this.beans.gos.getDocument();\n                const notYetInDom = !doc || !doc.contains(eCellWrapper);\n\n                // this happens in React, where React hasn't put any content in. we say 'possibly'\n                // as a) may not be React and b) the cell could be empty anyway\n                const possiblyNoContentYet = autoHeight == 0;\n\n                if (notYetInDom || possiblyNoContentYet) {\n                    window.setTimeout(() => measureHeight(timesCalled + 1), 0);\n                    return;\n                }\n            }\n\n            const newHeight = Math.max(autoHeight, minRowHeight);\n            this.rowNode.setRowAutoHeight(newHeight, this.column);\n        };\n\n        const listener = () => measureHeight(0);\n\n        // do once to set size in case size doesn't change, common when cell is blank\n        listener();\n\n        const destroyResizeObserver = this.beans.resizeObserverService.observeResize(eCellWrapper, listener);\n\n        this.addDestroyFunc(() => {\n            destroyResizeObserver();\n            this.rowNode.setRowAutoHeight(undefined, this.column);\n        });\n    }\n\n    public getCellAriaRole(): string {\n        return this.column.getColDef().cellAriaRole ?? 'gridcell';\n    }\n\n    public getInstanceId(): CellCtrlInstanceId {\n        return this.instanceId;\n    }\n    public getColumnIdSanitised(): string {\n        return this.colIdSanitised;\n    }\n    public getTabIndex(): number | undefined {\n        return this.tabIndex;\n    }\n    public isCellRenderer(): boolean {\n        const colDef = this.column.getColDef();\n        return colDef.cellRenderer != null || colDef.cellRendererSelector != null;\n    }\n    public getValueToDisplay(): any {\n        return this.valueFormatted ?? this.value;\n    }\n\n    private showValue(forceNewCellRendererInstance = false): void {\n        const valueToDisplay = this.getValueToDisplay();\n        let compDetails: UserCompDetails | undefined;\n\n        if (this.rowNode.stub) {\n            const params = this.createCellRendererParams();\n            compDetails = this.beans.userComponentFactory.getLoadingCellRendererDetails(\n                this.column.getColDef(),\n                params\n            );\n        } else if (this.isCellRenderer()) {\n            const params = this.createCellRendererParams();\n            compDetails = this.beans.userComponentFactory.getCellRendererDetails(this.column.getColDef(), params);\n        }\n        this.cellComp.setRenderDetails(compDetails, valueToDisplay, forceNewCellRendererInstance);\n        this.cellRangeFeature?.refreshHandle();\n    }\n\n    private setupControlComps(): void {\n        const colDef = this.column.getColDef();\n        this.includeSelection = this.isIncludeControl(colDef.checkboxSelection);\n        this.includeRowDrag = this.isIncludeControl(colDef.rowDrag);\n        this.includeDndSource = this.isIncludeControl(colDef.dndSource);\n\n        this.cellComp.setIncludeSelection(this.includeSelection);\n        this.cellComp.setIncludeDndSource(this.includeDndSource);\n        this.cellComp.setIncludeRowDrag(this.includeRowDrag);\n    }\n\n    public isForceWrapper(): boolean {\n        // text selection requires the value to be wrapped in another element\n        const forceWrapper = this.beans.gos.get('enableCellTextSelection') || this.column.isAutoHeight();\n        return forceWrapper;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    private isIncludeControl(value: boolean | Function | undefined): boolean {\n        const rowNodePinned = this.rowNode.rowPinned != null;\n        const isFunc = typeof value === 'function';\n        const res = rowNodePinned ? false : isFunc || value === true;\n\n        return res;\n    }\n\n    private refreshShouldDestroy(): boolean {\n        const colDef = this.column.getColDef();\n        const selectionChanged = this.includeSelection != this.isIncludeControl(colDef.checkboxSelection);\n        const rowDragChanged = this.includeRowDrag != this.isIncludeControl(colDef.rowDrag);\n        const dndSourceChanged = this.includeDndSource != this.isIncludeControl(colDef.dndSource);\n        // auto height uses wrappers, so need to destroy\n        const autoHeightChanged = this.isAutoHeight != this.column.isAutoHeight();\n\n        return selectionChanged || rowDragChanged || dndSourceChanged || autoHeightChanged;\n    }\n\n    // either called internally if single cell editing, or called by rowRenderer if row editing\n    public startEditing(\n        key: string | null = null,\n        cellStartedEdit = false,\n        event: KeyboardEvent | MouseEvent | null = null\n    ): void {\n        const { editService } = this.beans;\n        if (!this.isCellEditable() || this.editing || !editService) {\n            return;\n        }\n\n        // because of async in React, the cellComp may not be set yet, if no cellComp then we are\n        // yet to initialise the cell, so we re-schedule this operation for when celLComp is attached\n        if (!this.cellComp) {\n            this.onCellCompAttachedFuncs.push(() => {\n                this.startEditing(key, cellStartedEdit, event);\n            });\n            return;\n        }\n\n        editService.startEditing(this, key, cellStartedEdit, event);\n    }\n\n    public setEditing(editing: boolean, compDetails: UserCompDetails | undefined): void {\n        this.editCompDetails = compDetails;\n        if (this.editing === editing) {\n            return;\n        }\n\n        this.editing = editing;\n        this.cellRangeFeature?.refreshHandle();\n    }\n\n    // pass in 'true' to cancel the editing.\n    public stopRowOrCellEdit(cancel: boolean = false) {\n        if (this.beans.gos.get('editType') === 'fullRow') {\n            this.rowCtrl.stopEditing(cancel);\n        } else {\n            this.stopEditing(cancel);\n        }\n    }\n\n    public onPopupEditorClosed(): void {\n        if (!this.editing) {\n            return;\n        }\n        // note: this happens because of a click outside of the grid or if the popupEditor\n        // is closed with `Escape` key. if another cell was clicked, then the editing will\n        // have already stopped and returned on the conditional above.\n        this.stopEditingAndFocus();\n    }\n\n    /**\n     * Ends the Cell Editing\n     * @param cancel `True` if the edit process is being canceled.\n     * @returns `True` if the value of the `GridCell` has been updated, otherwise `False`.\n     */\n    public stopEditing(cancel = false): boolean {\n        const { editService } = this.beans;\n        if (!this.editing || !editService) {\n            return false;\n        }\n\n        return editService.stopEditing(this, cancel);\n    }\n\n    private createCellRendererParams(): ICellRendererParams {\n        const res: ICellRendererParams = this.beans.gos.addGridCommonParams({\n            value: this.value,\n            valueFormatted: this.valueFormatted,\n            getValue: () => this.rowNode.getValueFromValueService(this.column),\n            setValue: (value: any) => this.beans.valueService.setValue(this.rowNode, this.column, value),\n            formatValue: this.formatValue.bind(this),\n            data: this.rowNode.data,\n            node: this.rowNode,\n            pinned: this.column.getPinned() as any,\n            colDef: this.column.getColDef(),\n            column: this.column,\n            refreshCell: this.refreshCell.bind(this),\n            eGridCell: this.getGui(),\n            eParentOfValue: this.cellComp.getParentOfValue()!,\n\n            registerRowDragger: (\n                rowDraggerElement: HTMLElement,\n                dragStartPixels: number,\n                value?: string,\n                suppressVisibilityChange?: boolean\n            ) => this.registerRowDragger(rowDraggerElement, dragStartPixels, suppressVisibilityChange),\n            setTooltip: (value: string, shouldDisplayTooltip: () => boolean) => {\n                if (this.tooltipFeature) {\n                    this.disableTooltipFeature();\n                }\n                this.enableTooltipFeature(value, shouldDisplayTooltip);\n                this.tooltipFeature?.refreshToolTip();\n            },\n        });\n\n        return res;\n    }\n\n    public setFocusOutOnEditor(): void {\n        if (!this.editing) {\n            return;\n        }\n        this.beans.editService?.setFocusOutOnEditor(this);\n    }\n\n    public setFocusInOnEditor(): void {\n        if (!this.editing) {\n            return;\n        }\n        this.beans.editService?.setFocusInOnEditor(this);\n    }\n\n    public onCellChanged(event: CellChangedEvent): void {\n        const eventImpactsThisCell = event.column === this.column;\n\n        if (eventImpactsThisCell) {\n            this.refreshCell({});\n        }\n    }\n\n    public refreshOrDestroyCell(params?: { suppressFlash?: boolean; newData?: boolean; forceRefresh?: boolean }): void {\n        if (this.refreshShouldDestroy()) {\n            this.rowCtrl?.recreateCell(this);\n        } else {\n            this.refreshCell(params);\n        }\n    }\n\n    // + stop editing {forceRefresh: true, suppressFlash: true}\n    // + event cellChanged {}\n    // + cellRenderer.params.refresh() {} -> method passes 'as is' to the cellRenderer, so params could be anything\n    // + rowCtrl: event dataChanged {suppressFlash: !update, newData: !update}\n    // + rowCtrl: api refreshCells() {animate: true/false}\n    // + rowRenderer: api softRefreshView() {}\n    public refreshCell(params?: { suppressFlash?: boolean; newData?: boolean; forceRefresh?: boolean }) {\n        // if we are in the middle of 'stopEditing', then we don't refresh here, as refresh gets called explicitly\n        if (this.suppressRefreshCell || this.editing) {\n            return;\n        }\n\n        const colDef = this.column.getColDef();\n        const newData = params != null && !!params.newData;\n        const suppressFlash = (params != null && !!params.suppressFlash) || !!colDef.suppressCellFlash;\n        // we always refresh if cell has no value - this can happen when user provides Cell Renderer and the\n        // cell renderer doesn't rely on a value, instead it could be looking directly at the data, or maybe\n        // printing the current time (which would be silly)???. Generally speaking\n        // non of {field, valueGetter, showRowGroup} is bad in the users application, however for this edge case, it's\n        // best always refresh and take the performance hit rather than never refresh and users complaining in support\n        // that cells are not updating.\n        const noValueProvided = colDef.field == null && colDef.valueGetter == null && colDef.showRowGroup == null;\n        const forceRefresh = (params && params.forceRefresh) || noValueProvided || newData;\n\n        const isCellCompReady = !!this.cellComp;\n        // Only worth comparing values if the cellComp is ready\n        const valuesDifferent = this.updateAndFormatValue(isCellCompReady);\n        const dataNeedsUpdating = forceRefresh || valuesDifferent;\n\n        // In React, due to async, it's possible a refresh was asked for before the CellComp was created and calls setComp()\n        // So we do not run the cell comp refresh logic at this point in time.\n        if (!isCellCompReady) {\n            return;\n        }\n\n        if (dataNeedsUpdating) {\n            // if it's 'new data', then we don't refresh the cellRenderer, even if refresh method is available.\n            // this is because if the whole data is new (ie we are showing stock price 'BBA' now and not 'SSD')\n            // then we are not showing a movement in the stock price, rather we are showing different stock.\n            this.showValue(newData);\n\n            // we don't want to flash the cells when processing a filter change, as otherwise the UI would\n            // be to busy. see comment in FilterManager with regards processingFilterChange\n            const processingFilterChange = this.beans.filterManager?.isSuppressFlashingCellsBecauseFiltering();\n\n            const flashCell =\n                !suppressFlash &&\n                !processingFilterChange &&\n                (this.beans.gos.get('enableCellChangeFlash') || colDef.enableCellChangeFlash);\n\n            if (flashCell) {\n                this.flashCell();\n            }\n\n            this.cellCustomStyleFeature?.applyUserStyles();\n            this.cellCustomStyleFeature?.applyClassesFromColDef();\n        }\n\n        this.tooltipFeature?.refreshToolTip();\n\n        // we do cellClassRules even if the value has not changed, so that users who have rules that\n        // look at other parts of the row (where the other part of the row might of changed) will work.\n        this.cellCustomStyleFeature?.applyCellClassRules();\n    }\n\n    // cell editors call this, when they want to stop for reasons other\n    // than what we pick up on. eg selecting from a dropdown ends editing.\n    public stopEditingAndFocus(suppressNavigateAfterEdit = false, shiftKey: boolean = false): void {\n        this.beans.editService?.stopEditingAndFocus(this, suppressNavigateAfterEdit, shiftKey);\n    }\n\n    // user can also call this via API\n    public flashCell(\n        delays?: Pick<FlashCellsParams, 'fadeDelay' | 'flashDelay' | 'fadeDuration' | 'flashDuration'>\n    ): void {\n        const flashDuration = delays?.flashDuration ?? delays?.flashDelay;\n        const fadeDuration = delays?.fadeDuration ?? delays?.fadeDelay;\n\n        this.animateCell('data-changed', flashDuration, fadeDuration);\n    }\n\n    private animateCell(cssName: string, flashDuration?: number | null, fadeDuration?: number | null): void {\n        if (!this.cellComp) {\n            return;\n        }\n\n        const fullName = `ag-cell-${cssName}`;\n        const animationFullName = `ag-cell-${cssName}-animation`;\n        const { gos } = this.beans;\n\n        if (!flashDuration) {\n            flashDuration = gos.get('cellFlashDuration');\n        }\n\n        if (!_exists(fadeDuration)) {\n            fadeDuration = gos.get('cellFadeDuration');\n        }\n\n        // we want to highlight the cells, without any animation\n        this.cellComp.addOrRemoveCssClass(fullName, true);\n        this.cellComp.addOrRemoveCssClass(animationFullName, false);\n\n        // then once that is applied, we remove the highlight with animation\n        this.beans.frameworkOverrides.wrapIncoming(() => {\n            window.setTimeout(() => {\n                if (!this.isAlive()) {\n                    return;\n                }\n                this.cellComp.addOrRemoveCssClass(fullName, false);\n                this.cellComp.addOrRemoveCssClass(animationFullName, true);\n\n                this.eGui.style.transition = `background-color ${fadeDuration}ms`;\n                window.setTimeout(() => {\n                    if (!this.isAlive()) {\n                        return;\n                    }\n                    // and then to leave things as we got them, we remove the animation\n                    this.cellComp.addOrRemoveCssClass(animationFullName, false);\n                    this.eGui.style.transition = '';\n                }, fadeDuration!);\n            }, flashDuration!);\n        });\n    }\n\n    public onFlashCells(event: FlashCellsEvent): void {\n        if (!this.cellComp) {\n            return;\n        }\n        const cellId = this.beans.cellPositionUtils.createId(this.getCellPosition());\n        const shouldFlash = event.cells[cellId];\n        if (shouldFlash) {\n            this.animateCell('highlight');\n        }\n    }\n\n    public isCellEditable(): boolean {\n        return this.column.isCellEditable(this.rowNode);\n    }\n\n    public isSuppressFillHandle(): boolean {\n        return this.column.isSuppressFillHandle();\n    }\n\n    public formatValue(value: any): any {\n        return this.callValueFormatter(value) ?? value;\n    }\n\n    private callValueFormatter(value: any): string | null {\n        return this.beans.valueService.formatValue(this.column, this.rowNode, value);\n    }\n\n    public updateAndFormatValue(compareValues: boolean): boolean {\n        const oldValue = this.value;\n        const oldValueFormatted = this.valueFormatted;\n\n        this.value = this.rowNode.getValueFromValueService(this.column);\n        this.valueFormatted = this.callValueFormatter(this.value);\n\n        if (compareValues) {\n            return !this.valuesAreEqual(oldValue, this.value) || this.valueFormatted != oldValueFormatted;\n        }\n        return true;\n    }\n\n    private valuesAreEqual(val1: any, val2: any): boolean {\n        // if the user provided an equals method, use that, otherwise do simple comparison\n        const colDef = this.column.getColDef();\n        return colDef.equals ? colDef.equals(val1, val2) : val1 === val2;\n    }\n\n    public getComp(): ICellComp {\n        return this.cellComp;\n    }\n\n    public getValue(): any {\n        return this.value;\n    }\n\n    private addDomData(): void {\n        const element = this.getGui();\n\n        this.beans.gos.setDomData(element, CellCtrl.DOM_DATA_KEY_CELL_CTRL, this);\n        this.addDestroyFunc(() => this.beans.gos.setDomData(element, CellCtrl.DOM_DATA_KEY_CELL_CTRL, null));\n    }\n\n    public createEvent<T extends AgEventType>(domEvent: Event | null, eventType: T): CellEvent<T> {\n        const event: CellEvent<T> = this.beans.gos.addGridCommonParams({\n            type: eventType,\n            node: this.rowNode,\n            data: this.rowNode.data,\n            value: this.value,\n            column: this.column,\n            colDef: this.column.getColDef(),\n            rowPinned: this.rowNode.rowPinned,\n            event: domEvent,\n            rowIndex: this.rowNode.rowIndex!,\n        });\n\n        return event;\n    }\n\n    public processCharacter(event: KeyboardEvent): void {\n        this.cellKeyboardListenerFeature?.processCharacter(event);\n    }\n\n    public onKeyDown(event: KeyboardEvent): void {\n        this.cellKeyboardListenerFeature?.onKeyDown(event);\n    }\n\n    public onMouseEvent(eventName: string, mouseEvent: MouseEvent): void {\n        this.cellMouseListenerFeature?.onMouseEvent(eventName, mouseEvent);\n    }\n\n    public getGui(): HTMLElement {\n        return this.eGui;\n    }\n\n    public getColSpanningList(): AgColumn[] {\n        return this.cellPositionFeature!.getColSpanningList();\n    }\n\n    public onLeftChanged(): void {\n        if (!this.cellComp) {\n            return;\n        }\n        this.cellPositionFeature?.onLeftChanged();\n    }\n\n    public onDisplayedColumnsChanged(): void {\n        if (!this.eGui) {\n            return;\n        }\n        this.refreshAriaColIndex();\n        this.refreshFirstAndLastStyles();\n    }\n\n    private refreshFirstAndLastStyles(): void {\n        const { cellComp, column, beans } = this;\n        refreshFirstAndLastStyles(cellComp, column, beans.visibleColsService);\n    }\n\n    private refreshAriaColIndex(): void {\n        const colIdx = this.beans.visibleColsService.getAriaColIndex(this.column);\n        _setAriaColIndex(this.getGui(), colIdx); // for react, we don't use JSX, as it slowed down column moving\n    }\n\n    public isSuppressNavigable(): boolean {\n        return this.column.isSuppressNavigable(this.rowNode);\n    }\n\n    public onWidthChanged(): void {\n        return this.cellPositionFeature?.onWidthChanged();\n    }\n\n    public getColumn(): AgColumn {\n        return this.column;\n    }\n\n    public getRowNode(): RowNode {\n        return this.rowNode;\n    }\n\n    public isPrintLayout(): boolean {\n        return this.printLayout;\n    }\n\n    public getCellPosition(): CellPosition {\n        return this.cellPosition;\n    }\n\n    public isEditing(): boolean {\n        return this.editing;\n    }\n\n    // called by rowRenderer when user navigates via tab key\n    public startRowOrCellEdit(key?: string | null, event: KeyboardEvent | MouseEvent | null = null): void {\n        // because of async in React, the cellComp may not be set yet, if no cellComp then we are\n        // yet to initialise the cell, so we re-schedule this operation for when celLComp is attached\n        if (!this.cellComp) {\n            this.onCellCompAttachedFuncs.push(() => {\n                this.startRowOrCellEdit(key, event);\n            });\n            return;\n        }\n\n        if (this.beans.gos.get('editType') === 'fullRow') {\n            this.rowCtrl.startRowEditing(key, this);\n        } else {\n            this.startEditing(key, true, event);\n        }\n    }\n\n    public getRowCtrl(): RowCtrl {\n        return this.rowCtrl;\n    }\n\n    public getRowPosition(): RowPosition {\n        return {\n            rowIndex: this.cellPosition.rowIndex,\n            rowPinned: this.cellPosition.rowPinned,\n        };\n    }\n\n    public updateRangeBordersIfRangeCount(): void {\n        if (!this.cellComp) {\n            return;\n        }\n        if (this.cellRangeFeature) {\n            this.cellRangeFeature.updateRangeBordersIfRangeCount();\n        }\n    }\n\n    public onRangeSelectionChanged(): void {\n        if (!this.cellComp) {\n            return;\n        }\n        if (this.cellRangeFeature) {\n            this.cellRangeFeature.onRangeSelectionChanged();\n        }\n    }\n\n    public isRangeSelectionEnabled(): boolean {\n        return this.cellRangeFeature != null;\n    }\n\n    public focusCell(forceBrowserFocus = false): void {\n        this.beans.focusService.setFocusedCell({\n            rowIndex: this.getCellPosition().rowIndex,\n            column: this.column,\n            rowPinned: this.rowNode.rowPinned,\n            forceBrowserFocus,\n        });\n    }\n\n    public onRowIndexChanged(): void {\n        // when index changes, this influences items that need the index, so we update the\n        // grid cell so they are working off the new index.\n        this.createCellPosition();\n        // when the index of the row changes, ie means the cell may have lost or gained focus\n        this.onCellFocused();\n        // check range selection\n        if (this.cellRangeFeature) {\n            this.cellRangeFeature.onRangeSelectionChanged();\n        }\n    }\n\n    public onFirstRightPinnedChanged(): void {\n        if (!this.cellComp) {\n            return;\n        }\n        const firstRightPinned = this.column.isFirstRightPinned();\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_FIRST_RIGHT_PINNED, firstRightPinned);\n    }\n\n    public onLastLeftPinnedChanged(): void {\n        if (!this.cellComp) {\n            return;\n        }\n        const lastLeftPinned = this.column.isLastLeftPinned();\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_LAST_LEFT_PINNED, lastLeftPinned);\n    }\n\n    public onCellFocused(event?: CellFocusedEvent): void {\n        if (this.beans.gos.get('suppressCellFocus')) {\n            return;\n        }\n        const cellFocused = this.beans.focusService.isCellFocused(this.cellPosition);\n\n        if (!this.cellComp) {\n            if (cellFocused && event?.forceBrowserFocus) {\n                // The cell comp has not been rendered yet, but the browser focus is being forced for this cell\n                // so lets save the event to apply it when setComp is called in the next turn.\n                this.focusEventToRestore = event;\n            }\n            return;\n        }\n        // Clear the saved focus event\n        this.focusEventToRestore = undefined;\n\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_FOCUS, cellFocused);\n\n        // see if we need to force browser focus - this can happen if focus is programmatically set\n        if (cellFocused && event && event.forceBrowserFocus) {\n            let focusEl = this.cellComp.getFocusableElement();\n\n            if (this.editing) {\n                const focusableEls = this.beans.focusService.findFocusableElements(focusEl, null, true);\n                if (focusableEls.length) {\n                    focusEl = focusableEls[0];\n                }\n            }\n\n            focusEl.focus({ preventScroll: !!event.preventScrollOnBrowserFocus });\n        }\n\n        // if another cell was focused, and we are editing, then stop editing\n        const fullRowEdit = this.beans.gos.get('editType') === 'fullRow';\n\n        if (!cellFocused && !fullRowEdit && this.editing) {\n            this.stopRowOrCellEdit();\n        }\n\n        if (cellFocused) {\n            this.rowCtrl.announceDescription();\n        }\n    }\n\n    private createCellPosition(): void {\n        this.cellPosition = {\n            rowIndex: this.rowNode.rowIndex!,\n            rowPinned: _makeNull(this.rowNode.rowPinned),\n            column: this.column,\n        };\n    }\n\n    // CSS Classes that only get applied once, they never change\n    private applyStaticCssClasses(): void {\n        this.cellComp.addOrRemoveCssClass(CSS_CELL, true);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_NOT_INLINE_EDITING, true);\n\n        // normal cells fill the height of the row. autoHeight cells have no height to let them\n        // fit the height of content.\n\n        const autoHeight = this.column.isAutoHeight() == true;\n        this.cellComp.addOrRemoveCssClass(CSS_AUTO_HEIGHT, autoHeight);\n        this.cellComp.addOrRemoveCssClass(CSS_NORMAL_HEIGHT, !autoHeight);\n    }\n\n    public onColumnHover(): void {\n        if (!this.cellComp) {\n            return;\n        }\n        if (!this.beans.gos.get('columnHoverHighlight')) {\n            return;\n        }\n\n        const isHovered = this.beans.columnHoverService.isHovered(this.column);\n        this.cellComp.addOrRemoveCssClass(CSS_COLUMN_HOVER, isHovered);\n    }\n\n    public onColDefChanged(): void {\n        if (!this.cellComp) {\n            return;\n        }\n\n        const isTooltipEnabled = this.column.isTooltipEnabled();\n        if (isTooltipEnabled) {\n            this.disableTooltipFeature();\n            this.enableTooltipFeature();\n        } else {\n            this.disableTooltipFeature();\n        }\n\n        this.setWrapText();\n\n        if (!this.editing) {\n            this.refreshOrDestroyCell({ forceRefresh: true, suppressFlash: true });\n        } else {\n            this.beans.editService?.handleColDefChanged(this);\n        }\n    }\n\n    private setWrapText(): void {\n        const value = this.column.getColDef().wrapText == true;\n\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_WRAP_TEXT, value);\n    }\n\n    public dispatchCellContextMenuEvent(event: Event | null) {\n        const colDef = this.column.getColDef();\n        const cellContextMenuEvent: CellContextMenuEvent = this.createEvent(event, 'cellContextMenu');\n\n        this.beans.eventService.dispatchEvent(cellContextMenuEvent);\n\n        if (colDef.onCellContextMenu) {\n            // to make the callback async, do in a timeout\n            window.setTimeout(() => {\n                this.beans.frameworkOverrides.wrapOutgoing(() => {\n                    (colDef.onCellContextMenu as any)(cellContextMenuEvent);\n                });\n            }, 0);\n        }\n    }\n\n    public getCellRenderer(): ICellRenderer | null {\n        return this.cellComp ? this.cellComp.getCellRenderer() : null;\n    }\n\n    public getCellEditor(): ICellEditor | null {\n        return this.cellComp ? this.cellComp.getCellEditor() : null;\n    }\n\n    public override destroy(): void {\n        this.onCellCompAttachedFuncs = [];\n        super.destroy();\n    }\n\n    public createSelectionCheckbox(): CheckboxSelectionComponent {\n        const cbSelectionComponent = new CheckboxSelectionComponent();\n\n        this.beans.context.createBean(cbSelectionComponent);\n        cbSelectionComponent.init({ rowNode: this.rowNode, column: this.column });\n\n        // put the checkbox in before the value\n        return cbSelectionComponent;\n    }\n\n    public createDndSource(): DndSourceComp {\n        const dndSourceComp = new DndSourceComp(this.rowNode, this.column, this.eGui);\n        this.beans.context.createBean(dndSourceComp);\n\n        return dndSourceComp;\n    }\n\n    public registerRowDragger(\n        customElement: HTMLElement,\n        dragStartPixels?: number,\n        suppressVisibilityChange?: boolean\n    ): void {\n        // if previously existed, then we are only updating\n        if (this.customRowDragComp) {\n            this.customRowDragComp.setDragElement(customElement, dragStartPixels);\n            return;\n        }\n\n        const newComp = this.createRowDragComp(customElement, dragStartPixels, suppressVisibilityChange);\n\n        if (newComp) {\n            this.customRowDragComp = newComp;\n            this.addDestroyFunc(() => {\n                this.beans.context.destroyBean(newComp);\n                (this.customRowDragComp as any) = null;\n            });\n        }\n    }\n\n    public createRowDragComp(\n        customElement?: HTMLElement,\n        dragStartPixels?: number,\n        suppressVisibilityChange?: boolean\n    ): RowDragComp | undefined {\n        const pagination = this.beans.gos.get('pagination');\n        const rowDragManaged = this.beans.gos.get('rowDragManaged');\n        const clientSideRowModelActive = this.beans.gos.isRowModelType('clientSide');\n\n        if (rowDragManaged) {\n            // row dragging only available in default row model\n            if (!clientSideRowModelActive) {\n                _warnOnce('managed row dragging is only allowed in the Client Side Row Model');\n                return;\n            }\n\n            if (pagination) {\n                _warnOnce('managed row dragging is not possible when doing pagination');\n                return;\n            }\n        }\n\n        // otherwise (normal case) we are creating a RowDraggingComp for the first time\n        const rowDragComp = new RowDragComp(\n            () => this.value,\n            this.rowNode,\n            this.column,\n            customElement,\n            dragStartPixels,\n            suppressVisibilityChange\n        );\n        this.beans.context.createBean(rowDragComp);\n\n        return rowDragComp;\n    }\n\n    public setSuppressRefreshCell(suppressRefreshCell: boolean): void {\n        this.suppressRefreshCell = suppressRefreshCell;\n    }\n\n    public getEditCompDetails(): UserCompDetails | undefined {\n        return this.editCompDetails;\n    }\n}\n", "import type { UserCompDetails } from '../../components/framework/userComponentFactory';\nimport { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { AgColumn } from '../../entities/agColumn';\nimport type { CellPosition } from '../../entities/cellPositionUtils';\nimport type { RowClassParams, RowStyle } from '../../entities/gridOptions';\nimport type { RowNode } from '../../entities/rowNode';\nimport type { RowPosition } from '../../entities/rowPositionUtils';\nimport type { AgEventType } from '../../eventTypes';\nimport type {\n    CellFocusedEvent,\n    RowClickedEvent,\n    RowDoubleClickedEvent,\n    RowEvent,\n    VirtualRowRemovedEvent,\n} from '../../events';\nimport type { RowContainerType } from '../../gridBodyComp/rowContainer/rowContainerCtrl';\nimport type { BrandedType } from '../../interfaces/brandedType';\nimport type { ProcessRowParams, RenderedRowEvent } from '../../interfaces/iCallbackParams';\nimport type { IClientSideRowModel } from '../../interfaces/iClientSideRowModel';\nimport type { ColumnInstanceId, ColumnPinnedType } from '../../interfaces/iColumn';\nimport type { WithoutGridCommon } from '../../interfaces/iCommon';\nimport type { IEventListener } from '../../interfaces/iEventEmitter';\nimport type { IFrameworkOverrides } from '../../interfaces/iFrameworkOverrides';\nimport type { DataChangedEvent, IRowNode } from '../../interfaces/iRowNode';\nimport { RowHighlightPosition } from '../../interfaces/iRowNode';\nimport type { IServerSideRowModel } from '../../interfaces/iServerSideRowModel';\nimport { ModuleNames } from '../../modules/moduleNames';\nimport { ModuleRegistry } from '../../modules/moduleRegistry';\nimport { _setAriaExpanded, _setAriaRowIndex, _setAriaSelected } from '../../utils/aria';\nimport { _isElementChildOfClass, _isFocusableFormField, _isVisible } from '../../utils/dom';\nimport { _isStopPropagationForAgGrid } from '../../utils/event';\nimport { _executeNextVMTurn, _warnOnce } from '../../utils/function';\nimport { _exists, _makeNull } from '../../utils/generic';\nimport { _escapeString } from '../../utils/string';\nimport type { ITooltipFeatureCtrl } from '../../widgets/tooltipFeature';\nimport { TooltipFeature } from '../../widgets/tooltipFeature';\nimport { CellCtrl } from '../cell/cellCtrl';\nimport type { ICellRenderer, ICellRendererParams } from '../cellRenderers/iCellRenderer';\nimport type { RowCssClassCalculatorParams } from './rowCssClassCalculator';\nimport { RowDragComp } from './rowDragComp';\n\ntype RowType = 'Normal' | 'FullWidth' | 'FullWidthLoading' | 'FullWidthGroup' | 'FullWidthDetail';\n\nlet instanceIdSequence = 0;\nexport type RowCtrlInstanceId = BrandedType<string, 'RowCtrlInstanceId'>;\n\nexport interface IRowComp {\n    setDomOrder(domOrder: boolean): void;\n    addOrRemoveCssClass(cssClassName: string, on: boolean): void;\n    setCellCtrls(cellCtrls: CellCtrl[], useFlushSync: boolean): void;\n    showFullWidth(compDetails: UserCompDetails): void;\n    getFullWidthCellRenderer(): ICellRenderer | null | undefined;\n    setTop(top: string): void;\n    setTransform(transform: string): void;\n    setRowIndex(rowIndex: string): void;\n    setRowId(rowId: string): void;\n    setRowBusinessKey(businessKey: string): void;\n    setUserStyles(styles: RowStyle | undefined): void;\n    refreshFullWidth(getUpdatedParams: () => ICellRendererParams): boolean;\n}\n\ninterface RowGui {\n    rowComp: IRowComp;\n    element: HTMLElement;\n    containerType: RowContainerType;\n}\n\ninterface CellCtrlListAndMap {\n    list: CellCtrl[];\n    map: { [key: ColumnInstanceId]: CellCtrl };\n}\n\nexport type RowCtrlEvent = RenderedRowEvent;\nexport class RowCtrl extends BeanStub<RowCtrlEvent> {\n    public static DOM_DATA_KEY_ROW_CTRL = 'renderedRow';\n\n    private instanceId: RowCtrlInstanceId;\n\n    private readonly rowNode: RowNode;\n    private readonly beans: BeanCollection;\n    private tooltipFeature: TooltipFeature | undefined;\n\n    private rowType: RowType;\n\n    private leftGui: RowGui | undefined;\n    private centerGui: RowGui | undefined;\n    private rightGui: RowGui | undefined;\n    private fullWidthGui: RowGui | undefined;\n\n    private allRowGuis: RowGui[] = [];\n\n    private firstRowOnPage: boolean;\n    private lastRowOnPage: boolean;\n\n    private active = true;\n\n    private stoppingRowEdit: boolean;\n    private editingRow: boolean;\n    private rowFocused: boolean;\n\n    private centerCellCtrls: CellCtrlListAndMap = { list: [], map: {} };\n    private leftCellCtrls: CellCtrlListAndMap = { list: [], map: {} };\n    private rightCellCtrls: CellCtrlListAndMap = { list: [], map: {} };\n\n    private slideInAnimation: { [key in RowContainerType]: boolean } = {\n        left: false,\n        center: false,\n        right: false,\n        fullWidth: false,\n    };\n\n    private fadeInAnimation: { [key in RowContainerType]: boolean } = {\n        left: false,\n        center: false,\n        right: false,\n        fullWidth: false,\n    };\n\n    private rowDragComps: RowDragComp[] = [];\n\n    private readonly useAnimationFrameForCreate: boolean;\n\n    private paginationPage: number;\n\n    private lastMouseDownOnDragger = false;\n\n    private rowLevel: number;\n    private rowStyles: RowStyle | undefined;\n    private readonly emptyStyle: RowStyle = {};\n    private readonly printLayout: boolean;\n    private readonly suppressRowTransform: boolean;\n\n    private updateColumnListsPending = false;\n\n    private rowId: string | null = null;\n    private tabIndex: number | undefined;\n    private businessKeySanitised: string | null = null;\n    private businessKeyForNodeFunc: ((node: IRowNode<any>) => string) | undefined;\n\n    constructor(\n        rowNode: RowNode,\n        beans: BeanCollection,\n        animateIn: boolean,\n        useAnimationFrameForCreate: boolean,\n        printLayout: boolean\n    ) {\n        super();\n        this.beans = beans;\n        this.gos = beans.gos;\n        this.rowNode = rowNode;\n        this.paginationPage = beans.paginationService?.getCurrentPage() ?? 0;\n        this.useAnimationFrameForCreate = useAnimationFrameForCreate;\n        this.printLayout = printLayout;\n        this.suppressRowTransform = this.gos.get('suppressRowTransform');\n\n        this.instanceId = (rowNode.id + '-' + instanceIdSequence++) as RowCtrlInstanceId;\n        this.rowId = _escapeString(rowNode.id);\n\n        this.initRowBusinessKey();\n\n        this.rowFocused = beans.focusService.isRowFocused(this.rowNode.rowIndex!, this.rowNode.rowPinned);\n        this.rowLevel = beans.rowCssClassCalculator.calculateRowLevel(this.rowNode);\n\n        this.setRowType();\n        this.setAnimateFlags(animateIn);\n        this.rowStyles = this.processStylesFromGridOptions();\n\n        // calls to `isFullWidth()` only work after `setRowType` has been called.\n        if (this.isFullWidth() && !this.gos.get('suppressCellFocus')) {\n            this.tabIndex = -1;\n        }\n\n        this.addListeners();\n    }\n\n    private initRowBusinessKey(): void {\n        this.businessKeyForNodeFunc = this.gos.get('getBusinessKeyForNode');\n        this.updateRowBusinessKey();\n    }\n\n    private updateRowBusinessKey(): void {\n        if (typeof this.businessKeyForNodeFunc !== 'function') {\n            return;\n        }\n        const businessKey = this.businessKeyForNodeFunc(this.rowNode);\n        this.businessKeySanitised = _escapeString(businessKey!);\n    }\n\n    public getRowId() {\n        return this.rowId;\n    }\n    public getRowStyles() {\n        return this.rowStyles;\n    }\n    public getTabIndex() {\n        return this.tabIndex;\n    }\n\n    private isSticky(): boolean {\n        return this.rowNode.sticky;\n    }\n\n    public getInstanceId(): RowCtrlInstanceId {\n        return this.instanceId;\n    }\n\n    private updateGui(containerType: RowContainerType, gui: RowGui | undefined) {\n        if (containerType === 'left') {\n            this.leftGui = gui;\n        } else if (containerType === 'right') {\n            this.rightGui = gui;\n        } else if (containerType === 'fullWidth') {\n            this.fullWidthGui = gui;\n        } else {\n            this.centerGui = gui;\n        }\n    }\n\n    public setComp(rowComp: IRowComp, element: HTMLElement, containerType: RowContainerType): void {\n        const gui: RowGui = { rowComp, element, containerType };\n        this.allRowGuis.push(gui);\n        this.updateGui(containerType, gui);\n\n        this.initialiseRowComp(gui);\n\n        // pinned rows render before the main grid body in the SSRM, only fire the event after the main body has rendered.\n        if (this.rowType !== 'FullWidthLoading' && !this.rowNode.rowPinned) {\n            // this is fired within setComp as we know that the component renderer is now trying to render.\n            // linked with the fact the function implementation queues behind requestAnimationFrame should allow\n            // us to be certain that all rendering is done by the time the event fires.\n            this.beans.rowRenderer.dispatchFirstDataRenderedEvent();\n        }\n    }\n\n    public unsetComp(containerType: RowContainerType): void {\n        this.allRowGuis = this.allRowGuis.filter((rowGui) => rowGui.containerType !== containerType);\n        this.updateGui(containerType, undefined);\n    }\n\n    public isCacheable(): boolean {\n        return this.rowType === 'FullWidthDetail' && this.gos.get('keepDetailRows');\n    }\n\n    public setCached(cached: boolean): void {\n        const displayValue = cached ? 'none' : '';\n        this.allRowGuis.forEach((rg) => (rg.element.style.display = displayValue));\n    }\n\n    private initialiseRowComp(gui: RowGui): void {\n        const gos = this.gos;\n\n        this.listenOnDomOrder(gui);\n        if (this.beans.columnModel.wasAutoRowHeightEverActive()) {\n            this.rowNode.checkAutoHeights();\n        }\n        this.onRowHeightChanged(gui);\n        this.updateRowIndexes(gui);\n        this.setFocusedClasses(gui);\n        this.setStylesFromGridOptions(false, gui); // no need to calculate styles already set in constructor\n\n        if (gos.isRowSelection() && this.rowNode.selectable) {\n            this.onRowSelected(gui);\n        }\n\n        this.updateColumnLists(!this.useAnimationFrameForCreate);\n\n        const comp = gui.rowComp;\n\n        const initialRowClasses = this.getInitialRowClasses(gui.containerType);\n        initialRowClasses.forEach((name) => comp.addOrRemoveCssClass(name, true));\n\n        this.executeSlideAndFadeAnimations(gui);\n\n        if (this.rowNode.group) {\n            _setAriaExpanded(gui.element, this.rowNode.expanded == true);\n        }\n\n        this.setRowCompRowId(comp);\n        this.setRowCompRowBusinessKey(comp);\n\n        // DOM DATA\n        gos.setDomData(gui.element, RowCtrl.DOM_DATA_KEY_ROW_CTRL, this);\n        this.addDestroyFunc(() => gos.setDomData(gui.element, RowCtrl.DOM_DATA_KEY_ROW_CTRL, null));\n\n        // adding hover functionality adds listener to this row, so we\n        // do it lazily in an animation frame\n        if (this.useAnimationFrameForCreate) {\n            this.beans.animationFrameService.createTask(\n                this.addHoverFunctionality.bind(this, gui.element),\n                this.rowNode.rowIndex!,\n                'createTasksP2'\n            );\n        } else {\n            this.addHoverFunctionality(gui.element);\n        }\n\n        if (this.isFullWidth()) {\n            this.setupFullWidth(gui);\n        }\n\n        if (gos.get('rowDragEntireRow')) {\n            this.addRowDraggerToRow(gui);\n        }\n\n        if (this.useAnimationFrameForCreate) {\n            // the height animation we only want active after the row is alive for 1 second.\n            // this stops the row animation working when rows are initially created. otherwise\n            // auto-height rows get inserted into the dom and resized immediately, which gives\n            // very bad UX (eg 10 rows get inserted, then all 10 expand, look particularly bad\n            // when scrolling). so this makes sure when rows are shown for the first time, they\n            // are resized immediately without animation.\n            this.beans.animationFrameService.addDestroyTask(() => {\n                if (!this.isAlive()) {\n                    return;\n                }\n                gui.rowComp.addOrRemoveCssClass('ag-after-created', true);\n            });\n        }\n\n        this.executeProcessRowPostCreateFunc();\n    }\n\n    private setRowCompRowBusinessKey(comp: IRowComp): void {\n        if (this.businessKeySanitised == null) {\n            return;\n        }\n        comp.setRowBusinessKey(this.businessKeySanitised);\n    }\n    public getBusinessKey(): string | null {\n        return this.businessKeySanitised;\n    }\n\n    private setRowCompRowId(comp: IRowComp) {\n        this.rowId = _escapeString(this.rowNode.id);\n        if (this.rowId == null) {\n            return;\n        }\n\n        comp.setRowId(this.rowId);\n    }\n\n    private executeSlideAndFadeAnimations(gui: RowGui): void {\n        const { containerType } = gui;\n\n        const shouldSlide = this.slideInAnimation[containerType];\n        if (shouldSlide) {\n            _executeNextVMTurn(() => {\n                this.onTopChanged();\n            });\n            this.slideInAnimation[containerType] = false;\n        }\n\n        const shouldFade = this.fadeInAnimation[containerType];\n        if (shouldFade) {\n            _executeNextVMTurn(() => {\n                gui.rowComp.addOrRemoveCssClass('ag-opacity-zero', false);\n            });\n            this.fadeInAnimation[containerType] = false;\n        }\n    }\n\n    private addRowDraggerToRow(gui: RowGui) {\n        if (this.gos.get('enableRangeSelection')) {\n            _warnOnce(\n                \"Setting `rowDragEntireRow: true` in the gridOptions doesn't work with `enableRangeSelection: true`\"\n            );\n            return;\n        }\n        const translate = this.beans.localeService.getLocaleTextFunc();\n        const rowDragComp = new RowDragComp(\n            () => `1 ${translate('rowDragRow', 'row')}`,\n            this.rowNode,\n            undefined,\n            gui.element,\n            undefined,\n            true\n        );\n        const rowDragBean = this.createBean(rowDragComp, this.beans.context);\n        this.rowDragComps.push(rowDragBean);\n    }\n\n    private setupFullWidth(gui: RowGui): void {\n        const pinned = this.getPinnedForContainer(gui.containerType);\n\n        if (this.rowType == 'FullWidthDetail') {\n            if (\n                !ModuleRegistry.__assertRegistered(\n                    ModuleNames.MasterDetailModule,\n                    \"cell renderer 'agDetailCellRenderer' (for master detail)\",\n                    this.beans.context.getGridId()\n                )\n            ) {\n                return;\n            }\n        }\n\n        const compDetails = this.createFullWidthCompDetails(gui.element, pinned);\n        gui.rowComp.showFullWidth(compDetails);\n    }\n\n    public isPrintLayout(): boolean {\n        return this.printLayout;\n    }\n\n    public getFullWidthCellRenderers(): (ICellRenderer<any> | null | undefined)[] {\n        if (this.gos.get('embedFullWidthRows')) {\n            return this.allRowGuis.map((gui) => gui?.rowComp?.getFullWidthCellRenderer());\n        }\n        return [this.fullWidthGui?.rowComp?.getFullWidthCellRenderer()];\n    }\n\n    // use by autoWidthCalculator, as it clones the elements\n    public getCellElement(column: AgColumn): HTMLElement | null {\n        const cellCtrl = this.getCellCtrl(column);\n        return cellCtrl ? cellCtrl.getGui() : null;\n    }\n\n    private executeProcessRowPostCreateFunc(): void {\n        const func = this.gos.getCallback('processRowPostCreate');\n        if (!func || !this.areAllContainersReady()) {\n            return;\n        }\n\n        const params: WithoutGridCommon<ProcessRowParams> = {\n            // areAllContainersReady asserts that centerGui is not null\n            eRow: this.centerGui!.element,\n            ePinnedLeftRow: this.leftGui ? this.leftGui.element : undefined,\n            ePinnedRightRow: this.rightGui ? this.rightGui.element : undefined,\n            node: this.rowNode,\n            rowIndex: this.rowNode.rowIndex!,\n            addRenderedRowListener: this.addEventListener.bind(this),\n        };\n        func(params);\n    }\n\n    private areAllContainersReady(): boolean {\n        const isLeftReady = !!this.leftGui || !this.beans.visibleColsService.isPinningLeft();\n        const isCenterReady = !!this.centerGui;\n        const isRightReady = !!this.rightGui || !this.beans.visibleColsService.isPinningRight();\n\n        return isLeftReady && isCenterReady && isRightReady;\n    }\n\n    private setRowType(): void {\n        const isStub = this.rowNode.stub && !this.gos.get('suppressServerSideFullWidthLoadingRow');\n        const isFullWidthCell = this.rowNode.isFullWidthCell();\n        const isDetailCell = this.gos.get('masterDetail') && this.rowNode.detail;\n        const pivotMode = this.beans.columnModel.isPivotMode();\n        // we only use full width for groups, not footers. it wouldn't make sense to include footers if not looking\n        // for totals. if users complain about this, then we should introduce a new property 'footerUseEntireRow'\n        // so each can be set independently (as a customer complained about footers getting full width, hence\n        // introducing this logic)\n        const isGroupRow = !!this.rowNode.group && !this.rowNode.footer;\n        const isFullWidthGroup = isGroupRow && this.gos.isGroupUseEntireRow(pivotMode);\n\n        if (isStub) {\n            this.rowType = 'FullWidthLoading';\n        } else if (isDetailCell) {\n            this.rowType = 'FullWidthDetail';\n        } else if (isFullWidthCell) {\n            this.rowType = 'FullWidth';\n        } else if (isFullWidthGroup) {\n            this.rowType = 'FullWidthGroup';\n        } else {\n            this.rowType = 'Normal';\n        }\n    }\n\n    private updateColumnLists(suppressAnimationFrame = false, useFlushSync = false): void {\n        if (this.isFullWidth()) {\n            return;\n        }\n\n        const noAnimation = suppressAnimationFrame || this.gos.get('suppressAnimationFrame') || this.printLayout;\n\n        if (noAnimation) {\n            this.updateColumnListsImpl(useFlushSync);\n            return;\n        }\n\n        if (this.updateColumnListsPending) {\n            return;\n        }\n        this.beans.animationFrameService.createTask(\n            () => {\n                if (!this.active) {\n                    return;\n                }\n                this.updateColumnListsImpl(true);\n            },\n            this.rowNode.rowIndex!,\n            'createTasksP1'\n        );\n        this.updateColumnListsPending = true;\n    }\n\n    private createCellCtrls(\n        prev: CellCtrlListAndMap,\n        cols: AgColumn[],\n        pinned: ColumnPinnedType = null\n    ): CellCtrlListAndMap {\n        const res: CellCtrlListAndMap = {\n            list: [],\n            map: {},\n        };\n\n        const addCell = (colInstanceId: ColumnInstanceId, cellCtrl: CellCtrl) => {\n            res.list.push(cellCtrl);\n            res.map[colInstanceId] = cellCtrl;\n        };\n\n        cols.forEach((col) => {\n            // we use instanceId's rather than colId as it's possible there is a Column with same Id,\n            // but it's referring to a different column instance. Happens a lot with pivot, as pivot col id's are\n            // reused eg pivot_0, pivot_1 etc\n            const colInstanceId = col.getInstanceId();\n            let cellCtrl = prev.map[colInstanceId];\n            if (!cellCtrl) {\n                cellCtrl = new CellCtrl(col, this.rowNode, this.beans, this);\n            }\n            addCell(colInstanceId, cellCtrl);\n        });\n\n        prev.list.forEach((prevCellCtrl) => {\n            const cellInResult = res.map[prevCellCtrl.getColumn().getInstanceId()] != null;\n            if (cellInResult) {\n                return;\n            }\n\n            const keepCell = !this.isCellEligibleToBeRemoved(prevCellCtrl, pinned);\n            if (keepCell) {\n                addCell(prevCellCtrl.getColumn().getInstanceId(), prevCellCtrl);\n                return;\n            }\n\n            prevCellCtrl.destroy();\n        });\n\n        return res;\n    }\n\n    private updateColumnListsImpl(useFlushSync: boolean): void {\n        this.updateColumnListsPending = false;\n        this.createAllCellCtrls();\n\n        this.setCellCtrls(useFlushSync);\n    }\n\n    private setCellCtrls(useFlushSync: boolean) {\n        this.allRowGuis.forEach((item) => {\n            const cellControls = this.getCellCtrlsForContainer(item.containerType);\n            item.rowComp.setCellCtrls(cellControls, useFlushSync);\n        });\n    }\n\n    private getCellCtrlsForContainer(containerType: RowContainerType) {\n        switch (containerType) {\n            case 'left':\n                return this.leftCellCtrls.list;\n            case 'right':\n                return this.rightCellCtrls.list;\n            case 'fullWidth':\n                return [];\n            case 'center':\n                return this.centerCellCtrls.list;\n        }\n    }\n\n    private createAllCellCtrls() {\n        const columnViewportService = this.beans.columnViewportService;\n        const presentedColsService = this.beans.visibleColsService;\n        if (this.printLayout) {\n            this.centerCellCtrls = this.createCellCtrls(this.centerCellCtrls, presentedColsService.getAllCols());\n            this.leftCellCtrls = { list: [], map: {} };\n            this.rightCellCtrls = { list: [], map: {} };\n        } else {\n            const centerCols = columnViewportService.getColsWithinViewport(this.rowNode);\n            this.centerCellCtrls = this.createCellCtrls(this.centerCellCtrls, centerCols);\n\n            const leftCols = presentedColsService.getLeftColsForRow(this.rowNode);\n            this.leftCellCtrls = this.createCellCtrls(this.leftCellCtrls, leftCols, 'left');\n\n            const rightCols = presentedColsService.getRightColsForRow(this.rowNode);\n            this.rightCellCtrls = this.createCellCtrls(this.rightCellCtrls, rightCols, 'right');\n        }\n    }\n\n    private isCellEligibleToBeRemoved(cellCtrl: CellCtrl, nextContainerPinned: ColumnPinnedType): boolean {\n        const REMOVE_CELL = true;\n        const KEEP_CELL = false;\n\n        // always remove the cell if it's not rendered or if it's in the wrong pinned location\n        const column = cellCtrl.getColumn();\n        if (column.getPinned() != nextContainerPinned) {\n            return REMOVE_CELL;\n        }\n\n        // we want to try and keep editing and focused cells\n        const editing = cellCtrl.isEditing();\n        const focused = this.beans.focusService.isCellFocused(cellCtrl.getCellPosition());\n\n        const mightWantToKeepCell = editing || focused;\n\n        if (mightWantToKeepCell) {\n            const column = cellCtrl.getColumn();\n            const displayedColumns = this.beans.visibleColsService.getAllCols();\n            const cellStillDisplayed = displayedColumns.indexOf(column as AgColumn) >= 0;\n            return cellStillDisplayed ? KEEP_CELL : REMOVE_CELL;\n        }\n\n        return REMOVE_CELL;\n    }\n\n    public getDomOrder(): boolean {\n        const isEnsureDomOrder = this.gos.get('ensureDomOrder');\n        return isEnsureDomOrder || this.gos.isDomLayout('print');\n    }\n\n    private listenOnDomOrder(gui: RowGui): void {\n        const listener = () => {\n            gui.rowComp.setDomOrder(this.getDomOrder());\n        };\n\n        this.addManagedPropertyListener('domLayout', listener);\n        this.addManagedPropertyListener('ensureDomOrder', listener);\n    }\n\n    private setAnimateFlags(animateIn: boolean): void {\n        if (this.isSticky() || !animateIn) {\n            return;\n        }\n\n        const oldRowTopExists = _exists(this.rowNode.oldRowTop);\n        const pinningLeft = this.beans.visibleColsService.isPinningLeft();\n        const pinningRight = this.beans.visibleColsService.isPinningRight();\n\n        if (oldRowTopExists) {\n            if (this.isFullWidth() && !this.gos.get('embedFullWidthRows')) {\n                this.slideInAnimation.fullWidth = true;\n                return;\n            }\n\n            // if the row had a previous position, we slide it in\n            this.slideInAnimation.center = true;\n            this.slideInAnimation.left = pinningLeft;\n            this.slideInAnimation.right = pinningRight;\n        } else {\n            if (this.isFullWidth() && !this.gos.get('embedFullWidthRows')) {\n                this.fadeInAnimation.fullWidth = true;\n                return;\n            }\n\n            // if the row had no previous position, we fade it in\n            this.fadeInAnimation.center = true;\n            this.fadeInAnimation.left = pinningLeft;\n            this.fadeInAnimation.right = pinningRight;\n        }\n    }\n\n    public isEditing(): boolean {\n        return this.editingRow;\n    }\n\n    public isFullWidth(): boolean {\n        return this.rowType !== 'Normal';\n    }\n\n    public refreshFullWidth(): boolean {\n        // returns 'true' if refresh succeeded\n        const tryRefresh = (gui: RowGui | undefined, pinned: ColumnPinnedType): boolean => {\n            if (!gui) {\n                return true;\n            } // no refresh needed\n\n            return gui.rowComp.refreshFullWidth(() => {\n                const compDetails = this.createFullWidthCompDetails(gui.element, pinned);\n                return compDetails.params;\n            });\n        };\n\n        const fullWidthSuccess = tryRefresh(this.fullWidthGui, null);\n        const centerSuccess = tryRefresh(this.centerGui, null);\n        const leftSuccess = tryRefresh(this.leftGui, 'left');\n        const rightSuccess = tryRefresh(this.rightGui, 'right');\n\n        const allFullWidthRowsRefreshed = fullWidthSuccess && centerSuccess && leftSuccess && rightSuccess;\n\n        return allFullWidthRowsRefreshed;\n    }\n\n    private addListeners(): void {\n        this.addManagedListeners(this.rowNode, {\n            heightChanged: () => this.onRowHeightChanged(),\n            rowSelected: () => this.onRowSelected(),\n            rowIndexChanged: this.onRowIndexChanged.bind(this),\n            topChanged: this.onTopChanged.bind(this),\n            expandedChanged: this.updateExpandedCss.bind(this),\n            hasChildrenChanged: this.updateExpandedCss.bind(this),\n        });\n\n        if (this.rowNode.detail) {\n            // if the master row node has updated data, we also want to try to refresh the detail row\n            this.addManagedListeners(this.rowNode.parent!, { dataChanged: this.onRowNodeDataChanged.bind(this) });\n        }\n\n        this.addManagedListeners(this.rowNode, {\n            dataChanged: this.onRowNodeDataChanged.bind(this),\n            cellChanged: this.postProcessCss.bind(this),\n            rowHighlightChanged: this.onRowNodeHighlightChanged.bind(this),\n            draggingChanged: this.postProcessRowDragging.bind(this),\n            uiLevelChanged: this.onUiLevelChanged.bind(this),\n        });\n\n        this.addManagedListeners(this.beans.eventService, {\n            paginationPixelOffsetChanged: this.onPaginationPixelOffsetChanged.bind(this),\n            heightScaleChanged: this.onTopChanged.bind(this),\n            displayedColumnsChanged: this.onDisplayedColumnsChanged.bind(this),\n            virtualColumnsChanged: this.onVirtualColumnsChanged.bind(this),\n            cellFocused: this.onCellFocusChanged.bind(this),\n            cellFocusCleared: this.onCellFocusChanged.bind(this),\n            paginationChanged: this.onPaginationChanged.bind(this),\n            modelUpdated: this.refreshFirstAndLastRowStyles.bind(this),\n            columnMoved: () => this.updateColumnLists(),\n        });\n\n        this.addDestroyFunc(() => {\n            this.destroyBeans(this.rowDragComps, this.beans.context);\n            if (this.tooltipFeature) {\n                this.tooltipFeature = this.destroyBean(this.tooltipFeature, this.beans.context);\n            }\n        });\n        this.addManagedPropertyListeners(['rowDragEntireRow'], () => {\n            const useRowDragEntireRow = this.gos.get('rowDragEntireRow');\n            if (useRowDragEntireRow) {\n                this.allRowGuis.forEach((gui) => {\n                    this.addRowDraggerToRow(gui);\n                });\n                return;\n            }\n            this.rowDragComps = this.destroyBeans(this.rowDragComps, this.beans.context);\n        });\n\n        this.addListenersForCellComps();\n    }\n\n    private addListenersForCellComps(): void {\n        this.addManagedListeners(this.rowNode, {\n            rowIndexChanged: () => {\n                this.getAllCellCtrls().forEach((cellCtrl) => cellCtrl.onRowIndexChanged());\n            },\n            cellChanged: (event) => {\n                this.getAllCellCtrls().forEach((cellCtrl) => cellCtrl.onCellChanged(event));\n            },\n        });\n    }\n\n    private onRowNodeDataChanged(event: DataChangedEvent): void {\n        // if the row is rendered incorrectly, as the requirements for whether this is a FW row have changed, we force re-render this row.\n        const fullWidthChanged = this.isFullWidth() !== !!this.rowNode.isFullWidthCell();\n        if (fullWidthChanged) {\n            this.beans.rowRenderer.redrawRow(this.rowNode);\n            return;\n        }\n\n        // this bit of logic handles trying to refresh the FW row ctrl, or delegating to removing/recreating it if unsupported.\n        if (this.isFullWidth()) {\n            const refresh = this.refreshFullWidth();\n            if (!refresh) {\n                this.beans.rowRenderer.redrawRow(this.rowNode);\n            }\n            return;\n        }\n\n        // if this is an update, we want to refresh, as this will allow the user to put in a transition\n        // into the cellRenderer refresh method. otherwise this might be completely new data, in which case\n        // we will want to completely replace the cells\n        this.getAllCellCtrls().forEach((cellCtrl) =>\n            cellCtrl.refreshCell({\n                suppressFlash: !event.update,\n                newData: !event.update,\n            })\n        );\n\n        // as data has changed update the dom row id attributes\n        this.allRowGuis.forEach((gui) => {\n            this.setRowCompRowId(gui.rowComp);\n            this.updateRowBusinessKey();\n            this.setRowCompRowBusinessKey(gui.rowComp);\n        });\n\n        // check for selected also, as this could be after lazy loading of the row data, in which case\n        // the id might of just gotten set inside the row and the row selected state may of changed\n        // as a result. this is what happens when selected rows are loaded in virtual pagination.\n        // - niall note - since moving to the stub component, this may no longer be true, as replacing\n        // the stub component now replaces the entire row\n        this.onRowSelected();\n\n        // as data has changed, then the style and class needs to be recomputed\n        this.postProcessCss();\n    }\n\n    private postProcessCss(): void {\n        this.setStylesFromGridOptions(true);\n        this.postProcessClassesFromGridOptions();\n        this.postProcessRowClassRules();\n        this.postProcessRowDragging();\n    }\n\n    private onRowNodeHighlightChanged(): void {\n        const highlighted = this.rowNode.highlighted;\n\n        this.allRowGuis.forEach((gui) => {\n            const aboveOn = highlighted === RowHighlightPosition.Above;\n            const belowOn = highlighted === RowHighlightPosition.Below;\n            gui.rowComp.addOrRemoveCssClass('ag-row-highlight-above', aboveOn);\n            gui.rowComp.addOrRemoveCssClass('ag-row-highlight-below', belowOn);\n        });\n    }\n\n    private postProcessRowDragging(): void {\n        const dragging = this.rowNode.dragging;\n        this.allRowGuis.forEach((gui) => gui.rowComp.addOrRemoveCssClass('ag-row-dragging', dragging));\n    }\n\n    private updateExpandedCss(): void {\n        const expandable = this.rowNode.isExpandable();\n        const expanded = this.rowNode.expanded == true;\n\n        this.allRowGuis.forEach((gui) => {\n            gui.rowComp.addOrRemoveCssClass('ag-row-group', expandable);\n            gui.rowComp.addOrRemoveCssClass('ag-row-group-expanded', expandable && expanded);\n            gui.rowComp.addOrRemoveCssClass('ag-row-group-contracted', expandable && !expanded);\n            _setAriaExpanded(gui.element, expandable && expanded);\n        });\n    }\n\n    private onDisplayedColumnsChanged(): void {\n        // we skip animations for onDisplayedColumnChanged, as otherwise the client could remove columns and\n        // then set data, and any old valueGetter's (ie from cols that were removed) would still get called.\n        this.updateColumnLists(true);\n\n        if (this.beans.columnModel.wasAutoRowHeightEverActive()) {\n            this.rowNode.checkAutoHeights();\n        }\n    }\n\n    private onVirtualColumnsChanged(): void {\n        this.updateColumnLists(false, true);\n    }\n\n    public getRowPosition(): RowPosition {\n        return {\n            rowPinned: _makeNull(this.rowNode.rowPinned),\n            rowIndex: this.rowNode.rowIndex as number,\n        };\n    }\n\n    public onKeyboardNavigate(keyboardEvent: KeyboardEvent) {\n        const currentFullWidthComp = this.allRowGuis.find((c) =>\n            c.element.contains(keyboardEvent.target as HTMLElement)\n        );\n        const currentFullWidthContainer = currentFullWidthComp ? currentFullWidthComp.element : null;\n        const isFullWidthContainerFocused = currentFullWidthContainer === keyboardEvent.target;\n\n        if (!isFullWidthContainerFocused) {\n            return;\n        }\n\n        const node = this.rowNode;\n        const lastFocusedCell = this.beans.focusService.getFocusedCell();\n        const cellPosition: CellPosition = {\n            rowIndex: node.rowIndex!,\n            rowPinned: node.rowPinned,\n            column: (lastFocusedCell && lastFocusedCell.column) as AgColumn,\n        };\n\n        this.beans.navigationService.navigateToNextCell(keyboardEvent, keyboardEvent.key, cellPosition, true);\n        keyboardEvent.preventDefault();\n    }\n\n    public onTabKeyDown(keyboardEvent: KeyboardEvent) {\n        if (keyboardEvent.defaultPrevented || _isStopPropagationForAgGrid(keyboardEvent)) {\n            return;\n        }\n        const currentFullWidthComp = this.allRowGuis.find((c) =>\n            c.element.contains(keyboardEvent.target as HTMLElement)\n        );\n        const currentFullWidthContainer = currentFullWidthComp ? currentFullWidthComp.element : null;\n        const isFullWidthContainerFocused = currentFullWidthContainer === keyboardEvent.target;\n        let nextEl: HTMLElement | null = null;\n\n        if (!isFullWidthContainerFocused) {\n            nextEl = this.beans.focusService.findNextFocusableElement(\n                currentFullWidthContainer!,\n                false,\n                keyboardEvent.shiftKey\n            );\n        }\n\n        if ((this.isFullWidth() && isFullWidthContainerFocused) || !nextEl) {\n            this.beans.navigationService.onTabKeyDown(this, keyboardEvent);\n        }\n    }\n\n    public getFullWidthElement(): HTMLElement | null {\n        if (this.fullWidthGui) {\n            return this.fullWidthGui.element;\n        }\n        return null;\n    }\n\n    public getRowYPosition(): number {\n        const displayedEl = this.allRowGuis.find((el) => _isVisible(el.element))?.element;\n\n        if (displayedEl) {\n            return displayedEl.getBoundingClientRect().top;\n        }\n\n        return 0;\n    }\n\n    public onFullWidthRowFocused(event?: CellFocusedEvent) {\n        const node = this.rowNode;\n        const isFocused = !event\n            ? false\n            : this.isFullWidth() && event.rowIndex === node.rowIndex && event.rowPinned == node.rowPinned;\n\n        const element = this.fullWidthGui ? this.fullWidthGui.element : this.centerGui?.element;\n        if (!element) {\n            return;\n        } // can happen with react ui, comp not yet ready\n\n        element.classList.toggle('ag-full-width-focus', isFocused);\n\n        if (isFocused && event?.forceBrowserFocus) {\n            // we don't scroll normal rows into view when we focus them, so we don't want\n            // to scroll Full Width rows either.\n            element.focus({ preventScroll: true });\n        }\n    }\n\n    public recreateCell(cellCtrl: CellCtrl) {\n        this.centerCellCtrls = this.removeCellCtrl(this.centerCellCtrls, cellCtrl);\n        this.leftCellCtrls = this.removeCellCtrl(this.leftCellCtrls, cellCtrl);\n        this.rightCellCtrls = this.removeCellCtrl(this.rightCellCtrls, cellCtrl);\n        cellCtrl.destroy();\n        this.updateColumnLists();\n    }\n\n    private removeCellCtrl(prev: CellCtrlListAndMap, cellCtrlToRemove: CellCtrl): CellCtrlListAndMap {\n        const res: CellCtrlListAndMap = {\n            list: [],\n            map: {},\n        };\n        prev.list.forEach((cellCtrl) => {\n            if (cellCtrl === cellCtrlToRemove) {\n                return;\n            }\n            res.list.push(cellCtrl);\n            res.map[cellCtrl.getColumn().getInstanceId()] = cellCtrl;\n        });\n        return res;\n    }\n\n    public onMouseEvent(eventName: string, mouseEvent: MouseEvent): void {\n        switch (eventName) {\n            case 'dblclick':\n                this.onRowDblClick(mouseEvent);\n                break;\n            case 'click':\n                this.onRowClick(mouseEvent);\n                break;\n            case 'touchstart':\n            case 'mousedown':\n                this.onRowMouseDown(mouseEvent);\n                break;\n        }\n    }\n\n    public createRowEvent<T extends AgEventType>(type: T, domEvent?: Event): RowEvent<T> {\n        return this.gos.addGridCommonParams({\n            type: type,\n            node: this.rowNode,\n            data: this.rowNode.data,\n            rowIndex: this.rowNode.rowIndex!,\n            rowPinned: this.rowNode.rowPinned,\n            event: domEvent,\n        });\n    }\n\n    private createRowEventWithSource<T extends AgEventType>(type: T, domEvent: Event): RowEvent<T> {\n        const event = this.createRowEvent(type, domEvent);\n        // when first developing this, we included the rowComp in the event.\n        // this seems very weird. so when introducing the event types, i left the 'source'\n        // out of the type, and just include the source in the two places where this event\n        // was fired (rowClicked and rowDoubleClicked). it doesn't make sense for any\n        // users to be using this, as the rowComp isn't an object we expose, so would be\n        // very surprising if a user was using it.\n        (event as any).source = this;\n        return event;\n    }\n\n    private onRowDblClick(mouseEvent: MouseEvent): void {\n        if (_isStopPropagationForAgGrid(mouseEvent)) {\n            return;\n        }\n\n        const agEvent: RowDoubleClickedEvent = this.createRowEventWithSource('rowDoubleClicked', mouseEvent);\n\n        this.beans.eventService.dispatchEvent(agEvent);\n    }\n\n    private onRowMouseDown(mouseEvent: MouseEvent) {\n        this.lastMouseDownOnDragger = _isElementChildOfClass(mouseEvent.target as HTMLElement, 'ag-row-drag', 3);\n\n        if (!this.isFullWidth()) {\n            return;\n        }\n\n        const node = this.rowNode;\n        const presentedColsService = this.beans.visibleColsService;\n\n        if (this.beans.rangeService) {\n            this.beans.rangeService.removeAllCellRanges();\n        }\n\n        const element = this.getFullWidthElement();\n        const target = mouseEvent.target as HTMLElement;\n\n        let forceBrowserFocus = true;\n\n        if (element && element.contains(target as HTMLElement) && _isFocusableFormField(target)) {\n            forceBrowserFocus = false;\n        }\n\n        this.beans.focusService.setFocusedCell({\n            rowIndex: node.rowIndex!,\n            column: presentedColsService.getAllCols()[0],\n            rowPinned: node.rowPinned,\n            forceBrowserFocus,\n        });\n    }\n\n    public onRowClick(mouseEvent: MouseEvent) {\n        const stop = _isStopPropagationForAgGrid(mouseEvent) || this.lastMouseDownOnDragger;\n\n        if (stop) {\n            return;\n        }\n\n        const agEvent: RowClickedEvent = this.createRowEventWithSource('rowClicked', mouseEvent);\n\n        this.beans.eventService.dispatchEvent(agEvent);\n\n        // ctrlKey for windows, metaKey for Apple\n        const isMultiKey = mouseEvent.ctrlKey || mouseEvent.metaKey;\n        const isShiftKey = mouseEvent.shiftKey;\n\n        // we do not allow selecting the group by clicking, when groupSelectChildren, as the logic to\n        // handle this is broken. to observe, change the logic below and allow groups to be selected.\n        // you will see the group gets selected, then all children get selected, then the grid unselects\n        // the children (as the default behaviour when clicking is to unselect other rows) which results\n        // in the group getting unselected (as all children are unselected). the correct thing would be\n        // to change this, so that children of the selected group are not then subsequently un-selected.\n        const groupSelectsChildren = this.gos.get('groupSelectsChildren');\n\n        if (\n            // we do not allow selecting groups by clicking (as the click here expands the group), or if it's a detail row,\n            // so return if it's a group row\n            (groupSelectsChildren && this.rowNode.group) ||\n            this.isRowSelectionBlocked() ||\n            // if click selection suppressed, do nothing\n            this.gos.get('suppressRowClickSelection')\n        ) {\n            return;\n        }\n\n        const multiSelectOnClick = this.gos.get('rowMultiSelectWithClick');\n        const rowDeselectionWithCtrl = !this.gos.get('suppressRowDeselection');\n        const source = 'rowClicked';\n\n        if (this.rowNode.isSelected()) {\n            if (multiSelectOnClick) {\n                this.rowNode.setSelectedParams({ newValue: false, event: mouseEvent, source });\n            } else if (isMultiKey) {\n                if (rowDeselectionWithCtrl) {\n                    this.rowNode.setSelectedParams({ newValue: false, event: mouseEvent, source });\n                }\n            } else {\n                // selected with no multi key, must make sure anything else is unselected\n                this.rowNode.setSelectedParams({\n                    newValue: true,\n                    clearSelection: !isShiftKey,\n                    rangeSelect: isShiftKey,\n                    event: mouseEvent,\n                    source,\n                });\n            }\n        } else {\n            const clearSelection = multiSelectOnClick ? false : !isMultiKey;\n            this.rowNode.setSelectedParams({\n                newValue: true,\n                clearSelection: clearSelection,\n                rangeSelect: isShiftKey,\n                event: mouseEvent,\n                source,\n            });\n        }\n    }\n\n    public isRowSelectionBlocked(): boolean {\n        return !this.rowNode.selectable || !!this.rowNode.rowPinned || !this.gos.isRowSelection();\n    }\n\n    public setupDetailRowAutoHeight(eDetailGui: HTMLElement): void {\n        if (this.rowType !== 'FullWidthDetail') {\n            return;\n        }\n\n        if (!this.gos.get('detailRowAutoHeight')) {\n            return;\n        }\n\n        const checkRowSizeFunc = () => {\n            const clientHeight = eDetailGui.clientHeight;\n\n            // if the UI is not ready, the height can be 0, which we ignore, as otherwise a flicker will occur\n            // as UI goes from the default height, to 0, then to the real height as UI becomes ready. this means\n            // it's not possible for have 0 as auto-height, however this is an improbable use case, as even an\n            // empty detail grid would still have some styling around it giving at least a few pixels.\n            if (clientHeight != null && clientHeight > 0) {\n                // we do the update in a timeout, to make sure we are not calling from inside the grid\n                // doing another update\n                const updateRowHeightFunc = () => {\n                    this.rowNode.setRowHeight(clientHeight);\n                    if (this.beans.rowModel.getType() === 'clientSide') {\n                        (this.beans.rowModel as IClientSideRowModel).onRowHeightChanged();\n                    } else if (this.beans.rowModel.getType() === 'serverSide') {\n                        (this.beans.rowModel as IServerSideRowModel).onRowHeightChanged();\n                    }\n                };\n                window.setTimeout(updateRowHeightFunc, 0);\n            }\n        };\n\n        const resizeObserverDestroyFunc = this.beans.resizeObserverService.observeResize(eDetailGui, checkRowSizeFunc);\n\n        this.addDestroyFunc(resizeObserverDestroyFunc);\n\n        checkRowSizeFunc();\n    }\n\n    private createFullWidthCompDetails(eRow: HTMLElement, pinned: ColumnPinnedType): UserCompDetails {\n        const { gos, rowNode } = this;\n        const params = gos.addGridCommonParams({\n            fullWidth: true,\n            data: rowNode.data,\n            node: rowNode,\n            value: rowNode.key,\n            valueFormatted: rowNode.key,\n            // these need to be taken out, as part of 'afterAttached' now\n            eGridCell: eRow,\n            eParentOfValue: eRow,\n            pinned: pinned,\n            addRenderedRowListener: this.addEventListener.bind(this),\n            registerRowDragger: (rowDraggerElement, dragStartPixels, value, suppressVisibilityChange) =>\n                this.addFullWidthRowDragging(rowDraggerElement, dragStartPixels, value, suppressVisibilityChange),\n            setTooltip: (value, shouldDisplayTooltip) => this.refreshRowTooltip(value, shouldDisplayTooltip),\n        } as WithoutGridCommon<ICellRendererParams>);\n\n        const compFactory = this.beans.userComponentFactory;\n        switch (this.rowType) {\n            case 'FullWidthDetail':\n                return compFactory.getFullWidthDetailCellRendererDetails(params);\n            case 'FullWidthGroup':\n                return compFactory.getFullWidthGroupCellRendererDetails(params);\n            case 'FullWidthLoading':\n                return compFactory.getFullWidthLoadingCellRendererDetails(params);\n            default:\n                return compFactory.getFullWidthCellRendererDetails(params);\n        }\n    }\n\n    private refreshRowTooltip(value: string, shouldDisplayTooltip?: () => boolean) {\n        if (!this.fullWidthGui) {\n            return;\n        }\n\n        const tooltipParams: ITooltipFeatureCtrl = {\n            getGui: () => this.fullWidthGui!.element,\n            getTooltipValue: () => value,\n            getLocation: () => 'fullWidthRow',\n            shouldDisplayTooltip,\n        };\n\n        if (this.tooltipFeature) {\n            this.destroyBean(this.tooltipFeature, this.beans.context);\n        }\n\n        this.tooltipFeature = this.createBean(new TooltipFeature(tooltipParams, this.beans));\n    }\n\n    private addFullWidthRowDragging(\n        rowDraggerElement?: HTMLElement,\n        dragStartPixels?: number,\n        value: string = '',\n        suppressVisibilityChange?: boolean\n    ): void {\n        if (!this.isFullWidth()) {\n            return;\n        }\n\n        const rowDragComp = new RowDragComp(\n            () => value,\n            this.rowNode,\n            undefined,\n            rowDraggerElement,\n            dragStartPixels,\n            suppressVisibilityChange\n        );\n        this.createBean(rowDragComp, this.beans.context);\n\n        this.addDestroyFunc(() => {\n            this.destroyBean(rowDragComp, this.beans.context);\n        });\n    }\n\n    private onUiLevelChanged(): void {\n        const newLevel = this.beans.rowCssClassCalculator.calculateRowLevel(this.rowNode);\n        if (this.rowLevel != newLevel) {\n            const classToAdd = 'ag-row-level-' + newLevel;\n            const classToRemove = 'ag-row-level-' + this.rowLevel;\n            this.allRowGuis.forEach((gui) => {\n                gui.rowComp.addOrRemoveCssClass(classToAdd, true);\n                gui.rowComp.addOrRemoveCssClass(classToRemove, false);\n            });\n        }\n        this.rowLevel = newLevel;\n    }\n\n    private isFirstRowOnPage(): boolean {\n        return this.rowNode.rowIndex === this.beans.pageBoundsService.getFirstRow();\n    }\n\n    private isLastRowOnPage(): boolean {\n        return this.rowNode.rowIndex === this.beans.pageBoundsService.getLastRow();\n    }\n\n    private refreshFirstAndLastRowStyles(): void {\n        const newFirst = this.isFirstRowOnPage();\n        const newLast = this.isLastRowOnPage();\n\n        if (this.firstRowOnPage !== newFirst) {\n            this.firstRowOnPage = newFirst;\n            this.allRowGuis.forEach((gui) => gui.rowComp.addOrRemoveCssClass('ag-row-first', newFirst));\n        }\n        if (this.lastRowOnPage !== newLast) {\n            this.lastRowOnPage = newLast;\n            this.allRowGuis.forEach((gui) => gui.rowComp.addOrRemoveCssClass('ag-row-last', newLast));\n        }\n    }\n\n    public stopEditing(cancel = false): void {\n        // if we are already stopping row edit, there is\n        // no need to start this process again.\n        if (this.stoppingRowEdit) {\n            return;\n        }\n\n        this.beans.rowEditService?.stopEditing(this, cancel);\n    }\n\n    public setInlineEditingCss(editing: boolean): void {\n        this.allRowGuis.forEach((gui) => {\n            gui.rowComp.addOrRemoveCssClass('ag-row-inline-editing', editing);\n            gui.rowComp.addOrRemoveCssClass('ag-row-not-inline-editing', !editing);\n        });\n    }\n\n    public setEditingRow(value: boolean): void {\n        this.editingRow = value;\n    }\n\n    public startRowEditing(\n        key: string | null = null,\n        sourceRenderedCell: CellCtrl | null = null,\n        event: KeyboardEvent | null = null\n    ): void {\n        // don't do it if already editing\n        if (this.editingRow) {\n            return;\n        }\n\n        this.beans.rowEditService?.startEditing(this, key, sourceRenderedCell, event);\n    }\n\n    public getAllCellCtrls(): CellCtrl[] {\n        if (this.leftCellCtrls.list.length === 0 && this.rightCellCtrls.list.length === 0) {\n            return this.centerCellCtrls.list;\n        }\n        const res = [...this.centerCellCtrls.list, ...this.leftCellCtrls.list, ...this.rightCellCtrls.list];\n        return res;\n    }\n\n    private postProcessClassesFromGridOptions(): void {\n        const cssClasses = this.beans.rowCssClassCalculator.processClassesFromGridOptions(this.rowNode);\n        if (!cssClasses || !cssClasses.length) {\n            return;\n        }\n\n        cssClasses.forEach((classStr) => {\n            this.allRowGuis.forEach((c) => c.rowComp.addOrRemoveCssClass(classStr, true));\n        });\n    }\n\n    private postProcessRowClassRules(): void {\n        this.beans.rowCssClassCalculator.processRowClassRules(\n            this.rowNode,\n            (className: string) => {\n                this.allRowGuis.forEach((gui) => gui.rowComp.addOrRemoveCssClass(className, true));\n            },\n            (className: string) => {\n                this.allRowGuis.forEach((gui) => gui.rowComp.addOrRemoveCssClass(className, false));\n            }\n        );\n    }\n\n    private setStylesFromGridOptions(updateStyles: boolean, gui?: RowGui): void {\n        if (updateStyles) {\n            this.rowStyles = this.processStylesFromGridOptions();\n        }\n        this.forEachGui(gui, (gui) => gui.rowComp.setUserStyles(this.rowStyles));\n    }\n\n    private getPinnedForContainer(rowContainerType: RowContainerType): ColumnPinnedType {\n        if (rowContainerType === 'left' || rowContainerType === 'right') {\n            return rowContainerType;\n        }\n        return null;\n    }\n\n    private getInitialRowClasses(rowContainerType: RowContainerType): string[] {\n        const pinned = this.getPinnedForContainer(rowContainerType);\n\n        const params: RowCssClassCalculatorParams = {\n            rowNode: this.rowNode,\n            rowFocused: this.rowFocused,\n            fadeRowIn: this.fadeInAnimation[rowContainerType],\n            rowIsEven: this.rowNode.rowIndex! % 2 === 0,\n            rowLevel: this.rowLevel,\n            fullWidthRow: this.isFullWidth(),\n            firstRowOnPage: this.isFirstRowOnPage(),\n            lastRowOnPage: this.isLastRowOnPage(),\n            printLayout: this.printLayout,\n            expandable: this.rowNode.isExpandable(),\n            pinned: pinned,\n        };\n        return this.beans.rowCssClassCalculator.getInitialRowClasses(params);\n    }\n\n    public processStylesFromGridOptions(): RowStyle | undefined {\n        // part 1 - rowStyle\n        const rowStyle = this.gos.get('rowStyle');\n\n        if (rowStyle && typeof rowStyle === 'function') {\n            _warnOnce('rowStyle should be an object of key/value styles, not be a function, use getRowStyle() instead');\n            return;\n        }\n\n        // part 1 - rowStyleFunc\n        const rowStyleFunc = this.gos.getCallback('getRowStyle');\n        let rowStyleFuncResult: any;\n\n        if (rowStyleFunc) {\n            const params: WithoutGridCommon<RowClassParams> = {\n                data: this.rowNode.data,\n                node: this.rowNode,\n                rowIndex: this.rowNode.rowIndex!,\n            };\n            rowStyleFuncResult = rowStyleFunc(params);\n        }\n        if (rowStyleFuncResult || rowStyle) {\n            return Object.assign({}, rowStyle, rowStyleFuncResult);\n        }\n        // Return constant reference for React\n        return this.emptyStyle;\n    }\n\n    private onRowSelected(gui?: RowGui): void {\n        // Treat undefined as false, if we pass undefined down it gets treated as toggle class, rather than explicitly\n        // setting the required value\n        const selected = !!this.rowNode.isSelected();\n        this.forEachGui(gui, (gui) => {\n            gui.rowComp.addOrRemoveCssClass('ag-row-selected', selected);\n            _setAriaSelected(gui.element, selected);\n\n            const hasFocus = gui.element.contains(this.gos.getActiveDomElement());\n            if (hasFocus && (gui === this.centerGui || gui === this.fullWidthGui)) {\n                this.announceDescription();\n            }\n        });\n    }\n\n    public announceDescription(): void {\n        if (this.isRowSelectionBlocked()) {\n            return;\n        }\n\n        const selected = this.rowNode.isSelected()!;\n        if (selected && this.gos.get('suppressRowDeselection')) {\n            return;\n        }\n\n        const translate = this.beans.localeService.getLocaleTextFunc();\n        const label = translate(\n            selected ? 'ariaRowDeselect' : 'ariaRowSelect',\n            `Press SPACE to ${selected ? 'deselect' : 'select'} this row.`\n        );\n\n        this.beans.ariaAnnouncementService.announceValue(label);\n    }\n\n    public addHoverFunctionality(eRow: HTMLElement): void {\n        // because we use animation frames to do this, it's possible the row no longer exists\n        // by the time we get to add it\n        if (!this.active) {\n            return;\n        }\n\n        // because mouseenter and mouseleave do not propagate, we cannot listen on the gridPanel\n        // like we do for all the other mouse events.\n\n        // because of the pinning, we cannot simply add / remove the class based on the eRow. we\n        // have to check all eRow's (body & pinned). so the trick is if any of the rows gets a\n        // mouse hover, it sets such in the rowNode, and then all three reflect the change as\n        // all are listening for event on the row node.\n\n        const { rowNode, beans, gos } = this;\n        // step 1 - add listener, to set flag on row node\n        this.addManagedListeners(eRow, {\n            mouseenter: () => rowNode.onMouseEnter(),\n            mouseleave: () => rowNode.onMouseLeave(),\n        });\n\n        // step 2 - listen for changes on row node (which any eRow can trigger)\n        this.addManagedListeners(rowNode, {\n            mouseEnter: () => {\n                // if hover turned off, we don't add the class. we do this here so that if the application\n                // toggles this property mid way, we remove the hover form the last row, but we stop\n                // adding hovers from that point onwards. Also, do not highlight while dragging elements around.\n                if (!beans.dragService.isDragging() && !gos.get('suppressRowHoverHighlight')) {\n                    eRow.classList.add('ag-row-hover');\n                    rowNode.setHovered(true);\n                }\n            },\n            mouseLeave: () => {\n                eRow.classList.remove('ag-row-hover');\n                rowNode.setHovered(false);\n            },\n        });\n    }\n\n    // for animation, we don't want to animate entry or exit to a very far away pixel,\n    // otherwise the row would move so fast, it would appear to disappear. so this method\n    // moves the row closer to the viewport if it is far away, so the row slide in / out\n    // at a speed the user can see.\n    private roundRowTopToBounds(rowTop: number): number {\n        const range = this.beans.ctrlsService.getGridBodyCtrl().getScrollFeature().getApproximateVScollPosition();\n        const minPixel = this.applyPaginationOffset(range.top, true) - 100;\n        const maxPixel = this.applyPaginationOffset(range.bottom, true) + 100;\n\n        return Math.min(Math.max(minPixel, rowTop), maxPixel);\n    }\n\n    protected override getFrameworkOverrides(): IFrameworkOverrides {\n        return this.beans.frameworkOverrides;\n    }\n\n    public forEachGui(gui: RowGui | undefined, callback: (gui: RowGui) => void): void {\n        if (gui) {\n            callback(gui);\n        } else {\n            this.allRowGuis.forEach(callback);\n        }\n    }\n\n    private onRowHeightChanged(gui?: RowGui): void {\n        // check for exists first - if the user is resetting the row height, then\n        // it will be null (or undefined) momentarily until the next time the flatten\n        // stage is called where the row will then update again with a new height\n        if (this.rowNode.rowHeight == null) {\n            return;\n        }\n\n        const rowHeight = this.rowNode.rowHeight;\n\n        const defaultRowHeight = this.beans.environment.getDefaultRowHeight();\n        const isHeightFromFunc = this.gos.isGetRowHeightFunction();\n        const heightFromFunc = isHeightFromFunc ? this.gos.getRowHeightForNode(this.rowNode).height : undefined;\n        const lineHeight = heightFromFunc ? `${Math.min(defaultRowHeight, heightFromFunc) - 2}px` : undefined;\n\n        this.forEachGui(gui, (gui) => {\n            gui.element.style.height = `${rowHeight}px`;\n\n            // If the row height is coming from a function, this means some rows can\n            // be smaller than the theme had intended. so we set --ag-line-height on\n            // the row, which is picked up by the theme CSS and is used in a calc\n            // for the CSS line-height property, which makes sure the line-height is\n            // not bigger than the row height, otherwise the row text would not fit.\n            // We do not use rowNode.rowHeight here, as this could be the result of autoHeight,\n            // and we found using the autoHeight result causes a loop, where changing the\n            // line-height them impacts the cell height, resulting in a new autoHeight,\n            // resulting in a new line-height and so on loop.\n            // const heightFromFunc = this.gos.getRowHeightForNode(this.rowNode).height;\n            if (lineHeight) {\n                gui.element.style.setProperty('--ag-line-height', lineHeight);\n            }\n        });\n    }\n\n    public override addEventListener<T extends RowCtrlEvent>(eventType: T, listener: IEventListener<T>): void {\n        super.addEventListener(eventType, listener);\n    }\n\n    public override removeEventListener<T extends RowCtrlEvent>(eventType: T, listener: IEventListener<T>): void {\n        super.removeEventListener(eventType, listener);\n    }\n\n    // note - this is NOT called by context, as we don't wire / unwire the CellComp for performance reasons.\n    public destroyFirstPass(suppressAnimation: boolean = false): void {\n        this.active = false;\n\n        // why do we have this method? shouldn't everything below be added as a destroy func beside\n        // the corresponding create logic?\n\n        if (!suppressAnimation && this.gos.isAnimateRows() && !this.isSticky()) {\n            const rowStillVisibleJustNotInViewport = this.rowNode.rowTop != null;\n            if (rowStillVisibleJustNotInViewport) {\n                // if the row is not rendered, but in viewport, it means it has moved,\n                // so we animate the row out. if the new location is very far away,\n                // the animation will be so fast the row will look like it's just disappeared,\n                // so instead we animate to a position just outside the viewport.\n                const rowTop = this.roundRowTopToBounds(this.rowNode.rowTop!);\n                this.setRowTop(rowTop);\n            } else {\n                this.allRowGuis.forEach((gui) => gui.rowComp.addOrRemoveCssClass('ag-opacity-zero', true));\n            }\n        }\n\n        this.rowNode.setHovered(false);\n\n        const event: VirtualRowRemovedEvent = this.createRowEvent('virtualRowRemoved');\n\n        this.dispatchLocalEvent(event);\n        this.beans.eventService.dispatchEvent(event);\n        super.destroy();\n    }\n\n    public destroySecondPass(): void {\n        this.allRowGuis.length = 0;\n\n        // if we are editing, destroying the row will stop editing\n        this.stopEditing();\n\n        const destroyCellCtrls = (ctrls: CellCtrlListAndMap): CellCtrlListAndMap => {\n            ctrls.list.forEach((c) => c.destroy());\n            return { list: [], map: {} };\n        };\n\n        this.centerCellCtrls = destroyCellCtrls(this.centerCellCtrls);\n        this.leftCellCtrls = destroyCellCtrls(this.leftCellCtrls);\n        this.rightCellCtrls = destroyCellCtrls(this.rightCellCtrls);\n    }\n\n    private setFocusedClasses(gui?: RowGui): void {\n        this.forEachGui(gui, (gui) => {\n            gui.rowComp.addOrRemoveCssClass('ag-row-focus', this.rowFocused);\n            gui.rowComp.addOrRemoveCssClass('ag-row-no-focus', !this.rowFocused);\n        });\n    }\n\n    private onCellFocusChanged(): void {\n        const rowFocused = this.beans.focusService.isRowFocused(this.rowNode.rowIndex!, this.rowNode.rowPinned);\n\n        if (rowFocused !== this.rowFocused) {\n            this.rowFocused = rowFocused;\n            this.setFocusedClasses();\n        }\n\n        // if we are editing, then moving the focus out of a row will stop editing\n        if (!rowFocused && this.editingRow) {\n            this.stopEditing(false);\n        }\n    }\n\n    private onPaginationChanged(): void {\n        const currentPage = this.beans.paginationService?.getCurrentPage() ?? 0;\n        // it is possible this row is in the new page, but the page number has changed, which means\n        // it needs to reposition itself relative to the new page\n        if (this.paginationPage !== currentPage) {\n            this.paginationPage = currentPage;\n            this.onTopChanged();\n        }\n\n        this.refreshFirstAndLastRowStyles();\n    }\n\n    private onTopChanged(): void {\n        this.setRowTop(this.rowNode.rowTop!);\n    }\n\n    private onPaginationPixelOffsetChanged(): void {\n        // the pixel offset is used when calculating rowTop to set on the row DIV\n        this.onTopChanged();\n    }\n\n    // applies pagination offset, eg if on second page, and page height is 500px, then removes\n    // 500px from the top position, so a row with rowTop 600px is displayed at location 100px.\n    // reverse will take the offset away rather than add.\n    private applyPaginationOffset(topPx: number, reverse = false): number {\n        if (this.rowNode.isRowPinned() || this.rowNode.sticky) {\n            return topPx;\n        }\n\n        const pixelOffset = this.beans.pageBoundsService.getPixelOffset();\n        const multiplier = reverse ? 1 : -1;\n\n        return topPx + pixelOffset * multiplier;\n    }\n\n    public setRowTop(pixels: number): void {\n        // print layout uses normal flow layout for row positioning\n        if (this.printLayout) {\n            return;\n        }\n\n        // need to make sure rowTop is not null, as this can happen if the node was once\n        // visible (ie parent group was expanded) but is now not visible\n        if (_exists(pixels)) {\n            const afterPaginationPixels = this.applyPaginationOffset(pixels);\n            const skipScaling = this.rowNode.isRowPinned() || this.rowNode.sticky;\n            const afterScalingPixels = skipScaling\n                ? afterPaginationPixels\n                : this.beans.rowContainerHeightService.getRealPixelPosition(afterPaginationPixels);\n            const topPx = `${afterScalingPixels}px`;\n            this.setRowTopStyle(topPx);\n        }\n    }\n\n    // the top needs to be set into the DOM element when the element is created, not updated afterwards.\n    // otherwise the transition would not work, as it would be transitioning from zero (the unset value).\n    // for example, suppose a row that is outside the viewport, then user does a filter to remove other rows\n    // and this row now appears in the viewport, and the row moves up (ie it was under the viewport and not rendered,\n    // but now is in the viewport) then a new RowComp is created, however it should have it's position initialised\n    // to below the viewport, so the row will appear to animate up. if we didn't set the initial position at creation\n    // time, the row would animate down (ie from position zero).\n    public getInitialRowTop(rowContainerType: RowContainerType): string | undefined {\n        return this.suppressRowTransform ? this.getInitialRowTopShared(rowContainerType) : undefined;\n    }\n    public getInitialTransform(rowContainerType: RowContainerType): string | undefined {\n        return this.suppressRowTransform ? undefined : `translateY(${this.getInitialRowTopShared(rowContainerType)})`;\n    }\n    private getInitialRowTopShared(rowContainerType: RowContainerType): string {\n        // print layout uses normal flow layout for row positioning\n        if (this.printLayout) {\n            return '';\n        }\n\n        const rowNode = this.rowNode;\n        let rowTop: number;\n        if (this.isSticky()) {\n            rowTop = rowNode.stickyRowTop;\n        } else {\n            // if sliding in, we take the old row top. otherwise we just set the current row top.\n            const pixels = this.slideInAnimation[rowContainerType]\n                ? this.roundRowTopToBounds(rowNode.oldRowTop!)\n                : rowNode.rowTop;\n            const afterPaginationPixels = this.applyPaginationOffset(pixels!);\n            // we don't apply scaling if row is pinned\n            rowTop = rowNode.isRowPinned()\n                ? afterPaginationPixels\n                : this.beans.rowContainerHeightService.getRealPixelPosition(afterPaginationPixels);\n        }\n\n        return rowTop + 'px';\n    }\n\n    private setRowTopStyle(topPx: string): void {\n        this.allRowGuis.forEach((gui) =>\n            this.suppressRowTransform ? gui.rowComp.setTop(topPx) : gui.rowComp.setTransform(`translateY(${topPx})`)\n        );\n    }\n\n    public getRowNode(): RowNode {\n        return this.rowNode;\n    }\n\n    public getCellCtrl(column: AgColumn): CellCtrl | null {\n        // first up, check for cell directly linked to this column\n        let res: CellCtrl | null = null;\n        this.getAllCellCtrls().forEach((cellCtrl) => {\n            if (cellCtrl.getColumn() == column) {\n                res = cellCtrl;\n            }\n        });\n\n        if (res != null) {\n            return res;\n        }\n\n        // second up, if not found, then check for spanned cols.\n        // we do this second (and not at the same time) as this is\n        // more expensive, as spanning cols is a\n        // infrequently used feature so we don't need to do this most\n        // of the time\n        this.getAllCellCtrls().forEach((cellCtrl) => {\n            if (cellCtrl.getColSpanningList().indexOf(column) >= 0) {\n                res = cellCtrl;\n            }\n        });\n\n        return res;\n    }\n\n    private onRowIndexChanged(): void {\n        // we only bother updating if the rowIndex is present. if it is not present, it means this row\n        // is child of a group node, and the group node was closed, it's the only way to have no row index.\n        // when this happens, row is about to be de-rendered, so we don't care, rowComp is about to die!\n        if (this.rowNode.rowIndex != null) {\n            this.onCellFocusChanged();\n            this.updateRowIndexes();\n            this.postProcessCss();\n        }\n    }\n\n    public getRowIndex() {\n        return this.rowNode.getRowIndexString();\n    }\n\n    private updateRowIndexes(gui?: RowGui): void {\n        const rowIndexStr = this.rowNode.getRowIndexString();\n\n        if (rowIndexStr === null) {\n            return;\n        }\n\n        const headerRowCount =\n            this.beans.headerNavigationService.getHeaderRowCount() +\n            (this.beans.filterManager?.getHeaderRowCount() ?? 0);\n        const rowIsEven = this.rowNode.rowIndex! % 2 === 0;\n        const ariaRowIndex = headerRowCount + this.rowNode.rowIndex! + 1;\n\n        this.forEachGui(gui, (c) => {\n            c.rowComp.setRowIndex(rowIndexStr);\n            c.rowComp.addOrRemoveCssClass('ag-row-even', rowIsEven);\n            c.rowComp.addOrRemoveCssClass('ag-row-odd', !rowIsEven);\n            _setAriaRowIndex(c.element, ariaRowIndex);\n        });\n    }\n\n    public setStoppingRowEdit(stoppingRowEdit: boolean): void {\n        this.stoppingRowEdit = stoppingRowEdit;\n    }\n}\n", "import type { VisibleColsService } from '../../columns/visibleColsService';\nimport { KeyCode } from '../../constants/keyCode';\nimport { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { CtrlsService } from '../../ctrlsService';\nimport type { AgColumn } from '../../entities/agColumn';\nimport type { CellKeyDownEvent, FullWidthCellKeyDownEvent } from '../../events';\nimport type { FocusService } from '../../focusService';\nimport type { IRangeService } from '../../interfaces/IRangeService';\nimport type { IClipboardService } from '../../interfaces/iClipboardService';\nimport type { IRowModel } from '../../interfaces/iRowModel';\nimport type { RowPinnedType } from '../../interfaces/iRowNode';\nimport type { EventShowContextMenuParams, MenuService } from '../../misc/menuService';\nimport type { PinnedRowModel } from '../../pinnedRowModel/pinnedRowModel';\nimport { CellCtrl } from '../../rendering/cell/cellCtrl';\nimport { RowCtrl } from '../../rendering/row/rowCtrl';\nimport type { UndoRedoService } from '../../undoRedo/undoRedoService';\nimport { _last } from '../../utils/array';\nimport { _isIOSUserAgent } from '../../utils/browser';\nimport { _getCtrlForEventTarget, _isEventSupported, _isStopPropagationForAgGrid } from '../../utils/event';\nimport { _missingOrEmpty } from '../../utils/generic';\nimport {\n    _isEventFromPrintableCharacter,\n    _isUserSuppressingKeyboardEvent,\n    _normaliseQwertyAzerty,\n} from '../../utils/keyboard';\nimport type { ValueService } from '../../valueService/valueService';\nimport type { LongTapEvent } from '../../widgets/touchListener';\nimport { TouchListener } from '../../widgets/touchListener';\nimport type { MouseEventService } from './../mouseEventService';\nimport type { NavigationService } from './../navigationService';\n\nexport class RowContainerEventsFeature extends BeanStub {\n    private mouseEventService: MouseEventService;\n    private valueService: ValueService;\n    private menuService: MenuService;\n    private ctrlsService: CtrlsService;\n    private navigationService: NavigationService;\n    private focusService: FocusService;\n    private undoRedoService?: UndoRedoService;\n    private visibleColsService: VisibleColsService;\n    private rowModel: IRowModel;\n    private pinnedRowModel: PinnedRowModel;\n    private rangeService?: IRangeService;\n    private clipboardService?: IClipboardService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.mouseEventService = beans.mouseEventService;\n        this.valueService = beans.valueService;\n        this.menuService = beans.menuService;\n        this.ctrlsService = beans.ctrlsService;\n        this.navigationService = beans.navigationService;\n        this.focusService = beans.focusService;\n        this.undoRedoService = beans.undoRedoService;\n        this.visibleColsService = beans.visibleColsService;\n        this.rowModel = beans.rowModel;\n        this.pinnedRowModel = beans.pinnedRowModel;\n        this.rangeService = beans.rangeService;\n        this.clipboardService = beans.clipboardService;\n    }\n\n    private element: HTMLElement;\n\n    constructor(element: HTMLElement) {\n        super();\n        this.element = element;\n    }\n\n    public postConstruct(): void {\n        this.addKeyboardListeners();\n        this.addMouseListeners();\n        this.mockContextMenuForIPad();\n    }\n\n    private addKeyboardListeners(): void {\n        const eventName = 'keydown';\n        const listener = this.processKeyboardEvent.bind(this, eventName);\n        this.addManagedElementListeners(this.element, { [eventName]: listener });\n    }\n\n    private addMouseListeners(): void {\n        const mouseDownEvent = _isEventSupported('touchstart') ? 'touchstart' : 'mousedown';\n        const eventNames = ['dblclick', 'contextmenu', 'mouseover', 'mouseout', 'click', mouseDownEvent];\n\n        eventNames.forEach((eventName) => {\n            const listener = this.processMouseEvent.bind(this, eventName);\n            this.addManagedElementListeners(this.element, { [eventName]: listener });\n        });\n    }\n\n    private processMouseEvent(eventName: string, mouseEvent: MouseEvent): void {\n        if (!this.mouseEventService.isEventFromThisGrid(mouseEvent) || _isStopPropagationForAgGrid(mouseEvent)) {\n            return;\n        }\n\n        const rowComp = this.getRowForEvent(mouseEvent);\n        const cellCtrl = this.mouseEventService.getRenderedCellForEvent(mouseEvent)!;\n\n        if (eventName === 'contextmenu') {\n            this.handleContextMenuMouseEvent(mouseEvent, undefined, rowComp, cellCtrl);\n        } else {\n            if (cellCtrl) {\n                cellCtrl.onMouseEvent(eventName, mouseEvent);\n            }\n            if (rowComp) {\n                rowComp.onMouseEvent(eventName, mouseEvent);\n            }\n        }\n    }\n\n    private mockContextMenuForIPad(): void {\n        // we do NOT want this when not in iPad, otherwise we will be doing\n        if (!_isIOSUserAgent()) {\n            return;\n        }\n\n        const touchListener = new TouchListener(this.element);\n        const longTapListener = (event: LongTapEvent) => {\n            const rowComp = this.getRowForEvent(event.touchEvent);\n            const cellComp = this.mouseEventService.getRenderedCellForEvent(event.touchEvent)!;\n\n            this.handleContextMenuMouseEvent(undefined, event.touchEvent, rowComp, cellComp);\n        };\n\n        this.addManagedListeners(touchListener, { longTap: longTapListener });\n        this.addDestroyFunc(() => touchListener.destroy());\n    }\n\n    private getRowForEvent(event: Event): RowCtrl | null {\n        let sourceElement: HTMLElement | null = event.target as HTMLElement | null;\n\n        while (sourceElement) {\n            const rowCon = this.gos.getDomData(sourceElement, RowCtrl.DOM_DATA_KEY_ROW_CTRL);\n            if (rowCon) {\n                return rowCon;\n            }\n\n            sourceElement = sourceElement.parentElement;\n        }\n\n        return null;\n    }\n\n    private handleContextMenuMouseEvent(\n        mouseEvent: MouseEvent | undefined,\n        touchEvent: TouchEvent | undefined,\n        rowComp: RowCtrl | null,\n        cellCtrl: CellCtrl\n    ) {\n        const rowNode = rowComp ? rowComp.getRowNode() : null;\n        const column = cellCtrl ? cellCtrl.getColumn() : null;\n        let value = null;\n\n        if (column) {\n            const event = mouseEvent ? mouseEvent : touchEvent;\n            cellCtrl.dispatchCellContextMenuEvent(event ?? null);\n            value = this.valueService.getValue(column, rowNode);\n        }\n\n        // if user clicked on a cell, anchor to that cell, otherwise anchor to the grid panel\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const anchorToElement = cellCtrl ? cellCtrl.getGui() : gridBodyCon.getGridBodyElement();\n\n        this.menuService.showContextMenu({\n            mouseEvent,\n            touchEvent,\n            rowNode,\n            column,\n            value,\n            anchorToElement,\n        } as EventShowContextMenuParams);\n    }\n\n    private getControlsForEventTarget(target: EventTarget | null): {\n        cellCtrl: CellCtrl | null;\n        rowCtrl: RowCtrl | null;\n    } {\n        return {\n            cellCtrl: _getCtrlForEventTarget<CellCtrl>(this.gos, target, CellCtrl.DOM_DATA_KEY_CELL_CTRL),\n            rowCtrl: _getCtrlForEventTarget<RowCtrl>(this.gos, target, RowCtrl.DOM_DATA_KEY_ROW_CTRL),\n        };\n    }\n\n    private processKeyboardEvent(eventName: string, keyboardEvent: KeyboardEvent): void {\n        const { cellCtrl, rowCtrl } = this.getControlsForEventTarget(keyboardEvent.target);\n\n        if (keyboardEvent.defaultPrevented) {\n            return;\n        }\n        if (cellCtrl) {\n            this.processCellKeyboardEvent(cellCtrl, eventName, keyboardEvent);\n        } else if (rowCtrl && rowCtrl.isFullWidth()) {\n            this.processFullWidthRowKeyboardEvent(rowCtrl, eventName, keyboardEvent);\n        }\n    }\n\n    private processCellKeyboardEvent(cellCtrl: CellCtrl, eventName: string, keyboardEvent: KeyboardEvent): void {\n        const rowNode = cellCtrl.getRowNode();\n        const column = cellCtrl.getColumn();\n        const editing = cellCtrl.isEditing();\n\n        const gridProcessingAllowed = !_isUserSuppressingKeyboardEvent(\n            this.gos,\n            keyboardEvent,\n            rowNode,\n            column,\n            editing\n        );\n\n        if (gridProcessingAllowed) {\n            if (eventName === 'keydown') {\n                // first see if it's a scroll key, page up / down, home / end etc\n                const wasScrollKey = !editing && this.navigationService.handlePageScrollingKey(keyboardEvent);\n\n                // if not a scroll key, then we pass onto cell\n                if (!wasScrollKey) {\n                    cellCtrl.onKeyDown(keyboardEvent);\n                }\n\n                // perform clipboard and undo / redo operations\n                this.doGridOperations(keyboardEvent, cellCtrl.isEditing());\n\n                if (_isEventFromPrintableCharacter(keyboardEvent)) {\n                    cellCtrl.processCharacter(keyboardEvent);\n                }\n            }\n        }\n\n        if (eventName === 'keydown') {\n            const cellKeyDownEvent: CellKeyDownEvent = cellCtrl.createEvent(keyboardEvent, 'cellKeyDown');\n            this.eventService.dispatchEvent(cellKeyDownEvent);\n        }\n    }\n\n    private processFullWidthRowKeyboardEvent(rowComp: RowCtrl, eventName: string, keyboardEvent: KeyboardEvent) {\n        const rowNode = rowComp.getRowNode();\n        const focusedCell = this.focusService.getFocusedCell();\n        const column = (focusedCell && focusedCell.column) as AgColumn;\n        const gridProcessingAllowed = !_isUserSuppressingKeyboardEvent(this.gos, keyboardEvent, rowNode, column, false);\n\n        if (gridProcessingAllowed) {\n            const key = keyboardEvent.key;\n            if (eventName === 'keydown') {\n                switch (key) {\n                    case KeyCode.PAGE_HOME:\n                    case KeyCode.PAGE_END:\n                    case KeyCode.PAGE_UP:\n                    case KeyCode.PAGE_DOWN:\n                        this.navigationService.handlePageScrollingKey(keyboardEvent, true);\n                        break;\n\n                    case KeyCode.UP:\n                    case KeyCode.DOWN:\n                        rowComp.onKeyboardNavigate(keyboardEvent);\n                        break;\n                    case KeyCode.TAB:\n                        rowComp.onTabKeyDown(keyboardEvent);\n                        break;\n                    default:\n                }\n            }\n        }\n\n        if (eventName === 'keydown') {\n            const cellKeyDownEvent: FullWidthCellKeyDownEvent = rowComp.createRowEvent('cellKeyDown', keyboardEvent);\n            this.eventService.dispatchEvent(cellKeyDownEvent);\n        }\n    }\n\n    private doGridOperations(keyboardEvent: KeyboardEvent, editing: boolean): void {\n        // check if ctrl or meta key pressed\n        if (!keyboardEvent.ctrlKey && !keyboardEvent.metaKey) {\n            return;\n        }\n\n        // if the cell the event came from is editing, then we do not\n        // want to do the default shortcut keys, otherwise the editor\n        // (eg a text field) would not be able to do the normal cut/copy/paste\n        if (editing) {\n            return;\n        }\n\n        // for copy / paste, we don't want to execute when the event\n        // was from a child grid (happens in master detail)\n        if (!this.mouseEventService.isEventFromThisGrid(keyboardEvent)) {\n            return;\n        }\n\n        const keyCode = _normaliseQwertyAzerty(keyboardEvent);\n\n        if (keyCode === KeyCode.A) {\n            return this.onCtrlAndA(keyboardEvent);\n        }\n        if (keyCode === KeyCode.C) {\n            return this.onCtrlAndC(keyboardEvent);\n        }\n        if (keyCode === KeyCode.D) {\n            return this.onCtrlAndD(keyboardEvent);\n        }\n        if (keyCode === KeyCode.V) {\n            return this.onCtrlAndV(keyboardEvent);\n        }\n        if (keyCode === KeyCode.X) {\n            return this.onCtrlAndX(keyboardEvent);\n        }\n        if (keyCode === KeyCode.Y) {\n            return this.onCtrlAndY();\n        }\n        if (keyCode === KeyCode.Z) {\n            return this.onCtrlAndZ(keyboardEvent);\n        }\n    }\n\n    private onCtrlAndA(event: KeyboardEvent): void {\n        const { pinnedRowModel, rowModel, rangeService } = this;\n\n        if (rangeService && rowModel.isRowsToRender()) {\n            const [isEmptyPinnedTop, isEmptyPinnedBottom] = [\n                pinnedRowModel.isEmpty('top'),\n                pinnedRowModel.isEmpty('bottom'),\n            ];\n\n            const floatingStart: RowPinnedType = isEmptyPinnedTop ? null : 'top';\n            let floatingEnd: RowPinnedType;\n            let rowEnd: number;\n\n            if (isEmptyPinnedBottom) {\n                floatingEnd = null;\n                rowEnd = rowModel.getRowCount() - 1;\n            } else {\n                floatingEnd = 'bottom';\n                rowEnd = pinnedRowModel.getPinnedBottomRowNodes().length - 1;\n            }\n\n            const allDisplayedColumns = this.visibleColsService.getAllCols();\n            if (_missingOrEmpty(allDisplayedColumns)) {\n                return;\n            }\n\n            rangeService.setCellRange({\n                rowStartIndex: 0,\n                rowStartPinned: floatingStart,\n                rowEndIndex: rowEnd,\n                rowEndPinned: floatingEnd,\n                columnStart: allDisplayedColumns[0],\n                columnEnd: _last(allDisplayedColumns),\n            });\n        }\n        event.preventDefault();\n    }\n\n    private onCtrlAndC(event: KeyboardEvent): void {\n        if (!this.clipboardService || this.gos.get('enableCellTextSelection')) {\n            return;\n        }\n\n        const { cellCtrl, rowCtrl } = this.getControlsForEventTarget(event.target);\n\n        if (cellCtrl?.isEditing() || rowCtrl?.isEditing()) {\n            return;\n        }\n\n        event.preventDefault();\n        this.clipboardService.copyToClipboard();\n    }\n\n    private onCtrlAndX(event: KeyboardEvent): void {\n        if (\n            !this.clipboardService ||\n            this.gos.get('enableCellTextSelection') ||\n            this.gos.get('suppressCutToClipboard')\n        ) {\n            return;\n        }\n\n        const { cellCtrl, rowCtrl } = this.getControlsForEventTarget(event.target);\n\n        if (cellCtrl?.isEditing() || rowCtrl?.isEditing()) {\n            return;\n        }\n\n        event.preventDefault();\n        this.clipboardService.cutToClipboard(undefined, 'ui');\n    }\n\n    private onCtrlAndV(event: KeyboardEvent): void {\n        const { cellCtrl, rowCtrl } = this.getControlsForEventTarget(event.target);\n\n        if (cellCtrl?.isEditing() || rowCtrl?.isEditing()) {\n            return;\n        }\n        if (this.clipboardService && !this.gos.get('suppressClipboardPaste')) {\n            this.clipboardService.pasteFromClipboard();\n        }\n    }\n\n    private onCtrlAndD(event: KeyboardEvent): void {\n        if (this.clipboardService && !this.gos.get('suppressClipboardPaste')) {\n            this.clipboardService.copyRangeDown();\n        }\n        event.preventDefault();\n    }\n\n    private onCtrlAndZ(event: KeyboardEvent): void {\n        if (!this.gos.get('undoRedoCellEditing') || !this.undoRedoService) {\n            return;\n        }\n        event.preventDefault();\n\n        if (event.shiftKey) {\n            this.undoRedoService.redo('ui');\n        } else {\n            this.undoRedoService.undo('ui');\n        }\n    }\n\n    private onCtrlAndY(): void {\n        this.undoRedoService?.redo('ui');\n    }\n}\n", "import { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport { _setDisplayed, _setFixedWidth } from '../../utils/dom';\nimport type { PinnedWidthService } from '../pinnedWidthService';\n\nexport class SetPinnedLeftWidthFeature extends BeanStub {\n    private pinnedWidthService: PinnedWidthService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.pinnedWidthService = beans.pinnedWidthService;\n    }\n\n    private element: HTMLElement;\n\n    constructor(element: HTMLElement) {\n        super();\n        this.element = element;\n    }\n\n    public postConstruct(): void {\n        this.addManagedEventListeners({ leftPinnedWidthChanged: this.onPinnedLeftWidthChanged.bind(this) });\n    }\n\n    private onPinnedLeftWidthChanged(): void {\n        const leftWidth = this.pinnedWidthService.getPinnedLeftWidth();\n        const displayed = leftWidth > 0;\n        _setDisplayed(this.element, displayed);\n        _setFixedWidth(this.element, leftWidth);\n    }\n\n    public getWidth(): number {\n        return this.pinnedWidthService.getPinnedLeftWidth();\n    }\n}\n", "import { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport { _setDisplayed, _setFixedWidth } from '../../utils/dom';\nimport type { PinnedWidthService } from '../pinnedWidthService';\n\nexport class SetPinnedRightWidthFeature extends BeanStub {\n    private pinnedWidthService: PinnedWidthService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.pinnedWidthService = beans.pinnedWidthService;\n    }\n\n    private element: HTMLElement;\n\n    constructor(element: HTMLElement) {\n        super();\n        this.element = element;\n    }\n\n    public postConstruct(): void {\n        this.addManagedEventListeners({\n            rightPinnedWidthChanged: this.onPinnedRightWidthChanged.bind(this),\n        });\n    }\n\n    private onPinnedRightWidthChanged(): void {\n        const rightWidth = this.pinnedWidthService.getPinnedRightWidth();\n        const displayed = rightWidth > 0;\n        _setDisplayed(this.element, displayed);\n        _setFixedWidth(this.element, rightWidth);\n    }\n\n    public getWidth(): number {\n        return this.pinnedWidthService.getPinnedRightWidth();\n    }\n}\n", "import type { ColumnViewportService } from '../../columns/columnViewportService';\nimport { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { CtrlsService } from '../../ctrlsService';\nimport type { DragService } from '../../dragAndDrop/dragService';\nimport type { DisplayedRowsChangedEvent, StickyTopOffsetChangedEvent } from '../../events';\nimport type { ColumnPinnedType } from '../../interfaces/iColumn';\nimport type { ResizeObserverService } from '../../misc/resizeObserverService';\nimport type { RowCtrl } from '../../rendering/row/rowCtrl';\nimport type { RowRenderer } from '../../rendering/rowRenderer';\nimport { _getInnerWidth, _getScrollLeft, _isHorizontalScrollShowing, _isInDOM, _setScrollLeft } from '../../utils/dom';\nimport { CenterWidthFeature } from '../centerWidthFeature';\nimport { ViewportSizeFeature } from '../viewportSizeFeature';\nimport { DragListenerFeature } from './dragListenerFeature';\nimport { RowContainerEventsFeature } from './rowContainerEventsFeature';\nimport { SetHeightFeature } from './setHeightFeature';\nimport { SetPinnedLeftWidthFeature } from './setPinnedLeftWidthFeature';\nimport { SetPinnedRightWidthFeature } from './setPinnedRightWidthFeature';\n\nexport type RowContainerName =\n    | 'left'\n    | 'right'\n    | 'center'\n    | 'fullWidth'\n    | 'topLeft'\n    | 'topRight'\n    | 'topCenter'\n    | 'topFullWidth'\n    | 'stickyTopLeft'\n    | 'stickyTopRight'\n    | 'stickyTopCenter'\n    | 'stickyTopFullWidth'\n    | 'stickyBottomLeft'\n    | 'stickyBottomRight'\n    | 'stickyBottomCenter'\n    | 'stickyBottomFullWidth'\n    | 'bottomLeft'\n    | 'bottomRight'\n    | 'bottomCenter'\n    | 'bottomFullWidth';\n\nexport type RowContainerType = 'left' | 'right' | 'center' | 'fullWidth';\n\ntype GetRowCtrls = (renderer: RowRenderer) => RowCtrl[];\nexport type RowContainerOptions = {\n    type: RowContainerType;\n    container: string;\n    viewport?: string;\n    pinnedType?: ColumnPinnedType;\n    fullWidth?: boolean;\n    getRowCtrls: GetRowCtrls;\n};\nconst getTopRowCtrls: GetRowCtrls = (r) => r.getTopRowCtrls();\nconst getStickyTopRowCtrls: GetRowCtrls = (r) => r.getStickyTopRowCtrls();\nconst getStickyBottomRowCtrls: GetRowCtrls = (r) => r.getStickyBottomRowCtrls();\nconst getBottomRowCtrls: GetRowCtrls = (r) => r.getBottomRowCtrls();\nconst getCentreRowCtrls: GetRowCtrls = (r) => r.getCentreRowCtrls();\n\nconst ContainerCssClasses: Record<RowContainerName, RowContainerOptions> = {\n    center: {\n        type: 'center',\n        container: 'ag-center-cols-container',\n        viewport: 'ag-center-cols-viewport',\n        getRowCtrls: getCentreRowCtrls,\n    },\n    left: {\n        type: 'left',\n        container: 'ag-pinned-left-cols-container',\n        pinnedType: 'left',\n        getRowCtrls: getCentreRowCtrls,\n    },\n    right: {\n        type: 'right',\n        container: 'ag-pinned-right-cols-container',\n        pinnedType: 'right',\n        getRowCtrls: getCentreRowCtrls,\n    },\n    fullWidth: {\n        type: 'fullWidth',\n        container: 'ag-full-width-container',\n        fullWidth: true,\n        getRowCtrls: getCentreRowCtrls,\n    },\n\n    topCenter: {\n        type: 'center',\n        container: 'ag-floating-top-container',\n        viewport: 'ag-floating-top-viewport',\n        getRowCtrls: getTopRowCtrls,\n    },\n    topLeft: {\n        type: 'left',\n        container: 'ag-pinned-left-floating-top',\n        pinnedType: 'left',\n        getRowCtrls: getTopRowCtrls,\n    },\n    topRight: {\n        type: 'right',\n        container: 'ag-pinned-right-floating-top',\n        pinnedType: 'right',\n        getRowCtrls: getTopRowCtrls,\n    },\n    topFullWidth: {\n        type: 'fullWidth',\n        container: 'ag-floating-top-full-width-container',\n        fullWidth: true,\n        getRowCtrls: getTopRowCtrls,\n    },\n\n    stickyTopCenter: {\n        type: 'center',\n        container: 'ag-sticky-top-container',\n        viewport: 'ag-sticky-top-viewport',\n        getRowCtrls: getStickyTopRowCtrls,\n    },\n    stickyTopLeft: {\n        type: 'left',\n        container: 'ag-pinned-left-sticky-top',\n        pinnedType: 'left',\n        getRowCtrls: getStickyTopRowCtrls,\n    },\n    stickyTopRight: {\n        type: 'right',\n        container: 'ag-pinned-right-sticky-top',\n        pinnedType: 'right',\n        getRowCtrls: getStickyTopRowCtrls,\n    },\n    stickyTopFullWidth: {\n        type: 'fullWidth',\n        container: 'ag-sticky-top-full-width-container',\n        fullWidth: true,\n        getRowCtrls: getStickyTopRowCtrls,\n    },\n\n    stickyBottomCenter: {\n        type: 'center',\n        container: 'ag-sticky-bottom-container',\n        viewport: 'ag-sticky-bottom-viewport',\n        getRowCtrls: getStickyBottomRowCtrls,\n    },\n    stickyBottomLeft: {\n        type: 'left',\n        container: 'ag-pinned-left-sticky-bottom',\n        pinnedType: 'left',\n        getRowCtrls: getStickyBottomRowCtrls,\n    },\n    stickyBottomRight: {\n        type: 'right',\n        container: 'ag-pinned-right-sticky-bottom',\n        pinnedType: 'right',\n        getRowCtrls: getStickyBottomRowCtrls,\n    },\n    stickyBottomFullWidth: {\n        type: 'fullWidth',\n        container: 'ag-sticky-bottom-full-width-container',\n        fullWidth: true,\n        getRowCtrls: getStickyBottomRowCtrls,\n    },\n\n    bottomCenter: {\n        type: 'center',\n        container: 'ag-floating-bottom-container',\n        viewport: 'ag-floating-bottom-viewport',\n        getRowCtrls: getBottomRowCtrls,\n    },\n    bottomLeft: {\n        type: 'left',\n        container: 'ag-pinned-left-floating-bottom',\n        pinnedType: 'left',\n        getRowCtrls: getBottomRowCtrls,\n    },\n    bottomRight: {\n        type: 'right',\n        container: 'ag-pinned-right-floating-bottom',\n        pinnedType: 'right',\n        getRowCtrls: getBottomRowCtrls,\n    },\n    bottomFullWidth: {\n        type: 'fullWidth',\n        container: 'ag-floating-bottom-full-width-container',\n        fullWidth: true,\n        getRowCtrls: getBottomRowCtrls,\n    },\n};\nexport function _getRowContainerOptions(name: RowContainerName): RowContainerOptions {\n    return ContainerCssClasses[name];\n}\n\nconst allTopNoFW: RowContainerName[] = ['topCenter', 'topLeft', 'topRight'];\nconst allBottomNoFW: RowContainerName[] = ['bottomCenter', 'bottomLeft', 'bottomRight'];\nconst allMiddleNoFW: RowContainerName[] = ['center', 'left', 'right'];\n\nconst allMiddle: RowContainerName[] = ['center', 'left', 'right', 'fullWidth'];\nconst allCenter: RowContainerName[] = ['stickyTopCenter', 'stickyBottomCenter', 'center', 'topCenter', 'bottomCenter'];\nconst allLeft: RowContainerName[] = ['left', 'bottomLeft', 'topLeft', 'stickyTopLeft', 'stickyBottomLeft'];\nconst allRight: RowContainerName[] = ['right', 'bottomRight', 'topRight', 'stickyTopRight', 'stickyBottomRight'];\n\n// sticky section must show rows in set order\nconst allStickyTopNoFW: RowContainerName[] = ['stickyTopCenter', 'stickyTopLeft', 'stickyTopRight'];\nconst allStickyBottomNoFW: RowContainerName[] = ['stickyBottomCenter', 'stickyBottomLeft', 'stickyBottomRight'];\nconst allStickyContainers: RowContainerName[] = [\n    ...allStickyTopNoFW,\n    'stickyTopFullWidth',\n    ...allStickyBottomNoFW,\n    'stickyBottomFullWidth',\n];\nconst allNoFW: RowContainerName[] = [\n    ...allTopNoFW,\n    ...allBottomNoFW,\n    ...allMiddleNoFW,\n    ...allStickyTopNoFW,\n    ...allStickyBottomNoFW,\n];\n\nexport interface IRowContainerComp {\n    setViewportHeight(height: string): void;\n    setRowCtrls(params: { rowCtrls: RowCtrl[]; useFlushSync?: boolean }): void;\n    setDomOrder(domOrder: boolean): void;\n    setContainerWidth(width: string): void;\n    setOffsetTop(offset: string): void;\n}\n\nexport class RowContainerCtrl extends BeanStub {\n    private dragService: DragService;\n    private ctrlsService: CtrlsService;\n    private columnViewportService: ColumnViewportService;\n    private resizeObserverService: ResizeObserverService;\n    private rowRenderer: RowRenderer;\n\n    public wireBeans(beans: BeanCollection) {\n        this.dragService = beans.dragService;\n        this.ctrlsService = beans.ctrlsService;\n        this.columnViewportService = beans.columnViewportService;\n        this.resizeObserverService = beans.resizeObserverService;\n        this.rowRenderer = beans.rowRenderer;\n    }\n\n    private readonly options: RowContainerOptions;\n    private readonly name: RowContainerName;\n\n    private comp: IRowContainerComp;\n    private eContainer: HTMLElement;\n    private eViewport: HTMLElement;\n    private enableRtl: boolean;\n\n    private viewportSizeFeature: ViewportSizeFeature | undefined; // only center has this\n    private pinnedWidthFeature: SetPinnedLeftWidthFeature | SetPinnedRightWidthFeature | undefined;\n    private visible: boolean = true;\n    // Maintaining a constant reference enables optimization in React.\n    private EMPTY_CTRLS = [];\n\n    constructor(name: RowContainerName) {\n        super();\n        this.name = name;\n        this.options = _getRowContainerOptions(name);\n    }\n\n    public postConstruct(): void {\n        this.enableRtl = this.gos.get('enableRtl');\n\n        this.forContainers(['center'], () => {\n            this.viewportSizeFeature = this.createManagedBean(new ViewportSizeFeature(this));\n            this.addManagedEventListeners({\n                stickyTopOffsetChanged: this.onStickyTopOffsetChanged.bind(this),\n            });\n        });\n    }\n\n    private onStickyTopOffsetChanged(event: StickyTopOffsetChangedEvent): void {\n        this.comp.setOffsetTop(`${event.offset}px`);\n    }\n\n    private registerWithCtrlsService(): void {\n        // we don't register full width containers\n        if (this.options.fullWidth) return;\n        this.ctrlsService.register(this.name as any, this);\n    }\n\n    private forContainers(names: RowContainerName[], callback: () => void): void {\n        if (names.indexOf(this.name) >= 0) {\n            callback();\n        }\n    }\n\n    public getContainerElement(): HTMLElement {\n        return this.eContainer;\n    }\n\n    public getViewportSizeFeature(): ViewportSizeFeature | undefined {\n        return this.viewportSizeFeature;\n    }\n\n    public setComp(view: IRowContainerComp, eContainer: HTMLElement, eViewport: HTMLElement): void {\n        this.comp = view;\n        this.eContainer = eContainer;\n        this.eViewport = eViewport;\n\n        this.createManagedBean(new RowContainerEventsFeature(this.eContainer));\n        this.addPreventScrollWhileDragging();\n        this.listenOnDomOrder();\n        this.stopHScrollOnPinnedRows();\n\n        this.forContainers(allLeft, () => {\n            this.pinnedWidthFeature = this.createManagedBean(new SetPinnedLeftWidthFeature(this.eContainer));\n            this.addManagedEventListeners({ leftPinnedWidthChanged: () => this.onPinnedWidthChanged() });\n        });\n        this.forContainers(allRight, () => {\n            this.pinnedWidthFeature = this.createManagedBean(new SetPinnedRightWidthFeature(this.eContainer));\n            this.addManagedEventListeners({ rightPinnedWidthChanged: () => this.onPinnedWidthChanged() });\n        });\n        this.forContainers(allMiddle, () =>\n            this.createManagedBean(\n                new SetHeightFeature(this.eContainer, this.name === 'center' ? eViewport : undefined)\n            )\n        );\n        this.forContainers(allNoFW, () => this.createManagedBean(new DragListenerFeature(this.eContainer)));\n\n        this.forContainers(allCenter, () =>\n            this.createManagedBean(new CenterWidthFeature((width) => this.comp.setContainerWidth(`${width}px`)))\n        );\n\n        this.addListeners();\n        this.registerWithCtrlsService();\n    }\n\n    private addListeners(): void {\n        this.addManagedEventListeners({\n            displayedColumnsChanged: this.onDisplayedColumnsChanged.bind(this),\n            displayedColumnsWidthChanged: this.onDisplayedColumnsWidthChanged.bind(this),\n            displayedRowsChanged: (params) => this.onDisplayedRowsChanged(params.afterScroll),\n        });\n\n        this.onDisplayedColumnsChanged();\n        this.onDisplayedColumnsWidthChanged();\n        this.onDisplayedRowsChanged();\n    }\n\n    private listenOnDomOrder(): void {\n        const isStickContainer = allStickyContainers.indexOf(this.name) >= 0;\n        if (isStickContainer) {\n            this.comp.setDomOrder(true);\n            return;\n        }\n\n        const listener = () => {\n            const isEnsureDomOrder = this.gos.get('ensureDomOrder');\n            const isPrintLayout = this.gos.isDomLayout('print');\n            this.comp.setDomOrder(isEnsureDomOrder || isPrintLayout);\n        };\n\n        this.addManagedPropertyListener('domLayout', listener);\n        listener();\n    }\n\n    // when editing a pinned row, if the cell is half outside the scrollable area, the browser can\n    // scroll the column into view. we do not want this, the pinned sections should never scroll.\n    // so we listen to scrolls on these containers and reset the scroll if we find one.\n    private stopHScrollOnPinnedRows(): void {\n        this.forContainers(['topCenter', 'stickyTopCenter', 'bottomCenter', 'stickyBottomCenter'], () => {\n            const resetScrollLeft = () => (this.eViewport.scrollLeft = 0);\n            this.addManagedElementListeners(this.eViewport, { scroll: resetScrollLeft });\n        });\n    }\n\n    public onDisplayedColumnsChanged(): void {\n        this.forContainers(['center'], () => this.onHorizontalViewportChanged());\n    }\n\n    private onDisplayedColumnsWidthChanged(): void {\n        this.forContainers(['center'], () => this.onHorizontalViewportChanged());\n    }\n    // this methods prevents the grid views from being scrolled while the dragService is being used\n    // eg. the view should not scroll up and down while dragging rows using the rowDragComp.\n    private addPreventScrollWhileDragging(): void {\n        const preventScroll = (e: TouchEvent) => {\n            if (this.dragService.isDragging()) {\n                if (e.cancelable) {\n                    e.preventDefault();\n                }\n            }\n        };\n\n        this.eContainer.addEventListener('touchmove', preventScroll, { passive: false });\n        this.addDestroyFunc(() => this.eContainer.removeEventListener('touchmove', preventScroll));\n    }\n\n    // this gets called whenever a change in the viewport, so we can inform column controller it has to work\n    // out the virtual columns again. gets called from following locations:\n    // + ensureColVisible, scroll, init, layoutChanged, displayedColumnsChanged\n    public onHorizontalViewportChanged(afterScroll: boolean = false): void {\n        const scrollWidth = this.getCenterWidth();\n        const scrollPosition = this.getCenterViewportScrollLeft();\n\n        this.columnViewportService.setScrollPosition(scrollWidth, scrollPosition, afterScroll);\n    }\n\n    public getCenterWidth(): number {\n        return _getInnerWidth(this.eViewport);\n    }\n\n    public getCenterViewportScrollLeft(): number {\n        // we defer to a util, as how you calculated scrollLeft when doing RTL depends on the browser\n        return _getScrollLeft(this.eViewport, this.enableRtl);\n    }\n\n    public registerViewportResizeListener(listener: () => void) {\n        const unsubscribeFromResize = this.resizeObserverService.observeResize(this.eViewport, listener);\n        this.addDestroyFunc(() => unsubscribeFromResize());\n    }\n\n    public isViewportInTheDOMTree(): boolean {\n        return _isInDOM(this.eViewport);\n    }\n\n    public getViewportScrollLeft(): number {\n        return _getScrollLeft(this.eViewport, this.enableRtl);\n    }\n\n    public isHorizontalScrollShowing(): boolean {\n        const isAlwaysShowHorizontalScroll = this.gos.get('alwaysShowHorizontalScroll');\n        return isAlwaysShowHorizontalScroll || _isHorizontalScrollShowing(this.eViewport);\n    }\n\n    public getViewportElement(): HTMLElement {\n        return this.eViewport;\n    }\n\n    public setContainerTranslateX(amount: number): void {\n        this.eContainer.style.transform = `translateX(${amount}px)`;\n    }\n\n    public getHScrollPosition(): { left: number; right: number } {\n        const res = {\n            left: this.eViewport.scrollLeft,\n            right: this.eViewport.scrollLeft + this.eViewport.offsetWidth,\n        };\n        return res;\n    }\n\n    public setCenterViewportScrollLeft(value: number): void {\n        // we defer to a util, as how you calculated scrollLeft when doing RTL depends on the browser\n        _setScrollLeft(this.eViewport, value, this.enableRtl);\n    }\n\n    private isContainerVisible(): boolean {\n        const pinned = this.options.pinnedType != null;\n        return !pinned || (!!this.pinnedWidthFeature && this.pinnedWidthFeature.getWidth() > 0);\n    }\n\n    private onPinnedWidthChanged(): void {\n        const visible = this.isContainerVisible();\n        if (this.visible != visible) {\n            this.visible = visible;\n            this.onDisplayedRowsChanged();\n        }\n    }\n\n    private onDisplayedRowsChanged(afterScroll: boolean = false): void {\n        const rows = this.options.getRowCtrls(this.rowRenderer);\n        if (!this.visible || rows.length === 0) {\n            this.comp.setRowCtrls({ rowCtrls: this.EMPTY_CTRLS });\n            return;\n        }\n\n        const printLayout = this.gos.isDomLayout('print');\n        const embedFullWidthRows = this.gos.get('embedFullWidthRows');\n        const embedFW = embedFullWidthRows || printLayout;\n\n        // this list contains either all pinned top, center or pinned bottom rows\n        // this filters out rows not for this container, eg if it's a full with row, but we are not full with container\n        const rowsThisContainer = rows.filter((rowCtrl) => {\n            // this just justifies if the ctrl is in the correct place, this will be fed with zombie rows by the\n            // row renderer, so should not block them as they still need to animate -  the row renderer\n            // will clean these up when they finish animating\n            const fullWidthRow = rowCtrl.isFullWidth();\n\n            const match = this.options.fullWidth ? !embedFW && fullWidthRow : embedFW || !fullWidthRow;\n\n            return match;\n        });\n\n        this.comp.setRowCtrls({ rowCtrls: rowsThisContainer, useFlushSync: afterScroll });\n    }\n}\n", "import type { BeanCollection } from '../../context/context';\nimport { RowComp } from '../../rendering/row/rowComp';\nimport type { RowCtrl, RowCtrlInstanceId } from '../../rendering/row/rowCtrl';\nimport { _setAriaRole } from '../../utils/aria';\nimport { _ensureDomOrder, _insertWithDomOrder } from '../../utils/dom';\nimport { _getAllValuesInObject } from '../../utils/object';\nimport type { ComponentSelector } from '../../widgets/component';\nimport { Component, RefPlaceholder } from '../../widgets/component';\nimport type { IRowContainerComp, RowContainerName, RowContainerOptions } from './rowContainerCtrl';\nimport { RowContainerCtrl, _getRowContainerOptions } from './rowContainerCtrl';\n\nfunction templateFactory(options: RowContainerOptions): string {\n    let res: string;\n    if (options.type === 'center') {\n        res =\n            /* html */\n            `<div class=\"${options.viewport}\" data-ref=\"eViewport\" role=\"presentation\">\n                <div class=\"${options.container}\" data-ref=\"eContainer\"></div>\n            </div>`;\n    } else {\n        res = /* html */ `<div class=\"${options.container}\" data-ref=\"eContainer\"></div>`;\n    }\n\n    return res;\n}\n\nexport class RowContainerComp extends Component {\n    private beans: BeanCollection;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.beans = beans;\n    }\n\n    private readonly eViewport: HTMLElement = RefPlaceholder;\n    private readonly eContainer: HTMLElement = RefPlaceholder;\n\n    private readonly name: RowContainerName;\n    private readonly options: RowContainerOptions;\n\n    private rowComps: { [id: RowCtrlInstanceId]: RowComp } = {};\n\n    // we ensure the rows are in the dom in the order in which they appear on screen when the\n    // user requests this via gridOptions.ensureDomOrder. this is typically used for screen readers.\n    private domOrder: boolean;\n    private lastPlacedElement: HTMLElement | null;\n\n    constructor() {\n        super();\n        this.name = Component.elementGettingCreated.getAttribute('name') as RowContainerName;\n        this.options = _getRowContainerOptions(this.name);\n        this.setTemplate(templateFactory(this.options));\n    }\n\n    public postConstruct(): void {\n        const compProxy: IRowContainerComp = {\n            setViewportHeight: (height) => (this.eViewport.style.height = height),\n            setRowCtrls: ({ rowCtrls }) => this.setRowCtrls(rowCtrls),\n            setDomOrder: (domOrder) => {\n                this.domOrder = domOrder;\n            },\n            setContainerWidth: (width) => (this.eContainer.style.width = width),\n            setOffsetTop: (offset) => (this.eContainer.style.transform = `translateY(${offset})`),\n        };\n\n        const ctrl = this.createManagedBean(new RowContainerCtrl(this.name));\n        ctrl.setComp(compProxy, this.eContainer, this.eViewport);\n    }\n\n    public override destroy(): void {\n        // destroys all row comps\n        this.setRowCtrls([]);\n        super.destroy();\n    }\n\n    private setRowCtrls(rowCtrls: RowCtrl[]): void {\n        const oldRows = { ...this.rowComps };\n        this.rowComps = {};\n\n        this.lastPlacedElement = null;\n\n        const processRow = (rowCon: RowCtrl) => {\n            const instanceId = rowCon.getInstanceId();\n            const existingRowComp = oldRows[instanceId];\n\n            if (existingRowComp) {\n                this.rowComps[instanceId] = existingRowComp;\n                delete oldRows[instanceId];\n                this.ensureDomOrder(existingRowComp.getGui());\n            } else {\n                // don't create new row comps for rows which are not displayed. still want the existing components\n                // as they may be animating out.\n                if (!rowCon.getRowNode().displayed) {\n                    return;\n                }\n                const rowComp = new RowComp(rowCon, this.beans, this.options.type);\n                this.rowComps[instanceId] = rowComp;\n                this.appendRow(rowComp.getGui());\n            }\n        };\n\n        rowCtrls.forEach(processRow);\n        _getAllValuesInObject(oldRows).forEach((oldRowComp) => {\n            this.eContainer.removeChild(oldRowComp.getGui());\n            oldRowComp.destroy();\n        });\n\n        _setAriaRole(this.eContainer, 'rowgroup');\n    }\n\n    public appendRow(element: HTMLElement) {\n        if (this.domOrder) {\n            _insertWithDomOrder(this.eContainer, element, this.lastPlacedElement);\n        } else {\n            this.eContainer.appendChild(element);\n        }\n        this.lastPlacedElement = element;\n    }\n\n    private ensureDomOrder(eRow: HTMLElement): void {\n        if (this.domOrder) {\n            _ensureDomOrder(this.eContainer, eRow, this.lastPlacedElement);\n            this.lastPlacedElement = eRow;\n        }\n    }\n}\n\nexport const RowContainerSelector: ComponentSelector = {\n    selector: 'AG-ROW-CONTAINER',\n    component: RowContainerComp,\n};\n", "import type { BeanCollection } from '../context/context';\nimport { GridHeaderSelector } from '../headerRendering/gridHeaderComp';\nimport type { IRangeService } from '../interfaces/IRangeService';\nimport type { ResizeObserverService } from '../misc/resizeObserverService';\nimport { OverlayWrapperSelector } from '../rendering/overlays/overlayWrapperComponent';\nimport { LayoutCssClasses } from '../styling/layoutFeature';\nimport { _setAriaColCount, _setAriaMultiSelectable, _setAriaRowCount } from '../utils/aria';\nimport type { ComponentSelector } from '../widgets/component';\nimport { Component, RefPlaceholder } from '../widgets/component';\nimport { FakeHScrollSelector } from './fakeHScrollComp';\nimport { FakeVScrollSelector } from './fakeVScrollComp';\nimport type { IGridBodyComp, RowAnimationCssClasses } from './gridBodyCtrl';\nimport { CSS_CLASS_FORCE_VERTICAL_SCROLL, GridBodyCtrl } from './gridBodyCtrl';\nimport { RowContainerSelector } from './rowContainer/rowContainerComp';\nimport type { RowContainerName } from './rowContainer/rowContainerCtrl';\n\nfunction makeRowContainers(names: RowContainerName[]): string {\n    return names.map((name) => `<ag-row-container name=\"${name}\"></ag-row-container>`).join('');\n}\nconst GRID_BODY_TEMPLATE =\n    /* html */\n    `<div class=\"ag-root ag-unselectable\" role=\"treegrid\">\n        <ag-header-root></ag-header-root>\n        <div class=\"ag-floating-top\" data-ref=\"eTop\" role=\"presentation\">\n            ${makeRowContainers(['topLeft', 'topCenter', 'topRight', 'topFullWidth'])}\n        </div>\n        <div class=\"ag-body\" data-ref=\"eBody\" role=\"presentation\">\n            <div class=\"ag-body-viewport\" data-ref=\"eBodyViewport\" role=\"presentation\">\n            ${makeRowContainers(['left', 'center', 'right', 'fullWidth'])}\n            </div>\n            <ag-fake-vertical-scroll></ag-fake-vertical-scroll>\n        </div>\n        <div class=\"ag-sticky-top\" data-ref=\"eStickyTop\" role=\"presentation\">\n            ${makeRowContainers(['stickyTopLeft', 'stickyTopCenter', 'stickyTopRight', 'stickyTopFullWidth'])}\n        </div>\n        <div class=\"ag-sticky-bottom\" data-ref=\"eStickyBottom\" role=\"presentation\">\n            ${makeRowContainers(['stickyBottomLeft', 'stickyBottomCenter', 'stickyBottomRight', 'stickyBottomFullWidth'])}\n        </div>\n        <div class=\"ag-floating-bottom\" data-ref=\"eBottom\" role=\"presentation\">\n            ${makeRowContainers(['bottomLeft', 'bottomCenter', 'bottomRight', 'bottomFullWidth'])}\n        </div>\n        <ag-fake-horizontal-scroll></ag-fake-horizontal-scroll>\n        <ag-overlay-wrapper></ag-overlay-wrapper>\n    </div>`;\n\nexport class GridBodyComp extends Component {\n    private resizeObserverService: ResizeObserverService;\n    private rangeService?: IRangeService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.resizeObserverService = beans.resizeObserverService;\n        this.rangeService = beans.rangeService;\n    }\n\n    private readonly eBodyViewport: HTMLElement = RefPlaceholder;\n    private readonly eStickyTop: HTMLElement = RefPlaceholder;\n    private readonly eStickyBottom: HTMLElement = RefPlaceholder;\n    private readonly eTop: HTMLElement = RefPlaceholder;\n    private readonly eBottom: HTMLElement = RefPlaceholder;\n    private readonly eBody: HTMLElement = RefPlaceholder;\n\n    private ctrl: GridBodyCtrl;\n\n    constructor() {\n        super(GRID_BODY_TEMPLATE, [\n            OverlayWrapperSelector,\n            FakeHScrollSelector,\n            FakeVScrollSelector,\n            GridHeaderSelector,\n            RowContainerSelector,\n        ]);\n    }\n\n    public postConstruct() {\n        const setHeight = (height: number, element: HTMLElement) => {\n            const heightString = `${height}px`;\n            element.style.minHeight = heightString;\n            element.style.height = heightString;\n        };\n\n        const compProxy: IGridBodyComp = {\n            setRowAnimationCssOnBodyViewport: (cssClass, animate) =>\n                this.setRowAnimationCssOnBodyViewport(cssClass, animate),\n            setColumnCount: (count) => _setAriaColCount(this.getGui(), count),\n            setRowCount: (count) => _setAriaRowCount(this.getGui(), count),\n            setTopHeight: (height) => setHeight(height, this.eTop),\n            setBottomHeight: (height) => setHeight(height, this.eBottom),\n            setTopDisplay: (display) => (this.eTop.style.display = display),\n            setBottomDisplay: (display) => (this.eBottom.style.display = display),\n            setStickyTopHeight: (height) => (this.eStickyTop.style.height = height),\n            setStickyTopTop: (top) => (this.eStickyTop.style.top = top),\n            setStickyTopWidth: (width) => (this.eStickyTop.style.width = width),\n            setStickyBottomHeight: (height) => (this.eStickyBottom.style.height = height),\n            setStickyBottomBottom: (bottom) => (this.eStickyBottom.style.bottom = bottom),\n            setStickyBottomWidth: (width) => (this.eStickyBottom.style.width = width),\n            setColumnMovingCss: (cssClass, flag) => this.addOrRemoveCssClass(cssClass, flag),\n            updateLayoutClasses: (cssClass, params) => {\n                const classLists = [this.eBodyViewport.classList, this.eBody.classList];\n\n                classLists.forEach((classList) => {\n                    classList.toggle(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);\n                    classList.toggle(LayoutCssClasses.NORMAL, params.normal);\n                    classList.toggle(LayoutCssClasses.PRINT, params.print);\n                });\n\n                this.addOrRemoveCssClass(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);\n                this.addOrRemoveCssClass(LayoutCssClasses.NORMAL, params.normal);\n                this.addOrRemoveCssClass(LayoutCssClasses.PRINT, params.print);\n            },\n            setAlwaysVerticalScrollClass: (cssClass, on) =>\n                this.eBodyViewport.classList.toggle(CSS_CLASS_FORCE_VERTICAL_SCROLL, on),\n            registerBodyViewportResizeListener: (listener) => {\n                const unsubscribeFromResize = this.resizeObserverService.observeResize(this.eBodyViewport, listener);\n                this.addDestroyFunc(() => unsubscribeFromResize());\n            },\n            setPinnedTopBottomOverflowY: (overflow) =>\n                (this.eTop.style.overflowY = this.eBottom.style.overflowY = overflow),\n            setCellSelectableCss: (cssClass: string, selectable: boolean) => {\n                [this.eTop, this.eBodyViewport, this.eBottom].forEach((ct) =>\n                    ct.classList.toggle(cssClass, selectable)\n                );\n            },\n            setBodyViewportWidth: (width) => (this.eBodyViewport.style.width = width),\n        };\n\n        this.ctrl = this.createManagedBean(new GridBodyCtrl());\n        this.ctrl.setComp(\n            compProxy,\n            this.getGui(),\n            this.eBodyViewport,\n            this.eTop,\n            this.eBottom,\n            this.eStickyTop,\n            this.eStickyBottom\n        );\n\n        if (\n            (this.rangeService && this.gos.get('enableRangeSelection')) ||\n            this.gos.get('rowSelection') === 'multiple'\n        ) {\n            _setAriaMultiSelectable(this.getGui(), true);\n        }\n    }\n\n    private setRowAnimationCssOnBodyViewport(cssClass: RowAnimationCssClasses, animateRows: boolean): void {\n        const bodyViewportClassList = this.eBodyViewport.classList;\n        bodyViewportClassList.toggle('ag-row-animation' as RowAnimationCssClasses, animateRows);\n        bodyViewportClassList.toggle('ag-row-no-animation' as RowAnimationCssClasses, !animateRows);\n    }\n\n    public getFloatingTopBottom(): HTMLElement[] {\n        return [this.eTop, this.eBottom];\n    }\n}\nexport const GridBodySelector: ComponentSelector = {\n    selector: 'AG-GRID-BODY',\n    component: GridBodyComp,\n};\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { CtrlsService } from '../ctrlsService';\nimport type { ScrollVisibilityChangedEvent } from '../events';\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\nimport type { ColumnAnimationService } from '../rendering/columnAnimationService';\n\nexport interface SetScrollsVisibleParams {\n    horizontalScrollShowing: boolean;\n    verticalScrollShowing: boolean;\n}\n\nexport class ScrollVisibleService extends BeanStub implements NamedBean {\n    beanName = 'scrollVisibleService' as const;\n\n    private ctrlsService: CtrlsService;\n    private columnAnimationService: ColumnAnimationService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.ctrlsService = beans.ctrlsService;\n        this.columnAnimationService = beans.columnAnimationService;\n    }\n\n    private horizontalScrollShowing: boolean;\n    private verticalScrollShowing: boolean;\n\n    public postConstruct(): void {\n        this.addManagedEventListeners({\n            displayedColumnsChanged: this.onDisplayedColumnsChanged.bind(this),\n            displayedColumnsWidthChanged: this.onDisplayedColumnsWidthChanged.bind(this),\n        });\n    }\n\n    public onDisplayedColumnsChanged(): void {\n        this.update();\n    }\n\n    private onDisplayedColumnsWidthChanged(): void {\n        this.update();\n    }\n\n    private update(): void {\n        // Because of column animation, if user removes cols anywhere except at the RHS,\n        // then the cols on the RHS will animate to the left to fill the gap. This animation\n        // means just after the cols are removed, the remaining cols are still in the original\n        // location at the start of the animation, so pre animation the H scrollbar is still\n        // needed, but post animation it is not. So if animation is active, we only update\n        // after the animation has ended.\n        if (this.columnAnimationService.isActive()) {\n            this.columnAnimationService.executeLaterVMTurn(() => {\n                this.columnAnimationService.executeLaterVMTurn(() => this.updateImpl());\n            });\n        } else {\n            this.updateImpl();\n        }\n    }\n\n    private updateImpl(): void {\n        const centerRowCtrl = this.ctrlsService.get('center');\n\n        if (!centerRowCtrl || this.columnAnimationService.isActive()) {\n            return;\n        }\n\n        const params: SetScrollsVisibleParams = {\n            horizontalScrollShowing: centerRowCtrl.isHorizontalScrollShowing(),\n            verticalScrollShowing: this.isVerticalScrollShowing(),\n        };\n\n        this.setScrollsVisible(params);\n    }\n\n    public setScrollsVisible(params: SetScrollsVisibleParams): void {\n        const atLeastOneDifferent =\n            this.horizontalScrollShowing !== params.horizontalScrollShowing ||\n            this.verticalScrollShowing !== params.verticalScrollShowing;\n\n        if (atLeastOneDifferent) {\n            this.horizontalScrollShowing = params.horizontalScrollShowing;\n            this.verticalScrollShowing = params.verticalScrollShowing;\n\n            const event: WithoutGridCommon<ScrollVisibilityChangedEvent> = {\n                type: 'scrollVisibilityChanged',\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    // used by pagination service - to know page height\n    public isHorizontalScrollShowing(): boolean {\n        return this.horizontalScrollShowing;\n    }\n\n    // used by header container\n    public isVerticalScrollShowing(): boolean {\n        return this.verticalScrollShowing;\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { CtrlsService } from '../ctrlsService';\nimport type { DraggingEvent } from '../dragAndDrop/dragAndDropService';\nimport type { CellPosition } from '../entities/cellPositionUtils';\nimport { CellCtrl } from '../rendering/cell/cellCtrl';\nimport { _getCtrlForEventTarget } from '../utils/event';\nimport { _exists } from '../utils/generic';\nimport { NumberSequence } from '../utils/numberSequence';\n\nconst GRID_DOM_KEY = '__ag_grid_instance';\nexport class MouseEventService extends BeanStub implements NamedBean {\n    beanName = 'mouseEventService' as const;\n\n    private ctrlsService: CtrlsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.ctrlsService = beans.ctrlsService;\n    }\n\n    private static gridInstanceSequence = new NumberSequence();\n\n    private gridInstanceId = MouseEventService.gridInstanceSequence.next();\n\n    // we put the instance id onto the main DOM element. this is used for events, when grids are inside grids,\n    // so the grid can work out if the even came from this grid or a grid inside this one. see the ctrl+v logic\n    // for where this is used.\n    public stampTopLevelGridCompWithGridInstance(eGridDiv: HTMLElement): void {\n        (eGridDiv as any)[GRID_DOM_KEY] = this.gridInstanceId;\n    }\n\n    public getRenderedCellForEvent(event: Event): CellCtrl | null {\n        return _getCtrlForEventTarget<CellCtrl>(this.gos, event.target, CellCtrl.DOM_DATA_KEY_CELL_CTRL);\n    }\n\n    // walks the path of the event, and returns true if this grid is the first one that it finds. if doing\n    // master / detail grids, and a child grid is found, then it returns false. this stops things like copy/paste\n    // getting executed on many grids at the same time.\n    public isEventFromThisGrid(event: UIEvent): boolean {\n        const res = this.isElementInThisGrid(event.target as HTMLElement);\n        return res;\n    }\n\n    public isElementInThisGrid(element: HTMLElement): boolean {\n        let pointer: HTMLElement | null = element;\n        while (pointer) {\n            const instanceId = (pointer as any)[GRID_DOM_KEY];\n            if (_exists(instanceId)) {\n                const eventFromThisGrid = instanceId === this.gridInstanceId;\n                return eventFromThisGrid;\n            }\n            pointer = pointer.parentElement;\n        }\n        return false;\n    }\n\n    public getCellPositionForEvent(event: MouseEvent | KeyboardEvent): CellPosition | null {\n        const cellComp = this.getRenderedCellForEvent(event);\n        return cellComp ? cellComp.getCellPosition() : null;\n    }\n\n    public getNormalisedPosition(event: MouseEvent | DraggingEvent): { x: number; y: number } {\n        const gridPanelHasScrolls = this.gos.isDomLayout('normal');\n        const e = event as MouseEvent;\n        let x: number;\n        let y: number;\n\n        if (e.clientX != null || e.clientY != null) {\n            x = e.clientX;\n            y = e.clientY;\n        } else {\n            x = e.x;\n            y = e.y;\n        }\n\n        if (gridPanelHasScrolls) {\n            const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n            const vRange = gridBodyCon.getScrollFeature().getVScrollPosition();\n            const hRange = gridBodyCon.getScrollFeature().getHScrollPosition();\n            x += hRange.left;\n            y += vRange.top;\n        }\n\n        return { x, y };\n    }\n}\n", "import type { CellNavigationService } from '../cellNavigationService';\nimport type { ColumnModel } from '../columns/columnModel';\nimport type { VisibleColsService } from '../columns/visibleColsService';\nimport { KeyCode } from '../constants/keyCode';\nimport type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { CtrlsService } from '../ctrlsService';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { CellPosition } from '../entities/cellPositionUtils';\nimport type { RowPosition, RowPositionUtils } from '../entities/rowPositionUtils';\nimport type { FullWidthRowFocusedEvent } from '../events';\nimport type { FocusService } from '../focusService';\nimport type { HeaderNavigationService } from '../headerRendering/common/headerNavigationService';\nimport type { IRangeService } from '../interfaces/IRangeService';\nimport type { NavigateToNextCellParams, TabToNextCellParams } from '../interfaces/iCallbackParams';\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\nimport type { IRowModel } from '../interfaces/iRowModel';\nimport type { PageBoundsService } from '../pagination/pageBoundsService';\nimport type { PinnedRowModel } from '../pinnedRowModel/pinnedRowModel';\nimport { CellCtrl } from '../rendering/cell/cellCtrl';\nimport { RowCtrl } from '../rendering/row/rowCtrl';\nimport type { RowRenderer } from '../rendering/rowRenderer';\nimport { _last } from '../utils/array';\nimport { _throttle, _warnOnce } from '../utils/function';\nimport { _exists, _missing } from '../utils/generic';\nimport type { GridBodyCtrl } from './gridBodyCtrl';\nimport type { MouseEventService } from './mouseEventService';\n\ninterface NavigateParams {\n    /** The rowIndex to vertically scroll to. */\n    scrollIndex: number;\n    /** The position to put scroll index. */\n    scrollType: 'top' | 'bottom' | null;\n    /**  The column to horizontally scroll to. */\n    scrollColumn: AgColumn | null;\n    /** For page up/down, we want to scroll to one row/column but focus another (ie. scrollRow could be stub). */\n    focusIndex: number;\n    focusColumn: AgColumn;\n    isAsync?: boolean;\n}\n\nexport class NavigationService extends BeanStub implements NamedBean {\n    beanName = 'navigationService' as const;\n\n    private mouseEventService: MouseEventService;\n    private pageBoundsService: PageBoundsService;\n    private focusService: FocusService;\n    private columnModel: ColumnModel;\n    private visibleColsService: VisibleColsService;\n    private rowModel: IRowModel;\n    private ctrlsService: CtrlsService;\n    private rowRenderer: RowRenderer;\n    private headerNavigationService: HeaderNavigationService;\n    private rowPositionUtils: RowPositionUtils;\n    private cellNavigationService: CellNavigationService;\n    private pinnedRowModel: PinnedRowModel;\n    private rangeService?: IRangeService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.mouseEventService = beans.mouseEventService;\n        this.pageBoundsService = beans.pageBoundsService;\n        this.focusService = beans.focusService;\n        this.columnModel = beans.columnModel;\n        this.visibleColsService = beans.visibleColsService;\n        this.rowModel = beans.rowModel;\n        this.ctrlsService = beans.ctrlsService;\n        this.rowRenderer = beans.rowRenderer;\n        this.headerNavigationService = beans.headerNavigationService;\n        this.rowPositionUtils = beans.rowPositionUtils;\n        this.cellNavigationService = beans.cellNavigationService;\n        this.pinnedRowModel = beans.pinnedRowModel;\n        this.rangeService = beans.rangeService;\n    }\n\n    private gridBodyCon: GridBodyCtrl;\n\n    constructor() {\n        super();\n        this.onPageDown = _throttle(this.onPageDown, 100);\n        this.onPageUp = _throttle(this.onPageUp, 100);\n    }\n\n    public postConstruct(): void {\n        this.ctrlsService.whenReady((p) => {\n            this.gridBodyCon = p.gridBodyCtrl;\n        });\n    }\n\n    public handlePageScrollingKey(event: KeyboardEvent, fromFullWidth = false): boolean {\n        const key = event.key;\n        const alt = event.altKey;\n        const ctrl = event.ctrlKey || event.metaKey;\n        const rangeServiceShouldHandleShift = !!this.rangeService && event.shiftKey;\n\n        // home and end can be processed without knowing the currently selected cell, this can occur for full width rows.\n        const currentCell: CellPosition | null = this.mouseEventService.getCellPositionForEvent(event);\n\n        let processed = false;\n\n        switch (key) {\n            case KeyCode.PAGE_HOME:\n            case KeyCode.PAGE_END:\n                // handle home and end when ctrl & alt are NOT pressed\n                if (!ctrl && !alt) {\n                    this.onHomeOrEndKey(key);\n                    processed = true;\n                }\n                break;\n            case KeyCode.LEFT:\n            case KeyCode.RIGHT:\n            case KeyCode.UP:\n            case KeyCode.DOWN:\n                if (!currentCell) {\n                    return false;\n                }\n                // handle when ctrl is pressed only, if shift is pressed\n                // it will be handled by the rangeService\n                if (ctrl && !alt && !rangeServiceShouldHandleShift) {\n                    this.onCtrlUpDownLeftRight(key, currentCell);\n                    processed = true;\n                }\n                break;\n            case KeyCode.PAGE_DOWN:\n            case KeyCode.PAGE_UP:\n                // handle page up and page down when ctrl & alt are NOT pressed\n                if (!ctrl && !alt) {\n                    processed = this.handlePageUpDown(key, currentCell, fromFullWidth);\n                }\n                break;\n        }\n\n        if (processed) {\n            event.preventDefault();\n        }\n\n        return processed;\n    }\n\n    private handlePageUpDown(key: string, currentCell: CellPosition | null, fromFullWidth: boolean): boolean {\n        if (fromFullWidth) {\n            currentCell = this.focusService.getFocusedCell();\n        }\n\n        if (!currentCell) {\n            return false;\n        }\n\n        if (key === KeyCode.PAGE_UP) {\n            this.onPageUp(currentCell);\n        } else {\n            this.onPageDown(currentCell);\n        }\n\n        return true;\n    }\n\n    private navigateTo(navigateParams: NavigateParams): void {\n        const { scrollIndex, scrollType, scrollColumn, focusIndex, focusColumn } = navigateParams;\n\n        if (_exists(scrollColumn) && !scrollColumn.isPinned()) {\n            this.gridBodyCon.getScrollFeature().ensureColumnVisible(scrollColumn);\n        }\n\n        if (_exists(scrollIndex)) {\n            this.gridBodyCon.getScrollFeature().ensureIndexVisible(scrollIndex, scrollType);\n        }\n\n        // setFocusedCell relies on the browser default focus behavior to scroll the focused cell into view,\n        // however, this behavior will cause the cell border to be cut off, or if we have sticky rows, the\n        // cell will be completely hidden, so we call ensureIndexVisible without a position to guarantee\n        // minimal scroll to get the row into view.\n        if (!navigateParams.isAsync) {\n            this.gridBodyCon.getScrollFeature().ensureIndexVisible(focusIndex);\n        }\n\n        // if we don't do this, the range will be left on the last cell, which will leave the last focused cell\n        // highlighted.\n        this.focusService.setFocusedCell({\n            rowIndex: focusIndex,\n            column: focusColumn,\n            rowPinned: null,\n            forceBrowserFocus: true,\n        });\n\n        this.rangeService?.setRangeToCell({ rowIndex: focusIndex, rowPinned: null, column: focusColumn });\n    }\n\n    // this method is throttled, see the `constructor`\n    private onPageDown(gridCell: CellPosition): void {\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const scrollPosition = gridBodyCon.getScrollFeature().getVScrollPosition();\n        const pixelsInOnePage = this.getViewportHeight();\n\n        const pagingPixelOffset = this.pageBoundsService.getPixelOffset();\n\n        const currentPageBottomPixel = scrollPosition.top + pixelsInOnePage;\n        const currentPageBottomRow = this.rowModel.getRowIndexAtPixel(currentPageBottomPixel + pagingPixelOffset);\n\n        if (this.columnModel.isAutoRowHeightActive()) {\n            this.navigateToNextPageWithAutoHeight(gridCell, currentPageBottomRow);\n        } else {\n            this.navigateToNextPage(gridCell, currentPageBottomRow);\n        }\n    }\n\n    // this method is throttled, see the `constructor`\n    private onPageUp(gridCell: CellPosition): void {\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const scrollPosition = gridBodyCon.getScrollFeature().getVScrollPosition();\n\n        const pagingPixelOffset = this.pageBoundsService.getPixelOffset();\n\n        const currentPageTopPixel = scrollPosition.top;\n        const currentPageTopRow = this.rowModel.getRowIndexAtPixel(currentPageTopPixel + pagingPixelOffset);\n\n        if (this.columnModel.isAutoRowHeightActive()) {\n            this.navigateToNextPageWithAutoHeight(gridCell, currentPageTopRow, true);\n        } else {\n            this.navigateToNextPage(gridCell, currentPageTopRow, true);\n        }\n    }\n\n    private navigateToNextPage(gridCell: CellPosition, scrollIndex: number, up: boolean = false): void {\n        const pixelsInOnePage = this.getViewportHeight();\n        const firstRow = this.pageBoundsService.getFirstRow();\n        const lastRow = this.pageBoundsService.getLastRow();\n        const pagingPixelOffset = this.pageBoundsService.getPixelOffset();\n        const currentRowNode = this.rowModel.getRow(gridCell.rowIndex);\n\n        const rowPixelDiff = up\n            ? // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\n              currentRowNode?.rowHeight! - pixelsInOnePage - pagingPixelOffset\n            : pixelsInOnePage - pagingPixelOffset;\n\n        // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\n        const nextCellPixel = currentRowNode?.rowTop! + rowPixelDiff;\n\n        let focusIndex = this.rowModel.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);\n\n        if (focusIndex === gridCell.rowIndex) {\n            const diff = up ? -1 : 1;\n            scrollIndex = focusIndex = gridCell.rowIndex + diff;\n        }\n\n        let scrollType: 'top' | 'bottom';\n\n        if (up) {\n            scrollType = 'bottom';\n            if (focusIndex < firstRow) {\n                focusIndex = firstRow;\n            }\n            if (scrollIndex < firstRow) {\n                scrollIndex = firstRow;\n            }\n        } else {\n            scrollType = 'top';\n            if (focusIndex > lastRow) {\n                focusIndex = lastRow;\n            }\n            if (scrollIndex > lastRow) {\n                scrollIndex = lastRow;\n            }\n        }\n\n        if (this.isRowTallerThanView(focusIndex)) {\n            scrollIndex = focusIndex;\n            scrollType = 'top';\n        }\n\n        this.navigateTo({\n            scrollIndex,\n            scrollType,\n            scrollColumn: null,\n            focusIndex,\n            focusColumn: gridCell.column as AgColumn,\n        });\n    }\n\n    private navigateToNextPageWithAutoHeight(gridCell: CellPosition, scrollIndex: number, up: boolean = false): void {\n        // because autoHeight will calculate the height of rows after scroll\n        // first we scroll towards the required point, then we add a small\n        // delay to allow the height to be recalculated, check which index\n        // should be focused and then finally navigate to that index.\n        // TODO: we should probably have an event fired once to scrollbar has\n        // settled and all rowHeights have been calculated instead of relying\n        // on a setTimeout of 50ms.\n        this.navigateTo({\n            scrollIndex: scrollIndex,\n            scrollType: up ? 'bottom' : 'top',\n            scrollColumn: null,\n            focusIndex: scrollIndex,\n            focusColumn: gridCell.column as AgColumn,\n        });\n        setTimeout(() => {\n            const focusIndex = this.getNextFocusIndexForAutoHeight(gridCell, up);\n\n            this.navigateTo({\n                scrollIndex: scrollIndex,\n                scrollType: up ? 'bottom' : 'top',\n                scrollColumn: null,\n                focusIndex: focusIndex,\n                focusColumn: gridCell.column as AgColumn,\n                isAsync: true,\n            });\n        }, 50);\n    }\n\n    private getNextFocusIndexForAutoHeight(gridCell: CellPosition, up: boolean = false): number {\n        const step = up ? -1 : 1;\n        const pixelsInOnePage = this.getViewportHeight();\n        const lastRowIndex = this.pageBoundsService.getLastRow();\n\n        let pixelSum = 0;\n        let currentIndex = gridCell.rowIndex;\n\n        while (currentIndex >= 0 && currentIndex <= lastRowIndex) {\n            const currentCell = this.rowModel.getRow(currentIndex);\n\n            if (currentCell) {\n                const currentCellHeight = currentCell.rowHeight ?? 0;\n\n                if (pixelSum + currentCellHeight > pixelsInOnePage) {\n                    break;\n                }\n                pixelSum += currentCellHeight;\n            }\n\n            currentIndex += step;\n        }\n\n        return Math.max(0, Math.min(currentIndex, lastRowIndex));\n    }\n\n    private getViewportHeight(): number {\n        const { gridBodyCtrl, center } = this.ctrlsService.getParams();\n        const scrollPosition = gridBodyCtrl.getScrollFeature().getVScrollPosition();\n        const scrollbarWidth = this.gos.getScrollbarWidth();\n        let pixelsInOnePage = scrollPosition.bottom - scrollPosition.top;\n\n        if (center.isHorizontalScrollShowing()) {\n            pixelsInOnePage -= scrollbarWidth;\n        }\n\n        return pixelsInOnePage;\n    }\n\n    private isRowTallerThanView(rowIndex: number): boolean {\n        const rowNode = this.rowModel.getRow(rowIndex);\n        if (!rowNode) {\n            return false;\n        }\n\n        const rowHeight = rowNode.rowHeight;\n\n        if (typeof rowHeight !== 'number') {\n            return false;\n        }\n\n        return rowHeight > this.getViewportHeight();\n    }\n\n    private onCtrlUpDownLeftRight(key: string, gridCell: CellPosition): void {\n        const cellToFocus = this.cellNavigationService.getNextCellToFocus(key, gridCell, true)!;\n        const { rowIndex } = cellToFocus;\n        const column = cellToFocus.column as AgColumn;\n\n        this.navigateTo({\n            scrollIndex: rowIndex,\n            scrollType: null,\n            scrollColumn: column,\n            focusIndex: rowIndex,\n            focusColumn: column,\n        });\n    }\n\n    // home brings focus to top left cell, end brings focus to bottom right, grid scrolled to bring\n    // same cell into view (which means either scroll all the way up, or all the way down).\n    private onHomeOrEndKey(key: string): void {\n        const homeKey = key === KeyCode.PAGE_HOME;\n        const allColumns: AgColumn[] = this.visibleColsService.getAllCols();\n        const columnToSelect = homeKey ? allColumns[0] : _last(allColumns);\n        const scrollIndex = homeKey ? this.pageBoundsService.getFirstRow() : this.pageBoundsService.getLastRow();\n\n        this.navigateTo({\n            scrollIndex: scrollIndex,\n            scrollType: null,\n            scrollColumn: columnToSelect,\n            focusIndex: scrollIndex,\n            focusColumn: columnToSelect,\n        });\n    }\n\n    // result of keyboard event\n    public onTabKeyDown(previous: CellCtrl | RowCtrl, keyboardEvent: KeyboardEvent): void {\n        const backwards = keyboardEvent.shiftKey;\n        const movedToNextCell = this.tabToNextCellCommon(previous, backwards, keyboardEvent);\n\n        if (movedToNextCell !== false) {\n            // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default\n            // to the normal tabbing so user can exit the grid.\n            if (movedToNextCell) {\n                keyboardEvent.preventDefault();\n            }\n            return;\n        }\n\n        // if we didn't move to next cell, then need to tab out of the cells, ie to the header (if going\n        // backwards)\n        if (backwards) {\n            const { rowIndex, rowPinned } = previous.getRowPosition();\n            const firstRow = rowPinned ? rowIndex === 0 : rowIndex === this.pageBoundsService.getFirstRow();\n            if (firstRow) {\n                if (this.gos.get('headerHeight') === 0 || this.gos.get('suppressHeaderFocus')) {\n                    this.focusService.focusNextGridCoreContainer(true, true);\n                } else {\n                    keyboardEvent.preventDefault();\n                    this.focusService.focusPreviousFromFirstCell(keyboardEvent);\n                }\n            }\n        } else {\n            // if the case it's a popup editor, the focus is on the editor and not the previous cell.\n            // in order for the tab navigation to work, we need to focus the browser back onto the\n            // previous cell.\n            if (previous instanceof CellCtrl) {\n                previous.focusCell(true);\n            }\n\n            if (this.focusService.focusNextGridCoreContainer(backwards)) {\n                keyboardEvent.preventDefault();\n            }\n        }\n    }\n\n    // comes from API\n    public tabToNextCell(backwards: boolean, event?: KeyboardEvent): boolean {\n        const focusedCell = this.focusService.getFocusedCell();\n        // if no focus, then cannot navigate\n        if (!focusedCell) {\n            return false;\n        }\n\n        let cellOrRow: CellCtrl | RowCtrl | null = this.getCellByPosition(focusedCell);\n\n        // if cell is not rendered, means user has scrolled away from the cell\n        // or that the focusedCell is a Full Width Row\n        if (!cellOrRow) {\n            cellOrRow = this.rowRenderer.getRowByPosition(focusedCell);\n            if (!cellOrRow || !cellOrRow.isFullWidth()) {\n                return false;\n            }\n        }\n\n        return !!this.tabToNextCellCommon(cellOrRow, backwards, event);\n    }\n\n    private tabToNextCellCommon(\n        previous: CellCtrl | RowCtrl,\n        backwards: boolean,\n        event?: KeyboardEvent\n    ): boolean | null {\n        let editing = previous.isEditing();\n\n        // if cell is not editing, there is still chance row is editing if it's Full Row Editing\n        if (!editing && previous instanceof CellCtrl) {\n            const cell = previous as CellCtrl;\n            const row = cell.getRowCtrl();\n            if (row) {\n                editing = row.isEditing();\n            }\n        }\n\n        let res: boolean | null;\n\n        if (editing) {\n            // if we are editing, we know it's not a Full Width Row (RowComp)\n            if (this.gos.get('editType') === 'fullRow') {\n                res = this.moveToNextEditingRow(previous as CellCtrl, backwards, event);\n            } else {\n                res = this.moveToNextEditingCell(previous as CellCtrl, backwards, event);\n            }\n        } else {\n            res = this.moveToNextCellNotEditing(previous, backwards);\n        }\n\n        if (res === null) {\n            return res;\n        }\n\n        // if a cell wasn't found, it's possible that focus was moved to the header\n        return res || !!this.focusService.getFocusedHeader();\n    }\n\n    // returns null if no navigation should be performed\n    private moveToNextEditingCell(\n        previousCell: CellCtrl,\n        backwards: boolean,\n        event: KeyboardEvent | null = null\n    ): boolean | null {\n        const previousPos = previousCell.getCellPosition();\n\n        // before we stop editing, we need to focus the cell element\n        // so the grid doesn't detect that focus has left the grid\n        previousCell.getGui().focus();\n\n        // need to do this before getting next cell to edit, in case the next cell\n        // has editable function (eg colDef.editable=func() ) and it depends on the\n        // result of this cell, so need to save updates from the first edit, in case\n        // the value is referenced in the function.\n        previousCell.stopEditing();\n\n        // find the next cell to start editing\n        const nextCell = this.findNextCellToFocusOn(previousPos, backwards, true) as CellCtrl | false;\n        if (nextCell === false) {\n            return null;\n        }\n        if (nextCell == null) {\n            return false;\n        }\n\n        // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default\n        // to the normal tabbing so user can exit the grid.\n        nextCell.startEditing(null, true, event);\n        nextCell.focusCell(false);\n        return true;\n    }\n\n    // returns null if no navigation should be performed\n    private moveToNextEditingRow(\n        previousCell: CellCtrl,\n        backwards: boolean,\n        event: KeyboardEvent | null = null\n    ): boolean | null {\n        const previousPos = previousCell.getCellPosition();\n\n        // find the next cell to start editing\n        const nextCell = this.findNextCellToFocusOn(previousPos, backwards, true) as CellCtrl | false;\n        if (nextCell === false) {\n            return null;\n        }\n        if (nextCell == null) {\n            return false;\n        }\n\n        const nextPos = nextCell.getCellPosition();\n\n        const previousEditable = this.isCellEditable(previousPos);\n        const nextEditable = this.isCellEditable(nextPos);\n\n        const rowsMatch =\n            nextPos && previousPos.rowIndex === nextPos.rowIndex && previousPos.rowPinned === nextPos.rowPinned;\n\n        if (previousEditable) {\n            previousCell.setFocusOutOnEditor();\n        }\n\n        if (!rowsMatch) {\n            const pRow = previousCell.getRowCtrl();\n            pRow!.stopEditing();\n\n            const nRow = nextCell.getRowCtrl();\n            nRow!.startRowEditing(undefined, undefined, event);\n        }\n\n        if (nextEditable) {\n            nextCell.setFocusInOnEditor();\n            nextCell.focusCell();\n        } else {\n            nextCell.focusCell(true);\n        }\n\n        return true;\n    }\n\n    // returns null if no navigation should be performed\n    private moveToNextCellNotEditing(previousCell: CellCtrl | RowCtrl, backwards: boolean): boolean | null {\n        const displayedColumns = this.visibleColsService.getAllCols();\n        let cellPos: CellPosition;\n\n        if (previousCell instanceof RowCtrl) {\n            cellPos = {\n                ...previousCell.getRowPosition(),\n                column: backwards ? displayedColumns[0] : _last(displayedColumns),\n            };\n        } else {\n            cellPos = previousCell.getCellPosition();\n        }\n        // find the next cell to start editing\n        const nextCell = this.findNextCellToFocusOn(cellPos, backwards, false);\n\n        // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default\n        // to the normal tabbing so user can exit the grid.\n        if (nextCell === false) {\n            return null;\n        }\n        if (nextCell instanceof CellCtrl) {\n            nextCell.focusCell(true);\n        } else if (nextCell) {\n            return this.tryToFocusFullWidthRow(nextCell.getRowPosition(), backwards);\n        }\n\n        return _exists(nextCell);\n    }\n\n    /**\n     * called by the cell, when tab is pressed while editing.\n     * @return: RenderedCell when navigation successful, false if navigation should not be performed, otherwise null\n     */\n    private findNextCellToFocusOn(\n        previousPosition: CellPosition,\n        backwards: boolean,\n        startEditing: boolean\n    ): CellCtrl | RowCtrl | null | false {\n        let nextPosition: CellPosition | null | undefined = previousPosition;\n\n        while (true) {\n            if (previousPosition !== nextPosition) {\n                previousPosition = nextPosition;\n            }\n\n            if (!backwards) {\n                nextPosition = this.getLastCellOfColSpan(nextPosition);\n            }\n            nextPosition = this.cellNavigationService.getNextTabbedCell(nextPosition, backwards);\n\n            // allow user to override what cell to go to next\n            const userFunc = this.gos.getCallback('tabToNextCell');\n\n            if (_exists(userFunc)) {\n                const params: WithoutGridCommon<TabToNextCellParams> = {\n                    backwards: backwards,\n                    editing: startEditing,\n                    previousCellPosition: previousPosition,\n                    nextCellPosition: nextPosition ? nextPosition : null,\n                };\n                const userResult = userFunc(params);\n                if (userResult === true || userResult === null) {\n                    if (userResult === null) {\n                        _warnOnce(\n                            'Returning `null` from tabToNextCell is deprecated. Return `true` to stay on the current cell, or `false` to let the browser handle the tab behaviour.'\n                        );\n                    }\n                    nextPosition = previousPosition;\n                } else if (userResult === false) {\n                    return false;\n                } else {\n                    nextPosition = {\n                        rowIndex: userResult.rowIndex,\n                        column: userResult.column,\n                        rowPinned: userResult.rowPinned,\n                    } as CellPosition;\n                }\n            }\n\n            // if no 'next cell', means we have got to last cell of grid, so nothing to move to,\n            // so bottom right cell going forwards, or top left going backwards\n            if (!nextPosition) {\n                return null;\n            }\n\n            if (nextPosition.rowIndex < 0) {\n                const headerLen = this.headerNavigationService.getHeaderRowCount();\n\n                this.focusService.focusHeaderPosition({\n                    headerPosition: {\n                        headerRowIndex: headerLen + nextPosition.rowIndex,\n                        column: nextPosition.column,\n                    },\n                    fromCell: true,\n                });\n\n                return null;\n            }\n\n            // if editing, but cell not editable, skip cell. we do this before we do all of\n            // the 'ensure index visible' and 'flush all frames', otherwise if we are skipping\n            // a bunch of cells (eg 10 rows) then all the work on ensuring cell visible is useless\n            // (except for the last one) which causes grid to stall for a while.\n            // note - for full row edit, we do focus non-editable cells, as the row stays in edit mode.\n            const fullRowEdit = this.gos.get('editType') === 'fullRow';\n            if (startEditing && !fullRowEdit) {\n                const cellIsEditable = this.isCellEditable(nextPosition);\n                if (!cellIsEditable) {\n                    continue;\n                }\n            }\n\n            this.ensureCellVisible(nextPosition);\n\n            // we have to call this after ensureColumnVisible - otherwise it could be a virtual column\n            // or row that is not currently in view, hence the renderedCell would not exist\n            const nextCell = this.getCellByPosition(nextPosition);\n\n            // if next cell is fullWidth row, then no rendered cell,\n            // as fullWidth rows have no cells, so we skip it\n            if (!nextCell) {\n                const row = this.rowRenderer.getRowByPosition(nextPosition);\n                if (!row || !row.isFullWidth() || startEditing) {\n                    continue;\n                }\n                return row;\n            }\n\n            if (nextCell.isSuppressNavigable()) {\n                continue;\n            }\n\n            // by default, when we click a cell, it gets selected into a range, so to keep keyboard navigation\n            // consistent, we set into range here also.\n            this.rangeService?.setRangeToCell(nextPosition);\n\n            // we successfully tabbed onto a grid cell, so return true\n            return nextCell;\n        }\n    }\n\n    private isCellEditable(cell: CellPosition): boolean {\n        const rowNode = this.lookupRowNodeForCell(cell);\n\n        if (rowNode) {\n            return cell.column.isCellEditable(rowNode);\n        }\n\n        return false;\n    }\n\n    public getCellByPosition(cellPosition: CellPosition): CellCtrl | null {\n        const rowCtrl = this.rowRenderer.getRowByPosition(cellPosition);\n        if (!rowCtrl) {\n            return null;\n        }\n\n        return rowCtrl.getCellCtrl(cellPosition.column as AgColumn);\n    }\n\n    private lookupRowNodeForCell(cell: CellPosition) {\n        if (cell.rowPinned === 'top') {\n            return this.pinnedRowModel.getPinnedTopRow(cell.rowIndex);\n        }\n\n        if (cell.rowPinned === 'bottom') {\n            return this.pinnedRowModel.getPinnedBottomRow(cell.rowIndex);\n        }\n\n        return this.rowModel.getRow(cell.rowIndex);\n    }\n\n    // we use index for rows, but column object for columns, as the next column (by index) might not\n    // be visible (header grouping) so it's not reliable, so using the column object instead.\n    public navigateToNextCell(\n        event: KeyboardEvent | null,\n        key: string,\n        currentCell: CellPosition,\n        allowUserOverride: boolean\n    ) {\n        // we keep searching for a next cell until we find one. this is how the group rows get skipped\n        let nextCell: CellPosition | null = currentCell;\n        let hitEdgeOfGrid = false;\n\n        while (nextCell && (nextCell === currentCell || !this.isValidNavigateCell(nextCell))) {\n            // if the current cell is spanning across multiple columns, we need to move\n            // our current position to be the last cell on the right before finding the\n            // the next target.\n            if (this.gos.get('enableRtl')) {\n                if (key === KeyCode.LEFT) {\n                    nextCell = this.getLastCellOfColSpan(nextCell);\n                }\n            } else if (key === KeyCode.RIGHT) {\n                nextCell = this.getLastCellOfColSpan(nextCell);\n            }\n\n            nextCell = this.cellNavigationService.getNextCellToFocus(key, nextCell);\n\n            // eg if going down, and nextCell=undefined, means we are gone past the last row\n            hitEdgeOfGrid = _missing(nextCell);\n        }\n\n        if (hitEdgeOfGrid && event && event.key === KeyCode.UP) {\n            nextCell = {\n                rowIndex: -1,\n                rowPinned: null,\n                column: currentCell.column,\n            };\n        }\n\n        // allow user to override what cell to go to next. when doing normal cell navigation (with keys)\n        // we allow this, however if processing 'enter after edit' we don't allow override\n        if (allowUserOverride) {\n            const userFunc = this.gos.getCallback('navigateToNextCell');\n            if (_exists(userFunc)) {\n                const params: WithoutGridCommon<NavigateToNextCellParams> = {\n                    key: key,\n                    previousCellPosition: currentCell,\n                    nextCellPosition: nextCell ? nextCell : null,\n                    event: event,\n                };\n                const userCell = userFunc(params);\n                if (_exists(userCell)) {\n                    nextCell = {\n                        rowPinned: userCell.rowPinned,\n                        rowIndex: userCell.rowIndex,\n                        column: userCell.column,\n                    } as CellPosition;\n                } else {\n                    nextCell = null;\n                }\n            }\n        }\n\n        // no next cell means we have reached a grid boundary, eg left, right, top or bottom of grid\n        if (!nextCell) {\n            return;\n        }\n\n        if (nextCell.rowIndex < 0) {\n            const headerLen = this.headerNavigationService.getHeaderRowCount();\n\n            this.focusService.focusHeaderPosition({\n                headerPosition: { headerRowIndex: headerLen + nextCell.rowIndex, column: currentCell.column },\n                event: event || undefined,\n                fromCell: true,\n            });\n\n            return;\n        }\n\n        // in case we have col spanning we get the cellComp and use it to get the\n        // position. This was we always focus the first cell inside the spanning.\n        const normalisedPosition = this.getNormalisedPosition(nextCell);\n        if (normalisedPosition) {\n            this.focusPosition(normalisedPosition);\n        } else {\n            this.tryToFocusFullWidthRow(nextCell);\n        }\n    }\n\n    private getNormalisedPosition(cellPosition: CellPosition): CellPosition | null {\n        // ensureCellVisible first, to make sure cell at position is rendered.\n        this.ensureCellVisible(cellPosition);\n\n        const cellCtrl = this.getCellByPosition(cellPosition);\n\n        // not guaranteed to have a cellComp when using the SSRM as blocks are loading.\n        if (!cellCtrl) {\n            return null;\n        }\n\n        cellPosition = cellCtrl.getCellPosition();\n        // we call this again, as nextCell can be different to it's previous value due to Column Spanning\n        // (ie if cursor moving from right to left, and cell is spanning columns, then nextCell was the\n        // last column in the group, however now it's the first column in the group). if we didn't do\n        // ensureCellVisible again, then we could only be showing the last portion (last column) of the\n        // merged cells.\n        this.ensureCellVisible(cellPosition);\n\n        return cellPosition;\n    }\n\n    private tryToFocusFullWidthRow(position: CellPosition | RowPosition, backwards: boolean = false): boolean {\n        const displayedColumns = this.visibleColsService.getAllCols();\n        const rowComp = this.rowRenderer.getRowByPosition(position);\n        if (!rowComp || !rowComp.isFullWidth()) {\n            return false;\n        }\n\n        const currentCellFocused = this.focusService.getFocusedCell();\n\n        const cellPosition: CellPosition = {\n            rowIndex: position.rowIndex,\n            rowPinned: position.rowPinned,\n            column: (position as CellPosition).column || (backwards ? _last(displayedColumns) : displayedColumns[0]),\n        };\n\n        this.focusPosition(cellPosition);\n\n        const fromBelow =\n            currentCellFocused != null ? this.rowPositionUtils.before(cellPosition, currentCellFocused) : false;\n\n        const focusEvent: WithoutGridCommon<FullWidthRowFocusedEvent> = {\n            type: 'fullWidthRowFocused',\n            rowIndex: cellPosition.rowIndex,\n            rowPinned: cellPosition.rowPinned,\n            column: cellPosition.column,\n            isFullWidthCell: true,\n            fromBelow,\n        };\n\n        this.eventService.dispatchEvent(focusEvent);\n\n        return true;\n    }\n\n    private focusPosition(cellPosition: CellPosition) {\n        this.focusService.setFocusedCell({\n            rowIndex: cellPosition.rowIndex,\n            column: cellPosition.column,\n            rowPinned: cellPosition.rowPinned,\n            forceBrowserFocus: true,\n        });\n\n        this.rangeService?.setRangeToCell(cellPosition);\n    }\n\n    private isValidNavigateCell(cell: CellPosition): boolean {\n        const rowNode = this.rowPositionUtils.getRowNode(cell);\n\n        // we do not allow focusing on detail rows and full width rows\n        return !!rowNode;\n    }\n\n    private getLastCellOfColSpan(cell: CellPosition): CellPosition {\n        const cellCtrl = this.getCellByPosition(cell);\n\n        if (!cellCtrl) {\n            return cell;\n        }\n\n        const colSpanningList = cellCtrl.getColSpanningList();\n\n        if (colSpanningList.length === 1) {\n            return cell;\n        }\n\n        return {\n            rowIndex: cell.rowIndex,\n            column: _last(colSpanningList),\n            rowPinned: cell.rowPinned,\n        };\n    }\n\n    public ensureCellVisible(gridCell: CellPosition): void {\n        const isGroupStickyEnabled = this.gos.isGroupRowsSticky();\n\n        const rowNode = this.rowModel.getRow(gridCell.rowIndex);\n        // sticky rows are always visible, so the grid shouldn't scroll to focus them.\n        const skipScrollToRow = isGroupStickyEnabled && rowNode?.sticky;\n\n        // this scrolls the row into view\n        if (!skipScrollToRow && _missing(gridCell.rowPinned)) {\n            this.gridBodyCon.getScrollFeature().ensureIndexVisible(gridCell.rowIndex);\n        }\n\n        if (!gridCell.column.isPinned()) {\n            this.gridBodyCon.getScrollFeature().ensureColumnVisible(gridCell.column);\n        }\n    }\n}\n", "import type { NamedBean } from '../../context/bean';\nimport { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { CtrlsService } from '../../ctrlsService';\nimport type { DragListenerParams, DragService } from '../../dragAndDrop/dragService';\n\nexport interface HorizontalResizeParams {\n    eResizeBar: HTMLElement;\n    dragStartPixels?: number;\n    onResizeStart: (shiftKey: boolean) => void;\n    onResizing: (delta: number) => void;\n    onResizeEnd: (delta: number) => void;\n}\n\nexport class HorizontalResizeService extends BeanStub implements NamedBean {\n    beanName = 'horizontalResizeService' as const;\n\n    private dragService: DragService;\n    private ctrlsService: CtrlsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.dragService = beans.dragService;\n        this.ctrlsService = beans.ctrlsService;\n    }\n\n    private dragStartX: number;\n    private resizeAmount: number;\n\n    public addResizeBar(params: HorizontalResizeParams): () => void {\n        const dragSource: DragListenerParams = {\n            dragStartPixels: params.dragStartPixels || 0,\n            eElement: params.eResizeBar,\n            onDragStart: this.onDragStart.bind(this, params),\n            onDragStop: this.onDragStop.bind(this, params),\n            onDragging: this.onDragging.bind(this, params),\n            includeTouch: true,\n            stopPropagationForTouch: true,\n        };\n\n        this.dragService.addDragSource(dragSource);\n\n        // we pass remove func back to the caller, so call can tell us when they\n        // are finished, and then we remove the listener from the drag source\n        const finishedWithResizeFunc = () => this.dragService.removeDragSource(dragSource);\n\n        return finishedWithResizeFunc;\n    }\n\n    private onDragStart(params: HorizontalResizeParams, mouseEvent: MouseEvent | Touch): void {\n        this.dragStartX = mouseEvent.clientX;\n\n        this.setResizeIcons();\n\n        const shiftKey = mouseEvent instanceof MouseEvent && mouseEvent.shiftKey === true;\n        params.onResizeStart(shiftKey);\n    }\n\n    private setResizeIcons(): void {\n        const ctrl = this.ctrlsService.get('gridCtrl');\n        // change the body cursor, so when drag moves out of the drag bar, the cursor is still 'resize' (or 'move'\n        ctrl.setResizeCursor(true);\n        // we don't want text selection outside the grid (otherwise it looks weird as text highlights when we move)\n        ctrl.disableUserSelect(true);\n    }\n\n    private onDragStop(params: HorizontalResizeParams, mouseEvent: MouseEvent | Touch): void {\n        params.onResizeEnd(this.resizeAmount);\n        this.resetIcons();\n    }\n\n    private resetIcons(): void {\n        const ctrl = this.ctrlsService.get('gridCtrl');\n        ctrl.setResizeCursor(false);\n        ctrl.disableUserSelect(false);\n    }\n\n    private onDragging(params: HorizontalResizeParams, mouseEvent: MouseEvent | Touch): void {\n        this.resizeAmount = mouseEvent.clientX - this.dragStartX;\n        params.onResizing(this.resizeAmount);\n    }\n}\n", "import { KeyCode } from '../../../constants/keyCode';\nimport type { NamedBean } from '../../../context/bean';\nimport { BeanStub } from '../../../context/beanStub';\nimport type { BeanCollection } from '../../../context/context';\nimport type { CtrlsService } from '../../../ctrlsService';\nimport type { AgColumn } from '../../../entities/agColumn';\nimport type { ColumnMenuVisibleChangedEvent } from '../../../events';\nimport { FilterWrapperComp } from '../../../filter/filterWrapperComp';\nimport type { FocusService } from '../../../focusService';\nimport type { ContainerType } from '../../../interfaces/iAfterGuiAttachedParams';\nimport type { WithoutGridCommon } from '../../../interfaces/iCommon';\nimport type { IMenuFactory } from '../../../interfaces/iMenuFactory';\nimport type { MenuService } from '../../../misc/menuService';\nimport { _setAriaRole } from '../../../utils/aria';\nimport { _isVisible } from '../../../utils/dom';\nimport type { PopupService } from '../../../widgets/popupService';\n\nexport class StandardMenuFactory extends BeanStub implements NamedBean, IMenuFactory {\n    beanName = 'filterMenuFactory' as const;\n\n    private popupService: PopupService;\n    private focusService: FocusService;\n    private ctrlsService: CtrlsService;\n    private menuService: MenuService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.popupService = beans.popupService;\n        this.focusService = beans.focusService;\n        this.ctrlsService = beans.ctrlsService;\n        this.menuService = beans.menuService;\n    }\n\n    private hidePopup: () => void;\n    private tabListener: null | (() => null);\n    private activeMenu?: FilterWrapperComp;\n\n    public hideActiveMenu(): void {\n        if (this.hidePopup) {\n            this.hidePopup();\n        }\n    }\n\n    public showMenuAfterMouseEvent(\n        column: AgColumn | undefined,\n        mouseEvent: MouseEvent | Touch,\n        containerType: ContainerType\n    ): void {\n        this.showPopup(\n            column,\n            (eMenu) => {\n                this.popupService.positionPopupUnderMouseEvent({\n                    column,\n                    type: containerType,\n                    mouseEvent,\n                    ePopup: eMenu,\n                });\n            },\n            containerType,\n            mouseEvent.target as HTMLElement,\n            this.menuService.isLegacyMenuEnabled()\n        );\n    }\n\n    public showMenuAfterButtonClick(\n        column: AgColumn | undefined,\n        eventSource: HTMLElement,\n        containerType: ContainerType\n    ): void {\n        let multiplier = -1;\n        let alignSide: 'left' | 'right' = 'left';\n\n        const isLegacyMenuEnabled = this.menuService.isLegacyMenuEnabled();\n        if (!isLegacyMenuEnabled && this.gos.get('enableRtl')) {\n            multiplier = 1;\n            alignSide = 'right';\n        }\n        const nudgeX = isLegacyMenuEnabled ? undefined : 4 * multiplier;\n        const nudgeY = isLegacyMenuEnabled ? undefined : 4;\n\n        this.showPopup(\n            column,\n            (eMenu) => {\n                this.popupService.positionPopupByComponent({\n                    type: containerType,\n                    eventSource,\n                    ePopup: eMenu,\n                    nudgeX,\n                    nudgeY,\n                    alignSide,\n                    keepWithinBounds: true,\n                    position: 'under',\n                    column,\n                });\n            },\n            containerType,\n            eventSource,\n            isLegacyMenuEnabled\n        );\n    }\n\n    private showPopup(\n        column: AgColumn | undefined,\n        positionCallback: (eMenu: HTMLElement) => void,\n        containerType: ContainerType,\n        eventSource: HTMLElement,\n        isLegacyMenuEnabled: boolean\n    ): void {\n        const comp = column ? this.createBean(new FilterWrapperComp(column, 'COLUMN_MENU')) : undefined;\n        this.activeMenu = comp;\n        if (!comp?.hasFilter() || !column) {\n            throw new Error('AG Grid - unable to show popup filter, filter instantiation failed');\n        }\n\n        const eMenu = document.createElement('div');\n\n        _setAriaRole(eMenu, 'presentation');\n        eMenu.classList.add('ag-menu');\n        if (!isLegacyMenuEnabled) {\n            eMenu.classList.add('ag-filter-menu');\n        }\n\n        [this.tabListener] = this.addManagedElementListeners(eMenu, {\n            keydown: (e: KeyboardEvent) => this.trapFocusWithin(e, eMenu),\n        });\n\n        // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\n        eMenu.appendChild(comp?.getGui()!);\n\n        let hidePopup: () => void;\n\n        const afterGuiDetached = () => comp?.afterGuiDetached();\n\n        const anchorToElement = this.menuService.isColumnMenuAnchoringEnabled()\n            ? eventSource ?? this.ctrlsService.getGridBodyCtrl().getGui()\n            : undefined;\n        const closedCallback = (e: MouseEvent | TouchEvent | KeyboardEvent) => {\n            column.setMenuVisible(false, 'contextMenu');\n            const isKeyboardEvent = e instanceof KeyboardEvent;\n\n            if (this.tabListener) {\n                this.tabListener = this.tabListener();\n            }\n\n            if (isKeyboardEvent && eventSource && _isVisible(eventSource)) {\n                const focusableEl = this.focusService.findTabbableParent(eventSource);\n\n                if (focusableEl) {\n                    focusableEl.focus();\n                }\n            }\n            afterGuiDetached();\n            this.destroyBean(this.activeMenu);\n            this.dispatchVisibleChangedEvent(false, containerType, column);\n        };\n\n        const translate = this.localeService.getLocaleTextFunc();\n\n        const ariaLabel =\n            isLegacyMenuEnabled && containerType !== 'columnFilter'\n                ? translate('ariaLabelColumnMenu', 'Column Menu')\n                : translate('ariaLabelColumnFilter', 'Column Filter');\n\n        const addPopupRes = this.popupService.addPopup({\n            modal: true,\n            eChild: eMenu,\n            closeOnEsc: true,\n            closedCallback,\n            positionCallback: () => positionCallback(eMenu),\n            anchorToElement,\n            ariaLabel,\n        });\n\n        if (addPopupRes) {\n            this.hidePopup = hidePopup = addPopupRes.hideFunc;\n        }\n\n        comp.afterInit().then(() => {\n            // need to make sure the filter is present before positioning, as only\n            // after filter it is visible can we find out what the width of it is\n            positionCallback(eMenu);\n\n            comp.afterGuiAttached({ container: containerType, hidePopup });\n        });\n\n        column.setMenuVisible(true, 'contextMenu');\n\n        this.dispatchVisibleChangedEvent(true, containerType, column);\n    }\n\n    private trapFocusWithin(e: KeyboardEvent, menu: HTMLElement) {\n        if (\n            e.key !== KeyCode.TAB ||\n            e.defaultPrevented ||\n            this.focusService.findNextFocusableElement(menu, false, e.shiftKey)\n        ) {\n            return;\n        }\n\n        e.preventDefault();\n\n        this.focusService.focusInto(menu, e.shiftKey);\n    }\n\n    private dispatchVisibleChangedEvent(visible: boolean, containerType: ContainerType, column?: AgColumn): void {\n        const displayedEvent: WithoutGridCommon<ColumnMenuVisibleChangedEvent> = {\n            type: 'columnMenuVisibleChanged',\n            visible,\n            switchingTab: false,\n            key: containerType as 'columnMenu' | 'columnFilter' | 'floatingFilter',\n            column: column ?? null,\n        };\n        this.eventService.dispatchEvent(displayedEvent);\n    }\n\n    public isMenuEnabled(column: AgColumn): boolean {\n        // for standard, we show menu if filter is enabled, and the menu is not suppressed by passing an empty array\n        return column.isFilterAllowed() && (column.getColDef().menuTabs ?? ['filterMenuTab']).includes('filterMenuTab');\n    }\n\n    public showMenuAfterContextMenuEvent(): void {\n        // not supported in standard menu\n    }\n\n    public override destroy(): void {\n        this.destroyBean(this.activeMenu);\n        super.destroy();\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\n\nconst DEBOUNCE_DELAY = 50;\nexport class ResizeObserverService extends BeanStub implements NamedBean {\n    beanName = 'resizeObserverService' as const;\n\n    private polyfillFunctions: (() => void)[] = [];\n    private polyfillScheduled: boolean;\n\n    public observeResize(element: HTMLElement, callback: () => void): () => void {\n        const win = this.gos.getWindow();\n        const useBrowserResizeObserver = () => {\n            const resizeObserver = new win.ResizeObserver(callback);\n            resizeObserver.observe(element);\n            return () => resizeObserver.disconnect();\n        };\n\n        const usePolyfill = () => {\n            // initialise to the current width and height, so first call will have no changes\n            let widthLastTime = element?.clientWidth ?? 0;\n            let heightLastTime = element?.clientHeight ?? 0;\n\n            // when finished, this gets turned to false.\n            let running = true;\n\n            const periodicallyCheckWidthAndHeight = () => {\n                if (running) {\n                    const newWidth = element?.clientWidth ?? 0;\n                    const newHeight = element?.clientHeight ?? 0;\n\n                    const changed = newWidth !== widthLastTime || newHeight !== heightLastTime;\n                    if (changed) {\n                        widthLastTime = newWidth;\n                        heightLastTime = newHeight;\n                        callback();\n                    }\n\n                    this.doNextPolyfillTurn(periodicallyCheckWidthAndHeight);\n                }\n            };\n\n            periodicallyCheckWidthAndHeight();\n\n            // the callback function we return sets running to false\n            return () => (running = false);\n        };\n\n        const suppressResize = this.gos.get('suppressBrowserResizeObserver');\n        const resizeObserverExists = !!win.ResizeObserver;\n\n        if (resizeObserverExists && !suppressResize) {\n            return useBrowserResizeObserver();\n        }\n\n        return this.getFrameworkOverrides().wrapIncoming(() => usePolyfill(), 'resize-observer');\n    }\n\n    private doNextPolyfillTurn(func: () => void): void {\n        this.polyfillFunctions.push(func);\n        this.schedulePolyfill();\n    }\n\n    private schedulePolyfill(): void {\n        if (this.polyfillScheduled) {\n            return;\n        }\n\n        const executeAllFuncs = () => {\n            const funcs = this.polyfillFunctions;\n\n            // make sure set scheduled to false and clear clear array\n            // before executing the funcs, as the funcs could add more funcs\n            this.polyfillScheduled = false;\n            this.polyfillFunctions = [];\n\n            funcs.forEach((f) => f());\n        };\n\n        this.polyfillScheduled = true;\n        window.setTimeout(executeAllFuncs, DEBOUNCE_DELAY);\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { CtrlsService } from '../ctrlsService';\nimport type { PaginationService } from '../pagination/paginationService';\nimport { _warnOnce } from '../utils/function';\n\ninterface TaskItem {\n    task: () => void;\n    index: number;\n    createOrder: number;\n}\n\ninterface TaskList {\n    list: TaskItem[];\n    sorted: boolean;\n}\n\nexport class AnimationFrameService extends BeanStub implements NamedBean {\n    beanName = 'animationFrameService' as const;\n\n    private ctrlsService: CtrlsService;\n    private paginationService?: PaginationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.ctrlsService = beans.ctrlsService;\n        this.paginationService = beans.paginationService;\n    }\n\n    // p1 and p2 are create tasks are to do with row and cell creation.\n    // for them we want to execute according to row order, so we use\n    // TaskItem so we know what index the item is for.\n    private createTasksP1: TaskList = { list: [], sorted: false }; // eg drawing back-ground of rows\n    private createTasksP2: TaskList = { list: [], sorted: false }; // eg cell renderers, adding hover functionality\n\n    // destroy tasks are to do with row removal. they are done after row creation as the user will need to see new\n    // rows first (as blank is scrolled into view), when we remove the old rows (no longer in view) is not as\n    // important.\n    private destroyTasks: (() => void)[] = [];\n    private ticking = false;\n    private useAnimationFrame: boolean;\n\n    // we need to know direction of scroll, to build up rows in the direction of\n    // the scroll. eg if user scrolls down, we extend the rows by building down.\n    private scrollGoingDown = true;\n    private lastPage = 0;\n    private lastScrollTop = 0;\n\n    private taskCount = 0;\n    private cancelledTasks = new Set();\n\n    public setScrollTop(scrollTop: number): void {\n        const isPaginationActive = this.gos.get('pagination');\n        this.scrollGoingDown = scrollTop >= this.lastScrollTop;\n\n        if (isPaginationActive && scrollTop === 0) {\n            const currentPage = this.paginationService?.getCurrentPage() ?? 0;\n            if (currentPage !== this.lastPage) {\n                this.lastPage = currentPage;\n                this.scrollGoingDown = true;\n            }\n        }\n\n        this.lastScrollTop = scrollTop;\n    }\n\n    public postConstruct(): void {\n        this.useAnimationFrame = !this.gos.get('suppressAnimationFrame');\n    }\n\n    public isOn(): boolean {\n        return this.useAnimationFrame;\n    }\n\n    // this method is for our AG Grid sanity only - if animation frames are turned off,\n    // then no place in the code should be looking to add any work to be done in animation\n    // frames. this stops bugs - where some code is asking for a frame to be executed\n    // when it should not.\n    private verifyAnimationFrameOn(methodName: string): void {\n        if (this.useAnimationFrame === false) {\n            _warnOnce(`AnimationFrameService.${methodName} called but animation frames are off`);\n        }\n    }\n\n    public createTask(task: () => void, index: number, list: 'createTasksP1' | 'createTasksP2') {\n        this.verifyAnimationFrameOn(list);\n        const taskItem: TaskItem = { task, index, createOrder: ++this.taskCount };\n        this.addTaskToList(this[list], taskItem);\n        this.schedule();\n    }\n\n    public cancelTask(task: () => void) {\n        this.cancelledTasks.add(task);\n    }\n\n    private addTaskToList(taskList: TaskList, task: TaskItem): void {\n        taskList.list.push(task);\n        taskList.sorted = false;\n    }\n\n    private sortTaskList(taskList: TaskList) {\n        if (taskList.sorted) {\n            return;\n        }\n\n        const sortDirection = this.scrollGoingDown ? 1 : -1;\n\n        // sort first by row index (taking into account scroll direction), then by\n        // order of task creation (always ascending, so cells will render left-to-right)\n        taskList.list.sort((a, b) =>\n            a.index !== b.index ? sortDirection * (b.index - a.index) : b.createOrder - a.createOrder\n        );\n        taskList.sorted = true;\n    }\n\n    public addDestroyTask(task: () => void): void {\n        this.verifyAnimationFrameOn('createTasksP3');\n        this.destroyTasks.push(task);\n        this.schedule();\n    }\n\n    private executeFrame(millis: number): void {\n        this.verifyAnimationFrameOn('executeFrame');\n\n        const p1TaskList = this.createTasksP1;\n        const p1Tasks = p1TaskList.list;\n\n        const p2TaskList = this.createTasksP2;\n        const p2Tasks = p2TaskList.list;\n\n        const destroyTasks = this.destroyTasks;\n\n        const frameStart = new Date().getTime();\n        let duration = new Date().getTime() - frameStart;\n\n        // 16ms is 60 fps\n        const noMaxMillis = millis <= 0;\n\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n\n        while (noMaxMillis || duration < millis) {\n            const gridBodyDidSomething = gridBodyCon.getScrollFeature().scrollGridIfNeeded();\n\n            if (!gridBodyDidSomething) {\n                let task: () => void;\n                if (p1Tasks.length) {\n                    this.sortTaskList(p1TaskList);\n                    task = p1Tasks.pop()!.task;\n                } else if (p2Tasks.length) {\n                    this.sortTaskList(p2TaskList);\n                    task = p2Tasks.pop()!.task;\n                } else if (destroyTasks.length) {\n                    task = destroyTasks.pop()!;\n                } else {\n                    this.cancelledTasks.clear();\n                    break;\n                }\n\n                if (!this.cancelledTasks.has(task)) {\n                    task();\n                }\n            }\n\n            duration = new Date().getTime() - frameStart;\n        }\n\n        if (p1Tasks.length || p2Tasks.length || destroyTasks.length) {\n            this.requestFrame();\n        } else {\n            this.stopTicking();\n        }\n    }\n\n    private stopTicking(): void {\n        this.ticking = false;\n    }\n\n    public flushAllFrames(): void {\n        if (!this.useAnimationFrame) {\n            return;\n        }\n        this.executeFrame(-1);\n    }\n\n    public schedule(): void {\n        if (!this.useAnimationFrame) {\n            return;\n        }\n        if (!this.ticking) {\n            this.ticking = true;\n            this.requestFrame();\n        }\n    }\n\n    private requestFrame(): void {\n        // check for the existence of requestAnimationFrame, and if\n        // it's missing, then we polyfill it with setTimeout()\n        const callback = this.executeFrame.bind(this, 60);\n        this.requestAnimationFrame(callback);\n    }\n\n    public requestAnimationFrame(callback: any) {\n        const win = this.gos.getWindow();\n\n        if (win.requestAnimationFrame) {\n            win.requestAnimationFrame(callback);\n        } else if ((win as any).webkitRequestAnimationFrame) {\n            (win as any).webkitRequestAnimationFrame(callback);\n        } else {\n            win.setTimeout(callback, 0);\n        }\n    }\n\n    public isQueueEmpty(): boolean {\n        return !this.ticking;\n    }\n\n    // a debounce utility used for parts of the app involved with rendering.\n    // the advantage over normal debounce is the client can call flushAllFrames()\n    // to make sure all rendering is complete. we don't wait any milliseconds,\n    // as this is intended to batch calls in one VM turn.\n    public debounce(func: () => void) {\n        let pending = false;\n        return () => {\n            if (!this.isOn()) {\n                window.setTimeout(func, 0);\n                return;\n            }\n            if (pending) {\n                return;\n            }\n            pending = true;\n            this.addDestroyTask(() => {\n                pending = false;\n                func();\n            });\n        };\n    }\n}\n", "import type { RowNode } from '../entities/rowNode';\nimport type { RowHighlightPosition } from '../interfaces/iRowNode';\nimport type { ChangedPath } from '../utils/changedPath';\nimport type { IRowModel } from './iRowModel';\nimport type { RowDataTransaction } from './rowDataTransaction';\nimport type { RowNodeTransaction } from './rowNodeTransaction';\n\nexport type ClientSideRowModelStep = `${ClientSideRowModelSteps}`;\nexport enum ClientSideRowModelSteps {\n    EVERYTHING = 'group',\n    FILTER = 'filter',\n    SORT = 'sort',\n    MAP = 'map',\n    AGGREGATE = 'aggregate',\n    FILTER_AGGREGATES = 'filter_aggregates',\n    PIVOT = 'pivot',\n    NOTHING = 'nothing',\n}\n\nexport interface IClientSideRowModel<TData = any> extends IRowModel {\n    onRowGroupOpened(): void;\n    updateRowData(\n        rowDataTran: RowDataTransaction<TData>,\n        rowNodeOrder?: { [id: string]: number } | null\n    ): RowNodeTransaction<TData> | null;\n    setRowData(rowData: any[]): void;\n    refreshModel(paramsOrStep: RefreshModelParams | ClientSideRowModelStep | undefined): void;\n    expandOrCollapseAll(expand: boolean): void;\n    forEachLeafNode(callback: (node: RowNode, index: number) => void): void;\n    forEachNodeAfterFilter(callback: (node: RowNode, index: number) => void, includeFooterNodes?: boolean): void;\n    forEachNodeAfterFilterAndSort(callback: (node: RowNode, index: number) => void, includeFooterNodes?: boolean): void;\n    forEachPivotNode(callback: (node: RowNode, index: number) => void, includeFooterNodes?: boolean): void;\n    resetRowHeights(): void;\n    onRowHeightChanged(): void;\n    onRowHeightChangedDebounced(): void;\n    batchUpdateRowData(\n        rowDataTransaction: RowDataTransaction<TData>,\n        callback?: (res: RowNodeTransaction<TData>) => void\n    ): void;\n    flushAsyncTransactions(): void;\n    getRootNode(): RowNode;\n    doAggregate(changedPath?: ChangedPath): void;\n    getTopLevelNodes(): RowNode[] | null;\n    ensureRowsAtPixel(rowNode: RowNode[], pixel: number, increment: number): boolean;\n    highlightRowAtPixel(rowNode: RowNode | null, pixel?: number): void;\n    getHighlightPosition(pixel: number, rowNode?: RowNode): RowHighlightPosition;\n    getLastHighlightedRowNode(): RowNode | null;\n    isRowDataLoaded(): boolean;\n}\n\nexport interface RefreshModelParams<TData = any> {\n    // how much of the pipeline to execute\n    step: ClientSideRowModelSteps;\n    // if NOT new data, then this flag tells grid to check if rows already\n    // exist for the nodes (matching by node id) and reuses the row if it does.\n    keepRenderedRows?: boolean;\n    // if true, rows that are kept are animated to the new position\n    animate?: boolean;\n    // if true, then rows we are editing will be kept\n    keepEditingRows?: boolean;\n    // if doing delta updates, this has the changes that were done\n    rowNodeTransactions?: RowNodeTransaction<TData>[];\n    // if doing delta updates, this has the order of the nodes\n    rowNodeOrder?: { [id: string]: number };\n    // true user called setRowData() (or a new page in pagination). the grid scrolls\n    // back to the top when this is true.\n    newData?: boolean;\n    // true if this update is due to columns changing, ie no rows were changed\n    afterColumnsChanged?: boolean;\n    // true if all we did is changed row height, data still the same, no need to clear the undo/redo stacks\n    keepUndoRedoStack?: boolean;\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { IClientSideRowModel } from '../interfaces/iClientSideRowModel';\nimport { ClientSideRowModelSteps } from '../interfaces/iClientSideRowModel';\nimport type { IExpansionService } from '../interfaces/iExpansionService';\nimport type { IRowModel } from '../interfaces/iRowModel';\nimport type { IRowNode } from '../interfaces/iRowNode';\n\nexport class ExpansionService extends BeanStub implements NamedBean, IExpansionService {\n    beanName = 'expansionService' as const;\n\n    private rowModel: IRowModel;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.rowModel = beans.rowModel;\n    }\n\n    private isClientSideRowModel: boolean;\n\n    public postConstruct(): void {\n        this.isClientSideRowModel = this.rowModel.getType() === 'clientSide';\n    }\n\n    public expandRows(rowIds: string[]): void {\n        if (!this.isClientSideRowModel) {\n            return;\n        }\n\n        const rowIdSet = new Set(rowIds);\n        this.rowModel.forEachNode((node) => {\n            if (node.id && rowIdSet.has(node.id)) {\n                node.expanded = true;\n            }\n        });\n        this.onGroupExpandedOrCollapsed();\n    }\n\n    public getExpandedRows(): string[] {\n        const expandedRows: string[] = [];\n        this.rowModel.forEachNode(({ expanded, id }) => {\n            if (expanded && id) {\n                expandedRows.push(id);\n            }\n        });\n        return expandedRows;\n    }\n\n    public expandAll(value: boolean): void {\n        if (!this.isClientSideRowModel) {\n            return;\n        }\n        (this.rowModel as IClientSideRowModel).expandOrCollapseAll(value);\n    }\n\n    public setRowNodeExpanded(\n        rowNode: IRowNode,\n        expanded: boolean,\n        expandParents?: boolean,\n        forceSync?: boolean\n    ): void {\n        if (rowNode) {\n            // expand all parents recursively, except root node.\n            if (expandParents && rowNode.parent && rowNode.parent.level !== -1) {\n                this.setRowNodeExpanded(rowNode.parent, expanded, expandParents, forceSync);\n            }\n\n            rowNode.setExpanded(expanded, undefined, forceSync);\n        }\n    }\n\n    public onGroupExpandedOrCollapsed(): void {\n        if (!this.isClientSideRowModel) {\n            return;\n        }\n        // we don't really want the user calling this if only one rowNode was expanded, instead they should be\n        // calling rowNode.setExpanded(boolean) - this way we do a 'keepRenderedRows=false' so that the whole\n        // grid gets refreshed again - otherwise the row with the rowNodes that were changed won't get updated,\n        // and thus the expand icon in the group cell won't get 'opened' or 'closed'.\n        (this.rowModel as IClientSideRowModel).refreshModel({ step: ClientSideRowModelSteps.MAP });\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { CtrlsService } from '../ctrlsService';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { RowNode } from '../entities/rowNode';\nimport type { FilterManager } from '../filter/filterManager';\nimport type { ContainerType } from '../interfaces/iAfterGuiAttachedParams';\nimport type { Column } from '../interfaces/iColumn';\nimport type { IColumnChooserFactory, ShowColumnChooserParams } from '../interfaces/iColumnChooserFactory';\nimport type { IContextMenuFactory } from '../interfaces/iContextMenuFactory';\nimport type { IMenuFactory } from '../interfaces/iMenuFactory';\nimport type { RowCtrl } from '../rendering/row/rowCtrl';\nimport type { RowRenderer } from '../rendering/rowRenderer';\nimport { _isIOSUserAgent } from '../utils/browser';\nimport { _warnOnce } from '../utils/function';\nimport type { AnimationFrameService } from './animationFrameService';\n\ninterface BaseShowColumnMenuParams {\n    column?: Column;\n}\n\ninterface BaseShowFilterMenuParams {\n    column: Column;\n    containerType: ContainerType;\n}\n\ninterface MouseShowMenuParams {\n    mouseEvent: MouseEvent | Touch;\n    positionBy: 'mouse';\n}\n\ninterface ButtonShowMenuParams {\n    buttonElement: HTMLElement;\n    positionBy: 'button';\n}\n\ninterface AutoShowMenuParams {\n    positionBy: 'auto';\n}\n\nexport type ShowColumnMenuParams = (MouseShowMenuParams | ButtonShowMenuParams | AutoShowMenuParams) &\n    BaseShowColumnMenuParams;\n\nexport type ShowFilterMenuParams = (MouseShowMenuParams | ButtonShowMenuParams | AutoShowMenuParams) &\n    BaseShowFilterMenuParams;\n\nexport interface ShowContextMenuParams {\n    /** The `RowNode` associated with the Context Menu */\n    rowNode?: RowNode | null;\n    /** The `Column` associated with the Context Menu */\n    column?: Column | null;\n    /** The value that will be passed to the Context Menu (useful with `getContextMenuItems`). If none is passed, and `RowNode` and `Column` are provided, this will be the respective Cell value */\n    value: any;\n}\n\ninterface MouseShowContextMenuParams {\n    mouseEvent: MouseEvent;\n}\n\ninterface TouchShowContextMenuParam {\n    touchEvent: TouchEvent;\n}\n\nexport type EventShowContextMenuParams = (MouseShowContextMenuParams | TouchShowContextMenuParam) &\n    ShowContextMenuParams;\nexport interface IContextMenuParams extends ShowContextMenuParams {\n    /** The x position for the Context Menu, if no value is given and `RowNode` and `Column` are provided, this will default to be middle of the cell, otherwise it will be `0`. */\n    x?: number;\n    /** The y position for the Context Menu, if no value is given and `RowNode` and `Column` are provided, this will default to be middle of the cell, otherwise it will be `0`. */\n    y?: number;\n}\n\nexport class MenuService extends BeanStub implements NamedBean {\n    beanName = 'menuService' as const;\n\n    private filterMenuFactory: IMenuFactory;\n    private ctrlsService: CtrlsService;\n    private animationFrameService: AnimationFrameService;\n    private filterManager?: FilterManager;\n    private rowRenderer: RowRenderer;\n    private columnChooserFactory?: IColumnChooserFactory;\n    private contextMenuFactory?: IContextMenuFactory;\n    private enterpriseMenuFactory?: IMenuFactory;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.filterMenuFactory = beans.filterMenuFactory;\n        this.ctrlsService = beans.ctrlsService;\n        this.animationFrameService = beans.animationFrameService;\n        this.filterManager = beans.filterManager;\n        this.rowRenderer = beans.rowRenderer;\n        this.columnChooserFactory = beans.columnChooserFactory;\n        this.contextMenuFactory = beans.contextMenuFactory;\n        this.enterpriseMenuFactory = beans.enterpriseMenuFactory;\n    }\n\n    private activeMenuFactory: IMenuFactory;\n\n    public postConstruct(): void {\n        this.activeMenuFactory = this.enterpriseMenuFactory ?? this.filterMenuFactory;\n    }\n\n    public showColumnMenu(params: ShowColumnMenuParams): void {\n        this.showColumnMenuCommon(this.activeMenuFactory, params, 'columnMenu');\n    }\n\n    public showFilterMenu(params: ShowFilterMenuParams): void {\n        const menuFactory: IMenuFactory =\n            this.enterpriseMenuFactory && this.isLegacyMenuEnabled()\n                ? this.enterpriseMenuFactory\n                : this.filterMenuFactory;\n        this.showColumnMenuCommon(menuFactory, params, params.containerType, true);\n    }\n\n    public showHeaderContextMenu(column: AgColumn | undefined, mouseEvent?: MouseEvent, touchEvent?: TouchEvent): void {\n        this.activeMenuFactory.showMenuAfterContextMenuEvent(column, mouseEvent, touchEvent);\n    }\n\n    public getContextMenuPosition(rowNode?: RowNode | null, column?: AgColumn | null): { x: number; y: number } {\n        const rowCtrl = this.getRowCtrl(rowNode);\n        const eGui = this.getCellGui(rowCtrl, column);\n\n        if (!eGui) {\n            if (rowCtrl) {\n                return { x: 0, y: rowCtrl.getRowYPosition() };\n            }\n            return { x: 0, y: 0 };\n        }\n\n        const rect = eGui.getBoundingClientRect();\n\n        return {\n            x: rect.x + rect.width / 2,\n            y: rect.y + rect.height / 2,\n        };\n    }\n\n    public showContextMenu(params: EventShowContextMenuParams & { anchorToElement?: HTMLElement }): void {\n        const { rowNode } = params;\n        const column = params.column as AgColumn | null | undefined;\n        let { anchorToElement, value } = params;\n\n        if (rowNode && column && value == null) {\n            value = rowNode.getValueFromValueService(column);\n        }\n\n        if (anchorToElement == null) {\n            anchorToElement = this.getContextMenuAnchorElement(rowNode, column);\n        }\n\n        this.contextMenuFactory?.onContextMenu(\n            (params as MouseShowContextMenuParams).mouseEvent ?? null,\n            (params as TouchShowContextMenuParam).touchEvent ?? null,\n            rowNode ?? null,\n            column ?? null,\n            value,\n            anchorToElement\n        );\n    }\n\n    public showColumnChooser(params: ShowColumnChooserParams): void {\n        this.columnChooserFactory?.showColumnChooser(params);\n    }\n\n    public hidePopupMenu(): void {\n        // hide the context menu if in enterprise\n        this.contextMenuFactory?.hideActiveMenu();\n        // and hide the column menu always\n        this.activeMenuFactory.hideActiveMenu();\n    }\n\n    public hideColumnChooser(): void {\n        this.columnChooserFactory?.hideActiveColumnChooser();\n    }\n\n    public isColumnMenuInHeaderEnabled(column: AgColumn): boolean {\n        const { suppressMenu, suppressHeaderMenuButton } = column.getColDef();\n        const isSuppressMenuButton = suppressHeaderMenuButton ?? suppressMenu;\n        return (\n            !isSuppressMenuButton &&\n            this.activeMenuFactory.isMenuEnabled(column) &&\n            (this.isLegacyMenuEnabled() || !!this.enterpriseMenuFactory)\n        );\n    }\n\n    public isFilterMenuInHeaderEnabled(column: AgColumn): boolean {\n        return !column.getColDef().suppressHeaderFilterButton && !!this.filterManager?.isFilterAllowed(column);\n    }\n\n    public isHeaderContextMenuEnabled(column?: AgColumn): boolean {\n        return !column?.getColDef().suppressHeaderContextMenu && this.getColumnMenuType() === 'new';\n    }\n\n    public isHeaderMenuButtonAlwaysShowEnabled(): boolean {\n        return this.isSuppressMenuHide();\n    }\n\n    public isHeaderMenuButtonEnabled(): boolean {\n        // we don't show the menu if on an iPad/iPhone, as the user cannot have a pointer device/\n        // However if suppressMenuHide is set to true the menu will be displayed alwasys, so it's ok\n        // to show it on iPad in this case (as hover isn't needed). If suppressMenuHide\n        // is false (default) user will need to use longpress to display the menu.\n        const menuHides = !this.isSuppressMenuHide();\n\n        const onIpadAndMenuHides = _isIOSUserAgent() && menuHides;\n\n        return !onIpadAndMenuHides;\n    }\n\n    public isHeaderFilterButtonEnabled(column: AgColumn): boolean {\n        return (\n            this.isFilterMenuInHeaderEnabled(column) &&\n            !this.isLegacyMenuEnabled() &&\n            !this.isFloatingFilterButtonDisplayed(column)\n        );\n    }\n\n    public isFilterMenuItemEnabled(column: AgColumn): boolean {\n        return (\n            !!this.filterManager?.isFilterAllowed(column) &&\n            !this.isLegacyMenuEnabled() &&\n            !this.isFilterMenuInHeaderEnabled(column) &&\n            !this.isFloatingFilterButtonDisplayed(column)\n        );\n    }\n\n    public isColumnMenuAnchoringEnabled(): boolean {\n        return !this.isLegacyMenuEnabled();\n    }\n\n    public areAdditionalColumnMenuItemsEnabled(): boolean {\n        return this.getColumnMenuType() === 'new';\n    }\n\n    public isLegacyMenuEnabled(): boolean {\n        return this.getColumnMenuType() === 'legacy';\n    }\n\n    public isFloatingFilterButtonEnabled(column: AgColumn): boolean {\n        const colDef = column.getColDef();\n        const legacySuppressFilterButton = colDef.floatingFilterComponentParams?.suppressFilterButton;\n        if (legacySuppressFilterButton != null) {\n            _warnOnce(\n                `As of v31.1, 'colDef.floatingFilterComponentParams.suppressFilterButton' is deprecated. Use 'colDef.suppressFloatingFilterButton' instead.`\n            );\n        }\n        return colDef.suppressFloatingFilterButton == null\n            ? !legacySuppressFilterButton\n            : !colDef.suppressFloatingFilterButton;\n    }\n\n    private getColumnMenuType(): 'legacy' | 'new' {\n        return this.gos.get('columnMenu');\n    }\n\n    private isFloatingFilterButtonDisplayed(column: AgColumn): boolean {\n        return !!column.getColDef().floatingFilter && this.isFloatingFilterButtonEnabled(column);\n    }\n\n    private isSuppressMenuHide(): boolean {\n        const suppressMenuHide = this.gos.get('suppressMenuHide');\n        if (this.isLegacyMenuEnabled()) {\n            return suppressMenuHide;\n        } else {\n            // default to true for new\n            return this.gos.exists('suppressMenuHide') ? suppressMenuHide : true;\n        }\n    }\n\n    private showColumnMenuCommon(\n        menuFactory: IMenuFactory,\n        params: ShowColumnMenuParams,\n        containerType: ContainerType,\n        filtersOnly?: boolean\n    ): void {\n        const { positionBy } = params;\n        const column = params.column as AgColumn | undefined;\n        if (positionBy === 'button') {\n            const { buttonElement } = params;\n            menuFactory.showMenuAfterButtonClick(column, buttonElement, containerType, filtersOnly);\n        } else if (positionBy === 'mouse') {\n            const { mouseEvent } = params;\n            menuFactory.showMenuAfterMouseEvent(column, mouseEvent, containerType, filtersOnly);\n        } else if (column) {\n            // auto\n            this.ctrlsService.getGridBodyCtrl().getScrollFeature().ensureColumnVisible(column, 'auto');\n            // make sure we've finished scrolling into view before displaying the menu\n            this.animationFrameService.requestAnimationFrame(() => {\n                const headerCellCtrl = this.ctrlsService\n                    .getHeaderRowContainerCtrl(column.getPinned())\n                    .getHeaderCtrlForColumn(column)!;\n                menuFactory.showMenuAfterButtonClick(\n                    column,\n                    headerCellCtrl.getAnchorElementForMenu(filtersOnly),\n                    containerType,\n                    true\n                );\n            });\n        }\n    }\n\n    private getRowCtrl(rowNode?: RowNode | null): RowCtrl | undefined {\n        const { rowIndex, rowPinned } = rowNode || {};\n\n        if (rowIndex == null) {\n            return;\n        }\n\n        return this.rowRenderer.getRowByPosition({ rowIndex, rowPinned }) || undefined;\n    }\n\n    private getCellGui(rowCtrl?: RowCtrl, column?: AgColumn | null): HTMLElement | undefined {\n        if (!rowCtrl || !column) {\n            return;\n        }\n\n        const cellCtrl = rowCtrl.getCellCtrl(column);\n\n        return cellCtrl?.getGui() || undefined;\n    }\n\n    private getContextMenuAnchorElement(rowNode?: RowNode | null, column?: AgColumn | null): HTMLElement {\n        const gridBodyEl = this.ctrlsService.getGridBodyCtrl().getGridBodyElement();\n        const rowCtrl = this.getRowCtrl(rowNode);\n\n        if (!rowCtrl) {\n            return gridBodyEl;\n        }\n\n        const cellGui = this.getCellGui(rowCtrl, column);\n\n        if (cellGui) {\n            return cellGui;\n        }\n\n        if (rowCtrl.isFullWidth()) {\n            return rowCtrl.getFullWidthElement() as HTMLElement;\n        }\n\n        return gridBodyEl;\n    }\n}\n", "import type { AgInputFieldParams } from '../interfaces/agFieldParams';\nimport { AgAbstractInputField } from './agAbstractInputField';\nimport type { ComponentSelector } from './component';\n\nexport class AgInputTextArea extends AgAbstractInputField<HTMLTextAreaElement, string> {\n    constructor(config?: AgInputFieldParams) {\n        super(config, 'ag-text-area', null, 'textarea');\n    }\n\n    public override setValue(value: string, silent?: boolean): this {\n        const ret = super.setValue(value, silent);\n\n        this.eInput.value = value;\n\n        return ret;\n    }\n\n    public setCols(cols: number): this {\n        this.eInput.cols = cols;\n\n        return this;\n    }\n\n    public setRows(rows: number): this {\n        this.eInput.rows = rows;\n\n        return this;\n    }\n}\n\nexport const AgInputTextAreaSelector: ComponentSelector = {\n    selector: 'AG-INPUT-TEXT-AREA',\n    component: AgInputTextArea,\n};\n", "import { KeyCode } from '../../constants/keyCode';\nimport type { ICellEditorComp } from '../../interfaces/iCellEditor';\nimport { _exists } from '../../utils/generic';\nimport type { AgInputTextArea } from '../../widgets/agInputTextArea';\nimport { AgInputTextAreaSelector } from '../../widgets/agInputTextArea';\nimport { RefPlaceholder } from '../../widgets/component';\nimport { PopupComponent } from '../../widgets/popupComponent';\nimport type { ILargeTextEditorParams } from './iLargeTextCellEditor';\n\nexport class LargeTextCellEditor extends PopupComponent implements ICellEditorComp {\n    private readonly eTextArea: AgInputTextArea = RefPlaceholder;\n    private params: ILargeTextEditorParams;\n    private focusAfterAttached: boolean;\n\n    constructor() {\n        super(\n            /* html */ `<div class=\"ag-large-text\">\n        <ag-input-text-area data-ref=\"eTextArea\" class=\"ag-large-text-input\"></ag-input-text-area>\n        </div>`,\n            [AgInputTextAreaSelector]\n        );\n    }\n\n    public init(params: ILargeTextEditorParams): void {\n        this.params = params;\n        this.focusAfterAttached = params.cellStartedEdit;\n\n        this.eTextArea\n            .setMaxLength(params.maxLength || 200)\n            .setCols(params.cols || 60)\n            .setRows(params.rows || 10);\n\n        if (_exists(params.value, true)) {\n            this.eTextArea.setValue(params.value.toString(), true);\n        }\n\n        this.addGuiEventListener('keydown', this.onKeyDown.bind(this));\n        this.activateTabIndex();\n    }\n\n    private onKeyDown(event: KeyboardEvent): void {\n        const key = event.key;\n\n        if (\n            key === KeyCode.LEFT ||\n            key === KeyCode.UP ||\n            key === KeyCode.RIGHT ||\n            key === KeyCode.DOWN ||\n            (event.shiftKey && key === KeyCode.ENTER)\n        ) {\n            // shift+enter allows for newlines\n            event.stopPropagation();\n        }\n    }\n\n    public afterGuiAttached(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n\n        this.eTextArea.setInputAriaLabel(translate('ariaInputEditor', 'Input Editor'));\n\n        if (this.focusAfterAttached) {\n            this.eTextArea.getFocusableElement().focus();\n        }\n    }\n\n    public getValue(): any {\n        const value = this.eTextArea.getValue();\n        if (!_exists(value) && !_exists(this.params.value)) {\n            return this.params.value;\n        }\n        return this.params.parseValue(value!);\n    }\n}\n", "import type { AgColumn } from '../../entities/agColumn';\nimport type { ICellEditorParams } from '../../interfaces/iCellEditor';\nimport { _isUserSuppressingKeyboardEvent } from '../../utils/keyboard';\nimport { PopupComponent } from '../../widgets/popupComponent';\n\nexport class PopupEditorWrapper extends PopupComponent {\n    constructor(private readonly params: ICellEditorParams) {\n        super(/* html */ `<div class=\"ag-popup-editor\" tabindex=\"-1\"/>`);\n    }\n\n    public postConstruct(): void {\n        this.gos.setDomData(this.getGui(), 'popupEditorWrapper', true);\n        this.addKeyDownListener();\n    }\n\n    private addKeyDownListener(): void {\n        const eGui = this.getGui();\n        const params = this.params;\n        const listener = (event: KeyboardEvent) => {\n            if (!_isUserSuppressingKeyboardEvent(this.gos, event, params.node, params.column as AgColumn, true)) {\n                params.onKeyDown(event);\n            }\n        };\n\n        this.addManagedElementListeners(eGui, { keydown: listener });\n    }\n}\n", "import { KeyCode } from '../../constants/keyCode';\nimport type { BeanCollection } from '../../context/context';\nimport type { AgColumn } from '../../entities/agColumn';\nimport type { ICellEditorComp, ICellEditorParams } from '../../interfaces/iCellEditor';\nimport { _warnOnce } from '../../utils/function';\nimport { _missing } from '../../utils/generic';\nimport type { ValueService } from '../../valueService/valueService';\nimport type { ListOption } from '../../widgets/agList';\nimport type { AgSelect } from '../../widgets/agSelect';\nimport { AgSelectSelector } from '../../widgets/agSelect';\nimport { RefPlaceholder } from '../../widgets/component';\nimport { PopupComponent } from '../../widgets/popupComponent';\nimport type { ISelectCellEditorParams } from './iSelectCellEditor';\n\ninterface SelectCellEditorParams<TData = any, TValue = any, TContext = any>\n    extends ISelectCellEditorParams<TValue>,\n        ICellEditorParams<TData, TValue, TContext> {}\n\nexport class SelectCellEditor extends PopupComponent implements ICellEditorComp {\n    private focusAfterAttached: boolean;\n\n    private valueService: ValueService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.valueService = beans.valueService;\n    }\n\n    private readonly eSelect: AgSelect = RefPlaceholder;\n\n    private startedByEnter: boolean = false;\n\n    constructor() {\n        super(\n            /* html */\n            `<div class=\"ag-cell-edit-wrapper\">\n                <ag-select class=\"ag-cell-editor\" data-ref=\"eSelect\"></ag-select>\n            </div>`,\n            [AgSelectSelector]\n        );\n    }\n\n    public init(params: SelectCellEditorParams): void {\n        this.focusAfterAttached = params.cellStartedEdit;\n\n        const { eSelect, valueService, gos } = this;\n        const { values, value, eventKey } = params;\n\n        if (_missing(values)) {\n            _warnOnce('no values found for select cellEditor');\n            return;\n        }\n\n        this.startedByEnter = eventKey != null ? eventKey === KeyCode.ENTER : false;\n\n        let hasValue = false;\n        values.forEach((currentValue: any) => {\n            const option: ListOption = { value: currentValue };\n            const valueFormatted = valueService.formatValue(params.column as AgColumn, null, currentValue);\n            const valueFormattedExits = valueFormatted !== null && valueFormatted !== undefined;\n            option.text = valueFormattedExits ? valueFormatted : currentValue;\n\n            eSelect.addOption(option);\n            hasValue = hasValue || value === currentValue;\n        });\n\n        if (hasValue) {\n            eSelect.setValue(params.value, true);\n        } else if (params.values.length) {\n            eSelect.setValue(params.values[0], true);\n        }\n\n        const { valueListGap, valueListMaxWidth, valueListMaxHeight } = params;\n\n        if (valueListGap != null) {\n            eSelect.setPickerGap(valueListGap);\n        }\n\n        if (valueListMaxHeight != null) {\n            eSelect.setPickerMaxHeight(valueListMaxHeight);\n        }\n\n        if (valueListMaxWidth != null) {\n            eSelect.setPickerMaxWidth(valueListMaxWidth);\n        }\n\n        // we don't want to add this if full row editing, otherwise selecting will stop the\n        // full row editing.\n        if (gos.get('editType') !== 'fullRow') {\n            this.addManagedListeners(this.eSelect, { selectedItem: () => params.stopEditing() });\n        }\n    }\n\n    public afterGuiAttached() {\n        if (this.focusAfterAttached) {\n            this.eSelect.getFocusableElement().focus();\n        }\n\n        if (this.startedByEnter) {\n            setTimeout(() => {\n                if (this.isAlive()) {\n                    this.eSelect.showPicker();\n                }\n            });\n        }\n    }\n\n    public focusIn(): void {\n        this.eSelect.getFocusableElement().focus();\n    }\n\n    public getValue(): any {\n        return this.eSelect.getValue();\n    }\n\n    public override isPopup() {\n        return false;\n    }\n}\n", "import { KeyCode } from '../../constants/keyCode';\nimport type { ICellEditorComp, ICellEditorParams } from '../../interfaces/iCellEditor';\nimport { _isBrowserSafari } from '../../utils/browser';\nimport type { AgInputTextField } from '../../widgets/agInputTextField';\nimport { RefPlaceholder } from '../../widgets/component';\nimport { PopupComponent } from '../../widgets/popupComponent';\nimport type { CellEditorInput } from './iCellEditorInput';\n\nexport class SimpleCellEditor<TValue, P extends ICellEditorParams, I extends AgInputTextField>\n    extends PopupComponent\n    implements ICellEditorComp\n{\n    private highlightAllOnFocus: boolean;\n    private focusAfterAttached: boolean;\n    protected params: ICellEditorParams;\n    protected readonly eInput: I = RefPlaceholder;\n\n    constructor(protected cellEditorInput: CellEditorInput<TValue, P, I>) {\n        super(\n            /* html */ `\n            <div class=\"ag-cell-edit-wrapper\">\n                ${cellEditorInput.getTemplate()}\n            </div>`,\n            cellEditorInput.getAgComponents()\n        );\n    }\n\n    public init(params: P): void {\n        this.params = params;\n\n        const eInput = this.eInput;\n        this.cellEditorInput.init(eInput, params);\n        let startValue: string | null | undefined;\n\n        // cellStartedEdit is only false if we are doing fullRow editing\n        if (params.cellStartedEdit) {\n            this.focusAfterAttached = true;\n            const eventKey = params.eventKey;\n\n            if (eventKey === KeyCode.BACKSPACE || params.eventKey === KeyCode.DELETE) {\n                startValue = '';\n            } else if (eventKey && eventKey.length === 1) {\n                startValue = eventKey;\n            } else {\n                startValue = this.cellEditorInput.getStartValue();\n\n                if (eventKey !== KeyCode.F2) {\n                    this.highlightAllOnFocus = true;\n                }\n            }\n        } else {\n            this.focusAfterAttached = false;\n            startValue = this.cellEditorInput.getStartValue();\n        }\n\n        if (startValue != null) {\n            eInput.setStartValue(startValue);\n        }\n\n        this.addManagedElementListeners(eInput.getGui(), {\n            keydown: (event: KeyboardEvent) => {\n                const { key } = event;\n\n                if (key === KeyCode.PAGE_UP || key === KeyCode.PAGE_DOWN) {\n                    event.preventDefault();\n                }\n            },\n        });\n    }\n\n    public afterGuiAttached(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const eInput = this.eInput;\n\n        eInput.setInputAriaLabel(translate('ariaInputEditor', 'Input Editor'));\n\n        if (!this.focusAfterAttached) {\n            return;\n        }\n        // Added for AG-3238. We can't remove this explicit focus() because Chrome requires an input\n        // to be focused before setSelectionRange will work. But it triggers a bug in Safari where\n        // explicitly focusing then blurring an empty field will cause the parent container to scroll.\n        if (!_isBrowserSafari()) {\n            eInput.getFocusableElement().focus();\n        }\n\n        const inputEl = eInput.getInputElement();\n\n        if (this.highlightAllOnFocus) {\n            inputEl.select();\n        } else {\n            this.cellEditorInput.setCaret?.();\n        }\n    }\n\n    // gets called when tabbing through cells and in full row edit mode\n    public focusIn(): void {\n        const eInput = this.eInput;\n        const focusEl = eInput.getFocusableElement();\n        const inputEl = eInput.getInputElement();\n\n        focusEl.focus();\n        inputEl.select();\n    }\n\n    public getValue(): TValue | null | undefined {\n        return this.cellEditorInput.getValue();\n    }\n\n    public override isPopup() {\n        return false;\n    }\n}\n", "import { _exists } from '../../utils/generic';\nimport type { AgInputTextField } from '../../widgets/agInputTextField';\nimport { AgInputTextFieldSelector } from '../../widgets/agInputTextField';\nimport type { CellEditorInput } from './iCellEditorInput';\nimport type { ITextCellEditorParams } from './iTextCellEditor';\nimport { SimpleCellEditor } from './simpleCellEditor';\n\nclass TextCellEditorInput<TValue = any>\n    implements CellEditorInput<TValue, ITextCellEditorParams<any, TValue>, AgInputTextField>\n{\n    private eInput: AgInputTextField;\n    private params: ITextCellEditorParams<any, TValue>;\n\n    public getTemplate() {\n        return /* html */ `<ag-input-text-field class=\"ag-cell-editor\" data-ref=\"eInput\"></ag-input-text-field>`;\n    }\n    public getAgComponents() {\n        return [AgInputTextFieldSelector];\n    }\n\n    public init(eInput: AgInputTextField, params: ITextCellEditorParams<any, TValue>): void {\n        this.eInput = eInput;\n        this.params = params;\n        if (params.maxLength != null) {\n            eInput.setMaxLength(params.maxLength);\n        }\n    }\n\n    public getValue(): TValue | null | undefined {\n        const value = this.eInput.getValue();\n        if (!_exists(value) && !_exists(this.params.value)) {\n            return this.params.value;\n        }\n        return this.params.parseValue(value!);\n    }\n\n    public getStartValue(): string | null | undefined {\n        const formatValue = this.params.useFormatter || this.params.column.getColDef().refData;\n        return formatValue ? this.params.formatValue(this.params.value) : (this.params.value as any);\n    }\n\n    public setCaret(): void {\n        // when we started editing, we want the caret at the end, not the start.\n        // this comes into play in two scenarios:\n        //   a) when user hits F2\n        //   b) when user hits a printable character\n        const value = this.eInput.getValue();\n        const len = (_exists(value) && value.length) || 0;\n\n        if (len) {\n            this.eInput.getInputElement().setSelectionRange(len, len);\n        }\n    }\n}\n\nexport class TextCellEditor extends SimpleCellEditor<any, ITextCellEditorParams, AgInputTextField> {\n    constructor() {\n        super(new TextCellEditorInput());\n    }\n}\n", "import { KeyCode } from '../../constants/keyCode';\nimport { _exists } from '../../utils/generic';\nimport type { AgInputNumberField } from '../../widgets/agInputNumberField';\nimport { AgInputNumberFieldSelector } from '../../widgets/agInputNumberField';\nimport type { CellEditorInput } from './iCellEditorInput';\nimport type { INumberCellEditorParams } from './iNumberCellEditor';\nimport { SimpleCellEditor } from './simpleCellEditor';\n\nclass NumberCellEditorInput implements CellEditorInput<number, INumberCellEditorParams, AgInputNumberField> {\n    private eInput: AgInputNumberField;\n    private params: INumberCellEditorParams;\n\n    public getTemplate() {\n        return /* html */ `<ag-input-number-field class=\"ag-cell-editor\" data-ref=\"eInput\"></ag-input-number-field>`;\n    }\n    public getAgComponents() {\n        return [AgInputNumberFieldSelector];\n    }\n\n    public init(eInput: AgInputNumberField, params: INumberCellEditorParams): void {\n        this.eInput = eInput;\n        this.params = params;\n        if (params.max != null) {\n            eInput.setMax(params.max);\n        }\n        if (params.min != null) {\n            eInput.setMin(params.min);\n        }\n        if (params.precision != null) {\n            eInput.setPrecision(params.precision);\n        }\n        if (params.step != null) {\n            eInput.setStep(params.step);\n        }\n\n        const inputEl = eInput.getInputElement();\n        if (params.preventStepping) {\n            eInput.addManagedElementListeners(inputEl, { keydown: this.preventStepping });\n        } else if (params.showStepperButtons) {\n            inputEl.classList.add('ag-number-field-input-stepper');\n        }\n    }\n\n    private preventStepping(e: KeyboardEvent): void {\n        if (e.key === KeyCode.UP || e.key === KeyCode.DOWN) {\n            e.preventDefault();\n        }\n    }\n\n    public getValue(): number | null | undefined {\n        const value = this.eInput.getValue();\n        if (!_exists(value) && !_exists(this.params.value)) {\n            return this.params.value;\n        }\n        let parsedValue = this.params.parseValue(value!);\n        if (parsedValue == null) {\n            return parsedValue;\n        }\n        if (typeof parsedValue === 'string') {\n            if (parsedValue === '') {\n                return null;\n            }\n            parsedValue = Number(parsedValue);\n        }\n        return isNaN(parsedValue) ? null : parsedValue;\n    }\n\n    public getStartValue(): string | null | undefined {\n        return this.params.value as any;\n    }\n}\n\nexport class NumberCellEditor extends SimpleCellEditor<number, INumberCellEditorParams, AgInputNumberField> {\n    constructor() {\n        super(new NumberCellEditorInput());\n    }\n}\n", "import { _isBrowserSafari } from '../utils/browser';\nimport { _parseDateTimeFromString, _serialiseDate } from '../utils/date';\nimport { _addOrRemoveAttribute } from '../utils/dom';\nimport type { AgInputTextFieldParams } from './agInputTextField';\nimport { AgInputTextField } from './agInputTextField';\nimport type { ComponentSelector } from './component';\n\nexport class AgInputDateField extends AgInputTextField {\n    private min?: string;\n    private max?: string;\n    private step?: number;\n\n    constructor(config?: AgInputTextFieldParams) {\n        super(config, 'ag-date-field', 'date');\n    }\n\n    public override postConstruct() {\n        super.postConstruct();\n\n        // ensures that the input element is focussed when a clear button is clicked,\n        // unless using safari as there is no clear button and focus does not work properly\n        const usingSafari = _isBrowserSafari();\n        this.addManagedListeners(this.eInput, {\n            wheel: this.onWheel.bind(this),\n            mousedown: () => {\n                if (this.isDisabled() || usingSafari) {\n                    return;\n                }\n                this.eInput.focus();\n            },\n        });\n        this.eInput.step = 'any';\n    }\n\n    private onWheel(e: WheelEvent) {\n        // Prevent default scroll events from incrementing / decrementing the input, since its inconsistent between browsers\n        if (this.gos.getActiveDomElement() === this.eInput) {\n            e.preventDefault();\n        }\n    }\n\n    public setMin(minDate: Date | string | undefined): this {\n        const min = minDate instanceof Date ? _serialiseDate(minDate ?? null, false) ?? undefined : minDate;\n        if (this.min === min) {\n            return this;\n        }\n\n        this.min = min;\n\n        _addOrRemoveAttribute(this.eInput, 'min', min);\n\n        return this;\n    }\n\n    public setMax(maxDate: Date | string | undefined): this {\n        const max = maxDate instanceof Date ? _serialiseDate(maxDate ?? null, false) ?? undefined : maxDate;\n        if (this.max === max) {\n            return this;\n        }\n\n        this.max = max;\n\n        _addOrRemoveAttribute(this.eInput, 'max', max);\n\n        return this;\n    }\n\n    public setStep(step?: number): this {\n        if (this.step === step) {\n            return this;\n        }\n\n        this.step = step;\n\n        _addOrRemoveAttribute(this.eInput, 'step', step);\n\n        return this;\n    }\n\n    public getDate(): Date | undefined {\n        if (!this.eInput.validity.valid) {\n            return undefined;\n        }\n        return _parseDateTimeFromString(this.getValue()) ?? undefined;\n    }\n\n    public setDate(date: Date | undefined, silent?: boolean): void {\n        this.setValue(_serialiseDate(date ?? null, false), silent);\n    }\n}\n\nexport const AgInputDateFieldSelector: ComponentSelector = {\n    selector: 'AG-INPUT-DATE-FIELD',\n    component: AgInputDateField,\n};\n", "import { _serialiseDate } from '../../utils/date';\nimport { _exists } from '../../utils/generic';\nimport type { AgInputDateField } from '../../widgets/agInputDateField';\nimport { AgInputDateFieldSelector } from '../../widgets/agInputDateField';\nimport type { CellEditorInput } from './iCellEditorInput';\nimport type { IDateCellEditorParams } from './iDateCellEditor';\nimport { SimpleCellEditor } from './simpleCellEditor';\n\nclass DateCellEditorInput implements CellEditorInput<Date, IDateCellEditorParams, AgInputDateField> {\n    private eInput: AgInputDateField;\n    private params: IDateCellEditorParams;\n\n    public getTemplate() {\n        return /* html */ `<ag-input-date-field class=\"ag-cell-editor\" data-ref=\"eInput\"></ag-input-date-field>`;\n    }\n    public getAgComponents() {\n        return [AgInputDateFieldSelector];\n    }\n\n    public init(eInput: AgInputDateField, params: IDateCellEditorParams): void {\n        this.eInput = eInput;\n        this.params = params;\n        if (params.min != null) {\n            eInput.setMin(params.min);\n        }\n        if (params.max != null) {\n            eInput.setMax(params.max);\n        }\n        if (params.step != null) {\n            eInput.setStep(params.step);\n        }\n    }\n\n    getValue(): Date | null | undefined {\n        const value = this.eInput.getDate();\n        if (!_exists(value) && !_exists(this.params.value)) {\n            return this.params.value;\n        }\n        return value ?? null;\n    }\n\n    public getStartValue(): string | null | undefined {\n        const { value } = this.params;\n        if (!(value instanceof Date)) {\n            return undefined;\n        }\n        return _serialiseDate(value, false);\n    }\n}\n\nexport class DateCellEditor extends SimpleCellEditor<Date, IDateCellEditorParams, AgInputDateField> {\n    constructor() {\n        super(new DateCellEditorInput());\n    }\n}\n", "import type { DataTypeService } from '../../columns/dataTypeService';\nimport type { BeanCollection } from '../../context/context';\nimport type { AgColumn } from '../../entities/agColumn';\nimport { _parseDateTimeFromString, _serialiseDate } from '../../utils/date';\nimport { _exists } from '../../utils/generic';\nimport type { AgInputDateField } from '../../widgets/agInputDateField';\nimport { AgInputDateFieldSelector } from '../../widgets/agInputDateField';\nimport type { CellEditorInput } from './iCellEditorInput';\nimport type { IDateStringCellEditorParams } from './iDateStringCellEditor';\nimport { SimpleCellEditor } from './simpleCellEditor';\n\nclass DateStringCellEditorInput implements CellEditorInput<string, IDateStringCellEditorParams, AgInputDateField> {\n    private eInput: AgInputDateField;\n    private params: IDateStringCellEditorParams;\n\n    constructor(private getDataTypeService: () => DataTypeService | undefined) {}\n\n    public getTemplate() {\n        return /* html */ `<ag-input-date-field class=\"ag-cell-editor\" data-ref=\"eInput\"></ag-input-date-field>`;\n    }\n    public getAgComponents() {\n        return [AgInputDateFieldSelector];\n    }\n\n    public init(eInput: AgInputDateField, params: IDateStringCellEditorParams): void {\n        this.eInput = eInput;\n        this.params = params;\n        if (params.min != null) {\n            eInput.setMin(params.min);\n        }\n        if (params.max != null) {\n            eInput.setMax(params.max);\n        }\n        if (params.step != null) {\n            eInput.setStep(params.step);\n        }\n    }\n\n    public getValue(): string | null | undefined {\n        const value = this.formatDate(this.eInput.getDate());\n        if (!_exists(value) && !_exists(this.params.value)) {\n            return this.params.value;\n        }\n        return this.params.parseValue(value ?? '');\n    }\n\n    public getStartValue(): string | null | undefined {\n        return _serialiseDate(this.parseDate(this.params.value ?? undefined) ?? null, false);\n    }\n\n    private parseDate(value: string | undefined): Date | undefined {\n        const dataTypeService = this.getDataTypeService();\n        return dataTypeService\n            ? dataTypeService.getDateParserFunction(this.params.column as AgColumn)(value)\n            : _parseDateTimeFromString(value) ?? undefined;\n    }\n\n    private formatDate(value: Date | undefined): string | undefined {\n        const dataTypeService = this.getDataTypeService();\n        return dataTypeService\n            ? dataTypeService.getDateFormatterFunction(this.params.column as AgColumn)(value)\n            : _serialiseDate(value ?? null, false) ?? undefined;\n    }\n}\n\nexport class DateStringCellEditor extends SimpleCellEditor<string, IDateStringCellEditorParams, AgInputDateField> {\n    private dataTypeService?: DataTypeService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.dataTypeService = beans.dataTypeService;\n    }\n\n    constructor() {\n        super(new DateStringCellEditorInput(() => this.dataTypeService));\n    }\n}\n", "import type { ICellEditorComp, ICellEditorParams } from '../../interfaces/iCellEditor';\nimport { _getAriaCheckboxStateName } from '../../utils/aria';\nimport type { AgCheckbox } from '../../widgets/agCheckbox';\nimport { AgCheckboxSelector } from '../../widgets/agCheckbox';\nimport { RefPlaceholder } from '../../widgets/component';\nimport { PopupComponent } from '../../widgets/popupComponent';\n\nexport class CheckboxCellEditor extends PopupComponent implements ICellEditorComp {\n    constructor() {\n        super(\n            /* html */ `\n            <div class=\"ag-cell-wrapper ag-cell-edit-wrapper ag-checkbox-edit\">\n                <ag-checkbox role=\"presentation\" data-ref=\"eCheckbox\"></ag-checkbox>\n            </div>`,\n            [AgCheckboxSelector]\n        );\n    }\n\n    private readonly eCheckbox: AgCheckbox = RefPlaceholder;\n    private params: ICellEditorParams<any, boolean>;\n\n    public init(params: ICellEditorParams<any, boolean>): void {\n        this.params = params;\n        const isSelected = params.value ?? undefined;\n\n        this.eCheckbox.setValue(isSelected);\n\n        const inputEl = this.eCheckbox.getInputElement();\n        inputEl.setAttribute('tabindex', '-1');\n\n        this.setAriaLabel(isSelected);\n\n        this.addManagedListeners(this.eCheckbox, {\n            fieldValueChanged: (event: { selected?: boolean }) => this.setAriaLabel(event.selected),\n        });\n    }\n\n    public getValue(): boolean | undefined {\n        return this.eCheckbox.getValue();\n    }\n\n    public focusIn(): void {\n        this.eCheckbox.getFocusableElement().focus();\n    }\n\n    public afterGuiAttached(): void {\n        if (this.params.cellStartedEdit) {\n            this.focusIn();\n        }\n    }\n\n    public override isPopup() {\n        return false;\n    }\n\n    private setAriaLabel(isSelected?: boolean): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const stateName = _getAriaCheckboxStateName(translate, isSelected);\n        const ariaLabel = translate('ariaToggleCellValue', 'Press SPACE to toggle cell value');\n        this.eCheckbox.setInputAriaLabel(`${ariaLabel} (${stateName})`);\n    }\n}\n", "import type { CellRange } from '../interfaces/IRangeService';\nimport type { CellValueChange } from './iUndoRedo';\n\nexport class UndoRedoAction {\n    cellValueChanges: CellValueChange[];\n\n    constructor(cellValueChanges: CellValueChange[]) {\n        this.cellValueChanges = cellValueChanges;\n    }\n}\n\nexport class RangeUndoRedoAction extends UndoRedoAction {\n    constructor(\n        cellValueChanges: CellValueChange[],\n        public readonly initialRange?: CellRange,\n        public readonly finalRange?: CellRange,\n        public readonly ranges?: CellRange[]\n    ) {\n        super(cellValueChanges);\n    }\n}\n\nconst DEFAULT_STACK_SIZE = 10;\nexport class UndoRedoStack {\n    private readonly maxStackSize: number;\n\n    private actionStack: UndoRedoAction[] = [];\n\n    constructor(maxStackSize?: number) {\n        this.maxStackSize = maxStackSize ? maxStackSize : DEFAULT_STACK_SIZE;\n        this.actionStack = new Array<UndoRedoAction>(this.maxStackSize);\n    }\n\n    public pop(): UndoRedoAction | undefined {\n        return this.actionStack.pop();\n    }\n\n    public push(item: UndoRedoAction): void {\n        const shouldAddActions = item.cellValueChanges && item.cellValueChanges.length > 0;\n\n        if (!shouldAddActions) {\n            return;\n        }\n\n        if (this.actionStack.length === this.maxStackSize) {\n            this.actionStack.shift();\n        }\n\n        this.actionStack.push(item);\n    }\n\n    public clear(): void {\n        this.actionStack = [];\n    }\n\n    public getCurrentStackSize(): number {\n        return this.actionStack.length;\n    }\n}\n", "import type { ColumnModel } from '../columns/columnModel';\nimport type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { CtrlsService } from '../ctrlsService';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { CellPosition, CellPositionUtils } from '../entities/cellPositionUtils';\nimport type { RowPosition, RowPositionUtils } from '../entities/rowPositionUtils';\nimport type {\n    CellEditingStartedEvent,\n    CellEditingStoppedEvent,\n    CellValueChangedEvent,\n    FillEndEvent,\n    RedoEndedEvent,\n    RedoStartedEvent,\n    RowEditingStartedEvent,\n    UndoEndedEvent,\n    UndoStartedEvent,\n} from '../events';\nimport type { FocusService } from '../focusService';\nimport type { GridBodyCtrl } from '../gridBodyComp/gridBodyCtrl';\nimport type { CellRange, CellRangeParams, IRangeService } from '../interfaces/IRangeService';\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\nimport type { CellValueChange, LastFocusedCell } from './iUndoRedo';\nimport { RangeUndoRedoAction, UndoRedoAction, UndoRedoStack } from './undoRedoStack';\n\nexport class UndoRedoService extends BeanStub implements NamedBean {\n    beanName = 'undoRedoService' as const;\n\n    private focusService: FocusService;\n    private ctrlsService: CtrlsService;\n    private cellPositionUtils: CellPositionUtils;\n    private rowPositionUtils: RowPositionUtils;\n    private columnModel: ColumnModel;\n    private rangeService?: IRangeService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.focusService = beans.focusService;\n        this.ctrlsService = beans.ctrlsService;\n        this.cellPositionUtils = beans.cellPositionUtils;\n        this.rowPositionUtils = beans.rowPositionUtils;\n        this.columnModel = beans.columnModel;\n        this.rangeService = beans.rangeService;\n    }\n\n    private gridBodyCtrl: GridBodyCtrl;\n\n    private cellValueChanges: CellValueChange[] = [];\n\n    private undoStack: UndoRedoStack;\n    private redoStack: UndoRedoStack;\n\n    private activeCellEdit: CellPosition | null = null;\n    private activeRowEdit: RowPosition | null = null;\n\n    private isPasting = false;\n    private isRangeInAction = false;\n\n    public postConstruct(): void {\n        if (!this.gos.get('undoRedoCellEditing')) {\n            return;\n        }\n\n        const undoRedoLimit = this.gos.get('undoRedoCellEditingLimit');\n\n        if (undoRedoLimit <= 0) {\n            return;\n        }\n\n        this.undoStack = new UndoRedoStack(undoRedoLimit);\n        this.redoStack = new UndoRedoStack(undoRedoLimit);\n\n        this.addListeners();\n\n        const listener = this.clearStacks.bind(this);\n        this.addManagedEventListeners({\n            cellValueChanged: this.onCellValueChanged.bind(this),\n            // undo / redo is restricted to actual editing so we clear the stacks when other operations are\n            // performed that change the order of the row / cols.\n            modelUpdated: (e) => {\n                if (!e.keepUndoRedoStack) {\n                    this.clearStacks();\n                }\n            },\n            columnPivotModeChanged: listener,\n            newColumnsLoaded: listener,\n            columnGroupOpened: listener,\n            columnRowGroupChanged: listener,\n            columnMoved: listener,\n            columnPinned: listener,\n            columnVisible: listener,\n            rowDragEnd: listener,\n        });\n\n        this.ctrlsService.whenReady((p) => {\n            this.gridBodyCtrl = p.gridBodyCtrl;\n        });\n    }\n\n    private onCellValueChanged = (event: CellValueChangedEvent): void => {\n        const eventCell: CellPosition = { column: event.column, rowIndex: event.rowIndex!, rowPinned: event.rowPinned };\n        const isCellEditing =\n            this.activeCellEdit !== null && this.cellPositionUtils.equals(this.activeCellEdit, eventCell);\n        const isRowEditing =\n            this.activeRowEdit !== null && this.rowPositionUtils.sameRow(this.activeRowEdit, eventCell);\n\n        const shouldCaptureAction = isCellEditing || isRowEditing || this.isPasting || this.isRangeInAction;\n\n        if (!shouldCaptureAction) {\n            return;\n        }\n\n        const { rowPinned, rowIndex, column, oldValue, value } = event;\n\n        const cellValueChange: CellValueChange = {\n            rowPinned,\n            rowIndex: rowIndex!,\n            columnId: column.getColId(),\n            newValue: value,\n            oldValue,\n        };\n\n        this.cellValueChanges.push(cellValueChange);\n    };\n\n    private clearStacks = () => {\n        this.undoStack.clear();\n        this.redoStack.clear();\n    };\n\n    public getCurrentUndoStackSize(): number {\n        return this.undoStack ? this.undoStack.getCurrentStackSize() : 0;\n    }\n\n    public getCurrentRedoStackSize(): number {\n        return this.redoStack ? this.redoStack.getCurrentStackSize() : 0;\n    }\n\n    public undo(source: 'api' | 'ui'): void {\n        const startEvent: WithoutGridCommon<UndoStartedEvent> = {\n            type: 'undoStarted',\n            source,\n        };\n        this.eventService.dispatchEvent(startEvent);\n\n        const operationPerformed = this.undoRedo(this.undoStack, this.redoStack, 'initialRange', 'oldValue', 'undo');\n\n        const endEvent: WithoutGridCommon<UndoEndedEvent> = {\n            type: 'undoEnded',\n            source,\n            operationPerformed,\n        };\n        this.eventService.dispatchEvent(endEvent);\n    }\n\n    public redo(source: 'api' | 'ui'): void {\n        const startEvent: WithoutGridCommon<RedoStartedEvent> = {\n            type: 'redoStarted',\n            source,\n        };\n        this.eventService.dispatchEvent(startEvent);\n\n        const operationPerformed = this.undoRedo(this.redoStack, this.undoStack, 'finalRange', 'newValue', 'redo');\n\n        const endEvent: WithoutGridCommon<RedoEndedEvent> = {\n            type: 'redoEnded',\n            source,\n            operationPerformed,\n        };\n        this.eventService.dispatchEvent(endEvent);\n    }\n\n    private undoRedo(\n        undoRedoStack: UndoRedoStack,\n        opposingUndoRedoStack: UndoRedoStack,\n        rangeProperty: 'initialRange' | 'finalRange',\n        cellValueChangeProperty: 'oldValue' | 'newValue',\n        source: 'undo' | 'redo'\n    ): boolean {\n        if (!undoRedoStack) {\n            return false;\n        }\n\n        const undoRedoAction: UndoRedoAction | undefined = undoRedoStack.pop();\n\n        if (!undoRedoAction || !undoRedoAction.cellValueChanges) {\n            return false;\n        }\n\n        this.processAction(\n            undoRedoAction,\n            (cellValueChange: CellValueChange) => cellValueChange[cellValueChangeProperty],\n            source\n        );\n\n        if (undoRedoAction instanceof RangeUndoRedoAction) {\n            this.processRange(this.rangeService!, undoRedoAction.ranges || [undoRedoAction[rangeProperty]]);\n        } else {\n            this.processCell(undoRedoAction.cellValueChanges);\n        }\n\n        opposingUndoRedoStack.push(undoRedoAction);\n\n        return true;\n    }\n\n    private processAction(\n        action: UndoRedoAction,\n        valueExtractor: (cellValueChange: CellValueChange) => any,\n        source: string\n    ) {\n        action.cellValueChanges.forEach((cellValueChange) => {\n            const { rowIndex, rowPinned, columnId } = cellValueChange;\n            const rowPosition: RowPosition = { rowIndex, rowPinned };\n            const currentRow = this.rowPositionUtils.getRowNode(rowPosition);\n\n            // checks if the row has been filtered out\n            if (!currentRow!.displayed) {\n                return;\n            }\n\n            currentRow!.setDataValue(columnId, valueExtractor(cellValueChange), source);\n        });\n    }\n\n    private processRange(rangeService: IRangeService, ranges: (CellRange | undefined)[]) {\n        let lastFocusedCell: LastFocusedCell;\n\n        rangeService.removeAllCellRanges(true);\n        ranges.forEach((range, idx) => {\n            if (!range) {\n                return;\n            }\n\n            const startRow = range.startRow;\n            const endRow = range.endRow;\n\n            if (idx === ranges.length - 1) {\n                lastFocusedCell = {\n                    rowPinned: startRow!.rowPinned,\n                    rowIndex: startRow!.rowIndex,\n                    columnId: range.startColumn.getColId(),\n                };\n\n                this.setLastFocusedCell(lastFocusedCell);\n            }\n\n            const cellRangeParams: CellRangeParams = {\n                rowStartIndex: startRow!.rowIndex,\n                rowStartPinned: startRow!.rowPinned,\n                rowEndIndex: endRow!.rowIndex,\n                rowEndPinned: endRow!.rowPinned,\n                columnStart: range.startColumn,\n                columns: range.columns,\n            };\n\n            rangeService.addCellRange(cellRangeParams);\n        });\n    }\n\n    private processCell(cellValueChanges: CellValueChange[]) {\n        const cellValueChange = cellValueChanges[0];\n        const { rowIndex, rowPinned } = cellValueChange;\n        const rowPosition: RowPosition = { rowIndex, rowPinned };\n        const row = this.rowPositionUtils.getRowNode(rowPosition);\n\n        const lastFocusedCell: LastFocusedCell = {\n            rowPinned: cellValueChange.rowPinned,\n            rowIndex: row!.rowIndex!,\n            columnId: cellValueChange.columnId,\n        };\n\n        // when single cells are being processed, they should be considered\n        // as ranges when the rangeService is present (singleCellRanges).\n        // otherwise focus will be restore but the range will not.\n        this.setLastFocusedCell(lastFocusedCell, this.rangeService);\n    }\n\n    private setLastFocusedCell(lastFocusedCell: LastFocusedCell, rangeService?: IRangeService) {\n        const { rowIndex, columnId, rowPinned } = lastFocusedCell;\n        const scrollFeature = this.gridBodyCtrl.getScrollFeature();\n\n        const column: AgColumn | null = this.columnModel.getCol(columnId);\n\n        if (!column) {\n            return;\n        }\n\n        scrollFeature.ensureIndexVisible(rowIndex);\n        scrollFeature.ensureColumnVisible(column);\n\n        const cellPosition: CellPosition = { rowIndex, column, rowPinned };\n        this.focusService.setFocusedCell({ ...cellPosition, forceBrowserFocus: true });\n\n        rangeService?.setRangeToCell(cellPosition);\n    }\n\n    private addListeners(): void {\n        this.addManagedEventListeners({\n            rowEditingStarted: (e) => {\n                this.activeRowEdit = { rowIndex: e.rowIndex!, rowPinned: e.rowPinned };\n            },\n            rowEditingStopped: () => {\n                const action = new UndoRedoAction(this.cellValueChanges);\n                this.pushActionsToUndoStack(action);\n                this.activeRowEdit = null;\n            },\n            cellEditingStarted: (e) => {\n                this.activeCellEdit = { column: e.column, rowIndex: e.rowIndex!, rowPinned: e.rowPinned };\n            },\n            cellEditingStopped: (e) => {\n                this.activeCellEdit = null;\n\n                const shouldPushAction =\n                    e.valueChanged && !this.activeRowEdit && !this.isPasting && !this.isRangeInAction;\n\n                if (shouldPushAction) {\n                    const action = new UndoRedoAction(this.cellValueChanges);\n                    this.pushActionsToUndoStack(action);\n                }\n            },\n            pasteStart: () => {\n                this.isPasting = true;\n            },\n            pasteEnd: () => {\n                const action = new UndoRedoAction(this.cellValueChanges);\n                this.pushActionsToUndoStack(action);\n                this.isPasting = false;\n            },\n            fillStart: () => {\n                this.isRangeInAction = true;\n            },\n            fillEnd: (event) => {\n                const action = new RangeUndoRedoAction(this.cellValueChanges, event.initialRange, event.finalRange);\n                this.pushActionsToUndoStack(action);\n                this.isRangeInAction = false;\n            },\n            keyShortcutChangedCellStart: () => {\n                this.isRangeInAction = true;\n            },\n            keyShortcutChangedCellEnd: () => {\n                let action: UndoRedoAction;\n                if (this.rangeService && this.gos.get('enableRangeSelection')) {\n                    action = new RangeUndoRedoAction(this.cellValueChanges, undefined, undefined, [\n                        ...this.rangeService.getCellRanges(),\n                    ]);\n                } else {\n                    action = new UndoRedoAction(this.cellValueChanges);\n                }\n                this.pushActionsToUndoStack(action);\n                this.isRangeInAction = false;\n            },\n        });\n    }\n\n    private pushActionsToUndoStack(action: UndoRedoAction) {\n        this.undoStack.push(action);\n\n        this.cellValueChanges = [];\n        this.redoStack.clear();\n    }\n}\n", "import type { BeanCollection } from '../context/context';\nimport type { Column } from '../interfaces/iColumn';\nimport type { IRowNode } from '../interfaces/iRowNode';\n\nexport function getVerticalPixelRange(beans: BeanCollection): { top: number; bottom: number } {\n    return beans.ctrlsService.getGridBodyCtrl().getScrollFeature().getVScrollPosition();\n}\n\nexport function getHorizontalPixelRange(beans: BeanCollection): { left: number; right: number } {\n    return beans.ctrlsService.getGridBodyCtrl().getScrollFeature().getHScrollPosition();\n}\n\nexport function ensureColumnVisible(\n    beans: BeanCollection,\n    key: string | Column,\n    position: 'auto' | 'start' | 'middle' | 'end' = 'auto'\n) {\n    beans.frameworkOverrides.wrapIncoming(\n        () => beans.ctrlsService.getGridBodyCtrl().getScrollFeature().ensureColumnVisible(key, position),\n        'ensureVisible'\n    );\n}\n\nexport function ensureIndexVisible(\n    beans: BeanCollection,\n    index: number,\n    position?: 'top' | 'bottom' | 'middle' | null\n) {\n    beans.frameworkOverrides.wrapIncoming(\n        () => beans.ctrlsService.getGridBodyCtrl().getScrollFeature().ensureIndexVisible(index, position),\n        'ensureVisible'\n    );\n}\n\nexport function ensureNodeVisible<TData = any>(\n    beans: BeanCollection,\n    nodeSelector: TData | IRowNode<TData> | ((row: IRowNode<TData>) => boolean),\n    position: 'top' | 'bottom' | 'middle' | null = null\n) {\n    beans.frameworkOverrides.wrapIncoming(\n        () => beans.ctrlsService.getGridBodyCtrl().getScrollFeature().ensureNodeVisible(nodeSelector, position),\n        'ensureVisible'\n    );\n}\n", "import type { StartEditingCellParams } from '../api/gridApi';\nimport { ensureColumnVisible, ensureIndexVisible } from '../api/scrollApi';\nimport { _unwrapUserComp } from '../components/framework/unwrapUserComp';\nimport type { BeanCollection } from '../context/context';\nimport type { CellPosition } from '../entities/cellPositionUtils';\nimport type { ICellEditor } from '../interfaces/iCellEditor';\nimport type { GetCellEditorInstancesParams } from '../rendering/rowRenderer';\nimport { _warnOnce } from '../utils/function';\n\nexport function undoCellEditing(beans: BeanCollection): void {\n    beans.undoRedoService?.undo('api');\n}\n\nexport function redoCellEditing(beans: BeanCollection): void {\n    beans.undoRedoService?.redo('api');\n}\n\nexport function getCellEditorInstances<TData = any>(\n    beans: BeanCollection,\n    params: GetCellEditorInstancesParams<TData> = {}\n): ICellEditor[] {\n    const res = beans.rowRenderer.getCellEditorInstances(params);\n    const unwrapped = res.map(_unwrapUserComp);\n    return unwrapped;\n}\n\nexport function getEditingCells(beans: BeanCollection): CellPosition[] {\n    return beans.rowRenderer.getEditingCells();\n}\n\nexport function stopEditing(beans: BeanCollection, cancel: boolean = false): void {\n    beans.rowRenderer.stopEditing(cancel);\n}\n\nexport function startEditingCell(beans: BeanCollection, params: StartEditingCellParams): void {\n    const column = beans.columnModel.getCol(params.colKey);\n    if (!column) {\n        _warnOnce(`no column found for ${params.colKey}`);\n        return;\n    }\n    const cellPosition: CellPosition = {\n        rowIndex: params.rowIndex,\n        rowPinned: params.rowPinned || null,\n        column: column,\n    };\n    const notPinned = params.rowPinned == null;\n    if (notPinned) {\n        ensureIndexVisible(beans, params.rowIndex);\n    }\n\n    ensureColumnVisible(beans, params.colKey);\n\n    const cell = beans.navigationService.getCellByPosition(cellPosition);\n    if (!cell) {\n        return;\n    }\n    if (!beans.focusService.isCellFocused(cellPosition)) {\n        beans.focusService.setFocusedCell(cellPosition);\n    }\n    cell.startRowOrCellEdit(params.key);\n}\n\nexport function getCurrentUndoSize(beans: BeanCollection): number {\n    return beans.undoRedoService?.getCurrentUndoStackSize() ?? 0;\n}\n\nexport function getCurrentRedoSize(beans: BeanCollection): number {\n    return beans.undoRedoService?.getCurrentRedoStackSize() ?? 0;\n}\n", "import type { UserComponentFactory } from '../components/framework/userComponentFactory';\nimport { KeyCode } from '../constants/keyCode';\nimport type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { CoreBeanCollection } from '../context/context';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { CellPosition } from '../entities/cellPositionUtils';\nimport type { RowNode } from '../entities/rowNode';\nimport type { CellEditingStartedEvent, CellEditingStoppedEvent } from '../events';\nimport type { NavigationService } from '../gridBodyComp/navigationService';\nimport type { ICellEditorParams } from '../interfaces/iCellEditor';\nimport type { CellCtrl, ICellComp } from '../rendering/cell/cellCtrl';\nimport type { ValueService } from '../valueService/valueService';\nimport { PopupEditorWrapper } from './cellEditors/popupEditorWrapper';\n\nexport class EditService extends BeanStub implements NamedBean {\n    beanName = 'editService' as const;\n\n    private navigationService: NavigationService;\n    private userComponentFactory: UserComponentFactory;\n    private valueService: ValueService;\n\n    public wireBeans(beans: CoreBeanCollection): void {\n        this.navigationService = beans.navigationService;\n        this.userComponentFactory = beans.userComponentFactory;\n        this.valueService = beans.valueService;\n    }\n\n    public startEditing(\n        cellCtrl: CellCtrl,\n        key: string | null = null,\n        cellStartedEdit = false,\n        event: KeyboardEvent | MouseEvent | null = null\n    ): void {\n        const editorParams = this.createCellEditorParams(cellCtrl, key, cellStartedEdit);\n        const colDef = cellCtrl.getColumn().getColDef();\n        const compDetails = this.userComponentFactory.getCellEditorDetails(colDef, editorParams);\n\n        // if cellEditorSelector was used, we give preference to popup and popupPosition from the selector\n        const popup = compDetails?.popupFromSelector != null ? compDetails.popupFromSelector : !!colDef.cellEditorPopup;\n        const position: 'over' | 'under' | undefined =\n            compDetails?.popupPositionFromSelector != null\n                ? compDetails.popupPositionFromSelector\n                : colDef.cellEditorPopupPosition;\n\n        cellCtrl.setEditing(true, compDetails);\n        cellCtrl.getComp().setEditDetails(compDetails, popup, position, this.gos.get('reactiveCustomComponents'));\n\n        const e: CellEditingStartedEvent = cellCtrl.createEvent(event, 'cellEditingStarted');\n        this.eventService.dispatchEvent(e);\n    }\n\n    public stopEditing(cellCtrl: CellCtrl, cancel: boolean): boolean {\n        const cellComp = cellCtrl.getComp();\n        const { newValue, newValueExists } = this.takeValueFromCellEditor(cancel, cellComp);\n        const rowNode = cellCtrl.getRowNode();\n        const column = cellCtrl.getColumn();\n        const oldValue = rowNode.getValueFromValueService(column);\n        let valueChanged = false;\n\n        if (newValueExists) {\n            valueChanged = this.saveNewValue(cellCtrl, oldValue, newValue, rowNode, column);\n        }\n\n        cellCtrl.setEditing(false, undefined);\n        cellComp.setEditDetails(); // passing nothing stops editing\n\n        cellCtrl.updateAndFormatValue(false);\n        cellCtrl.refreshCell({ forceRefresh: true, suppressFlash: true });\n\n        const event: CellEditingStoppedEvent = {\n            ...cellCtrl.createEvent(null, 'cellEditingStopped'),\n            oldValue,\n            newValue,\n            valueChanged,\n        };\n        this.eventService.dispatchEvent(event);\n\n        return valueChanged;\n    }\n\n    public handleColDefChanged(cellCtrl: CellCtrl): void {\n        const cellEditor = cellCtrl.getCellEditor();\n        if (cellEditor?.refresh) {\n            const { eventKey, cellStartedEdit } = cellCtrl.getEditCompDetails()!.params;\n            const editorParams = this.createCellEditorParams(cellCtrl, eventKey, cellStartedEdit);\n            const colDef = cellCtrl.getColumn().getColDef();\n            const compDetails = this.userComponentFactory.getCellEditorDetails(colDef, editorParams);\n            cellEditor.refresh(compDetails!.params);\n        }\n    }\n\n    public setFocusOutOnEditor(cellCtrl: CellCtrl): void {\n        const cellEditor = cellCtrl.getComp().getCellEditor();\n\n        if (cellEditor && cellEditor.focusOut) {\n            cellEditor.focusOut();\n        }\n    }\n\n    public setFocusInOnEditor(cellCtrl: CellCtrl): void {\n        const cellEditor = cellCtrl.getComp().getCellEditor();\n\n        if (cellEditor && cellEditor.focusIn) {\n            // if the editor is present, then we just focus it\n            cellEditor.focusIn();\n        } else {\n            // if the editor is not present, it means async cell editor (eg React fibre)\n            // and we are trying to set focus before the cell editor is present, so we\n            // focus the cell instead\n            cellCtrl.focusCell(true);\n        }\n    }\n\n    public stopEditingAndFocus(cellCtrl: CellCtrl, suppressNavigateAfterEdit = false, shiftKey: boolean = false): void {\n        cellCtrl.stopRowOrCellEdit();\n        cellCtrl.focusCell(true);\n\n        if (!suppressNavigateAfterEdit) {\n            this.navigateAfterEdit(shiftKey, cellCtrl.getCellPosition());\n        }\n    }\n\n    public createPopupEditorWrapper(params: ICellEditorParams): PopupEditorWrapper {\n        return new PopupEditorWrapper(params);\n    }\n\n    private takeValueFromCellEditor(cancel: boolean, cellComp: ICellComp): { newValue?: any; newValueExists: boolean } {\n        const noValueResult = { newValueExists: false };\n\n        if (cancel) {\n            return noValueResult;\n        }\n\n        const cellEditor = cellComp.getCellEditor();\n\n        if (!cellEditor) {\n            return noValueResult;\n        }\n\n        const userWantsToCancel = cellEditor.isCancelAfterEnd && cellEditor.isCancelAfterEnd();\n\n        if (userWantsToCancel) {\n            return noValueResult;\n        }\n\n        const newValue = cellEditor.getValue();\n\n        return {\n            newValue: newValue,\n            newValueExists: true,\n        };\n    }\n\n    /**\n     * @returns `True` if the value changes, otherwise `False`.\n     */\n    private saveNewValue(\n        cellCtrl: CellCtrl,\n        oldValue: any,\n        newValue: any,\n        rowNode: RowNode,\n        column: AgColumn\n    ): boolean {\n        if (newValue === oldValue) {\n            return false;\n        }\n\n        // we suppressRefreshCell because the call to rowNode.setDataValue() results in change detection\n        // getting triggered, which results in all cells getting refreshed. we do not want this refresh\n        // to happen on this call as we want to call it explicitly below. otherwise refresh gets called twice.\n        // if we only did this refresh (and not the one below) then the cell would flash and not be forced.\n        cellCtrl.setSuppressRefreshCell(true);\n        const valueChanged = rowNode.setDataValue(column, newValue, 'edit');\n        cellCtrl.setSuppressRefreshCell(false);\n\n        return valueChanged;\n    }\n\n    private createCellEditorParams(\n        cellCtrl: CellCtrl,\n        key: string | null,\n        cellStartedEdit: boolean\n    ): ICellEditorParams {\n        const column = cellCtrl.getColumn();\n        const rowNode = cellCtrl.getRowNode();\n        return this.gos.addGridCommonParams({\n            value: rowNode.getValueFromValueService(column),\n            eventKey: key,\n            column: column,\n            colDef: column.getColDef(),\n            rowIndex: cellCtrl.getCellPosition().rowIndex,\n            node: rowNode,\n            data: rowNode.data,\n            cellStartedEdit: cellStartedEdit,\n            onKeyDown: cellCtrl.onKeyDown.bind(cellCtrl),\n            stopEditing: cellCtrl.stopEditingAndFocus.bind(cellCtrl),\n            eGridCell: cellCtrl.getGui(),\n            parseValue: (newValue: any) => this.valueService.parseValue(column, rowNode, newValue, cellCtrl.getValue()),\n            formatValue: cellCtrl.formatValue.bind(cellCtrl),\n        });\n    }\n\n    private navigateAfterEdit(shiftKey: boolean, cellPosition: CellPosition): void {\n        const enterNavigatesVerticallyAfterEdit = this.gos.get('enterNavigatesVerticallyAfterEdit');\n\n        if (enterNavigatesVerticallyAfterEdit) {\n            const key = shiftKey ? KeyCode.UP : KeyCode.DOWN;\n            this.navigationService.navigateToNextCell(null, key, cellPosition, false);\n        }\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { RowEditingStartedEvent, RowEditingStoppedEvent, RowValueChangedEvent } from '../events';\nimport type { CellCtrl } from '../rendering/cell/cellCtrl';\nimport type { RowCtrl } from '../rendering/row/rowCtrl';\n\nexport class RowEditService extends BeanStub implements NamedBean {\n    beanName = 'rowEditService' as const;\n\n    public startEditing(\n        rowCtrl: RowCtrl,\n        key: string | null = null,\n        sourceRenderedCell: CellCtrl | null = null,\n        event: KeyboardEvent | null = null\n    ): void {\n        const atLeastOneEditing = rowCtrl.getAllCellCtrls().reduce((prev: boolean, cellCtrl: CellCtrl) => {\n            const cellStartedEdit = cellCtrl === sourceRenderedCell;\n            if (cellStartedEdit) {\n                cellCtrl.startEditing(key, cellStartedEdit, event);\n            } else {\n                cellCtrl.startEditing(null, cellStartedEdit, event);\n            }\n            if (prev) {\n                return true;\n            }\n\n            return cellCtrl.isEditing();\n        }, false);\n\n        if (atLeastOneEditing) {\n            this.setEditing(rowCtrl, true);\n        }\n    }\n\n    public stopEditing(rowCtrl: RowCtrl, cancel = false): void {\n        const cellControls = rowCtrl.getAllCellCtrls();\n        const isRowEdit = rowCtrl.isEditing();\n\n        rowCtrl.setStoppingRowEdit(true);\n\n        let fireRowEditEvent = false;\n        for (const ctrl of cellControls) {\n            const valueChanged = ctrl.stopEditing(cancel);\n            if (isRowEdit && !cancel && !fireRowEditEvent && valueChanged) {\n                fireRowEditEvent = true;\n            }\n        }\n\n        if (fireRowEditEvent) {\n            const event: RowValueChangedEvent = rowCtrl.createRowEvent('rowValueChanged');\n            this.eventService.dispatchEvent(event);\n        }\n\n        if (isRowEdit) {\n            this.setEditing(rowCtrl, false);\n        }\n\n        rowCtrl.setStoppingRowEdit(false);\n    }\n\n    private setEditing(rowCtrl: RowCtrl, value: boolean): void {\n        rowCtrl.setEditingRow(value);\n        rowCtrl.forEachGui(undefined, (gui) => gui.rowComp.addOrRemoveCssClass('ag-row-editing', value));\n\n        const event: RowEditingStartedEvent | RowEditingStoppedEvent = value\n            ? rowCtrl.createRowEvent('rowEditingStarted')\n            : rowCtrl.createRowEvent('rowEditingStopped');\n\n        this.eventService.dispatchEvent(event);\n    }\n}\n", "import type { Module } from '../interfaces/iModule';\nimport { UndoRedoService } from '../undoRedo/undoRedoService';\nimport { VERSION } from '../version';\nimport { CheckboxCellEditor } from './cellEditors/checkboxCellEditor';\nimport { DateCellEditor } from './cellEditors/dateCellEditor';\nimport { DateStringCellEditor } from './cellEditors/dateStringCellEditor';\nimport { LargeTextCellEditor } from './cellEditors/largeTextCellEditor';\nimport { NumberCellEditor } from './cellEditors/numberCellEditor';\nimport { SelectCellEditor } from './cellEditors/selectCellEditor';\nimport { TextCellEditor } from './cellEditors/textCellEditor';\nimport {\n    getCellEditorInstances,\n    getCurrentRedoSize,\n    getCurrentUndoSize,\n    getEditingCells,\n    redoCellEditing,\n    startEditingCell,\n    stopEditing,\n    undoCellEditing,\n} from './editApi';\nimport { EditService } from './editService';\nimport { RowEditService } from './rowEditService';\n\nexport const EditCoreModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/edit-core',\n    beans: [EditService],\n};\n\nexport const EditApiModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/edit-api',\n    apiFunctions: {\n        undoCellEditing,\n        redoCellEditing,\n        getCellEditorInstances,\n        getEditingCells,\n        stopEditing,\n        startEditingCell,\n        getCurrentUndoSize,\n        getCurrentRedoSize,\n    },\n    dependantModules: [EditCoreModule],\n};\n\nexport const UndoRedoEditModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/undo-redo-edit',\n    beans: [UndoRedoService],\n    dependantModules: [EditCoreModule],\n};\n\nexport const FullRowEditModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/full-row-edit',\n    beans: [RowEditService],\n    dependantModules: [EditCoreModule],\n};\n\nexport const DefaultEditorModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/default-editor',\n    userComponents: [{ name: 'agCellEditor', classImp: TextCellEditor }],\n    dependantModules: [EditCoreModule],\n};\n\nexport const DataTypeEditorsModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/data-type-editors',\n    userComponents: [\n        { name: 'agTextCellEditor', classImp: TextCellEditor },\n        { name: 'agNumberCellEditor', classImp: NumberCellEditor },\n        { name: 'agDateCellEditor', classImp: DateCellEditor },\n        { name: 'agDateStringCellEditor', classImp: DateStringCellEditor },\n        { name: 'agCheckboxCellEditor', classImp: CheckboxCellEditor },\n    ],\n    dependantModules: [DefaultEditorModule],\n};\n\nexport const SelectEditorModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/select-editor',\n    userComponents: [{ name: 'agSelectCellEditor', classImp: SelectCellEditor }],\n    dependantModules: [EditCoreModule],\n};\n\nexport const LargeTextEditorModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/large-text-editor',\n    userComponents: [{ name: 'agLargeTextCellEditor', classImp: LargeTextCellEditor }],\n    dependantModules: [EditCoreModule],\n};\n\nconst AllCommunityEditorsModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/all-editors',\n    dependantModules: [DefaultEditorModule, DataTypeEditorsModule, SelectEditorModule, LargeTextEditorModule],\n};\n\nexport const EditModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/editing',\n    dependantModules: [EditCoreModule, UndoRedoEditModule, FullRowEditModule, AllCommunityEditorsModule, EditApiModule],\n};\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { CtrlsService } from '../ctrlsService';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { AgColumnGroup } from '../entities/agColumnGroup';\nimport type { RowContainerCtrl } from '../gridBodyComp/rowContainer/rowContainerCtrl';\nimport type { RowRenderer } from './rowRenderer';\n\nexport class AutoWidthCalculator extends BeanStub implements NamedBean {\n    beanName = 'autoWidthCalculator' as const;\n\n    private rowRenderer: RowRenderer;\n    private ctrlsService: CtrlsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.rowRenderer = beans.rowRenderer;\n        this.ctrlsService = beans.ctrlsService;\n    }\n\n    private centerRowContainerCtrl: RowContainerCtrl;\n\n    public postConstruct(): void {\n        this.ctrlsService.whenReady((p) => {\n            this.centerRowContainerCtrl = p.center;\n        });\n    }\n\n    // this is the trick: we create a dummy container and clone all the cells\n    // into the dummy, then check the dummy's width. then destroy the dummy\n    // as we don't need it any more.\n    // drawback: only the cells visible on the screen are considered\n    public getPreferredWidthForColumn(column: AgColumn, skipHeader?: boolean): number {\n        const eHeaderCell = this.getHeaderCellForColumn(column);\n        // cell isn't visible\n        if (!eHeaderCell) {\n            return -1;\n        }\n\n        const elements = this.rowRenderer.getAllCellsForColumn(column);\n\n        if (!skipHeader) {\n            // we only consider the lowest level cell, not the group cell. in 99% of the time, this\n            // will be enough. if we consider groups, then it gets too complicated for what it's worth,\n            // as the groups can span columns and this class only considers one column at a time.\n            elements.push(eHeaderCell);\n        }\n\n        return this.addElementsToContainerAndGetWidth(elements);\n    }\n\n    public getPreferredWidthForColumnGroup(columnGroup: AgColumnGroup): number {\n        const eHeaderCell = this.getHeaderCellForColumn(columnGroup);\n\n        if (!eHeaderCell) {\n            return -1;\n        }\n\n        return this.addElementsToContainerAndGetWidth([eHeaderCell]);\n    }\n\n    private addElementsToContainerAndGetWidth(elements: HTMLElement[]): number {\n        // this element has to be a form, otherwise form elements within a cell\n        // will be validated while being cloned. This can cause issues such as\n        // radio buttons being reset and losing their values.\n        const eDummyContainer = document.createElement('form');\n        // position fixed, so it isn't restricted to the boundaries of the parent\n        eDummyContainer.style.position = 'fixed';\n\n        // we put the dummy into the body container, so it will inherit all the\n        // css styles that the real cells are inheriting\n        const eBodyContainer = this.centerRowContainerCtrl.getContainerElement();\n\n        elements.forEach((el) => this.cloneItemIntoDummy(el, eDummyContainer));\n\n        // only append the dummyContainer to the DOM after it contains all the necessary items\n        eBodyContainer.appendChild(eDummyContainer);\n\n        // at this point, all the clones are lined up vertically with natural widths. the dummy\n        // container will have a width wide enough just to fit the largest.\n        const dummyContainerWidth = eDummyContainer.offsetWidth;\n\n        // we are finished with the dummy container, so get rid of it\n        eBodyContainer.removeChild(eDummyContainer);\n\n        // we add padding as I found sometimes the gui still put '...' after some of the texts. so the\n        // user can configure the grid to add a few more pixels after the calculated width\n        const autoSizePadding = this.getAutoSizePadding();\n\n        return dummyContainerWidth + autoSizePadding;\n    }\n\n    private getAutoSizePadding(): number {\n        return this.gos.get('autoSizePadding');\n    }\n\n    /* tslint:disable */\n    private getHeaderCellForColumn(column: AgColumnGroup): HTMLElement | null;\n    private getHeaderCellForColumn(column: AgColumn): HTMLElement | null;\n    private getHeaderCellForColumn(column: any): any {\n        /* tslint:enable */\n        let element: HTMLElement | null = null;\n\n        this.ctrlsService.getHeaderRowContainerCtrls().forEach((container) => {\n            const res = container.getHtmlElementForColumnHeader(column);\n            if (res != null) {\n                element = res;\n            }\n        });\n\n        return element;\n    }\n\n    private cloneItemIntoDummy(eCell: HTMLElement, eDummyContainer: HTMLElement): void {\n        // make a deep clone of the cell\n        const eCellClone: HTMLElement = eCell.cloneNode(true) as HTMLElement;\n        // the original has a fixed width, we remove this to allow the natural width based on content\n        eCellClone.style.width = '';\n        // the original has position = absolute, we need to remove this so it's positioned normally\n        eCellClone.style.position = 'static';\n        eCellClone.style.left = '';\n        // we put the cell into a containing div, as otherwise the cells would just line up\n        // on the same line, standard flow layout, by putting them into divs, they are laid\n        // out one per line\n        const eCloneParent = document.createElement('div');\n        const eCloneParentClassList = eCloneParent.classList;\n        const isHeader = ['ag-header-cell', 'ag-header-group-cell'].some((cls) => eCellClone.classList.contains(cls));\n\n        if (isHeader) {\n            eCloneParentClassList.add('ag-header', 'ag-header-row');\n            eCloneParent.style.position = 'static';\n        } else {\n            eCloneParentClassList.add('ag-row');\n        }\n\n        // find parent using classes (headers have ag-header-cell, rows have ag-row), and copy classes from it.\n        // if we didn't do this, things like ag-row-level-2 would be missing if present, which sets indents\n        // onto group items.\n        let pointer = eCell.parentElement;\n        while (pointer) {\n            const isRow = ['ag-header-row', 'ag-row'].some((cls) => pointer!.classList.contains(cls));\n            if (isRow) {\n                for (let i = 0; i < pointer.classList.length; i++) {\n                    const item = pointer.classList[i];\n\n                    // we skip ag-row-position-absolute, as this has structural CSS applied that stops the\n                    // element from fitting into it's parent, and we need the element to stretch the parent\n                    // as we are measuring the parents width\n                    if (item != 'ag-row-position-absolute') {\n                        eCloneParentClassList.add(item);\n                    }\n                }\n                break;\n            }\n            pointer = pointer.parentElement;\n        }\n\n        // the twig on the branch, the branch on the tree, the tree in the hole,\n        // the hole in the bog, the bog in the clone, the clone in the parent,\n        // the parent in the dummy, and the dummy down in the vall-e-ooo, OOOOOOOOO! Oh row the rattling bog....\n        eCloneParent.appendChild(eCellClone);\n        eDummyContainer.appendChild(eCloneParent);\n    }\n}\n", "import { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { CtrlsService } from '../../ctrlsService';\nimport type { RowNode } from '../../entities/rowNode';\nimport type { StickyTopOffsetChangedEvent } from '../../events';\nimport type { GridBodyCtrl } from '../../gridBodyComp/gridBodyCtrl';\nimport type { WithoutGridCommon } from '../../interfaces/iCommon';\nimport type { IRowModel } from '../../interfaces/iRowModel';\nimport type { PageBoundsService } from '../../pagination/pageBoundsService';\nimport { _last } from '../../utils/array';\nimport type { RowCtrl } from '../row/rowCtrl';\nimport type { RowCtrlByRowNodeIdMap, RowRenderer } from '../rowRenderer';\n\nexport class StickyRowFeature extends BeanStub {\n    private rowModel: IRowModel;\n    private rowRenderer: RowRenderer;\n    private ctrlsService: CtrlsService;\n    private pageBoundsService: PageBoundsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.rowModel = beans.rowModel;\n        this.rowRenderer = beans.rowRenderer;\n        this.ctrlsService = beans.ctrlsService;\n        this.pageBoundsService = beans.pageBoundsService;\n    }\n\n    private stickyTopRowCtrls: RowCtrl[] = [];\n    private stickyBottomRowCtrls: RowCtrl[] = [];\n    private gridBodyCtrl: GridBodyCtrl;\n    private topContainerHeight = 0;\n    private bottomContainerHeight = 0;\n    private isClientSide: boolean;\n\n    // sticky rows pulls in extra rows from other pages which impacts row position\n    private extraTopHeight = 0;\n    private extraBottomHeight = 0;\n\n    constructor(\n        private readonly createRowCon: (rowNode: RowNode, animate: boolean, afterScroll: boolean) => RowCtrl,\n        private readonly destroyRowCtrls: (\n            rowCtrlsMap: RowCtrlByRowNodeIdMap | null | undefined,\n            animate: boolean\n        ) => void\n    ) {\n        super();\n    }\n\n    public postConstruct(): void {\n        this.isClientSide = this.rowModel.getType() === 'clientSide';\n\n        this.ctrlsService.whenReady((params) => {\n            this.gridBodyCtrl = params.gridBodyCtrl;\n        });\n    }\n\n    public getStickyTopRowCtrls(): RowCtrl[] {\n        return this.stickyTopRowCtrls;\n    }\n\n    public getStickyBottomRowCtrls(): RowCtrl[] {\n        return this.stickyBottomRowCtrls;\n    }\n\n    private setOffsetTop(offset: number): void {\n        if (this.extraTopHeight === offset) {\n            return;\n        }\n        this.extraTopHeight = offset;\n        const event: WithoutGridCommon<StickyTopOffsetChangedEvent> = {\n            type: 'stickyTopOffsetChanged',\n            offset,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private setOffsetBottom(offset: number): void {\n        if (this.extraBottomHeight === offset) {\n            return;\n        }\n        this.extraBottomHeight = offset;\n    }\n\n    public resetOffsets() {\n        this.setOffsetBottom(0);\n        this.setOffsetTop(0);\n    }\n\n    public getExtraTopHeight(): number {\n        return this.extraTopHeight;\n    }\n\n    public getExtraBottomHeight(): number {\n        return this.extraBottomHeight;\n    }\n\n    /**\n     * Get the last pixel of the group, this pixel is used to push the sticky node up out of the viewport.\n     */\n    private getLastPixelOfGroup(row: RowNode): number {\n        return this.isClientSide ? this.getClientSideLastPixelOfGroup(row) : this.getServerSideLastPixelOfGroup(row);\n    }\n\n    /**\n     * Get the first pixel of the group, this pixel is used to push the sticky node down out of the viewport\n     */\n    private getFirstPixelOfGroup(row: RowNode): number {\n        if (row.footer) {\n            return row.sibling!.rowTop! + row.sibling!.rowHeight! - 1;\n        }\n\n        if (row.hasChildren()) {\n            return row.rowTop! - 1;\n        }\n\n        // only footer nodes stick bottom, so shouldn't reach this.\n        return 0;\n    }\n\n    private getServerSideLastPixelOfGroup(row: RowNode): number {\n        if (this.isClientSide) {\n            throw new Error('This func should only be called in server side row model.');\n        }\n\n        if (row.isExpandable() || row.footer) {\n            if (row.master) {\n                return row.detailNode.rowTop! + row.detailNode.rowHeight!;\n            }\n\n            const noOrContiguousSiblings = !row.sibling || Math.abs(row.sibling.rowIndex! - row.rowIndex!) === 1;\n            if (noOrContiguousSiblings) {\n                let storeBounds = row.childStore?.getStoreBounds();\n                if (row.footer) {\n                    storeBounds = row.sibling.childStore?.getStoreBounds();\n                }\n                return (storeBounds?.heightPx ?? 0) + (storeBounds?.topPx ?? 0);\n            }\n\n            if (row.footer) {\n                return row.rowTop! + row.rowHeight!;\n            }\n\n            return row.sibling!.rowTop! + row.sibling!.rowHeight!;\n        }\n        // if not a group, then this row shouldn't be sticky currently.\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    private getClientSideLastPixelOfGroup(row: RowNode): number {\n        if (!this.isClientSide) {\n            throw new Error('This func should only be called in client side row model.');\n        }\n\n        if (row.isExpandable() || row.footer) {\n            // grand total row at top, nothing can push it out of sticky.\n            const grandTotalAtTop = row.footer && row.rowIndex === 0;\n            if (grandTotalAtTop) {\n                return Number.MAX_SAFE_INTEGER;\n            }\n\n            // if no siblings, we search the children for the last displayed row, to get last px.\n            // equally, if sibling but sibling is contiguous ('top') then sibling cannot be used\n            // to find last px\n            const noOrContiguousSiblings = !row.sibling || Math.abs(row.sibling.rowIndex! - row.rowIndex!) === 1;\n            if (noOrContiguousSiblings) {\n                let lastAncestor = row.footer ? row.sibling : row;\n                while (lastAncestor.isExpandable() && lastAncestor.expanded) {\n                    if (lastAncestor.master) {\n                        lastAncestor = lastAncestor.detailNode;\n                    } else if (lastAncestor.childrenAfterSort) {\n                        // Tree Data will have `childrenAfterSort` without any nodes, but\n                        // the current node will still be marked as expansible.\n                        if (lastAncestor.childrenAfterSort.length === 0) {\n                            break;\n                        }\n                        lastAncestor = _last(lastAncestor.childrenAfterSort);\n                    }\n                }\n                return lastAncestor.rowTop! + lastAncestor.rowHeight!;\n            }\n\n            // if siblings not contiguous, footer is last row and easiest way for last px\n            if (row.footer) {\n                return row.rowTop! + row.rowHeight!;\n            }\n            return row.sibling!.rowTop! + row.sibling!.rowHeight!;\n        }\n        // if not expandable, then this row shouldn't be sticky currently.\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    private updateStickyRows(container: 'top' | 'bottom'): boolean {\n        const isTop = container === 'top';\n        let newStickyContainerHeight = 0;\n\n        if (!this.canRowsBeSticky()) {\n            return this.refreshNodesAndContainerHeight(container, new Set(), newStickyContainerHeight);\n        }\n\n        const pixelAtContainerBoundary = isTop\n            ? this.rowRenderer.getFirstVisibleVerticalPixel() - this.extraTopHeight\n            : this.rowRenderer.getLastVisibleVerticalPixel() - this.extraTopHeight;\n        const newStickyRows = new Set<RowNode>();\n\n        const addStickyRow = (stickyRow: RowNode) => {\n            newStickyRows.add(stickyRow);\n\n            if (isTop) {\n                // get the pixel which stops this node being sticky.\n                const lastChildBottom = this.getLastPixelOfGroup(stickyRow);\n                const stickRowBottom = pixelAtContainerBoundary + newStickyContainerHeight + stickyRow.rowHeight!;\n                if (lastChildBottom < stickRowBottom) {\n                    stickyRow.stickyRowTop = newStickyContainerHeight + (lastChildBottom - stickRowBottom);\n                } else {\n                    stickyRow.stickyRowTop = newStickyContainerHeight;\n                }\n            } else {\n                // get the pixel which stops this node being sticky.\n                const lastChildBottom = this.getFirstPixelOfGroup(stickyRow);\n                const stickRowTop = pixelAtContainerBoundary - (newStickyContainerHeight + stickyRow.rowHeight!);\n                if (lastChildBottom > stickRowTop) {\n                    stickyRow.stickyRowTop = newStickyContainerHeight - (lastChildBottom - stickRowTop);\n                } else {\n                    stickyRow.stickyRowTop = newStickyContainerHeight;\n                }\n            }\n\n            // have to recalculate height after each row has been added, to allow\n            // calculating the next sticky row\n            newStickyContainerHeight = 0;\n            newStickyRows.forEach((rowNode) => {\n                const thisRowLastPx = rowNode.stickyRowTop + rowNode.rowHeight!;\n                if (newStickyContainerHeight < thisRowLastPx) {\n                    newStickyContainerHeight = thisRowLastPx;\n                }\n            });\n        };\n\n        const suppressFootersSticky = this.areFooterRowsStickySuppressed();\n        const suppressGroupsSticky = this.gos.get('suppressGroupRowsSticky');\n        const isRowSticky = (row: RowNode) => {\n            if (!row.displayed) {\n                return false;\n            }\n\n            if (row.footer) {\n                if (suppressFootersSticky === true) {\n                    return false;\n                }\n                if (suppressFootersSticky === 'grand' && row.level === -1) {\n                    return false;\n                }\n                if (suppressFootersSticky === 'group' && row.level > -1) {\n                    return false;\n                }\n\n                const alreadySticking = newStickyRows.has(row);\n                return !alreadySticking;\n            }\n\n            if (row.isExpandable()) {\n                if (suppressGroupsSticky === true) {\n                    return false;\n                }\n                const alreadySticking = newStickyRows.has(row);\n                return !alreadySticking && row.expanded;\n            }\n\n            return false;\n        };\n\n        // arbitrary counter to prevent infinite loop break out of the loop when the row calculation\n        // changes while rows are becoming sticky (happens with auto height)\n        for (let i = 0; i < 100; i++) {\n            let firstPixelAfterStickyRows = pixelAtContainerBoundary + newStickyContainerHeight;\n            if (!isTop) {\n                firstPixelAfterStickyRows = pixelAtContainerBoundary - newStickyContainerHeight;\n            }\n            const firstIndex = this.rowModel.getRowIndexAtPixel(firstPixelAfterStickyRows);\n            const firstRow = this.rowModel.getRow(firstIndex);\n\n            if (firstRow == null) {\n                break;\n            }\n\n            const ancestors: RowNode[] = this.getStickyAncestors(firstRow);\n            const firstMissingParent = ancestors.find(\n                (parent) =>\n                    (isTop ? parent.rowIndex! < firstIndex : parent.rowIndex! > firstIndex) && isRowSticky(parent)\n            );\n            if (firstMissingParent) {\n                addStickyRow(firstMissingParent);\n                continue;\n            }\n\n            const isFirstRowOutsideViewport = isTop\n                ? firstRow.rowTop! < firstPixelAfterStickyRows\n                : firstRow.rowTop! + firstRow.rowHeight! > firstPixelAfterStickyRows;\n            // if first row is an open group, and partially shown, it needs\n            // to be stuck\n            if (isFirstRowOutsideViewport && isRowSticky(firstRow)) {\n                addStickyRow(firstRow);\n                continue;\n            }\n\n            break;\n        }\n\n        if (!isTop) {\n            // Because sticky bottom rows are calculated inverted, we need to invert the top position\n            newStickyRows.forEach((rowNode) => {\n                rowNode.stickyRowTop = newStickyContainerHeight - (rowNode.stickyRowTop + rowNode.rowHeight!);\n            });\n        }\n\n        return this.refreshNodesAndContainerHeight(container, newStickyRows, newStickyContainerHeight);\n    }\n\n    private areFooterRowsStickySuppressed(): boolean | 'grand' | 'group' {\n        const suppressFootersSticky = this.gos.get('suppressStickyTotalRow');\n        if (suppressFootersSticky === true) {\n            return true;\n        }\n\n        const suppressGroupRows = !!this.gos.get('groupIncludeFooter') || suppressFootersSticky === 'group';\n        const suppressGrandRows = !!this.gos.get('groupIncludeTotalFooter') || suppressFootersSticky === 'grand';\n        if (suppressGroupRows && suppressGrandRows) {\n            return true;\n        }\n\n        if (suppressGrandRows) {\n            return 'grand';\n        }\n\n        if (suppressGroupRows) {\n            return 'group';\n        }\n\n        return false;\n    }\n\n    private canRowsBeSticky(): boolean {\n        const isStickyEnabled = this.gos.isGroupRowsSticky();\n        const suppressFootersSticky = this.areFooterRowsStickySuppressed();\n        const suppressGroupsSticky = this.gos.get('suppressGroupRowsSticky');\n        return isStickyEnabled && (!suppressFootersSticky || !suppressGroupsSticky);\n    }\n\n    private getStickyAncestors(rowNode: RowNode): RowNode[] {\n        const ancestors: RowNode[] = [];\n        let p = rowNode.footer ? rowNode.sibling : rowNode.parent;\n        while (p) {\n            if (p.sibling) {\n                ancestors.push(p.sibling);\n            }\n            ancestors.push(p);\n            p = p.parent!;\n        }\n        return ancestors.reverse();\n    }\n\n    public checkStickyRows(): boolean {\n        const hasTopUpdated = this.updateStickyRows('top');\n        const hasBottomUpdated = this.updateStickyRows('bottom');\n        return hasTopUpdated || hasBottomUpdated;\n    }\n\n    public destroyStickyCtrls(): void {\n        this.refreshNodesAndContainerHeight('top', new Set(), 0);\n        this.refreshNodesAndContainerHeight('bottom', new Set(), 0);\n    }\n\n    public refreshStickyNode(stickRowNode: RowNode): void {\n        const allStickyNodes = new Set<RowNode>();\n        if (this.stickyTopRowCtrls.some((ctrl) => ctrl.getRowNode() === stickRowNode)) {\n            for (let i = 0; i < this.stickyTopRowCtrls.length; i++) {\n                const currentNode = this.stickyTopRowCtrls[i].getRowNode();\n                if (currentNode !== stickRowNode) {\n                    allStickyNodes.add(currentNode);\n                }\n            }\n\n            if (this.refreshNodesAndContainerHeight('top', allStickyNodes, this.topContainerHeight)) {\n                this.checkStickyRows();\n            }\n            return;\n        }\n\n        for (let i = 0; i < this.stickyBottomRowCtrls.length; i++) {\n            const currentNode = this.stickyBottomRowCtrls[i].getRowNode();\n            if (currentNode !== stickRowNode) {\n                allStickyNodes.add(currentNode);\n            }\n        }\n\n        if (this.refreshNodesAndContainerHeight('bottom', allStickyNodes, this.bottomContainerHeight)) {\n            this.checkStickyRows();\n        }\n    }\n\n    /**\n     * Destroy old ctrls and create new ctrls where necessary.\n     */\n    private refreshNodesAndContainerHeight(\n        container: 'top' | 'bottom',\n        newStickyNodes: Set<RowNode>,\n        height: number\n    ): boolean {\n        const isTop = container === 'top';\n        const previousCtrls = isTop ? this.stickyTopRowCtrls : this.stickyBottomRowCtrls;\n\n        // find removed ctrls and remaining ctrls\n        const removedCtrlsMap: RowCtrlByRowNodeIdMap = {};\n        const remainingCtrls: RowCtrl[] = [];\n        for (let i = 0; i < previousCtrls.length; i++) {\n            const node = previousCtrls[i].getRowNode();\n            const hasBeenRemoved = !newStickyNodes.has(node);\n            if (hasBeenRemoved) {\n                removedCtrlsMap[node.id!] = previousCtrls[i];\n\n                // if no longer sticky, remove sticky flag.\n                node.sticky = false;\n                continue;\n            }\n\n            remainingCtrls.push(previousCtrls[i]);\n        }\n\n        // get set of existing nodes for quick lookup\n        const existingNodes = new Set<RowNode>();\n        for (let i = 0; i < remainingCtrls.length; i++) {\n            existingNodes.add(remainingCtrls[i].getRowNode());\n        }\n\n        // find the new ctrls to add\n        const newCtrls: RowCtrl[] = [];\n        newStickyNodes.forEach((node) => {\n            if (existingNodes.has(node)) {\n                return;\n            }\n            // ensure new node is set to sticky and create the new ctrl\n            node.sticky = true;\n            newCtrls.push(this.createRowCon(node, false, false));\n        });\n\n        // check if anything has changed\n        let hasSomethingChanged = !!newCtrls.length || remainingCtrls.length !== previousCtrls.length;\n        if (isTop) {\n            if (this.topContainerHeight !== height) {\n                this.topContainerHeight = height;\n                this.gridBodyCtrl.setStickyTopHeight(height);\n                hasSomethingChanged = true;\n            }\n        } else {\n            if (this.bottomContainerHeight !== height) {\n                this.bottomContainerHeight = height;\n                this.gridBodyCtrl.setStickyBottomHeight(height);\n                hasSomethingChanged = true;\n            }\n        }\n\n        // clean up removed ctrls\n        this.destroyRowCtrls(removedCtrlsMap, false);\n\n        // set up new ctrls list\n        const newCtrlsList = [...remainingCtrls, ...newCtrls];\n        newCtrlsList.sort((a, b) => b.getRowNode().rowIndex! - a.getRowNode().rowIndex!);\n        if (!isTop) {\n            newCtrlsList.reverse();\n        }\n        newCtrlsList.forEach((ctrl) => ctrl.setRowTop(ctrl.getRowNode().stickyRowTop));\n\n        let extraHeight = 0;\n        if (isTop) {\n            newStickyNodes.forEach((node) => {\n                if (node.rowIndex! < this.pageBoundsService.getFirstRow()) {\n                    extraHeight += node.rowHeight!;\n                }\n            });\n            if (extraHeight > this.topContainerHeight) {\n                extraHeight = this.topContainerHeight;\n            }\n            this.setOffsetTop(extraHeight);\n        } else {\n            newStickyNodes.forEach((node) => {\n                if (node.rowIndex! > this.pageBoundsService.getLastRow()) {\n                    extraHeight += node.rowHeight!;\n                }\n            });\n            if (extraHeight > this.bottomContainerHeight) {\n                extraHeight = this.bottomContainerHeight;\n            }\n            this.setOffsetBottom(extraHeight);\n        }\n\n        if (!hasSomethingChanged) {\n            return false;\n        }\n\n        if (isTop) {\n            this.stickyTopRowCtrls = newCtrlsList;\n        } else {\n            this.stickyBottomRowCtrls = newCtrlsList;\n        }\n\n        return true;\n    }\n\n    public ensureRowHeightsValid(): boolean {\n        let anyChange = false;\n        const updateRowHeight = (ctrl: RowCtrl) => {\n            const rowNode = ctrl.getRowNode();\n            if (rowNode.rowHeightEstimated) {\n                const rowHeight = this.gos.getRowHeightForNode(rowNode);\n                rowNode.setRowHeight(rowHeight.height);\n                anyChange = true;\n            }\n        };\n        this.stickyTopRowCtrls.forEach(updateRowHeight);\n        this.stickyBottomRowCtrls.forEach(updateRowHeight);\n        return anyChange;\n    }\n}\n", "import type { ColumnModel } from '../columns/columnModel';\nimport type { VisibleColsService } from '../columns/visibleColsService';\nimport type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { CtrlsService } from '../ctrlsService';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { CellPosition } from '../entities/cellPositionUtils';\nimport type { RowNode } from '../entities/rowNode';\nimport type { RowPosition } from '../entities/rowPositionUtils';\nimport type { Environment } from '../environment';\nimport type {\n    BodyScrollEvent,\n    CellFocusedEvent,\n    DisplayedRowsChangedEvent,\n    FirstDataRenderedEvent,\n    ModelUpdatedEvent,\n    ViewportChangedEvent,\n} from '../events';\nimport type { FocusService } from '../focusService';\nimport type { GridBodyCtrl } from '../gridBodyComp/gridBodyCtrl';\nimport type { RenderedRowEvent } from '../interfaces/iCallbackParams';\nimport type { ICellEditor } from '../interfaces/iCellEditor';\nimport type { Column } from '../interfaces/iColumn';\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\nimport type { IEventListener } from '../interfaces/iEventEmitter';\nimport type { IRowModel } from '../interfaces/iRowModel';\nimport type { IRowNode } from '../interfaces/iRowNode';\nimport type { AnimationFrameService } from '../misc/animationFrameService';\nimport type { PageBoundsService } from '../pagination/pageBoundsService';\nimport type { PaginationService } from '../pagination/paginationService';\nimport type { PinnedRowModel } from '../pinnedRowModel/pinnedRowModel';\nimport { _removeFromArray } from '../utils/array';\nimport { _browserSupportsPreventScroll } from '../utils/browser';\nimport { _executeInAWhile } from '../utils/function';\nimport { _exists } from '../utils/generic';\nimport { _createArrayOfNumbers } from '../utils/number';\nimport { _getAllValuesInObject, _iterateObject } from '../utils/object';\nimport { CellCtrl } from './cell/cellCtrl';\nimport type { ICellRenderer } from './cellRenderers/iCellRenderer';\nimport { StickyRowFeature } from './features/stickyRowFeature';\nimport type { RowCtrlInstanceId } from './row/rowCtrl';\nimport { RowCtrl } from './row/rowCtrl';\nimport type { RowContainerHeightService } from './rowContainerHeightService';\n\ntype RowCtrlIdMap = Record<RowCtrlInstanceId, RowCtrl>;\ntype RowCtrlByRowIndex = Record<number, RowCtrl>;\nexport type RowCtrlByRowNodeIdMap = Record<string, RowCtrl>;\n\ninterface RowNodeMap {\n    [id: string]: IRowNode;\n}\n\nexport interface GetCellsParams<TData = any> {\n    /** Optional list of row nodes to restrict operation to */\n    rowNodes?: IRowNode<TData>[];\n    /** Optional list of columns to restrict operation to */\n    columns?: (string | Column)[];\n}\n\nexport interface RefreshCellsParams<TData = any> extends GetCellsParams<TData> {\n    /** Skip change detection, refresh everything. */\n    force?: boolean;\n    /** Skip cell flashing, if cell flashing is enabled. */\n    suppressFlash?: boolean;\n}\n\nexport interface FlashCellsParams<TData = any> extends GetCellsParams<TData> {\n    /** @deprecated v31.1 Use `flashDuration` instead. */\n    flashDelay?: number;\n    /** @deprecated v31.1 Use `fadeDuration` instead. */\n    fadeDelay?: number;\n\n    /** The duration in milliseconds of how long a cell should remain in its \"flashed\" state. */\n    flashDuration?: number;\n    /** The duration in milliseconds of how long the \"flashed\" state animation takes to fade away after the timer set by `flashDuration` has completed. */\n    fadeDuration?: number;\n}\n\nexport interface GetCellRendererInstancesParams<TData = any> extends GetCellsParams<TData> {}\n\nexport interface GetCellEditorInstancesParams<TData = any> extends GetCellsParams<TData> {}\n\nexport interface RedrawRowsParams<TData = any> {\n    /** Row nodes to redraw */\n    rowNodes?: IRowNode<TData>[];\n}\n\nexport class RowRenderer extends BeanStub implements NamedBean {\n    beanName = 'rowRenderer' as const;\n\n    private animationFrameService: AnimationFrameService;\n    private paginationService?: PaginationService;\n    private pageBoundsService: PageBoundsService;\n    private columnModel: ColumnModel;\n    private visibleColsService: VisibleColsService;\n    private pinnedRowModel: PinnedRowModel;\n    private rowModel: IRowModel;\n    private focusService: FocusService;\n    private beans: BeanCollection;\n    private rowContainerHeightService: RowContainerHeightService;\n    private ctrlsService: CtrlsService;\n    private environment: Environment;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.animationFrameService = beans.animationFrameService;\n        this.paginationService = beans.paginationService;\n        this.pageBoundsService = beans.pageBoundsService;\n        this.columnModel = beans.columnModel;\n        this.visibleColsService = beans.visibleColsService;\n        this.pinnedRowModel = beans.pinnedRowModel;\n        this.rowModel = beans.rowModel;\n        this.focusService = beans.focusService;\n        this.beans = beans;\n        this.rowContainerHeightService = beans.rowContainerHeightService;\n        this.ctrlsService = beans.ctrlsService;\n        this.environment = beans.environment;\n    }\n\n    private gridBodyCtrl: GridBodyCtrl;\n\n    private destroyFuncsForColumnListeners: (() => void)[] = [];\n\n    private firstRenderedRow: number;\n    private lastRenderedRow: number;\n\n    // map of row ids to row objects. keeps track of which elements\n    // are rendered for which rows in the dom.\n    private rowCtrlsByRowIndex: RowCtrlByRowIndex = {};\n    private zombieRowCtrls: RowCtrlIdMap = {};\n    private cachedRowCtrls: RowCtrlCache;\n    private allRowCtrls: RowCtrl[] = [];\n\n    private topRowCtrls: RowCtrl[] = [];\n    private bottomRowCtrls: RowCtrl[] = [];\n\n    private pinningLeft: boolean;\n    private pinningRight: boolean;\n\n    private firstVisibleVPixel: number;\n    private lastVisibleVPixel: number;\n\n    // we only allow one refresh at a time, otherwise the internal memory structure here\n    // will get messed up. this can happen if the user has a cellRenderer, and inside the\n    // renderer they call an API method that results in another pass of the refresh,\n    // then it will be trying to draw rows in the middle of a refresh.\n    private refreshInProgress = false;\n\n    private printLayout: boolean;\n    private embedFullWidthRows: boolean;\n    private stickyRowFeature: StickyRowFeature;\n\n    private dataFirstRenderedFired = false;\n\n    public postConstruct(): void {\n        this.ctrlsService.whenReady((p) => {\n            this.gridBodyCtrl = p.gridBodyCtrl;\n            this.initialise();\n        });\n    }\n\n    private initialise(): void {\n        this.addManagedEventListeners({\n            paginationChanged: this.onPageLoaded.bind(this),\n            pinnedRowDataChanged: this.onPinnedRowDataChanged.bind(this),\n            displayedColumnsChanged: this.onDisplayedColumnsChanged.bind(this),\n            bodyScroll: this.onBodyScroll.bind(this),\n            bodyHeightChanged: this.redraw.bind(this),\n        });\n\n        this.addManagedPropertyListeners(['domLayout', 'embedFullWidthRows'], () => this.onDomLayoutChanged());\n        this.addManagedPropertyListeners(['suppressMaxRenderedRowRestriction', 'rowBuffer'], () => this.redraw());\n        this.addManagedPropertyListeners(\n            [\n                'suppressCellFocus',\n                'getBusinessKeyForNode',\n                'fullWidthCellRenderer',\n                'fullWidthCellRendererParams',\n                'rowStyle',\n                'getRowStyle',\n                'rowClass',\n                'getRowClass',\n                'rowClassRules',\n\n                'suppressStickyTotalRow',\n\n                'groupRowRenderer',\n                'groupRowRendererParams', // maybe only needs to refresh FW rows...\n                'loadingCellRenderer',\n                'loadingCellRendererParams',\n                'detailCellRenderer',\n                'detailCellRendererParams',\n                'enableRangeSelection',\n                'enableCellTextSelection',\n            ],\n            () => this.redrawRows()\n        );\n\n        if (this.gos.isGroupRowsSticky()) {\n            const rowModelType = this.rowModel.getType();\n            if (rowModelType === 'clientSide' || rowModelType === 'serverSide') {\n                this.stickyRowFeature = this.createManagedBean(\n                    new StickyRowFeature(this.createRowCon.bind(this), this.destroyRowCtrls.bind(this))\n                );\n            }\n        }\n\n        this.registerCellEventListeners();\n\n        this.initialiseCache();\n        this.printLayout = this.gos.isDomLayout('print');\n        this.embedFullWidthRows = this.printLayout || this.gos.get('embedFullWidthRows');\n\n        this.redrawAfterModelUpdate();\n    }\n\n    private initialiseCache(): void {\n        if (this.gos.get('keepDetailRows')) {\n            const countProp = this.getKeepDetailRowsCount();\n            const count = countProp != null ? countProp : 3;\n            this.cachedRowCtrls = new RowCtrlCache(count);\n        }\n    }\n\n    private getKeepDetailRowsCount(): number {\n        return this.gos.get('keepDetailRowsCount');\n    }\n\n    public getStickyTopRowCtrls(): RowCtrl[] {\n        if (!this.stickyRowFeature) {\n            return [];\n        }\n\n        return this.stickyRowFeature.getStickyTopRowCtrls();\n    }\n\n    public getStickyBottomRowCtrls(): RowCtrl[] {\n        if (!this.stickyRowFeature) {\n            return [];\n        }\n\n        return this.stickyRowFeature.getStickyBottomRowCtrls();\n    }\n\n    private updateAllRowCtrls(): void {\n        const liveList = _getAllValuesInObject(this.rowCtrlsByRowIndex);\n        const zombieList = _getAllValuesInObject(this.zombieRowCtrls);\n        const cachedList = this.cachedRowCtrls ? this.cachedRowCtrls.getEntries() : [];\n\n        if (zombieList.length > 0 || cachedList.length > 0) {\n            // Only spread if we need to.\n            this.allRowCtrls = [...liveList, ...zombieList, ...cachedList];\n        } else {\n            this.allRowCtrls = liveList;\n        }\n    }\n\n    private onCellFocusChanged(event?: CellFocusedEvent) {\n        this.getAllCellCtrls().forEach((cellCtrl) => cellCtrl.onCellFocused(event));\n        this.getFullWidthRowCtrls().forEach((rowCtrl) => rowCtrl.onFullWidthRowFocused(event));\n    }\n\n    // in a clean design, each cell would register for each of these events. however when scrolling, all the cells\n    // registering and de-registering for events is a performance bottleneck. so we register here once and inform\n    // all active cells.\n    private registerCellEventListeners(): void {\n        this.addManagedEventListeners({\n            cellFocused: (event) => {\n                this.onCellFocusChanged(event);\n            },\n            cellFocusCleared: () => this.onCellFocusChanged(),\n            flashCells: (event) => {\n                this.getAllCellCtrls().forEach((cellCtrl) => cellCtrl.onFlashCells(event));\n            },\n            columnHoverChanged: () => {\n                this.getAllCellCtrls().forEach((cellCtrl) => cellCtrl.onColumnHover());\n            },\n            displayedColumnsChanged: () => {\n                this.getAllCellCtrls().forEach((cellCtrl) => cellCtrl.onDisplayedColumnsChanged());\n            },\n            displayedColumnsWidthChanged: () => {\n                // only for printLayout - because we are rendering all the cells in the same row, regardless of pinned state,\n                // then changing the width of the containers will impact left position. eg the center cols all have their\n                // left position adjusted by the width of the left pinned column, so if the pinned left column width changes,\n                // all the center cols need to be shifted to accommodate this. when in normal layout, the pinned cols are\n                // in different containers so doesn't impact.\n                if (this.printLayout) {\n                    this.getAllCellCtrls().forEach((cellCtrl) => cellCtrl.onLeftChanged());\n                }\n            },\n        });\n\n        this.setupRangeSelectionListeners();\n\n        // add listeners to the grid columns\n        this.refreshListenersToColumnsForCellComps();\n        // if the grid columns change, then refresh the listeners again\n        this.addManagedEventListeners({\n            gridColumnsChanged: this.refreshListenersToColumnsForCellComps.bind(this),\n        });\n\n        this.addDestroyFunc(this.removeGridColumnListeners.bind(this));\n    }\n\n    private setupRangeSelectionListeners = () => {\n        const onRangeSelectionChanged = () => {\n            this.getAllCellCtrls().forEach((cellCtrl) => cellCtrl.onRangeSelectionChanged());\n        };\n\n        const onColumnMovedPinnedVisible = () => {\n            this.getAllCellCtrls().forEach((cellCtrl) => cellCtrl.updateRangeBordersIfRangeCount());\n        };\n\n        const addRangeSelectionListeners = () => {\n            this.eventService.addEventListener('rangeSelectionChanged', onRangeSelectionChanged);\n            this.eventService.addEventListener('columnMoved', onColumnMovedPinnedVisible);\n            this.eventService.addEventListener('columnPinned', onColumnMovedPinnedVisible);\n            this.eventService.addEventListener('columnVisible', onColumnMovedPinnedVisible);\n        };\n\n        const removeRangeSelectionListeners = () => {\n            this.eventService.removeEventListener('rangeSelectionChanged', onRangeSelectionChanged);\n            this.eventService.removeEventListener('columnMoved', onColumnMovedPinnedVisible);\n            this.eventService.removeEventListener('columnPinned', onColumnMovedPinnedVisible);\n            this.eventService.removeEventListener('columnVisible', onColumnMovedPinnedVisible);\n        };\n        this.addDestroyFunc(() => removeRangeSelectionListeners());\n        this.addManagedPropertyListener('enableRangeSelection', (params) => {\n            const isEnabled = params.currentValue;\n            if (isEnabled) {\n                addRangeSelectionListeners();\n            } else {\n                removeRangeSelectionListeners();\n            }\n        });\n        const rangeSelectionEnabled = this.gos.get('enableRangeSelection');\n        if (rangeSelectionEnabled) {\n            addRangeSelectionListeners();\n        }\n    };\n\n    // executes all functions in destroyFuncsForColumnListeners and then clears the list\n    private removeGridColumnListeners(): void {\n        this.destroyFuncsForColumnListeners.forEach((func) => func());\n        this.destroyFuncsForColumnListeners.length = 0;\n    }\n\n    // this function adds listeners onto all the grid columns, which are the column that we could have cellComps for.\n    // when the grid columns change, we add listeners again. in an ideal design, each CellComp would just register to\n    // the column it belongs to on creation, however this was a bottleneck with the number of cells, so do it here\n    // once instead.\n    private refreshListenersToColumnsForCellComps(): void {\n        this.removeGridColumnListeners();\n\n        const cols = this.columnModel.getCols();\n\n        cols.forEach((col) => {\n            const forEachCellWithThisCol = (callback: (cellCtrl: CellCtrl) => void) => {\n                this.getAllCellCtrls().forEach((cellCtrl) => {\n                    if (cellCtrl.getColumn() === col) {\n                        callback(cellCtrl);\n                    }\n                });\n            };\n\n            const leftChangedListener = () => {\n                forEachCellWithThisCol((cellCtrl) => cellCtrl.onLeftChanged());\n            };\n            const widthChangedListener = () => {\n                forEachCellWithThisCol((cellCtrl) => cellCtrl.onWidthChanged());\n            };\n            const firstRightPinnedChangedListener = () => {\n                forEachCellWithThisCol((cellCtrl) => cellCtrl.onFirstRightPinnedChanged());\n            };\n            const lastLeftPinnedChangedListener = () => {\n                forEachCellWithThisCol((cellCtrl) => cellCtrl.onLastLeftPinnedChanged());\n            };\n            const colDefChangedListener = () => {\n                forEachCellWithThisCol((cellCtrl) => cellCtrl.onColDefChanged());\n            };\n\n            col.addEventListener('leftChanged', leftChangedListener);\n            col.addEventListener('widthChanged', widthChangedListener);\n            col.addEventListener('firstRightPinnedChanged', firstRightPinnedChangedListener);\n            col.addEventListener('lastLeftPinnedChanged', lastLeftPinnedChangedListener);\n            col.addEventListener('colDefChanged', colDefChangedListener);\n\n            this.destroyFuncsForColumnListeners.push(() => {\n                col.removeEventListener('leftChanged', leftChangedListener);\n                col.removeEventListener('widthChanged', widthChangedListener);\n                col.removeEventListener('firstRightPinnedChanged', firstRightPinnedChangedListener);\n                col.removeEventListener('lastLeftPinnedChanged', lastLeftPinnedChangedListener);\n                col.removeEventListener('colDefChanged', colDefChangedListener);\n            });\n        });\n    }\n\n    private onDomLayoutChanged(): void {\n        const printLayout = this.gos.isDomLayout('print');\n        const embedFullWidthRows = printLayout || this.gos.get('embedFullWidthRows');\n\n        // if moving towards or away from print layout, means we need to destroy all rows, as rows are not laid\n        // out using absolute positioning when doing print layout\n        const destroyRows = embedFullWidthRows !== this.embedFullWidthRows || this.printLayout !== printLayout;\n\n        this.printLayout = printLayout;\n        this.embedFullWidthRows = embedFullWidthRows;\n\n        if (destroyRows) {\n            this.redrawAfterModelUpdate({ domLayoutChanged: true });\n        }\n    }\n\n    // for row models that have datasources, when we update the datasource, we need to force the rowRenderer\n    // to redraw all rows. otherwise the old rows from the old datasource will stay displayed.\n    public datasourceChanged(): void {\n        this.firstRenderedRow = 0;\n        this.lastRenderedRow = -1;\n        const rowIndexesToRemove = Object.keys(this.rowCtrlsByRowIndex);\n        this.removeRowCtrls(rowIndexesToRemove);\n    }\n\n    private onPageLoaded(event: ModelUpdatedEvent): void {\n        const params: RefreshViewParams = {\n            recycleRows: event.keepRenderedRows,\n            animate: event.animate,\n            newData: event.newData,\n            newPage: event.newPage,\n            // because this is a model updated event (not pinned rows), we\n            // can skip updating the pinned rows. this is needed so that if user\n            // is doing transaction updates, the pinned rows are not getting constantly\n            // trashed - or editing cells in pinned rows are not refreshed and put into read mode\n            onlyBody: true,\n        };\n        this.redrawAfterModelUpdate(params);\n    }\n\n    public getAllCellsForColumn(column: AgColumn): HTMLElement[] {\n        const res: HTMLElement[] = [];\n\n        this.getAllRowCtrls().forEach((rowCtrl) => {\n            const eCell = rowCtrl.getCellElement(column);\n            if (eCell) {\n                res.push(eCell);\n            }\n        });\n\n        return res;\n    }\n\n    public refreshFloatingRowComps(): void {\n        this.refreshFloatingRows(this.topRowCtrls, this.pinnedRowModel.getPinnedTopRowNodes());\n\n        this.refreshFloatingRows(this.bottomRowCtrls, this.pinnedRowModel.getPinnedBottomRowNodes());\n    }\n\n    public getTopRowCtrls(): RowCtrl[] {\n        return this.topRowCtrls;\n    }\n\n    public getCentreRowCtrls(): RowCtrl[] {\n        return this.allRowCtrls;\n    }\n\n    public getBottomRowCtrls(): RowCtrl[] {\n        return this.bottomRowCtrls;\n    }\n\n    /**\n     * Determines which row controllers need to be destroyed and re-created vs which ones can\n     * be re-used.\n     *\n     * This is operation is to pinned/floating rows as `this.recycleRows` is to normal/body rows.\n     *\n     * All `RowCtrl` instances in `rowCtrls` that don't correspond to `RowNode` instances in `rowNodes` are destroyed.\n     * All `RowNode` instances in `rowNodes` that don't correspond to `RowCtrl` instances in `rowCtrls` are created.\n     * All instances in `rowCtrls` must be in the same order as their corresponding nodes in `rowNodes`.\n     *\n     * @param rowCtrls The list of existing row controllers\n     * @param rowNodes The canonical list of row nodes that should have associated controllers\n     */\n    private refreshFloatingRows(rowCtrls: RowCtrl[], rowNodes: RowNode[]): void {\n        const nodeMap = Object.fromEntries(rowNodes.map((node) => [node.id!, node]));\n        const rowCtrlMap = Object.fromEntries(rowCtrls.map((ctrl) => [ctrl.getRowNode().id!, ctrl]));\n\n        for (let i = 0; i < rowNodes.length; i++) {\n            const node = rowNodes[i];\n            const rowCtrl = rowCtrls[i];\n\n            if (rowCtrl && nodeMap[rowCtrl.getRowNode().id!] === undefined) {\n                // ctrl not in new nodes list, destroy\n                rowCtrl.destroyFirstPass();\n                rowCtrl.destroySecondPass();\n            }\n\n            if (node.id! in rowCtrlMap) {\n                // ctrl exists already, re-use it\n                rowCtrls[i] = rowCtrlMap[node.id!];\n                delete rowCtrlMap[node.id!];\n            } else {\n                // ctrl doesn't exist, create it\n                rowCtrls[i] = new RowCtrl(node, this.beans, false, false, this.printLayout);\n            }\n        }\n\n        // Truncate array if rowCtrls is longer than rowNodes\n        rowCtrls.length = rowNodes.length;\n    }\n\n    private onPinnedRowDataChanged(): void {\n        // recycling rows in order to ensure cell editing is not cancelled\n        const params: RefreshViewParams = {\n            recycleRows: true,\n        };\n\n        this.redrawAfterModelUpdate(params);\n    }\n\n    public redrawRow(rowNode: RowNode, suppressEvent = false) {\n        if (rowNode.sticky) {\n            this.stickyRowFeature.refreshStickyNode(rowNode);\n        } else if (this.cachedRowCtrls?.has(rowNode)) {\n            // delete row from cache if it needs redrawn\n            // if it's in the cache no updates need fired, as nothing\n            // has been rendered\n            this.cachedRowCtrls.removeRow(rowNode);\n            return;\n        } else {\n            const destroyAndRecreateCtrl = (dataStruct: RowCtrl[] | RowCtrlByRowIndex) => {\n                const ctrl = dataStruct[rowNode.rowIndex!];\n                if (!ctrl) {\n                    return;\n                }\n                if (ctrl.getRowNode() !== rowNode) {\n                    // if the node is in the wrong place, then the row model is responsible for triggering a full refresh.\n                    return;\n                }\n                ctrl.destroyFirstPass();\n                ctrl.destroySecondPass();\n                dataStruct[rowNode.rowIndex!] = this.createRowCon(rowNode, false, false);\n            };\n\n            switch (rowNode.rowPinned) {\n                case 'top':\n                    destroyAndRecreateCtrl(this.topRowCtrls);\n                    break;\n                case 'bottom':\n                    destroyAndRecreateCtrl(this.bottomRowCtrls);\n                    break;\n                default:\n                    destroyAndRecreateCtrl(this.rowCtrlsByRowIndex);\n                    this.updateAllRowCtrls();\n            }\n        }\n\n        if (!suppressEvent) {\n            this.dispatchDisplayedRowsChanged(false);\n        }\n    }\n\n    public redrawRows(rowNodes?: IRowNode[]): void {\n        // if no row nodes provided, then refresh everything\n        const partialRefresh = rowNodes != null;\n\n        if (partialRefresh) {\n            rowNodes?.forEach((node) => this.redrawRow(node as RowNode, true));\n            this.dispatchDisplayedRowsChanged(false);\n            return;\n        }\n\n        this.redrawAfterModelUpdate();\n    }\n\n    private getCellToRestoreFocusToAfterRefresh(params?: RefreshViewParams): CellPosition | null {\n        const focusedCell = params?.suppressKeepFocus ? null : this.focusService.getFocusCellToUseAfterRefresh();\n\n        if (focusedCell == null) {\n            return null;\n        }\n\n        // if the dom is not actually focused on a cell, then we don't try to refocus. the problem this\n        // solves is with editing - if the user is editing, eg focus is on a text field, and not on the\n        // cell itself, then the cell can be registered as having focus, however it's the text field that\n        // has the focus and not the cell div. therefore, when the refresh is finished, the grid will focus\n        // the cell, and not the textfield. that means if the user is in a text field, and the grid refreshes,\n        // the focus is lost from the text field. we do not want this.\n        const activeElement = this.gos.getActiveDomElement();\n        const cellDomData = this.gos.getDomData(activeElement, CellCtrl.DOM_DATA_KEY_CELL_CTRL);\n        const rowDomData = this.gos.getDomData(activeElement, RowCtrl.DOM_DATA_KEY_ROW_CTRL);\n\n        const gridElementFocused = cellDomData || rowDomData;\n\n        return gridElementFocused ? focusedCell : null;\n    }\n\n    // gets called from:\n    // +) initialisation (in registerGridComp) params = null\n    // +) onDomLayoutChanged, params = null\n    // +) onPageLoaded, recycleRows, animate, newData, newPage from event, onlyBody=true\n    // +) onPinnedRowDataChanged, recycleRows = true\n    // +) redrawRows (from Grid API), recycleRows = true/false\n    private redrawAfterModelUpdate(params: RefreshViewParams = {}): void {\n        this.getLockOnRefresh();\n\n        const focusedCell = this.getCellToRestoreFocusToAfterRefresh(params);\n\n        this.updateContainerHeights();\n        this.scrollToTopIfNewData(params);\n\n        // never recycle rows on layout change as rows could change from normal DOM layout\n        // back to the grid's row positioning.\n        const recycleRows = !params.domLayoutChanged && !!params.recycleRows;\n        const animate = params.animate && this.gos.isAnimateRows();\n\n        // after modelUpdate, row indexes can change, so we clear out the rowsByIndex map,\n        // however we can reuse the rows, so we keep them but index by rowNode.id\n        const rowsToRecycle = recycleRows ? this.getRowsToRecycle() : null;\n        if (!recycleRows) {\n            this.removeAllRowComps();\n        }\n\n        this.workOutFirstAndLastRowsToRender();\n\n        if (this.stickyRowFeature) {\n            this.stickyRowFeature.checkStickyRows();\n\n            // this is a hack, if sticky rows brings in rows from other pages\n            // need to update the model height to include them.\n            const extraHeight =\n                this.stickyRowFeature.getExtraTopHeight() + this.stickyRowFeature.getExtraBottomHeight();\n            if (extraHeight) {\n                this.updateContainerHeights(extraHeight);\n            }\n        }\n\n        this.recycleRows(rowsToRecycle, animate);\n\n        this.gridBodyCtrl.updateRowCount();\n\n        if (!params.onlyBody) {\n            this.refreshFloatingRowComps();\n        }\n\n        this.dispatchDisplayedRowsChanged();\n\n        // if a cell was focused before, ensure focus now.\n        if (focusedCell != null) {\n            this.restoreFocusedCell(focusedCell);\n        }\n\n        this.releaseLockOnRefresh();\n    }\n\n    private scrollToTopIfNewData(params: RefreshViewParams): void {\n        const scrollToTop = params.newData || params.newPage;\n        const suppressScrollToTop = this.gos.get('suppressScrollOnNewData');\n\n        if (scrollToTop && !suppressScrollToTop) {\n            this.gridBodyCtrl.getScrollFeature().scrollToTop();\n            this.stickyRowFeature?.resetOffsets();\n        }\n    }\n\n    private updateContainerHeights(additionalHeight = 0): void {\n        // when doing print layout, we don't explicitly set height on the containers\n        if (this.printLayout) {\n            this.rowContainerHeightService.setModelHeight(null);\n            return;\n        }\n\n        let containerHeight = this.pageBoundsService.getCurrentPageHeight();\n        // we need at least 1 pixel for the horizontal scroll to work. so if there are now rows,\n        // we still want the scroll to be present, otherwise there would be no way to scroll the header\n        // which might be needed us user wants to access columns\n        // on the RHS - and if that was where the filter was that cause no rows to be presented, there\n        // is no way to remove the filter.\n        if (containerHeight === 0) {\n            containerHeight = 1;\n        }\n\n        this.rowContainerHeightService.setModelHeight(containerHeight + additionalHeight);\n    }\n\n    private getLockOnRefresh(): void {\n        if (this.refreshInProgress) {\n            const frameworkMessage = this.frameworkOverrides.getLockOnRefreshError?.() ?? '';\n            throw new Error(\n                'AG Grid: cannot get grid to draw rows when it is in the middle of drawing rows. ' +\n                    'Your code probably called a grid API method while the grid was in the render stage. To overcome ' +\n                    'this, put the API call into a timeout, e.g. instead of api.redrawRows(), ' +\n                    'call setTimeout(function() { api.redrawRows(); }, 0). To see what part of your code ' +\n                    'that caused the refresh check this stacktrace.' +\n                    frameworkMessage\n            );\n        }\n\n        this.refreshInProgress = true;\n        this.frameworkOverrides.getLockOnRefresh?.();\n    }\n\n    private releaseLockOnRefresh(): void {\n        this.refreshInProgress = false;\n        this.frameworkOverrides.releaseLockOnRefresh?.();\n    }\n\n    public isRefreshInProgress(): boolean {\n        return this.refreshInProgress;\n    }\n\n    // sets the focus to the provided cell, if the cell is provided. this way, the user can call refresh without\n    // worry about the focus been lost. this is important when the user is using keyboard navigation to do edits\n    // and the cellEditor is calling 'refresh' to get other cells to update (as other cells might depend on the\n    // edited cell).\n    private restoreFocusedCell(cellPosition: CellPosition | null): void {\n        if (cellPosition) {\n            // we don't wish to dispatch an event as the rowRenderer is not capable of changing the selected cell,\n            // so we mock a change event for the full width rows and cells to ensure they update to the newly selected\n            // state\n            this.focusService.setRestoreFocusedCell(cellPosition);\n\n            this.onCellFocusChanged(\n                this.gos.addGridCommonParams<CellFocusedEvent>({\n                    rowIndex: cellPosition.rowIndex,\n                    column: cellPosition.column,\n                    rowPinned: cellPosition.rowPinned,\n                    forceBrowserFocus: true,\n                    preventScrollOnBrowserFocus: true,\n                    type: 'cellFocused',\n                })\n            );\n        }\n    }\n\n    public stopEditing(cancel: boolean = false) {\n        this.getAllRowCtrls().forEach((rowCtrl) => {\n            rowCtrl.stopEditing(cancel);\n        });\n    }\n\n    public getAllCellCtrls(): CellCtrl[] {\n        const res: CellCtrl[] = [];\n        const rowCtrls = this.getAllRowCtrls();\n        const rowCtrlsLength = rowCtrls.length;\n\n        for (let i = 0; i < rowCtrlsLength; i++) {\n            const cellCtrls = rowCtrls[i].getAllCellCtrls();\n            const cellCtrlsLength = cellCtrls.length;\n\n            for (let j = 0; j < cellCtrlsLength; j++) {\n                res.push(cellCtrls[j]);\n            }\n        }\n\n        return res;\n    }\n\n    private getAllRowCtrls(): RowCtrl[] {\n        const stickyTopRowCtrls = (this.stickyRowFeature && this.stickyRowFeature.getStickyTopRowCtrls()) || [];\n        const stickyBottomRowCtrls = (this.stickyRowFeature && this.stickyRowFeature.getStickyBottomRowCtrls()) || [];\n        const res = [...this.topRowCtrls, ...this.bottomRowCtrls, ...stickyTopRowCtrls, ...stickyBottomRowCtrls];\n\n        for (const key in this.rowCtrlsByRowIndex) {\n            res.push(this.rowCtrlsByRowIndex[key]);\n        }\n        return res;\n    }\n\n    public addRenderedRowListener(\n        eventName: RenderedRowEvent,\n        rowIndex: number,\n        callback: IEventListener<RenderedRowEvent>\n    ): void {\n        const rowComp = this.rowCtrlsByRowIndex[rowIndex];\n        if (rowComp) {\n            rowComp.addEventListener(eventName, callback);\n        }\n    }\n\n    public flashCells(params: FlashCellsParams = {}): void {\n        this.getCellCtrls(params.rowNodes, params.columns as AgColumn[]).forEach((cellCtrl) =>\n            cellCtrl.flashCell(params)\n        );\n    }\n\n    public refreshCells(params: RefreshCellsParams = {}): void {\n        const refreshCellParams = {\n            forceRefresh: params.force,\n            newData: false,\n            suppressFlash: params.suppressFlash,\n        };\n        this.getCellCtrls(params.rowNodes, params.columns as AgColumn[]).forEach((cellCtrl) =>\n            cellCtrl.refreshOrDestroyCell(refreshCellParams)\n        );\n\n        if (params.rowNodes) {\n            // refresh the full width rows too\n            this.getRowCtrls(params.rowNodes).forEach((rowCtrl) => {\n                if (!rowCtrl.isFullWidth()) {\n                    return;\n                }\n                const refreshed = rowCtrl.refreshFullWidth();\n                if (!refreshed) {\n                    this.redrawRow(rowCtrl.getRowNode(), true);\n                }\n            });\n            this.dispatchDisplayedRowsChanged(false);\n        }\n    }\n\n    public getCellRendererInstances(params: GetCellRendererInstancesParams): ICellRenderer[] {\n        const cellRenderers = this.getCellCtrls(params.rowNodes, params.columns as AgColumn[])\n            .map((cellCtrl) => cellCtrl.getCellRenderer())\n            .filter((renderer) => renderer != null) as ICellRenderer[];\n        if (params.columns?.length) {\n            return cellRenderers;\n        }\n\n        const fullWidthRenderers: ICellRenderer[] = [];\n        const rowIdMap = this.mapRowNodes(params.rowNodes);\n\n        this.getAllRowCtrls().forEach((rowCtrl) => {\n            if (rowIdMap && !this.isRowInMap(rowCtrl.getRowNode(), rowIdMap)) {\n                return;\n            }\n\n            if (!rowCtrl.isFullWidth()) {\n                return;\n            }\n\n            const renderers = rowCtrl.getFullWidthCellRenderers();\n            for (let i = 0; i < renderers.length; i++) {\n                const renderer = renderers[i];\n                if (renderer != null) {\n                    fullWidthRenderers.push(renderer);\n                }\n            }\n        });\n\n        return [...fullWidthRenderers, ...cellRenderers];\n    }\n\n    public getCellEditorInstances(params: GetCellRendererInstancesParams): ICellEditor[] {\n        const res: ICellEditor[] = [];\n\n        this.getCellCtrls(params.rowNodes, params.columns as AgColumn[]).forEach((cellCtrl) => {\n            const cellEditor = cellCtrl.getCellEditor() as ICellEditor;\n\n            if (cellEditor) {\n                res.push(cellEditor);\n            }\n        });\n\n        return res;\n    }\n\n    public getEditingCells(): CellPosition[] {\n        const res: CellPosition[] = [];\n\n        this.getAllCellCtrls().forEach((cellCtrl) => {\n            if (cellCtrl.isEditing()) {\n                const cellPosition = cellCtrl.getCellPosition();\n                res.push(cellPosition);\n            }\n        });\n\n        return res;\n    }\n\n    private mapRowNodes(\n        rowNodes?: IRowNode[] | null\n    ): { top: RowNodeMap; bottom: RowNodeMap; normal: RowNodeMap } | undefined {\n        if (!rowNodes) {\n            return;\n        }\n\n        const res: { top: RowNodeMap; bottom: RowNodeMap; normal: RowNodeMap } = {\n            top: {},\n            bottom: {},\n            normal: {},\n        };\n\n        rowNodes.forEach((rowNode) => {\n            const id = rowNode.id!;\n            switch (rowNode.rowPinned) {\n                case 'top':\n                    res.top[id] = rowNode;\n                    break;\n                case 'bottom':\n                    res.bottom[id] = rowNode;\n                    break;\n                default:\n                    res.normal[id] = rowNode;\n                    break;\n            }\n        });\n\n        return res;\n    }\n\n    private isRowInMap(\n        rowNode: RowNode,\n        rowIdsMap: { top: RowNodeMap; bottom: RowNodeMap; normal: RowNodeMap }\n    ): boolean {\n        // skip this row if it is missing from the provided list\n        const id = rowNode.id!;\n        const floating = rowNode.rowPinned;\n\n        switch (floating) {\n            case 'top':\n                return rowIdsMap.top[id] != null;\n            case 'bottom':\n                return rowIdsMap.bottom[id] != null;\n            default:\n                return rowIdsMap.normal[id] != null;\n        }\n    }\n\n    /**\n     * @param rowNodes if provided, returns the RowCtrls for the provided rowNodes. otherwise returns all RowCtrls.\n     */\n    public getRowCtrls(rowNodes?: IRowNode[] | null): RowCtrl[] {\n        const rowIdsMap = this.mapRowNodes(rowNodes);\n        const allRowCtrls = this.getAllRowCtrls();\n        if (!rowNodes || !rowIdsMap) {\n            return allRowCtrls;\n        }\n\n        return allRowCtrls.filter((rowCtrl) => {\n            const rowNode = rowCtrl.getRowNode();\n            return this.isRowInMap(rowNode, rowIdsMap);\n        });\n    }\n\n    // returns CellCtrl's that match the provided rowNodes and columns. eg if one row node\n    // and two columns provided, that identifies 4 cells, so 4 CellCtrl's returned.\n    private getCellCtrls(rowNodes?: IRowNode[] | null, columns?: (string | AgColumn)[]): CellCtrl[] {\n        let colIdsMap: any;\n        if (_exists(columns)) {\n            colIdsMap = {};\n            columns.forEach((colKey: string | AgColumn) => {\n                const column: AgColumn | null = this.columnModel.getCol(colKey);\n                if (_exists(column)) {\n                    colIdsMap[column.getId()] = true;\n                }\n            });\n        }\n\n        const res: CellCtrl[] = [];\n        this.getRowCtrls(rowNodes).forEach((rowCtrl) => {\n            rowCtrl.getAllCellCtrls().forEach((cellCtrl) => {\n                const colId: string = cellCtrl.getColumn().getId();\n                const excludeColFromRefresh = colIdsMap && !colIdsMap[colId];\n\n                if (excludeColFromRefresh) {\n                    return;\n                }\n\n                res.push(cellCtrl);\n            });\n        });\n        return res;\n    }\n\n    public override destroy(): void {\n        this.removeAllRowComps();\n        super.destroy();\n    }\n\n    private removeAllRowComps(): void {\n        const rowIndexesToRemove = Object.keys(this.rowCtrlsByRowIndex);\n        this.removeRowCtrls(rowIndexesToRemove);\n\n        if (this.stickyRowFeature) {\n            this.stickyRowFeature.destroyStickyCtrls();\n        }\n    }\n\n    private getRowsToRecycle(): RowCtrlByRowNodeIdMap {\n        // remove all stub nodes, they can't be reused, as no rowNode id\n        const stubNodeIndexes: string[] = [];\n        _iterateObject(this.rowCtrlsByRowIndex, (index, rowCtrl) => {\n            const stubNode = rowCtrl.getRowNode().id == null;\n            if (stubNode) {\n                stubNodeIndexes.push(index);\n            }\n        });\n        this.removeRowCtrls(stubNodeIndexes);\n\n        // then clear out rowCompsByIndex, but before that take a copy, but index by id, not rowIndex\n        const ctrlsByIdMap: RowCtrlByRowNodeIdMap = {};\n        _iterateObject(this.rowCtrlsByRowIndex, (_, rowCtrl) => {\n            const rowNode = rowCtrl.getRowNode();\n            ctrlsByIdMap[rowNode.id!] = rowCtrl;\n        });\n        this.rowCtrlsByRowIndex = {};\n\n        return ctrlsByIdMap;\n    }\n\n    // takes array of row indexes\n    private removeRowCtrls(rowsToRemove: any[], suppressAnimation: boolean = false) {\n        // if no fromIndex then set to -1, which will refresh everything\n        // let realFromIndex = -1;\n\n        rowsToRemove.forEach((indexToRemove) => {\n            const rowCtrl = this.rowCtrlsByRowIndex[indexToRemove];\n            if (rowCtrl) {\n                rowCtrl.destroyFirstPass(suppressAnimation);\n                rowCtrl.destroySecondPass();\n            }\n            delete this.rowCtrlsByRowIndex[indexToRemove];\n        });\n    }\n\n    private onBodyScroll(e: BodyScrollEvent) {\n        if (e.direction !== 'vertical') {\n            return;\n        }\n        this.redraw({ afterScroll: true });\n    }\n\n    // gets called when rows don't change, but viewport does, so after:\n    // 1) height of grid body changes, ie number of displayed rows has changed\n    // 2) grid scrolled to new position\n    // 3) ensure index visible (which is a scroll)\n    public redraw(params: { afterScroll?: boolean } = {}) {\n        const { afterScroll } = params;\n        let cellFocused: CellPosition | undefined;\n\n        // only try to refocus cells shifting in and out of sticky container\n        // if the browser supports focus ({ preventScroll })\n        if (this.stickyRowFeature && _browserSupportsPreventScroll()) {\n            cellFocused = this.getCellToRestoreFocusToAfterRefresh() || undefined;\n        }\n\n        const oldFirstRow = this.firstRenderedRow;\n        const oldLastRow = this.lastRenderedRow;\n        this.workOutFirstAndLastRowsToRender();\n\n        let hasStickyRowChanges = false;\n\n        if (this.stickyRowFeature) {\n            hasStickyRowChanges = this.stickyRowFeature.checkStickyRows();\n\n            // this is a hack, if sticky rows brings in rows from other pages\n            // need to update the model height to include them.\n            const extraHeight =\n                this.stickyRowFeature.getExtraTopHeight() + this.stickyRowFeature.getExtraBottomHeight();\n            if (extraHeight) {\n                this.updateContainerHeights(extraHeight);\n            }\n        }\n\n        const rangeChanged = this.firstRenderedRow !== oldFirstRow || this.lastRenderedRow !== oldLastRow;\n\n        if (afterScroll && !hasStickyRowChanges && !rangeChanged) {\n            return;\n        }\n\n        this.getLockOnRefresh();\n        this.recycleRows(null, false, afterScroll);\n        this.releaseLockOnRefresh();\n        // AfterScroll results in flushSync in React but we need to disable flushSync for sticky row group changes to avoid flashing\n        this.dispatchDisplayedRowsChanged(afterScroll && !hasStickyRowChanges);\n\n        if (cellFocused != null) {\n            const newFocusedCell = this.getCellToRestoreFocusToAfterRefresh();\n\n            if (cellFocused != null && newFocusedCell == null) {\n                this.animationFrameService.flushAllFrames();\n                this.restoreFocusedCell(cellFocused);\n            }\n        }\n    }\n\n    private removeRowCompsNotToDraw(indexesToDraw: number[], suppressAnimation: boolean): void {\n        // for speedy lookup, dump into map\n        const indexesToDrawMap: { [index: string]: boolean } = {};\n        indexesToDraw.forEach((index) => (indexesToDrawMap[index] = true));\n\n        const existingIndexes = Object.keys(this.rowCtrlsByRowIndex);\n        const indexesNotToDraw: string[] = existingIndexes.filter((index) => !indexesToDrawMap[index]);\n\n        this.removeRowCtrls(indexesNotToDraw, suppressAnimation);\n    }\n\n    private calculateIndexesToDraw(rowsToRecycle?: { [key: string]: RowCtrl } | null): number[] {\n        // all in all indexes in the viewport\n        const indexesToDraw = _createArrayOfNumbers(this.firstRenderedRow, this.lastRenderedRow);\n\n        const checkRowToDraw = (indexStr: string, rowComp: RowCtrl) => {\n            const index = rowComp.getRowNode().rowIndex;\n            if (index == null) {\n                return;\n            }\n            if (index < this.firstRenderedRow || index > this.lastRenderedRow) {\n                if (this.doNotUnVirtualiseRow(rowComp)) {\n                    indexesToDraw.push(index);\n                }\n            }\n        };\n\n        // if we are redrawing due to scrolling change, then old rows are in this.rowCompsByIndex\n        _iterateObject(this.rowCtrlsByRowIndex, checkRowToDraw);\n\n        // if we are redrawing due to model update, then old rows are in rowsToRecycle\n        _iterateObject(rowsToRecycle, checkRowToDraw);\n\n        indexesToDraw.sort((a: number, b: number) => a - b);\n\n        const ret: number[] = [];\n\n        for (let i = 0; i < indexesToDraw.length; i++) {\n            const currRow = indexesToDraw[i];\n            const rowNode = this.rowModel.getRow(currRow);\n            if (rowNode && !rowNode.sticky) {\n                ret.push(currRow);\n            }\n        }\n\n        return ret;\n    }\n\n    private recycleRows(rowsToRecycle?: { [key: string]: RowCtrl } | null, animate = false, afterScroll = false) {\n        // the row can already exist and be in the following:\n        // rowsToRecycle -> if model change, then the index may be different, however row may\n        //                         exist here from previous time (mapped by id).\n        // this.rowCompsByIndex -> if just a scroll, then this will contain what is currently in the viewport\n\n        // this is all the indexes we want, including those that already exist, so this method\n        // will end up going through each index and drawing only if the row doesn't already exist\n        const indexesToDraw = this.calculateIndexesToDraw(rowsToRecycle);\n\n        // never animate when doing print layout - as we want to get things ready to print as quickly as possible,\n        // otherwise we risk the printer printing a row that's half faded (half way through fading in)\n        // Don't animate rows that have been added or removed as part of scrolling\n        if (this.printLayout || afterScroll) {\n            animate = false;\n        }\n\n        this.removeRowCompsNotToDraw(indexesToDraw, !animate);\n\n        // add in new rows\n        const rowCtrls: RowCtrl[] = [];\n\n        indexesToDraw.forEach((rowIndex) => {\n            const rowCtrl = this.createOrUpdateRowCtrl(rowIndex, rowsToRecycle, animate, afterScroll);\n            if (_exists(rowCtrl)) {\n                rowCtrls.push(rowCtrl);\n            }\n        });\n\n        if (rowsToRecycle) {\n            const useAnimationFrame = afterScroll && !this.gos.get('suppressAnimationFrame') && !this.printLayout;\n            if (useAnimationFrame) {\n                this.beans.animationFrameService.addDestroyTask(() => {\n                    this.destroyRowCtrls(rowsToRecycle, animate);\n                    this.updateAllRowCtrls();\n                    this.dispatchDisplayedRowsChanged();\n                });\n            } else {\n                this.destroyRowCtrls(rowsToRecycle, animate);\n            }\n        }\n\n        this.updateAllRowCtrls();\n    }\n\n    private dispatchDisplayedRowsChanged(afterScroll: boolean = false): void {\n        const event: WithoutGridCommon<DisplayedRowsChangedEvent> = {\n            type: 'displayedRowsChanged',\n            afterScroll,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private onDisplayedColumnsChanged(): void {\n        const pinningLeft = this.visibleColsService.isPinningLeft();\n        const pinningRight = this.visibleColsService.isPinningRight();\n        const atLeastOneChanged = this.pinningLeft !== pinningLeft || pinningRight !== this.pinningRight;\n\n        if (atLeastOneChanged) {\n            this.pinningLeft = pinningLeft;\n            this.pinningRight = pinningRight;\n\n            if (this.embedFullWidthRows) {\n                this.redrawFullWidthEmbeddedRows();\n            }\n        }\n    }\n\n    // when embedding, what gets showed in each section depends on what is pinned. eg if embedding group expand / collapse,\n    // then it should go into the pinned left area if pinning left, or the center area if not pinning.\n    private redrawFullWidthEmbeddedRows(): void {\n        // if either of the pinned panels has shown / hidden, then need to redraw the fullWidth bits when\n        // embedded, as what appears in each section depends on whether we are pinned or not\n        const rowsToRemove: string[] = [];\n\n        this.getFullWidthRowCtrls().forEach((fullWidthCtrl) => {\n            const rowIndex = fullWidthCtrl.getRowNode().rowIndex;\n            rowsToRemove.push(rowIndex!.toString());\n        });\n\n        this.refreshFloatingRowComps();\n        this.removeRowCtrls(rowsToRemove);\n        this.redraw({ afterScroll: true });\n    }\n\n    public getFullWidthRowCtrls(rowNodes?: IRowNode[]): RowCtrl[] {\n        const rowNodesMap = this.mapRowNodes(rowNodes);\n\n        return this.getAllRowCtrls().filter((rowCtrl: RowCtrl) => {\n            // include just full width\n            if (!rowCtrl.isFullWidth()) {\n                return false;\n            }\n\n            // if Row Nodes provided, we exclude where Row Node is missing\n            const rowNode = rowCtrl.getRowNode();\n            if (rowNodesMap != null && !this.isRowInMap(rowNode, rowNodesMap)) {\n                return false;\n            }\n\n            return true;\n        });\n    }\n\n    private createOrUpdateRowCtrl(\n        rowIndex: number,\n        rowsToRecycle: { [key: string]: RowCtrl | null } | null | undefined,\n        animate: boolean,\n        afterScroll: boolean\n    ): RowCtrl | null | undefined {\n        let rowNode: RowNode | undefined;\n        let rowCtrl: RowCtrl | null = this.rowCtrlsByRowIndex[rowIndex];\n\n        // if no row comp, see if we can get it from the previous rowComps\n        if (!rowCtrl) {\n            rowNode = this.rowModel.getRow(rowIndex);\n            if (_exists(rowNode) && _exists(rowsToRecycle) && rowsToRecycle[rowNode.id!] && rowNode.alreadyRendered) {\n                rowCtrl = rowsToRecycle[rowNode.id!];\n                rowsToRecycle[rowNode.id!] = null;\n            }\n        }\n\n        const creatingNewRowCtrl = !rowCtrl;\n\n        if (creatingNewRowCtrl) {\n            // create a new one\n            if (!rowNode) {\n                rowNode = this.rowModel.getRow(rowIndex);\n            }\n\n            if (_exists(rowNode)) {\n                rowCtrl = this.createRowCon(rowNode, animate, afterScroll);\n            } else {\n                // this should never happen - if somehow we are trying to create\n                // a row for a rowNode that does not exist.\n                return;\n            }\n        }\n\n        if (rowNode) {\n            // set node as 'alreadyRendered' to ensure we only recycle rowComps that have been rendered, this ensures\n            // we don't reuse rowComps that have been removed and then re-added in the same batch transaction.\n            rowNode.alreadyRendered = true;\n        }\n\n        this.rowCtrlsByRowIndex[rowIndex] = rowCtrl!;\n\n        return rowCtrl;\n    }\n\n    private destroyRowCtrls(rowCtrlsMap: RowCtrlIdMap | null | undefined, animate: boolean): void {\n        const executeInAWhileFuncs: (() => void)[] = [];\n        _iterateObject(rowCtrlsMap, (nodeId: string, rowCtrl: RowCtrl) => {\n            // if row was used, then it's null\n            if (!rowCtrl) {\n                return;\n            }\n\n            if (this.cachedRowCtrls && rowCtrl.isCacheable()) {\n                this.cachedRowCtrls.addRow(rowCtrl);\n                return;\n            }\n\n            rowCtrl.destroyFirstPass(!animate);\n            if (animate) {\n                this.zombieRowCtrls[rowCtrl.getInstanceId()] = rowCtrl;\n                executeInAWhileFuncs.push(() => {\n                    rowCtrl.destroySecondPass();\n                    delete this.zombieRowCtrls[rowCtrl.getInstanceId()];\n                });\n            } else {\n                rowCtrl.destroySecondPass();\n            }\n        });\n        if (animate) {\n            // this ensures we fire displayedRowsChanged AFTER all the 'executeInAWhileFuncs' get\n            // executed, as we added it to the end of the list.\n            executeInAWhileFuncs.push(() => {\n                this.updateAllRowCtrls();\n                this.dispatchDisplayedRowsChanged();\n            });\n            _executeInAWhile(executeInAWhileFuncs);\n        }\n    }\n\n    private getRowBuffer(): number {\n        return this.gos.get('rowBuffer');\n    }\n\n    private getRowBufferInPixels() {\n        const rowsToBuffer = this.getRowBuffer();\n        const defaultRowHeight = this.gos.getRowHeightAsNumber();\n\n        return rowsToBuffer * defaultRowHeight;\n    }\n\n    private workOutFirstAndLastRowsToRender(): void {\n        this.rowContainerHeightService.updateOffset();\n        let newFirst: number;\n        let newLast: number;\n\n        if (!this.rowModel.isRowsToRender()) {\n            newFirst = 0;\n            newLast = -1; // setting to -1 means nothing in range\n        } else if (this.printLayout) {\n            this.environment.refreshRowHeightVariable();\n            newFirst = this.pageBoundsService.getFirstRow();\n            newLast = this.pageBoundsService.getLastRow();\n        } else {\n            const bufferPixels = this.getRowBufferInPixels();\n            const gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();\n            const suppressRowVirtualisation = this.gos.get('suppressRowVirtualisation');\n\n            let rowHeightsChanged = false;\n            let firstPixel: number;\n            let lastPixel: number;\n            do {\n                const paginationOffset = this.pageBoundsService.getPixelOffset();\n                const { pageFirstPixel, pageLastPixel } = this.pageBoundsService.getCurrentPagePixelRange();\n                const divStretchOffset = this.rowContainerHeightService.getDivStretchOffset();\n\n                const bodyVRange = gridBodyCtrl.getScrollFeature().getVScrollPosition();\n                const bodyTopPixel = bodyVRange.top;\n                const bodyBottomPixel = bodyVRange.bottom;\n\n                if (suppressRowVirtualisation) {\n                    firstPixel = pageFirstPixel + divStretchOffset;\n                    lastPixel = pageLastPixel + divStretchOffset;\n                } else {\n                    firstPixel =\n                        Math.max(bodyTopPixel + paginationOffset - bufferPixels, pageFirstPixel) + divStretchOffset;\n                    lastPixel =\n                        Math.min(bodyBottomPixel + paginationOffset + bufferPixels, pageLastPixel) + divStretchOffset;\n                }\n\n                this.firstVisibleVPixel = Math.max(bodyTopPixel + paginationOffset, pageFirstPixel) + divStretchOffset;\n                this.lastVisibleVPixel = Math.min(bodyBottomPixel + paginationOffset, pageLastPixel) + divStretchOffset;\n\n                // if the rows we are about to display get their heights changed, then that upsets the calcs from above.\n                rowHeightsChanged = this.ensureAllRowsInRangeHaveHeightsCalculated(firstPixel, lastPixel);\n            } while (rowHeightsChanged);\n\n            let firstRowIndex = this.rowModel.getRowIndexAtPixel(firstPixel);\n            let lastRowIndex = this.rowModel.getRowIndexAtPixel(lastPixel);\n\n            const pageFirstRow = this.pageBoundsService.getFirstRow();\n            const pageLastRow = this.pageBoundsService.getLastRow();\n\n            // adjust, in case buffer extended actual size\n            if (firstRowIndex < pageFirstRow) {\n                firstRowIndex = pageFirstRow;\n            }\n\n            if (lastRowIndex > pageLastRow) {\n                lastRowIndex = pageLastRow;\n            }\n\n            newFirst = firstRowIndex;\n            newLast = lastRowIndex;\n        }\n\n        // sometimes user doesn't set CSS right and ends up with grid with no height and grid ends up\n        // trying to render all the rows, eg 10,000+ rows. this will kill the browser. so instead of\n        // killing the browser, we limit the number of rows. just in case some use case we didn't think\n        // of, we also have a property to not do this operation.\n        const rowLayoutNormal = this.gos.isDomLayout('normal');\n        const suppressRowCountRestriction = this.gos.get('suppressMaxRenderedRowRestriction');\n        const rowBufferMaxSize = Math.max(this.getRowBuffer(), 500);\n\n        if (rowLayoutNormal && !suppressRowCountRestriction) {\n            if (newLast - newFirst > rowBufferMaxSize) {\n                newLast = newFirst + rowBufferMaxSize;\n            }\n        }\n\n        const firstDiffers = newFirst !== this.firstRenderedRow;\n        const lastDiffers = newLast !== this.lastRenderedRow;\n\n        if (firstDiffers || lastDiffers) {\n            this.firstRenderedRow = newFirst;\n            this.lastRenderedRow = newLast;\n\n            const event: WithoutGridCommon<ViewportChangedEvent> = {\n                type: 'viewportChanged',\n                firstRow: newFirst,\n                lastRow: newLast,\n            };\n\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    /**\n     * This event will only be fired once, and is queued until after the browser next renders.\n     * This allows us to fire an event during the start of the render cycle, when we first see data being rendered\n     * but not execute the event until all of the data has finished being rendered to the dom.\n     */\n    public dispatchFirstDataRenderedEvent() {\n        if (this.dataFirstRenderedFired) {\n            return;\n        }\n        this.dataFirstRenderedFired = true;\n\n        const event: WithoutGridCommon<FirstDataRenderedEvent> = {\n            type: 'firstDataRendered',\n            firstRow: this.firstRenderedRow,\n            lastRow: this.lastRenderedRow,\n        };\n\n        // See AG-7018\n        window.requestAnimationFrame(() => {\n            this.beans.eventService.dispatchEvent(event);\n        });\n    }\n\n    private ensureAllRowsInRangeHaveHeightsCalculated(topPixel: number, bottomPixel: number): boolean {\n        const pinnedRowHeightsChanged = this.pinnedRowModel?.ensureRowHeightsValid();\n\n        // ensure sticky rows heights are all updated\n        const stickyHeightsChanged = this.stickyRowFeature?.ensureRowHeightsValid();\n        // ensureRowHeightsVisible only works with CSRM, as it's the only row model that allows lazy row height calcs.\n        // all the other row models just hard code so the method just returns back false\n        const rowModelHeightsChanged = this.rowModel.ensureRowHeightsValid(\n            topPixel,\n            bottomPixel,\n            this.pageBoundsService.getFirstRow(),\n            this.pageBoundsService.getLastRow()\n        );\n        if (rowModelHeightsChanged || stickyHeightsChanged) {\n            this.eventService.dispatchEvent({\n                type: 'recalculateRowBounds',\n            });\n        }\n\n        if (stickyHeightsChanged || rowModelHeightsChanged || pinnedRowHeightsChanged) {\n            this.updateContainerHeights();\n            return true;\n        }\n        return false;\n    }\n\n    public getFirstVisibleVerticalPixel(): number {\n        return this.firstVisibleVPixel;\n    }\n\n    public getLastVisibleVerticalPixel(): number {\n        return this.lastVisibleVPixel;\n    }\n\n    public getFirstVirtualRenderedRow() {\n        return this.firstRenderedRow;\n    }\n\n    public getLastVirtualRenderedRow() {\n        return this.lastRenderedRow;\n    }\n\n    // check that none of the rows to remove are editing or focused as:\n    // a) if editing, we want to keep them, otherwise the user will loose the context of the edit,\n    //    eg user starts editing, enters some text, then scrolls down and then up, next time row rendered\n    //    the edit is reset - so we want to keep it rendered.\n    // b) if focused, we want ot keep keyboard focus, so if user ctrl+c, it goes to clipboard,\n    //    otherwise the user can range select and drag (with focus cell going out of the viewport)\n    //    and then ctrl+c, nothing will happen if cell is removed from dom.\n    // c) if detail record of master detail, as users complained that the context of detail rows\n    //    was getting lost when detail row out of view. eg user expands to show detail row,\n    //    then manipulates the detail panel (eg sorts the detail grid), then context is lost\n    //    after detail panel is scrolled out of / into view.\n    private doNotUnVirtualiseRow(rowComp: RowCtrl): boolean {\n        const REMOVE_ROW: boolean = false;\n        const KEEP_ROW: boolean = true;\n        const rowNode = rowComp.getRowNode();\n\n        const rowHasFocus = this.focusService.isRowNodeFocused(rowNode);\n        const rowIsEditing = rowComp.isEditing();\n        const rowIsDetail = rowNode.detail;\n\n        const mightWantToKeepRow = rowHasFocus || rowIsEditing || rowIsDetail;\n\n        // if we deffo don't want to keep it,\n        if (!mightWantToKeepRow) {\n            return REMOVE_ROW;\n        }\n\n        // editing row, only remove if it is no longer rendered, eg filtered out or new data set.\n        // the reason we want to keep is if user is scrolling up and down, we don't want to loose\n        // the context of the editing in process.\n        const rowNodePresent = this.isRowPresent(rowNode);\n        return rowNodePresent ? KEEP_ROW : REMOVE_ROW;\n    }\n\n    private isRowPresent(rowNode: RowNode): boolean {\n        if (!this.rowModel.isRowPresent(rowNode)) {\n            return false;\n        }\n        return this.paginationService ? this.paginationService.isRowPresent(rowNode) : true;\n    }\n\n    private createRowCon(rowNode: RowNode, animate: boolean, afterScroll: boolean): RowCtrl {\n        const rowCtrlFromCache = this.cachedRowCtrls ? this.cachedRowCtrls.getRow(rowNode) : null;\n        if (rowCtrlFromCache) {\n            return rowCtrlFromCache;\n        }\n\n        // we don't use animations frames for printing, so the user can put the grid into print mode\n        // and immediately print - otherwise the user would have to wait for the rows to draw in the background\n        // (via the animation frames) which is awkward to do from code.\n\n        // we only do the animation frames after scrolling, as this is where we want the smooth user experience.\n        // having animation frames for other times makes the grid look 'jumpy'.\n\n        const suppressAnimationFrame = this.gos.get('suppressAnimationFrame');\n        const useAnimationFrameForCreate = afterScroll && !suppressAnimationFrame && !this.printLayout;\n\n        const res = new RowCtrl(rowNode, this.beans, animate, useAnimationFrameForCreate, this.printLayout);\n\n        return res;\n    }\n\n    public getRenderedNodes() {\n        const renderedRows = this.rowCtrlsByRowIndex;\n        return Object.values(renderedRows).map((rowCtrl) => rowCtrl.getRowNode());\n    }\n\n    public getRowByPosition(rowPosition: RowPosition): RowCtrl | null {\n        let rowCtrl: RowCtrl | null;\n        const { rowIndex } = rowPosition;\n        switch (rowPosition.rowPinned) {\n            case 'top':\n                rowCtrl = this.topRowCtrls[rowIndex];\n                break;\n            case 'bottom':\n                rowCtrl = this.bottomRowCtrls[rowIndex];\n                break;\n            default:\n                rowCtrl = this.rowCtrlsByRowIndex[rowIndex];\n                if (!rowCtrl) {\n                    rowCtrl =\n                        this.getStickyTopRowCtrls().find((ctrl) => ctrl.getRowNode().rowIndex === rowIndex) || null;\n\n                    if (!rowCtrl) {\n                        rowCtrl =\n                            this.getStickyBottomRowCtrls().find((ctrl) => ctrl.getRowNode().rowIndex === rowIndex) ||\n                            null;\n                    }\n                }\n                break;\n        }\n\n        return rowCtrl;\n    }\n\n    // returns true if any row between startIndex and endIndex is rendered. used by\n    // SSRM or IRM, as they don't want to purge visible blocks from cache.\n    public isRangeInRenderedViewport(startIndex: number, endIndex: number): boolean {\n        // parent closed means the parent node is not expanded, thus these blocks are not visible\n        const parentClosed = startIndex == null || endIndex == null;\n        if (parentClosed) {\n            return false;\n        }\n\n        const blockAfterViewport = startIndex > this.lastRenderedRow;\n        const blockBeforeViewport = endIndex < this.firstRenderedRow;\n        const blockInsideViewport = !blockBeforeViewport && !blockAfterViewport;\n\n        return blockInsideViewport;\n    }\n}\n\nclass RowCtrlCache {\n    // map for fast access\n    private entriesMap: RowCtrlByRowNodeIdMap = {};\n\n    // list for keeping order\n    private entriesList: RowCtrl[] = [];\n\n    private readonly maxCount: number;\n\n    constructor(maxCount: number) {\n        this.maxCount = maxCount;\n    }\n\n    public addRow(rowCtrl: RowCtrl): void {\n        this.entriesMap[rowCtrl.getRowNode().id!] = rowCtrl;\n        this.entriesList.push(rowCtrl);\n        rowCtrl.setCached(true);\n\n        if (this.entriesList.length > this.maxCount) {\n            const rowCtrlToDestroy = this.entriesList[0];\n            rowCtrlToDestroy.destroyFirstPass();\n            rowCtrlToDestroy.destroySecondPass();\n            this.removeFromCache(rowCtrlToDestroy);\n        }\n    }\n\n    public getRow(rowNode: RowNode): RowCtrl | null {\n        if (rowNode == null || rowNode.id == null) {\n            return null;\n        }\n\n        const res = this.entriesMap[rowNode.id];\n\n        if (!res) {\n            return null;\n        }\n\n        this.removeFromCache(res);\n        res.setCached(false);\n\n        // this can happen if user reloads data, and a new RowNode is reusing\n        // the same ID as the old one\n        const rowNodeMismatch = res.getRowNode() != rowNode;\n\n        return rowNodeMismatch ? null : res;\n    }\n\n    public has(rowNode: RowNode): boolean {\n        return this.entriesMap[rowNode.id!] != null;\n    }\n\n    public removeRow(rowNode: RowNode): void {\n        const rowNodeId = rowNode.id!;\n        const ctrl = this.entriesMap[rowNodeId];\n        delete this.entriesMap[rowNodeId];\n        _removeFromArray(this.entriesList, ctrl);\n    }\n\n    public removeFromCache(rowCtrl: RowCtrl): void {\n        const rowNodeId = rowCtrl.getRowNode().id!;\n        delete this.entriesMap[rowNodeId];\n        _removeFromArray(this.entriesList, rowCtrl);\n    }\n\n    public getEntries(): RowCtrl[] {\n        return this.entriesList;\n    }\n}\n\nexport interface RefreshViewParams {\n    recycleRows?: boolean;\n    animate?: boolean;\n    suppressKeepFocus?: boolean;\n    onlyBody?: boolean;\n    // when new data, grid scrolls back to top\n    newData?: boolean;\n    newPage?: boolean;\n    domLayoutChanged?: boolean;\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport { RowNode } from '../entities/rowNode';\nimport type { CssVariablesChanged, PinnedHeightChangedEvent, PinnedRowDataChangedEvent } from '../events';\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\nimport type { RowPinnedType } from '../interfaces/iRowNode';\nimport { _last } from '../utils/array';\nimport { _missingOrEmpty } from '../utils/generic';\n\nexport class PinnedRowModel extends BeanStub implements NamedBean {\n    beanName = 'pinnedRowModel' as const;\n\n    private beans: BeanCollection;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.beans = beans;\n    }\n\n    private pinnedTopRows: RowNode[];\n    private pinnedBottomRows: RowNode[];\n\n    public postConstruct(): void {\n        this.setPinnedTopRowData();\n        this.setPinnedBottomRowData();\n        this.addManagedPropertyListener('pinnedTopRowData', () => this.setPinnedTopRowData());\n        this.addManagedPropertyListener('pinnedBottomRowData', () => this.setPinnedBottomRowData());\n        this.addManagedEventListeners({ gridStylesChanged: this.onGridStylesChanges.bind(this) });\n    }\n\n    public isEmpty(floating: RowPinnedType): boolean {\n        const rows = floating === 'top' ? this.pinnedTopRows : this.pinnedBottomRows;\n        return _missingOrEmpty(rows);\n    }\n\n    public isRowsToRender(floating: RowPinnedType): boolean {\n        return !this.isEmpty(floating);\n    }\n\n    public getRowAtPixel(pixel: number, floating: RowPinnedType): number {\n        const rows = floating === 'top' ? this.pinnedTopRows : this.pinnedBottomRows;\n        if (_missingOrEmpty(rows)) {\n            return 0; // this should never happen, just in case, 0 is graceful failure\n        }\n        for (let i = 0; i < rows.length; i++) {\n            const rowNode = rows[i];\n            const rowTopPixel = rowNode.rowTop! + rowNode.rowHeight! - 1;\n            // only need to range check against the top pixel, as we are going through the list\n            // in order, first row to hit the pixel wins\n            if (rowTopPixel >= pixel) {\n                return i;\n            }\n        }\n        return rows.length - 1;\n    }\n\n    private onGridStylesChanges(e: CssVariablesChanged) {\n        if (e.rowHeightChanged) {\n            const estimateRowHeight = (rowNode: RowNode) => {\n                rowNode.setRowHeight(rowNode.rowHeight, true);\n            };\n            this.pinnedBottomRows.forEach(estimateRowHeight);\n            this.pinnedTopRows.forEach(estimateRowHeight);\n        }\n    }\n\n    public ensureRowHeightsValid(): boolean {\n        let anyChange = false;\n        let rowTop = 0;\n        const updateRowHeight = (rowNode: RowNode) => {\n            if (rowNode.rowHeightEstimated) {\n                const rowHeight = this.gos.getRowHeightForNode(rowNode);\n                rowNode.setRowTop(rowTop);\n                rowNode.setRowHeight(rowHeight.height);\n                rowTop += rowHeight.height;\n                anyChange = true;\n            }\n        };\n        this.pinnedBottomRows?.forEach(updateRowHeight);\n        rowTop = 0;\n        this.pinnedTopRows?.forEach(updateRowHeight);\n\n        const event: WithoutGridCommon<PinnedHeightChangedEvent> = {\n            type: 'pinnedHeightChanged',\n        };\n        this.eventService.dispatchEvent(event);\n\n        return anyChange;\n    }\n\n    private setPinnedTopRowData(): void {\n        const rowData = this.gos.get('pinnedTopRowData');\n        this.pinnedTopRows = this.createNodesFromData(rowData, true);\n        const event: WithoutGridCommon<PinnedRowDataChangedEvent> = {\n            type: 'pinnedRowDataChanged',\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private setPinnedBottomRowData(): void {\n        const rowData = this.gos.get('pinnedBottomRowData');\n        this.pinnedBottomRows = this.createNodesFromData(rowData, false);\n        const event: WithoutGridCommon<PinnedRowDataChangedEvent> = {\n            type: 'pinnedRowDataChanged',\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private createNodesFromData(allData: any[] | undefined, isTop: boolean): RowNode[] {\n        const rowNodes: RowNode[] = [];\n        if (allData) {\n            const getRowId = this.gos.getRowIdCallback();\n            const idPrefix = isTop ? RowNode.ID_PREFIX_TOP_PINNED : RowNode.ID_PREFIX_BOTTOM_PINNED;\n\n            let nextRowTop = 0;\n            allData.forEach((dataItem: any, index: number) => {\n                const rowNode = new RowNode(this.beans);\n                rowNode.data = dataItem;\n\n                rowNode.id = getRowId?.({ data: dataItem, level: 0 }) ?? idPrefix + index;\n\n                rowNode.rowPinned = isTop ? 'top' : 'bottom';\n                rowNode.setRowTop(nextRowTop);\n                rowNode.setRowHeight(this.gos.getRowHeightForNode(rowNode).height);\n                rowNode.setRowIndex(index);\n                nextRowTop += rowNode.rowHeight!;\n                rowNodes.push(rowNode);\n            });\n        }\n        return rowNodes;\n    }\n\n    public getPinnedTopRowNodes(): RowNode[] {\n        return this.pinnedTopRows;\n    }\n\n    public getPinnedBottomRowNodes(): RowNode[] {\n        return this.pinnedBottomRows;\n    }\n\n    public getPinnedTopTotalHeight(): number {\n        return this.getTotalHeight(this.pinnedTopRows);\n    }\n\n    public getPinnedTopRowCount(): number {\n        return this.pinnedTopRows ? this.pinnedTopRows.length : 0;\n    }\n\n    public getPinnedBottomRowCount(): number {\n        return this.pinnedBottomRows ? this.pinnedBottomRows.length : 0;\n    }\n\n    public getPinnedTopRow(index: number): RowNode | undefined {\n        return this.pinnedTopRows[index];\n    }\n\n    public getPinnedBottomRow(index: number): RowNode | undefined {\n        return this.pinnedBottomRows[index];\n    }\n\n    public forEachPinnedTopRow(callback: (rowNode: RowNode, index: number) => void): void {\n        if (_missingOrEmpty(this.pinnedTopRows)) {\n            return;\n        }\n        this.pinnedTopRows.forEach(callback);\n    }\n\n    public forEachPinnedBottomRow(callback: (rowNode: RowNode, index: number) => void): void {\n        if (_missingOrEmpty(this.pinnedBottomRows)) {\n            return;\n        }\n        this.pinnedBottomRows.forEach(callback);\n    }\n\n    public getPinnedBottomTotalHeight(): number {\n        return this.getTotalHeight(this.pinnedBottomRows);\n    }\n\n    private getTotalHeight(rowNodes: RowNode[]): number {\n        if (!rowNodes || rowNodes.length === 0) {\n            return 0;\n        }\n\n        const lastNode = _last(rowNodes);\n        return lastNode.rowTop! + lastNode.rowHeight!;\n    }\n}\n", "import type { IRowNode } from './iRowNode';\n\nexport interface ServerSideTransaction {\n    /**\n     * The Row Store to apply the transaction to, ie what group level.\n     * eg ['Ireland','2002'] to update the child store found after expanding Ireland and 2002 groups.\n     * Passing in blank to empty applies the transaction to the top level.\n     */\n    route?: string[];\n    /** Index position to add at. If missing, rows will be added to the end. */\n    addIndex?: number;\n    /** Rows to add */\n    add?: any[];\n    /** Rows to remove */\n    remove?: any[];\n    /** Rows to update */\n    update?: any[];\n}\n\nexport interface ServerSideTransactionResult {\n    /** The status of applying the transaction. */\n    status: ServerSideTransactionResultStatus;\n    /** If rows were added, the newly created Row Nodes for those rows. */\n    add?: IRowNode[];\n    /** If rows were removed, the deleted Row Nodes. */\n    remove?: IRowNode[];\n    /** If rows were updated, the updated Row Nodes. */\n    update?: IRowNode[];\n}\n\nexport enum ServerSideTransactionResultStatus {\n    /** Transaction was successfully applied */\n    Applied = 'Applied',\n    /**\n     * Store was not found, transaction not applied.\n     * Either invalid route, or the parent row has not yet been expanded.\n     */\n    StoreNotFound = 'StoreNotFound',\n    /**\n     * Store is loading, transaction not applied.\n     */\n    StoreLoading = 'StoreLoading',\n    /**\n     * Store is loading (as max loads exceeded), transaction not applied.\n     */\n    StoreWaitingToLoad = 'StoreWaitingToLoad',\n    /**\n     * Store load attempt failed, transaction not applied.\n     */\n    StoreLoadingFailed = 'StoreLoadingFailed',\n    /**\n     * Store is type Partial, which doesn't accept transactions\n     */\n    StoreWrongType = 'StoreWrongType',\n    /**\n     * Transaction was cancelled, due to grid.\n     * Callback isApplyServerSideTransaction() returning false\n     */\n    Cancelled = 'Cancelled',\n    /**\n     * Store has not started yet, transaction not applied\n     */\n    StoreNotStarted = 'StoreNotStarted',\n}\n", "import { BeanStub } from '../context/beanStub';\nimport type { LoadCompleteEvent, LoadSuccessParams } from './iRowNodeBlock';\n\ntype RowNodeBlockState = 'needsLoading' | 'loading' | 'loaded' | 'failed';\n\nexport type RowNodeBlockEvent = 'loadComplete';\nexport abstract class RowNodeBlock extends BeanStub<RowNodeBlockEvent> {\n    private readonly id: number;\n\n    private state: RowNodeBlockState = 'needsLoading';\n\n    private version = 0;\n\n    public abstract getBlockStateJson(): { id: string; state: any };\n\n    protected abstract loadFromDatasource(): void;\n\n    protected abstract processServerResult(params: LoadSuccessParams): void;\n\n    protected abstract processServerFail(): void;\n\n    protected constructor(id: number) {\n        super();\n        this.id = id;\n    }\n\n    public getId(): number {\n        return this.id;\n    }\n\n    public load(): void {\n        this.state = 'loading';\n        this.loadFromDatasource();\n    }\n\n    public getVersion(): number {\n        return this.version;\n    }\n\n    public setStateWaitingToLoad(): void {\n        // in case any current loads in progress, this will have their results ignored\n        this.version++;\n        this.state = 'needsLoading';\n    }\n\n    public getState(): RowNodeBlockState {\n        return this.state;\n    }\n\n    protected pageLoadFailed(version: number) {\n        const requestMostRecentAndLive = this.isRequestMostRecentAndLive(version);\n        if (requestMostRecentAndLive) {\n            this.state = 'failed';\n            this.processServerFail();\n        }\n\n        this.dispatchLoadCompleted(false);\n    }\n\n    protected success(version: number, params: LoadSuccessParams): void {\n        this.successCommon(version, params);\n    }\n\n    protected pageLoaded(version: number, rows: any[], lastRow: number) {\n        this.successCommon(version, { rowData: rows, rowCount: lastRow });\n    }\n\n    private isRequestMostRecentAndLive(version: number): boolean {\n        // thisIsMostRecentRequest - if block was refreshed, then another request\n        // could of been sent after this one.\n        const thisIsMostRecentRequest = version === this.version;\n\n        // weAreNotDestroyed - if InfiniteStore is purged, then blocks are destroyed\n        // and new blocks created. so data loads of old blocks are discarded.\n        const weAreNotDestroyed = this.isAlive();\n\n        return thisIsMostRecentRequest && weAreNotDestroyed;\n    }\n\n    protected successCommon(version: number, params: LoadSuccessParams) {\n        // need to dispatch load complete before processing the data, as PaginationComp checks\n        // RowNodeBlockLoader to see if it is still loading, so the RowNodeBlockLoader needs to\n        // be updated first (via LoadComplete event) before PaginationComp updates (via processServerResult method)\n        this.dispatchLoadCompleted();\n\n        const requestMostRecentAndLive = this.isRequestMostRecentAndLive(version);\n\n        if (requestMostRecentAndLive) {\n            this.state = 'loaded';\n            this.processServerResult(params);\n        }\n    }\n\n    private dispatchLoadCompleted(success = true) {\n        // we fire event regardless of processing data or now, as we want\n        // the concurrentLoadRequests count to be reduced in BlockLoader\n        const event: LoadCompleteEvent = {\n            type: 'loadComplete',\n            success: success,\n            block: this,\n        };\n\n        this.dispatchLocalEvent(event);\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { IRowModel } from '../interfaces/iRowModel';\nimport type { IServerSideRowModel } from '../interfaces/iServerSideRowModel';\nimport { _removeFromArray } from '../utils/array';\nimport { _debounce, _log } from '../utils/function';\nimport type { RowNodeBlock } from './rowNodeBlock';\n\nexport type RowNodeBlockLoaderEvent = 'blockLoaded' | 'blockLoaderFinished';\nexport class RowNodeBlockLoader extends BeanStub<RowNodeBlockLoaderEvent> implements NamedBean {\n    beanName = 'rowNodeBlockLoader' as const;\n\n    private rowModel: IRowModel;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.rowModel = beans.rowModel;\n    }\n\n    private maxConcurrentRequests: number | undefined;\n    private checkBlockToLoadDebounce: () => void;\n\n    private activeBlockLoadsCount = 0;\n    private blocks: RowNodeBlock[] = [];\n    private active = true;\n\n    public postConstruct(): void {\n        this.maxConcurrentRequests = this.getMaxConcurrentDatasourceRequests();\n        const blockLoadDebounceMillis = this.gos.get('blockLoadDebounceMillis');\n\n        if (blockLoadDebounceMillis && blockLoadDebounceMillis > 0) {\n            this.checkBlockToLoadDebounce = _debounce(\n                this.performCheckBlocksToLoad.bind(this),\n                blockLoadDebounceMillis\n            );\n        }\n    }\n\n    private getMaxConcurrentDatasourceRequests(): number | undefined {\n        const res = this.gos.get('maxConcurrentDatasourceRequests');\n        if (res == null) {\n            return 2;\n        } // 2 is the default\n        if (res <= 0) {\n            return;\n        } // negative number, eg -1, means no max restriction\n        return res;\n    }\n\n    public addBlock(block: RowNodeBlock): void {\n        this.blocks.push(block);\n\n        // note that we do not remove this listener when removing the block. this is because the\n        // cache can get destroyed (and containing blocks) when a block is loading. however the loading block\n        // is still counted as an active loading block and we must decrement activeBlockLoadsCount when it finishes.\n        block.addEventListener('loadComplete', this.loadComplete.bind(this));\n\n        this.checkBlockToLoad();\n    }\n\n    public removeBlock(block: RowNodeBlock): void {\n        _removeFromArray(this.blocks, block);\n    }\n\n    public override destroy(): void {\n        super.destroy();\n        this.active = false;\n    }\n\n    public loadComplete(): void {\n        this.activeBlockLoadsCount--;\n        this.checkBlockToLoad();\n        this.dispatchLocalEvent({ type: 'blockLoaded' });\n        if (this.activeBlockLoadsCount == 0) {\n            this.dispatchLocalEvent({ type: 'blockLoaderFinished' });\n        }\n    }\n\n    public checkBlockToLoad(): void {\n        if (this.checkBlockToLoadDebounce) {\n            this.checkBlockToLoadDebounce();\n        } else {\n            this.performCheckBlocksToLoad();\n        }\n    }\n\n    private performCheckBlocksToLoad(): void {\n        if (!this.active) {\n            return;\n        }\n\n        this.printCacheStatus();\n\n        if (this.maxConcurrentRequests != null && this.activeBlockLoadsCount >= this.maxConcurrentRequests) {\n            if (this.gos.get('debug')) {\n                _log(`RowNodeBlockLoader - checkBlockToLoad: max loads exceeded`);\n            }\n            return;\n        }\n\n        const loadAvailability = this.getAvailableLoadingCount();\n        const blocksToLoad: RowNodeBlock[] = this.blocks\n            .filter((block) => block.getState() === 'needsLoading')\n            .slice(0, loadAvailability);\n\n        this.registerLoads(blocksToLoad.length);\n        blocksToLoad.forEach((block) => block.load());\n        this.printCacheStatus();\n    }\n\n    public getBlockState() {\n        if (this.gos.isRowModelType('serverSide')) {\n            const ssrm = this.rowModel as IServerSideRowModel;\n            return ssrm.getBlockStates();\n        }\n\n        const result: { [key: string]: any } = {};\n        this.blocks.forEach((block: RowNodeBlock) => {\n            const { id, state } = block.getBlockStateJson();\n            result[id] = state;\n        });\n        return result;\n    }\n\n    private printCacheStatus(): void {\n        if (this.gos.get('debug')) {\n            _log(\n                `RowNodeBlockLoader - printCacheStatus: activePageLoadsCount = ${this.activeBlockLoadsCount},` +\n                    ` blocks = ${JSON.stringify(this.getBlockState())}`\n            );\n        }\n    }\n\n    public isLoading(): boolean {\n        return this.activeBlockLoadsCount > 0;\n    }\n\n    public registerLoads(count: number) {\n        this.activeBlockLoadsCount += count;\n    }\n\n    public getAvailableLoadingCount() {\n        return this.maxConcurrentRequests !== undefined\n            ? this.maxConcurrentRequests - this.activeBlockLoadsCount\n            : undefined;\n    }\n}\n", "import type { Module } from '../interfaces/iModule';\nimport { VERSION } from '../version';\nimport { RowNodeBlockLoader } from './rowNodeBlockLoader';\n\nexport const RowNodeBlockModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/row-node-block',\n    beans: [RowNodeBlockLoader],\n};\n", "import type { RowNode } from '../entities/rowNode';\nimport type { IRowModel } from '../interfaces/iRowModel';\n\nexport interface ISelectionContext<TNode> {\n    init(rowModel: IRowModel): void;\n    reset(): void;\n    setRoot(node: TNode): void;\n    setEndRange(node: TNode): void;\n    getRange(): RowNode[];\n    getRoot(): TNode | null;\n    isInRange(node: TNode): boolean;\n    truncate(node: TNode): { keep: RowNode[]; discard: RowNode[] };\n    extend(node: TNode, groupSelectsChildren?: boolean): { keep: RowNode[]; discard: RowNode[] };\n}\n\n/**\n * The context of a row range selection operation.\n *\n * Used to model the stateful range selection behaviour found in Excel, where\n * a given cell/row represents the \"root\" of a selection range, and subsequent\n * selections are based off that root.\n *\n * See AG-9620 for more\n */\nexport class RowRangeSelectionContext implements ISelectionContext<RowNode> {\n    private root: RowNode | null = null;\n    /**\n     * Note that the \"end\" `RowNode` may come before or after the \"root\" `RowNode` in the\n     * actual grid.\n     */\n    private end: RowNode | null = null;\n    private rowModel: IRowModel;\n    private cachedRange: RowNode[] = [];\n\n    public init(rowModel: IRowModel): void {\n        this.rowModel = rowModel;\n    }\n\n    public reset(): void {\n        this.root = null;\n        this.end = null;\n        this.cachedRange.length = 0;\n    }\n\n    public setRoot(node: RowNode): void {\n        this.root = node;\n        this.end = null;\n        this.cachedRange.length = 0;\n    }\n\n    public setEndRange(end: RowNode): void {\n        this.end = end;\n        this.cachedRange.length = 0;\n    }\n\n    public getRange(): RowNode[] {\n        if (this.cachedRange.length === 0) {\n            const root = this.getRoot();\n            const end = this.getEnd();\n\n            if (root == null || end == null) {\n                return this.cachedRange;\n            }\n\n            this.cachedRange = this.rowModel.getNodesInRangeForSelection(root, end);\n        }\n\n        return this.cachedRange;\n    }\n\n    public isInRange(node: RowNode): boolean {\n        if (this.root === null) {\n            return false;\n        }\n\n        return this.getRange().some((nodeInRange) => nodeInRange.id === node.id);\n    }\n\n    public getRoot(): RowNode | null {\n        if (this.root && this.root?.key === null) {\n            this.root = this.rowModel.getRowNode(this.root.id!) ?? null;\n        }\n\n        return this.root;\n    }\n\n    private getEnd(): RowNode | null {\n        if (this.end && this.end?.key === null) {\n            this.end = this.rowModel.getRowNode(this.end.id!) ?? null;\n        }\n\n        return this.end;\n    }\n\n    /**\n     * Truncates the range to the given node (assumed to be within the current range).\n     * Returns nodes that remain in the current range and those that should be removed\n     *\n     * @param node - Node at which to truncate the range\n     * @returns Object of nodes to either keep or discard (i.e. deselect) from the range\n     */\n    public truncate(node: RowNode): { keep: RowNode[]; discard: RowNode[] } {\n        const range = this.getRange();\n\n        if (range.length === 0) {\n            return { keep: [], discard: [] };\n        }\n\n        // if root is first, then selection range goes \"down\" the table\n        // so we should be unselecting the range _after_ the given `node`\n        const discardAfter = range[0].id === this.root!.id;\n\n        const idx = range.findIndex((rowNode) => rowNode.id === node.id);\n        if (idx > -1) {\n            const above = range.slice(0, idx);\n            const below = range.slice(idx + 1);\n            this.setEndRange(node);\n            return discardAfter ? { keep: above, discard: below } : { keep: below, discard: above };\n        } else {\n            return { keep: range, discard: [] };\n        }\n    }\n\n    /**\n     * Extends the range to the given node. Returns nodes that remain in the current range\n     * and those that should be removed.\n     *\n     * @param node - Node marking the new end of the range\n     * @returns Object of nodes to either keep or discard (i.e. deselect) from the range\n     */\n    public extend(node: RowNode, groupSelectsChildren = false): { keep: RowNode[]; discard: RowNode[] } {\n        const root = this.getRoot();\n\n        // If the root node is null, we cannot iterate from the root to the given `node`.\n        // So we keep the existing selection, plus the given `node`, plus any leaf children.\n        if (root == null) {\n            const keep = this.getRange().slice();\n            if (groupSelectsChildren) {\n                node.depthFirstSearch((node) => !node.group && keep.push(node));\n            }\n            keep.push(node);\n\n            // We now have a node we can use as the root of the selection\n            this.setRoot(node);\n\n            return { keep, discard: [] };\n        }\n\n        const newRange = this.rowModel.getNodesInRangeForSelection(root, node);\n\n        if (newRange.find((newRangeNode) => newRangeNode.id === this.end?.id)) {\n            // Range between root and given node contains the current \"end\"\n            // so this is an extension of the current range direction\n            this.setEndRange(node);\n            return { keep: this.getRange(), discard: [] };\n        } else {\n            // otherwise, this is an inversion\n            const discard = this.getRange().slice();\n            this.setEndRange(node);\n            return { keep: this.getRange(), discard };\n        }\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { CellClassParams, ColDef } from '../entities/colDef';\nimport type { RowClassParams } from '../entities/gridOptions';\nimport type { ExpressionService } from '../valueService/expressionService';\n\nexport class StylingService extends BeanStub implements NamedBean {\n    beanName = 'stylingService' as const;\n\n    private expressionService: ExpressionService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.expressionService = beans.expressionService;\n    }\n\n    public processAllCellClasses(\n        colDef: ColDef,\n        params: CellClassParams,\n        onApplicableClass: (className: string) => void,\n        onNotApplicableClass?: (className: string) => void\n    ) {\n        this.processClassRules(undefined, colDef.cellClassRules, params, onApplicableClass, onNotApplicableClass);\n        this.processStaticCellClasses(colDef, params, onApplicableClass);\n    }\n\n    public processClassRules(\n        previousClassRules: { [cssClassName: string]: ((...args: any[]) => any) | string } | undefined,\n        classRules: { [cssClassName: string]: ((...args: any[]) => any) | string } | undefined,\n        params: RowClassParams | CellClassParams,\n        onApplicableClass: (className: string) => void,\n        onNotApplicableClass?: (className: string) => void\n    ) {\n        if (classRules == null && previousClassRules == null) {\n            return;\n        }\n\n        const classesToApply: { [name: string]: boolean } = {};\n        const classesToRemove: { [name: string]: boolean } = {};\n\n        const forEachSingleClass = (className: string, callback: (singleClass: string) => void) => {\n            // in case className = 'my-class1 my-class2', we need to split into individual class names\n            className.split(' ').forEach((singleClass) => {\n                if (singleClass.trim() == '') return;\n                callback(singleClass);\n            });\n        };\n\n        if (classRules) {\n            const classNames = Object.keys(classRules);\n            for (let i = 0; i < classNames.length; i++) {\n                const className = classNames[i];\n                const rule = classRules![className];\n\n                let resultOfRule: any;\n\n                if (typeof rule === 'string') {\n                    resultOfRule = this.expressionService.evaluate(rule, params);\n                } else if (typeof rule === 'function') {\n                    resultOfRule = rule(params);\n                }\n\n                forEachSingleClass(className, (singleClass) => {\n                    resultOfRule ? (classesToApply[singleClass] = true) : (classesToRemove[singleClass] = true);\n                });\n            }\n        }\n        if (previousClassRules && onNotApplicableClass) {\n            Object.keys(previousClassRules).forEach((className) =>\n                forEachSingleClass(className, (singleClass) => {\n                    if (!classesToApply[singleClass]) {\n                        // if we're not applying a previous class now, make sure we remove it\n                        classesToRemove[singleClass] = true;\n                    }\n                })\n            );\n        }\n\n        // we remove all classes first, then add all classes second,\n        // in case a class appears in more than one rule, this means it will be added\n        // if appears in at least one truthy rule\n        if (onNotApplicableClass) {\n            Object.keys(classesToRemove).forEach(onNotApplicableClass);\n        }\n        Object.keys(classesToApply).forEach(onApplicableClass);\n    }\n\n    public getStaticCellClasses(colDef: ColDef, params: CellClassParams): string[] {\n        const { cellClass } = colDef;\n\n        if (!cellClass) {\n            return [];\n        }\n\n        let classOrClasses: string | string[] | null | undefined;\n\n        if (typeof cellClass === 'function') {\n            const cellClassFunc = cellClass;\n            classOrClasses = cellClassFunc(params);\n        } else {\n            classOrClasses = cellClass;\n        }\n\n        if (typeof classOrClasses === 'string') {\n            classOrClasses = [classOrClasses];\n        }\n\n        return classOrClasses || [];\n    }\n\n    private processStaticCellClasses(\n        colDef: ColDef,\n        params: CellClassParams,\n        onApplicableClass: (className: string) => void\n    ) {\n        const classOrClasses = this.getStaticCellClasses(colDef, params);\n\n        classOrClasses.forEach((cssClassItem: string) => {\n            onApplicableClass(cssClassItem);\n        });\n    }\n}\n", "import type { AgCheckboxParams } from '../interfaces/agFieldParams';\nimport { AgCheckbox } from './agCheckbox';\nimport type { ComponentSelector } from './component';\n\nexport interface AgToggleButtonParams extends AgCheckboxParams {}\n\nexport class AgToggleButton extends AgCheckbox<AgToggleButtonParams> {\n    constructor(config?: AgToggleButtonParams) {\n        super(config, 'ag-toggle-button');\n    }\n\n    public override setValue(value: boolean, silent?: boolean): this {\n        super.setValue(value, silent);\n\n        this.addOrRemoveCssClass('ag-selected', this.getValue()!);\n\n        return this;\n    }\n}\nexport const AgToggleButtonSelector: ComponentSelector = {\n    selector: 'AG-TOGGLE-BUTTON',\n    component: AgToggleButton,\n};\n", "import { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { FocusService } from '../focusService';\nimport { ManagedFocusFeature } from './managedFocusFeature';\n\nexport enum TabGuardClassNames {\n    TAB_GUARD = 'ag-tab-guard',\n    TAB_GUARD_TOP = 'ag-tab-guard-top',\n    TAB_GUARD_BOTTOM = 'ag-tab-guard-bottom',\n}\n\nexport interface ITabGuard {\n    setTabIndex(tabIndex?: string): void;\n}\n\nexport class TabGuardCtrl extends BeanStub {\n    private focusService: FocusService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.focusService = beans.focusService;\n    }\n\n    private readonly comp: ITabGuard;\n    private readonly eTopGuard: HTMLElement;\n    private readonly eBottomGuard: HTMLElement;\n\n    private readonly eFocusableElement: HTMLElement;\n    private readonly focusTrapActive: boolean;\n    private readonly forceFocusOutWhenTabGuardsAreEmpty: boolean;\n    // When true, this prevents the browser from tabbing into and out of the element.\n    // Instead, focus must be handled manually\n    private readonly isFocusableContainer: boolean;\n\n    private readonly providedFocusInnerElement?: (fromBottom: boolean) => void;\n    private readonly providedFocusIn?: (event: FocusEvent) => void;\n    private readonly providedFocusOut?: (event: FocusEvent) => void;\n\n    private readonly providedShouldStopEventPropagation?: () => boolean;\n    private readonly providedOnTabKeyDown?: (e: KeyboardEvent) => void;\n    private readonly providedHandleKeyDown?: (e: KeyboardEvent) => void;\n\n    private skipTabGuardFocus: boolean = false;\n    private forcingFocusOut: boolean = false;\n    // Used when `isFocusableContainer` enabled\n    private allowFocus: boolean = false;\n\n    constructor(params: {\n        comp: ITabGuard;\n        eTopGuard: HTMLElement;\n        eBottomGuard: HTMLElement;\n        eFocusableElement: HTMLElement;\n        focusTrapActive?: boolean;\n        forceFocusOutWhenTabGuardsAreEmpty?: boolean;\n        isFocusableContainer?: boolean;\n        focusInnerElement?: (fromBottom: boolean) => void;\n        onFocusIn?: (event: FocusEvent) => void;\n        onFocusOut?: (event: FocusEvent) => void;\n        shouldStopEventPropagation?: () => boolean;\n        onTabKeyDown?: (e: KeyboardEvent) => void;\n        handleKeyDown?: (e: KeyboardEvent) => void;\n    }) {\n        super();\n\n        const {\n            comp,\n            eTopGuard,\n            eBottomGuard,\n            focusTrapActive,\n            forceFocusOutWhenTabGuardsAreEmpty,\n            isFocusableContainer,\n            focusInnerElement,\n            onFocusIn,\n            onFocusOut,\n            shouldStopEventPropagation,\n            onTabKeyDown,\n            handleKeyDown,\n            eFocusableElement,\n        } = params;\n\n        this.comp = comp;\n\n        this.eTopGuard = eTopGuard;\n        this.eBottomGuard = eBottomGuard;\n        this.providedFocusInnerElement = focusInnerElement;\n        this.eFocusableElement = eFocusableElement;\n        this.focusTrapActive = !!focusTrapActive;\n        this.forceFocusOutWhenTabGuardsAreEmpty = !!forceFocusOutWhenTabGuardsAreEmpty;\n        this.isFocusableContainer = !!isFocusableContainer;\n\n        this.providedFocusIn = onFocusIn;\n        this.providedFocusOut = onFocusOut;\n        this.providedShouldStopEventPropagation = shouldStopEventPropagation;\n        this.providedOnTabKeyDown = onTabKeyDown;\n        this.providedHandleKeyDown = handleKeyDown;\n    }\n\n    public postConstruct() {\n        this.createManagedBean(\n            new ManagedFocusFeature(this.eFocusableElement, {\n                shouldStopEventPropagation: () => this.shouldStopEventPropagation(),\n                onTabKeyDown: (e) => this.onTabKeyDown(e),\n                handleKeyDown: (e) => this.handleKeyDown(e),\n                onFocusIn: (e) => this.onFocusIn(e),\n                onFocusOut: (e) => this.onFocusOut(e),\n            })\n        );\n\n        this.activateTabGuards();\n\n        [this.eTopGuard, this.eBottomGuard].forEach((guard) =>\n            this.addManagedElementListeners(guard, { focus: this.onFocus.bind(this) })\n        );\n    }\n\n    private handleKeyDown(e: KeyboardEvent): void {\n        if (this.providedHandleKeyDown) {\n            this.providedHandleKeyDown(e);\n        }\n    }\n\n    private tabGuardsAreActive(): boolean {\n        return !!this.eTopGuard && this.eTopGuard.hasAttribute('tabIndex');\n    }\n\n    private shouldStopEventPropagation(): boolean {\n        if (this.providedShouldStopEventPropagation) {\n            return this.providedShouldStopEventPropagation();\n        }\n        return false;\n    }\n\n    private activateTabGuards(): void {\n        // Do not activate tabs while focus is being forced out\n        if (this.forcingFocusOut) {\n            return;\n        }\n        const tabIndex = this.gos.get('tabIndex');\n        this.comp.setTabIndex(tabIndex.toString());\n    }\n\n    private deactivateTabGuards(): void {\n        this.comp.setTabIndex();\n    }\n\n    private onFocus(e: FocusEvent): void {\n        if (this.isFocusableContainer && !this.eFocusableElement.contains(e.relatedTarget as HTMLElement)) {\n            if (!this.allowFocus) {\n                this.findNextElementOutsideAndFocus(e.target === this.eBottomGuard);\n                return;\n            }\n        }\n\n        if (this.skipTabGuardFocus) {\n            this.skipTabGuardFocus = false;\n            return;\n        }\n\n        // when there are no focusable items within the TabGuard, focus gets stuck\n        // in the TabGuard itself and has nowhere to go, so we need to manually find\n        // the closest element to focus by calling `forceFocusOutWhenTabGuardAreEmpty`.\n        if (this.forceFocusOutWhenTabGuardsAreEmpty) {\n            const isEmpty =\n                this.focusService.findFocusableElements(this.eFocusableElement, '.ag-tab-guard').length === 0;\n            if (isEmpty) {\n                this.findNextElementOutsideAndFocus(e.target === this.eBottomGuard);\n                return;\n            }\n        }\n\n        if (this.isFocusableContainer && this.eFocusableElement.contains(e.relatedTarget as HTMLElement)) {\n            return;\n        }\n\n        const fromBottom = e.target === this.eBottomGuard;\n\n        if (this.providedFocusInnerElement) {\n            this.providedFocusInnerElement(fromBottom);\n        } else {\n            this.focusInnerElement(fromBottom);\n        }\n    }\n\n    private findNextElementOutsideAndFocus(up: boolean) {\n        const eDocument = this.gos.getDocument();\n        const focusableEls = this.focusService.findFocusableElements(eDocument.body, null, true);\n        const index = focusableEls.indexOf(up ? this.eTopGuard : this.eBottomGuard);\n\n        if (index === -1) {\n            return;\n        }\n\n        let start: number;\n        let end: number;\n        if (up) {\n            start = 0;\n            end = index;\n        } else {\n            start = index + 1;\n            end = focusableEls.length;\n        }\n        const focusableRange = focusableEls.slice(start, end);\n        const targetTabIndex = this.gos.get('tabIndex');\n        focusableRange.sort((a: HTMLElement, b: HTMLElement) => {\n            const indexA = parseInt(a.getAttribute('tabindex') || '0');\n            const indexB = parseInt(b.getAttribute('tabindex') || '0');\n\n            if (indexB === targetTabIndex) {\n                return 1;\n            }\n            if (indexA === targetTabIndex) {\n                return -1;\n            }\n\n            if (indexA === 0) {\n                return 1;\n            }\n            if (indexB === 0) {\n                return -1;\n            }\n\n            return indexA - indexB;\n        });\n\n        focusableRange[up ? focusableRange.length - 1 : 0].focus();\n    }\n\n    private onFocusIn(e: FocusEvent): void {\n        if (this.focusTrapActive || this.forcingFocusOut) {\n            return;\n        }\n\n        if (this.providedFocusIn) {\n            this.providedFocusIn(e);\n        }\n\n        if (!this.isFocusableContainer) {\n            this.deactivateTabGuards();\n        }\n    }\n\n    private onFocusOut(e: FocusEvent): void {\n        if (this.focusTrapActive) {\n            return;\n        }\n\n        if (this.providedFocusOut) {\n            this.providedFocusOut(e);\n        }\n\n        if (!this.eFocusableElement.contains(e.relatedTarget as HTMLElement)) {\n            this.activateTabGuards();\n        }\n    }\n\n    public onTabKeyDown(e: KeyboardEvent): void {\n        if (this.providedOnTabKeyDown) {\n            this.providedOnTabKeyDown(e);\n            return;\n        }\n\n        if (this.focusTrapActive) {\n            return;\n        }\n        if (e.defaultPrevented) {\n            return;\n        }\n\n        const tabGuardsAreActive = this.tabGuardsAreActive();\n\n        if (tabGuardsAreActive) {\n            this.deactivateTabGuards();\n        }\n\n        const nextRoot = this.getNextFocusableElement(e.shiftKey);\n\n        if (tabGuardsAreActive) {\n            // ensure the tab guards are only re-instated once the event has finished processing, to avoid the browser\n            // tabbing to the tab guard from inside the component\n            setTimeout(() => this.activateTabGuards(), 0);\n        }\n\n        if (!nextRoot) {\n            return;\n        }\n\n        nextRoot.focus();\n        e.preventDefault();\n    }\n\n    public focusInnerElement(fromBottom = false): void {\n        const focusable = this.focusService.findFocusableElements(this.eFocusableElement);\n\n        if (this.tabGuardsAreActive()) {\n            // remove tab guards from this component from list of focusable elements\n            focusable.splice(0, 1);\n            focusable.splice(focusable.length - 1, 1);\n        }\n\n        if (!focusable.length) {\n            return;\n        }\n\n        focusable[fromBottom ? focusable.length - 1 : 0].focus({ preventScroll: true });\n    }\n\n    public getNextFocusableElement(backwards?: boolean): HTMLElement | null {\n        return this.focusService.findNextFocusableElement(this.eFocusableElement, false, backwards);\n    }\n\n    public forceFocusOutOfContainer(up: boolean = false): void {\n        // avoid multiple calls to `forceFocusOutOfContainer`\n        if (this.forcingFocusOut) {\n            return;\n        }\n\n        const tabGuardToFocus = up ? this.eTopGuard : this.eBottomGuard;\n\n        this.activateTabGuards();\n        this.skipTabGuardFocus = true;\n        this.forcingFocusOut = true;\n\n        // this focus will set `this.skipTabGuardFocus` to false;\n        tabGuardToFocus.focus();\n\n        window.setTimeout(() => {\n            this.forcingFocusOut = false;\n            this.activateTabGuards();\n        });\n    }\n\n    public isTabGuard(element: HTMLElement, bottom?: boolean): boolean {\n        return (element === this.eTopGuard && !bottom) || (element === this.eBottomGuard && (bottom ?? true));\n    }\n\n    public setAllowFocus(allowFocus: boolean): void {\n        this.allowFocus = allowFocus;\n    }\n}\n", "import { BeanStub } from '../context/beanStub';\nimport { _setAriaRole } from '../utils/aria';\nimport { _clearElement, _isNodeOrElement } from '../utils/dom';\nimport type { Component } from './component';\nimport type { ITabGuard } from './tabGuardCtrl';\nimport { TabGuardClassNames, TabGuardCtrl } from './tabGuardCtrl';\n\nexport interface TabGuardParams {\n    focusInnerElement?: (fromBottom: boolean) => void;\n    shouldStopEventPropagation?: () => boolean;\n    /**\n     * @return `true` to prevent the default onFocusIn behavior\n     */\n    onFocusIn?: (e: FocusEvent) => void;\n    /**\n     * @return `true` to prevent the default onFocusOut behavior\n     */\n    onFocusOut?: (e: FocusEvent) => void;\n    onTabKeyDown?: (e: KeyboardEvent) => void;\n    handleKeyDown?: (e: KeyboardEvent) => void;\n    /**\n     * Set to true to create a circular focus pattern when keyboard tabbing.\n     */\n    focusTrapActive?: boolean;\n    /**\n     * Set to true to find a focusable element outside of the TabGuards to focus\n     */\n    forceFocusOutWhenTabGuardsAreEmpty?: boolean;\n    isFocusableContainer?: boolean;\n}\n\nexport class TabGuardFeature extends BeanStub {\n    private eTopGuard: HTMLElement;\n    private eBottomGuard: HTMLElement;\n    private eFocusableElement: HTMLElement;\n\n    private tabGuardCtrl: TabGuardCtrl;\n\n    constructor(private readonly comp: Component<any>) {\n        super();\n    }\n\n    public initialiseTabGuard(params: TabGuardParams) {\n        this.eTopGuard = this.createTabGuard('top');\n        this.eBottomGuard = this.createTabGuard('bottom');\n        this.eFocusableElement = this.comp.getFocusableElement();\n\n        const { eTopGuard, eBottomGuard, eFocusableElement } = this;\n\n        const tabGuards = [eTopGuard, eBottomGuard];\n\n        const compProxy: ITabGuard = {\n            setTabIndex: (tabIndex) => {\n                tabGuards.forEach((tabGuard) =>\n                    tabIndex != null\n                        ? tabGuard.setAttribute('tabindex', tabIndex)\n                        : tabGuard.removeAttribute('tabindex')\n                );\n            },\n        };\n\n        this.addTabGuards(eTopGuard, eBottomGuard);\n\n        const {\n            focusTrapActive = false,\n            onFocusIn,\n            onFocusOut,\n            focusInnerElement,\n            handleKeyDown,\n            onTabKeyDown,\n            shouldStopEventPropagation,\n            forceFocusOutWhenTabGuardsAreEmpty,\n            isFocusableContainer,\n        } = params;\n\n        this.tabGuardCtrl = this.createManagedBean(\n            new TabGuardCtrl({\n                comp: compProxy,\n                focusTrapActive,\n                eTopGuard,\n                eBottomGuard,\n                eFocusableElement,\n                onFocusIn,\n                onFocusOut,\n                focusInnerElement,\n                handleKeyDown,\n                onTabKeyDown,\n                shouldStopEventPropagation,\n                forceFocusOutWhenTabGuardsAreEmpty,\n                isFocusableContainer,\n            })\n        );\n    }\n\n    public getTabGuardCtrl(): TabGuardCtrl {\n        return this.tabGuardCtrl;\n    }\n\n    private createTabGuard(side: 'top' | 'bottom'): HTMLElement {\n        const tabGuard = this.gos.getDocument().createElement('div');\n        const cls = side === 'top' ? TabGuardClassNames.TAB_GUARD_TOP : TabGuardClassNames.TAB_GUARD_BOTTOM;\n\n        tabGuard.classList.add(TabGuardClassNames.TAB_GUARD, cls);\n        _setAriaRole(tabGuard, 'presentation');\n\n        return tabGuard;\n    }\n\n    private addTabGuards(topTabGuard: HTMLElement, bottomTabGuard: HTMLElement): void {\n        this.eFocusableElement.insertAdjacentElement('afterbegin', topTabGuard);\n        this.eFocusableElement.insertAdjacentElement('beforeend', bottomTabGuard);\n    }\n\n    public removeAllChildrenExceptTabGuards(): void {\n        const tabGuards: [HTMLElement, HTMLElement] = [this.eTopGuard, this.eBottomGuard];\n        _clearElement(this.comp.getFocusableElement());\n        this.addTabGuards(...tabGuards);\n    }\n\n    public forceFocusOutOfContainer(up: boolean = false): void {\n        this.tabGuardCtrl.forceFocusOutOfContainer(up);\n    }\n\n    public appendChild(\n        appendChild: (newChild: HTMLElement | Component<any>, container?: HTMLElement) => void,\n        newChild: Component | HTMLElement,\n        container?: HTMLElement | undefined\n    ): void {\n        if (!_isNodeOrElement(newChild)) {\n            newChild = newChild.getGui();\n        }\n\n        const { eBottomGuard: bottomTabGuard } = this;\n\n        if (bottomTabGuard) {\n            bottomTabGuard.insertAdjacentElement('beforebegin', newChild as HTMLElement);\n        } else {\n            appendChild(newChild, container);\n        }\n    }\n}\n", "import type { ComponentEvent } from './component';\nimport { Component } from './component';\nimport type { TabGuardParams } from './tabGuardFeature';\nimport { TabGuardFeature } from './tabGuardFeature';\n\nexport class TabGuardComp<TLocalEvent extends string = ComponentEvent> extends Component<TLocalEvent> {\n    protected tabGuardFeature: TabGuardFeature;\n\n    protected initialiseTabGuard(params: TabGuardParams) {\n        this.tabGuardFeature = this.createManagedBean(new TabGuardFeature(this));\n        this.tabGuardFeature.initialiseTabGuard(params);\n    }\n\n    public forceFocusOutOfContainer(up: boolean = false): void {\n        this.tabGuardFeature.forceFocusOutOfContainer(up);\n    }\n\n    public override appendChild(newChild: Component | HTMLElement, container?: HTMLElement | undefined): void {\n        this.tabGuardFeature.appendChild(super.appendChild.bind(this), newChild, container);\n    }\n}\n", "import { KeyCode } from '../constants/keyCode';\nimport type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { CtrlsService } from '../ctrlsService';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { Environment } from '../environment';\nimport type { CssVariablesChanged } from '../events';\nimport type { GridCtrl } from '../gridComp/gridCtrl';\nimport type { IAfterGuiAttachedParams } from '../interfaces/iAfterGuiAttachedParams';\nimport type { PostProcessPopupParams } from '../interfaces/iCallbackParams';\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\nimport type { IRowNode } from '../interfaces/iRowNode';\nimport type { ResizeObserverService } from '../misc/resizeObserverService';\nimport { _setAriaLabel, _setAriaRole } from '../utils/aria';\nimport { _last } from '../utils/array';\nimport { _getAbsoluteHeight, _getAbsoluteWidth, _getElementRectWithOffset } from '../utils/dom';\nimport { _isElementInEventPath, _isStopPropagationForAgGrid } from '../utils/event';\nimport { _warnOnce } from '../utils/function';\nimport { _exists } from '../utils/generic';\nimport { AgPromise } from '../utils/promise';\n\nexport interface PopupPositionParams {\n    ePopup: HTMLElement;\n    column?: AgColumn | null;\n    rowNode?: IRowNode | null;\n    nudgeX?: number;\n    nudgeY?: number;\n    position?: 'over' | 'under';\n    alignSide?: 'left' | 'right';\n    keepWithinBounds?: boolean;\n    skipObserver?: boolean;\n    updatePosition?: () => { x: number; y: number };\n    postProcessCallback?: () => void;\n}\n\nexport interface PopupEventParams {\n    originalMouseEvent?: MouseEvent | Touch | null;\n    mouseEvent?: MouseEvent;\n    touchEvent?: TouchEvent;\n    keyboardEvent?: KeyboardEvent;\n    forceHide?: boolean;\n}\n\nexport interface AgPopup {\n    element: HTMLElement;\n    wrapper: HTMLElement;\n    hideFunc: (params?: PopupEventParams) => void;\n    isAnchored: boolean;\n    instanceId: number;\n    alignedToElement?: HTMLElement;\n    stopAnchoringPromise?: AgPromise<() => void>;\n}\n\nenum DIRECTION {\n    vertical,\n    horizontal,\n}\n\nlet instanceIdSeq = 0;\n\nexport interface AddPopupParams {\n    // if true then listens to background checking for clicks, so that when the background is clicked,\n    // the child is removed again, giving a model look to popups.\n    modal?: boolean;\n    // the element to place in the popup\n    eChild: HTMLElement;\n    // if hitting ESC should close the popup\n    closeOnEsc?: boolean;\n    // a callback that gets called when the popup is closed\n    closedCallback?: (e?: MouseEvent | TouchEvent | KeyboardEvent) => void;\n    // if a clicked caused the popup (eg click a button) then the click that caused it\n    click?: MouseEvent | Touch | null;\n    alwaysOnTop?: boolean;\n    afterGuiAttached?: (params: IAfterGuiAttachedParams) => void;\n    // this gets called after the popup is created. the called could just call positionCallback themselves,\n    // however it needs to be called first before anchorToElement is called, so must provide this callback\n    // here if setting anchorToElement\n    positionCallback?: () => void;\n    // if the underlying anchorToElement moves, the popup will follow it. for example if context menu\n    // showing, and the whole grid moves (browser is scrolled down) then we want the popup to stay above\n    // the cell it appeared on. make sure though if setting, don't anchor to a temporary or moving element,\n    // eg if cellComp element is passed, what happens if row moves (sorting, filtering etc)? best anchor against\n    // the grid, not the cell.\n    anchorToElement?: HTMLElement;\n\n    // an aria label should be added to provided context to screen readers\n    ariaLabel: string;\n}\n\nexport interface AddPopupResult {\n    hideFunc: (params?: PopupEventParams) => void;\n}\n\nconst WAIT_FOR_POPUP_CONTENT_RESIZE: number = 200;\nexport class PopupService extends BeanStub implements NamedBean {\n    beanName = 'popupService' as const;\n\n    private ctrlsService: CtrlsService;\n    private resizeObserverService: ResizeObserverService;\n    private environment: Environment;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.ctrlsService = beans.ctrlsService;\n        this.resizeObserverService = beans.resizeObserverService;\n        this.environment = beans.environment;\n    }\n\n    private gridCtrl: GridCtrl;\n\n    private popupList: AgPopup[] = [];\n\n    public postConstruct(): void {\n        this.ctrlsService.whenReady((p) => {\n            this.gridCtrl = p.gridCtrl;\n        });\n        this.addManagedEventListeners({ gridStylesChanged: this.handleThemeChange.bind(this) });\n    }\n\n    public getPopupParent(): HTMLElement {\n        const ePopupParent = this.gos.get('popupParent');\n\n        if (ePopupParent) {\n            return ePopupParent;\n        }\n\n        return this.gridCtrl.getGui();\n    }\n\n    public positionPopupForMenu(params: { eventSource: HTMLElement; ePopup: HTMLElement }): void {\n        const { eventSource, ePopup } = params;\n\n        const popupIdx = this.getPopupIndex(ePopup);\n\n        if (popupIdx !== -1) {\n            const popup = this.popupList[popupIdx];\n            popup.alignedToElement = eventSource;\n        }\n\n        const sourceRect = eventSource.getBoundingClientRect();\n        const parentRect = this.getParentRect();\n        const y = this.keepXYWithinBounds(ePopup, sourceRect.top - parentRect.top, DIRECTION.vertical);\n\n        const minWidth = ePopup.clientWidth > 0 ? ePopup.clientWidth : 200;\n        ePopup.style.minWidth = `${minWidth}px`;\n        const widthOfParent = parentRect.right - parentRect.left;\n        const maxX = widthOfParent - minWidth;\n\n        // the x position of the popup depends on RTL or LTR. for normal cases, LTR, we put the child popup\n        // to the right, unless it doesn't fit and we then put it to the left. for RTL it's the other way around,\n        // we try place it first to the left, and then if not to the right.\n        let x: number;\n        if (this.gos.get('enableRtl')) {\n            // for RTL, try left first\n            x = xLeftPosition();\n            if (x < 0) {\n                x = xRightPosition();\n                this.setAlignedStyles(ePopup, 'left');\n            }\n            if (x > maxX) {\n                x = 0;\n                this.setAlignedStyles(ePopup, 'right');\n            }\n        } else {\n            // for LTR, try right first\n            x = xRightPosition();\n            if (x > maxX) {\n                x = xLeftPosition();\n                this.setAlignedStyles(ePopup, 'right');\n            }\n            if (x < 0) {\n                x = 0;\n                this.setAlignedStyles(ePopup, 'left');\n            }\n        }\n\n        ePopup.style.left = `${x}px`;\n        ePopup.style.top = `${y}px`;\n\n        function xRightPosition(): number {\n            return sourceRect.right - parentRect.left - 2;\n        }\n\n        function xLeftPosition(): number {\n            return sourceRect.left - parentRect.left - minWidth;\n        }\n    }\n\n    public positionPopupUnderMouseEvent(\n        params: PopupPositionParams & { type: string; mouseEvent: MouseEvent | Touch }\n    ): void {\n        const { ePopup, nudgeX, nudgeY, skipObserver } = params;\n\n        this.positionPopup({\n            ePopup: ePopup,\n            nudgeX,\n            nudgeY,\n            keepWithinBounds: true,\n            skipObserver,\n            updatePosition: () => this.calculatePointerAlign(params.mouseEvent),\n            postProcessCallback: () =>\n                this.callPostProcessPopup(\n                    params.type,\n                    params.ePopup,\n                    null,\n                    params.mouseEvent,\n                    params.column,\n                    params.rowNode\n                ),\n        });\n    }\n\n    private calculatePointerAlign(e: MouseEvent | Touch): { x: number; y: number } {\n        const parentRect = this.getParentRect();\n\n        return {\n            x: e.clientX - parentRect.left,\n            y: e.clientY - parentRect.top,\n        };\n    }\n\n    public positionPopupByComponent(params: PopupPositionParams & { type: string; eventSource: HTMLElement }) {\n        const {\n            ePopup,\n            nudgeX,\n            nudgeY,\n            keepWithinBounds,\n            eventSource,\n            alignSide = 'left',\n            position = 'over',\n            column,\n            rowNode,\n            type,\n        } = params;\n\n        const sourceRect = eventSource.getBoundingClientRect();\n        const parentRect = this.getParentRect() as DOMRect;\n\n        const popupIdx = this.getPopupIndex(ePopup);\n\n        if (popupIdx !== -1) {\n            const popup = this.popupList[popupIdx];\n            popup.alignedToElement = eventSource;\n        }\n\n        const updatePosition = () => {\n            let x = sourceRect.left - parentRect.left;\n            if (alignSide === 'right') {\n                x -= ePopup.offsetWidth - sourceRect.width;\n            }\n\n            let y;\n\n            if (position === 'over') {\n                y = sourceRect.top - parentRect.top;\n                this.setAlignedStyles(ePopup, 'over');\n            } else {\n                this.setAlignedStyles(ePopup, 'under');\n                const alignSide = this.shouldRenderUnderOrAbove(ePopup, sourceRect, parentRect, params.nudgeY || 0);\n                if (alignSide === 'under') {\n                    y = sourceRect.top - parentRect.top + sourceRect.height;\n                } else {\n                    y = sourceRect.top - ePopup.offsetHeight - (nudgeY || 0) * 2 - parentRect.top;\n                }\n            }\n\n            return { x, y };\n        };\n\n        this.positionPopup({\n            ePopup,\n            nudgeX,\n            nudgeY,\n            keepWithinBounds,\n            updatePosition,\n            postProcessCallback: () => this.callPostProcessPopup(type, ePopup, eventSource, null, column, rowNode),\n        });\n    }\n\n    private shouldRenderUnderOrAbove(\n        ePopup: HTMLElement,\n        targetCompRect: DOMRect,\n        parentRect: DOMRect,\n        nudgeY: number\n    ): 'under' | 'above' {\n        const spaceAvailableUnder = parentRect.bottom - targetCompRect.bottom;\n        const spaceAvailableAbove = targetCompRect.top - parentRect.top;\n        const spaceRequired = ePopup.offsetHeight + nudgeY;\n\n        if (spaceAvailableUnder > spaceRequired) {\n            return 'under';\n        }\n\n        if (spaceAvailableAbove > spaceRequired || spaceAvailableAbove > spaceAvailableUnder) {\n            return 'above';\n        }\n\n        return 'under';\n    }\n\n    private setAlignedStyles(ePopup: HTMLElement, positioned: 'right' | 'left' | 'over' | 'above' | 'under' | null) {\n        const popupIdx = this.getPopupIndex(ePopup);\n\n        if (popupIdx === -1) {\n            return;\n        }\n\n        const popup = this.popupList[popupIdx];\n\n        const { alignedToElement } = popup;\n\n        if (!alignedToElement) {\n            return;\n        }\n\n        const positions = ['right', 'left', 'over', 'above', 'under'];\n\n        positions.forEach((position) => {\n            alignedToElement.classList.remove(`ag-has-popup-positioned-${position}`);\n            ePopup.classList.remove(`ag-popup-positioned-${position}`);\n        });\n\n        if (!positioned) {\n            return;\n        }\n\n        alignedToElement.classList.add(`ag-has-popup-positioned-${positioned}`);\n        ePopup.classList.add(`ag-popup-positioned-${positioned}`);\n    }\n\n    private callPostProcessPopup(\n        type: string,\n        ePopup: HTMLElement,\n        eventSource?: HTMLElement | null,\n        mouseEvent?: MouseEvent | Touch | null,\n        column?: AgColumn | null,\n        rowNode?: IRowNode | null\n    ): void {\n        const callback = this.gos.getCallback('postProcessPopup');\n        if (callback) {\n            const params: WithoutGridCommon<PostProcessPopupParams> = {\n                column: column,\n                rowNode: rowNode,\n                ePopup: ePopup,\n                type: type,\n                eventSource: eventSource,\n                mouseEvent: mouseEvent,\n            };\n            callback(params);\n        }\n    }\n\n    public positionPopup(params: PopupPositionParams): void {\n        const { ePopup, keepWithinBounds, nudgeX, nudgeY, skipObserver, updatePosition } = params;\n        const lastSize = { width: 0, height: 0 };\n\n        const updatePopupPosition = (fromResizeObserver: boolean = false) => {\n            let { x, y } = updatePosition!();\n\n            if (\n                fromResizeObserver &&\n                ePopup.clientWidth === lastSize.width &&\n                ePopup.clientHeight === lastSize.height\n            ) {\n                return;\n            }\n\n            lastSize.width = ePopup.clientWidth;\n            lastSize.height = ePopup.clientHeight;\n\n            if (nudgeX) {\n                x += nudgeX;\n            }\n            if (nudgeY) {\n                y += nudgeY;\n            }\n\n            // if popup is overflowing to the bottom, move it up\n            if (keepWithinBounds) {\n                x = this.keepXYWithinBounds(ePopup, x, DIRECTION.horizontal);\n                y = this.keepXYWithinBounds(ePopup, y, DIRECTION.vertical);\n            }\n\n            ePopup.style.left = `${x}px`;\n            ePopup.style.top = `${y}px`;\n\n            if (params.postProcessCallback) {\n                params.postProcessCallback();\n            }\n        };\n\n        updatePopupPosition();\n\n        // Mouse tracking will recalculate positioning when moving, so won't need to recalculate here\n        if (!skipObserver) {\n            // Since rendering popup contents can be asynchronous, use a resize observer to\n            // reposition the popup after initial updates to the size of the contents\n            const resizeObserverDestroyFunc = this.resizeObserverService.observeResize(ePopup, () =>\n                updatePopupPosition(true)\n            );\n            // Only need to reposition when first open, so can clean up after a bit of time\n            setTimeout(() => resizeObserverDestroyFunc(), WAIT_FOR_POPUP_CONTENT_RESIZE);\n        }\n    }\n\n    public getActivePopups(): HTMLElement[] {\n        return this.popupList.map((popup) => popup.element);\n    }\n\n    public getPopupList(): AgPopup[] {\n        return this.popupList;\n    }\n\n    public getParentRect(): {\n        top: number;\n        left: number;\n        right: number;\n        bottom: number;\n    } {\n        // subtract the popup parent borders, because popupParent.getBoundingClientRect\n        // returns the rect outside the borders, but the 0,0 coordinate for absolute\n        // positioning is inside the border, leading the popup to be off by the width\n        // of the border\n        const eDocument = this.gos.getDocument();\n        let popupParent = this.getPopupParent();\n\n        if (popupParent === eDocument.body) {\n            popupParent = eDocument.documentElement;\n        } else if (getComputedStyle(popupParent).position === 'static') {\n            popupParent = popupParent.offsetParent as HTMLElement;\n        }\n\n        return _getElementRectWithOffset(popupParent);\n    }\n\n    private keepXYWithinBounds(ePopup: HTMLElement, position: number, direction: DIRECTION): number {\n        const isVertical = direction === DIRECTION.vertical;\n        const sizeProperty = isVertical ? 'clientHeight' : 'clientWidth';\n        const anchorProperty = isVertical ? 'top' : 'left';\n        const offsetProperty = isVertical ? 'height' : 'width';\n        const scrollPositionProperty = isVertical ? 'scrollTop' : 'scrollLeft';\n\n        const eDocument = this.gos.getDocument();\n        const docElement = eDocument.documentElement;\n        const popupParent = this.getPopupParent();\n        const popupRect = ePopup.getBoundingClientRect();\n        const parentRect = popupParent.getBoundingClientRect();\n        const documentRect = eDocument.documentElement.getBoundingClientRect();\n        const isBody = popupParent === eDocument.body;\n\n        const offsetSize = Math.ceil(popupRect[offsetProperty]);\n        const getSize = isVertical ? _getAbsoluteHeight : _getAbsoluteWidth;\n\n        let sizeOfParent = isBody\n            ? getSize(docElement) + docElement[scrollPositionProperty]\n            : popupParent[sizeProperty];\n\n        if (isBody) {\n            sizeOfParent -= Math.abs(documentRect[anchorProperty] - parentRect[anchorProperty]);\n        }\n\n        const max = sizeOfParent - offsetSize;\n\n        return Math.min(Math.max(position, 0), Math.abs(max));\n    }\n\n    public addPopup(params: AddPopupParams): AddPopupResult {\n        const eDocument = this.gos.getDocument();\n        const { eChild, ariaLabel, alwaysOnTop, positionCallback, anchorToElement } = params;\n\n        if (!eDocument) {\n            _warnOnce('could not find the document, document is empty');\n            return { hideFunc: () => {} };\n        }\n\n        const pos = this.getPopupIndex(eChild);\n\n        if (pos !== -1) {\n            const popup = this.popupList[pos];\n            return { hideFunc: popup.hideFunc };\n        }\n\n        this.initialisePopupPosition(eChild);\n\n        const wrapperEl = this.createPopupWrapper(eChild, ariaLabel, !!alwaysOnTop);\n        const removeListeners = this.addEventListenersToPopup({ ...params, wrapperEl });\n\n        if (positionCallback) {\n            positionCallback();\n        }\n\n        this.addPopupToPopupList(eChild, wrapperEl, removeListeners, anchorToElement);\n\n        return {\n            hideFunc: removeListeners,\n        };\n    }\n\n    private initialisePopupPosition(element: HTMLElement): void {\n        const ePopupParent = this.getPopupParent();\n        const ePopupParentRect = ePopupParent.getBoundingClientRect();\n\n        if (!_exists(element.style.top)) {\n            element.style.top = `${ePopupParentRect.top * -1}px`;\n        }\n        if (!_exists(element.style.left)) {\n            element.style.left = `${ePopupParentRect.left * -1}px`;\n        }\n    }\n\n    private createPopupWrapper(element: HTMLElement, ariaLabel: string, alwaysOnTop: boolean): HTMLElement {\n        const ePopupParent = this.getPopupParent();\n\n        // add env CSS class to child, in case user provided a popup parent, which means\n        // theme class may be missing\n        const eWrapper = document.createElement('div');\n        this.environment.applyThemeClasses(eWrapper);\n\n        eWrapper.classList.add('ag-popup');\n        element.classList.add(this.gos.get('enableRtl') ? 'ag-rtl' : 'ag-ltr', 'ag-popup-child');\n\n        if (!element.hasAttribute('role')) {\n            _setAriaRole(element, 'dialog');\n        }\n\n        _setAriaLabel(element, ariaLabel);\n\n        eWrapper.appendChild(element);\n        ePopupParent.appendChild(eWrapper);\n\n        if (alwaysOnTop) {\n            this.setAlwaysOnTop(element, true);\n        } else {\n            this.bringPopupToFront(element);\n        }\n\n        return eWrapper;\n    }\n\n    private handleThemeChange(e: CssVariablesChanged) {\n        if (e.themeChanged) {\n            for (const popup of this.popupList) {\n                this.environment.applyThemeClasses(popup.wrapper);\n            }\n        }\n    }\n\n    private addEventListenersToPopup(\n        params: AddPopupParams & { wrapperEl: HTMLElement }\n    ): (popupParams?: PopupEventParams) => void {\n        const eDocument = this.gos.getDocument();\n        const ePopupParent = this.getPopupParent();\n\n        const { wrapperEl, eChild: popupEl, closedCallback, afterGuiAttached, closeOnEsc, modal } = params;\n\n        let popupHidden = false;\n\n        const hidePopupOnKeyboardEvent = (event: KeyboardEvent) => {\n            if (!wrapperEl.contains(this.gos.getActiveDomElement())) {\n                return;\n            }\n\n            const key = event.key;\n\n            if (key === KeyCode.ESCAPE && !_isStopPropagationForAgGrid(event)) {\n                removeListeners({ keyboardEvent: event });\n            }\n        };\n\n        const hidePopupOnMouseEvent = (event: MouseEvent) => removeListeners({ mouseEvent: event });\n        const hidePopupOnTouchEvent = (event: TouchEvent) => removeListeners({ touchEvent: event });\n\n        const removeListeners = (popupParams: PopupEventParams = {}) => {\n            const { mouseEvent, touchEvent, keyboardEvent, forceHide } = popupParams;\n            if (\n                !forceHide &&\n                // we don't hide popup if the event was on the child, or any\n                // children of this child\n                (this.isEventFromCurrentPopup({ mouseEvent, touchEvent }, popupEl) ||\n                    // this method should only be called once. the client can have different\n                    // paths, each one wanting to close, so this method may be called multiple times.\n                    popupHidden)\n            ) {\n                return;\n            }\n\n            popupHidden = true;\n\n            ePopupParent.removeChild(wrapperEl);\n\n            eDocument.removeEventListener('keydown', hidePopupOnKeyboardEvent);\n            eDocument.removeEventListener('mousedown', hidePopupOnMouseEvent);\n            eDocument.removeEventListener('touchstart', hidePopupOnTouchEvent);\n            eDocument.removeEventListener('contextmenu', hidePopupOnMouseEvent);\n\n            this.eventService.removeEventListener('dragStarted', hidePopupOnMouseEvent as any);\n\n            if (closedCallback) {\n                closedCallback(mouseEvent || touchEvent || keyboardEvent);\n            }\n\n            this.removePopupFromPopupList(popupEl);\n        };\n\n        if (afterGuiAttached) {\n            afterGuiAttached({ hidePopup: removeListeners });\n        }\n\n        // if we add these listeners now, then the current mouse\n        // click will be included, which we don't want\n        window.setTimeout(() => {\n            if (closeOnEsc) {\n                eDocument.addEventListener('keydown', hidePopupOnKeyboardEvent);\n            }\n\n            if (modal) {\n                eDocument.addEventListener('mousedown', hidePopupOnMouseEvent);\n                this.eventService.addEventListener('dragStarted', hidePopupOnMouseEvent as any);\n                eDocument.addEventListener('touchstart', hidePopupOnTouchEvent);\n                eDocument.addEventListener('contextmenu', hidePopupOnMouseEvent);\n            }\n        }, 0);\n\n        return removeListeners;\n    }\n\n    private addPopupToPopupList(\n        element: HTMLElement,\n        wrapperEl: HTMLElement,\n        removeListeners: (popupParams?: PopupEventParams) => void,\n        anchorToElement?: HTMLElement\n    ): void {\n        this.popupList.push({\n            element: element,\n            wrapper: wrapperEl,\n            hideFunc: removeListeners,\n            instanceId: instanceIdSeq++,\n            isAnchored: !!anchorToElement,\n        });\n\n        if (anchorToElement) {\n            this.setPopupPositionRelatedToElement(element, anchorToElement);\n        }\n    }\n\n    private getPopupIndex(el: HTMLElement): number {\n        return this.popupList.findIndex((p) => p.element === el);\n    }\n\n    public setPopupPositionRelatedToElement(\n        popupEl: HTMLElement,\n        relativeElement?: HTMLElement | null\n    ): AgPromise<() => void> | undefined {\n        const popupIndex = this.getPopupIndex(popupEl);\n\n        if (popupIndex === -1) {\n            return;\n        }\n\n        const popup = this.popupList[popupIndex];\n\n        if (popup.stopAnchoringPromise) {\n            popup.stopAnchoringPromise.then((destroyFunc) => destroyFunc && destroyFunc());\n        }\n\n        popup.stopAnchoringPromise = undefined;\n        popup.isAnchored = false;\n\n        if (!relativeElement) {\n            return;\n        }\n\n        // keeps popup positioned under created, eg if context menu, if user scrolls\n        // using touchpad and the cell moves, it moves the popup to keep it with the cell.\n        const destroyPositionTracker = this.keepPopupPositionedRelativeTo({\n            element: relativeElement,\n            ePopup: popupEl,\n            hidePopup: popup.hideFunc,\n        });\n\n        popup.stopAnchoringPromise = destroyPositionTracker;\n        popup.isAnchored = true;\n\n        return destroyPositionTracker;\n    }\n\n    private removePopupFromPopupList(element: HTMLElement): void {\n        this.setAlignedStyles(element, null);\n        this.setPopupPositionRelatedToElement(element, null);\n\n        this.popupList = this.popupList.filter((p) => p.element !== element);\n    }\n\n    private keepPopupPositionedRelativeTo(params: {\n        ePopup: HTMLElement;\n        element: HTMLElement;\n        hidePopup: (params?: PopupEventParams) => void;\n    }): AgPromise<() => void> {\n        const eParent = this.getPopupParent();\n        const parentRect = eParent.getBoundingClientRect();\n\n        const { element, ePopup } = params;\n\n        const sourceRect = element.getBoundingClientRect();\n        const initialDiffTop = parentRect.top - sourceRect.top;\n        const initialDiffLeft = parentRect.left - sourceRect.left;\n\n        let lastDiffTop = initialDiffTop;\n        let lastDiffLeft = initialDiffLeft;\n\n        const topPx = ePopup.style.top;\n        const top = parseInt(topPx!.substring(0, topPx!.length - 1), 10);\n\n        const leftPx = ePopup.style.left;\n        const left = parseInt(leftPx!.substring(0, leftPx!.length - 1), 10);\n        const fwOverrides = this.getFrameworkOverrides();\n        return new AgPromise<() => void>((resolve) => {\n            fwOverrides.wrapIncoming(() => {\n                fwOverrides\n                    .setInterval(() => {\n                        const pRect = eParent.getBoundingClientRect();\n                        const sRect = element.getBoundingClientRect();\n\n                        const elementNotInDom =\n                            sRect.top == 0 && sRect.left == 0 && sRect.height == 0 && sRect.width == 0;\n                        if (elementNotInDom) {\n                            params.hidePopup();\n                            return;\n                        }\n\n                        const currentDiffTop = pRect.top - sRect.top;\n                        if (currentDiffTop != lastDiffTop) {\n                            const newTop = this.keepXYWithinBounds(\n                                ePopup,\n                                top + initialDiffTop - currentDiffTop,\n                                DIRECTION.vertical\n                            );\n                            ePopup.style.top = `${newTop}px`;\n                        }\n                        lastDiffTop = currentDiffTop;\n\n                        const currentDiffLeft = pRect.left - sRect.left;\n                        if (currentDiffLeft != lastDiffLeft) {\n                            const newLeft = this.keepXYWithinBounds(\n                                ePopup,\n                                left + initialDiffLeft - currentDiffLeft,\n                                DIRECTION.horizontal\n                            );\n                            ePopup.style.left = `${newLeft}px`;\n                        }\n                        lastDiffLeft = currentDiffLeft;\n                    }, 200)\n                    .then((intervalId) => {\n                        const result = () => {\n                            if (intervalId != null) {\n                                window.clearInterval(intervalId);\n                            }\n                        };\n                        resolve(result);\n                    });\n            }, 'popupPositioning');\n        });\n    }\n\n    public hasAnchoredPopup(): boolean {\n        return this.popupList.some((popup) => popup.isAnchored);\n    }\n\n    private isEventFromCurrentPopup(params: PopupEventParams, target: HTMLElement): boolean {\n        const { mouseEvent, touchEvent } = params;\n\n        const event = mouseEvent ? mouseEvent : touchEvent;\n\n        if (!event) {\n            return false;\n        }\n\n        const indexOfThisChild = this.getPopupIndex(target);\n\n        if (indexOfThisChild === -1) {\n            return false;\n        }\n\n        for (let i = indexOfThisChild; i < this.popupList.length; i++) {\n            const popup = this.popupList[i];\n\n            if (_isElementInEventPath(popup.element, event)) {\n                return true;\n            }\n        }\n\n        // if the user did not write their own Custom Element to be rendered as popup\n        // and this component has an additional popup element, they should have the\n        // `ag-custom-component-popup` class to be detected as part of the Custom Component\n        return this.isElementWithinCustomPopup(event.target as HTMLElement);\n    }\n\n    public isElementWithinCustomPopup(el: HTMLElement): boolean {\n        const eDocument = this.gos.getDocument();\n        while (el && el !== eDocument.body) {\n            if (el.classList.contains('ag-custom-component-popup') || el.parentElement === null) {\n                return true;\n            }\n            el = el.parentElement;\n        }\n\n        return false;\n    }\n\n    private getWrapper(ePopup: HTMLElement): HTMLElement | null {\n        while (!ePopup.classList.contains('ag-popup') && ePopup.parentElement) {\n            ePopup = ePopup.parentElement;\n        }\n\n        return ePopup.classList.contains('ag-popup') ? ePopup : null;\n    }\n\n    public setAlwaysOnTop(ePopup: HTMLElement, alwaysOnTop?: boolean): void {\n        const eWrapper = this.getWrapper(ePopup);\n\n        if (!eWrapper) {\n            return;\n        }\n\n        eWrapper.classList.toggle('ag-always-on-top', !!alwaysOnTop);\n\n        if (alwaysOnTop) {\n            this.bringPopupToFront(eWrapper);\n        }\n    }\n\n    /** @return true if moved */\n    public bringPopupToFront(ePopup: HTMLElement): boolean {\n        const parent = this.getPopupParent();\n        const popupList: HTMLElement[] = Array.prototype.slice.call(parent.querySelectorAll('.ag-popup'));\n        const popupLen = popupList.length;\n        const alwaysOnTopList: HTMLElement[] = Array.prototype.slice.call(\n            parent.querySelectorAll('.ag-popup.ag-always-on-top')\n        );\n        const onTopLength = alwaysOnTopList.length;\n        const eWrapper = this.getWrapper(ePopup);\n\n        if (!eWrapper || popupLen <= 1 || !parent.contains(ePopup)) {\n            return false;\n        }\n\n        const pos = popupList.indexOf(eWrapper);\n\n        const innerEls = eWrapper.querySelectorAll('div');\n        const innerElsScrollMap: [HTMLElement, number][] = [];\n\n        innerEls.forEach((el) => {\n            if (el.scrollTop !== 0) {\n                innerElsScrollMap.push([el, el.scrollTop]);\n            }\n        });\n\n        let result = false;\n        if (onTopLength) {\n            const isPopupAlwaysOnTop = eWrapper.classList.contains('ag-always-on-top');\n\n            if (isPopupAlwaysOnTop) {\n                if (pos !== popupLen - 1) {\n                    _last(alwaysOnTopList).insertAdjacentElement('afterend', eWrapper);\n                    result = true;\n                }\n            } else if (pos !== popupLen - onTopLength - 1) {\n                alwaysOnTopList[0].insertAdjacentElement('beforebegin', eWrapper);\n                result = true;\n            }\n        } else if (pos !== popupLen - 1) {\n            _last(popupList).insertAdjacentElement('afterend', eWrapper);\n            result = true;\n        }\n\n        while (innerElsScrollMap.length) {\n            const currentEl = innerElsScrollMap.pop();\n            currentEl![0].scrollTop = currentEl![1];\n        }\n        return result;\n    }\n}\n", "import type { FrameworkOverridesIncomingSource, IFrameworkOverrides } from './interfaces/iFrameworkOverrides';\nimport { _includes } from './utils/array';\nimport { AgPromise } from './utils/promise';\n\nconst PASSIVE_EVENTS = ['touchstart', 'touchend', 'touchmove', 'touchcancel'];\n\n/** The base frameworks, eg React & Angular, override this bean with implementations specific to their requirement. */\nexport class VanillaFrameworkOverrides implements IFrameworkOverrides {\n    public renderingEngine: 'vanilla' | 'react' = 'vanilla';\n\n    constructor(private frameworkName: 'javascript' | 'angular' | 'react' | 'vue' | 'solid' = 'javascript') {}\n\n    public setInterval(action: any, timeout?: any): AgPromise<number> {\n        return new AgPromise((resolve) => {\n            resolve(window.setInterval(action, timeout));\n        });\n    }\n\n    // for Vanilla JS, we just add the event to the element\n    public addEventListener(\n        element: HTMLElement,\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        useCapture?: boolean\n    ): void {\n        const isPassive = _includes(PASSIVE_EVENTS, type);\n        element.addEventListener(type, listener, { capture: !!useCapture, passive: isPassive });\n    }\n\n    wrapIncoming: <T>(callback: () => T, source?: FrameworkOverridesIncomingSource) => T = (callback) => callback();\n    wrapOutgoing: <T>(callback: () => T) => T = (callback) => callback();\n    get shouldWrapOutgoing() {\n        return false;\n    }\n\n    frameworkComponent(name: string): any {\n        return null;\n    }\n\n    isFrameworkComponent(comp: any): boolean {\n        return false;\n    }\n\n    getDocLink(path?: string): string {\n        const framework = this.frameworkName === 'solid' ? 'react' : this.frameworkName;\n        return `https://www.ag-grid.com/${framework}-data-grid${path ? `/${path}` : ''}`;\n    }\n}\n", "import type { VisibleColsService } from './columns/visibleColsService';\nimport { KeyCode } from './constants/keyCode';\nimport type { NamedBean } from './context/bean';\nimport { BeanStub } from './context/beanStub';\nimport type { BeanCollection } from './context/context';\nimport type { AgColumn } from './entities/agColumn';\nimport type { CellPosition } from './entities/cellPositionUtils';\nimport type { RowNode } from './entities/rowNode';\nimport type { RowPosition } from './entities/rowPositionUtils';\nimport type { IRowModel } from './interfaces/iRowModel';\nimport type { PageBoundsService } from './pagination/pageBoundsService';\nimport type { PaginationService } from './pagination/paginationService';\nimport type { PinnedRowModel } from './pinnedRowModel/pinnedRowModel';\nimport type { RowCtrl } from './rendering/row/rowCtrl';\nimport type { RowRenderer } from './rendering/rowRenderer';\nimport { _last } from './utils/array';\nimport { _warnOnce } from './utils/function';\nimport { _missing } from './utils/generic';\n\nexport class CellNavigationService extends BeanStub implements NamedBean {\n    beanName = 'cellNavigationService' as const;\n\n    private visibleColsService: VisibleColsService;\n    private rowModel: IRowModel;\n    private rowRenderer: RowRenderer;\n    private pinnedRowModel: PinnedRowModel;\n    private paginationService?: PaginationService;\n    private pageBoundsService: PageBoundsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.visibleColsService = beans.visibleColsService;\n        this.rowModel = beans.rowModel;\n        this.rowRenderer = beans.rowRenderer;\n        this.pinnedRowModel = beans.pinnedRowModel;\n        this.paginationService = beans.paginationService;\n        this.pageBoundsService = beans.pageBoundsService;\n    }\n\n    // returns null if no cell to focus on, ie at the end of the grid\n    public getNextCellToFocus(\n        key: string,\n        focusedCell: CellPosition,\n        ctrlPressed: boolean = false\n    ): CellPosition | null {\n        if (ctrlPressed) {\n            return this.getNextCellToFocusWithCtrlPressed(key, focusedCell);\n        }\n\n        return this.getNextCellToFocusWithoutCtrlPressed(key, focusedCell);\n    }\n\n    private getNextCellToFocusWithCtrlPressed(key: string, focusedCell: CellPosition): CellPosition | null {\n        const upKey = key === KeyCode.UP;\n        const downKey = key === KeyCode.DOWN;\n        const leftKey = key === KeyCode.LEFT;\n\n        let column: AgColumn;\n        let rowIndex: number;\n\n        if (upKey || downKey) {\n            rowIndex = upKey ? this.pageBoundsService.getFirstRow() : this.pageBoundsService.getLastRow();\n            column = focusedCell.column as AgColumn;\n        } else {\n            const allColumns = this.visibleColsService.getAllCols();\n            const isRtl = this.gos.get('enableRtl');\n            rowIndex = focusedCell.rowIndex;\n            column = leftKey !== isRtl ? allColumns[0] : _last(allColumns);\n        }\n\n        return {\n            rowIndex,\n            rowPinned: null,\n            column,\n        };\n    }\n\n    private getNextCellToFocusWithoutCtrlPressed(key: string, focusedCell: CellPosition): CellPosition | null {\n        // starting with the provided cell, we keep moving until we find a cell we can\n        // focus on.\n        let pointer: CellPosition | null = focusedCell;\n        let finished = false;\n\n        // finished will be true when either:\n        // a) cell found that we can focus on\n        // b) run out of cells (ie the method returns null)\n        while (!finished) {\n            switch (key) {\n                case KeyCode.UP:\n                    pointer = this.getCellAbove(pointer);\n                    break;\n                case KeyCode.DOWN:\n                    pointer = this.getCellBelow(pointer);\n                    break;\n                case KeyCode.RIGHT:\n                    if (this.gos.get('enableRtl')) {\n                        pointer = this.getCellToLeft(pointer);\n                    } else {\n                        pointer = this.getCellToRight(pointer);\n                    }\n                    break;\n                case KeyCode.LEFT:\n                    if (this.gos.get('enableRtl')) {\n                        pointer = this.getCellToRight(pointer);\n                    } else {\n                        pointer = this.getCellToLeft(pointer);\n                    }\n                    break;\n                default:\n                    pointer = null;\n                    _warnOnce('unknown key for navigation ', key);\n                    break;\n            }\n\n            if (pointer) {\n                finished = this.isCellGoodToFocusOn(pointer);\n            } else {\n                finished = true;\n            }\n        }\n\n        return pointer;\n    }\n\n    private isCellGoodToFocusOn(gridCell: CellPosition): boolean {\n        const column = gridCell.column as AgColumn;\n        let rowNode: RowNode | undefined;\n\n        switch (gridCell.rowPinned) {\n            case 'top':\n                rowNode = this.pinnedRowModel.getPinnedTopRow(gridCell.rowIndex);\n                break;\n            case 'bottom':\n                rowNode = this.pinnedRowModel.getPinnedBottomRow(gridCell.rowIndex);\n                break;\n            default:\n                rowNode = this.rowModel.getRow(gridCell.rowIndex);\n                break;\n        }\n\n        if (!rowNode) {\n            return false;\n        }\n\n        const suppressNavigable = column.isSuppressNavigable(rowNode);\n        return !suppressNavigable;\n    }\n\n    private getCellToLeft(lastCell: CellPosition | null): CellPosition | null {\n        if (!lastCell) {\n            return null;\n        }\n\n        const colToLeft = this.visibleColsService.getColBefore(lastCell.column as AgColumn);\n        if (!colToLeft) {\n            return null;\n        }\n\n        return {\n            rowIndex: lastCell.rowIndex,\n            column: colToLeft,\n            rowPinned: lastCell.rowPinned,\n        } as CellPosition;\n    }\n\n    private getCellToRight(lastCell: CellPosition | null): CellPosition | null {\n        if (!lastCell) {\n            return null;\n        }\n\n        const colToRight = this.visibleColsService.getColAfter(lastCell.column as AgColumn);\n        // if already on right, do nothing\n        if (!colToRight) {\n            return null;\n        }\n\n        return {\n            rowIndex: lastCell.rowIndex,\n            column: colToRight,\n            rowPinned: lastCell.rowPinned,\n        } as CellPosition;\n    }\n\n    public getRowBelow(rowPosition: RowPosition): RowPosition | null {\n        // if already on top row, do nothing\n        const index = rowPosition.rowIndex;\n        const pinned = rowPosition.rowPinned;\n        if (this.isLastRowInContainer(rowPosition)) {\n            switch (pinned) {\n                case 'bottom':\n                    // never any rows after pinned bottom\n                    return null;\n                case 'top':\n                    // if on last row of pinned top, then next row is main body (if rows exist),\n                    // otherwise it's the pinned bottom\n                    if (this.rowModel.isRowsToRender()) {\n                        return { rowIndex: this.pageBoundsService.getFirstRow(), rowPinned: null } as RowPosition;\n                    }\n\n                    if (this.pinnedRowModel.isRowsToRender('bottom')) {\n                        return { rowIndex: 0, rowPinned: 'bottom' } as RowPosition;\n                    }\n\n                    return null;\n                default:\n                    // if in the main body, then try pinned bottom, otherwise return nothing\n                    if (this.pinnedRowModel.isRowsToRender('bottom')) {\n                        return { rowIndex: 0, rowPinned: 'bottom' } as RowPosition;\n                    }\n                    return null;\n            }\n        }\n\n        const rowNode = this.rowModel.getRow(rowPosition.rowIndex);\n        const nextStickyPosition = this.getNextStickyPosition(rowNode);\n\n        if (nextStickyPosition) {\n            return nextStickyPosition;\n        }\n\n        return { rowIndex: index + 1, rowPinned: pinned } as RowPosition;\n    }\n\n    private getNextStickyPosition(rowNode?: RowNode, up?: boolean): RowPosition | undefined {\n        if (!this.gos.isGroupRowsSticky() || !rowNode || !rowNode.sticky) {\n            return;\n        }\n\n        const isTopCtrls = this.rowRenderer\n            .getStickyTopRowCtrls()\n            .some((ctrl) => ctrl.getRowNode().rowIndex === rowNode.rowIndex);\n\n        let stickyRowCtrls: RowCtrl[] = [];\n        if (isTopCtrls) {\n            stickyRowCtrls = [...this.rowRenderer.getStickyTopRowCtrls()].sort(\n                (a, b) => a.getRowNode().rowIndex! - b.getRowNode().rowIndex!\n            );\n        } else {\n            stickyRowCtrls = [...this.rowRenderer.getStickyBottomRowCtrls()].sort(\n                (a, b) => b.getRowNode().rowIndex! - a.getRowNode().rowIndex!\n            );\n        }\n\n        const diff = up ? -1 : 1;\n        const idx = stickyRowCtrls.findIndex((ctrl) => ctrl.getRowNode().rowIndex === rowNode.rowIndex);\n        const nextCtrl = stickyRowCtrls[idx + diff];\n\n        if (nextCtrl) {\n            return { rowIndex: nextCtrl.getRowNode().rowIndex!, rowPinned: null };\n        }\n    }\n\n    private getCellBelow(lastCell: CellPosition | null): CellPosition | null {\n        if (!lastCell) {\n            return null;\n        }\n\n        const rowBelow = this.getRowBelow(lastCell);\n        if (rowBelow) {\n            return {\n                rowIndex: rowBelow.rowIndex,\n                column: lastCell.column,\n                rowPinned: rowBelow.rowPinned,\n            } as CellPosition;\n        }\n\n        return null;\n    }\n\n    private isLastRowInContainer(rowPosition: RowPosition): boolean {\n        const pinned = rowPosition.rowPinned;\n        const index = rowPosition.rowIndex;\n\n        if (pinned === 'top') {\n            const lastTopIndex = this.pinnedRowModel.getPinnedTopRowNodes().length - 1;\n            return lastTopIndex <= index;\n        }\n\n        if (pinned === 'bottom') {\n            const lastBottomIndex = this.pinnedRowModel.getPinnedBottomRowNodes().length - 1;\n            return lastBottomIndex <= index;\n        }\n\n        const lastBodyIndex = this.pageBoundsService.getLastRow();\n        return lastBodyIndex <= index;\n    }\n\n    public getRowAbove(rowPosition: RowPosition): RowPosition | null {\n        // if already on top row, do nothing\n        const index = rowPosition.rowIndex;\n        const pinned = rowPosition.rowPinned;\n        const isFirstRow = pinned ? index === 0 : index === this.pageBoundsService.getFirstRow();\n\n        // if already on top row, do nothing\n        if (isFirstRow) {\n            if (pinned === 'top') {\n                return null;\n            }\n\n            if (!pinned) {\n                if (this.pinnedRowModel.isRowsToRender('top')) {\n                    return this.getLastFloatingTopRow();\n                }\n                return null;\n            }\n\n            // last floating bottom\n            if (this.rowModel.isRowsToRender()) {\n                return this.getLastBodyCell();\n            }\n\n            if (this.pinnedRowModel.isRowsToRender('top')) {\n                return this.getLastFloatingTopRow();\n            }\n\n            return null;\n        }\n\n        const rowNode = this.rowModel.getRow(rowPosition.rowIndex);\n        const nextStickyPosition = this.getNextStickyPosition(rowNode, true);\n\n        if (nextStickyPosition) {\n            return nextStickyPosition;\n        }\n\n        return { rowIndex: index - 1, rowPinned: pinned } as RowPosition;\n    }\n\n    private getCellAbove(lastCell: CellPosition | null): CellPosition | null {\n        if (!lastCell) {\n            return null;\n        }\n\n        const rowAbove = this.getRowAbove({ rowIndex: lastCell.rowIndex, rowPinned: lastCell.rowPinned });\n\n        if (rowAbove) {\n            return {\n                rowIndex: rowAbove.rowIndex,\n                column: lastCell.column,\n                rowPinned: rowAbove.rowPinned,\n            } as CellPosition;\n        }\n\n        return null;\n    }\n\n    private getLastBodyCell(): RowPosition {\n        const lastBodyRow = this.pageBoundsService.getLastRow();\n\n        return { rowIndex: lastBodyRow, rowPinned: null } as RowPosition;\n    }\n\n    private getLastFloatingTopRow(): RowPosition {\n        const lastFloatingRow = this.pinnedRowModel.getPinnedTopRowNodes().length - 1;\n\n        return { rowIndex: lastFloatingRow, rowPinned: 'top' } as RowPosition;\n    }\n\n    public getNextTabbedCell(gridCell: CellPosition, backwards: boolean): CellPosition | null {\n        if (backwards) {\n            return this.getNextTabbedCellBackwards(gridCell);\n        }\n\n        return this.getNextTabbedCellForwards(gridCell);\n    }\n\n    public getNextTabbedCellForwards(gridCell: CellPosition): CellPosition | null {\n        const displayedColumns = this.visibleColsService.getAllCols();\n\n        let newRowIndex: number | null = gridCell.rowIndex;\n        let newFloating: string | null | undefined = gridCell.rowPinned;\n\n        // move along to the next cell\n        let newColumn = this.visibleColsService.getColAfter(gridCell.column as AgColumn);\n\n        // check if end of the row, and if so, go forward a row\n        if (!newColumn) {\n            newColumn = displayedColumns[0];\n\n            const rowBelow = this.getRowBelow(gridCell);\n            if (_missing(rowBelow)) {\n                return null;\n            }\n\n            // If we are tabbing and there is a paging panel present, tabbing should go\n            // to the paging panel instead of loading the next page.\n            if (!rowBelow.rowPinned && !(this.paginationService?.isRowInPage(rowBelow) ?? true)) {\n                return null;\n            }\n\n            newRowIndex = rowBelow ? rowBelow.rowIndex : null;\n            newFloating = rowBelow ? rowBelow.rowPinned : null;\n        }\n\n        return { rowIndex: newRowIndex, column: newColumn, rowPinned: newFloating } as CellPosition;\n    }\n\n    public getNextTabbedCellBackwards(gridCell: CellPosition): CellPosition | null {\n        const displayedColumns = this.visibleColsService.getAllCols();\n\n        let newRowIndex: number | null = gridCell.rowIndex;\n        let newFloating: string | null | undefined = gridCell.rowPinned;\n\n        // move along to the next cell\n        let newColumn = this.visibleColsService.getColBefore(gridCell.column as AgColumn);\n\n        // check if end of the row, and if so, go forward a row\n        if (!newColumn) {\n            newColumn = _last(displayedColumns);\n\n            const rowAbove = this.getRowAbove({ rowIndex: gridCell.rowIndex, rowPinned: gridCell.rowPinned });\n\n            if (_missing(rowAbove)) {\n                return null;\n            }\n\n            // If we are tabbing and there is a paging panel present, tabbing should go\n            // to the paging panel instead of loading the next page.\n            if (!rowAbove.rowPinned && !(this.paginationService?.isRowInPage(rowAbove) ?? true)) {\n                return null;\n            }\n\n            newRowIndex = rowAbove ? rowAbove.rowIndex : null;\n            newFloating = rowAbove ? rowAbove.rowPinned : null;\n        }\n\n        return { rowIndex: newRowIndex, column: newColumn, rowPinned: newFloating } as CellPosition;\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { AgEventType } from '../eventTypes';\nimport type { AgEvent } from '../events';\nimport { _warnOnce } from '../utils/function';\nimport type { ApiFunction, ApiFunctionName } from './iApiFunction';\n\nfunction dispatchEvent(beans: BeanCollection, event: AgEvent<AgEventType>): void {\n    beans.eventService.dispatchEvent(event);\n}\n\nexport class ApiFunctionService extends BeanStub implements NamedBean {\n    beanName = 'apiFunctionService' as const;\n\n    private beans: BeanCollection;\n    private functions: { [key in ApiFunctionName]?: (beans: BeanCollection, ...args: any[]) => any } = {\n        // this is used by frameworks\n        // also used by aligned grids to identify a grid api instance\n        dispatchEvent,\n    };\n    private isDestroyed = false;\n    private preDestroyLink: string;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.beans = beans;\n    }\n\n    public postConstruct(): void {\n        this.preDestroyLink = this.frameworkOverrides.getDocLink('grid-lifecycle/#grid-pre-destroyed');\n    }\n\n    public callFunction(functionName: ApiFunctionName, args: any[]): any {\n        const func = this.functions[functionName];\n\n        if (func) {\n            return func.apply(func, [this.beans, ...args]);\n        }\n\n        if (this.isDestroyed) {\n            return this.destroyedHandler(functionName);\n        }\n        if (this.isFrameworkMethod(functionName)) {\n            return undefined;\n        }\n        this.beans.validationService?.warnMissingApiFunction(functionName);\n        return undefined;\n    }\n\n    public addFunction<TFunctionName extends ApiFunctionName>(\n        functionName: TFunctionName,\n        func: ApiFunction<TFunctionName>\n    ): void {\n        const { validationService } = this.beans;\n        if (validationService) {\n            func = validationService.validateApiFunction(functionName, func);\n        }\n        this.functions[functionName] = func;\n    }\n\n    public override destroy(): void {\n        this.functions = {};\n        this.isDestroyed = true;\n        super.destroy();\n    }\n\n    private destroyedHandler(functionName: ApiFunctionName): any {\n        if (functionName === 'isDestroyed') {\n            return true;\n        }\n        if (functionName === 'destroy') {\n            return;\n        }\n        _warnOnce(\n            `Grid API function ${functionName}() cannot be called as the grid has been destroyed.\\n` +\n                `Either clear local references to the grid api, when it is destroyed, or check gridApi.isDestroyed() to avoid calling methods against a destroyed grid.\\n` +\n                `To run logic when the grid is about to be destroyed use the gridPreDestroy event. See: ${this.preDestroyLink}`\n        );\n        return;\n    }\n\n    private isFrameworkMethod(functionName: string): boolean {\n        return ['preWireBeans', 'wireBeans', 'preConstruct', 'postConstruct'].includes(functionName);\n    }\n}\n", "import type { Context } from '../context/context';\nimport type { GridApi } from './gridApi';\n\nfunction createApi(context: Context): GridApi {\n    const apiFunctionService = context.getBean('apiFunctionService');\n    return new Proxy(apiFunctionService, {\n        get(target, prop) {\n            return (...args: any[]) => target.callFunction(prop as any, args);\n        },\n    }) as any;\n}\n\nexport function createApiProxy(context: Context): { beanName: 'gridApi'; bean: GridApi } {\n    return {\n        beanName: 'gridApi',\n        bean: createApi(context),\n    };\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { AgProvidedColumnGroup } from '../entities/agProvidedColumnGroup';\nimport type { ColDef, ColGroupDef } from '../entities/colDef';\nimport { _deepCloneDefinition } from '../utils/object';\n\nexport class ColumnDefFactory extends BeanStub implements NamedBean {\n    beanName = 'columnDefFactory' as const;\n\n    public buildColumnDefs(\n        cols: AgColumn[],\n        rowGroupColumns: AgColumn[],\n        pivotColumns: AgColumn[]\n    ): (ColDef | ColGroupDef)[] {\n        const res: (ColDef | ColGroupDef)[] = [];\n\n        const colGroupDefs: { [id: string]: ColGroupDef } = {};\n\n        cols.forEach((col: AgColumn) => {\n            const colDef = this.createDefFromColumn(col, rowGroupColumns, pivotColumns);\n\n            let addToResult = true;\n\n            let childDef: ColDef | ColGroupDef = colDef;\n\n            let pointer = col.getOriginalParent();\n            let lastPointer: AgProvidedColumnGroup | null = null;\n            while (pointer) {\n                let parentDef: ColGroupDef | null | undefined = null;\n\n                // we don't include padding groups, as the column groups provided\n                // by application didn't have these. the whole point of padding groups\n                // is to balance the column tree that the user provided.\n                if (pointer.isPadding()) {\n                    pointer = pointer.getOriginalParent();\n                    continue;\n                }\n\n                // if colDef for this group already exists, use it\n                const existingParentDef = colGroupDefs[pointer.getGroupId()];\n                if (existingParentDef) {\n                    existingParentDef.children.push(childDef);\n                    // if we added to result, it would be the second time we did it\n                    addToResult = false;\n                    // we don't want to continue up the tree, as it has already been\n                    // done for this group\n                    break;\n                }\n\n                parentDef = this.createDefFromGroup(pointer);\n\n                if (parentDef) {\n                    parentDef.children = [childDef];\n                    colGroupDefs[parentDef.groupId!] = parentDef;\n                    childDef = parentDef;\n                    pointer = pointer.getOriginalParent();\n                }\n\n                if (pointer != null && lastPointer === pointer) {\n                    addToResult = false;\n                    break;\n                }\n                // Ensure we don't get stuck in an infinite loop\n                lastPointer = pointer;\n            }\n\n            if (addToResult) {\n                res.push(childDef);\n            }\n        });\n\n        return res;\n    }\n\n    private createDefFromGroup(group: AgProvidedColumnGroup): ColGroupDef | null | undefined {\n        const defCloned = _deepCloneDefinition(group.getColGroupDef(), ['children']);\n\n        if (defCloned) {\n            defCloned.groupId = group.getGroupId();\n        }\n\n        return defCloned;\n    }\n\n    private createDefFromColumn(col: AgColumn, rowGroupColumns: AgColumn[], pivotColumns: AgColumn[]): ColDef {\n        const colDefCloned = _deepCloneDefinition(col.getColDef())!;\n\n        colDefCloned.colId = col.getColId();\n\n        colDefCloned.width = col.getActualWidth();\n        colDefCloned.rowGroup = col.isRowGroupActive();\n        colDefCloned.rowGroupIndex = col.isRowGroupActive() ? rowGroupColumns.indexOf(col) : null;\n        colDefCloned.pivot = col.isPivotActive();\n        colDefCloned.pivotIndex = col.isPivotActive() ? pivotColumns.indexOf(col) : null;\n        colDefCloned.aggFunc = col.isValueActive() ? col.getAggFunc() : null;\n        colDefCloned.hide = col.isVisible() ? undefined : true;\n        colDefCloned.pinned = col.isPinned() ? col.getPinned() : null;\n\n        colDefCloned.sort = col.getSort() ? col.getSort() : null;\n        colDefCloned.sortIndex = col.getSortIndex() != null ? col.getSortIndex() : null;\n\n        return colDefCloned;\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { AgProvidedColumnGroup } from '../entities/agProvidedColumnGroup';\nimport type { AgEventType } from '../eventTypes';\nimport type {\n    ColumnEvent,\n    ColumnEventType,\n    ColumnEverythingChangedEvent,\n    ColumnGroupOpenedEvent,\n    ColumnMovedEvent,\n    ColumnPinnedEvent,\n    ColumnPivotModeChangedEvent,\n    ColumnResizedEvent,\n    ColumnRowGroupChangedEvent,\n    ColumnVisibleEvent,\n    DisplayedColumnsChangedEvent,\n    GridColumnsChangedEvent,\n    NewColumnsLoadedEvent,\n    VirtualColumnsChangedEvent,\n} from '../events';\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\n\n/* \nCreated this class to:\na) common methods, eg some methods here called by ColumnModel and also ColumnApplyStateService\nb) to remove plumbing code from ColumnModel, to help make ColumnModel more maintainable\n*/\nexport class ColumnEventDispatcher extends BeanStub implements NamedBean {\n    beanName = 'columnEventDispatcher' as const;\n\n    public visibleCols(): void {\n        const event: WithoutGridCommon<DisplayedColumnsChangedEvent> = {\n            type: 'displayedColumnsChanged',\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public gridColumns(): void {\n        const event: WithoutGridCommon<GridColumnsChangedEvent> = {\n            type: 'gridColumnsChanged',\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public headerHeight(col: AgColumn): void {\n        const event: WithoutGridCommon<ColumnEvent> = {\n            type: 'columnHeaderHeightChanged',\n            column: col,\n            columns: [col],\n            source: 'autosizeColumnHeaderHeight',\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public groupOpened(impactedGroups: AgProvidedColumnGroup[]): void {\n        const event: WithoutGridCommon<ColumnGroupOpenedEvent> = {\n            type: 'columnGroupOpened',\n            columnGroup: impactedGroups.length === 1 ? impactedGroups[0] : undefined,\n            columnGroups: impactedGroups,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public rowGroupChanged(impactedColumns: AgColumn[], source: ColumnEventType): void {\n        const event: WithoutGridCommon<ColumnRowGroupChangedEvent> = {\n            type: 'columnRowGroupChanged',\n            columns: impactedColumns,\n            column: impactedColumns.length === 1 ? impactedColumns[0] : null,\n            source: source,\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public genericColumnEvent(eventType: string, masterList: AgColumn[], source: ColumnEventType): void {\n        const event: WithoutGridCommon<ColumnEvent> = {\n            type: eventType,\n            columns: masterList,\n            column: masterList.length === 1 ? masterList[0] : null,\n            source: source,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public pivotModeChanged(): void {\n        const event: WithoutGridCommon<ColumnPivotModeChangedEvent> = {\n            type: 'columnPivotModeChanged',\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public virtualColumnsChanged(afterScroll: boolean): void {\n        const event: WithoutGridCommon<VirtualColumnsChangedEvent> = {\n            type: 'virtualColumnsChanged',\n            afterScroll,\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public newColumnsLoaded(source: ColumnEventType): void {\n        const newColumnsLoadedEvent: WithoutGridCommon<NewColumnsLoadedEvent> = {\n            type: 'newColumnsLoaded',\n            source,\n        };\n        this.eventService.dispatchEvent(newColumnsLoadedEvent);\n    }\n\n    public everythingChanged(source: ColumnEventType): void {\n        const eventEverythingChanged: WithoutGridCommon<ColumnEverythingChangedEvent> = {\n            type: 'columnEverythingChanged',\n            source,\n        };\n        this.eventService.dispatchEvent(eventEverythingChanged);\n    }\n\n    public columnMoved(params: {\n        movedColumns: AgColumn[];\n        source: ColumnEventType;\n        toIndex?: number;\n        finished: boolean;\n    }): void {\n        const { movedColumns, source, toIndex, finished } = params;\n\n        const event: WithoutGridCommon<ColumnMovedEvent> = {\n            type: 'columnMoved',\n            columns: movedColumns,\n            column: movedColumns && movedColumns.length === 1 ? movedColumns[0] : null,\n            toIndex,\n            finished,\n            source,\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public columnPinned(changedColumns: AgColumn[], source: ColumnEventType) {\n        if (!changedColumns.length) {\n            return;\n        }\n\n        // if just one column, we use this, otherwise we don't include the col\n        const column: AgColumn | null = changedColumns.length === 1 ? changedColumns[0] : null;\n\n        // only include visible if it's common in all columns\n        const pinned = this.getCommonValue(changedColumns, (col) => col.getPinned());\n\n        const event: WithoutGridCommon<ColumnPinnedEvent> = {\n            type: 'columnPinned',\n            // mistake in typing, 'undefined' should be allowed, as 'null' means 'not pinned'\n            pinned: pinned != null ? pinned : null,\n            columns: changedColumns,\n            column,\n            source: source,\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public columnVisible(changedColumns: AgColumn[], source: ColumnEventType) {\n        if (!changedColumns.length) {\n            return;\n        }\n\n        // if just one column, we use this, otherwise we don't include the col\n        const column: AgColumn | null = changedColumns.length === 1 ? changedColumns[0] : null;\n\n        // only include visible if it's common in all columns\n        const visible = this.getCommonValue(changedColumns, (col) => col.isVisible());\n\n        const event: WithoutGridCommon<ColumnVisibleEvent> = {\n            type: 'columnVisible',\n            visible,\n            columns: changedColumns,\n            column,\n            source: source,\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    private getCommonValue<T>(cols: AgColumn[], valueGetter: (col: AgColumn) => T): T | undefined {\n        if (!cols || cols.length == 0) {\n            return undefined;\n        }\n\n        // compare each value to the first value. if nothing differs, then value is common so return it.\n        const firstValue = valueGetter(cols[0]);\n        for (let i = 1; i < cols.length; i++) {\n            if (firstValue !== valueGetter(cols[i])) {\n                // values differ, no common value\n                return undefined;\n            }\n        }\n\n        return firstValue;\n    }\n\n    public columnChanged<T extends AgEventType>(type: T, columns: AgColumn[], source: ColumnEventType): void {\n        const event: WithoutGridCommon<ColumnEvent<T>> = {\n            type: type,\n            columns: columns,\n            column: columns && columns.length == 1 ? columns[0] : null,\n            source: source,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public columnResized(\n        columns: AgColumn[] | null,\n        finished: boolean,\n        source: ColumnEventType,\n        flexColumns: AgColumn[] | null = null\n    ): void {\n        if (columns && columns.length) {\n            const event: WithoutGridCommon<ColumnResizedEvent> = {\n                type: 'columnResized',\n                columns: columns,\n                column: columns.length === 1 ? columns[0] : null,\n                flexColumns: flexColumns,\n                finished: finished,\n                source: source,\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { AgColumn } from '../entities/agColumn';\nimport { _missing } from '../utils/generic';\nimport type { ColumnState } from './columnApplyStateService';\nimport type { ColumnModel } from './columnModel';\nimport type { FuncColsService } from './funcColsService';\n\nexport class ColumnGetStateService extends BeanStub implements NamedBean {\n    beanName = 'columnGetStateService' as const;\n\n    private columnModel: ColumnModel;\n    private funcColsService: FuncColsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.columnModel = beans.columnModel;\n        this.funcColsService = beans.funcColsService;\n    }\n\n    public getColumnState(): ColumnState[] {\n        const primaryCols = this.columnModel.getColDefCols();\n\n        if (_missing(primaryCols) || !this.columnModel.isAlive()) {\n            return [];\n        }\n\n        const colsForState = this.columnModel.getAllCols();\n        const res: ColumnState[] = colsForState.map(this.createStateItemFromColumn.bind(this));\n\n        this.orderColumnStateList(res);\n\n        return res;\n    }\n\n    private createStateItemFromColumn(column: AgColumn): ColumnState {\n        const rowGorupColumns = this.funcColsService.getRowGroupColumns();\n        const pivotColumns = this.funcColsService.getPivotColumns();\n\n        const rowGroupIndex = column.isRowGroupActive() ? rowGorupColumns.indexOf(column) : null;\n        const pivotIndex = column.isPivotActive() ? pivotColumns.indexOf(column) : null;\n\n        const aggFunc = column.isValueActive() ? column.getAggFunc() : null;\n        const sort = column.getSort() != null ? column.getSort() : null;\n        const sortIndex = column.getSortIndex() != null ? column.getSortIndex() : null;\n        const flex = column.getFlex() != null && column.getFlex() > 0 ? column.getFlex() : null;\n\n        const res: ColumnState = {\n            colId: column.getColId(),\n            width: column.getActualWidth(),\n            hide: !column.isVisible(),\n            pinned: column.getPinned(),\n            sort,\n            sortIndex,\n            aggFunc,\n            rowGroup: column.isRowGroupActive(),\n            rowGroupIndex,\n            pivot: column.isPivotActive(),\n            pivotIndex: pivotIndex,\n            flex,\n        };\n\n        return res;\n    }\n\n    private orderColumnStateList(columnStateList: any[]): void {\n        const gridColumns = this.columnModel.getCols();\n        // for fast looking, store the index of each column\n        const colIdToGridIndexMap = new Map<string, number>(gridColumns.map((col, index) => [col.getColId(), index]));\n\n        columnStateList.sort((itemA: any, itemB: any) => {\n            const posA = colIdToGridIndexMap.has(itemA.colId) ? colIdToGridIndexMap.get(itemA.colId) : -1;\n            const posB = colIdToGridIndexMap.has(itemB.colId) ? colIdToGridIndexMap.get(itemB.colId) : -1;\n            return posA! - posB!;\n        });\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport { isProvidedColumnGroup } from '../entities/agProvidedColumnGroup';\nimport type { AgProvidedColumnGroup } from '../entities/agProvidedColumnGroup';\nimport type { ColumnEventType } from '../events';\nimport type { ColumnAnimationService } from '../rendering/columnAnimationService';\nimport type { ColumnEventDispatcher } from './columnEventDispatcher';\nimport { depthFirstOriginalTreeSearch } from './columnFactory';\nimport type { ColumnModel } from './columnModel';\nimport type { VisibleColsService } from './visibleColsService';\n\nexport class ColumnGroupStateService extends BeanStub implements NamedBean {\n    beanName = 'columnGroupStateService' as const;\n\n    private columnModel: ColumnModel;\n    private columnAnimationService: ColumnAnimationService;\n    private eventDispatcher: ColumnEventDispatcher;\n    private visibleColsService: VisibleColsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.columnModel = beans.columnModel;\n        this.columnAnimationService = beans.columnAnimationService;\n        this.eventDispatcher = beans.columnEventDispatcher;\n        this.visibleColsService = beans.visibleColsService;\n    }\n\n    public getColumnGroupState(): { groupId: string; open: boolean }[] {\n        const columnGroupState: { groupId: string; open: boolean }[] = [];\n        const gridBalancedTree = this.columnModel.getColTree();\n\n        depthFirstOriginalTreeSearch(null, gridBalancedTree, (node) => {\n            if (isProvidedColumnGroup(node)) {\n                columnGroupState.push({\n                    groupId: node.getGroupId(),\n                    open: node.isExpanded(),\n                });\n            }\n        });\n\n        return columnGroupState;\n    }\n\n    public resetColumnGroupState(source: ColumnEventType): void {\n        const primaryColumnTree = this.columnModel.getColDefColTree();\n        if (!primaryColumnTree) {\n            return;\n        }\n\n        const stateItems: { groupId: string; open: boolean | undefined }[] = [];\n\n        depthFirstOriginalTreeSearch(null, primaryColumnTree, (child) => {\n            if (isProvidedColumnGroup(child)) {\n                const colGroupDef = child.getColGroupDef();\n                const groupState = {\n                    groupId: child.getGroupId(),\n                    open: !colGroupDef ? undefined : colGroupDef.openByDefault,\n                };\n                stateItems.push(groupState);\n            }\n        });\n\n        this.setColumnGroupState(stateItems, source);\n    }\n\n    public setColumnGroupState(\n        stateItems: { groupId: string; open: boolean | undefined }[],\n        source: ColumnEventType\n    ): void {\n        const gridBalancedTree = this.columnModel.getColTree();\n        if (!gridBalancedTree) {\n            return;\n        }\n\n        this.columnAnimationService.start();\n\n        const impactedGroups: AgProvidedColumnGroup[] = [];\n\n        stateItems.forEach((stateItem) => {\n            const groupKey = stateItem.groupId;\n            const newValue = stateItem.open;\n            const providedColumnGroup = this.columnModel.getProvidedColGroup(groupKey);\n\n            if (!providedColumnGroup) {\n                return;\n            }\n            if (providedColumnGroup.isExpanded() === newValue) {\n                return;\n            }\n\n            providedColumnGroup.setExpanded(newValue);\n            impactedGroups.push(providedColumnGroup);\n        });\n\n        this.visibleColsService.refresh(source, true);\n\n        if (impactedGroups.length) {\n            this.eventDispatcher.groupOpened(impactedGroups);\n        }\n\n        this.columnAnimationService.finish();\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport { isColumn } from '../entities/agColumn';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { AgColumnGroup } from '../entities/agColumnGroup';\nimport type { RowNode } from '../entities/rowNode';\nimport type { ColumnPinnedType } from '../interfaces/iColumn';\nimport { _exists } from '../utils/generic';\nimport type { ColumnEventDispatcher } from './columnEventDispatcher';\nimport type { ColumnModel } from './columnModel';\nimport type { VisibleColsService } from './visibleColsService';\n\nexport class ColumnViewportService extends BeanStub implements NamedBean {\n    beanName = 'columnViewportService' as const;\n\n    private visibleColsService: VisibleColsService;\n    private columnModel: ColumnModel;\n    private eventDispatcher: ColumnEventDispatcher;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.visibleColsService = beans.visibleColsService;\n        this.columnModel = beans.columnModel;\n        this.eventDispatcher = beans.columnEventDispatcher;\n    }\n\n    // cols in center that are in the viewport\n    private colsWithinViewport: AgColumn[] = [];\n    // same as colsWithinViewport, except we always include columns with headerAutoHeight\n    private headerColsWithinViewport: AgColumn[] = [];\n\n    // A hash key to keep track of changes in viewport columns\n    private colsWithinViewportHash: string = '';\n\n    // all columns & groups to be rendered, index by row.\n    // used by header rows to get all items to render for that row.\n    private rowsOfHeadersToRenderLeft: { [row: number]: (AgColumn | AgColumnGroup)[] } = {};\n    private rowsOfHeadersToRenderRight: { [row: number]: (AgColumn | AgColumnGroup)[] } = {};\n    private rowsOfHeadersToRenderCenter: { [row: number]: (AgColumn | AgColumnGroup)[] } = {};\n\n    private scrollWidth: number;\n    private scrollPosition: number;\n\n    private viewportLeft: number; // same as scrollPosition, except when doing RTL\n    private viewportRight: number;\n\n    private suppressColumnVirtualisation: boolean;\n\n    public postConstruct(): void {\n        this.suppressColumnVirtualisation = this.gos.get('suppressColumnVirtualisation');\n    }\n\n    public setScrollPosition(scrollWidth: number, scrollPosition: number, afterScroll: boolean = false): void {\n        const bodyWidthDirty = this.visibleColsService.isBodyWidthDirty();\n\n        const noChange = scrollWidth === this.scrollWidth && scrollPosition === this.scrollPosition && !bodyWidthDirty;\n        if (noChange) {\n            return;\n        }\n\n        this.scrollWidth = scrollWidth;\n        this.scrollPosition = scrollPosition;\n        // we need to call setVirtualViewportLeftAndRight() at least once after the body width changes,\n        // as the viewport can stay the same, but in RTL, if body width changes, we need to work out the\n        // virtual columns again\n        this.visibleColsService.setBodyWidthDirty();\n\n        if (this.gos.get('enableRtl')) {\n            const bodyWidth = this.visibleColsService.getBodyContainerWidth();\n            this.viewportLeft = bodyWidth - this.scrollPosition - this.scrollWidth;\n            this.viewportRight = bodyWidth - this.scrollPosition;\n        } else {\n            this.viewportLeft = this.scrollPosition;\n            this.viewportRight = this.scrollWidth + this.scrollPosition;\n        }\n\n        if (this.columnModel.isReady()) {\n            this.checkViewportColumns(afterScroll);\n        }\n    }\n\n    public getHeadersToRender(type: ColumnPinnedType, dept: number): (AgColumn | AgColumnGroup)[] {\n        let result: (AgColumn | AgColumnGroup)[];\n\n        switch (type) {\n            case 'left':\n                result = this.rowsOfHeadersToRenderLeft[dept];\n                break;\n            case 'right':\n                result = this.rowsOfHeadersToRenderRight[dept];\n                break;\n            default:\n                result = this.rowsOfHeadersToRenderCenter[dept];\n                break;\n        }\n\n        return result || [];\n    }\n\n    private extractViewportColumns(): void {\n        const displayedColumnsCenter = this.visibleColsService.getCenterCols();\n        if (this.isColumnVirtualisationSuppressed()) {\n            // no virtualisation, so don't filter\n            this.colsWithinViewport = displayedColumnsCenter;\n            this.headerColsWithinViewport = displayedColumnsCenter;\n        } else {\n            // filter out what should be visible\n            this.colsWithinViewport = displayedColumnsCenter.filter(this.isColumnInRowViewport.bind(this));\n            this.headerColsWithinViewport = displayedColumnsCenter.filter(this.isColumnInHeaderViewport.bind(this));\n        }\n    }\n\n    private isColumnVirtualisationSuppressed() {\n        // When running within jsdom the viewportRight is always 0, so we need to return true to allow\n        // tests to validate all the columns.\n        return this.suppressColumnVirtualisation || this.viewportRight === 0;\n    }\n\n    public clear(): void {\n        this.rowsOfHeadersToRenderLeft = {};\n        this.rowsOfHeadersToRenderRight = {};\n        this.rowsOfHeadersToRenderCenter = {};\n        this.colsWithinViewportHash = '';\n    }\n\n    private isColumnInHeaderViewport(col: AgColumn): boolean {\n        // for headers, we never filter out autoHeaderHeight columns, if calculating\n        if (col.isAutoHeaderHeight()) {\n            return true;\n        }\n\n        return this.isColumnInRowViewport(col);\n    }\n\n    private isColumnInRowViewport(col: AgColumn): boolean {\n        // we never filter out autoHeight columns, as we need them in the DOM for calculating Auto Height\n        if (col.isAutoHeight()) {\n            return true;\n        }\n\n        const columnLeft = col.getLeft() || 0;\n        const columnRight = columnLeft + col.getActualWidth();\n\n        // adding 200 for buffer size, so some cols off viewport are rendered.\n        // this helps horizontal scrolling so user rarely sees white space (unless\n        // they scroll horizontally fast). however we are conservative, as the more\n        // buffer the slower the vertical redraw speed\n        const leftBounds = this.viewportLeft - 200;\n        const rightBounds = this.viewportRight + 200;\n\n        const columnToMuchLeft = columnLeft < leftBounds && columnRight < leftBounds;\n        const columnToMuchRight = columnLeft > rightBounds && columnRight > rightBounds;\n\n        return !columnToMuchLeft && !columnToMuchRight;\n    }\n\n    // used by Grid API only\n    public getViewportColumns(): AgColumn[] {\n        const leftCols = this.visibleColsService.getLeftCols();\n        const rightCols = this.visibleColsService.getRightCols();\n        const res = this.colsWithinViewport.concat(leftCols).concat(rightCols);\n        return res;\n    }\n\n    // + rowRenderer\n    // if we are not column spanning, this just returns back the virtual centre columns,\n    // however if we are column spanning, then different rows can have different virtual\n    // columns, so we have to work out the list for each individual row.\n    public getColsWithinViewport(rowNode: RowNode): AgColumn[] {\n        if (!this.columnModel.isColSpanActive()) {\n            return this.colsWithinViewport;\n        }\n\n        const emptySpaceBeforeColumn = (col: AgColumn) => {\n            const left = col.getLeft();\n\n            return _exists(left) && left > this.viewportLeft;\n        };\n\n        // if doing column virtualisation, then we filter based on the viewport.\n        const inViewportCallback = this.isColumnVirtualisationSuppressed()\n            ? null\n            : this.isColumnInRowViewport.bind(this);\n        const displayedColumnsCenter = this.visibleColsService.getColsCenter();\n\n        return this.visibleColsService.getColsForRow(\n            rowNode,\n            displayedColumnsCenter,\n            inViewportCallback,\n            emptySpaceBeforeColumn\n        );\n    }\n\n    // checks what columns are currently displayed due to column virtualisation. dispatches an event\n    // if the list of columns has changed.\n    // + setColumnWidth(), setViewportPosition(), setColumnDefs(), sizeColumnsToFit()\n    public checkViewportColumns(afterScroll: boolean = false): void {\n        const viewportColumnsChanged = this.extractViewport();\n        if (viewportColumnsChanged) {\n            this.eventDispatcher.virtualColumnsChanged(afterScroll);\n        }\n    }\n\n    private calculateHeaderRows(): void {\n        // go through each group, see if any of it's cols are displayed, and if yes,\n        // then this group is included\n        this.rowsOfHeadersToRenderLeft = {};\n        this.rowsOfHeadersToRenderRight = {};\n        this.rowsOfHeadersToRenderCenter = {};\n\n        // for easy lookup when building the groups.\n        const renderedColIds: { [key: string]: boolean } = {};\n\n        const renderedColsLeft = this.visibleColsService.getLeftCols();\n        const renderedColsRight = this.visibleColsService.getRightCols();\n        const allRenderedCols = this.headerColsWithinViewport.concat(renderedColsLeft).concat(renderedColsRight);\n\n        allRenderedCols.forEach((col) => (renderedColIds[col.getId()] = true));\n\n        const testGroup = (\n            children: (AgColumn | AgColumnGroup)[],\n            result: { [row: number]: (AgColumn | AgColumnGroup)[] },\n            dept: number\n        ): boolean => {\n            let returnValue = false;\n\n            for (let i = 0; i < children.length; i++) {\n                // see if this item is within viewport\n                const child = children[i];\n                let addThisItem = false;\n\n                if (isColumn(child)) {\n                    // for column, test if column is included\n                    addThisItem = renderedColIds[child.getId()] === true;\n                } else {\n                    // if group, base decision on children\n                    const columnGroup = child as AgColumnGroup;\n                    const displayedChildren = columnGroup.getDisplayedChildren();\n\n                    if (displayedChildren) {\n                        addThisItem = testGroup(displayedChildren, result, dept + 1);\n                    }\n                }\n\n                if (addThisItem) {\n                    returnValue = true;\n                    if (!result[dept]) {\n                        result[dept] = [];\n                    }\n                    result[dept].push(child);\n                }\n            }\n            return returnValue;\n        };\n\n        testGroup(this.visibleColsService.getTreeLeft(), this.rowsOfHeadersToRenderLeft, 0);\n        testGroup(this.visibleColsService.getTreeRight(), this.rowsOfHeadersToRenderRight, 0);\n        testGroup(this.visibleColsService.getTreeCenter(), this.rowsOfHeadersToRenderCenter, 0);\n    }\n\n    private extractViewport(): boolean {\n        const hashColumn = (c: AgColumn) => `${c.getId()}-${c.getPinned() || 'normal'}`;\n\n        this.extractViewportColumns();\n        const newHash = this.getViewportColumns().map(hashColumn).join('#');\n        const changed = this.colsWithinViewportHash !== newHash;\n\n        if (changed) {\n            this.colsWithinViewportHash = newHash;\n            this.calculateHeaderRows();\n        }\n\n        return changed;\n    }\n}\n", "import type { NamedBean } from '../../context/bean';\nimport { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { IComponent } from '../../interfaces/iComponent';\nimport type { ICellRendererComp, ICellRendererParams } from '../../rendering/cellRenderers/iCellRenderer';\nimport { _loadTemplate } from '../../utils/dom';\nimport type { ComponentMetadata, ComponentMetadataProvider } from './componentMetadataProvider';\n\nexport class AgComponentUtils extends BeanStub implements NamedBean {\n    beanName = 'agComponentUtils' as const;\n\n    private componentMetadataProvider: ComponentMetadataProvider;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.componentMetadataProvider = beans.componentMetadataProvider;\n    }\n\n    public adaptFunction(propertyName: string, jsCompFunc: any): any {\n        const metadata: ComponentMetadata = this.componentMetadataProvider.retrieve(propertyName);\n        if (metadata && metadata.functionAdapter) {\n            return metadata.functionAdapter(jsCompFunc);\n        }\n        return null;\n    }\n\n    public adaptCellRendererFunction(callback: any): { new (): IComponent<ICellRendererParams> } {\n        class Adapter implements ICellRendererComp {\n            private eGui: HTMLElement;\n\n            refresh(): boolean {\n                return false;\n            }\n\n            getGui(): HTMLElement {\n                return this.eGui;\n            }\n\n            init?(params: ICellRendererParams): void {\n                const callbackResult: string | HTMLElement = callback(params);\n                const type = typeof callbackResult;\n                if (type === 'string' || type === 'number' || type === 'boolean') {\n                    this.eGui = _loadTemplate('<span>' + callbackResult + '</span>');\n                    return;\n                }\n                if (callbackResult == null) {\n                    this.eGui = _loadTemplate('<span></span>');\n                    return;\n                }\n                this.eGui = callbackResult as HTMLElement;\n            }\n        }\n\n        return Adapter;\n    }\n\n    public doesImplementIComponent(candidate: any): boolean {\n        if (!candidate) {\n            return false;\n        }\n        return (candidate as any).prototype && 'getGui' in (candidate as any).prototype;\n    }\n}\n", "import type { NamedBean } from '../../context/bean';\nimport { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { IComponent } from '../../interfaces/iComponent';\nimport type { AgComponentUtils } from './agComponentUtils';\n\nexport interface ComponentMetadata {\n    mandatoryMethodList: string[];\n    optionalMethodList: string[];\n    functionAdapter?: (callback: any) => { new (): IComponent<any> };\n}\n\nexport class ComponentMetadataProvider extends BeanStub implements NamedBean {\n    beanName = 'componentMetadataProvider' as const;\n\n    private componentMetaData: { [key: string]: ComponentMetadata };\n\n    private agComponentUtils: AgComponentUtils;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.agComponentUtils = beans.agComponentUtils;\n    }\n\n    public postConstruct() {\n        this.componentMetaData = {\n            dateComponent: {\n                mandatoryMethodList: ['getDate', 'setDate'],\n                optionalMethodList: [\n                    'afterGuiAttached',\n                    'setInputPlaceholder',\n                    'setInputAriaLabel',\n                    'setDisabled',\n                    'onParamsUpdated',\n                    'refresh',\n                ],\n            },\n            detailCellRenderer: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['refresh'],\n                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils),\n            },\n            headerComponent: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['refresh'],\n            },\n            headerGroupComponent: {\n                mandatoryMethodList: [],\n                optionalMethodList: [],\n            },\n            loadingCellRenderer: {\n                mandatoryMethodList: [],\n                optionalMethodList: [],\n                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils),\n            },\n            loadingOverlayComponent: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['refresh'],\n            },\n            noRowsOverlayComponent: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['refresh'],\n            },\n            floatingFilterComponent: {\n                mandatoryMethodList: ['onParentModelChanged'],\n                optionalMethodList: ['afterGuiAttached', 'onParamsUpdated', 'refresh'],\n            },\n            cellRenderer: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['refresh', 'afterGuiAttached'],\n                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils),\n            },\n            cellEditor: {\n                mandatoryMethodList: ['getValue'],\n                optionalMethodList: [\n                    'isPopup',\n                    'isCancelBeforeStart',\n                    'isCancelAfterEnd',\n                    'getPopupPosition',\n                    'focusIn',\n                    'focusOut',\n                    'afterGuiAttached',\n                    'refresh',\n                ],\n            },\n            innerRenderer: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['afterGuiAttached'],\n                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils),\n            },\n            fullWidthCellRenderer: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['refresh', 'afterGuiAttached'],\n                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils),\n            },\n            groupRowRenderer: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['afterGuiAttached'],\n                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils),\n            },\n            filter: {\n                mandatoryMethodList: ['isFilterActive', 'doesFilterPass', 'getModel', 'setModel'],\n                optionalMethodList: [\n                    'afterGuiAttached',\n                    'afterGuiDetached',\n                    'onNewRowsLoaded',\n                    'getModelAsString',\n                    'onFloatingFilterChanged',\n                    'onAnyFilterChanged',\n                    'refresh',\n                ],\n            },\n            statusPanel: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['refresh'],\n            },\n            toolPanel: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['refresh', 'getState'],\n            },\n            tooltipComponent: {\n                mandatoryMethodList: [],\n                optionalMethodList: [],\n            },\n            menuItem: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['setActive', 'select', 'setExpanded', 'configureDefaults'],\n            },\n        };\n    }\n\n    public retrieve(name: string): ComponentMetadata {\n        return this.componentMetaData[name];\n    }\n}\n", "import type { BeanCollection, BeanName } from './context';\nimport type { GenericBean } from './genericBean';\n\n/**\n * We know that there is a risk in a change of behaviour if beans are registered in a different order due to the way\n * that this means that their event listeners will be registered in a different order. If they fire in a different order\n * there is a risk that behaviour will be inconsistent.\n * As core beans are going to become optional and could be registered in unpredictable orders via feature modules,\n * we need to provide a consistent order for them to be registered in.\n *\n * We have not included beans from modules as they will be registered after the core beans in the order they are provided.\n */\nconst orderedCoreBeans: BeanName[] = [\n    // core beans only\n    'rowPositionUtils',\n    'cellPositionUtils',\n    'headerPositionUtils',\n    'paginationAutoPageSizeService',\n    'apiFunctionService',\n    'gridApi',\n    'userComponentRegistry',\n    'agComponentUtils',\n    'componentMetadataProvider',\n    'resizeObserverService',\n    'userComponentFactory',\n    'rowContainerHeightService',\n    'horizontalResizeService',\n    'localeService',\n    'validationService',\n    'pinnedRowModel',\n    'dragService',\n    'visibleColsService',\n    'eventService',\n    'gos',\n    'popupService',\n    'selectionService',\n    'columnFilterService',\n    'quickFilterService',\n    'filterManager',\n    'columnModel',\n    'headerNavigationService',\n    'pageBoundsService',\n    'paginationService',\n    'pageBoundsListener',\n    'rowRenderer',\n    'expressionService',\n    'columnFactory',\n    'alignedGridsService',\n    'navigationService',\n    'valueCache',\n    'valueService',\n    'loggerFactory',\n    'autoWidthCalculator',\n    'filterMenuFactory',\n    'dragAndDropService',\n    'focusService',\n    'mouseEventService',\n    'environment',\n    'cellNavigationService',\n    'stylingService',\n    'scrollVisibleService',\n    'sortController',\n    'columnHoverService',\n    'columnAnimationService',\n    'selectableService',\n    'autoColService',\n    'changeDetectionService',\n    'animationFrameService',\n    'undoRedoService',\n    'columnDefFactory',\n    'rowCssClassCalculator',\n    'rowNodeBlockLoader',\n    'rowNodeSorter',\n    'ctrlsService',\n    'pinnedWidthService',\n    'rowNodeEventThrottle',\n    'ctrlsFactory',\n    'dataTypeService',\n    'syncService',\n    'overlayService',\n    'stateService',\n    'expansionService',\n    'apiEventService',\n    'ariaAnnouncementService',\n    'menuService',\n    'columnApplyStateService',\n    'columnEventDispatcher',\n    'columnMoveService',\n    'columnAutosizeService',\n    'columnGetStateService',\n    'columnGroupStateService',\n    'columnSizeService',\n    'funcColsService',\n    'columnNameService',\n    'columnViewportService',\n    'pivotResultColsService',\n    'showRowGroupColsService',\n];\n\nconst beanNamePosition: { [key in BeanName]?: number } = Object.fromEntries(\n    orderedCoreBeans.map((beanName, index) => [beanName, index])\n);\n\nexport function gridBeanInitComparator(\n    bean1: GenericBean<BeanName, BeanCollection>,\n    bean2: GenericBean<BeanName, BeanCollection>\n): number {\n    // if the beans are not in the ordered list, just ensure they are after the ordered beans and stable to provided order\n    const index1 = (bean1.beanName ? beanNamePosition[bean1.beanName] : undefined) ?? Number.MAX_SAFE_INTEGER;\n    const index2 = (bean2.beanName ? beanNamePosition[bean2.beanName] : undefined) ?? Number.MAX_SAFE_INTEGER;\n    return index1 - index2;\n}\n\nexport function gridBeanDestroyComparator(\n    bean1: GenericBean<BeanName, BeanCollection>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    bean2: GenericBean<BeanName, BeanCollection>\n): number {\n    return bean1?.beanName === 'gridDestroyService' ? -1 : 0;\n}\n", "import type { NamedBean } from './context/bean';\nimport { BeanStub } from './context/beanStub';\nimport type { ControllerMeta, ControllerName } from './context/context';\n\nexport class CtrlsFactory extends BeanStub implements NamedBean {\n    beanName = 'ctrlsFactory' as const;\n\n    private registry: { [K in ControllerName]?: new (args?: any[]) => object } = {};\n\n    public register(meta: ControllerMeta): void {\n        this.registry[meta.name] = meta.classImp;\n    }\n\n    public getInstance<T>(name: ControllerName, ...args: any[]): T | undefined {\n        const ControllerClass = this.registry[name];\n\n        if (ControllerClass == null) {\n            return undefined;\n        }\n\n        return new ControllerClass(...args) as any;\n    }\n}\n", "import type { NamedBean } from './context/bean';\nimport { BeanStub } from './context/beanStub';\nimport type { FakeHScrollComp } from './gridBodyComp/fakeHScrollComp';\nimport type { FakeVScrollComp } from './gridBodyComp/fakeVScrollComp';\nimport type { GridBodyCtrl } from './gridBodyComp/gridBodyCtrl';\nimport type { RowContainerCtrl } from './gridBodyComp/rowContainer/rowContainerCtrl';\nimport type { GridCtrl } from './gridComp/gridCtrl';\nimport type { GridHeaderCtrl } from './headerRendering/gridHeaderCtrl';\nimport type { HeaderRowContainerCtrl } from './headerRendering/rowContainer/headerRowContainerCtrl';\nimport type { ColumnPinnedType } from './interfaces/iColumn';\n\n// for all controllers that are singletons, they can register here so other parts\n// of the application can access them.\n\ninterface ReadyParams {\n    gridCtrl: GridCtrl;\n    gridBodyCtrl: GridBodyCtrl;\n\n    center: RowContainerCtrl;\n    left: RowContainerCtrl;\n    right: RowContainerCtrl;\n\n    bottomCenter: RowContainerCtrl;\n    bottomLeft: RowContainerCtrl;\n    bottomRight: RowContainerCtrl;\n\n    topCenter: RowContainerCtrl;\n    topLeft: RowContainerCtrl;\n    topRight: RowContainerCtrl;\n\n    stickyTopCenter: RowContainerCtrl;\n    stickyTopLeft: RowContainerCtrl;\n    stickyTopRight: RowContainerCtrl;\n\n    stickyBottomCenter: RowContainerCtrl;\n    stickyBottomLeft: RowContainerCtrl;\n    stickyBottomRight: RowContainerCtrl;\n\n    fakeHScrollComp: FakeHScrollComp;\n    fakeVScrollComp: FakeVScrollComp;\n    gridHeaderCtrl: GridHeaderCtrl;\n\n    centerHeader: HeaderRowContainerCtrl;\n    leftHeader: HeaderRowContainerCtrl;\n    rightHeader: HeaderRowContainerCtrl;\n}\n\ntype CtrlType = keyof ReadyParams;\n\nexport class CtrlsService extends BeanStub implements NamedBean {\n    beanName = 'ctrlsService' as const;\n\n    private params: ReadyParams = {} as ReadyParams;\n    private ready = false;\n    private readyCallbacks: ((p: ReadyParams) => void)[] = [];\n\n    private checkReady(): void {\n        const params = this.params;\n        this.ready =\n            params.gridCtrl != null &&\n            params.gridBodyCtrl != null &&\n            params.center != null &&\n            params.left != null &&\n            params.right != null &&\n            params.bottomCenter != null &&\n            params.bottomLeft != null &&\n            params.bottomRight != null &&\n            params.topCenter != null &&\n            params.topLeft != null &&\n            params.topRight != null &&\n            params.stickyTopCenter != null &&\n            params.stickyTopLeft != null &&\n            params.stickyTopRight != null &&\n            params.stickyBottomCenter != null &&\n            params.stickyBottomLeft != null &&\n            params.stickyBottomRight != null &&\n            params.centerHeader != null &&\n            params.leftHeader != null &&\n            params.rightHeader != null &&\n            params.fakeHScrollComp != null &&\n            params.fakeVScrollComp != null &&\n            params.gridHeaderCtrl != null;\n\n        if (this.ready) {\n            this.readyCallbacks.forEach((c) => c(params));\n            this.readyCallbacks.length = 0;\n        }\n    }\n\n    public whenReady(callback: (p: ReadyParams) => void): void {\n        if (this.ready) {\n            callback(this.params);\n        } else {\n            this.readyCallbacks.push(callback);\n        }\n    }\n\n    public register<K extends CtrlType, T extends ReadyParams[K]>(ctrlType: K, ctrl: T): void {\n        this.params[ctrlType] = ctrl;\n        this.checkReady();\n    }\n\n    public registerHeaderContainer(ctrl: HeaderRowContainerCtrl, pinned: ColumnPinnedType): void {\n        const params = this.params;\n        switch (pinned) {\n            case 'left':\n                params.leftHeader = ctrl;\n                break;\n            case 'right':\n                params.rightHeader = ctrl;\n                break;\n            default:\n                params.centerHeader = ctrl;\n                break;\n        }\n        this.checkReady();\n    }\n\n    public get<K extends CtrlType>(ctrlType: K): ReadyParams[K] {\n        return this.params[ctrlType];\n    }\n    public getParams(): Readonly<ReadyParams> {\n        return this.params;\n    }\n\n    public getGridBodyCtrl(): GridBodyCtrl {\n        return this.params.gridBodyCtrl;\n    }\n\n    public getHeaderRowContainerCtrls(): HeaderRowContainerCtrl[] {\n        const { leftHeader, centerHeader, rightHeader } = this.params;\n        return [leftHeader, rightHeader, centerHeader];\n    }\n\n    public getHeaderRowContainerCtrl(pinned?: ColumnPinnedType): HeaderRowContainerCtrl {\n        const params = this.params;\n        switch (pinned) {\n            case 'left':\n                return params.leftHeader;\n            case 'right':\n                return params.rightHeader;\n            default:\n                return params.centerHeader;\n        }\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { Column } from '../interfaces/iColumn';\nimport type { RowPosition } from './rowPositionUtils';\n\n// this is what gets pass into and out of the api, as JavaScript users\nexport interface CellPosition extends RowPosition {\n    /** The grid column */\n    column: Column;\n}\n\nexport class CellPositionUtils extends BeanStub implements NamedBean {\n    beanName = 'cellPositionUtils' as const;\n\n    public createId(cellPosition: CellPosition): string {\n        const { rowIndex, rowPinned, column } = cellPosition;\n        return this.createIdFromValues({ rowIndex, column, rowPinned });\n    }\n\n    public createIdFromValues(cellPosition: CellPosition): string {\n        const { rowIndex, rowPinned, column } = cellPosition;\n        return `${rowIndex}.${rowPinned == null ? 'null' : rowPinned}.${column.getId()}`;\n    }\n\n    public equals(cellA: CellPosition, cellB: CellPosition): boolean {\n        const colsMatch = cellA.column === cellB.column;\n        const floatingMatch = cellA.rowPinned === cellB.rowPinned;\n        const indexMatch = cellA.rowIndex === cellB.rowIndex;\n        return colsMatch && floatingMatch && indexMatch;\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { RowGroupOpenedEvent } from '../events';\nimport type { IClientSideRowModel } from '../interfaces/iClientSideRowModel';\nimport type { IRowModel } from '../interfaces/iRowModel';\nimport type { AnimationFrameService } from '../misc/animationFrameService';\n\nexport class RowNodeEventThrottle extends BeanStub implements NamedBean {\n    beanName = 'rowNodeEventThrottle' as const;\n\n    private animationFrameService: AnimationFrameService;\n    private rowModel: IRowModel;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.animationFrameService = beans.animationFrameService;\n        this.rowModel = beans.rowModel;\n    }\n\n    private clientSideRowModel: IClientSideRowModel;\n\n    private events: RowGroupOpenedEvent[] = [];\n\n    private dispatchExpandedDebounced: () => void;\n\n    public postConstruct(): void {\n        if (this.rowModel.getType() == 'clientSide') {\n            this.clientSideRowModel = this.rowModel as IClientSideRowModel;\n        }\n    }\n\n    // because the user can call rowNode.setExpanded() many times in one VM turn,\n    // we throttle the calls to ClientSideRowModel using animationFrameService. this means for 100\n    // row nodes getting expanded, we only update the CSRM once, and then we fire all events after\n    // CSRM has updated.\n    //\n    // if we did not do this, then the user could call setExpanded on 100+ rows, causing the grid\n    // to re-render 100+ times, which would be a performance lag.\n    //\n    // we use animationFrameService\n    // rather than debounce() so this will get done if anyone flushes the animationFrameService\n    // (eg user calls api.ensureRowVisible(), which in turn flushes ).\n    public dispatchExpanded(event: RowGroupOpenedEvent, forceSync?: boolean): void {\n        // if not using CSRM, we don't debounce. otherwise this breaks the SSRM.\n        if (this.clientSideRowModel == null) {\n            this.eventService.dispatchEvent(event);\n            return;\n        }\n\n        this.events.push(event);\n\n        const func = () => {\n            if (this.clientSideRowModel) {\n                this.clientSideRowModel.onRowGroupOpened();\n            }\n            this.events.forEach((e) => this.eventService.dispatchEvent(e));\n            this.events = [];\n        };\n\n        if (forceSync) {\n            func();\n        } else {\n            if (this.dispatchExpandedDebounced == null) {\n                this.dispatchExpandedDebounced = this.animationFrameService.debounce(func);\n            }\n            this.dispatchExpandedDebounced();\n        }\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { IRowModel } from '../interfaces/iRowModel';\nimport type { RowPinnedType } from '../interfaces/iRowNode';\nimport type { PageBoundsService } from '../pagination/pageBoundsService';\nimport type { PinnedRowModel } from '../pinnedRowModel/pinnedRowModel';\nimport { _exists } from '../utils/generic';\nimport type { RowNode } from './rowNode';\n\nexport interface RowPosition {\n    /** A positive number from 0 to n, where n is the last row the grid is rendering\n     * or -1 if you want to navigate to the grid header */\n    rowIndex: number;\n\n    /** Either 'top', 'bottom' or null/undefined (for not pinned) */\n    rowPinned: RowPinnedType;\n}\n\nexport class RowPositionUtils extends BeanStub implements NamedBean {\n    beanName = 'rowPositionUtils' as const;\n\n    private rowModel: IRowModel;\n    private pinnedRowModel: PinnedRowModel;\n    private pageBoundsService: PageBoundsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.rowModel = beans.rowModel;\n        this.pinnedRowModel = beans.pinnedRowModel;\n        this.pageBoundsService = beans.pageBoundsService;\n    }\n\n    public getFirstRow(): RowPosition | null {\n        let rowIndex = 0;\n        let rowPinned: RowPinnedType;\n\n        if (this.pinnedRowModel.getPinnedTopRowCount()) {\n            rowPinned = 'top';\n        } else if (this.rowModel.getRowCount()) {\n            rowPinned = null;\n            rowIndex = this.pageBoundsService.getFirstRow();\n        } else if (this.pinnedRowModel.getPinnedBottomRowCount()) {\n            rowPinned = 'bottom';\n        }\n\n        return rowPinned === undefined ? null : { rowIndex, rowPinned };\n    }\n\n    public getLastRow(): RowPosition | null {\n        let rowIndex;\n        let rowPinned: RowPinnedType = null;\n\n        const pinnedBottomCount = this.pinnedRowModel.getPinnedBottomRowCount();\n        const pinnedTopCount = this.pinnedRowModel.getPinnedTopRowCount();\n\n        if (pinnedBottomCount) {\n            rowPinned = 'bottom';\n            rowIndex = pinnedBottomCount - 1;\n        } else if (this.rowModel.getRowCount()) {\n            rowPinned = null;\n            rowIndex = this.pageBoundsService.getLastRow();\n        } else if (pinnedTopCount) {\n            rowPinned = 'top';\n            rowIndex = pinnedTopCount - 1;\n        }\n\n        return rowIndex === undefined ? null : { rowIndex, rowPinned };\n    }\n\n    public getRowNode(gridRow: RowPosition): RowNode | undefined {\n        switch (gridRow.rowPinned) {\n            case 'top':\n                return this.pinnedRowModel.getPinnedTopRowNodes()[gridRow.rowIndex];\n            case 'bottom':\n                return this.pinnedRowModel.getPinnedBottomRowNodes()[gridRow.rowIndex];\n            default:\n                return this.rowModel.getRow(gridRow.rowIndex);\n        }\n    }\n\n    public sameRow(rowA: RowPosition | undefined, rowB: RowPosition | undefined): boolean {\n        // if both missing\n        if (!rowA && !rowB) {\n            return true;\n        }\n        // if only one missing\n        if ((rowA && !rowB) || (!rowA && rowB)) {\n            return false;\n        }\n        // otherwise compare (use == to compare rowPinned because it can be null or undefined)\n        return rowA!.rowIndex === rowB!.rowIndex && rowA!.rowPinned == rowB!.rowPinned;\n    }\n\n    // tests if this row selection is before the other row selection\n    public before(rowA: RowPosition, rowB: RowPosition): boolean {\n        switch (rowA.rowPinned) {\n            case 'top':\n                // we we are floating top, and other isn't, then we are always before\n                if (rowB.rowPinned !== 'top') {\n                    return true;\n                }\n                break;\n            case 'bottom':\n                // if we are floating bottom, and the other isn't, then we are never before\n                if (rowB.rowPinned !== 'bottom') {\n                    return false;\n                }\n                break;\n            default:\n                // if we are not floating, but the other one is floating...\n                if (_exists(rowB.rowPinned)) {\n                    return rowB.rowPinned !== 'top';\n                }\n                break;\n        }\n        return rowA.rowIndex < rowB.rowIndex;\n    }\n}\n", "import type { NamedBean } from './context/bean';\nimport { BeanStub } from './context/beanStub';\nimport type { BeanCollection } from './context/context';\nimport type { CssVariablesChanged } from './events';\nimport type { WithoutGridCommon } from './interfaces/iCommon';\nimport type { ResizeObserverService } from './misc/resizeObserverService';\nimport { _warnOnce } from './utils/function';\n\nconst ROW_HEIGHT: Variable = {\n    cssName: '--ag-row-height',\n    changeKey: 'rowHeightChanged',\n    defaultValue: 42,\n};\nconst HEADER_HEIGHT: Variable = {\n    cssName: '--ag-header-height',\n    changeKey: 'headerHeightChanged',\n    defaultValue: 48,\n};\nconst LIST_ITEM_HEIGHT: Variable = {\n    cssName: '--ag-list-item-height',\n    changeKey: 'listItemHeightChanged',\n    defaultValue: 24,\n};\n\nexport class Environment extends BeanStub implements NamedBean {\n    beanName = 'environment' as const;\n\n    private resizeObserverService: ResizeObserverService;\n    private eGridDiv: HTMLElement;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.resizeObserverService = beans.resizeObserverService;\n        this.eGridDiv = beans.eGridDiv;\n    }\n\n    private sizeEls = new Map<Variable, HTMLElement>();\n    private lastKnownValues = new Map<Variable, number>();\n    private themeClasses: readonly string[] = [];\n    private eThemeAncestor: HTMLElement | null = null;\n    private eMeasurementContainer: HTMLElement | null = null;\n    private sizesMeasured = false;\n\n    public postConstruct(): void {\n        this.addManagedPropertyListener('rowHeight', () => this.refreshRowHeightVariable());\n        this.themeClasses = this.getAncestorThemeClasses();\n        this.setUpThemeClassObservers();\n        this.getSizeEl(ROW_HEIGHT);\n        this.getSizeEl(HEADER_HEIGHT);\n        this.getSizeEl(LIST_ITEM_HEIGHT);\n    }\n\n    public getDefaultRowHeight(): number {\n        return this.getCSSVariablePixelValue(ROW_HEIGHT);\n    }\n\n    public getDefaultHeaderHeight(): number {\n        return this.getCSSVariablePixelValue(HEADER_HEIGHT);\n    }\n\n    public getDefaultListItemHeight() {\n        return this.getCSSVariablePixelValue(LIST_ITEM_HEIGHT);\n    }\n\n    public hasMeasuredSizes(): boolean {\n        return this.sizesMeasured;\n    }\n\n    public getThemeClasses(): readonly string[] {\n        return this.themeClasses;\n    }\n\n    public applyThemeClasses(el: HTMLElement) {\n        for (const className of Array.from(el.classList)) {\n            if (className.startsWith('ag-theme-') && !this.themeClasses.includes(className)) {\n                el.classList.remove(className);\n            }\n        }\n        for (const className of this.themeClasses) {\n            if (!el.classList.contains(className)) {\n                el.classList.add(className);\n            }\n        }\n    }\n\n    public getThemeAncestorElement(): HTMLElement | null {\n        return this.eThemeAncestor;\n    }\n\n    public refreshRowHeightVariable(): number {\n        const oldRowHeight = this.eGridDiv.style.getPropertyValue('--ag-line-height').trim();\n        const height = this.gos.get('rowHeight');\n\n        if (height == null || isNaN(height) || !isFinite(height)) {\n            if (oldRowHeight !== null) {\n                this.eGridDiv.style.setProperty('--ag-line-height', null);\n            }\n            return -1;\n        }\n\n        const newRowHeight = `${height}px`;\n\n        if (oldRowHeight != newRowHeight) {\n            this.eGridDiv.style.setProperty('--ag-line-height', newRowHeight);\n            return height;\n        }\n\n        return oldRowHeight != '' ? parseFloat(oldRowHeight) : -1;\n    }\n\n    private getCSSVariablePixelValue(variable: Variable): number {\n        const cached = this.lastKnownValues.get(variable);\n        if (cached != null) {\n            return cached;\n        }\n        const measurement = this.measureSizeEl(variable);\n        if (measurement === 'detached' || measurement === 'no-styles') {\n            return variable.defaultValue;\n        }\n        this.lastKnownValues.set(variable, measurement);\n        return measurement;\n    }\n\n    private measureSizeEl(variable: Variable): number | 'detached' | 'no-styles' {\n        const sizeEl = this.getSizeEl(variable)!;\n        if (sizeEl.offsetParent == null) {\n            return 'detached';\n        }\n        const newSize = sizeEl.offsetWidth;\n        if (newSize === NO_VALUE_SENTINEL) return 'no-styles';\n        this.sizesMeasured = true;\n        return newSize;\n    }\n\n    private getSizeEl(variable: Variable): HTMLElement {\n        let sizeEl = this.sizeEls.get(variable);\n        if (sizeEl) {\n            return sizeEl;\n        }\n        let container = this.eMeasurementContainer;\n        if (!container) {\n            container = this.eMeasurementContainer = document.createElement('div');\n            container.className = 'ag-measurement-container';\n            this.eGridDiv.appendChild(container);\n        }\n\n        sizeEl = document.createElement('div');\n        sizeEl.style.width = `var(${variable.cssName}, ${NO_VALUE_SENTINEL}px)`;\n        container.appendChild(sizeEl);\n        this.sizeEls.set(variable, sizeEl);\n\n        let lastMeasurement = this.measureSizeEl(variable);\n\n        if (lastMeasurement === 'no-styles') {\n            _warnOnce(\n                `no value for ${variable.cssName}. This usually means that the grid has been initialised before styles have been loaded. The default value of ${variable.defaultValue} will be used and updated when styles load.`\n            );\n        }\n\n        const unsubscribe = this.resizeObserverService.observeResize(sizeEl, () => {\n            const newMeasurement = this.measureSizeEl(variable);\n            if (newMeasurement === 'detached' || newMeasurement === 'no-styles') {\n                return;\n            }\n            this.lastKnownValues.set(variable, newMeasurement);\n            if (newMeasurement !== lastMeasurement) {\n                lastMeasurement = newMeasurement;\n                this.fireGridStylesChangedEvent(variable.changeKey);\n            }\n        });\n        this.addDestroyFunc(() => unsubscribe());\n\n        return sizeEl;\n    }\n\n    private fireGridStylesChangedEvent(change: ChangeKey): void {\n        const event: WithoutGridCommon<CssVariablesChanged> = {\n            type: 'gridStylesChanged',\n            [change]: true,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private setUpThemeClassObservers() {\n        const observer = new MutationObserver(() => {\n            const newThemeClasses = this.getAncestorThemeClasses();\n            if (!arraysEqual(newThemeClasses, this.themeClasses)) {\n                this.themeClasses = newThemeClasses;\n                this.fireGridStylesChangedEvent('themeChanged');\n            }\n        });\n\n        let node: HTMLElement | null = this.eGridDiv;\n        while (node) {\n            observer.observe(node || this.eGridDiv, {\n                attributes: true,\n                attributeFilter: ['class'],\n            });\n            node = node.parentElement;\n        }\n    }\n\n    private getAncestorThemeClasses(): readonly string[] {\n        let el: HTMLElement | null = this.eGridDiv;\n        const allThemeClasses: string[] = [];\n        this.eThemeAncestor = null;\n        while (el) {\n            const themeClasses = Array.from(el.classList).filter((c) => c.startsWith('ag-theme-'));\n            for (const themeClass of themeClasses) {\n                this.eThemeAncestor = el;\n                if (!allThemeClasses.includes(themeClass)) {\n                    allThemeClasses.unshift(themeClass);\n                }\n            }\n            el = el.parentElement;\n        }\n        return Object.freeze(allThemeClasses);\n    }\n}\n\nconst arraysEqual = <T>(a: readonly T[], b: readonly T[]): boolean =>\n    a.length === b.length && a.findIndex((_, i) => a[i] !== b[i]) === -1;\n\ntype Variable = {\n    cssName: string;\n    changeKey: ChangeKey;\n    defaultValue: number;\n};\n\ntype ChangeKey = 'themeChanged' | 'headerHeightChanged' | 'rowHeightChanged' | 'listItemHeightChanged';\n\nconst NO_VALUE_SENTINEL = 15538;\n", "import type { NamedBean } from './context/bean';\nimport { BeanStub } from './context/beanStub';\nimport type { BeanCollection } from './context/context';\nimport type { AgEventType } from './eventTypes';\nimport type { AgEvent, AgEventListener, AgGlobalEventListener } from './events';\nimport type { IEventEmitter } from './interfaces/iEventEmitter';\nimport { LocalEventService } from './localEventService';\n\nexport class EventService extends BeanStub<AgEventType> implements NamedBean, IEventEmitter<AgEventType> {\n    beanName = 'eventService' as const;\n\n    private globalEventListener?: AgGlobalEventListener;\n    private globalSyncEventListener?: AgGlobalEventListener;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.globalEventListener = beans.globalEventListener;\n        this.globalSyncEventListener = beans.globalSyncEventListener;\n    }\n\n    private readonly globalEventService: LocalEventService<AgEventType> = new LocalEventService();\n\n    public postConstruct(): void {\n        if (this.globalEventListener) {\n            const async = this.gos.useAsyncEvents();\n            this.addGlobalListener(this.globalEventListener, async);\n        }\n\n        if (this.globalSyncEventListener) {\n            this.addGlobalListener(this.globalSyncEventListener, false);\n        }\n    }\n\n    public override addEventListener<TEventType extends AgEventType>(\n        eventType: TEventType,\n        listener: AgEventListener<any, any, TEventType>,\n        async?: boolean\n    ): void {\n        this.globalEventService.addEventListener(eventType, listener as any, async);\n    }\n\n    public override removeEventListener<TEventType extends AgEventType>(\n        eventType: TEventType,\n        listener: AgEventListener<any, any, TEventType>,\n        async?: boolean\n    ): void {\n        this.globalEventService.removeEventListener(eventType, listener as any, async);\n    }\n\n    public addGlobalListener(listener: AgGlobalEventListener, async = false): void {\n        this.globalEventService.addGlobalListener(listener, async);\n    }\n\n    public removeGlobalListener(listener: AgGlobalEventListener, async = false): void {\n        this.globalEventService.removeGlobalListener(listener, async);\n    }\n\n    /** @deprecated DO NOT FIRE LOCAL EVENTS OFF THE EVENT SERVICE */\n    public override dispatchLocalEvent(): void {\n        // only the destroy event from BeanStub should flow through here\n    }\n\n    public dispatchEvent(event: AgEvent<AgEventType>): void {\n        this.globalEventService.dispatchEvent(this.gos.addGridCommonParams<any>(event));\n    }\n\n    public dispatchEventOnce(event: AgEvent<AgEventType>): void {\n        this.globalEventService.dispatchEventOnce(this.gos.addGridCommonParams<any>(event));\n    }\n}\n", "import type { ColumnModel } from './columns/columnModel';\nimport type { VisibleColsService } from './columns/visibleColsService';\nimport type { NamedBean } from './context/bean';\nimport { BeanStub } from './context/beanStub';\nimport type { BeanCollection } from './context/context';\nimport type { CtrlsService } from './ctrlsService';\nimport type { AgColumn } from './entities/agColumn';\nimport type { AgColumnGroup } from './entities/agColumnGroup';\nimport type { CellPosition, CellPositionUtils } from './entities/cellPositionUtils';\nimport type { RowNode } from './entities/rowNode';\nimport type { RowPositionUtils } from './entities/rowPositionUtils';\nimport type { CellFocusClearedEvent, CellFocusedEvent, CellFocusedParams, CommonCellFocusParams } from './events';\nimport type { FilterManager } from './filter/filterManager';\nimport type { NavigationService } from './gridBodyComp/navigationService';\nimport type { GridCtrl } from './gridComp/gridCtrl';\nimport { AbstractHeaderCellCtrl } from './headerRendering/cells/abstractCell/abstractHeaderCellCtrl';\nimport type { HeaderCellCtrl } from './headerRendering/cells/column/headerCellCtrl';\nimport type { HeaderNavigationService } from './headerRendering/common/headerNavigationService';\nimport type { HeaderPosition, HeaderPositionUtils } from './headerRendering/common/headerPosition';\nimport type { IRangeService } from './interfaces/IRangeService';\nimport type { IAdvancedFilterService } from './interfaces/iAdvancedFilterService';\nimport type { NavigateToNextHeaderParams, TabToNextHeaderParams } from './interfaces/iCallbackParams';\nimport type { WithoutGridCommon } from './interfaces/iCommon';\nimport type { FocusableContainer } from './interfaces/iFocusableContainer';\nimport type { RowPinnedType } from './interfaces/iRowNode';\nimport { RowCtrl } from './rendering/row/rowCtrl';\nimport type { RowRenderer } from './rendering/rowRenderer';\nimport { _last } from './utils/array';\nimport { _getTabIndex } from './utils/browser';\nimport { FOCUSABLE_EXCLUDE, FOCUSABLE_SELECTOR, _isVisible } from './utils/dom';\nimport { _warnOnce } from './utils/function';\nimport { _makeNull } from './utils/generic';\nimport { ManagedFocusFeature } from './widgets/managedFocusFeature';\nimport { TabGuardClassNames } from './widgets/tabGuardCtrl';\n\nexport class FocusService extends BeanStub implements NamedBean {\n    beanName = 'focusService' as const;\n\n    private eGridDiv: HTMLElement;\n    private columnModel: ColumnModel;\n    private visibleColsService: VisibleColsService;\n    private headerNavigationService: HeaderNavigationService;\n    private headerPositionUtils: HeaderPositionUtils;\n    private rowRenderer: RowRenderer;\n    private rowPositionUtils: RowPositionUtils;\n    private cellPositionUtils: CellPositionUtils;\n    private navigationService: NavigationService;\n    private ctrlsService: CtrlsService;\n    private filterManager?: FilterManager;\n\n    private rangeService?: IRangeService;\n    private advancedFilterService?: IAdvancedFilterService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.eGridDiv = beans.eGridDiv;\n        this.columnModel = beans.columnModel;\n        this.visibleColsService = beans.visibleColsService;\n        this.headerNavigationService = beans.headerNavigationService;\n        this.headerPositionUtils = beans.headerPositionUtils;\n        this.rowRenderer = beans.rowRenderer;\n        this.rowPositionUtils = beans.rowPositionUtils;\n        this.cellPositionUtils = beans.cellPositionUtils;\n        this.navigationService = beans.navigationService;\n        this.ctrlsService = beans.ctrlsService;\n        this.filterManager = beans.filterManager;\n        this.rangeService = beans.rangeService;\n        this.advancedFilterService = beans.advancedFilterService;\n    }\n\n    private gridCtrl: GridCtrl;\n    private focusedCellPosition: CellPosition | null;\n    private restoredFocusedCellPosition: CellPosition | null;\n    private focusedHeaderPosition: HeaderPosition | null;\n    /** the column that had focus before it moved into the advanced filter */\n    private advancedFilterFocusColumn: AgColumn | undefined;\n\n    private static keyboardModeActive: boolean = false;\n    private static instanceCount: number = 0;\n\n    private static addKeyboardModeEvents(doc: Document): void {\n        if (this.instanceCount > 0) {\n            return;\n        }\n        doc.addEventListener('keydown', FocusService.toggleKeyboardMode);\n        doc.addEventListener('mousedown', FocusService.toggleKeyboardMode);\n    }\n\n    private static removeKeyboardModeEvents(doc: Document): void {\n        if (this.instanceCount > 0) return;\n        doc.addEventListener('keydown', FocusService.toggleKeyboardMode);\n        doc.addEventListener('mousedown', FocusService.toggleKeyboardMode);\n    }\n\n    private static toggleKeyboardMode(event: KeyboardEvent | MouseEvent | TouchEvent): void {\n        const isKeyboardActive = FocusService.keyboardModeActive;\n        const isKeyboardEvent = event.type === 'keydown';\n\n        if (isKeyboardEvent) {\n            // the following keys should not toggle keyboard mode.\n            if (event.ctrlKey || event.metaKey || event.altKey) {\n                return;\n            }\n        }\n\n        if (isKeyboardActive === isKeyboardEvent) {\n            return;\n        }\n\n        FocusService.keyboardModeActive = isKeyboardEvent;\n    }\n\n    private static unregisterGridCompController(doc: Document): void {\n        FocusService.removeKeyboardModeEvents(doc);\n    }\n\n    public postConstruct(): void {\n        const clearFocusedCellListener = this.clearFocusedCell.bind(this);\n\n        this.addManagedEventListeners({\n            columnPivotModeChanged: clearFocusedCellListener,\n            newColumnsLoaded: this.onColumnEverythingChanged.bind(this),\n            columnGroupOpened: clearFocusedCellListener,\n            columnRowGroupChanged: clearFocusedCellListener,\n        });\n\n        this.registerKeyboardFocusEvents();\n\n        this.ctrlsService.whenReady((p) => {\n            this.gridCtrl = p.gridCtrl;\n        });\n    }\n\n    private registerKeyboardFocusEvents(): void {\n        const eDocument = this.gos.getDocument();\n        FocusService.addKeyboardModeEvents(eDocument);\n\n        FocusService.instanceCount++;\n        this.addDestroyFunc(() => {\n            FocusService.instanceCount--;\n            FocusService.unregisterGridCompController(eDocument);\n        });\n    }\n\n    public onColumnEverythingChanged(): void {\n        // if the columns change, check and see if this column still exists. if it does, then\n        // we can keep the focused cell. if it doesn't, then we need to drop the focused cell.\n        if (!this.focusedCellPosition) {\n            return;\n        }\n\n        const col = this.focusedCellPosition.column;\n        const colFromColumnModel = this.columnModel.getCol(col.getId());\n\n        if (col !== colFromColumnModel) {\n            this.clearFocusedCell();\n        }\n    }\n\n    public isKeyboardMode(): boolean {\n        return FocusService.keyboardModeActive;\n    }\n\n    // we check if the browser is focusing something, and if it is, and\n    // it's the cell we think is focused, then return the cell. so this\n    // methods returns the cell if a) we think it has focus and b) the\n    // browser thinks it has focus. this then returns nothing if we\n    // first focus a cell, then second click outside the grid, as then the\n    // grid cell will still be focused as far as the grid is concerned,\n    // however the browser focus will have moved somewhere else.\n    public getFocusCellToUseAfterRefresh(): CellPosition | null {\n        if (this.gos.get('suppressFocusAfterRefresh') || !this.focusedCellPosition) {\n            return null;\n        }\n\n        // we check that the browser is actually focusing on the grid, if it is not, then\n        // we have nothing to worry about. we check for ROW data, as this covers both focused Rows (for Full Width Rows)\n        // and Cells (covers cells as cells live in rows)\n        if (this.isDomDataMissingInHierarchy(this.gos.getActiveDomElement(), RowCtrl.DOM_DATA_KEY_ROW_CTRL)) {\n            return null;\n        }\n\n        return this.focusedCellPosition;\n    }\n\n    public getFocusHeaderToUseAfterRefresh(): HeaderPosition | null {\n        if (this.gos.get('suppressFocusAfterRefresh') || !this.focusedHeaderPosition) {\n            return null;\n        }\n\n        // we check that the browser is actually focusing on the grid, if it is not, then\n        // we have nothing to worry about\n        if (\n            this.isDomDataMissingInHierarchy(\n                this.gos.getActiveDomElement(),\n                AbstractHeaderCellCtrl.DOM_DATA_KEY_HEADER_CTRL\n            )\n        ) {\n            return null;\n        }\n\n        return this.focusedHeaderPosition;\n    }\n\n    private isDomDataMissingInHierarchy(eBrowserCell: Node | null, key: string): boolean {\n        let ePointer = eBrowserCell;\n\n        while (ePointer) {\n            const data = this.gos.getDomData(ePointer, key);\n\n            if (data) {\n                return false;\n            }\n\n            ePointer = ePointer.parentNode;\n        }\n\n        return true;\n    }\n\n    public getFocusedCell(): CellPosition | null {\n        return this.focusedCellPosition;\n    }\n\n    public shouldRestoreFocus(cell: CellPosition): boolean {\n        if (this.isCellRestoreFocused(cell)) {\n            setTimeout(() => {\n                // Clear the restore focused cell position after the timeout to avoid\n                // the cell being focused again and stealing focus from another part of the app.\n                this.restoredFocusedCellPosition = null;\n            }, 0);\n            return true;\n        }\n        return false;\n    }\n\n    private isCellRestoreFocused(cellPosition: CellPosition): boolean {\n        if (this.restoredFocusedCellPosition == null) {\n            return false;\n        }\n\n        return this.cellPositionUtils.equals(cellPosition, this.restoredFocusedCellPosition);\n    }\n\n    public setRestoreFocusedCell(cellPosition: CellPosition): void {\n        if (this.getFrameworkOverrides().renderingEngine === 'react') {\n            // The restoredFocusedCellPosition is used in the React Rendering engine as we have to be able\n            // to support restoring focus after an async rendering.\n            this.restoredFocusedCellPosition = cellPosition;\n        }\n    }\n\n    private getFocusEventParams(): CommonCellFocusParams {\n        const { rowIndex, rowPinned, column } = this.focusedCellPosition!;\n\n        const params: CommonCellFocusParams = {\n            rowIndex: rowIndex,\n            rowPinned: rowPinned,\n            column: column,\n            isFullWidthCell: false,\n        };\n\n        const rowCtrl = this.rowRenderer.getRowByPosition({ rowIndex, rowPinned });\n\n        if (rowCtrl) {\n            params.isFullWidthCell = rowCtrl.isFullWidth();\n        }\n\n        return params;\n    }\n\n    public clearFocusedCell(): void {\n        this.restoredFocusedCellPosition = null;\n        if (this.focusedCellPosition == null) {\n            return;\n        }\n\n        const event: WithoutGridCommon<CellFocusClearedEvent> = {\n            type: 'cellFocusCleared',\n            ...this.getFocusEventParams(),\n        };\n\n        this.focusedCellPosition = null;\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public setFocusedCell(params: CellFocusedParams): void {\n        const { column, rowIndex, rowPinned, forceBrowserFocus = false, preventScrollOnBrowserFocus = false } = params;\n\n        const gridColumn = this.columnModel.getCol(column!);\n\n        // if column doesn't exist, then blank the focused cell and return. this can happen when user sets new columns,\n        // and the focused cell is in a column that no longer exists. after columns change, the grid refreshes and tries\n        // to re-focus the focused cell.\n        if (!gridColumn) {\n            this.focusedCellPosition = null;\n            return;\n        }\n\n        this.focusedCellPosition = gridColumn\n            ? {\n                  rowIndex: rowIndex!,\n                  rowPinned: _makeNull(rowPinned),\n                  column: gridColumn,\n              }\n            : null;\n\n        const event: WithoutGridCommon<CellFocusedEvent> = {\n            type: 'cellFocused',\n            ...this.getFocusEventParams(),\n            forceBrowserFocus,\n            preventScrollOnBrowserFocus,\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public isCellFocused(cellPosition: CellPosition): boolean {\n        if (this.focusedCellPosition == null) {\n            return false;\n        }\n\n        return this.cellPositionUtils.equals(cellPosition, this.focusedCellPosition);\n    }\n\n    public isRowNodeFocused(rowNode: RowNode): boolean {\n        return this.isRowFocused(rowNode.rowIndex!, rowNode.rowPinned);\n    }\n\n    public isHeaderWrapperFocused(headerCtrl: HeaderCellCtrl): boolean {\n        if (this.focusedHeaderPosition == null) {\n            return false;\n        }\n\n        const column = headerCtrl.getColumnGroupChild();\n        const headerRowIndex = headerCtrl.getRowIndex();\n        const pinned = headerCtrl.getPinned();\n\n        const { column: focusedColumn, headerRowIndex: focusedHeaderRowIndex } = this.focusedHeaderPosition;\n\n        return (\n            column === focusedColumn && headerRowIndex === focusedHeaderRowIndex && pinned == focusedColumn.getPinned()\n        );\n    }\n\n    public clearFocusedHeader(): void {\n        this.focusedHeaderPosition = null;\n    }\n\n    public getFocusedHeader(): HeaderPosition | null {\n        return this.focusedHeaderPosition;\n    }\n\n    public setFocusedHeader(headerRowIndex: number, column: AgColumnGroup | AgColumn): void {\n        this.focusedHeaderPosition = { headerRowIndex, column };\n    }\n\n    public focusHeaderPosition(params: {\n        headerPosition: HeaderPosition | null;\n        direction?: 'Before' | 'After' | null;\n        fromTab?: boolean;\n        allowUserOverride?: boolean;\n        event?: KeyboardEvent;\n        fromCell?: boolean;\n        rowWithoutSpanValue?: number;\n    }): boolean {\n        if (this.gos.get('suppressHeaderFocus')) {\n            return false;\n        }\n\n        const { direction, fromTab, allowUserOverride, event, fromCell, rowWithoutSpanValue } = params;\n        let { headerPosition } = params;\n\n        if (fromCell && this.filterManager?.isAdvancedFilterHeaderActive()) {\n            return this.focusAdvancedFilter(headerPosition);\n        }\n\n        if (allowUserOverride) {\n            const currentPosition = this.getFocusedHeader();\n            const headerRowCount = this.headerNavigationService.getHeaderRowCount();\n\n            if (fromTab) {\n                const userFunc = this.gos.getCallback('tabToNextHeader');\n                if (userFunc) {\n                    headerPosition = this.getHeaderPositionFromUserFunc({\n                        userFunc,\n                        direction,\n                        currentPosition,\n                        headerPosition,\n                        headerRowCount,\n                    });\n                }\n            } else {\n                const userFunc = this.gos.getCallback('navigateToNextHeader');\n                if (userFunc && event) {\n                    const params: WithoutGridCommon<NavigateToNextHeaderParams> = {\n                        key: event.key,\n                        previousHeaderPosition: currentPosition,\n                        nextHeaderPosition: headerPosition,\n                        headerRowCount,\n                        event,\n                    };\n                    headerPosition = userFunc(params);\n                }\n            }\n        }\n\n        if (!headerPosition) {\n            return false;\n        }\n\n        return this.focusProvidedHeaderPosition({\n            headerPosition,\n            direction,\n            event,\n            fromCell,\n            rowWithoutSpanValue,\n        });\n    }\n\n    public focusHeaderPositionFromUserFunc(params: {\n        userFunc: (params: WithoutGridCommon<TabToNextHeaderParams>) => boolean | HeaderPosition | null;\n        headerPosition: HeaderPosition | null;\n        direction?: 'Before' | 'After' | null;\n        event?: KeyboardEvent;\n    }): boolean {\n        if (this.gos.get('suppressHeaderFocus')) {\n            return false;\n        }\n        const { userFunc, headerPosition, direction, event } = params;\n        const currentPosition = this.getFocusedHeader();\n        const headerRowCount = this.headerNavigationService.getHeaderRowCount();\n        const newHeaderPosition = this.getHeaderPositionFromUserFunc({\n            userFunc,\n            direction,\n            currentPosition,\n            headerPosition,\n            headerRowCount,\n        });\n        return (\n            !!newHeaderPosition &&\n            this.focusProvidedHeaderPosition({\n                headerPosition: newHeaderPosition,\n                direction,\n                event,\n            })\n        );\n    }\n\n    private getHeaderPositionFromUserFunc(params: {\n        userFunc: (params: WithoutGridCommon<TabToNextHeaderParams>) => boolean | HeaderPosition | null;\n        direction?: 'Before' | 'After' | null;\n        currentPosition: HeaderPosition | null;\n        headerPosition: HeaderPosition | null;\n        headerRowCount: number;\n    }): HeaderPosition | null {\n        const { userFunc, direction, currentPosition, headerPosition, headerRowCount } = params;\n        const userFuncParams: WithoutGridCommon<TabToNextHeaderParams> = {\n            backwards: direction === 'Before',\n            previousHeaderPosition: currentPosition,\n            nextHeaderPosition: headerPosition,\n            headerRowCount,\n        };\n        const userResult = userFunc(userFuncParams);\n        if (userResult === true || userResult === null) {\n            if (userResult === null) {\n                _warnOnce(\n                    'Since v31.3 Returning `null` from tabToNextHeader is deprecated. Return `true` to stay on the current header, or `false` to let the browser handle the tab behaviour.'\n                );\n            }\n            return currentPosition;\n        }\n        if (userResult === false) {\n            return null;\n        }\n        return userResult;\n    }\n\n    private focusProvidedHeaderPosition(params: {\n        headerPosition: HeaderPosition;\n        direction?: 'Before' | 'After' | null;\n        event?: KeyboardEvent;\n        fromCell?: boolean;\n        rowWithoutSpanValue?: number;\n    }): boolean {\n        const { headerPosition, direction, fromCell, rowWithoutSpanValue, event } = params;\n        const { column, headerRowIndex } = headerPosition;\n\n        if (headerRowIndex === -1) {\n            if (this.filterManager?.isAdvancedFilterHeaderActive()) {\n                return this.focusAdvancedFilter(headerPosition);\n            }\n            return this.focusGridView(column as AgColumn);\n        }\n\n        this.headerNavigationService.scrollToColumn(column as AgColumn, direction);\n\n        const headerRowContainerCtrl = this.ctrlsService.getHeaderRowContainerCtrl(column.getPinned());\n\n        // this will automatically call the setFocusedHeader method above\n        const focusSuccess = headerRowContainerCtrl.focusHeader(\n            headerPosition.headerRowIndex,\n            column as AgColumn,\n            event\n        );\n\n        if (focusSuccess && (rowWithoutSpanValue != null || fromCell)) {\n            this.headerNavigationService.setCurrentHeaderRowWithoutSpan(rowWithoutSpanValue ?? -1);\n        }\n\n        return focusSuccess;\n    }\n\n    public focusFirstHeader(): boolean {\n        let firstColumn: AgColumn | AgColumnGroup = this.visibleColsService.getAllCols()[0];\n        if (!firstColumn) {\n            return false;\n        }\n\n        if (firstColumn.getParent()) {\n            firstColumn = this.visibleColsService.getColGroupAtLevel(firstColumn, 0)!;\n        }\n\n        const headerPosition = this.headerPositionUtils.getHeaderIndexToFocus(firstColumn, 0);\n\n        return this.focusHeaderPosition({\n            headerPosition,\n            rowWithoutSpanValue: 0,\n        });\n    }\n\n    public focusLastHeader(event?: KeyboardEvent): boolean {\n        const headerRowIndex = this.headerNavigationService.getHeaderRowCount() - 1;\n        const column = _last(this.visibleColsService.getAllCols());\n\n        return this.focusHeaderPosition({\n            headerPosition: { headerRowIndex, column },\n            rowWithoutSpanValue: -1,\n            event,\n        });\n    }\n\n    public focusPreviousFromFirstCell(event?: KeyboardEvent): boolean {\n        if (this.filterManager?.isAdvancedFilterHeaderActive()) {\n            return this.focusAdvancedFilter(null);\n        }\n        return this.focusLastHeader(event);\n    }\n\n    public isAnyCellFocused(): boolean {\n        return !!this.focusedCellPosition;\n    }\n\n    public isRowFocused(rowIndex: number, rowPinnedType: RowPinnedType): boolean {\n        if (this.focusedCellPosition == null) {\n            return false;\n        }\n\n        return (\n            this.focusedCellPosition.rowIndex === rowIndex &&\n            this.focusedCellPosition.rowPinned === _makeNull(rowPinnedType)\n        );\n    }\n\n    public findFocusableElements(rootNode: HTMLElement, exclude?: string | null, onlyUnmanaged = false): HTMLElement[] {\n        const focusableString = FOCUSABLE_SELECTOR;\n        let excludeString = FOCUSABLE_EXCLUDE;\n\n        if (exclude) {\n            excludeString += ', ' + exclude;\n        }\n\n        if (onlyUnmanaged) {\n            excludeString += ', [tabindex=\"-1\"]';\n        }\n\n        const nodes = Array.prototype.slice\n            .apply(rootNode.querySelectorAll(focusableString))\n            .filter((node: HTMLElement) => {\n                return _isVisible(node);\n            }) as HTMLElement[];\n        const excludeNodes = Array.prototype.slice.apply(rootNode.querySelectorAll(excludeString)) as HTMLElement[];\n\n        if (!excludeNodes.length) {\n            return nodes;\n        }\n\n        const diff = (a: HTMLElement[], b: HTMLElement[]) => a.filter((element) => b.indexOf(element) === -1);\n        return diff(nodes, excludeNodes);\n    }\n\n    public focusInto(rootNode: HTMLElement, up = false, onlyUnmanaged = false): boolean {\n        const focusableElements = this.findFocusableElements(rootNode, null, onlyUnmanaged);\n        const toFocus = up ? _last(focusableElements) : focusableElements[0];\n\n        if (toFocus) {\n            toFocus.focus({ preventScroll: true });\n            return true;\n        }\n\n        return false;\n    }\n\n    public findFocusableElementBeforeTabGuard(\n        rootNode: HTMLElement,\n        referenceElement?: HTMLElement\n    ): HTMLElement | null {\n        if (!referenceElement) {\n            return null;\n        }\n\n        const focusableElements = this.findFocusableElements(rootNode);\n        const referenceIndex = focusableElements.indexOf(referenceElement);\n\n        if (referenceIndex === -1) {\n            return null;\n        }\n\n        let lastTabGuardIndex = -1;\n        for (let i = referenceIndex - 1; i >= 0; i--) {\n            if (focusableElements[i].classList.contains(TabGuardClassNames.TAB_GUARD_TOP)) {\n                lastTabGuardIndex = i;\n                break;\n            }\n        }\n\n        if (lastTabGuardIndex <= 0) {\n            return null;\n        }\n\n        return focusableElements[lastTabGuardIndex - 1];\n    }\n\n    public findNextFocusableElement(\n        rootNode: HTMLElement = this.eGridDiv,\n        onlyManaged?: boolean | null,\n        backwards?: boolean\n    ): HTMLElement | null {\n        const focusable = this.findFocusableElements(rootNode, onlyManaged ? ':not([tabindex=\"-1\"])' : null);\n        const activeEl = this.gos.getActiveDomElement() as HTMLElement;\n        let currentIndex: number;\n\n        if (onlyManaged) {\n            currentIndex = focusable.findIndex((el) => el.contains(activeEl));\n        } else {\n            currentIndex = focusable.indexOf(activeEl);\n        }\n\n        const nextIndex = currentIndex + (backwards ? -1 : 1);\n\n        if (nextIndex < 0 || nextIndex >= focusable.length) {\n            return null;\n        }\n\n        return focusable[nextIndex];\n    }\n\n    public isTargetUnderManagedComponent(rootNode: HTMLElement, target?: HTMLElement): boolean {\n        if (!target) {\n            return false;\n        }\n\n        const managedContainers = rootNode.querySelectorAll(`.${ManagedFocusFeature.FOCUS_MANAGED_CLASS}`);\n\n        if (!managedContainers.length) {\n            return false;\n        }\n\n        for (let i = 0; i < managedContainers.length; i++) {\n            if (managedContainers[i].contains(target)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public findTabbableParent(node: HTMLElement | null, limit: number = 5): HTMLElement | null {\n        let counter = 0;\n\n        while (node && _getTabIndex(node) === null && ++counter <= limit) {\n            node = node.parentElement;\n        }\n\n        if (_getTabIndex(node) === null) {\n            return null;\n        }\n\n        return node;\n    }\n\n    public focusGridView(column?: AgColumn, backwards?: boolean): boolean {\n        // if suppressCellFocus is `true`, it means the user does not want to\n        // navigate between the cells using tab. Instead, we put focus on either\n        // the header or after the grid, depending on whether tab or shift-tab was pressed.\n        if (this.gos.get('suppressCellFocus')) {\n            if (backwards) {\n                if (!this.gos.get('suppressHeaderFocus')) {\n                    return this.focusLastHeader();\n                }\n                return this.focusNextGridCoreContainer(true, true);\n            }\n\n            return this.focusNextGridCoreContainer(false);\n        }\n\n        const nextRow = backwards ? this.rowPositionUtils.getLastRow() : this.rowPositionUtils.getFirstRow();\n\n        if (!nextRow) {\n            return false;\n        }\n\n        const { rowIndex, rowPinned } = nextRow;\n        const focusedHeader = this.getFocusedHeader();\n\n        if (!column && focusedHeader) {\n            column = focusedHeader.column as AgColumn;\n        }\n\n        if (rowIndex == null || !column) {\n            return false;\n        }\n\n        this.navigationService.ensureCellVisible({ rowIndex, column, rowPinned });\n\n        this.setFocusedCell({\n            rowIndex,\n            column,\n            rowPinned: _makeNull(rowPinned),\n            forceBrowserFocus: true,\n        });\n\n        this.rangeService?.setRangeToCell({ rowIndex, rowPinned, column });\n\n        return true;\n    }\n\n    public focusNextGridCoreContainer(backwards: boolean, forceOut: boolean = false): boolean {\n        if (!forceOut && this.gridCtrl.focusNextInnerContainer(backwards)) {\n            return true;\n        }\n\n        if (forceOut || (!backwards && !this.gridCtrl.isDetailGrid())) {\n            this.gridCtrl.forceFocusOutOfContainer(backwards);\n        }\n\n        return false;\n    }\n\n    private focusAdvancedFilter(position: HeaderPosition | null): boolean {\n        this.advancedFilterFocusColumn = position?.column as AgColumn | undefined;\n        return this.advancedFilterService?.getCtrl().focusHeaderComp() ?? false;\n    }\n\n    public focusNextFromAdvancedFilter(backwards?: boolean, forceFirstColumn?: boolean): boolean {\n        const column =\n            (forceFirstColumn ? undefined : this.advancedFilterFocusColumn) ??\n            this.visibleColsService.getAllCols()?.[0];\n        if (backwards) {\n            return this.focusHeaderPosition({\n                headerPosition: {\n                    column: column,\n                    headerRowIndex: this.headerNavigationService.getHeaderRowCount() - 1,\n                },\n            });\n        } else {\n            return this.focusGridView(column);\n        }\n    }\n\n    public clearAdvancedFilterColumn(): void {\n        this.advancedFilterFocusColumn = undefined;\n    }\n\n    public addFocusableContainer(container: FocusableContainer): void {\n        this.gridCtrl.addFocusableContainer(container);\n    }\n\n    public removeFocusableContainer(container: FocusableContainer): void {\n        this.gridCtrl.removeFocusableContainer(container);\n    }\n\n    public focusGridInnerElement(fromBottom?: boolean): boolean {\n        return this.gridCtrl.focusInnerElement(fromBottom);\n    }\n}\n", "import type { VisibleColsService } from '../columns/visibleColsService';\nimport type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\n\nexport class PinnedWidthService extends BeanStub implements NamedBean {\n    beanName = 'pinnedWidthService' as const;\n\n    private visibleColsService: VisibleColsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.visibleColsService = beans.visibleColsService;\n    }\n\n    private leftWidth: number;\n    private rightWidth: number;\n\n    public postConstruct(): void {\n        const listener = this.checkContainerWidths.bind(this);\n        this.addManagedEventListeners({\n            displayedColumnsChanged: listener,\n            displayedColumnsWidthChanged: listener,\n        });\n        this.addManagedPropertyListener('domLayout', listener);\n    }\n\n    private checkContainerWidths() {\n        const printLayout = this.gos.isDomLayout('print');\n\n        const newLeftWidth = printLayout ? 0 : this.visibleColsService.getColsLeftWidth();\n        const newRightWidth = printLayout ? 0 : this.visibleColsService.getDisplayedColumnsRightWidth();\n\n        if (newLeftWidth != this.leftWidth) {\n            this.leftWidth = newLeftWidth;\n            this.eventService.dispatchEvent({ type: 'leftPinnedWidthChanged' });\n        }\n\n        if (newRightWidth != this.rightWidth) {\n            this.rightWidth = newRightWidth;\n            this.eventService.dispatchEvent({ type: 'rightPinnedWidthChanged' });\n        }\n    }\n\n    public getPinnedRightWidth(): number {\n        return this.rightWidth;\n    }\n\n    public getPinnedLeftWidth(): number {\n        return this.leftWidth;\n    }\n}\n", "import type { VisibleColsService } from '../columns/visibleColsService';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport { DragSourceType } from '../dragAndDrop/dragAndDropService';\nimport type { GridSizeChangedEvent } from '../events';\nimport type { FocusService } from '../focusService';\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\nimport type { FocusableContainer } from '../interfaces/iFocusableContainer';\nimport type { IWatermark } from '../interfaces/iWatermark';\nimport type { LayoutView } from '../styling/layoutFeature';\nimport { LayoutFeature } from '../styling/layoutFeature';\nimport { _last } from '../utils/array';\nimport type { ComponentSelector } from '../widgets/component';\n\nexport interface IGridComp extends LayoutView {\n    setRtlClass(cssClass: string): void;\n    destroyGridUi(): void;\n    forceFocusOutOfContainer(up: boolean): void;\n    getFocusableContainers(): FocusableContainer[];\n    setCursor(value: string | null): void;\n    setUserSelect(value: string | null): void;\n}\n\nexport interface OptionalGridComponents {\n    paginationSelector?: ComponentSelector;\n    gridHeaderDropZonesSelector?: ComponentSelector;\n    sideBarSelector?: ComponentSelector;\n    statusBarSelector?: ComponentSelector;\n    watermarkSelector?: ComponentSelector;\n}\n\nexport class GridCtrl extends BeanStub {\n    private beans: BeanCollection;\n    private focusService: FocusService;\n    private visibleColsService: VisibleColsService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.beans = beans;\n        this.focusService = beans.focusService;\n        this.visibleColsService = beans.visibleColsService;\n    }\n\n    private view: IGridComp;\n    private eGridHostDiv: HTMLElement;\n    private eGui: HTMLElement;\n\n    private additionalFocusableContainers: Set<FocusableContainer> = new Set();\n\n    public setComp(view: IGridComp, eGridDiv: HTMLElement, eGui: HTMLElement): void {\n        this.view = view;\n        this.eGridHostDiv = eGridDiv;\n        this.eGui = eGui;\n\n        this.eGui.setAttribute('grid-id', this.gridId);\n\n        const { dragAndDropService, mouseEventService, ctrlsService, resizeObserverService } = this.beans;\n\n        // this drop target is just used to see if the drop event is inside the grid\n        dragAndDropService.addDropTarget({\n            getContainer: () => this.eGui,\n            isInterestedIn: (type) => type === DragSourceType.HeaderCell || type === DragSourceType.ToolPanel,\n            getIconName: () => 'notAllowed',\n        });\n\n        mouseEventService.stampTopLevelGridCompWithGridInstance(eGridDiv);\n\n        this.createManagedBean(new LayoutFeature(this.view));\n\n        this.addRtlSupport();\n\n        const unsubscribeFromResize = resizeObserverService.observeResize(\n            this.eGridHostDiv,\n            this.onGridSizeChanged.bind(this)\n        );\n        this.addDestroyFunc(() => unsubscribeFromResize());\n\n        ctrlsService.register('gridCtrl', this);\n    }\n\n    public isDetailGrid(): boolean {\n        const el = this.focusService.findTabbableParent(this.getGui());\n\n        return el?.getAttribute('row-id')?.startsWith('detail') || false;\n    }\n\n    public getOptionalSelectors(): OptionalGridComponents {\n        const beans = this.beans;\n        return {\n            paginationSelector: beans.paginationService?.getPaginationSelector(),\n            gridHeaderDropZonesSelector: beans.columnDropZonesService?.getDropZoneSelector(),\n            sideBarSelector: beans.sideBarService?.getSideBarSelector(),\n            statusBarSelector: beans.statusBarService?.getStatusPanelSelector(),\n            watermarkSelector: (beans.licenseManager as IWatermark)?.getWatermarkSelector(),\n        };\n    }\n\n    private onGridSizeChanged(): void {\n        const event: WithoutGridCommon<GridSizeChangedEvent> = {\n            type: 'gridSizeChanged',\n            clientWidth: this.eGridHostDiv.clientWidth,\n            clientHeight: this.eGridHostDiv.clientHeight,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private addRtlSupport(): void {\n        const cssClass = this.gos.get('enableRtl') ? 'ag-rtl' : 'ag-ltr';\n        this.view.setRtlClass(cssClass);\n    }\n\n    public destroyGridUi(): void {\n        this.view.destroyGridUi();\n    }\n\n    public getGui(): HTMLElement {\n        return this.eGui;\n    }\n\n    public setResizeCursor(on: boolean): void {\n        this.view.setCursor(on ? 'ew-resize' : null);\n    }\n\n    public disableUserSelect(on: boolean): void {\n        this.view.setUserSelect(on ? 'none' : null);\n    }\n\n    public focusNextInnerContainer(backwards: boolean): boolean {\n        const focusableContainers = this.getFocusableContainers();\n        const activeEl = this.gos.getActiveDomElement();\n        const idxWithFocus = focusableContainers.findIndex((container) => container.getGui().contains(activeEl));\n        const nextIdx = idxWithFocus + (backwards ? -1 : 1);\n\n        if (nextIdx < 0 || nextIdx >= focusableContainers.length) {\n            return false;\n        }\n\n        if (nextIdx === 0) {\n            if (idxWithFocus > 0) {\n                const allColumns = this.visibleColsService.getAllCols();\n                const lastColumn = _last(allColumns);\n                if (this.focusService.focusGridView(lastColumn, true)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        return this.focusContainer(focusableContainers[nextIdx], backwards);\n    }\n\n    public focusInnerElement(fromBottom?: boolean): boolean {\n        const focusableContainers = this.getFocusableContainers();\n        const allColumns = this.visibleColsService.getAllCols();\n\n        const userCallbackFunction = this.gos.getCallback('focusGridInnerElement');\n\n        if (userCallbackFunction && userCallbackFunction({ fromBottom: !!fromBottom })) {\n            return true;\n        }\n\n        if (fromBottom) {\n            if (focusableContainers.length > 1) {\n                return this.focusContainer(_last(focusableContainers), true);\n            }\n\n            const lastColumn = _last(allColumns);\n            if (this.focusService.focusGridView(lastColumn, true)) {\n                return true;\n            }\n        }\n\n        if (this.gos.get('headerHeight') === 0 || this.gos.get('suppressHeaderFocus')) {\n            if (this.focusService.focusGridView(allColumns[0])) {\n                return true;\n            }\n\n            for (let i = 1; i < focusableContainers.length; i++) {\n                if (this.focusService.focusInto(focusableContainers[i].getGui())) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        return this.focusService.focusFirstHeader();\n    }\n\n    public forceFocusOutOfContainer(up = false): void {\n        this.view.forceFocusOutOfContainer(up);\n    }\n\n    public addFocusableContainer(container: FocusableContainer): void {\n        this.additionalFocusableContainers.add(container);\n    }\n\n    public removeFocusableContainer(container: FocusableContainer): void {\n        this.additionalFocusableContainers.delete(container);\n    }\n\n    private focusContainer(comp: FocusableContainer, up?: boolean): boolean {\n        comp?.setAllowFocus?.(true);\n        const result = this.focusService.focusInto(comp.getGui(), up);\n        comp?.setAllowFocus?.(false);\n        return result;\n    }\n\n    private getFocusableContainers(): FocusableContainer[] {\n        return [...this.view.getFocusableContainers(), ...this.additionalFocusableContainers.values()];\n    }\n\n    public override destroy(): void {\n        this.additionalFocusableContainers.clear();\n        super.destroy();\n    }\n}\n", "import type { GridBodyComp } from '../gridBodyComp/gridBodyComp';\nimport { GridBodySelector } from '../gridBodyComp/gridBodyComp';\nimport type { FocusableContainer } from '../interfaces/iFocusableContainer';\nimport type { ISideBar } from '../interfaces/iSideBar';\nimport type { UpdateLayoutClassesParams } from '../styling/layoutFeature';\nimport { LayoutCssClasses } from '../styling/layoutFeature';\nimport { _isVisible } from '../utils/dom';\nimport { _log } from '../utils/function';\nimport type { ComponentSelector } from '../widgets/component';\nimport { RefPlaceholder } from '../widgets/component';\nimport type { Component } from '../widgets/component';\nimport { TabGuardComp } from '../widgets/tabGuardComp';\nimport type { IGridComp, OptionalGridComponents } from './gridCtrl';\nimport { GridCtrl } from './gridCtrl';\n\nexport class GridComp extends TabGuardComp {\n    private readonly gridBody: GridBodyComp = RefPlaceholder;\n    private readonly sideBar: ISideBar & Component = RefPlaceholder;\n    private readonly pagination: TabGuardComp = RefPlaceholder;\n    private readonly rootWrapperBody: HTMLElement = RefPlaceholder;\n\n    private eGridDiv: HTMLElement;\n\n    constructor(eGridDiv: HTMLElement) {\n        super();\n        this.eGridDiv = eGridDiv;\n    }\n\n    public postConstruct(): void {\n        const compProxy: IGridComp = {\n            destroyGridUi: () => this.destroyBean(this),\n            setRtlClass: (cssClass: string) => this.addCssClass(cssClass),\n            forceFocusOutOfContainer: this.forceFocusOutOfContainer.bind(this),\n            updateLayoutClasses: this.updateLayoutClasses.bind(this),\n            getFocusableContainers: this.getFocusableContainers.bind(this),\n            setUserSelect: (value) => {\n                this.getGui().style.userSelect = value != null ? value : '';\n                this.getGui().style.webkitUserSelect = value != null ? value : '';\n            },\n            setCursor: (value) => {\n                this.getGui().style.cursor = value != null ? value : '';\n            },\n        };\n\n        const ctrl = this.createManagedBean(new GridCtrl());\n        const comps = ctrl.getOptionalSelectors();\n        const template = this.createTemplate(comps);\n        const requiredComps = [GridBodySelector, ...Object.values(comps).filter((c) => !!c)] as ComponentSelector[];\n        this.setTemplate(template, requiredComps);\n\n        ctrl.setComp(compProxy, this.eGridDiv, this.getGui());\n\n        this.insertGridIntoDom();\n\n        this.initialiseTabGuard({\n            // we want to override the default behaviour to do nothing for onTabKeyDown\n            onTabKeyDown: () => undefined,\n            focusInnerElement: (fromBottom) => ctrl.focusInnerElement(fromBottom),\n            forceFocusOutWhenTabGuardsAreEmpty: true,\n        });\n    }\n\n    private insertGridIntoDom(): void {\n        const eGui = this.getGui();\n        this.eGridDiv.appendChild(eGui);\n        this.addDestroyFunc(() => {\n            this.eGridDiv.removeChild(eGui);\n            if (this.gos.get('debug')) {\n                _log('Grid removed from DOM');\n            }\n        });\n    }\n\n    private updateLayoutClasses(cssClass: string, params: UpdateLayoutClassesParams): void {\n        const eRootWrapperBodyClassList = this.rootWrapperBody.classList;\n        eRootWrapperBodyClassList.toggle(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);\n        eRootWrapperBodyClassList.toggle(LayoutCssClasses.NORMAL, params.normal);\n        eRootWrapperBodyClassList.toggle(LayoutCssClasses.PRINT, params.print);\n\n        this.addOrRemoveCssClass(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);\n        this.addOrRemoveCssClass(LayoutCssClasses.NORMAL, params.normal);\n        this.addOrRemoveCssClass(LayoutCssClasses.PRINT, params.print);\n    }\n\n    private createTemplate(params: OptionalGridComponents): string {\n        const dropZones = params.gridHeaderDropZonesSelector\n            ? '<ag-grid-header-drop-zones></ag-grid-header-drop-zones>'\n            : '';\n        const sideBar = params.sideBarSelector ? '<ag-side-bar data-ref=\"sideBar\"></ag-side-bar>' : '';\n        const statusBar = params.statusBarSelector ? '<ag-status-bar></ag-status-bar>' : '';\n        const watermark = params.watermarkSelector ? '<ag-watermark></ag-watermark>' : '';\n        const pagination = params.paginationSelector ? '<ag-pagination data-ref=\"pagination\"></ag-pagination>' : '';\n\n        const template =\n            /* html */\n            `<div class=\"ag-root-wrapper\" role=\"presentation\">\n                ${dropZones}\n                <div class=\"ag-root-wrapper-body\" data-ref=\"rootWrapperBody\" role=\"presentation\">\n                    <ag-grid-body data-ref=\"gridBody\"></ag-grid-body>\n                    ${sideBar}\n                </div>\n                ${statusBar}\n                ${pagination}\n                ${watermark}\n            </div>`;\n\n        return template;\n    }\n\n    public override getFocusableElement(): HTMLElement {\n        return this.rootWrapperBody;\n    }\n\n    public override forceFocusOutOfContainer(up: boolean = false): void {\n        if (!up && this.pagination?.isDisplayed()) {\n            this.pagination.forceFocusOutOfContainer(up);\n            return;\n        }\n        super.forceFocusOutOfContainer(up);\n    }\n\n    protected getFocusableContainers(): FocusableContainer[] {\n        const focusableContainers: FocusableContainer[] = [this.gridBody];\n\n        [this.sideBar, this.pagination].forEach((comp) => {\n            if (comp) {\n                focusableContainers.push(comp);\n            }\n        });\n\n        return focusableContainers.filter((el) => _isVisible(el.getGui()));\n    }\n}\n", "import type { GridApi } from './api/gridApi';\nimport type { ColumnApplyStateService } from './columns/columnApplyStateService';\nimport type { ColumnModel } from './columns/columnModel';\nimport type { ColumnSizeService } from './columns/columnSizeService';\nimport type { NamedBean } from './context/bean';\nimport { BeanStub } from './context/beanStub';\nimport type { BeanCollection } from './context/context';\nimport type { CtrlsService } from './ctrlsService';\nimport type { AgColumn } from './entities/agColumn';\nimport type { AgProvidedColumnGroup } from './entities/agProvidedColumnGroup';\nimport type {\n    AgEvent,\n    AlignedGridColumnEvent,\n    AlignedGridScrollEvent,\n    BodyScrollEvent,\n    ColumnEvent,\n    ColumnGroupOpenedEvent,\n    ColumnResizedEvent,\n} from './events';\nimport type { AlignedGrid } from './interfaces/iAlignedGrid';\nimport type { WithoutGridCommon } from './interfaces/iCommon';\nimport { _errorOnce, _warnOnce } from './utils/function';\n\nexport class AlignedGridsService extends BeanStub implements NamedBean {\n    beanName = 'alignedGridsService' as const;\n\n    private columnModel: ColumnModel;\n    private columnSizeService: ColumnSizeService;\n    private ctrlsService: CtrlsService;\n    private columnApplyStateService: ColumnApplyStateService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.columnModel = beans.columnModel;\n        this.columnSizeService = beans.columnSizeService;\n        this.ctrlsService = beans.ctrlsService;\n        this.columnApplyStateService = beans.columnApplyStateService;\n    }\n\n    // flag to mark if we are consuming. to avoid cyclic events (ie other grid firing back to master\n    // while processing a master event) we mark this if consuming an event, and if we are, then\n    // we don't fire back any events.\n    private consuming = false;\n\n    private getAlignedGridApis(): GridApi[] {\n        let alignedGrids = this.gos.get('alignedGrids') ?? [];\n        const isCallbackConfig = typeof alignedGrids === 'function';\n        if (typeof alignedGrids === 'function') {\n            alignedGrids = alignedGrids();\n        }\n        const seeUrl = () => `See ${this.getFrameworkOverrides().getDocLink('aligned-grids')}`;\n        const apis = alignedGrids\n            .map((alignedGrid) => {\n                if (!alignedGrid) {\n                    _errorOnce(`alignedGrids contains an undefined option.`);\n                    if (!isCallbackConfig) {\n                        _errorOnce(`You may want to configure via a callback to avoid setup race conditions:\n                     \"alignedGrids: () => [linkedGrid]\"`);\n                    }\n                    _errorOnce(seeUrl());\n                    return;\n                }\n                if (this.isGridApi(alignedGrid)) {\n                    return alignedGrid;\n                }\n                // Extract the GridApi from a ref or component\n                const refOrComp = alignedGrid;\n                if ('current' in refOrComp) {\n                    return refOrComp.current?.api;\n                }\n\n                if (!refOrComp.api) {\n                    _errorOnce(\n                        `alignedGrids - No api found on the linked grid. If you are passing gridOptions to alignedGrids since v31 this is no longer valid. ${seeUrl()}`\n                    );\n                }\n                return refOrComp.api;\n            })\n            .filter((api) => !!api && !api.isDestroyed());\n\n        return apis as GridApi[];\n    }\n\n    private isGridApi(ref: AlignedGrid): ref is GridApi {\n        return !!ref && !!(ref as GridApi).dispatchEvent;\n    }\n\n    public postConstruct(): void {\n        const fireColumnEvent = this.fireColumnEvent.bind(this);\n        this.addManagedEventListeners({\n            columnMoved: fireColumnEvent,\n            columnVisible: fireColumnEvent,\n            columnPinned: fireColumnEvent,\n            columnGroupOpened: fireColumnEvent,\n            columnResized: fireColumnEvent,\n            bodyScroll: this.fireScrollEvent.bind(this),\n            alignedGridColumn: ({ event }) => this.onColumnEvent(event),\n            alignedGridScroll: ({ event }) => this.onScrollEvent(event),\n        });\n    }\n\n    // common logic across all the fire methods\n    private fireEvent(event: AgEvent): void {\n        // if we are already consuming, then we are acting on an event from a master,\n        // so we don't cause a cyclic firing of events\n        if (this.consuming) {\n            return;\n        }\n\n        this.getAlignedGridApis().forEach((api) => {\n            if (api.isDestroyed()) {\n                return;\n            }\n            api.dispatchEvent(event);\n        });\n    }\n\n    // common logic across all consume methods. very little common logic, however extracting\n    // guarantees consistency across the methods.\n    private onEvent(callback: () => void): void {\n        this.consuming = true;\n        callback();\n        this.consuming = false;\n    }\n\n    private fireColumnEvent(columnEvent: ColumnEvent): void {\n        const event: WithoutGridCommon<AlignedGridColumnEvent> = {\n            type: 'alignedGridColumn',\n            event: columnEvent,\n        };\n        this.fireEvent(event);\n    }\n\n    private fireScrollEvent(scrollEvent: BodyScrollEvent): void {\n        if (scrollEvent.direction !== 'horizontal') {\n            return;\n        }\n        const event: WithoutGridCommon<AlignedGridScrollEvent> = {\n            type: 'alignedGridScroll',\n            event: scrollEvent,\n        };\n        this.fireEvent(event);\n    }\n\n    private onScrollEvent(event: BodyScrollEvent): void {\n        this.onEvent(() => {\n            const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n            gridBodyCon.getScrollFeature().setHorizontalScrollPosition(event.left, true);\n        });\n    }\n\n    public getMasterColumns(event: ColumnEvent): AgColumn[] {\n        const result: AgColumn[] = [];\n        if (event.columns) {\n            event.columns.forEach((column: AgColumn) => {\n                result.push(column);\n            });\n        } else if (event.column) {\n            result.push(event.column as AgColumn);\n        }\n        return result;\n    }\n\n    public getColumnIds(event: ColumnEvent): string[] {\n        const result: string[] = [];\n        if (event.columns) {\n            event.columns.forEach((column) => {\n                result.push(column.getColId());\n            });\n        } else if (event.column) {\n            result.push(event.column.getColId());\n        }\n        return result;\n    }\n\n    public onColumnEvent(event: AgEvent): void {\n        this.onEvent(() => {\n            switch (event.type) {\n                case 'columnMoved':\n                case 'columnVisible':\n                case 'columnPinned':\n                case 'columnResized': {\n                    const colEvent = event as ColumnEvent;\n                    this.processColumnEvent(colEvent);\n                    break;\n                }\n                case 'columnGroupOpened': {\n                    const groupOpenedEvent = event as ColumnGroupOpenedEvent;\n                    this.processGroupOpenedEvent(groupOpenedEvent);\n                    break;\n                }\n                case 'columnPivotChanged':\n                    // we cannot support pivoting with aligned grids as the columns will be out of sync as the\n                    // grids will have columns created based on the row data of the grid.\n                    _warnOnce(\n                        'pivoting is not supported with aligned grids. ' +\n                            'You can only use one of these features at a time in a grid.'\n                    );\n                    break;\n            }\n        });\n    }\n\n    private processGroupOpenedEvent(groupOpenedEvent: ColumnGroupOpenedEvent): void {\n        groupOpenedEvent.columnGroups.forEach((masterGroup) => {\n            // likewise for column group\n            let otherColumnGroup: AgProvidedColumnGroup | null = null;\n\n            if (masterGroup) {\n                const groupId = masterGroup.getGroupId();\n                otherColumnGroup = this.columnModel.getProvidedColGroup(groupId);\n            }\n\n            if (masterGroup && !otherColumnGroup) {\n                return;\n            }\n\n            this.columnModel.setColumnGroupOpened(otherColumnGroup, masterGroup.isExpanded(), 'alignedGridChanged');\n        });\n    }\n\n    private processColumnEvent(colEvent: ColumnEvent): void {\n        // the column in the event is from the master grid. need to\n        // look up the equivalent from this (other) grid\n        const masterColumn = colEvent.column;\n        let otherColumn: AgColumn | null = null;\n\n        if (masterColumn) {\n            otherColumn = this.columnModel.getColDefCol(masterColumn.getColId());\n        }\n        // if event was with respect to a master column, that is not present in this\n        // grid, then we ignore the event\n        if (masterColumn && !otherColumn) {\n            return;\n        }\n\n        // in time, all the methods below should use the column ids, it's a more generic way\n        // of handling columns, and also allows for single or multi column events\n        const masterColumns = this.getMasterColumns(colEvent);\n\n        switch (colEvent.type) {\n            case 'columnMoved':\n                // when the user moves columns via applyColumnState, we can't depend on moving specific columns\n                // to an index, as there maybe be many indexes columns moved to (as wasn't result of a mouse drag).\n                // so only way to be sure is match the order of all columns using Column State.\n                {\n                    const srcColState = colEvent.api.getColumnState();\n                    const destColState = srcColState.map((s) => ({ colId: s.colId }));\n                    this.columnApplyStateService.applyColumnState(\n                        { state: destColState, applyOrder: true },\n                        'alignedGridChanged'\n                    );\n                }\n                break;\n            case 'columnVisible':\n                // when the user changes visibility via applyColumnState, we can't depend on visibility flag in event\n                // as there maybe be mix of true/false (as wasn't result of a mouse click to set visiblity).\n                // so only way to be sure is match the visibility of all columns using Column State.\n                {\n                    const srcColState = colEvent.api.getColumnState();\n                    const destColState = srcColState.map((s) => ({ colId: s.colId, hide: s.hide }));\n                    this.columnApplyStateService.applyColumnState({ state: destColState }, 'alignedGridChanged');\n                }\n                break;\n            case 'columnPinned':\n                {\n                    const srcColState = colEvent.api.getColumnState();\n                    const destColState = srcColState.map((s) => ({ colId: s.colId, pinned: s.pinned }));\n                    this.columnApplyStateService.applyColumnState({ state: destColState }, 'alignedGridChanged');\n                }\n                break;\n            case 'columnResized': {\n                const resizedEvent = colEvent as ColumnResizedEvent;\n\n                const columnWidths: {\n                    [key: string]: {\n                        key: string | AgColumn;\n                        newWidth: number;\n                    };\n                } = {};\n                masterColumns.forEach((column) => {\n                    columnWidths[column.getId()] = { key: column.getColId(), newWidth: column.getActualWidth() };\n                });\n                // don't set flex columns width\n                resizedEvent.flexColumns?.forEach((col) => {\n                    if (columnWidths[col.getId()]) {\n                        delete columnWidths[col.getId()];\n                    }\n                });\n                this.columnSizeService.setColumnWidths(\n                    Object.values(columnWidths),\n                    false,\n                    resizedEvent.finished,\n                    'alignedGridChanged'\n                );\n                break;\n            }\n        }\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const isVerticalScrollShowing = gridBodyCon.isVerticalScrollShowing();\n        this.getAlignedGridApis().forEach((api) => {\n            api.setGridOption('alwaysShowVerticalScroll', isVerticalScrollShowing);\n        });\n    }\n}\n", "import { AlignedGridsService } from './alignedGridsService';\nimport type { Module } from './interfaces/iModule';\nimport { VERSION } from './version';\n\nexport const AlignedGridsModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/aligned-grid',\n    beans: [AlignedGridsService],\n};\n", "import type { BeanCollection } from '../context/context';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { AgColumnGroup } from '../entities/agColumnGroup';\nimport type { AgProvidedColumnGroup } from '../entities/agProvidedColumnGroup';\nimport type { ColDef, ColGroupDef, HeaderLocation } from '../entities/colDef';\nimport type { ColumnEventType } from '../events';\nimport type { Column, ColumnGroup, ColumnPinnedType, ProvidedColumnGroup } from '../interfaces/iColumn';\nimport type { ApplyColumnStateParams, ColumnState } from './columnApplyStateService';\nimport type { ISizeColumnsToFitParams } from './columnSizeService';\n\nexport function getColumnDef<TValue = any, TData = any>(\n    beans: BeanCollection,\n    key: string | Column<TValue>\n): ColDef<TData, TValue> | null {\n    const column = beans.columnModel.getColDefCol(key);\n    if (column) {\n        return column.getColDef();\n    }\n    return null;\n}\n\nexport function getColumnDefs<TData = any>(beans: BeanCollection): (ColDef<TData> | ColGroupDef<TData>)[] | undefined {\n    return beans.columnModel.getColumnDefs();\n}\n\nexport function sizeColumnsToFit(beans: BeanCollection, paramsOrGridWidth?: ISizeColumnsToFitParams | number) {\n    if (typeof paramsOrGridWidth === 'number') {\n        beans.columnSizeService.sizeColumnsToFit(paramsOrGridWidth, 'api');\n    } else {\n        beans.ctrlsService.getGridBodyCtrl().sizeColumnsToFit(paramsOrGridWidth);\n    }\n}\n\nexport function setColumnGroupOpened(\n    beans: BeanCollection,\n    group: ProvidedColumnGroup | string,\n    newValue: boolean\n): void {\n    beans.columnModel.setColumnGroupOpened(group as AgProvidedColumnGroup | string, newValue, 'api');\n}\n\nexport function getColumnGroup(beans: BeanCollection, name: string, instanceId?: number): ColumnGroup | null {\n    return beans.visibleColsService.getColumnGroup(name, instanceId);\n}\n\nexport function getProvidedColumnGroup(beans: BeanCollection, name: string): ProvidedColumnGroup | null {\n    return beans.columnModel.getProvidedColGroup(name);\n}\n\nexport function getDisplayNameForColumn(beans: BeanCollection, column: Column, location: HeaderLocation): string {\n    return beans.columnNameService.getDisplayNameForColumn(column as AgColumn, location) || '';\n}\n\nexport function getDisplayNameForColumnGroup(\n    beans: BeanCollection,\n    columnGroup: ColumnGroup,\n    location: HeaderLocation\n): string {\n    return beans.columnNameService.getDisplayNameForColumnGroup(columnGroup as AgColumnGroup, location) || '';\n}\n\nexport function getColumn<TValue = any, TData = any>(\n    beans: BeanCollection,\n    key: string | ColDef<TData, TValue> | Column<TValue>\n): Column<TValue> | null {\n    return beans.columnModel.getColDefCol(key);\n}\n\nexport function getColumns(beans: BeanCollection): Column[] | null {\n    return beans.columnModel.getColDefCols();\n}\n\nexport function applyColumnState(beans: BeanCollection, params: ApplyColumnStateParams): boolean {\n    return beans.columnApplyStateService.applyColumnState(params, 'api');\n}\n\nexport function getColumnState(beans: BeanCollection): ColumnState[] {\n    return beans.columnGetStateService.getColumnState();\n}\n\nexport function resetColumnState(beans: BeanCollection): void {\n    beans.columnApplyStateService.resetColumnState('api');\n}\n\nexport function getColumnGroupState(beans: BeanCollection): { groupId: string; open: boolean }[] {\n    return beans.columnGroupStateService.getColumnGroupState();\n}\n\nexport function setColumnGroupState(beans: BeanCollection, stateItems: { groupId: string; open: boolean }[]): void {\n    beans.columnGroupStateService.setColumnGroupState(stateItems, 'api');\n}\n\nexport function resetColumnGroupState(beans: BeanCollection): void {\n    beans.columnGroupStateService.resetColumnGroupState('api');\n}\n\nexport function isPinning(beans: BeanCollection): boolean {\n    return beans.visibleColsService.isPinningLeft() || beans.visibleColsService.isPinningRight();\n}\n\nexport function isPinningLeft(beans: BeanCollection): boolean {\n    return beans.visibleColsService.isPinningLeft();\n}\n\nexport function isPinningRight(beans: BeanCollection): boolean {\n    return beans.visibleColsService.isPinningRight();\n}\n\nexport function getDisplayedColAfter(beans: BeanCollection, col: Column): Column | null {\n    return beans.visibleColsService.getColAfter(col as AgColumn);\n}\n\nexport function getDisplayedColBefore(beans: BeanCollection, col: Column): Column | null {\n    return beans.visibleColsService.getColBefore(col as AgColumn);\n}\n\n/** @deprecated v31.1 */\nexport function setColumnVisible(beans: BeanCollection, key: string | Column, visible: boolean): void {\n    beans.columnModel.setColsVisible([key as string | AgColumn], visible, 'api');\n}\n\nexport function setColumnsVisible(beans: BeanCollection, keys: (string | Column)[], visible: boolean): void {\n    beans.columnModel.setColsVisible(keys as (string | AgColumn)[], visible, 'api');\n}\n\n/** @deprecated v31.1 */\nexport function setColumnPinned(beans: BeanCollection, key: string | ColDef | Column, pinned: ColumnPinnedType): void {\n    beans.columnModel.setColsPinned([key], pinned, 'api');\n}\n\nexport function setColumnsPinned(\n    beans: BeanCollection,\n    keys: (string | ColDef | Column)[],\n    pinned: ColumnPinnedType\n): void {\n    beans.columnModel.setColsPinned(keys, pinned, 'api');\n}\n\nexport function getAllGridColumns(beans: BeanCollection): Column[] {\n    return beans.columnModel.getCols();\n}\n\nexport function getDisplayedLeftColumns(beans: BeanCollection): Column[] {\n    return beans.visibleColsService.getLeftCols();\n}\n\nexport function getDisplayedCenterColumns(beans: BeanCollection): Column[] {\n    return beans.visibleColsService.getCenterCols();\n}\n\nexport function getDisplayedRightColumns(beans: BeanCollection): Column[] {\n    return beans.visibleColsService.getRightCols();\n}\n\nexport function getAllDisplayedColumns(beans: BeanCollection): Column[] {\n    return beans.visibleColsService.getAllCols();\n}\n\nexport function getAllDisplayedVirtualColumns(beans: BeanCollection): Column[] {\n    return beans.columnViewportService.getViewportColumns();\n}\n\n/** @deprecated v31.1 */\nexport function moveColumn(beans: BeanCollection, key: string | ColDef | Column, toIndex: number): void {\n    beans.columnMoveService.moveColumns([key], toIndex, 'api');\n}\n\nexport function moveColumnByIndex(beans: BeanCollection, fromIndex: number, toIndex: number): void {\n    beans.columnMoveService.moveColumnByIndex(fromIndex, toIndex, 'api');\n}\n\nexport function moveColumns(beans: BeanCollection, columnsToMoveKeys: (string | ColDef | Column)[], toIndex: number) {\n    beans.columnMoveService.moveColumns(columnsToMoveKeys, toIndex, 'api');\n}\n\n/** @deprecated v31.1 */\nexport function setColumnWidth(\n    beans: BeanCollection,\n    key: string | ColDef | Column,\n    newWidth: number,\n    finished: boolean = true,\n    source: ColumnEventType = 'api'\n): void {\n    beans.columnSizeService.setColumnWidths([{ key, newWidth }], false, finished, source);\n}\n\nexport function setColumnWidths(\n    beans: BeanCollection,\n    columnWidths: { key: string | ColDef | Column; newWidth: number }[],\n    finished: boolean = true,\n    source: ColumnEventType = 'api'\n): void {\n    beans.columnSizeService.setColumnWidths(columnWidths, false, finished, source);\n}\n\nexport function getLeftDisplayedColumnGroups(beans: BeanCollection): (Column | ColumnGroup)[] {\n    return beans.visibleColsService.getTreeLeft();\n}\n\nexport function getCenterDisplayedColumnGroups(beans: BeanCollection): (Column | ColumnGroup)[] {\n    return beans.visibleColsService.getTreeCenter();\n}\n\nexport function getRightDisplayedColumnGroups(beans: BeanCollection): (Column | ColumnGroup)[] {\n    return beans.visibleColsService.getTreeRight();\n}\n\nexport function getAllDisplayedColumnGroups(beans: BeanCollection): (Column | ColumnGroup)[] | null {\n    return beans.visibleColsService.getAllTrees();\n}\n\n/** @deprecated v31.1 */\nexport function autoSizeColumn(beans: BeanCollection, key: string | ColDef | Column, skipHeader?: boolean): void {\n    return beans.columnAutosizeService.autoSizeCols({ colKeys: [key], skipHeader: skipHeader, source: 'api' });\n}\n\nexport function autoSizeColumns(beans: BeanCollection, keys: (string | ColDef | Column)[], skipHeader?: boolean): void {\n    beans.columnAutosizeService.autoSizeCols({ colKeys: keys, skipHeader: skipHeader, source: 'api' });\n}\n\nexport function autoSizeAllColumns(beans: BeanCollection, skipHeader?: boolean): void {\n    beans.columnAutosizeService.autoSizeAllColumns('api', skipHeader);\n}\n", "import { KeyCode } from '../constants/keyCode';\nimport type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { AgColumn } from '../entities/agColumn';\nimport type {\n    ColDef,\n    SuppressKeyboardEventParams,\n    ValueFormatterFunc,\n    ValueFormatterParams,\n    ValueGetterParams,\n} from '../entities/colDef';\nimport type {\n    BaseCellDataType,\n    CoreDataTypeDefinition,\n    DataTypeDefinition,\n    DateStringDataTypeDefinition,\n    ValueFormatterLiteParams,\n    ValueParserLiteParams,\n} from '../entities/dataType';\nimport type { AgGridEvent, DataTypesInferredEvent } from '../events';\nimport type { IClientSideRowModel } from '../interfaces/iClientSideRowModel';\nimport type { Column, ColumnEventName } from '../interfaces/iColumn';\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\nimport type { IEventListener } from '../interfaces/iEventEmitter';\nimport type { IRowModel } from '../interfaces/iRowModel';\nimport type { IRowNode } from '../interfaces/iRowNode';\nimport { ModuleNames } from '../modules/moduleNames';\nimport { ModuleRegistry } from '../modules/moduleRegistry';\nimport { _parseDateTimeFromString, _serialiseDate } from '../utils/date';\nimport { _warnOnce } from '../utils/function';\nimport { _exists, _toStringOrNull } from '../utils/generic';\nimport { _getValueUsingField } from '../utils/object';\nimport type { ValueService } from '../valueService/valueService';\nimport type { ColumnApplyStateService, ColumnState, ColumnStateParams } from './columnApplyStateService';\nimport type { ColumnModel } from './columnModel';\nimport { convertSourceType } from './columnModel';\nimport { convertColumnTypes } from './columnUtils';\nimport type { FuncColsService } from './funcColsService';\n\ninterface GroupSafeValueFormatter {\n    groupSafeValueFormatter?: ValueFormatterFunc;\n}\n\ntype FormatValueFunc = (params: { column: Column; node: IRowNode | null; value: any }) => string;\n\nconst MONTH_LOCALE_TEXT = {\n    january: 'January',\n    february: 'February',\n    march: 'March',\n    april: 'April',\n    may: 'May',\n    june: 'June',\n    july: 'July',\n    august: 'August',\n    september: 'September',\n    october: 'October',\n    november: 'November',\n    december: 'December',\n};\nconst MONTH_KEYS: (keyof typeof MONTH_LOCALE_TEXT)[] = [\n    'january',\n    'february',\n    'march',\n    'april',\n    'may',\n    'june',\n    'july',\n    'august',\n    'september',\n    'october',\n    'november',\n    'december',\n];\n\nexport class DataTypeService extends BeanStub implements NamedBean {\n    beanName = 'dataTypeService' as const;\n\n    private rowModel: IRowModel;\n    private columnModel: ColumnModel;\n    private funcColsService: FuncColsService;\n    private valueService: ValueService;\n    private columnApplyStateService: ColumnApplyStateService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.rowModel = beans.rowModel;\n        this.columnModel = beans.columnModel;\n        this.funcColsService = beans.funcColsService;\n        this.valueService = beans.valueService;\n        this.columnApplyStateService = beans.columnApplyStateService;\n    }\n\n    private dataTypeDefinitions: {\n        [cellDataType: string]: (DataTypeDefinition | CoreDataTypeDefinition) & GroupSafeValueFormatter;\n    } = {};\n    private dataTypeMatchers: { [cellDataType: string]: ((value: any) => boolean) | undefined };\n    private formatValueFuncs: { [cellDataType: string]: FormatValueFunc };\n    private isWaitingForRowData: boolean = false;\n    private hasObjectValueParser: boolean;\n    private hasObjectValueFormatter: boolean;\n    private groupHideOpenParents: boolean;\n    private initialData: any | null | undefined;\n    private isColumnTypeOverrideInDataTypeDefinitions: boolean = false;\n    // keep track of any column state updates whilst waiting for data types to be inferred\n    private columnStateUpdatesPendingInference: { [colId: string]: Set<keyof ColumnStateParams> } = {};\n    private columnStateUpdateListenerDestroyFuncs: (() => void)[] = [];\n\n    public postConstruct(): void {\n        this.groupHideOpenParents = this.gos.get('groupHideOpenParents');\n        this.addManagedPropertyListener('groupHideOpenParents', () => {\n            this.groupHideOpenParents = this.gos.get('groupHideOpenParents');\n        });\n        this.processDataTypeDefinitions();\n\n        this.addManagedPropertyListener('dataTypeDefinitions', (event) => {\n            this.processDataTypeDefinitions();\n            this.columnModel.recreateColumnDefs(convertSourceType(event.source));\n        });\n    }\n\n    private processDataTypeDefinitions(): void {\n        const defaultDataTypes = this.getDefaultDataTypes();\n        this.dataTypeDefinitions = {};\n        this.formatValueFuncs = {};\n        const generateFormatValueFunc = (\n            dataTypeDefinition: (DataTypeDefinition | CoreDataTypeDefinition) & GroupSafeValueFormatter\n        ): FormatValueFunc => {\n            return (params) => {\n                const { column, node, value } = params;\n                let valueFormatter = column.getColDef().valueFormatter;\n                if (valueFormatter === dataTypeDefinition.groupSafeValueFormatter) {\n                    valueFormatter = dataTypeDefinition.valueFormatter;\n                }\n                return this.valueService.formatValue(column as AgColumn, node, value, valueFormatter as any)!;\n            };\n        };\n        Object.entries(defaultDataTypes).forEach(([cellDataType, dataTypeDefinition]) => {\n            const mergedDataTypeDefinition = {\n                ...dataTypeDefinition,\n                groupSafeValueFormatter: this.createGroupSafeValueFormatter(dataTypeDefinition),\n            };\n            this.dataTypeDefinitions[cellDataType] = mergedDataTypeDefinition;\n            this.formatValueFuncs[cellDataType] = generateFormatValueFunc(mergedDataTypeDefinition);\n        });\n        const dataTypeDefinitions = this.gos.get('dataTypeDefinitions') ?? {};\n        this.dataTypeMatchers = {};\n\n        Object.entries(dataTypeDefinitions).forEach(([cellDataType, dataTypeDefinition]) => {\n            const mergedDataTypeDefinition = this.processDataTypeDefinition(\n                dataTypeDefinition,\n                dataTypeDefinitions,\n                [cellDataType],\n                defaultDataTypes\n            );\n            if (mergedDataTypeDefinition) {\n                this.dataTypeDefinitions[cellDataType] = mergedDataTypeDefinition;\n                if (dataTypeDefinition.dataTypeMatcher) {\n                    this.dataTypeMatchers[cellDataType] = dataTypeDefinition.dataTypeMatcher;\n                }\n                this.formatValueFuncs[cellDataType] = generateFormatValueFunc(mergedDataTypeDefinition);\n            }\n        });\n        this.checkObjectValueHandlers(defaultDataTypes);\n\n        ['dateString', 'text', 'number', 'boolean', 'date'].forEach((cellDataType) => {\n            const overriddenDataTypeMatcher = this.dataTypeMatchers[cellDataType];\n            if (overriddenDataTypeMatcher) {\n                // remove to maintain correct ordering\n                delete this.dataTypeMatchers[cellDataType];\n            }\n            this.dataTypeMatchers[cellDataType] =\n                overriddenDataTypeMatcher ?? defaultDataTypes[cellDataType].dataTypeMatcher;\n        });\n    }\n\n    private mergeDataTypeDefinitions(\n        parentDataTypeDefinition: DataTypeDefinition | CoreDataTypeDefinition,\n        childDataTypeDefinition: DataTypeDefinition\n    ): DataTypeDefinition {\n        const mergedDataTypeDefinition = {\n            ...parentDataTypeDefinition,\n            ...childDataTypeDefinition,\n        } as DataTypeDefinition;\n        if (\n            parentDataTypeDefinition.columnTypes &&\n            childDataTypeDefinition.columnTypes &&\n            (childDataTypeDefinition as any).appendColumnTypes\n        ) {\n            mergedDataTypeDefinition.columnTypes = [\n                ...convertColumnTypes(parentDataTypeDefinition.columnTypes),\n                ...convertColumnTypes(childDataTypeDefinition.columnTypes),\n            ];\n        }\n        return mergedDataTypeDefinition;\n    }\n\n    private processDataTypeDefinition(\n        dataTypeDefinition: DataTypeDefinition,\n        dataTypeDefinitions: { [key: string]: DataTypeDefinition },\n        alreadyProcessedDataTypes: string[],\n        defaultDataTypes: { [key: string]: CoreDataTypeDefinition }\n    ): (DataTypeDefinition & GroupSafeValueFormatter) | undefined {\n        let mergedDataTypeDefinition: DataTypeDefinition;\n        const extendsCellDataType = dataTypeDefinition.extendsDataType;\n\n        if (dataTypeDefinition.columnTypes) {\n            this.isColumnTypeOverrideInDataTypeDefinitions = true;\n        }\n\n        if (dataTypeDefinition.extendsDataType === dataTypeDefinition.baseDataType) {\n            let baseDataTypeDefinition = defaultDataTypes[extendsCellDataType];\n            const overriddenBaseDataTypeDefinition = dataTypeDefinitions[extendsCellDataType];\n            if (baseDataTypeDefinition && overriddenBaseDataTypeDefinition) {\n                // only if it's valid do we override with a provided one\n                baseDataTypeDefinition = overriddenBaseDataTypeDefinition;\n            }\n            if (!this.validateDataTypeDefinition(dataTypeDefinition, baseDataTypeDefinition, extendsCellDataType)) {\n                return undefined;\n            }\n            mergedDataTypeDefinition = this.mergeDataTypeDefinitions(baseDataTypeDefinition, dataTypeDefinition);\n        } else {\n            if (alreadyProcessedDataTypes.includes(extendsCellDataType)) {\n                _warnOnce(\n                    'Data type definition hierarchies (via the \"extendsDataType\" property) cannot contain circular references.'\n                );\n                return undefined;\n            }\n            const extendedDataTypeDefinition = dataTypeDefinitions[extendsCellDataType];\n            if (!this.validateDataTypeDefinition(dataTypeDefinition, extendedDataTypeDefinition, extendsCellDataType)) {\n                return undefined;\n            }\n            const mergedExtendedDataTypeDefinition = this.processDataTypeDefinition(\n                extendedDataTypeDefinition,\n                dataTypeDefinitions,\n                [...alreadyProcessedDataTypes, extendsCellDataType],\n                defaultDataTypes\n            );\n            if (!mergedExtendedDataTypeDefinition) {\n                return undefined;\n            }\n            mergedDataTypeDefinition = this.mergeDataTypeDefinitions(\n                mergedExtendedDataTypeDefinition,\n                dataTypeDefinition\n            );\n        }\n\n        return {\n            ...mergedDataTypeDefinition,\n            groupSafeValueFormatter: this.createGroupSafeValueFormatter(mergedDataTypeDefinition),\n        };\n    }\n\n    private validateDataTypeDefinition(\n        dataTypeDefinition: DataTypeDefinition,\n        parentDataTypeDefinition: DataTypeDefinition | CoreDataTypeDefinition,\n        parentCellDataType: string\n    ): boolean {\n        if (!parentDataTypeDefinition) {\n            _warnOnce(`The data type definition ${parentCellDataType} does not exist.`);\n            return false;\n        }\n        if (parentDataTypeDefinition.baseDataType !== dataTypeDefinition.baseDataType) {\n            _warnOnce('The \"baseDataType\" property of a data type definition must match that of its parent.');\n            return false;\n        }\n        return true;\n    }\n\n    private createGroupSafeValueFormatter(\n        dataTypeDefinition: DataTypeDefinition | CoreDataTypeDefinition\n    ): ValueFormatterFunc | undefined {\n        if (!dataTypeDefinition.valueFormatter) {\n            return undefined;\n        }\n        return (params: ValueFormatterParams) => {\n            if (params.node?.group) {\n                const aggFunc = params.column.getAggFunc();\n                if (aggFunc) {\n                    // the resulting type of these will be the same, so we call valueFormatter anyway\n                    if (aggFunc === 'first' || aggFunc === 'last') {\n                        return dataTypeDefinition.valueFormatter!(params);\n                    }\n\n                    if (dataTypeDefinition.baseDataType === 'number' && aggFunc !== 'count') {\n                        if (typeof params.value === 'number') {\n                            return dataTypeDefinition.valueFormatter!(params);\n                        }\n\n                        if (typeof params.value === 'object') {\n                            if (!params.value) {\n                                return undefined;\n                            }\n\n                            if ('toNumber' in params.value) {\n                                return dataTypeDefinition.valueFormatter!({\n                                    ...params,\n                                    value: params.value.toNumber(),\n                                });\n                            }\n\n                            if ('value' in params.value) {\n                                return dataTypeDefinition.valueFormatter!({\n                                    ...params,\n                                    value: params.value.value,\n                                });\n                            }\n                        }\n                    }\n                }\n\n                // we don't want to double format the value\n                // as this is already formatted by using the valueFormatter as the keyCreator\n                if (!this.gos.get('suppressGroupMaintainValueType')) {\n                    return undefined as any;\n                }\n            } else if (this.groupHideOpenParents && params.column.isRowGroupActive()) {\n                // `groupHideOpenParents` passes leaf values in the group column, so need to format still.\n                // If it's not a string, we know it hasn't been formatted. Otherwise check the data type matcher.\n                if (typeof params.value !== 'string' || dataTypeDefinition.dataTypeMatcher?.(params.value)) {\n                    return dataTypeDefinition.valueFormatter!(params);\n                }\n\n                // we don't want to double format the value\n                // as this is already formatted by using the valueFormatter as the keyCreator\n                if (!this.gos.get('suppressGroupMaintainValueType')) {\n                    return undefined as any;\n                }\n            }\n            return dataTypeDefinition.valueFormatter!(params);\n        };\n    }\n\n    public updateColDefAndGetColumnType(\n        colDef: ColDef,\n        userColDef: ColDef,\n        colId: string\n    ): string | string[] | undefined {\n        let { cellDataType } = userColDef;\n        const { field } = userColDef;\n        if (cellDataType === undefined) {\n            cellDataType = colDef.cellDataType;\n        }\n        if (cellDataType == null || cellDataType === true) {\n            cellDataType = this.canInferCellDataType(colDef, userColDef) ? this.inferCellDataType(field, colId) : false;\n        }\n        if (!cellDataType) {\n            colDef.cellDataType = false;\n            return undefined;\n        }\n        const dataTypeDefinition = this.dataTypeDefinitions[cellDataType as string];\n        if (!dataTypeDefinition) {\n            _warnOnce(`Missing data type definition - \"${cellDataType}\"`);\n            return undefined;\n        }\n        colDef.cellDataType = cellDataType;\n        if (dataTypeDefinition.groupSafeValueFormatter) {\n            colDef.valueFormatter = dataTypeDefinition.groupSafeValueFormatter;\n        }\n        if (dataTypeDefinition.valueParser) {\n            colDef.valueParser = dataTypeDefinition.valueParser;\n        }\n        if (!dataTypeDefinition.suppressDefaultProperties) {\n            this.setColDefPropertiesForBaseDataType(colDef, cellDataType, dataTypeDefinition, colId);\n        }\n        return dataTypeDefinition.columnTypes;\n    }\n\n    public addColumnListeners(column: AgColumn): void {\n        if (!this.isWaitingForRowData) {\n            return;\n        }\n        const columnStateUpdates = this.columnStateUpdatesPendingInference[column.getColId()];\n        if (!columnStateUpdates) {\n            return;\n        }\n        const columnListener: IEventListener<ColumnEventName> = (\n            event: AgGridEvent<any, any, ColumnEventName> & { key: keyof ColumnStateParams }\n        ) => {\n            columnStateUpdates.add(event.key);\n        };\n        column.addEventListener('columnStateUpdated', columnListener);\n        this.columnStateUpdateListenerDestroyFuncs.push(() =>\n            column.removeEventListener('columnStateUpdated', columnListener)\n        );\n    }\n\n    private canInferCellDataType(colDef: ColDef, userColDef: ColDef): boolean {\n        if (this.rowModel.getType() !== 'clientSide') {\n            return false;\n        }\n        const propsToCheckForInference = { cellRenderer: true, valueGetter: true, valueParser: true, refData: true };\n        if (this.doColDefPropsPreventInference(userColDef, propsToCheckForInference)) {\n            return false;\n        }\n        const columnTypes = userColDef.type === null ? colDef.type : userColDef.type;\n        if (columnTypes) {\n            const columnTypeDefs = this.gos.get('columnTypes') ?? {};\n            const hasPropsPreventingInference = convertColumnTypes(columnTypes).some((columnType) => {\n                const columnTypeDef = columnTypeDefs[columnType.trim()];\n                return columnTypeDef && this.doColDefPropsPreventInference(columnTypeDef, propsToCheckForInference);\n            });\n            if (hasPropsPreventingInference) {\n                return false;\n            }\n        }\n        return !this.doColDefPropsPreventInference(colDef, propsToCheckForInference);\n    }\n\n    private doColDefPropsPreventInference(\n        colDef: ColDef,\n        propsToCheckForInference: { [key in keyof ColDef]: boolean }\n    ): boolean {\n        return [\n            ['cellRenderer', 'agSparklineCellRenderer'],\n            ['valueGetter', undefined],\n            ['valueParser', undefined],\n            ['refData', undefined],\n        ].some(([prop, comparisonValue]: [keyof ColDef, any]) =>\n            this.doesColDefPropPreventInference(colDef, propsToCheckForInference, prop, comparisonValue)\n        );\n    }\n\n    private doesColDefPropPreventInference(\n        colDef: ColDef,\n        checkProps: { [key in keyof ColDef]: boolean },\n        prop: keyof ColDef,\n        comparisonValue?: any\n    ): boolean {\n        if (!checkProps[prop]) {\n            return false;\n        }\n        const value = colDef[prop];\n        if (value === null) {\n            checkProps[prop] = false;\n            return false;\n        } else {\n            return comparisonValue === undefined ? !!value : value === comparisonValue;\n        }\n    }\n\n    private inferCellDataType(field: string | undefined, colId: string): string | undefined {\n        if (!field) {\n            return undefined;\n        }\n        let value: any;\n        const initialData = this.getInitialData();\n        if (initialData) {\n            const fieldContainsDots = field.indexOf('.') >= 0 && !this.gos.get('suppressFieldDotNotation');\n            value = _getValueUsingField(initialData, field, fieldContainsDots);\n        } else {\n            this.initWaitForRowData(colId);\n        }\n        if (value == null) {\n            return undefined;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const [cellDataType] = Object.entries(this.dataTypeMatchers).find(([_cellDataType, dataTypeMatcher]) =>\n            dataTypeMatcher!(value)\n        ) ?? ['object'];\n        return cellDataType;\n    }\n\n    private getInitialData(): any {\n        const rowData = this.gos.get('rowData');\n        if (rowData?.length) {\n            return rowData[0];\n        } else if (this.initialData) {\n            return this.initialData;\n        } else {\n            const rowNodes = (this.rowModel as IClientSideRowModel).getRootNode().allLeafChildren;\n            if (rowNodes?.length) {\n                return rowNodes[0].data;\n            }\n        }\n        return null;\n    }\n\n    private initWaitForRowData(colId: string): void {\n        this.columnStateUpdatesPendingInference[colId] = new Set();\n        if (this.isWaitingForRowData) {\n            return;\n        }\n        this.isWaitingForRowData = true;\n        const columnTypeOverridesExist = this.isColumnTypeOverrideInDataTypeDefinitions;\n        if (columnTypeOverridesExist) {\n            this.columnModel.queueResizeOperations();\n        }\n        const [destroyFunc] = this.addManagedEventListeners({\n            rowDataUpdateStarted: (event) => {\n                const { firstRowData } = event;\n                if (!firstRowData) {\n                    return;\n                }\n                destroyFunc?.();\n                this.isWaitingForRowData = false;\n                this.processColumnsPendingInference(firstRowData, columnTypeOverridesExist);\n                this.columnStateUpdatesPendingInference = {};\n                if (columnTypeOverridesExist) {\n                    this.columnModel.processResizeOperations();\n                }\n                const dataTypesInferredEvent: WithoutGridCommon<DataTypesInferredEvent> = {\n                    type: 'dataTypesInferred',\n                };\n                this.eventService.dispatchEvent(dataTypesInferredEvent);\n            },\n        });\n    }\n\n    public isPendingInference(): boolean {\n        return this.isWaitingForRowData;\n    }\n\n    private processColumnsPendingInference(firstRowData: any, columnTypeOverridesExist: boolean): void {\n        this.initialData = firstRowData;\n        const state: ColumnState[] = [];\n        this.destroyColumnStateUpdateListeners();\n        const newRowGroupColumnStateWithoutIndex: { [colId: string]: ColumnState } = {};\n        const newPivotColumnStateWithoutIndex: { [colId: string]: ColumnState } = {};\n        Object.entries(this.columnStateUpdatesPendingInference).forEach(([colId, columnStateUpdates]) => {\n            const column = this.columnModel.getCol(colId);\n            if (!column) {\n                return;\n            }\n            const oldColDef = column.getColDef();\n            if (!this.columnModel.resetColDefIntoCol(column, 'cellDataTypeInferred')) {\n                return;\n            }\n            const newColDef = column.getColDef();\n            if (columnTypeOverridesExist && newColDef.type && newColDef.type !== oldColDef.type) {\n                const updatedColumnState = this.getUpdatedColumnState(column, columnStateUpdates);\n                if (updatedColumnState.rowGroup && updatedColumnState.rowGroupIndex == null) {\n                    newRowGroupColumnStateWithoutIndex[colId] = updatedColumnState;\n                }\n                if (updatedColumnState.pivot && updatedColumnState.pivotIndex == null) {\n                    newPivotColumnStateWithoutIndex[colId] = updatedColumnState;\n                }\n                state.push(updatedColumnState);\n            }\n        });\n        if (columnTypeOverridesExist) {\n            state.push(\n                ...this.funcColsService.generateColumnStateForRowGroupAndPivotIndexes(\n                    newRowGroupColumnStateWithoutIndex,\n                    newPivotColumnStateWithoutIndex\n                )\n            );\n        }\n        if (state.length) {\n            this.columnApplyStateService.applyColumnState({ state }, 'cellDataTypeInferred');\n        }\n        this.initialData = null;\n    }\n\n    private getUpdatedColumnState(column: AgColumn, columnStateUpdates: Set<keyof ColumnStateParams>): ColumnState {\n        const columnState = this.columnApplyStateService.getColumnStateFromColDef(column);\n        columnStateUpdates.forEach((key) => {\n            // if the column state has been updated, don't update again\n            delete columnState[key];\n            if (key === 'rowGroup') {\n                delete columnState.rowGroupIndex;\n            } else if (key === 'pivot') {\n                delete columnState.pivotIndex;\n            }\n        });\n        return columnState;\n    }\n\n    private checkObjectValueHandlers(defaultDataTypes: { [key: string]: CoreDataTypeDefinition }): void {\n        const resolvedObjectDataTypeDefinition = this.dataTypeDefinitions.object;\n        const defaultObjectDataTypeDefinition = defaultDataTypes.object;\n        this.hasObjectValueParser =\n            resolvedObjectDataTypeDefinition.valueParser !== defaultObjectDataTypeDefinition.valueParser;\n        this.hasObjectValueFormatter =\n            resolvedObjectDataTypeDefinition.valueFormatter !== defaultObjectDataTypeDefinition.valueFormatter;\n    }\n\n    private getDateStringTypeDefinition(column?: AgColumn | null): DateStringDataTypeDefinition {\n        if (!column) {\n            return this.dataTypeDefinitions.dateString as DateStringDataTypeDefinition;\n        }\n        return (this.getDataTypeDefinition(column) ??\n            this.dataTypeDefinitions.dateString) as DateStringDataTypeDefinition;\n    }\n\n    public getDateParserFunction(column?: AgColumn | null): (value: string | undefined) => Date | undefined {\n        return this.getDateStringTypeDefinition(column).dateParser!;\n    }\n\n    public getDateFormatterFunction(column?: AgColumn | null): (value: Date | undefined) => string | undefined {\n        return this.getDateStringTypeDefinition(column).dateFormatter!;\n    }\n\n    public getDataTypeDefinition(column: AgColumn): DataTypeDefinition | CoreDataTypeDefinition | undefined {\n        const colDef = column.getColDef();\n        if (!colDef.cellDataType) {\n            return undefined;\n        }\n        return this.dataTypeDefinitions[colDef.cellDataType as string];\n    }\n\n    public getBaseDataType(column: AgColumn): BaseCellDataType | undefined {\n        return this.getDataTypeDefinition(column)?.baseDataType;\n    }\n\n    public checkType(column: AgColumn, value: any): boolean {\n        if (value == null) {\n            return true;\n        }\n        const dataTypeMatcher = this.getDataTypeDefinition(column)?.dataTypeMatcher;\n        if (!dataTypeMatcher) {\n            return true;\n        }\n        return dataTypeMatcher(value);\n    }\n\n    public validateColDef(colDef: ColDef): void {\n        if (colDef.cellDataType === 'object') {\n            if (\n                colDef.valueFormatter === this.dataTypeDefinitions.object.groupSafeValueFormatter &&\n                !this.hasObjectValueFormatter\n            ) {\n                _warnOnce(\n                    'Cell data type is \"object\" but no value formatter has been provided. Please either provide an object data type definition with a value formatter, or set \"colDef.valueFormatter\"'\n                );\n            }\n            if (\n                colDef.editable &&\n                colDef.valueParser === this.dataTypeDefinitions.object.valueParser &&\n                !this.hasObjectValueParser\n            ) {\n                _warnOnce(\n                    'Cell data type is \"object\" but no value parser has been provided. Please either provide an object data type definition with a value parser, or set \"colDef.valueParser\"'\n                );\n            }\n        }\n    }\n\n    public getFormatValue(cellDataType: string): FormatValueFunc | undefined {\n        return this.formatValueFuncs[cellDataType];\n    }\n\n    private setColDefPropertiesForBaseDataType(\n        colDef: ColDef,\n        cellDataType: string,\n        dataTypeDefinition: (DataTypeDefinition | CoreDataTypeDefinition) & GroupSafeValueFormatter,\n        colId: string\n    ): void {\n        const formatValue = this.formatValueFuncs[cellDataType];\n        const usingSetFilter = ModuleRegistry.__isRegistered(ModuleNames.SetFilterModule, this.gridId);\n        const translate = this.localeService.getLocaleTextFunc();\n        const mergeFilterParams = (params: any) => {\n            const { filterParams } = colDef;\n            colDef.filterParams =\n                typeof filterParams === 'object'\n                    ? {\n                          ...filterParams,\n                          ...params,\n                      }\n                    : params;\n        };\n        switch (dataTypeDefinition.baseDataType) {\n            case 'number': {\n                colDef.cellEditor = 'agNumberCellEditor';\n                if (usingSetFilter) {\n                    mergeFilterParams({\n                        comparator: (a: string, b: string) => {\n                            const valA = a == null ? 0 : parseInt(a);\n                            const valB = b == null ? 0 : parseInt(b);\n                            if (valA === valB) return 0;\n                            return valA > valB ? 1 : -1;\n                        },\n                    });\n                }\n                break;\n            }\n            case 'boolean': {\n                colDef.cellEditor = 'agCheckboxCellEditor';\n                colDef.cellRenderer = 'agCheckboxCellRenderer';\n                colDef.suppressKeyboardEvent = (params: SuppressKeyboardEventParams<any, boolean>) =>\n                    !!params.colDef.editable && params.event.key === KeyCode.SPACE;\n                if (usingSetFilter) {\n                    mergeFilterParams({\n                        valueFormatter: (params: ValueFormatterParams) => {\n                            if (!_exists(params.value)) {\n                                return translate('blanks', '(Blanks)');\n                            }\n                            return translate(String(params.value), params.value ? 'True' : 'False');\n                        },\n                    });\n                } else {\n                    mergeFilterParams({\n                        maxNumConditions: 1,\n                        debounceMs: 0,\n                        filterOptions: [\n                            'empty',\n                            {\n                                displayKey: 'true',\n                                displayName: 'True',\n                                predicate: (_filterValues: any[], cellValue: any) => cellValue,\n                                numberOfInputs: 0,\n                            },\n                            {\n                                displayKey: 'false',\n                                displayName: 'False',\n                                predicate: (_filterValues: any[], cellValue: any) => cellValue === false,\n                                numberOfInputs: 0,\n                            },\n                        ],\n                    });\n                }\n                break;\n            }\n            case 'date': {\n                colDef.cellEditor = 'agDateCellEditor';\n                colDef.keyCreator = formatValue;\n                if (usingSetFilter) {\n                    mergeFilterParams({\n                        valueFormatter: (params: ValueFormatterParams) => {\n                            const valueFormatted = formatValue(params);\n                            return _exists(valueFormatted) ? valueFormatted : translate('blanks', '(Blanks)');\n                        },\n                        treeList: true,\n                        treeListFormatter: (pathKey: string | null, level: number) => {\n                            if (level === 1 && pathKey != null) {\n                                const monthKey = MONTH_KEYS[Number(pathKey) - 1];\n                                return translate(monthKey, MONTH_LOCALE_TEXT[monthKey]);\n                            }\n                            return pathKey ?? translate('blanks', '(Blanks)');\n                        },\n                    });\n                }\n                break;\n            }\n            case 'dateString': {\n                colDef.cellEditor = 'agDateStringCellEditor';\n                colDef.keyCreator = formatValue;\n                const convertToDate = (dataTypeDefinition as DateStringDataTypeDefinition).dateParser!;\n                if (usingSetFilter) {\n                    mergeFilterParams({\n                        valueFormatter: (params: ValueFormatterParams) => {\n                            const valueFormatted = formatValue(params);\n                            return _exists(valueFormatted) ? valueFormatted : translate('blanks', '(Blanks)');\n                        },\n                        treeList: true,\n                        treeListPathGetter: (value: string | null) => {\n                            const date = convertToDate(value ?? undefined);\n                            return date\n                                ? [String(date.getFullYear()), String(date.getMonth() + 1), String(date.getDate())]\n                                : null;\n                        },\n                        treeListFormatter: (pathKey: string | null, level: number) => {\n                            if (level === 1 && pathKey != null) {\n                                const monthKey = MONTH_KEYS[Number(pathKey) - 1];\n                                return translate(monthKey, MONTH_LOCALE_TEXT[monthKey]);\n                            }\n                            return pathKey ?? translate('blanks', '(Blanks)');\n                        },\n                    });\n                } else {\n                    mergeFilterParams({\n                        comparator: (filterDate: Date, cellValue: string | undefined) => {\n                            const cellAsDate = convertToDate(cellValue)!;\n                            if (cellValue == null || cellAsDate < filterDate) {\n                                return -1;\n                            }\n                            if (cellAsDate > filterDate) {\n                                return 1;\n                            }\n                            return 0;\n                        },\n                    });\n                }\n                break;\n            }\n            case 'object': {\n                colDef.cellEditorParams = {\n                    useFormatter: true,\n                };\n                colDef.comparator = (a: any, b: any) => {\n                    const column = this.columnModel.getColDefCol(colId);\n                    const colDef = column?.getColDef();\n                    if (!column || !colDef) {\n                        return 0;\n                    }\n                    const valA = a == null ? '' : formatValue({ column, node: null, value: a });\n                    const valB = b == null ? '' : formatValue({ column, node: null, value: b });\n                    if (valA === valB) return 0;\n                    return valA > valB ? 1 : -1;\n                };\n                colDef.keyCreator = formatValue;\n                if (usingSetFilter) {\n                    mergeFilterParams({\n                        valueFormatter: (params: ValueFormatterParams) => {\n                            const valueFormatted = formatValue(params);\n                            return _exists(valueFormatted) ? valueFormatted : translate('blanks', '(Blanks)');\n                        },\n                    });\n                } else {\n                    colDef.filterValueGetter = (params: ValueGetterParams) =>\n                        formatValue({\n                            column: params.column,\n                            node: params.node,\n                            value: this.valueService.getValue(params.column as AgColumn, params.node),\n                        });\n                }\n                break;\n            }\n        }\n    }\n\n    private getDefaultDataTypes(): { [key: string]: CoreDataTypeDefinition } {\n        const defaultDateFormatMatcher = (value: string) => !!value.match('^\\\\d{4}-\\\\d{2}-\\\\d{2}$');\n        const translate = this.localeService.getLocaleTextFunc();\n        return {\n            number: {\n                baseDataType: 'number',\n                // can be empty space with legacy copy\n                valueParser: (params: ValueParserLiteParams<any, number>) =>\n                    params.newValue?.trim?.() === '' ? null : Number(params.newValue),\n                valueFormatter: (params: ValueFormatterLiteParams<any, number>) => {\n                    if (params.value == null) {\n                        return '';\n                    }\n                    if (typeof params.value !== 'number' || isNaN(params.value)) {\n                        return translate('invalidNumber', 'Invalid Number');\n                    }\n                    return String(params.value);\n                },\n                dataTypeMatcher: (value: any) => typeof value === 'number',\n            },\n            text: {\n                baseDataType: 'text',\n                valueParser: (params: ValueParserLiteParams<any, string>) =>\n                    params.newValue === '' ? null : _toStringOrNull(params.newValue),\n                dataTypeMatcher: (value: any) => typeof value === 'string',\n            },\n            boolean: {\n                baseDataType: 'boolean',\n                valueParser: (params: ValueParserLiteParams<any, boolean>) => {\n                    if (params.newValue == null) {\n                        return params.newValue;\n                    }\n                    // can be empty space with legacy copy\n                    return params.newValue?.trim?.() === '' ? null : String(params.newValue).toLowerCase() === 'true';\n                },\n                valueFormatter: (params: ValueFormatterLiteParams<any, boolean>) =>\n                    params.value == null ? '' : String(params.value),\n                dataTypeMatcher: (value: any) => typeof value === 'boolean',\n            },\n            date: {\n                baseDataType: 'date',\n                valueParser: (params: ValueParserLiteParams<any, Date>) =>\n                    _parseDateTimeFromString(params.newValue == null ? null : String(params.newValue)),\n                valueFormatter: (params: ValueFormatterLiteParams<any, Date>) => {\n                    if (params.value == null) {\n                        return '';\n                    }\n                    if (!(params.value instanceof Date) || isNaN(params.value.getTime())) {\n                        return translate('invalidDate', 'Invalid Date');\n                    }\n                    return _serialiseDate(params.value, false) ?? '';\n                },\n                dataTypeMatcher: (value: any) => value instanceof Date,\n            },\n            dateString: {\n                baseDataType: 'dateString',\n                dateParser: (value: string | undefined) => _parseDateTimeFromString(value) ?? undefined,\n                dateFormatter: (value: Date | undefined) => _serialiseDate(value ?? null, false) ?? undefined,\n                valueParser: (params: ValueParserLiteParams<any, string>) =>\n                    defaultDateFormatMatcher(String(params.newValue)) ? params.newValue : null,\n                valueFormatter: (params: ValueFormatterLiteParams<any, string>) =>\n                    defaultDateFormatMatcher(String(params.value)) ? params.value! : '',\n                dataTypeMatcher: (value: any) => typeof value === 'string' && defaultDateFormatMatcher(value),\n            },\n            object: {\n                baseDataType: 'object',\n                valueParser: () => null,\n                valueFormatter: (params: ValueFormatterLiteParams<any, any>) => _toStringOrNull(params.value) ?? '',\n            },\n        };\n    }\n\n    private destroyColumnStateUpdateListeners(): void {\n        this.columnStateUpdateListenerDestroyFuncs.forEach((destroyFunc) => destroyFunc());\n        this.columnStateUpdateListenerDestroyFuncs = [];\n    }\n\n    public override destroy(): void {\n        this.dataTypeDefinitions = {};\n        this.dataTypeMatchers = {};\n        this.formatValueFuncs = {};\n        this.columnStateUpdatesPendingInference = {};\n        this.destroyColumnStateUpdateListeners();\n        super.destroy();\n    }\n}\n", "import type { Module } from '../interfaces/iModule';\nimport { VERSION } from '../version';\nimport {\n    applyColumnState,\n    autoSizeAllColumns,\n    autoSizeColumn,\n    autoSizeColumns,\n    getAllDisplayedColumnGroups,\n    getAllDisplayedColumns,\n    getAllDisplayedVirtualColumns,\n    getAllGridColumns,\n    getCenterDisplayedColumnGroups,\n    getColumn,\n    getColumnDef,\n    getColumnDefs,\n    getColumnGroup,\n    getColumnGroupState,\n    getColumnState,\n    getColumns,\n    getDisplayNameForColumn,\n    getDisplayNameForColumnGroup,\n    getDisplayedCenterColumns,\n    getDisplayedColAfter,\n    getDisplayedColBefore,\n    getDisplayedLeftColumns,\n    getDisplayedRightColumns,\n    getLeftDisplayedColumnGroups,\n    getProvidedColumnGroup,\n    getRightDisplayedColumnGroups,\n    isPinning,\n    isPinningLeft,\n    isPinningRight,\n    moveColumn,\n    moveColumnByIndex,\n    moveColumns,\n    resetColumnGroupState,\n    resetColumnState,\n    setColumnGroupOpened,\n    setColumnGroupState,\n    setColumnPinned,\n    setColumnVisible,\n    setColumnWidth,\n    setColumnWidths,\n    setColumnsPinned,\n    setColumnsVisible,\n    sizeColumnsToFit,\n} from './columnApi';\nimport { DataTypeService } from './dataTypeService';\n\nexport const DataTypeModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/data-type',\n    beans: [DataTypeService],\n};\n\nexport const ColumnApiModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/column-api',\n    apiFunctions: {\n        getColumnDef,\n        getColumnDefs,\n        sizeColumnsToFit,\n        setColumnGroupOpened,\n        getColumnGroup,\n        getProvidedColumnGroup,\n        getDisplayNameForColumn,\n        getDisplayNameForColumnGroup,\n        getColumn,\n        getColumns,\n        applyColumnState,\n        getColumnState,\n        resetColumnState,\n        getColumnGroupState,\n        setColumnGroupState,\n        resetColumnGroupState,\n        isPinning,\n        isPinningLeft,\n        isPinningRight,\n        getDisplayedColAfter,\n        getDisplayedColBefore,\n        setColumnVisible,\n        setColumnsVisible,\n        setColumnPinned,\n        setColumnsPinned,\n        getAllGridColumns,\n        getDisplayedLeftColumns,\n        getDisplayedCenterColumns,\n        getDisplayedRightColumns,\n        getAllDisplayedColumns,\n        getAllDisplayedVirtualColumns,\n        moveColumn,\n        moveColumnByIndex,\n        moveColumns,\n        setColumnWidth,\n        setColumnWidths,\n        getLeftDisplayedColumnGroups,\n        getCenterDisplayedColumnGroups,\n        getRightDisplayedColumnGroups,\n        getAllDisplayedColumnGroups,\n        autoSizeColumn,\n        autoSizeColumns,\n        autoSizeAllColumns,\n    },\n};\n", "import type { BeanCollection } from '../context/context';\nimport type { RowDropZoneEvents, RowDropZoneParams } from '../gridBodyComp/rowDragFeature';\n\nexport function addRowDropZone(beans: BeanCollection, params: RowDropZoneParams): void {\n    beans.ctrlsService.getGridBodyCtrl().getRowDragFeature().addRowDropZone(params);\n}\n\nexport function removeRowDropZone(beans: BeanCollection, params: RowDropZoneParams): void {\n    const activeDropTarget = beans.dragAndDropService.findExternalZone(params);\n\n    if (activeDropTarget) {\n        beans.dragAndDropService.removeDropTarget(activeDropTarget);\n    }\n}\n\nexport function getRowDropZoneParams(beans: BeanCollection, events?: RowDropZoneEvents): RowDropZoneParams {\n    return beans.ctrlsService.getGridBodyCtrl().getRowDragFeature().getRowDropZone(events);\n}\n", "import type { Module } from '../interfaces/iModule';\nimport { VERSION } from '../version';\nimport { addRowDropZone, getRowDropZoneParams, removeRowDropZone } from './dragApi';\n\nexport const DragApiModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/drag-api',\n    apiFunctions: {\n        addRowDropZone,\n        removeRowDropZone,\n        getRowDropZoneParams,\n    },\n};\n", "import type { BeanCollection } from '../context/context';\nimport type { IRowNode } from '../interfaces/iRowNode';\n\nexport function getPinnedTopRowCount(beans: BeanCollection): number {\n    return beans.pinnedRowModel.getPinnedTopRowCount();\n}\n\nexport function getPinnedBottomRowCount(beans: BeanCollection): number {\n    return beans.pinnedRowModel.getPinnedBottomRowCount();\n}\n\nexport function getPinnedTopRow(beans: BeanCollection, index: number): IRowNode | undefined {\n    return beans.pinnedRowModel.getPinnedTopRow(index);\n}\n\nexport function getPinnedBottomRow(beans: BeanCollection, index: number): IRowNode | undefined {\n    return beans.pinnedRowModel.getPinnedBottomRow(index);\n}\n", "import type { Module } from '../interfaces/iModule';\nimport { VERSION } from '../version';\nimport { getPinnedBottomRow, getPinnedBottomRowCount, getPinnedTopRow, getPinnedTopRowCount } from './pinnedRowApi';\n\nexport const PinnedRowApiModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/pinned-row-api',\n    apiFunctions: {\n        getPinnedTopRowCount,\n        getPinnedBottomRowCount,\n        getPinnedTopRow,\n        getPinnedBottomRow,\n    },\n};\n", "import type { BeanCollection } from '../../context/context';\n\nexport function showLoadingOverlay(beans: BeanCollection): void {\n    beans.overlayService.showLoadingOverlay();\n}\n\nexport function showNoRowsOverlay(beans: BeanCollection): void {\n    beans.overlayService.showNoRowsOverlay();\n}\n\nexport function hideOverlay(beans: BeanCollection): void {\n    beans.overlayService.hideOverlay();\n}\n", "import type { Module } from '../../interfaces/iModule';\nimport { VERSION } from '../../version';\nimport { hideOverlay, showLoadingOverlay, showNoRowsOverlay } from './overlayApi';\n\nexport const OverlayApiModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/overlay-api',\n    apiFunctions: {\n        showLoadingOverlay,\n        showNoRowsOverlay,\n        hideOverlay,\n    },\n};\n", "import { _unwrapUserComp } from '../components/framework/unwrapUserComp';\nimport type { BeanCollection } from '../context/context';\nimport { _warnOnce } from '../utils/function';\nimport { _exists } from '../utils/generic';\nimport type { ICellRenderer } from './cellRenderers/iCellRenderer';\nimport type { FlashCellsParams, GetCellRendererInstancesParams, RefreshCellsParams } from './rowRenderer';\n\nexport function setGridAriaProperty(beans: BeanCollection, property: string, value: string | null): void {\n    if (!property) {\n        return;\n    }\n    const eGrid = beans.ctrlsService.getGridBodyCtrl().getGui();\n    const ariaProperty = `aria-${property}`;\n\n    if (value === null) {\n        eGrid.removeAttribute(ariaProperty);\n    } else {\n        eGrid.setAttribute(ariaProperty, value);\n    }\n}\n\nexport function refreshCells<TData = any>(beans: BeanCollection, params: RefreshCellsParams<TData> = {}): void {\n    beans.frameworkOverrides.wrapIncoming(() => beans.rowRenderer.refreshCells(params));\n}\n\nexport function flashCells<TData = any>(beans: BeanCollection, params: FlashCellsParams<TData> = {}): void {\n    const warning = (prop: 'fade' | 'flash') =>\n        _warnOnce(\n            `Since v31.1 api.flashCells parameter '${prop}Delay' is deprecated. Please use '${prop}Duration' instead.`\n        );\n    if (_exists(params.fadeDelay)) {\n        warning('fade');\n    }\n    if (_exists(params.flashDelay)) {\n        warning('flash');\n    }\n\n    beans.frameworkOverrides.wrapIncoming(() => beans.rowRenderer.flashCells(params));\n}\n\nexport function refreshHeader(beans: BeanCollection) {\n    beans.frameworkOverrides.wrapIncoming(() =>\n        beans.ctrlsService.getHeaderRowContainerCtrls().forEach((c) => c.refresh())\n    );\n}\n\nexport function isAnimationFrameQueueEmpty(beans: BeanCollection): boolean {\n    return beans.animationFrameService.isQueueEmpty();\n}\n\nexport function flushAllAnimationFrames(beans: BeanCollection): void {\n    beans.animationFrameService.flushAllFrames();\n}\n\nexport function getSizesForCurrentTheme(beans: BeanCollection) {\n    return {\n        rowHeight: beans.gos.getRowHeightAsNumber(),\n        headerHeight: beans.columnModel.getHeaderHeight(),\n    };\n}\n\nexport function getCellRendererInstances<TData = any>(\n    beans: BeanCollection,\n    params: GetCellRendererInstancesParams<TData> = {}\n): ICellRenderer[] {\n    const res = beans.rowRenderer.getCellRendererInstances(params);\n    const unwrapped = res.map(_unwrapUserComp);\n    return unwrapped;\n}\n", "import type { Module } from '../interfaces/iModule';\nimport { VERSION } from '../version';\nimport {\n    flashCells,\n    flushAllAnimationFrames,\n    getCellRendererInstances,\n    getSizesForCurrentTheme,\n    isAnimationFrameQueueEmpty,\n    refreshCells,\n    refreshHeader,\n    setGridAriaProperty,\n} from './renderApi';\n\nexport const RenderApiModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/render-api',\n    apiFunctions: {\n        setGridAriaProperty,\n        refreshCells,\n        flashCells,\n        refreshHeader,\n        isAnimationFrameQueueEmpty,\n        flushAllAnimationFrames,\n        getSizesForCurrentTheme,\n        getCellRendererInstances,\n    },\n};\n", "import type { BeanCollection } from '../context/context';\nimport type { Column } from '../interfaces/iColumn';\nimport type { IRowNode } from '../interfaces/iRowNode';\nimport { _missing } from '../utils/generic';\nimport { _escapeString } from '../utils/string';\nimport type { GetCellValueParams } from './gridApi';\n\nexport function expireValueCache(beans: BeanCollection): void {\n    beans.valueCache.expire();\n}\n\n/** @deprecated v31.1 */\nexport function getValue<TValue = any>(\n    beans: BeanCollection,\n    colKey: string | Column<TValue>,\n    rowNode: IRowNode\n): TValue | null | undefined {\n    return getCellValue(beans, { colKey, rowNode }) as TValue | null | undefined;\n}\n\nexport function getCellValue<TValue = any>(beans: BeanCollection, params: GetCellValueParams<TValue>): any {\n    const { colKey, rowNode, useFormatter } = params;\n\n    const column = beans.columnModel.getColDefCol(colKey) ?? beans.columnModel.getCol(colKey);\n    if (_missing(column)) {\n        return null;\n    }\n\n    const value = beans.valueService.getValue(column, rowNode);\n\n    if (useFormatter) {\n        const formattedValue = beans.valueService.formatValue(column, rowNode, value);\n        // Match the logic in the default cell renderer insertValueWithoutCellRenderer if no formatter is used\n        return formattedValue ?? _escapeString(value, true);\n    }\n\n    return value;\n}\n", "import type { BeanCollection } from '../context/context';\nimport type { GridOptions } from '../entities/gridOptions';\nimport type { ManagedGridOptionKey, ManagedGridOptions } from '../propertyKeys';\n\nexport function getGridId(beans: BeanCollection): string {\n    return beans.context.getGridId();\n}\n\nexport function destroy(beans: BeanCollection): void {\n    beans.gridDestroyService.destroy();\n}\n\nexport function isDestroyed(beans: BeanCollection): boolean {\n    return beans.gridDestroyService.isDestroyCalled();\n}\n\nexport function getGridOption<Key extends keyof GridOptions<TData>, TData = any>(\n    beans: BeanCollection,\n    key: Key\n): GridOptions<TData>[Key] {\n    return beans.gos.get(key);\n}\n\nexport function setGridOption<Key extends ManagedGridOptionKey, TData = any>(\n    beans: BeanCollection,\n    key: Key,\n    value: GridOptions<TData>[Key]\n): void {\n    updateGridOptions(beans, { [key]: value });\n}\n\nexport function updateGridOptions<TDataUpdate = any>(\n    beans: BeanCollection,\n    options: ManagedGridOptions<TDataUpdate>\n): void {\n    // NOTE: The TDataUpdate generic is used to ensure that the update options match the generic passed into the GridApi above as TData.\n    // This is required because if we just use TData directly then Typescript will get into an infinite loop due to callbacks which recursively include the GridApi.\n    beans.gos.updateGridOptions({ options });\n}\n", "import type { BeanCollection } from '../context/context';\nimport type { AgPublicEventType } from '../eventTypes';\nimport type { AgEventListener, AgGlobalEventListener } from '../events';\n\nexport function addEventListener<TEventType extends AgPublicEventType>(\n    beans: BeanCollection,\n    eventType: TEventType,\n    listener: AgEventListener<any, any, TEventType>\n): void {\n    beans.apiEventService.addEventListener(eventType, listener);\n}\nexport function removeEventListener<TEventType extends AgPublicEventType>(\n    beans: BeanCollection,\n    eventType: TEventType,\n    listener: AgEventListener<any, any, TEventType>\n): void {\n    beans.apiEventService.removeEventListener(eventType, listener as AgEventListener);\n}\n\nexport function addGlobalListener<TEventType extends AgPublicEventType>(\n    beans: BeanCollection,\n    listener: AgGlobalEventListener<any, any, TEventType>\n): void {\n    beans.apiEventService.addGlobalListener(listener);\n}\n\nexport function removeGlobalListener<TEventType extends AgPublicEventType>(\n    beans: BeanCollection,\n    listener: AgGlobalEventListener<any, any, TEventType>\n): void {\n    beans.apiEventService.removeGlobalListener(listener);\n}\n", "import type { BeanCollection } from '../context/context';\nimport type { CellPosition } from '../entities/cellPositionUtils';\nimport type { Column, ColumnGroup } from '../interfaces/iColumn';\nimport type { RowPinnedType } from '../interfaces/iRowNode';\n\nexport function getFocusedCell(beans: BeanCollection): CellPosition | null {\n    return beans.focusService.getFocusedCell();\n}\n\nexport function clearFocusedCell(beans: BeanCollection): void {\n    return beans.focusService.clearFocusedCell();\n}\n\nexport function setFocusedCell(\n    beans: BeanCollection,\n    rowIndex: number,\n    colKey: string | Column,\n    rowPinned?: RowPinnedType\n) {\n    beans.focusService.setFocusedCell({ rowIndex, column: colKey, rowPinned, forceBrowserFocus: true });\n}\n\nexport function tabToNextCell(beans: BeanCollection, event?: KeyboardEvent): boolean {\n    return beans.navigationService.tabToNextCell(false, event);\n}\n\nexport function tabToPreviousCell(beans: BeanCollection, event?: KeyboardEvent): boolean {\n    return beans.navigationService.tabToNextCell(true, event);\n}\n\nexport function setFocusedHeader(\n    beans: BeanCollection,\n    colKey: string | Column | ColumnGroup,\n    floatingFilter: boolean = false\n) {\n    const headerPosition = beans.headerNavigationService.getHeaderPositionForColumn(colKey, floatingFilter);\n\n    if (!headerPosition) {\n        return;\n    }\n\n    beans.focusService.focusHeaderPosition({ headerPosition });\n}\n", "import type { BeanCollection } from '../context/context';\nimport type { Column } from '../interfaces/iColumn';\nimport { _errorOnce } from '../utils/function';\n\n/** @deprecated v31.1 */\nexport function showColumnMenuAfterButtonClick(\n    beans: BeanCollection,\n    colKey: string | Column,\n    buttonElement: HTMLElement\n): void {\n    // use grid column so works with pivot mode\n    const column = beans.columnModel.getCol(colKey)!;\n    beans.menuService.showColumnMenu({\n        column,\n        buttonElement,\n        positionBy: 'button',\n    });\n}\n\n/** @deprecated v31.1 */\nexport function showColumnMenuAfterMouseClick(\n    beans: BeanCollection,\n    colKey: string | Column,\n    mouseEvent: MouseEvent | Touch\n): void {\n    // use grid column so works with pivot mode\n    let column = beans.columnModel.getCol(colKey);\n    if (!column) {\n        column = beans.columnModel.getColDefCol(colKey);\n    }\n    if (!column) {\n        _errorOnce(`column '${colKey}' not found`);\n        return;\n    }\n    beans.menuService.showColumnMenu({\n        column,\n        mouseEvent,\n        positionBy: 'mouse',\n    });\n}\n\nexport function showColumnMenu(beans: BeanCollection, colKey: string | Column): void {\n    const column = beans.columnModel.getCol(colKey);\n    if (!column) {\n        _errorOnce(`column '${colKey}' not found`);\n        return;\n    }\n    beans.menuService.showColumnMenu({\n        column,\n        positionBy: 'auto',\n    });\n}\n\nexport function hidePopupMenu(beans: BeanCollection): void {\n    beans.menuService.hidePopupMenu();\n}\n", "import type { BeanCollection } from '../context/context';\nimport type { RenderedRowEvent } from '../interfaces/iCallbackParams';\nimport type { IRowModel } from '../interfaces/iRowModel';\nimport type { IRowNode } from '../interfaces/iRowNode';\nimport type { RedrawRowsParams } from '../rendering/rowRenderer';\n\nexport function redrawRows<TData = any>(beans: BeanCollection, params: RedrawRowsParams<TData> = {}): void {\n    const rowNodes = params ? params.rowNodes : undefined;\n    beans.frameworkOverrides.wrapIncoming(() => beans.rowRenderer.redrawRows(rowNodes));\n}\n\nexport function setRowNodeExpanded(\n    beans: BeanCollection,\n    rowNode: IRowNode,\n    expanded: boolean,\n    expandParents?: boolean,\n    forceSync?: boolean\n): void {\n    beans.expansionService.setRowNodeExpanded(rowNode, expanded, expandParents, forceSync);\n}\n\nexport function getRowNode<TData = any>(beans: BeanCollection, id: string): IRowNode<TData> | undefined {\n    return beans.rowModel.getRowNode(id);\n}\n\nexport function addRenderedRowListener(\n    beans: BeanCollection,\n    eventName: RenderedRowEvent,\n    rowIndex: number,\n    callback: (...args: any[]) => any\n) {\n    beans.rowRenderer.addRenderedRowListener(eventName, rowIndex, callback as any);\n}\n\nexport function getRenderedNodes<TData = any>(beans: BeanCollection): IRowNode<TData>[] {\n    return beans.rowRenderer.getRenderedNodes();\n}\n\nexport function forEachNode<TData = any>(\n    beans: BeanCollection,\n    callback: (rowNode: IRowNode<TData>, index: number) => void,\n    includeFooterNodes?: boolean\n) {\n    beans.rowModel.forEachNode(callback, includeFooterNodes);\n}\n\n/** @deprecated v31.1 */\nexport function getFirstDisplayedRow(beans: BeanCollection): number {\n    return getFirstDisplayedRowIndex(beans);\n}\n\nexport function getFirstDisplayedRowIndex(beans: BeanCollection): number {\n    return beans.rowRenderer.getFirstVirtualRenderedRow();\n}\n\n/** @deprecated v31.1 */\nexport function getLastDisplayedRow(beans: BeanCollection): number {\n    return getLastDisplayedRowIndex(beans);\n}\n\nexport function getLastDisplayedRowIndex(beans: BeanCollection): number {\n    return beans.rowRenderer.getLastVirtualRenderedRow();\n}\n\nexport function getDisplayedRowAtIndex<TData = any>(beans: BeanCollection, index: number): IRowNode<TData> | undefined {\n    return beans.rowModel.getRow(index);\n}\n\nexport function getDisplayedRowCount(beans: BeanCollection): number {\n    return beans.rowModel.getRowCount();\n}\n\n/** @deprecated v31.1 */\nexport function getModel(beans: BeanCollection): IRowModel {\n    return beans.rowModel;\n}\n", "import type { BeanCollection } from '../context/context';\nimport type { RowNode } from '../entities/rowNode';\nimport type { SelectionEventSourceType } from '../events';\nimport type { IRowNode } from '../interfaces/iRowNode';\nimport { _warnOnce } from '../utils/function';\n\nexport function setNodesSelected(\n    beans: BeanCollection,\n    params: { nodes: IRowNode[]; newValue: boolean; source?: SelectionEventSourceType }\n) {\n    const allNodesValid = params.nodes.every((node) => {\n        if (node.rowPinned) {\n            _warnOnce('cannot select pinned rows');\n            return false;\n        }\n\n        if (node.id === undefined) {\n            _warnOnce('cannot select node until id for node is known');\n            return false;\n        }\n        return true;\n    });\n\n    if (!allNodesValid) {\n        return;\n    }\n\n    const { nodes, source, newValue } = params;\n    const nodesAsRowNode = nodes as RowNode[];\n    beans.selectionService.setNodesSelected({ nodes: nodesAsRowNode, source: source ?? 'api', newValue });\n}\n\nexport function selectAll(beans: BeanCollection, source: SelectionEventSourceType = 'apiSelectAll') {\n    beans.selectionService.selectAllRowNodes({ source });\n}\n\nexport function deselectAll(beans: BeanCollection, source: SelectionEventSourceType = 'apiSelectAll') {\n    beans.selectionService.deselectAllRowNodes({ source });\n}\n\nexport function selectAllFiltered(beans: BeanCollection, source: SelectionEventSourceType = 'apiSelectAllFiltered') {\n    beans.selectionService.selectAllRowNodes({ source, justFiltered: true });\n}\n\nexport function deselectAllFiltered(beans: BeanCollection, source: SelectionEventSourceType = 'apiSelectAllFiltered') {\n    beans.selectionService.deselectAllRowNodes({ source, justFiltered: true });\n}\n\nexport function selectAllOnCurrentPage(\n    beans: BeanCollection,\n    source: SelectionEventSourceType = 'apiSelectAllCurrentPage'\n) {\n    beans.selectionService.selectAllRowNodes({ source, justCurrentPage: true });\n}\n\nexport function deselectAllOnCurrentPage(\n    beans: BeanCollection,\n    source: SelectionEventSourceType = 'apiSelectAllCurrentPage'\n) {\n    beans.selectionService.deselectAllRowNodes({ source, justCurrentPage: true });\n}\n\nexport function getSelectedNodes<TData = any>(beans: BeanCollection): IRowNode<TData>[] {\n    return beans.selectionService.getSelectedNodes();\n}\n\nexport function getSelectedRows<TData = any>(beans: BeanCollection): TData[] {\n    return beans.selectionService.getSelectedRows();\n}\n", "import type { BeanCollection } from '../context/context';\n\nexport function onSortChanged(beans: BeanCollection) {\n    beans.sortController.onSortChanged('api');\n}\n", "import { ColumnApiModule } from '../columns/columnModule';\nimport { DragApiModule } from '../dragAndDrop/dragModule';\nimport type { Module } from '../interfaces/iModule';\nimport { PinnedRowApiModule } from '../pinnedRowModel/pinnedRowModule';\nimport { OverlayApiModule } from '../rendering/overlays/overlayModule';\nimport { RenderApiModule } from '../rendering/renderModule';\nimport { VERSION } from '../version';\nimport { expireValueCache, getCellValue, getValue } from './cellApi';\nimport { destroy, getGridId, getGridOption, isDestroyed, setGridOption, updateGridOptions } from './coreApi';\nimport { addEventListener, addGlobalListener, removeEventListener, removeGlobalListener } from './eventApi';\nimport {\n    clearFocusedCell,\n    getFocusedCell,\n    setFocusedCell,\n    setFocusedHeader,\n    tabToNextCell,\n    tabToPreviousCell,\n} from './keyboardNavigationApi';\nimport {\n    hidePopupMenu,\n    showColumnMenu,\n    showColumnMenuAfterButtonClick,\n    showColumnMenuAfterMouseClick,\n} from './menuApi';\nimport {\n    addRenderedRowListener,\n    forEachNode,\n    getDisplayedRowAtIndex,\n    getDisplayedRowCount,\n    getFirstDisplayedRow,\n    getFirstDisplayedRowIndex,\n    getLastDisplayedRow,\n    getLastDisplayedRowIndex,\n    getModel,\n    getRenderedNodes,\n    getRowNode,\n    redrawRows,\n    setRowNodeExpanded,\n} from './rowApi';\nimport {\n    deselectAll,\n    deselectAllFiltered,\n    deselectAllOnCurrentPage,\n    getSelectedNodes,\n    getSelectedRows,\n    selectAll,\n    selectAllFiltered,\n    selectAllOnCurrentPage,\n    setNodesSelected,\n} from './rowSelectionApi';\nimport {\n    ensureColumnVisible,\n    ensureIndexVisible,\n    ensureNodeVisible,\n    getHorizontalPixelRange,\n    getVerticalPixelRange,\n} from './scrollApi';\nimport { onSortChanged } from './sortApi';\n\nexport const CoreApiModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/core-api',\n    apiFunctions: {\n        getGridId,\n        destroy,\n        isDestroyed,\n        getGridOption,\n        setGridOption,\n        updateGridOptions,\n    },\n};\n\nexport const RowSelectionApiModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/row-selection-api',\n    apiFunctions: {\n        setNodesSelected,\n        selectAll,\n        deselectAll,\n        selectAllFiltered,\n        deselectAllFiltered,\n        selectAllOnCurrentPage,\n        deselectAllOnCurrentPage,\n        getSelectedNodes,\n        getSelectedRows,\n    },\n};\n\nexport const RowApiModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/row-api',\n    apiFunctions: {\n        redrawRows,\n        setRowNodeExpanded,\n        getRowNode,\n        addRenderedRowListener,\n        getRenderedNodes,\n        forEachNode,\n        getFirstDisplayedRow,\n        getFirstDisplayedRowIndex,\n        getLastDisplayedRow,\n        getLastDisplayedRowIndex,\n        getDisplayedRowAtIndex,\n        getDisplayedRowCount,\n        getModel,\n    },\n};\n\nexport const ScrollApiModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/scroll-api',\n    apiFunctions: {\n        getVerticalPixelRange,\n        getHorizontalPixelRange,\n        ensureColumnVisible,\n        ensureIndexVisible,\n        ensureNodeVisible,\n    },\n};\n\nexport const KeyboardNavigationApiModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/keyboard-navigation-api',\n    apiFunctions: {\n        getFocusedCell,\n        clearFocusedCell,\n        setFocusedCell,\n        setFocusedHeader,\n        tabToNextCell,\n        tabToPreviousCell,\n    },\n};\n\nexport const EventApiModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/event-api',\n    apiFunctions: {\n        addEventListener,\n        addGlobalListener,\n        removeEventListener,\n        removeGlobalListener,\n    },\n};\n\nexport const CellApiModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/cell-api',\n    apiFunctions: {\n        expireValueCache,\n        getValue,\n        getCellValue,\n    },\n};\n\nexport const CommunityMenuApiModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/menu-api',\n    apiFunctions: {\n        showColumnMenuAfterButtonClick,\n        showColumnMenuAfterMouseClick,\n        showColumnMenu,\n        hidePopupMenu,\n    },\n};\n\nexport const SortApiModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/sort-api',\n    apiFunctions: {\n        onSortChanged,\n    },\n};\n\nexport const CommunityApiModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/api',\n    dependantModules: [\n        CoreApiModule,\n        PinnedRowApiModule,\n        RowSelectionApiModule,\n        ColumnApiModule,\n        RowApiModule,\n        DragApiModule,\n        ScrollApiModule,\n        OverlayApiModule,\n        KeyboardNavigationApiModule,\n        EventApiModule,\n        RenderApiModule,\n        CellApiModule,\n        CommunityMenuApiModule,\n        SortApiModule,\n    ],\n};\n", "import type { BeanCollection } from '../../context/context';\nimport type { GridState } from '../../interfaces/gridState';\n\nexport function getState(beans: BeanCollection): GridState {\n    return beans.stateService?.getState() ?? {};\n}\n", "import type { ColumnApplyStateService, ColumnState, ColumnStateParams } from '../../columns/columnApplyStateService';\nimport type { ColumnGetStateService } from '../../columns/columnGetStateService';\nimport type { ColumnGroupStateService } from '../../columns/columnGroupStateService';\nimport type { ColumnModel } from '../../columns/columnModel';\nimport type { PivotResultColsService } from '../../columns/pivotResultColsService';\nimport type { VisibleColsService } from '../../columns/visibleColsService';\nimport type { NamedBean } from '../../context/bean';\nimport { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { CtrlsService } from '../../ctrlsService';\nimport type { AgColumn } from '../../entities/agColumn';\nimport type {\n    NewColumnsLoadedEvent,\n    PaginationChangedEvent,\n    RangeSelectionChangedEvent,\n    StateUpdatedEvent,\n} from '../../events';\nimport type { FilterManager } from '../../filter/filterManager';\nimport type { FocusService } from '../../focusService';\nimport type { CellRange, IRangeService } from '../../interfaces/IRangeService';\nimport type { AdvancedFilterModel } from '../../interfaces/advancedFilterModel';\nimport type {\n    AggregationColumnState,\n    AggregationState,\n    ColumnGroupState,\n    ColumnOrderState,\n    ColumnPinningState,\n    ColumnSizeState,\n    ColumnSizingState,\n    ColumnVisibilityState,\n    FilterState,\n    FocusedCellState,\n    GridState,\n    PaginationState,\n    PivotState,\n    RangeSelectionState,\n    RowGroupExpansionState,\n    RowGroupState,\n    ScrollState,\n    SideBarState,\n    SortState,\n} from '../../interfaces/gridState';\nimport type { WithoutGridCommon } from '../../interfaces/iCommon';\nimport type { IExpansionService } from '../../interfaces/iExpansionService';\nimport type { FilterModel } from '../../interfaces/iFilter';\nimport type { IRowModel } from '../../interfaces/iRowModel';\nimport type { ISelectionService } from '../../interfaces/iSelectionService';\nimport type { ISideBarService } from '../../interfaces/iSideBar';\nimport type { ServerSideRowGroupSelectionState, ServerSideRowSelectionState } from '../../interfaces/selectionState';\nimport type { PaginationService } from '../../pagination/paginationService';\nimport type { ColumnAnimationService } from '../../rendering/columnAnimationService';\nimport type { SortModelItem } from '../../sortController';\nimport { _debounce } from '../../utils/function';\nimport { _jsonEquals } from '../../utils/generic';\n\nexport class StateService extends BeanStub implements NamedBean {\n    beanName = 'stateService' as const;\n\n    private filterManager?: FilterManager;\n    private ctrlsService: CtrlsService;\n    private pivotResultColsService: PivotResultColsService;\n    private focusService: FocusService;\n    private columnModel: ColumnModel;\n    private visibleColsService: VisibleColsService;\n    private columnGroupStateService: ColumnGroupStateService;\n    private columnGetStateService: ColumnGetStateService;\n    private paginationService?: PaginationService;\n    private rowModel: IRowModel;\n    private selectionService: ISelectionService;\n    private expansionService: IExpansionService;\n    private columnAnimationService: ColumnAnimationService;\n    private columnApplyStateService: ColumnApplyStateService;\n    private sideBarService?: ISideBarService;\n    private rangeService?: IRangeService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.filterManager = beans.filterManager;\n        this.ctrlsService = beans.ctrlsService;\n        this.pivotResultColsService = beans.pivotResultColsService;\n        this.focusService = beans.focusService;\n        this.columnModel = beans.columnModel;\n        this.visibleColsService = beans.visibleColsService;\n        this.columnGroupStateService = beans.columnGroupStateService;\n        this.columnGetStateService = beans.columnGetStateService;\n        this.paginationService = beans.paginationService;\n        this.rowModel = beans.rowModel;\n        this.selectionService = beans.selectionService;\n        this.expansionService = beans.expansionService;\n        this.columnAnimationService = beans.columnAnimationService;\n        this.columnApplyStateService = beans.columnApplyStateService;\n        this.sideBarService = beans.sideBarService;\n        this.rangeService = beans.rangeService;\n    }\n\n    private isClientSideRowModel: boolean;\n    private cachedState: GridState;\n    private suppressEvents = true;\n    private queuedUpdateSources: Set<keyof GridState | 'gridInitializing'> = new Set();\n    private dispatchStateUpdateEventDebounced = _debounce(() => this.dispatchQueuedStateUpdateEvents(), 0);\n    // If user is doing a manual expand all node by node, we don't want to process one at a time.\n    // EVENT_ROW_GROUP_OPENED is already async, so no impact of making the state async here.\n    private onRowGroupOpenedDebounced = _debounce(\n        () => this.updateCachedState('rowGroupExpansion', this.getRowGroupExpansionState()),\n        0\n    );\n    // similar to row expansion, want to debounce. However, selection is synchronous, so need to mark as stale in case `getState` is called.\n    private onRowSelectedDebounced = _debounce(() => {\n        this.staleStateKeys.delete('rowSelection');\n        this.updateCachedState('rowSelection', this.getRowSelectionState());\n    }, 0);\n    private columnStates?: ColumnState[];\n    private columnGroupStates?: { groupId: string; open: boolean | undefined }[];\n    private staleStateKeys: Set<keyof GridState> = new Set();\n\n    public postConstruct(): void {\n        this.isClientSideRowModel = this.rowModel.getType() === 'clientSide';\n\n        this.cachedState = this.gos.get('initialState') ?? {};\n\n        this.ctrlsService.whenReady(() => this.suppressEventsAndDispatchInitEvent(() => this.setupStateOnGridReady()));\n\n        const [newColumnsLoadedDestroyFunc, rowCountReadyDestroyFunc, firstDataRenderedDestroyFunc] =\n            this.addManagedEventListeners({\n                newColumnsLoaded: ({ source }) => {\n                    if (source === 'gridInitializing') {\n                        newColumnsLoadedDestroyFunc();\n                        this.suppressEventsAndDispatchInitEvent(() => this.setupStateOnColumnsInitialised());\n                    }\n                },\n                rowCountReady: () => {\n                    rowCountReadyDestroyFunc?.();\n                    this.suppressEventsAndDispatchInitEvent(() => this.setupStateOnRowCountReady());\n                },\n                firstDataRendered: () => {\n                    firstDataRenderedDestroyFunc?.();\n                    this.suppressEventsAndDispatchInitEvent(() => this.setupStateOnFirstDataRendered());\n                },\n            });\n    }\n\n    public getState(): GridState {\n        if (this.staleStateKeys.size) {\n            this.refreshStaleState();\n        }\n        return this.cachedState;\n    }\n\n    private setupStateOnGridReady(): void {\n        // sidebar reads the initial state itself, so don't need to set\n\n        this.updateCachedState('sideBar', this.getSideBarState());\n        const stateUpdater = () => this.updateCachedState('sideBar', this.getSideBarState());\n        this.addManagedEventListeners({\n            toolPanelVisibleChanged: stateUpdater,\n            sideBarUpdated: stateUpdater,\n        });\n    }\n\n    private setupStateOnColumnsInitialised(): void {\n        const initialState = this.gos.get('initialState') ?? {};\n        this.setColumnState(initialState);\n        this.setColumnGroupState(initialState);\n\n        this.updateColumnState([\n            'aggregation',\n            'columnOrder',\n            'columnPinning',\n            'columnSizing',\n            'columnVisibility',\n            'pivot',\n            'pivot',\n            'rowGroup',\n            'sort',\n        ]);\n        this.updateCachedState('columnGroup', this.getColumnGroupState());\n\n        this.addManagedEventListeners({\n            columnValueChanged: () => this.updateColumnState(['aggregation']),\n            columnMoved: () => this.updateColumnState(['columnOrder']),\n            columnPinned: () => this.updateColumnState(['columnPinning']),\n            columnResized: () => this.updateColumnState(['columnSizing']),\n            columnVisible: () => this.updateColumnState(['columnVisibility']),\n            columnPivotChanged: () => this.updateColumnState(['pivot']),\n            columnPivotModeChanged: () => this.updateColumnState(['pivot']),\n            columnRowGroupChanged: () => this.updateColumnState(['rowGroup']),\n            sortChanged: () => this.updateColumnState(['sort']),\n            newColumnsLoaded: () =>\n                this.updateColumnState([\n                    'aggregation',\n                    'columnOrder',\n                    'columnPinning',\n                    'columnSizing',\n                    'columnVisibility',\n                    'pivot',\n                    'rowGroup',\n                    'sort',\n                ]),\n            columnGroupOpened: () => this.updateCachedState('columnGroup', this.getColumnGroupState()),\n        });\n    }\n\n    private setupStateOnRowCountReady(): void {\n        const {\n            filter: filterState,\n            rowGroupExpansion: rowGroupExpansionState,\n            rowSelection: rowSelectionState,\n            pagination: paginationState,\n        } = this.gos.get('initialState') ?? {};\n        const advancedFilterModel = this.gos.get('advancedFilterModel');\n        if (filterState || advancedFilterModel) {\n            this.setFilterState(filterState, advancedFilterModel);\n        }\n        if (rowGroupExpansionState) {\n            this.setRowGroupExpansionState(rowGroupExpansionState);\n        }\n        if (rowSelectionState) {\n            this.setRowSelectionState(rowSelectionState);\n        }\n        if (paginationState) {\n            this.setPaginationState(paginationState);\n        }\n\n        this.updateCachedState('filter', this.getFilterState());\n        this.updateCachedState('rowGroupExpansion', this.getRowGroupExpansionState());\n        this.updateCachedState('rowSelection', this.getRowSelectionState());\n        this.updateCachedState('pagination', this.getPaginationState());\n\n        this.addManagedEventListeners({\n            filterChanged: () => this.updateCachedState('filter', this.getFilterState()),\n            rowGroupOpened: () => this.onRowGroupOpenedDebounced(),\n            expandOrCollapseAll: () => this.updateCachedState('rowGroupExpansion', this.getRowGroupExpansionState()),\n            selectionChanged: () => {\n                this.staleStateKeys.add('rowSelection');\n                this.onRowSelectedDebounced();\n            },\n            paginationChanged: (event) => {\n                if (event.newPage || event.newPageSize) {\n                    this.updateCachedState('pagination', this.getPaginationState());\n                }\n            },\n        });\n    }\n\n    private setupStateOnFirstDataRendered(): void {\n        const {\n            scroll: scrollState,\n            rangeSelection: rangeSelectionState,\n            focusedCell: focusedCellState,\n            columnOrder: columnOrderState,\n        } = this.gos.get('initialState') ?? {};\n        if (focusedCellState) {\n            this.setFocusedCellState(focusedCellState);\n        }\n        if (rangeSelectionState) {\n            this.setRangeSelectionState(rangeSelectionState);\n        }\n        if (scrollState) {\n            this.setScrollState(scrollState);\n        }\n        this.setColumnPivotState(!!columnOrderState?.orderedColIds);\n\n        // reset sidebar as it could have updated when columns changed\n        this.updateCachedState('sideBar', this.getSideBarState());\n        this.updateCachedState('focusedCell', this.getFocusedCellState());\n        this.updateCachedState('rangeSelection', this.getRangeSelectionState());\n        this.updateCachedState('scroll', this.getScrollState());\n\n        this.addManagedEventListeners({\n            cellFocused: () => this.updateCachedState('focusedCell', this.getFocusedCellState()),\n            rangeSelectionChanged: (event) => {\n                if (event.finished) {\n                    this.updateCachedState('rangeSelection', this.getRangeSelectionState());\n                }\n            },\n            bodyScrollEnd: () => this.updateCachedState('scroll', this.getScrollState()),\n        });\n    }\n\n    private getColumnState(): {\n        sort?: SortState;\n        rowGroup?: RowGroupState;\n        aggregation?: AggregationState;\n        pivot?: PivotState;\n        columnPinning?: ColumnPinningState;\n        columnVisibility?: ColumnVisibilityState;\n        columnSizing?: ColumnSizingState;\n        columnOrder?: ColumnOrderState;\n    } {\n        const pivotMode = this.columnModel.isPivotMode();\n        const sortColumns: SortModelItem[] = [];\n        const groupColIds: string[] = [];\n        const aggregationColumns: AggregationColumnState[] = [];\n        const pivotColIds: string[] = [];\n        const leftColIds: string[] = [];\n        const rightColIds: string[] = [];\n        const hiddenColIds: string[] = [];\n        const columnSizes: ColumnSizeState[] = [];\n        const columns: string[] = [];\n\n        const columnState = this.columnGetStateService.getColumnState();\n        for (let i = 0; i < columnState.length; i++) {\n            const {\n                colId,\n                sort,\n                sortIndex,\n                rowGroup,\n                rowGroupIndex,\n                aggFunc,\n                pivot,\n                pivotIndex,\n                pinned,\n                hide,\n                width,\n                flex,\n            } = columnState[i];\n            columns.push(colId);\n            if (sort) {\n                sortColumns[sortIndex ?? 0] = { colId, sort };\n            }\n            if (rowGroup) {\n                groupColIds[rowGroupIndex ?? 0] = colId;\n            }\n            if (typeof aggFunc === 'string') {\n                aggregationColumns.push({ colId, aggFunc });\n            }\n            if (pivot) {\n                pivotColIds[pivotIndex ?? 0] = colId;\n            }\n            if (pinned) {\n                (pinned === 'right' ? rightColIds : leftColIds).push(colId);\n            }\n            if (hide) {\n                hiddenColIds.push(colId);\n            }\n            if (flex || width) {\n                columnSizes.push({ colId, flex: flex ?? undefined, width });\n            }\n        }\n\n        return {\n            sort: sortColumns.length ? { sortModel: sortColumns } : undefined,\n            rowGroup: groupColIds.length ? { groupColIds } : undefined,\n            aggregation: aggregationColumns.length ? { aggregationModel: aggregationColumns } : undefined,\n            pivot: pivotColIds.length || pivotMode ? { pivotMode, pivotColIds } : undefined,\n            columnPinning: leftColIds.length || rightColIds.length ? { leftColIds, rightColIds } : undefined,\n            columnVisibility: hiddenColIds.length ? { hiddenColIds } : undefined,\n            columnSizing: columnSizes.length ? { columnSizingModel: columnSizes } : undefined,\n            columnOrder: columns.length ? { orderedColIds: columns } : undefined,\n        };\n    }\n\n    private setColumnState(initialState: GridState): void {\n        const {\n            sort: sortState,\n            rowGroup: groupState,\n            aggregation: aggregationState,\n            pivot: pivotState,\n            columnPinning: columnPinningState,\n            columnVisibility: columnVisibilityState,\n            columnSizing: columnSizingState,\n            columnOrder: columnOrderState,\n        } = initialState;\n        const columnStateMap: { [colId: string]: ColumnState } = {};\n        const getColumnState = (colId: string) => {\n            let columnState = columnStateMap[colId];\n            if (columnState) {\n                return columnState;\n            }\n            columnState = { colId };\n            columnStateMap[colId] = columnState;\n            return columnState;\n        };\n        if (sortState) {\n            sortState.sortModel.forEach(({ colId, sort }, sortIndex) => {\n                const columnState = getColumnState(colId);\n                columnState.sort = sort;\n                columnState.sortIndex = sortIndex;\n            });\n        }\n        if (groupState) {\n            groupState.groupColIds.forEach((colId, rowGroupIndex) => {\n                const columnState = getColumnState(colId);\n                columnState.rowGroup = true;\n                columnState.rowGroupIndex = rowGroupIndex;\n            });\n        }\n        if (aggregationState) {\n            aggregationState.aggregationModel.forEach(({ colId, aggFunc }) => {\n                getColumnState(colId).aggFunc = aggFunc;\n            });\n        }\n        if (pivotState) {\n            pivotState.pivotColIds.forEach((colId, pivotIndex) => {\n                const columnState = getColumnState(colId);\n                columnState.pivot = true;\n                columnState.pivotIndex = pivotIndex;\n            });\n            this.gos.updateGridOptions({\n                options: { pivotMode: pivotState.pivotMode },\n                source: 'gridInitializing' as any,\n            });\n        }\n        if (columnPinningState) {\n            columnPinningState.leftColIds.forEach((colId) => {\n                getColumnState(colId).pinned = 'left';\n            });\n            columnPinningState.rightColIds.forEach((colId) => {\n                getColumnState(colId).pinned = 'right';\n            });\n        }\n        if (columnVisibilityState) {\n            columnVisibilityState.hiddenColIds.forEach((colId) => {\n                getColumnState(colId).hide = true;\n            });\n        }\n        if (columnSizingState) {\n            columnSizingState.columnSizingModel.forEach(({ colId, flex, width }) => {\n                const columnState = getColumnState(colId);\n                columnState.flex = flex ?? null;\n                columnState.width = width;\n            });\n        }\n        const columns = columnOrderState?.orderedColIds;\n        const applyOrder = !!columns?.length;\n        const columnStates = applyOrder ? columns.map((colId) => getColumnState(colId)) : Object.values(columnStateMap);\n\n        if (columnStates.length) {\n            this.columnStates = columnStates;\n            const defaultState: ColumnStateParams = {\n                sort: null,\n                sortIndex: null,\n                rowGroup: null,\n                rowGroupIndex: null,\n                aggFunc: null,\n                pivot: null,\n                pivotIndex: null,\n                pinned: null,\n                hide: null,\n                flex: null,\n            };\n            this.columnApplyStateService.applyColumnState(\n                {\n                    state: columnStates,\n                    applyOrder,\n                    defaultState,\n                },\n                'gridInitializing'\n            );\n        }\n    }\n\n    private setColumnPivotState(applyOrder: boolean): void {\n        const columnStates = this.columnStates;\n        this.columnStates = undefined;\n        const columnGroupStates = this.columnGroupStates;\n        this.columnGroupStates = undefined;\n\n        if (!this.pivotResultColsService.isPivotResultColsPresent()) {\n            return;\n        }\n\n        if (columnStates) {\n            const secondaryColumnStates: ColumnState[] = [];\n            for (const columnState of columnStates) {\n                if (this.pivotResultColsService.getPivotResultCol(columnState.colId)) {\n                    secondaryColumnStates.push(columnState);\n                }\n            }\n\n            this.columnApplyStateService.applyColumnState(\n                {\n                    state: secondaryColumnStates,\n                    applyOrder,\n                },\n                'gridInitializing'\n            );\n        }\n\n        if (columnGroupStates) {\n            // no easy/performant way of knowing which column groups are pivot column groups\n            this.columnGroupStateService.setColumnGroupState(columnGroupStates, 'gridInitializing');\n        }\n    }\n\n    private getColumnGroupState(): ColumnGroupState | undefined {\n        const columnGroupState = this.columnGroupStateService.getColumnGroupState();\n        const openColumnGroups: string[] = [];\n        columnGroupState.forEach(({ groupId, open }) => {\n            if (open) {\n                openColumnGroups.push(groupId);\n            }\n        });\n        return openColumnGroups.length ? { openColumnGroupIds: openColumnGroups } : undefined;\n    }\n\n    private setColumnGroupState(initialState: GridState): void {\n        if (!Object.prototype.hasOwnProperty.call(initialState, 'columnGroup')) {\n            return;\n        }\n\n        const openColumnGroups = new Set(initialState.columnGroup?.openColumnGroupIds);\n        const existingColumnGroupState = this.columnGroupStateService.getColumnGroupState();\n        const stateItems = existingColumnGroupState.map(({ groupId }) => {\n            const open = openColumnGroups.has(groupId);\n            if (open) {\n                openColumnGroups.delete(groupId);\n            }\n            return {\n                groupId,\n                open,\n            };\n        });\n        // probably pivot cols\n        openColumnGroups.forEach((groupId) => {\n            stateItems.push({\n                groupId,\n                open: true,\n            });\n        });\n        if (stateItems.length) {\n            this.columnGroupStates = stateItems;\n        }\n        this.columnGroupStateService.setColumnGroupState(stateItems, 'gridInitializing');\n    }\n\n    private getFilterState(): FilterState | undefined {\n        let filterModel: FilterModel | undefined = this.filterManager?.getFilterModel();\n        if (filterModel && Object.keys(filterModel).length === 0) {\n            filterModel = undefined;\n        }\n        const advancedFilterModel = this.filterManager?.getAdvancedFilterModel() ?? undefined;\n        return filterModel || advancedFilterModel ? { filterModel, advancedFilterModel } : undefined;\n    }\n\n    private setFilterState(\n        filterState?: FilterState,\n        gridOptionAdvancedFilterModel?: AdvancedFilterModel | null\n    ): void {\n        const { filterModel, advancedFilterModel } = filterState ?? {\n            advancedFilterModel: gridOptionAdvancedFilterModel,\n        };\n        if (filterModel) {\n            this.filterManager?.setFilterModel(filterModel, 'columnFilter');\n        }\n        if (advancedFilterModel) {\n            this.filterManager?.setAdvancedFilterModel(advancedFilterModel);\n        }\n    }\n\n    private getRangeSelectionState(): RangeSelectionState | undefined {\n        const cellRanges = this.rangeService?.getCellRanges().map((cellRange) => {\n            const { id, type, startRow, endRow, columns, startColumn } = cellRange;\n            return {\n                id,\n                type,\n                startRow,\n                endRow,\n                colIds: columns.map((column) => column.getColId()),\n                startColId: startColumn.getColId(),\n            };\n        });\n        return cellRanges?.length ? { cellRanges } : undefined;\n    }\n\n    private setRangeSelectionState(rangeSelectionState: RangeSelectionState): void {\n        if (!this.gos.get('enableRangeSelection') || !this.rangeService) {\n            return;\n        }\n        const cellRanges: CellRange[] = [];\n        rangeSelectionState.cellRanges.forEach((cellRange) => {\n            const columns: AgColumn[] = [];\n            cellRange.colIds.forEach((colId) => {\n                const column = this.columnModel.getCol(colId);\n                if (column) {\n                    columns.push(column);\n                }\n            });\n            if (!columns.length) {\n                return;\n            }\n            let startColumn = this.columnModel.getCol(cellRange.startColId);\n            if (!startColumn) {\n                // find the first remaining column\n                const allColumns = this.visibleColsService.getAllCols();\n                const columnSet = new Set(columns);\n                startColumn = allColumns.find((column) => columnSet.has(column))!;\n            }\n            cellRanges.push({\n                ...cellRange,\n                columns,\n                startColumn,\n            });\n        });\n        this.rangeService.setCellRanges(cellRanges);\n    }\n\n    private getScrollState(): ScrollState | undefined {\n        if (!this.isClientSideRowModel) {\n            // can't restore, so don't provide\n            return undefined;\n        }\n        const scrollFeature = this.ctrlsService.getGridBodyCtrl()?.getScrollFeature();\n        const { left } = scrollFeature?.getHScrollPosition() ?? { left: 0 };\n        const { top } = scrollFeature?.getVScrollPosition() ?? { top: 0 };\n        return top || left\n            ? {\n                  top,\n                  left,\n              }\n            : undefined;\n    }\n\n    private setScrollState(scrollState: ScrollState): void {\n        if (!this.isClientSideRowModel) {\n            return;\n        }\n        const { top, left } = scrollState;\n        this.ctrlsService.getGridBodyCtrl()?.getScrollFeature().setScrollPosition(top, left);\n    }\n\n    private getSideBarState(): SideBarState | undefined {\n        return this.sideBarService?.getSideBarComp()?.getState();\n    }\n\n    private getFocusedCellState(): FocusedCellState | undefined {\n        if (!this.isClientSideRowModel) {\n            // can't restore, so don't provide\n            return undefined;\n        }\n        const focusedCell = this.focusService.getFocusedCell();\n        if (focusedCell) {\n            const { column, rowIndex, rowPinned } = focusedCell;\n            return {\n                colId: column.getColId(),\n                rowIndex,\n                rowPinned,\n            };\n        }\n        return undefined;\n    }\n\n    private setFocusedCellState(focusedCellState: FocusedCellState): void {\n        if (!this.isClientSideRowModel) {\n            return;\n        }\n        const { colId, rowIndex, rowPinned } = focusedCellState;\n        this.focusService.setFocusedCell({\n            column: this.columnModel.getCol(colId),\n            rowIndex,\n            rowPinned,\n            forceBrowserFocus: true,\n            preventScrollOnBrowserFocus: true,\n        });\n    }\n\n    private getPaginationState(): PaginationState | undefined {\n        if (!this.paginationService) {\n            return undefined;\n        }\n        const page = this.paginationService.getCurrentPage();\n        const pageSize = !this.gos.get('paginationAutoPageSize') ? this.paginationService.getPageSize() : undefined;\n\n        if (!page && !pageSize) {\n            return;\n        }\n        return { page, pageSize };\n    }\n\n    private setPaginationState(paginationState: PaginationState): void {\n        if (!this.paginationService) {\n            return;\n        }\n        if (paginationState.pageSize && !this.gos.get('paginationAutoPageSize')) {\n            this.paginationService.setPageSize(paginationState.pageSize, 'initialState');\n        }\n\n        if (typeof paginationState.page === 'number') {\n            this.paginationService.setPage(paginationState.page);\n        }\n    }\n\n    private getRowSelectionState():\n        | string[]\n        | ServerSideRowSelectionState\n        | ServerSideRowGroupSelectionState\n        | undefined {\n        const selectionState = this.selectionService.getSelectionState();\n        const noSelections =\n            !selectionState ||\n            (!Array.isArray(selectionState) &&\n                ((selectionState as ServerSideRowSelectionState).selectAll === false ||\n                    (selectionState as ServerSideRowGroupSelectionState).selectAllChildren === false) &&\n                !selectionState?.toggledNodes?.length);\n        return noSelections ? undefined : selectionState;\n    }\n\n    private setRowSelectionState(\n        rowSelectionState: string[] | ServerSideRowSelectionState | ServerSideRowGroupSelectionState\n    ): void {\n        this.selectionService.setSelectionState(rowSelectionState, 'gridInitializing');\n    }\n\n    private getRowGroupExpansionState(): RowGroupExpansionState | undefined {\n        const expandedRowGroups = this.expansionService.getExpandedRows();\n        return expandedRowGroups.length\n            ? {\n                  expandedRowGroupIds: expandedRowGroups,\n              }\n            : undefined;\n    }\n\n    private setRowGroupExpansionState(rowGroupExpansionState: RowGroupExpansionState): void {\n        this.expansionService.expandRows(rowGroupExpansionState.expandedRowGroupIds);\n    }\n\n    private updateColumnState(features: (keyof GridState)[]): void {\n        const newColumnState = this.getColumnState();\n        let hasChanged = false;\n        Object.entries(newColumnState).forEach(([key, value]: [keyof GridState, any]) => {\n            if (!_jsonEquals(value, this.cachedState[key])) {\n                hasChanged = true;\n            }\n        });\n        this.cachedState = {\n            ...this.cachedState,\n            ...newColumnState,\n        };\n        if (hasChanged) {\n            this.dispatchStateUpdateEvent(features);\n        }\n    }\n\n    private updateCachedState<K extends keyof GridState>(key: K, value: GridState[K]): void {\n        const existingValue = this.cachedState[key];\n        this.setCachedStateValue(key, value);\n        if (!_jsonEquals(value, existingValue)) {\n            this.dispatchStateUpdateEvent([key]);\n        }\n    }\n\n    private setCachedStateValue<K extends keyof GridState>(key: K, value: GridState[K]): void {\n        this.cachedState = {\n            ...this.cachedState,\n            [key]: value,\n        };\n    }\n\n    private refreshStaleState(): void {\n        this.staleStateKeys.forEach((key) => {\n            switch (key) {\n                // only row selection supported for now\n                case 'rowSelection':\n                    this.setCachedStateValue(key, this.getRowSelectionState());\n                    break;\n            }\n        });\n        this.staleStateKeys.clear();\n    }\n\n    private dispatchStateUpdateEvent(sources: (keyof GridState | 'gridInitializing')[]): void {\n        if (this.suppressEvents) {\n            return;\n        }\n        sources.forEach((source) => this.queuedUpdateSources.add(source));\n        this.dispatchStateUpdateEventDebounced();\n    }\n\n    private dispatchQueuedStateUpdateEvents(): void {\n        const sources = Array.from(this.queuedUpdateSources);\n        this.queuedUpdateSources.clear();\n        const event: WithoutGridCommon<StateUpdatedEvent> = {\n            type: 'stateUpdated',\n            sources,\n            state: this.cachedState,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private suppressEventsAndDispatchInitEvent(updateFunc: () => void): void {\n        this.suppressEvents = true;\n        this.columnAnimationService.setSuppressAnimation(true);\n        updateFunc();\n        // We want to suppress any grid events, but not user events.\n        // Using a timeout here captures things like column resizing and emits a single grid initializing event.\n        setTimeout(() => {\n            this.suppressEvents = false;\n            // We only want the grid initializing source.\n            this.queuedUpdateSources.clear();\n            if (!this.isAlive()) {\n                // Ensure the grid is still alive before dispatching the event.\n                return;\n            }\n            this.columnAnimationService.setSuppressAnimation(false);\n            this.dispatchStateUpdateEvent(['gridInitializing']);\n        });\n    }\n}\n", "import type { Module } from '../../interfaces/iModule';\nimport { VERSION } from '../../version';\nimport { getState } from './stateApi';\nimport { StateService } from './stateService';\n\nexport const StateCoreModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/state-core',\n    beans: [StateService],\n};\n\nexport const StateApiModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/state-api',\n    apiFunctions: {\n        getState,\n    },\n    dependantModules: [StateCoreModule],\n};\n\nexport const StateModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/state',\n    dependantModules: [StateCoreModule, StateApiModule],\n};\n", "import type { BeanCollection } from '../context/context';\n\nexport function paginationIsLastPageFound(beans: BeanCollection): boolean {\n    return beans.rowModel.isLastRowIndexKnown();\n}\n\nexport function paginationGetPageSize(beans: BeanCollection): number {\n    return beans.paginationService?.getPageSize() ?? 100;\n}\n\nexport function paginationGetCurrentPage(beans: BeanCollection): number {\n    return beans.paginationService?.getCurrentPage() ?? 0;\n}\n\nexport function paginationGetTotalPages(beans: BeanCollection): number {\n    return beans.paginationService?.getTotalPages() ?? 1;\n}\n\nexport function paginationGetRowCount(beans: BeanCollection): number {\n    return beans.paginationService ? beans.paginationService.getMasterRowCount() : beans.rowModel.getRowCount();\n}\n\nexport function paginationGoToNextPage(beans: BeanCollection): void {\n    beans.paginationService?.goToNextPage();\n}\n\nexport function paginationGoToPreviousPage(beans: BeanCollection): void {\n    beans.paginationService?.goToPreviousPage();\n}\n\nexport function paginationGoToFirstPage(beans: BeanCollection): void {\n    beans.paginationService?.goToFirstPage();\n}\n\nexport function paginationGoToLastPage(beans: BeanCollection): void {\n    beans.paginationService?.goToLastPage();\n}\n\nexport function paginationGoToPage(beans: BeanCollection, page: number): void {\n    beans.paginationService?.goToPage(page);\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { CtrlsService } from '../ctrlsService';\nimport type { RowContainerCtrl } from '../gridBodyComp/rowContainer/rowContainerCtrl';\nimport { _debounce } from '../utils/function';\nimport type { PaginationService } from './paginationService';\n\nexport class PaginationAutoPageSizeService extends BeanStub implements NamedBean {\n    beanName = 'paginationAutoPageSizeService' as const;\n\n    private ctrlsService: CtrlsService;\n    private paginationService: PaginationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.ctrlsService = beans.ctrlsService;\n        this.paginationService = beans.paginationService!;\n    }\n\n    private centerRowsCtrl: RowContainerCtrl;\n\n    // Once the body is rendered, we debounce changes to the page size,\n    // but we do not want to debounce the first time the body is rendered.\n    private isBodyRendered: boolean;\n\n    public postConstruct(): void {\n        this.ctrlsService.whenReady((p) => {\n            this.centerRowsCtrl = p.center;\n\n            const listener = this.checkPageSize.bind(this);\n            this.addManagedEventListeners({\n                bodyHeightChanged: listener,\n                scrollVisibilityChanged: listener,\n            });\n            this.addManagedPropertyListener('paginationAutoPageSize', this.onPaginationAutoSizeChanged.bind(this));\n\n            this.checkPageSize();\n        });\n    }\n\n    private notActive(): boolean {\n        return !this.gos.get('paginationAutoPageSize') || this.centerRowsCtrl == null;\n    }\n\n    private onPaginationAutoSizeChanged(): void {\n        if (this.notActive()) {\n            this.paginationService.unsetAutoCalculatedPageSize();\n        } else {\n            this.checkPageSize();\n        }\n    }\n\n    private checkPageSize(): void {\n        if (this.notActive()) {\n            return;\n        }\n\n        const bodyHeight = this.centerRowsCtrl.getViewportSizeFeature()!.getBodyHeight();\n\n        if (bodyHeight > 0) {\n            const update = () => {\n                const rowHeight = Math.max(this.gos.getRowHeightAsNumber(), 1); // prevent divide by zero error if row height is 0\n                const newPageSize = Math.floor(bodyHeight / rowHeight);\n                this.paginationService.setPageSize(newPageSize, 'autoCalculated');\n            };\n\n            if (!this.isBodyRendered) {\n                update();\n                this.isBodyRendered = true;\n            } else {\n                _debounce(() => update(), 50)();\n            }\n        } else {\n            this.isBodyRendered = false;\n        }\n    }\n}\n", "import { KeyCode } from '../constants/keyCode';\nimport type { FocusService } from '../focusService';\nimport type { Component } from '../widgets/component';\n\nexport function _addFocusableContainerListener(comp: Component, eGui: HTMLElement, focusService: FocusService): void {\n    comp.addManagedElementListeners(eGui, {\n        keydown: (e: KeyboardEvent) => {\n            if (!e.defaultPrevented && e.key === KeyCode.TAB) {\n                const backwards = e.shiftKey;\n                if (!focusService.findNextFocusableElement(eGui, false, backwards)) {\n                    if (focusService.focusNextGridCoreContainer(backwards)) {\n                        e.preventDefault();\n                    }\n                }\n            }\n        },\n    });\n}\n", "import type { BeanCollection } from '../../context/context';\nimport type { PaginationChangedEvent } from '../../events';\nimport type { WithoutGridCommon } from '../../interfaces/iCommon';\nimport { _clearElement } from '../../utils/dom';\nimport { _warnOnce } from '../../utils/function';\nimport { AgSelect } from '../../widgets/agSelect';\nimport type { ComponentSelector } from '../../widgets/component';\nimport { Component } from '../../widgets/component';\nimport type { PaginationService } from '../paginationService';\n\nexport class PageSizeSelectorComp extends Component {\n    private paginationService: PaginationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.paginationService = beans.paginationService!;\n    }\n\n    private selectPageSizeComp: AgSelect | undefined;\n    private hasEmptyOption = false;\n\n    constructor() {\n        super(/* html */ `<span class=\"ag-paging-page-size\"></span>`);\n    }\n\n    public postConstruct() {\n        this.addManagedPropertyListener('paginationPageSizeSelector', () => {\n            this.onPageSizeSelectorValuesChange();\n        });\n\n        this.addManagedEventListeners({ paginationChanged: (event) => this.handlePaginationChanged(event) });\n    }\n\n    private handlePageSizeItemSelected = (): void => {\n        if (!this.selectPageSizeComp) {\n            return;\n        }\n\n        const newValue = this.selectPageSizeComp.getValue();\n\n        if (!newValue) {\n            return;\n        }\n\n        const paginationPageSize = Number(newValue);\n\n        if (\n            isNaN(paginationPageSize) ||\n            paginationPageSize < 1 ||\n            paginationPageSize === this.paginationService.getPageSize()\n        ) {\n            return;\n        }\n\n        this.paginationService.setPageSize(paginationPageSize, 'pageSizeSelector');\n\n        if (this.hasEmptyOption) {\n            // Toggle the selector to force a refresh of the options and hide the empty option,\n            // as it's no longer needed.\n            this.toggleSelectDisplay(true);\n        }\n\n        this.selectPageSizeComp.getFocusableElement().focus();\n    };\n\n    private handlePaginationChanged(paginationChangedEvent?: WithoutGridCommon<PaginationChangedEvent>): void {\n        if (!this.selectPageSizeComp || !paginationChangedEvent?.newPageSize) {\n            return;\n        }\n\n        const paginationPageSize = this.paginationService.getPageSize();\n        if (this.getPageSizeSelectorValues().includes(paginationPageSize)) {\n            this.selectPageSizeComp.setValue(paginationPageSize.toString());\n        } else {\n            if (this.hasEmptyOption) {\n                this.selectPageSizeComp.setValue('');\n            } else {\n                this.toggleSelectDisplay(true);\n            }\n        }\n    }\n\n    public toggleSelectDisplay(show: boolean) {\n        if (this.selectPageSizeComp) {\n            this.reset();\n        }\n\n        if (!show) {\n            return;\n        }\n\n        this.reloadPageSizesSelector();\n\n        if (!this.selectPageSizeComp) {\n            return;\n        }\n\n        this.appendChild(this.selectPageSizeComp);\n    }\n\n    private reset(): void {\n        _clearElement(this.getGui());\n\n        if (!this.selectPageSizeComp) {\n            return;\n        }\n\n        this.selectPageSizeComp = this.destroyBean(this.selectPageSizeComp);\n    }\n\n    private onPageSizeSelectorValuesChange(): void {\n        if (!this.selectPageSizeComp) {\n            return;\n        }\n\n        if (this.shouldShowPageSizeSelector()) {\n            this.reloadPageSizesSelector();\n        }\n    }\n\n    public shouldShowPageSizeSelector(): boolean {\n        return (\n            this.gos.get('pagination') &&\n            !this.gos.get('suppressPaginationPanel') &&\n            !this.gos.get('paginationAutoPageSize') &&\n            this.gos.get('paginationPageSizeSelector') !== false\n        );\n    }\n\n    private reloadPageSizesSelector(): void {\n        const pageSizeOptions: (number | string)[] = this.getPageSizeSelectorValues();\n        const paginationPageSizeOption: number = this.paginationService.getPageSize();\n        const shouldAddAndSelectEmptyOption =\n            !paginationPageSizeOption || !pageSizeOptions.includes(paginationPageSizeOption);\n        if (shouldAddAndSelectEmptyOption) {\n            // When the paginationPageSize option is set to a value that is\n            // not in the list of page size options.\n            pageSizeOptions.unshift('');\n\n            _warnOnce(\n                `The paginationPageSize grid option is set to a value that is not in the list of page size options.\n                Please make sure that the paginationPageSize grid option is set to one of the values in the \n                paginationPageSizeSelector array, or set the paginationPageSizeSelector to false to hide the page size selector.`\n            );\n        }\n\n        if (this.selectPageSizeComp) {\n            this.selectPageSizeComp = this.destroyBean(this.selectPageSizeComp);\n        }\n\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const localisedLabel = localeTextFunc('pageSizeSelectorLabel', 'Page Size:');\n\n        const options = pageSizeOptions.map((value) => ({\n            value: String(value),\n            text: String(value),\n        }));\n\n        const localisedAriaLabel = localeTextFunc('ariaPageSizeSelectorLabel', 'Page Size');\n\n        this.selectPageSizeComp = this.createManagedBean(new AgSelect())\n            .addOptions(options)\n            .setValue(String(shouldAddAndSelectEmptyOption ? '' : paginationPageSizeOption))\n            .setAriaLabel(localisedAriaLabel)\n            .setLabel(localisedLabel)\n            .onValueChange(() => this.handlePageSizeItemSelected());\n\n        this.hasEmptyOption = shouldAddAndSelectEmptyOption;\n    }\n\n    private getPageSizeSelectorValues(): number[] {\n        const defaultValues = [20, 50, 100];\n        const paginationPageSizeSelectorValues = this.gos.get('paginationPageSizeSelector');\n\n        if (\n            !Array.isArray(paginationPageSizeSelectorValues) ||\n            !this.validateValues(paginationPageSizeSelectorValues)\n        ) {\n            return defaultValues;\n        }\n\n        return [...paginationPageSizeSelectorValues].sort((a, b) => a - b);\n    }\n\n    private validateValues(values: number[]): boolean {\n        if (!values.length) {\n            _warnOnce(\n                `The paginationPageSizeSelector grid option is an empty array. This is most likely a mistake.\n                If you want to hide the page size selector, please set the paginationPageSizeSelector to false.`\n            );\n\n            return false;\n        }\n\n        for (let i = 0; i < values.length; i++) {\n            const value = values[i];\n            const isNumber = typeof value === 'number';\n            const isPositive = value > 0;\n\n            if (!isNumber) {\n                _warnOnce(\n                    `The paginationPageSizeSelector grid option contains a non-numeric value.\n                    Please make sure that all values in the paginationPageSizeSelector array are numbers.`\n                );\n                return false;\n            }\n\n            if (!isPositive) {\n                _warnOnce(\n                    `The paginationPageSizeSelector grid option contains a negative number or zero.\n                    Please make sure that all values in the paginationPageSizeSelector array are positive.`\n                );\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public override destroy() {\n        this.toggleSelectDisplay(false);\n        super.destroy();\n    }\n}\n\nexport const PageSizeSelectorSelector: ComponentSelector = {\n    selector: 'AG-PAGE-SIZE-SELECTOR',\n    component: PageSizeSelectorComp,\n};\n", "import { KeyCode } from '../constants/keyCode';\nimport type { BeanCollection } from '../context/context';\nimport type { FocusService } from '../focusService';\nimport type { PaginationNumberFormatterParams } from '../interfaces/iCallbackParams';\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\nimport type { FocusableContainer } from '../interfaces/iFocusableContainer';\nimport type { IRowModel } from '../interfaces/iRowModel';\nimport type { RowNodeBlockLoader } from '../rowNodeCache/rowNodeBlockLoader';\nimport { _setAriaDisabled } from '../utils/aria';\nimport { _addFocusableContainerListener } from '../utils/focus';\nimport { _createIconNoSpan } from '../utils/icon';\nimport { _formatNumberCommas } from '../utils/number';\nimport type { ComponentSelector } from '../widgets/component';\nimport { RefPlaceholder } from '../widgets/component';\nimport { TabGuardComp } from '../widgets/tabGuardComp';\nimport type { PageSizeSelectorComp } from './pageSizeSelector/pageSizeSelectorComp';\nimport { PageSizeSelectorSelector } from './pageSizeSelector/pageSizeSelectorComp';\nimport type { PaginationService } from './paginationService';\n\nexport class PaginationComp extends TabGuardComp implements FocusableContainer {\n    private rowNodeBlockLoader?: RowNodeBlockLoader;\n    private rowModel: IRowModel;\n    private paginationService: PaginationService;\n    private focusService: FocusService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.rowNodeBlockLoader = beans.rowNodeBlockLoader;\n        this.rowModel = beans.rowModel;\n        this.paginationService = beans.paginationService!;\n        this.focusService = beans.focusService;\n    }\n\n    private readonly btFirst: HTMLElement = RefPlaceholder;\n    private readonly btPrevious: HTMLElement = RefPlaceholder;\n    private readonly btNext: HTMLElement = RefPlaceholder;\n    private readonly btLast: HTMLElement = RefPlaceholder;\n\n    private readonly lbRecordCount: any = RefPlaceholder;\n    private readonly lbFirstRowOnPage: any = RefPlaceholder;\n    private readonly lbLastRowOnPage: any = RefPlaceholder;\n    private readonly lbCurrent: any = RefPlaceholder;\n    private readonly lbTotal: any = RefPlaceholder;\n\n    private readonly pageSizeComp: PageSizeSelectorComp = RefPlaceholder;\n\n    private previousAndFirstButtonsDisabled = false;\n    private nextButtonDisabled = false;\n    private lastButtonDisabled = false;\n    private areListenersSetup = false;\n    private allowFocusInnerElement = false;\n\n    constructor() {\n        super();\n    }\n\n    public postConstruct(): void {\n        const isRtl = this.gos.get('enableRtl');\n        this.setTemplate(this.getTemplate(), [PageSizeSelectorSelector]);\n\n        const { btFirst, btPrevious, btNext, btLast } = this;\n        this.activateTabIndex([btFirst, btPrevious, btNext, btLast]);\n\n        btFirst.insertAdjacentElement('afterbegin', _createIconNoSpan(isRtl ? 'last' : 'first', this.gos)!);\n        btPrevious.insertAdjacentElement('afterbegin', _createIconNoSpan(isRtl ? 'next' : 'previous', this.gos)!);\n        btNext.insertAdjacentElement('afterbegin', _createIconNoSpan(isRtl ? 'previous' : 'next', this.gos)!);\n        btLast.insertAdjacentElement('afterbegin', _createIconNoSpan(isRtl ? 'first' : 'last', this.gos)!);\n\n        this.addManagedPropertyListener('pagination', this.onPaginationChanged.bind(this));\n        this.addManagedPropertyListener('suppressPaginationPanel', this.onPaginationChanged.bind(this));\n        this.addManagedPropertyListeners(\n            ['paginationPageSizeSelector', 'paginationAutoPageSize', 'suppressPaginationPanel'],\n            () => this.onPageSizeRelatedOptionsChange()\n        );\n\n        this.pageSizeComp.toggleSelectDisplay(this.pageSizeComp.shouldShowPageSizeSelector());\n\n        this.initialiseTabGuard({\n            // prevent tab guard default logic\n            onTabKeyDown: () => {},\n            focusInnerElement: (fromBottom) => {\n                if (this.allowFocusInnerElement) {\n                    this.tabGuardFeature.getTabGuardCtrl().focusInnerElement(fromBottom);\n                } else {\n                    this.focusService.focusGridInnerElement(fromBottom);\n                }\n            },\n            forceFocusOutWhenTabGuardsAreEmpty: true,\n        });\n\n        this.onPaginationChanged();\n    }\n\n    public setAllowFocus(allowFocus: boolean): void {\n        this.allowFocusInnerElement = allowFocus;\n    }\n\n    private onPaginationChanged(): void {\n        const isPaging = this.gos.get('pagination');\n        const paginationPanelEnabled = isPaging && !this.gos.get('suppressPaginationPanel');\n\n        this.setDisplayed(paginationPanelEnabled);\n        if (!paginationPanelEnabled) {\n            return;\n        }\n\n        this.setupListeners();\n\n        this.enableOrDisableButtons();\n        this.updateRowLabels();\n        this.setCurrentPageLabel();\n        this.setTotalLabels();\n        this.onPageSizeRelatedOptionsChange();\n    }\n\n    private onPageSizeRelatedOptionsChange(): void {\n        this.pageSizeComp.toggleSelectDisplay(this.pageSizeComp.shouldShowPageSizeSelector());\n    }\n\n    private setupListeners() {\n        if (!this.areListenersSetup) {\n            this.addManagedEventListeners({ paginationChanged: this.onPaginationChanged.bind(this) });\n\n            [\n                { el: this.btFirst, fn: this.onBtFirst.bind(this) },\n                { el: this.btPrevious, fn: this.onBtPrevious.bind(this) },\n                { el: this.btNext, fn: this.onBtNext.bind(this) },\n                { el: this.btLast, fn: this.onBtLast.bind(this) },\n            ].forEach((item) => {\n                const { el, fn } = item;\n                this.addManagedListeners(el, {\n                    click: fn,\n                    keydown: (e: KeyboardEvent) => {\n                        if (e.key === KeyCode.ENTER || e.key === KeyCode.SPACE) {\n                            e.preventDefault();\n                            fn();\n                        }\n                    },\n                });\n            });\n\n            _addFocusableContainerListener(this, this.getGui(), this.focusService);\n\n            this.areListenersSetup = true;\n        }\n    }\n\n    private onBtFirst() {\n        if (!this.previousAndFirstButtonsDisabled) {\n            this.paginationService.goToFirstPage();\n        }\n    }\n\n    private setCurrentPageLabel(): void {\n        const pagesExist = this.paginationService.getTotalPages() > 0;\n        const currentPage = this.paginationService.getCurrentPage();\n        const toDisplay = pagesExist ? currentPage + 1 : 0;\n\n        this.lbCurrent.textContent = this.formatNumber(toDisplay);\n    }\n\n    private formatNumber(value: number): string {\n        const userFunc = this.gos.getCallback('paginationNumberFormatter');\n\n        if (userFunc) {\n            const params: WithoutGridCommon<PaginationNumberFormatterParams> = { value: value };\n            return userFunc(params);\n        }\n\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n        const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n\n        return _formatNumberCommas(value, thousandSeparator, decimalSeparator);\n    }\n\n    private getTemplate(): string {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n\n        const strPage = localeTextFunc('page', 'Page');\n        const strTo = localeTextFunc('to', 'to');\n        const strOf = localeTextFunc('of', 'of');\n        const strFirst = localeTextFunc('firstPage', 'First Page');\n        const strPrevious = localeTextFunc('previousPage', 'Previous Page');\n        const strNext = localeTextFunc('nextPage', 'Next Page');\n        const strLast = localeTextFunc('lastPage', 'Last Page');\n        const compId = this.getCompId();\n\n        return /* html */ `<div class=\"ag-paging-panel ag-unselectable\" id=\"ag-${compId}\">\n                <ag-page-size-selector data-ref=\"pageSizeComp\"></ag-page-size-selector>\n                <span class=\"ag-paging-row-summary-panel\" role=\"status\">\n                    <span id=\"ag-${compId}-first-row\" data-ref=\"lbFirstRowOnPage\" class=\"ag-paging-row-summary-panel-number\"></span>\n                    <span id=\"ag-${compId}-to\">${strTo}</span>\n                    <span id=\"ag-${compId}-last-row\" data-ref=\"lbLastRowOnPage\" class=\"ag-paging-row-summary-panel-number\"></span>\n                    <span id=\"ag-${compId}-of\">${strOf}</span>\n                    <span id=\"ag-${compId}-row-count\" data-ref=\"lbRecordCount\" class=\"ag-paging-row-summary-panel-number\"></span>\n                </span>\n                <span class=\"ag-paging-page-summary-panel\" role=\"presentation\">\n                    <div data-ref=\"btFirst\" class=\"ag-button ag-paging-button\" role=\"button\" aria-label=\"${strFirst}\"></div>\n                    <div data-ref=\"btPrevious\" class=\"ag-button ag-paging-button\" role=\"button\" aria-label=\"${strPrevious}\"></div>\n                    <span class=\"ag-paging-description\" role=\"status\">\n                        <span id=\"ag-${compId}-start-page\">${strPage}</span>\n                        <span id=\"ag-${compId}-start-page-number\" data-ref=\"lbCurrent\" class=\"ag-paging-number\"></span>\n                        <span id=\"ag-${compId}-of-page\">${strOf}</span>\n                        <span id=\"ag-${compId}-of-page-number\" data-ref=\"lbTotal\" class=\"ag-paging-number\"></span>\n                    </span>\n                    <div data-ref=\"btNext\" class=\"ag-button ag-paging-button\" role=\"button\" aria-label=\"${strNext}\"></div>\n                    <div data-ref=\"btLast\" class=\"ag-button ag-paging-button\" role=\"button\" aria-label=\"${strLast}\"></div>\n                </span>\n            </div>`;\n    }\n\n    private onBtNext() {\n        if (!this.nextButtonDisabled) {\n            this.paginationService.goToNextPage();\n        }\n    }\n\n    private onBtPrevious() {\n        if (!this.previousAndFirstButtonsDisabled) {\n            this.paginationService.goToPreviousPage();\n        }\n    }\n\n    private onBtLast() {\n        if (!this.lastButtonDisabled) {\n            this.paginationService.goToLastPage();\n        }\n    }\n\n    private enableOrDisableButtons() {\n        const currentPage = this.paginationService.getCurrentPage();\n        const maxRowFound = this.rowModel.isLastRowIndexKnown();\n        const totalPages = this.paginationService.getTotalPages();\n\n        this.previousAndFirstButtonsDisabled = currentPage === 0;\n        this.toggleButtonDisabled(this.btFirst, this.previousAndFirstButtonsDisabled);\n        this.toggleButtonDisabled(this.btPrevious, this.previousAndFirstButtonsDisabled);\n\n        const zeroPagesToDisplay = this.isZeroPagesToDisplay();\n        const onLastPage = currentPage === totalPages - 1;\n\n        this.nextButtonDisabled = onLastPage || zeroPagesToDisplay;\n        this.lastButtonDisabled = !maxRowFound || zeroPagesToDisplay || currentPage === totalPages - 1;\n\n        this.toggleButtonDisabled(this.btNext, this.nextButtonDisabled);\n        this.toggleButtonDisabled(this.btLast, this.lastButtonDisabled);\n    }\n\n    private toggleButtonDisabled(button: HTMLElement, disabled: boolean) {\n        _setAriaDisabled(button, disabled);\n        button.classList.toggle('ag-disabled', disabled);\n    }\n\n    private updateRowLabels() {\n        const currentPage = this.paginationService.getCurrentPage();\n        const pageSize = this.paginationService.getPageSize();\n        const maxRowFound = this.rowModel.isLastRowIndexKnown();\n        const rowCount = this.rowModel.isLastRowIndexKnown() ? this.paginationService.getMasterRowCount() : null;\n\n        let startRow: any;\n        let endRow: any;\n\n        if (this.isZeroPagesToDisplay()) {\n            startRow = endRow = 0;\n        } else {\n            startRow = pageSize * currentPage + 1;\n            endRow = startRow + pageSize - 1;\n            if (maxRowFound && endRow > rowCount!) {\n                endRow = rowCount;\n            }\n        }\n\n        this.lbFirstRowOnPage.textContent = this.formatNumber(startRow);\n        if (this.rowNodeBlockLoader?.isLoading()) {\n            const translate = this.localeService.getLocaleTextFunc();\n            this.lbLastRowOnPage.innerHTML = translate('pageLastRowUnknown', '?');\n        } else {\n            this.lbLastRowOnPage.textContent = this.formatNumber(endRow);\n        }\n    }\n\n    private isZeroPagesToDisplay() {\n        const maxRowFound = this.rowModel.isLastRowIndexKnown();\n        const totalPages = this.paginationService.getTotalPages();\n        return maxRowFound && totalPages === 0;\n    }\n\n    private setTotalLabels() {\n        const lastPageFound = this.rowModel.isLastRowIndexKnown();\n        const totalPages = this.paginationService.getTotalPages();\n        const rowCount = lastPageFound ? this.paginationService.getMasterRowCount() : null;\n\n        // When `pivotMode=true` and no grouping or value columns exist, a single 'hidden' group row (root node) is in\n        // the grid and the pagination totals will correctly display total = 1. However this is confusing to users as\n        // they can't see it. To address this UX issue we simply set the totals to zero in the pagination panel.\n        if (rowCount === 1) {\n            const firstRow = this.rowModel.getRow(0);\n\n            // a group node with no group or agg data will not be visible to users\n            const hiddenGroupRow = firstRow && firstRow.group && !(firstRow.groupData || firstRow.aggData);\n            if (hiddenGroupRow) {\n                this.setTotalLabelsToZero();\n                return;\n            }\n        }\n\n        if (lastPageFound) {\n            this.lbTotal.textContent = this.formatNumber(totalPages);\n            this.lbRecordCount.textContent = this.formatNumber(rowCount!);\n        } else {\n            const moreText = this.localeService.getLocaleTextFunc()('more', 'more');\n            this.lbTotal.innerHTML = moreText;\n            this.lbRecordCount.innerHTML = moreText;\n        }\n    }\n\n    private setTotalLabelsToZero() {\n        this.lbFirstRowOnPage.textContent = this.formatNumber(0);\n        this.lbCurrent.textContent = this.formatNumber(0);\n        this.lbLastRowOnPage.textContent = this.formatNumber(0);\n        this.lbTotal.textContent = this.formatNumber(0);\n        this.lbRecordCount.textContent = this.formatNumber(0);\n    }\n}\n\nexport const PaginationSelector: ComponentSelector = {\n    selector: 'AG-PAGINATION',\n    component: PaginationComp,\n};\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { RowNode } from '../entities/rowNode';\nimport type { RowPosition } from '../entities/rowPositionUtils';\nimport type { PaginationChangedEvent } from '../events';\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\nimport type { IRowModel } from '../interfaces/iRowModel';\nimport { _exists } from '../utils/generic';\nimport type { ComponentSelector } from '../widgets/component';\nimport type { PageBoundsService } from './pageBoundsService';\nimport { PaginationSelector } from './paginationComp';\n\nexport class PaginationService extends BeanStub implements NamedBean {\n    beanName = 'paginationService' as const;\n\n    private rowModel: IRowModel;\n    private pageBoundsService: PageBoundsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.rowModel = beans.rowModel;\n        this.pageBoundsService = beans.pageBoundsService;\n    }\n\n    private active: boolean;\n    private paginateChildRows: boolean;\n\n    // We should track all the different sources of page size, as we can fall back to the next one if one is missing.\n    // or if user preferences change (Example: disabling auto page size option should mean we get page size from\n    // page size selector value - if a value was previously selected .. otherwise fall back to initial state value).\n    // IMPORTANT: We should always use this.pageSize getter to get the page size instead of accessing\n    // directly to these variables, as the getter takes care of returning the correct value based on precedence.\n    private pageSizeAutoCalculated?: number; // When paginationAutoPageSize = true or when the pages panel is disabled\n    private pageSizeFromPageSizeSelector?: number; // When user selects page size from page size selector.\n    private pageSizeFromInitialState?: number; // When the initial grid state is loaded, and a page size rehydrated\n    private pageSizeFromGridOptions?: number; // When user sets gridOptions.paginationPageSize.\n    private defaultPageSize: 100; // When nothing else set, default page size is 100.\n\n    private totalPages: number;\n    private currentPage = 0;\n\n    private topDisplayedRowIndex = 0;\n    private bottomDisplayedRowIndex = 0;\n\n    private masterRowCount: number = 0;\n\n    public postConstruct() {\n        this.active = this.gos.get('pagination');\n        this.pageSizeFromGridOptions = this.gos.get('paginationPageSize');\n        this.paginateChildRows = this.isPaginateChildRows();\n\n        this.addManagedPropertyListener('pagination', this.onPaginationGridOptionChanged.bind(this));\n        this.addManagedPropertyListener('paginationPageSize', this.onPageSizeGridOptionChanged.bind(this));\n    }\n\n    public getPaginationSelector(): ComponentSelector {\n        return PaginationSelector;\n    }\n\n    private isPaginateChildRows(): boolean {\n        const shouldPaginate =\n            this.gos.get('groupRemoveSingleChildren') || this.gos.get('groupRemoveLowestSingleChildren');\n        if (shouldPaginate) {\n            return true;\n        }\n        return this.gos.get('paginateChildRows');\n    }\n\n    private onPaginationGridOptionChanged(): void {\n        this.active = this.gos.get('pagination');\n        this.calculatePages();\n\n        // important to keep rendered rows, otherwise every time grid is resized,\n        // we would destroy all the rows.\n        this.dispatchPaginationChangedEvent({ keepRenderedRows: true });\n    }\n\n    private onPageSizeGridOptionChanged(): void {\n        this.setPageSize(this.gos.get('paginationPageSize'), 'gridOptions');\n    }\n\n    public goToPage(page: number): void {\n        if (!this.active || this.currentPage === page || typeof this.currentPage !== 'number') {\n            return;\n        }\n\n        this.currentPage = page;\n        this.calculatePages();\n\n        this.dispatchPaginationChangedEvent({ newPage: true });\n    }\n\n    public isRowPresent(rowNode: RowNode): boolean {\n        const nodeIsInPage =\n            rowNode.rowIndex! >= this.topDisplayedRowIndex && rowNode.rowIndex! <= this.bottomDisplayedRowIndex;\n        return nodeIsInPage;\n    }\n\n    private getPageForIndex(index: number): number {\n        return Math.floor(index / this.pageSize);\n    }\n\n    public goToPageWithIndex(index: any): void {\n        if (!this.active) {\n            return;\n        }\n\n        const pageNumber = this.getPageForIndex(index);\n        this.goToPage(pageNumber);\n    }\n\n    public isRowInPage(row: RowPosition): boolean {\n        if (!this.active) {\n            return true;\n        }\n        const rowPage = this.getPageForIndex(row.rowIndex);\n        return rowPage === this.currentPage;\n    }\n\n    public getCurrentPage(): number {\n        return this.currentPage;\n    }\n\n    public goToNextPage(): void {\n        this.goToPage(this.currentPage + 1);\n    }\n\n    public goToPreviousPage(): void {\n        this.goToPage(this.currentPage - 1);\n    }\n\n    public goToFirstPage(): void {\n        this.goToPage(0);\n    }\n\n    public goToLastPage(): void {\n        const rowCount = this.rowModel.getRowCount();\n        const lastPage = Math.floor(rowCount / this.pageSize);\n        this.goToPage(lastPage);\n    }\n\n    public getPageSize(): number {\n        return this.pageSize;\n    }\n\n    public getTotalPages(): number {\n        return this.totalPages;\n    }\n\n    /** This is only for state setting before data has been loaded */\n    public setPage(page: number): void {\n        this.currentPage = page;\n    }\n\n    private get pageSize(): number {\n        if (_exists(this.pageSizeAutoCalculated)) {\n            return this.pageSizeAutoCalculated;\n        }\n        if (_exists(this.pageSizeFromPageSizeSelector)) {\n            return this.pageSizeFromPageSizeSelector;\n        }\n        if (_exists(this.pageSizeFromInitialState)) {\n            return this.pageSizeFromInitialState;\n        }\n        if (_exists(this.pageSizeFromGridOptions)) {\n            return this.pageSizeFromGridOptions;\n        }\n        return this.defaultPageSize;\n    }\n\n    public calculatePages(): void {\n        if (this.active) {\n            if (this.paginateChildRows) {\n                this.calculatePagesAllRows();\n            } else {\n                this.calculatePagesMasterRowsOnly();\n            }\n        } else {\n            this.calculatedPagesNotActive();\n        }\n\n        this.pageBoundsService.calculateBounds(this.topDisplayedRowIndex, this.bottomDisplayedRowIndex);\n    }\n\n    public unsetAutoCalculatedPageSize(): void {\n        if (this.pageSizeAutoCalculated === undefined) {\n            return;\n        }\n        const oldPageSize = this.pageSizeAutoCalculated;\n\n        this.pageSizeAutoCalculated = undefined;\n\n        if (this.pageSize === oldPageSize) {\n            return;\n        }\n\n        this.calculatePages();\n\n        this.dispatchPaginationChangedEvent({ newPageSize: true });\n    }\n\n    public setPageSize(\n        size: number | undefined,\n        source: 'autoCalculated' | 'pageSizeSelector' | 'initialState' | 'gridOptions'\n    ): void {\n        const currentSize = this.pageSize;\n        switch (source) {\n            case 'autoCalculated':\n                this.pageSizeAutoCalculated = size;\n                break;\n            case 'pageSizeSelector':\n                this.pageSizeFromPageSizeSelector = size;\n                if (this.currentPage !== 0) {\n                    this.goToFirstPage();\n                }\n                break;\n            case 'initialState':\n                this.pageSizeFromInitialState = size;\n                break;\n            case 'gridOptions':\n                this.pageSizeFromGridOptions = size;\n                this.pageSizeFromInitialState = undefined;\n                this.pageSizeFromPageSizeSelector = undefined;\n                if (this.currentPage !== 0) {\n                    this.goToFirstPage();\n                }\n                break;\n        }\n\n        if (currentSize !== this.pageSize) {\n            this.calculatePages();\n\n            this.dispatchPaginationChangedEvent({ newPageSize: true, keepRenderedRows: true });\n        }\n    }\n\n    private setZeroRows(): void {\n        this.masterRowCount = 0;\n        this.topDisplayedRowIndex = 0;\n        this.bottomDisplayedRowIndex = -1;\n        this.currentPage = 0;\n        this.totalPages = 0;\n    }\n\n    private adjustCurrentPageIfInvalid() {\n        if (this.currentPage >= this.totalPages) {\n            this.currentPage = this.totalPages - 1;\n        }\n\n        if (!isFinite(this.currentPage) || isNaN(this.currentPage) || this.currentPage < 0) {\n            this.currentPage = 0;\n        }\n    }\n\n    private calculatePagesMasterRowsOnly(): void {\n        // const csrm = <ClientSideRowModel> this.rowModel;\n        // const rootNode = csrm.getRootNode();\n        // const masterRows = rootNode.childrenAfterSort;\n\n        this.masterRowCount = this.rowModel.getTopLevelRowCount();\n\n        // we say <=0 (rather than =0) as viewport returns -1 when no rows\n        if (this.masterRowCount <= 0) {\n            this.setZeroRows();\n            return;\n        }\n\n        const masterLastRowIndex = this.masterRowCount - 1;\n        this.totalPages = Math.floor(masterLastRowIndex / this.pageSize) + 1;\n\n        this.adjustCurrentPageIfInvalid();\n\n        const masterPageStartIndex = this.pageSize * this.currentPage;\n        let masterPageEndIndex = this.pageSize * (this.currentPage + 1) - 1;\n\n        if (masterPageEndIndex > masterLastRowIndex) {\n            masterPageEndIndex = masterLastRowIndex;\n        }\n\n        this.topDisplayedRowIndex = this.rowModel.getTopLevelRowDisplayedIndex(masterPageStartIndex);\n        // masterRows[masterPageStartIndex].rowIndex;\n\n        if (masterPageEndIndex === masterLastRowIndex) {\n            // if showing the last master row, then we want to show the very last row of the model\n            this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;\n        } else {\n            const firstIndexNotToShow = this.rowModel.getTopLevelRowDisplayedIndex(masterPageEndIndex + 1);\n            //masterRows[masterPageEndIndex + 1].rowIndex;\n            // this gets the index of the last child - eg current row is open, we want to display all children,\n            // the index of the last child is one less than the index of the next parent row.\n            this.bottomDisplayedRowIndex = firstIndexNotToShow - 1;\n        }\n    }\n\n    public getMasterRowCount(): number {\n        return this.masterRowCount;\n    }\n\n    private calculatePagesAllRows(): void {\n        this.masterRowCount = this.rowModel.getRowCount();\n\n        if (this.masterRowCount === 0) {\n            this.setZeroRows();\n            return;\n        }\n\n        const maxRowIndex = this.masterRowCount - 1;\n        this.totalPages = Math.floor(maxRowIndex / this.pageSize) + 1;\n\n        this.adjustCurrentPageIfInvalid();\n\n        this.topDisplayedRowIndex = this.pageSize * this.currentPage;\n        this.bottomDisplayedRowIndex = this.pageSize * (this.currentPage + 1) - 1;\n\n        if (this.bottomDisplayedRowIndex > maxRowIndex) {\n            this.bottomDisplayedRowIndex = maxRowIndex;\n        }\n    }\n\n    private calculatedPagesNotActive(): void {\n        // when pagination is not active we don't use any page size variables,\n        // however need to unset this so if enabled we recalculate.\n        this.setPageSize(undefined, 'autoCalculated');\n        this.totalPages = 1;\n        this.currentPage = 0;\n        this.topDisplayedRowIndex = 0;\n        this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;\n    }\n\n    private dispatchPaginationChangedEvent(params: {\n        newPage?: boolean;\n        newPageSize?: boolean;\n        keepRenderedRows?: boolean;\n    }): void {\n        const { keepRenderedRows = false, newPage = false, newPageSize = false } = params;\n        const paginationChangedEvent: WithoutGridCommon<PaginationChangedEvent> = {\n            type: 'paginationChanged',\n            animate: false,\n            newData: false,\n            newPage,\n            newPageSize,\n            keepRenderedRows,\n        };\n        this.eventService.dispatchEvent(paginationChangedEvent);\n    }\n}\n", "import type { Module } from '../interfaces/iModule';\nimport { VERSION } from '../version';\nimport {\n    paginationGetCurrentPage,\n    paginationGetPageSize,\n    paginationGetRowCount,\n    paginationGetTotalPages,\n    paginationGoToFirstPage,\n    paginationGoToLastPage,\n    paginationGoToNextPage,\n    paginationGoToPage,\n    paginationGoToPreviousPage,\n    paginationIsLastPageFound,\n} from './paginationApi';\nimport { PaginationAutoPageSizeService } from './paginationAutoPageSizeService';\nimport { PaginationService } from './paginationService';\n\nexport const PaginationCoreModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/pagination-core',\n    beans: [PaginationService, PaginationAutoPageSizeService],\n};\n\nexport const PaginationApiModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/pagination-api',\n    dependantModules: [PaginationCoreModule],\n    apiFunctions: {\n        paginationIsLastPageFound,\n        paginationGetPageSize,\n        paginationGetCurrentPage,\n        paginationGetTotalPages,\n        paginationGetRowCount,\n        paginationGoToNextPage,\n        paginationGoToPreviousPage,\n        paginationGoToFirstPage,\n        paginationGoToLastPage,\n        paginationGoToPage,\n    },\n};\n\nexport const PaginationModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/pagination',\n    dependantModules: [PaginationCoreModule, PaginationApiModule],\n};\n", "import type { ApiFunction, ApiFunctionName } from '../api/iApiFunction';\nimport type { BeanCollection } from '../context/context';\nimport type { RowModelType } from '../interfaces/iRowModel';\nimport { ModuleNames } from '../modules/moduleNames';\nimport { ModuleRegistry } from '../modules/moduleRegistry';\nimport { _errorOnce, _warnOnce } from '../utils/function';\n\n// enable minification\nconst coreModule = ModuleNames.CommunityCoreModule;\nconst clientSideRowModelModule = ModuleNames.ClientSideRowModelModule;\nconst csvExportModule = ModuleNames.CsvExportModule;\nconst infiniteRowModelModule = ModuleNames.InfiniteRowModelModule;\nconst advancedFilterModule = ModuleNames.AdvancedFilterModule;\nconst gridChartsModule = ModuleNames.GridChartsModule;\nconst clipboardModule = ModuleNames.ClipboardModule;\nconst excelExportModule = ModuleNames.ExcelExportModule;\nconst masterDetailModule = ModuleNames.MasterDetailModule;\nconst menuModule = ModuleNames.MenuModule;\nconst rangeSelectionModule = ModuleNames.RangeSelectionModule;\nconst rowGroupingModule = ModuleNames.RowGroupingModule;\nconst serverSideRowModelModule = ModuleNames.ServerSideRowModelModule;\nconst sideBarModule = ModuleNames.SideBarModule;\nconst statusBarModule = ModuleNames.StatusBarModule;\n\nconst functionModules: { [name in ApiFunctionName]: ModuleNames } = {\n    dispatchEvent: coreModule,\n    getState: coreModule,\n    getGridId: coreModule,\n    destroy: coreModule,\n    isDestroyed: coreModule,\n    getGridOption: coreModule,\n    setGridOption: coreModule,\n    updateGridOptions: coreModule,\n    setNodesSelected: coreModule,\n    selectAll: coreModule,\n    deselectAll: coreModule,\n    selectAllFiltered: coreModule,\n    deselectAllFiltered: coreModule,\n    selectAllOnCurrentPage: coreModule,\n    deselectAllOnCurrentPage: coreModule,\n    getSelectedNodes: coreModule,\n    getSelectedRows: coreModule,\n    redrawRows: coreModule,\n    setRowNodeExpanded: coreModule,\n    getRowNode: coreModule,\n    addRenderedRowListener: coreModule,\n    getRenderedNodes: coreModule,\n    forEachNode: coreModule,\n    getFirstDisplayedRow: coreModule,\n    getFirstDisplayedRowIndex: coreModule,\n    getLastDisplayedRow: coreModule,\n    getLastDisplayedRowIndex: coreModule,\n    getDisplayedRowAtIndex: coreModule,\n    getDisplayedRowCount: coreModule,\n    getModel: coreModule,\n    getVerticalPixelRange: coreModule,\n    getHorizontalPixelRange: coreModule,\n    ensureColumnVisible: coreModule,\n    ensureIndexVisible: coreModule,\n    ensureNodeVisible: coreModule,\n    getFocusedCell: coreModule,\n    clearFocusedCell: coreModule,\n    setFocusedCell: coreModule,\n    tabToNextCell: coreModule,\n    tabToPreviousCell: coreModule,\n    setFocusedHeader: coreModule,\n    addEventListener: coreModule,\n    addGlobalListener: coreModule,\n    removeEventListener: coreModule,\n    removeGlobalListener: coreModule,\n    expireValueCache: coreModule,\n    getValue: coreModule,\n    getCellValue: coreModule,\n    showColumnMenuAfterButtonClick: coreModule,\n    showColumnMenuAfterMouseClick: coreModule,\n    showColumnMenu: coreModule,\n    hidePopupMenu: coreModule,\n    onSortChanged: coreModule,\n    getPinnedTopRowCount: coreModule,\n    getPinnedBottomRowCount: coreModule,\n    getPinnedTopRow: coreModule,\n    getPinnedBottomRow: coreModule,\n    showLoadingOverlay: coreModule,\n    showNoRowsOverlay: coreModule,\n    hideOverlay: coreModule,\n    setGridAriaProperty: coreModule,\n    refreshCells: coreModule,\n    flashCells: coreModule,\n    refreshHeader: coreModule,\n    isAnimationFrameQueueEmpty: coreModule,\n    flushAllAnimationFrames: coreModule,\n    getSizesForCurrentTheme: coreModule,\n    getCellRendererInstances: coreModule,\n    addRowDropZone: coreModule,\n    removeRowDropZone: coreModule,\n    getRowDropZoneParams: coreModule,\n    getColumnDef: coreModule,\n    getColumnDefs: coreModule,\n    sizeColumnsToFit: coreModule,\n    setColumnGroupOpened: coreModule,\n    getColumnGroup: coreModule,\n    getProvidedColumnGroup: coreModule,\n    getDisplayNameForColumn: coreModule,\n    getDisplayNameForColumnGroup: coreModule,\n    getColumn: coreModule,\n    getColumns: coreModule,\n    applyColumnState: coreModule,\n    getColumnState: coreModule,\n    resetColumnState: coreModule,\n    getColumnGroupState: coreModule,\n    setColumnGroupState: coreModule,\n    resetColumnGroupState: coreModule,\n    isPinning: coreModule,\n    isPinningLeft: coreModule,\n    isPinningRight: coreModule,\n    getDisplayedColAfter: coreModule,\n    getDisplayedColBefore: coreModule,\n    setColumnVisible: coreModule,\n    setColumnsVisible: coreModule,\n    setColumnPinned: coreModule,\n    setColumnsPinned: coreModule,\n    getAllGridColumns: coreModule,\n    getDisplayedLeftColumns: coreModule,\n    getDisplayedCenterColumns: coreModule,\n    getDisplayedRightColumns: coreModule,\n    getAllDisplayedColumns: coreModule,\n    getAllDisplayedVirtualColumns: coreModule,\n    moveColumn: coreModule,\n    moveColumnByIndex: coreModule,\n    moveColumns: coreModule,\n    setColumnWidth: coreModule,\n    setColumnWidths: coreModule,\n    getLeftDisplayedColumnGroups: coreModule,\n    getCenterDisplayedColumnGroups: coreModule,\n    getRightDisplayedColumnGroups: coreModule,\n    getAllDisplayedColumnGroups: coreModule,\n    autoSizeColumn: coreModule,\n    autoSizeColumns: coreModule,\n    autoSizeAllColumns: coreModule,\n\n    undoCellEditing: coreModule,\n    redoCellEditing: coreModule,\n    getCellEditorInstances: coreModule,\n    getEditingCells: coreModule,\n    stopEditing: coreModule,\n    startEditingCell: coreModule,\n    getCurrentUndoSize: coreModule,\n    getCurrentRedoSize: coreModule,\n\n    isAnyFilterPresent: coreModule,\n    onFilterChanged: coreModule,\n    isColumnFilterPresent: coreModule,\n    getFilterInstance: coreModule,\n    getColumnFilterInstance: coreModule,\n    destroyFilter: coreModule,\n    setFilterModel: coreModule,\n    getFilterModel: coreModule,\n    getColumnFilterModel: coreModule,\n    setColumnFilterModel: coreModule,\n    showColumnFilter: coreModule,\n    isQuickFilterPresent: coreModule,\n    getQuickFilter: coreModule,\n    resetQuickFilter: coreModule,\n\n    paginationIsLastPageFound: coreModule,\n    paginationGetPageSize: coreModule,\n    paginationGetCurrentPage: coreModule,\n    paginationGetTotalPages: coreModule,\n    paginationGetRowCount: coreModule,\n    paginationGoToNextPage: coreModule,\n    paginationGoToPreviousPage: coreModule,\n    paginationGoToFirstPage: coreModule,\n    paginationGoToLastPage: coreModule,\n    paginationGoToPage: coreModule,\n\n    // These may need updating to say which of multiple possible modules they could be missing from.\n    expandAll: coreModule,\n    collapseAll: coreModule,\n    onRowHeightChanged: coreModule,\n    setRowCount: coreModule,\n    getCacheBlockState: coreModule,\n\n    onGroupExpandedOrCollapsed: clientSideRowModelModule,\n    refreshClientSideRowModel: clientSideRowModelModule,\n    forEachLeafNode: clientSideRowModelModule,\n    forEachNodeAfterFilter: clientSideRowModelModule,\n    forEachNodeAfterFilterAndSort: clientSideRowModelModule,\n    resetRowHeights: clientSideRowModelModule,\n    applyTransaction: clientSideRowModelModule,\n    applyTransactionAsync: clientSideRowModelModule,\n    flushAsyncTransactions: clientSideRowModelModule,\n    getBestCostNodeSelection: clientSideRowModelModule,\n    getDataAsCsv: csvExportModule,\n    exportDataAsCsv: csvExportModule,\n    refreshInfiniteCache: infiniteRowModelModule,\n    purgeInfiniteCache: infiniteRowModelModule,\n    getInfiniteRowCount: infiniteRowModelModule,\n    isLastRowIndexKnown: infiniteRowModelModule,\n    getAdvancedFilterModel: advancedFilterModule,\n    setAdvancedFilterModel: advancedFilterModule,\n    showAdvancedFilterBuilder: advancedFilterModule,\n    hideAdvancedFilterBuilder: advancedFilterModule,\n    getChartModels: gridChartsModule,\n    getChartRef: gridChartsModule,\n    getChartImageDataURL: gridChartsModule,\n    downloadChart: gridChartsModule,\n    openChartToolPanel: gridChartsModule,\n    closeChartToolPanel: gridChartsModule,\n    createRangeChart: gridChartsModule,\n    createPivotChart: gridChartsModule,\n    createCrossFilterChart: gridChartsModule,\n    updateChart: gridChartsModule,\n    restoreChart: gridChartsModule,\n    copyToClipboard: clipboardModule,\n    cutToClipboard: clipboardModule,\n    copySelectedRowsToClipboard: clipboardModule,\n    copySelectedRangeToClipboard: clipboardModule,\n    copySelectedRangeDown: clipboardModule,\n    pasteFromClipboard: clipboardModule,\n    getDataAsExcel: excelExportModule,\n    exportDataAsExcel: excelExportModule,\n    getSheetDataForExcel: excelExportModule,\n    getMultipleSheetsAsExcel: excelExportModule,\n    exportMultipleSheetsAsExcel: excelExportModule,\n    addDetailGridInfo: masterDetailModule,\n    removeDetailGridInfo: masterDetailModule,\n    getDetailGridInfo: masterDetailModule,\n    forEachDetailGridInfo: masterDetailModule,\n    showContextMenu: menuModule,\n    showColumnChooser: menuModule,\n    hideColumnChooser: menuModule,\n    getCellRanges: rangeSelectionModule,\n    addCellRange: rangeSelectionModule,\n    clearRangeSelection: rangeSelectionModule,\n    addAggFunc: rowGroupingModule,\n    addAggFuncs: rowGroupingModule,\n    clearAggFuncs: rowGroupingModule,\n    setColumnAggFunc: rowGroupingModule,\n    isPivotMode: rowGroupingModule,\n    getPivotResultColumn: rowGroupingModule,\n    setValueColumns: rowGroupingModule,\n    getValueColumns: rowGroupingModule,\n    removeValueColumn: rowGroupingModule,\n    removeValueColumns: rowGroupingModule,\n    addValueColumn: rowGroupingModule,\n    addValueColumns: rowGroupingModule,\n    setRowGroupColumns: rowGroupingModule,\n    removeRowGroupColumn: rowGroupingModule,\n    removeRowGroupColumns: rowGroupingModule,\n    addRowGroupColumn: rowGroupingModule,\n    addRowGroupColumns: rowGroupingModule,\n    getRowGroupColumns: rowGroupingModule,\n    moveRowGroupColumn: rowGroupingModule,\n    setPivotColumns: rowGroupingModule,\n    removePivotColumn: rowGroupingModule,\n    removePivotColumns: rowGroupingModule,\n    addPivotColumn: rowGroupingModule,\n    addPivotColumns: rowGroupingModule,\n    getPivotColumns: rowGroupingModule,\n    setPivotResultColumns: rowGroupingModule,\n    getPivotResultColumns: rowGroupingModule,\n    getServerSideSelectionState: serverSideRowModelModule,\n    setServerSideSelectionState: serverSideRowModelModule,\n    applyServerSideTransaction: serverSideRowModelModule,\n    applyServerSideTransactionAsync: serverSideRowModelModule,\n    applyServerSideRowData: serverSideRowModelModule,\n    retryServerSideLoads: serverSideRowModelModule,\n    flushServerSideAsyncTransactions: serverSideRowModelModule,\n    refreshServerSide: serverSideRowModelModule,\n    getServerSideGroupLevelState: serverSideRowModelModule,\n    isSideBarVisible: sideBarModule,\n    setSideBarVisible: sideBarModule,\n    setSideBarPosition: sideBarModule,\n    openToolPanel: sideBarModule,\n    closeToolPanel: sideBarModule,\n    getOpenedToolPanel: sideBarModule,\n    refreshToolPanel: sideBarModule,\n    isToolPanelShowing: sideBarModule,\n    getToolPanelInstance: sideBarModule,\n    getSideBar: sideBarModule,\n    getStatusPanel: statusBarModule,\n};\n\nconst clientSide = 'clientSide';\nconst serverSide = 'serverSide';\nconst infinite = 'infinite';\n\nconst functionRowModels: { [name in ApiFunctionName]?: RowModelType[] } = {\n    onGroupExpandedOrCollapsed: [clientSide],\n    refreshClientSideRowModel: [clientSide],\n    forEachLeafNode: [clientSide],\n    forEachNodeAfterFilter: [clientSide],\n    forEachNodeAfterFilterAndSort: [clientSide],\n    resetRowHeights: [clientSide],\n    applyTransaction: [clientSide],\n    applyTransactionAsync: [clientSide],\n    flushAsyncTransactions: [clientSide],\n    getBestCostNodeSelection: [clientSide],\n    getServerSideSelectionState: [serverSide],\n    setServerSideSelectionState: [serverSide],\n    applyServerSideTransaction: [serverSide],\n    applyServerSideTransactionAsync: [serverSide],\n    applyServerSideRowData: [serverSide],\n    retryServerSideLoads: [serverSide],\n    flushServerSideAsyncTransactions: [serverSide],\n    refreshServerSide: [serverSide],\n    getServerSideGroupLevelState: [serverSide],\n    refreshInfiniteCache: [infinite],\n    purgeInfiniteCache: [infinite],\n    getInfiniteRowCount: [infinite],\n    isLastRowIndexKnown: [infinite],\n    expandAll: [clientSide, serverSide],\n    collapseAll: [clientSide, serverSide],\n    onRowHeightChanged: [clientSide, serverSide],\n    setRowCount: [infinite, serverSide],\n    getCacheBlockState: [infinite, serverSide],\n};\n\n/** Utility type to support adding params to a grid api method. */\ntype StartsWithApiFunctionName = `${ApiFunctionName}${string}`;\n\nconst deprecatedFunctions: {\n    [name in ApiFunctionName]?: {\n        version: string;\n        old?: StartsWithApiFunctionName;\n        new?: StartsWithApiFunctionName;\n        message?: string;\n    };\n} = {\n    getValue: {\n        version: 'v31.3',\n        new: 'getCellValue',\n    },\n    getFirstDisplayedRow: {\n        version: 'v31.1',\n        new: 'getFirstDisplayedRowIndex',\n    },\n    getLastDisplayedRow: {\n        version: 'v31.1',\n        new: 'getLastDisplayedRowIndex',\n    },\n    getModel: {\n        version: 'v31.1',\n        message: 'Please use the appropriate grid API methods instead.',\n    },\n    setColumnVisible: {\n        version: 'v31.1',\n        old: 'setColumnVisible(key,visible)',\n        new: 'setColumnsVisible([key],visible)',\n    },\n    setColumnPinned: {\n        version: 'v31.1',\n        old: 'setColumnPinned(key,pinned)',\n        new: 'setColumnsPinned([key],pinned)',\n    },\n    moveColumn: {\n        version: 'v31.1',\n        old: 'moveColumn(key, toIndex)',\n        new: 'moveColumns([key], toIndex)',\n    },\n    setColumnWidth: {\n        version: 'v31.1',\n        old: 'setColumnWidth(col, width)',\n        new: 'setColumnWidths([{key: col, newWidth: width}])',\n    },\n    autoSizeColumn: {\n        version: 'v31.1',\n        old: 'autoSizeColumn(key, skipHeader)',\n        new: 'autoSizeColumns([key], skipHeader)',\n    },\n    addAggFunc: {\n        version: 'v31.1',\n        old: 'addAggFunc(key, func)',\n        new: 'addAggFuncs({ key: func })',\n    },\n    removeValueColumn: {\n        version: 'v31.1',\n        old: 'removeValueColumn(colKey)',\n        new: 'removeValueColumns([colKey])',\n    },\n    addValueColumn: {\n        version: 'v31.1',\n        old: 'addValueColumn(colKey)',\n        new: 'addValueColumns([colKey])',\n    },\n    removeRowGroupColumn: {\n        version: 'v31.1',\n        old: 'removeRowGroupColumn(colKey)',\n        new: 'removeRowGroupColumns([colKey])',\n    },\n    addRowGroupColumn: {\n        version: 'v31.1',\n        old: 'addRowGroupColumn(colKey)',\n        new: 'addRowGroupColumns([colKey])',\n    },\n    removePivotColumn: {\n        version: 'v31.1',\n        old: 'removePivotColumn(colKey)',\n        new: 'removePivotColumns([colKey])',\n    },\n    addPivotColumn: {\n        version: 'v31.1',\n        old: 'addPivotColumn(colKey)',\n        new: 'addPivotColumns([colKey])',\n    },\n    showColumnMenuAfterButtonClick: {\n        version: 'v31.1',\n        message: `Use 'IHeaderParams.showColumnMenu' within a header component, or 'api.showColumnMenu' elsewhere.`,\n    },\n    showColumnMenuAfterMouseClick: {\n        version: 'v31.1',\n        message: `Use 'IHeaderParams.showColumnMenuAfterMouseClick' within a header component, or 'api.showColumnMenu' elsewhere.`,\n    },\n    getFilterInstance: {\n        version: 'v31.1',\n        message: `'getFilterInstance' is deprecated. To get/set individual filter models, use 'getColumnFilterModel' or 'setColumnFilterModel' instead. To get hold of the filter instance, use 'getColumnFilterInstance' which returns the instance asynchronously.`,\n    },\n    showLoadingOverlay: {\n        version: 'v32',\n        message:\n            '`showLoadingOverlay` is deprecated. Use the grid option \"loading\"=true instead or setGridOption(\"loading\", true).',\n    },\n};\n\nexport function warnMissingApiFunction(functionName: ApiFunctionName, gridId: string): void {\n    const module = functionModules[functionName];\n\n    if (module) {\n        ModuleRegistry.__assertRegistered(module, `api.${functionName}`, gridId);\n    } else {\n        // this shouldn't happen unless user has a typo in the api call\n        _errorOnce(`Unknown API function: '${functionName}' on GridApi.`);\n    }\n}\n\nexport function validateApiFunction<TFunctionName extends ApiFunctionName>(\n    functionName: TFunctionName,\n    apiFunction: ApiFunction<TFunctionName>,\n    beans: BeanCollection\n): ApiFunction<TFunctionName> {\n    const deprecation = deprecatedFunctions[functionName];\n    if (deprecation) {\n        const { version, new: replacement, old, message } = deprecation;\n        const apiMethod = old ?? functionName;\n        return (...args: any[]) => {\n            const replacementMessage = replacement ? `Please use ${replacement} instead. ` : '';\n            _warnOnce(`Since ${version} api.${apiMethod} is deprecated. ${replacementMessage}${message ?? ''}`);\n            return apiFunction.apply(apiFunction, args);\n        };\n    }\n    const rowModels = functionRowModels[functionName];\n    if (rowModels) {\n        return (...args: any[]) => {\n            const rowModel = beans.rowModel.getType();\n            if (!rowModels.includes(rowModel)) {\n                _errorOnce(\n                    `api.${functionName} can only be called when gridOptions.rowModelType is ${rowModels.join(' or ')}`\n                );\n                return undefined;\n            }\n            return apiFunction.apply(apiFunction, args);\n        };\n    }\n    return apiFunction;\n}\n", "import type { ColDef, ColGroupDef, ColumnMenuTab } from '../../entities/colDef';\nimport type { GridOptions } from '../../entities/gridOptions';\nimport { ModuleNames } from '../../modules/moduleNames';\nimport type { Deprecations, OptionsValidator, Validations } from '../validationTypes';\n\nconst COLUMN_DEFINITION_DEPRECATIONS: Deprecations<ColDef | ColGroupDef> = {\n    columnsMenuParams: { version: '31.1', message: 'Use `columnChooserParams` instead.' },\n    suppressMenu: { version: '31.1', message: 'Use `suppressHeaderMenuButton` instead.' },\n    suppressCellFlash: { version: '31.2', message: 'Use `enableCellChangeFlash={false}` in the ColDef' },\n};\n\nconst CSRM_REQUIRES_ROW_GROUP_MODULE = (_options: never, gridOptions: GridOptions) => {\n    if ((gridOptions.rowModelType ?? 'clientSide') === 'clientSide') {\n        return { module: ModuleNames.RowGroupingModule };\n    }\n    return null;\n};\n\nconst COLUMN_DEFINITION_VALIDATIONS: Validations<ColDef | ColGroupDef> = {\n    // supported on all row models, but need module for client side.\n    enableRowGroup: CSRM_REQUIRES_ROW_GROUP_MODULE,\n    rowGroup: CSRM_REQUIRES_ROW_GROUP_MODULE,\n    rowGroupIndex: CSRM_REQUIRES_ROW_GROUP_MODULE,\n    enablePivot: CSRM_REQUIRES_ROW_GROUP_MODULE,\n    enableValue: CSRM_REQUIRES_ROW_GROUP_MODULE,\n    pivot: CSRM_REQUIRES_ROW_GROUP_MODULE,\n    pivotIndex: CSRM_REQUIRES_ROW_GROUP_MODULE,\n    aggFunc: CSRM_REQUIRES_ROW_GROUP_MODULE,\n\n    cellEditor: (options) => {\n        if (options.cellEditor === 'agRichSelect' || options.cellEditor === 'agRichSelectCellEditor') {\n            return { module: ModuleNames.RichSelectModule };\n        }\n        return null;\n    },\n\n    menuTabs: (options) => {\n        const enterpriseMenuTabs: ColumnMenuTab[] = ['columnsMenuTab', 'generalMenuTab'];\n        if (options.menuTabs?.some((tab) => enterpriseMenuTabs.includes(tab))) {\n            return {\n                module: ModuleNames.MenuModule,\n            };\n        }\n        return null;\n    },\n    columnsMenuParams: {\n        module: [ModuleNames.MenuModule, ModuleNames.ColumnsToolPanelModule],\n    },\n    columnChooserParams: {\n        module: [ModuleNames.MenuModule, ModuleNames.ColumnsToolPanelModule],\n    },\n\n    headerCheckboxSelection: {\n        supportedRowModels: ['clientSide', 'serverSide'],\n        dependencies: (_options, { rowSelection }) =>\n            rowSelection === 'multiple' ? null : 'headerCheckboxSelection is only supported with rowSelection=multiple',\n    },\n    headerCheckboxSelectionFilteredOnly: {\n        supportedRowModels: ['clientSide'],\n        dependencies: (_options, { rowSelection }) =>\n            rowSelection === 'multiple'\n                ? null\n                : 'headerCheckboxSelectionFilteredOnly is only supported with rowSelection=multiple',\n    },\n    headerCheckboxSelectionCurrentPageOnly: {\n        supportedRowModels: ['clientSide'],\n        dependencies: (_options, { rowSelection }) =>\n            rowSelection === 'multiple'\n                ? null\n                : 'headerCheckboxSelectionCurrentPageOnly is only supported with rowSelection=multiple',\n    },\n\n    children: () => COL_DEF_VALIDATORS,\n};\n\ntype ColKey = keyof ColDef | keyof ColGroupDef;\nconst colDefPropertyMap: Record<ColKey, undefined> = {\n    headerName: undefined,\n    columnGroupShow: undefined,\n    headerClass: undefined,\n    toolPanelClass: undefined,\n    headerValueGetter: undefined,\n    pivotKeys: undefined,\n    groupId: undefined,\n    colId: undefined,\n    sort: undefined,\n    initialSort: undefined,\n    field: undefined,\n    type: undefined,\n    cellDataType: undefined,\n    tooltipComponent: undefined,\n    tooltipField: undefined,\n    headerTooltip: undefined,\n    cellClass: undefined,\n    showRowGroup: undefined,\n    filter: undefined,\n    initialAggFunc: undefined,\n    defaultAggFunc: undefined,\n    aggFunc: undefined,\n    pinned: undefined,\n    initialPinned: undefined,\n    chartDataType: undefined,\n    cellAriaRole: undefined,\n    cellEditorPopupPosition: undefined,\n    headerGroupComponent: undefined,\n    headerGroupComponentParams: undefined,\n    cellStyle: undefined,\n    cellRenderer: undefined,\n    cellRendererParams: undefined,\n    cellEditor: undefined,\n    cellEditorParams: undefined,\n    filterParams: undefined,\n    pivotValueColumn: undefined,\n    headerComponent: undefined,\n    headerComponentParams: undefined,\n    floatingFilterComponent: undefined,\n    floatingFilterComponentParams: undefined,\n    tooltipComponentParams: undefined,\n    refData: undefined,\n    columnsMenuParams: undefined,\n    columnChooserParams: undefined,\n    children: undefined,\n    sortingOrder: undefined,\n    allowedAggFuncs: undefined,\n    menuTabs: undefined,\n    pivotTotalColumnIds: undefined,\n    cellClassRules: undefined,\n    icons: undefined,\n    sortIndex: undefined,\n    initialSortIndex: undefined,\n    flex: undefined,\n    initialFlex: undefined,\n    width: undefined,\n    initialWidth: undefined,\n    minWidth: undefined,\n    maxWidth: undefined,\n    rowGroupIndex: undefined,\n    initialRowGroupIndex: undefined,\n    pivotIndex: undefined,\n    initialPivotIndex: undefined,\n    suppressCellFlash: undefined,\n    suppressColumnsToolPanel: undefined,\n    suppressFiltersToolPanel: undefined,\n    openByDefault: undefined,\n    marryChildren: undefined,\n    suppressStickyLabel: undefined,\n    hide: undefined,\n    initialHide: undefined,\n    rowGroup: undefined,\n    initialRowGroup: undefined,\n    pivot: undefined,\n    initialPivot: undefined,\n    checkboxSelection: undefined,\n    showDisabledCheckboxes: undefined,\n    headerCheckboxSelection: undefined,\n    headerCheckboxSelectionFilteredOnly: undefined,\n    headerCheckboxSelectionCurrentPageOnly: undefined,\n    suppressMenu: undefined,\n    suppressHeaderMenuButton: undefined,\n    suppressMovable: undefined,\n    lockPosition: undefined,\n    lockVisible: undefined,\n    lockPinned: undefined,\n    unSortIcon: undefined,\n    suppressSizeToFit: undefined,\n    suppressAutoSize: undefined,\n    enableRowGroup: undefined,\n    enablePivot: undefined,\n    enableValue: undefined,\n    editable: undefined,\n    suppressPaste: undefined,\n    suppressNavigable: undefined,\n    enableCellChangeFlash: undefined,\n    rowDrag: undefined,\n    dndSource: undefined,\n    autoHeight: undefined,\n    wrapText: undefined,\n    sortable: undefined,\n    resizable: undefined,\n    singleClickEdit: undefined,\n    floatingFilter: undefined,\n    cellEditorPopup: undefined,\n    suppressFillHandle: undefined,\n    wrapHeaderText: undefined,\n    autoHeaderHeight: undefined,\n    dndSourceOnRowDrag: undefined,\n    valueGetter: undefined,\n    valueSetter: undefined,\n    filterValueGetter: undefined,\n    keyCreator: undefined,\n    valueFormatter: undefined,\n    valueParser: undefined,\n    comparator: undefined,\n    equals: undefined,\n    pivotComparator: undefined,\n    suppressKeyboardEvent: undefined,\n    suppressHeaderKeyboardEvent: undefined,\n    colSpan: undefined,\n    rowSpan: undefined,\n    getQuickFilterText: undefined,\n    onCellValueChanged: undefined,\n    onCellClicked: undefined,\n    onCellDoubleClicked: undefined,\n    onCellContextMenu: undefined,\n    rowDragText: undefined,\n    tooltipValueGetter: undefined,\n    cellRendererSelector: undefined,\n    cellEditorSelector: undefined,\n    suppressSpanHeaderHeight: undefined,\n    useValueFormatterForExport: undefined,\n    useValueParserForImport: undefined,\n    mainMenuItems: undefined,\n    contextMenuItems: undefined,\n    suppressFloatingFilterButton: undefined,\n    suppressHeaderFilterButton: undefined,\n    suppressHeaderContextMenu: undefined,\n    loadingCellRenderer: undefined,\n    loadingCellRendererParams: undefined,\n    loadingCellRendererSelector: undefined,\n    context: undefined,\n};\nconst ALL_PROPERTIES: ColKey[] = Object.keys(colDefPropertyMap) as ColKey[];\n\nexport const COL_DEF_VALIDATORS: OptionsValidator<ColDef | ColGroupDef> = {\n    objectName: 'colDef',\n    allProperties: ALL_PROPERTIES,\n    docsUrl: 'column-properties/',\n    deprecations: COLUMN_DEFINITION_DEPRECATIONS,\n    validations: COLUMN_DEFINITION_VALIDATIONS,\n};\n", "import { ComponentUtil } from '../../components/componentUtil';\nimport type { GridOptions } from '../../entities/gridOptions';\nimport { ModuleNames } from '../../modules/moduleNames';\nimport { PropertyKeys } from '../../propertyKeys';\nimport type { Deprecations, OptionsValidator, Validations } from '../validationTypes';\nimport { COL_DEF_VALIDATORS } from './colDefValidations';\n\n/**\n * Deprecations have been kept separately for ease of removing them in the future.\n *\n * If the property was simply renamed, use the `renamed` property. The value will be implicitly copied to the new property.\n */\nconst GRID_OPTION_DEPRECATIONS: () => Deprecations<GridOptions> = () => ({\n    advancedFilterModel: { version: '31', message: 'Use `initialState.filter.advancedFilterModel` instead.' },\n    suppressAsyncEvents: { version: '31', message: 'Events should be handled asynchronously.' },\n\n    cellFadeDelay: { version: '31.1', renamed: 'cellFadeDuration' },\n    cellFlashDelay: { version: '31.1', renamed: 'cellFlashDuration' },\n\n    suppressServerSideInfiniteScroll: { version: '31.1' },\n    serverSideSortOnServer: { version: '31.1' },\n    serverSideFilterOnServer: { version: '31.1' },\n\n    enableCellChangeFlash: {\n        version: '31.2',\n        message: 'Use `enableCellChangeFlash` in the `ColDef` or `defaultColDef` for all columns.',\n    },\n\n    groupIncludeFooter: { version: '31.3', message: 'Use `groupTotalRow` instead.' },\n    groupIncludeTotalFooter: { version: '31.3', message: 'Use `grandTotalRow` instead.' },\n\n    suppressLoadingOverlay: { version: '32', message: 'Use `loading`=false instead.' },\n});\n\n// Leave untyped. so it can be inferred.\nexport const GRID_OPTION_DEFAULTS = {\n    suppressContextMenu: false,\n    preventDefaultOnContextMenu: false,\n    allowContextMenuWithControlKey: false,\n    suppressMenuHide: true,\n    enableBrowserTooltips: false,\n    tooltipTrigger: 'hover',\n    tooltipShowDelay: 2000,\n    tooltipHideDelay: 10000,\n    tooltipMouseTrack: false,\n    tooltipShowMode: 'standard',\n    tooltipInteraction: false,\n    copyHeadersToClipboard: false,\n    copyGroupHeadersToClipboard: false,\n    clipboardDelimiter: '\\t',\n    suppressCopyRowsToClipboard: false,\n    suppressCopySingleCellRanges: false,\n    suppressLastEmptyLineOnPaste: false,\n    suppressClipboardPaste: false,\n    suppressClipboardApi: false,\n    suppressCutToClipboard: false,\n    maintainColumnOrder: false,\n    suppressFieldDotNotation: false,\n    allowDragFromColumnsToolPanel: false,\n    suppressMovableColumns: false,\n    suppressColumnMoveAnimation: false,\n    suppressDragLeaveHidesColumns: false,\n    suppressRowGroupHidesColumns: false,\n    suppressAutoSize: false,\n    autoSizePadding: 20,\n    skipHeaderOnAutoSize: false,\n    singleClickEdit: false,\n    suppressClickEdit: false,\n    readOnlyEdit: false,\n    stopEditingWhenCellsLoseFocus: false,\n    enterNavigatesVertically: false,\n    enterNavigatesVerticallyAfterEdit: false,\n    enableCellEditingOnBackspace: false,\n    undoRedoCellEditing: false,\n    undoRedoCellEditingLimit: 10,\n    suppressCsvExport: false,\n    suppressExcelExport: false,\n    cacheQuickFilter: false,\n    includeHiddenColumnsInQuickFilter: false,\n    excludeChildrenWhenTreeDataFiltering: false,\n    enableAdvancedFilter: false,\n    includeHiddenColumnsInAdvancedFilter: false,\n    enableCharts: false,\n    masterDetail: false,\n    keepDetailRows: false,\n    keepDetailRowsCount: 10,\n    detailRowAutoHeight: false,\n    tabIndex: 0,\n    rowBuffer: 10,\n    valueCache: false,\n    valueCacheNeverExpires: false,\n    enableCellExpressions: false,\n    suppressTouch: false,\n    suppressFocusAfterRefresh: false,\n    suppressAsyncEvents: false,\n    suppressBrowserResizeObserver: false,\n    suppressPropertyNamesCheck: false,\n    suppressChangeDetection: false,\n    debug: false,\n    suppressLoadingOverlay: false,\n    suppressNoRowsOverlay: false,\n    pagination: false,\n    paginationPageSize: 100,\n    paginationPageSizeSelector: true,\n    paginationAutoPageSize: false,\n    paginateChildRows: false,\n    suppressPaginationPanel: false,\n    pivotMode: false,\n    pivotPanelShow: 'never',\n    pivotDefaultExpanded: 0,\n    pivotSuppressAutoColumn: false,\n    suppressExpandablePivotGroups: false,\n    functionsReadOnly: false,\n    suppressAggFuncInHeader: false,\n    alwaysAggregateAtRootLevel: false,\n    aggregateOnlyChangedColumns: false,\n    suppressAggFilteredOnly: false,\n    removePivotHeaderRowWhenSingleValueColumn: false,\n    animateRows: true,\n    enableCellChangeFlash: false,\n    cellFlashDelay: 500,\n    cellFlashDuration: 500,\n    cellFadeDelay: 1000,\n    cellFadeDuration: 1000,\n    allowShowChangeAfterFilter: false,\n    domLayout: 'normal',\n    ensureDomOrder: false,\n    enableRtl: false,\n    suppressColumnVirtualisation: false,\n    suppressMaxRenderedRowRestriction: false,\n    suppressRowVirtualisation: false,\n    rowDragManaged: false,\n    suppressRowDrag: false,\n    suppressMoveWhenRowDragging: false,\n    rowDragEntireRow: false,\n    rowDragMultiRow: false,\n    embedFullWidthRows: false,\n    groupDisplayType: 'singleColumn',\n    groupDefaultExpanded: 0,\n    groupMaintainOrder: false,\n    groupSelectsChildren: false,\n    groupIncludeTotalFooter: false,\n    groupSuppressBlankHeader: false,\n    groupSelectsFiltered: false,\n    showOpenedGroup: false,\n    groupRemoveSingleChildren: false,\n    groupRemoveLowestSingleChildren: false,\n    groupHideOpenParents: false,\n    groupAllowUnbalanced: false,\n    rowGroupPanelShow: 'never',\n    suppressMakeColumnVisibleAfterUnGroup: false,\n    treeData: false,\n    rowGroupPanelSuppressSort: false,\n    suppressGroupRowsSticky: false,\n    rowModelType: 'clientSide',\n    asyncTransactionWaitMillis: 50,\n    suppressModelUpdateAfterUpdateTransaction: false,\n    cacheOverflowSize: 1,\n    infiniteInitialRowCount: 1,\n    serverSideInitialRowCount: 1,\n    suppressServerSideInfiniteScroll: false,\n    cacheBlockSize: 100,\n    maxBlocksInCache: -1,\n    maxConcurrentDatasourceRequests: 2,\n    blockLoadDebounceMillis: 0,\n    purgeClosedRowNodes: false,\n    serverSideSortAllLevels: false,\n    serverSideOnlyRefreshFilteredGroups: false,\n    serverSideSortOnServer: false,\n    serverSideFilterOnServer: false,\n    serverSidePivotResultFieldSeparator: '_',\n    viewportRowModelPageSize: 5,\n    viewportRowModelBufferSize: 5,\n    alwaysShowHorizontalScroll: false,\n    alwaysShowVerticalScroll: false,\n    debounceVerticalScrollbar: false,\n    suppressHorizontalScroll: false,\n    suppressScrollOnNewData: false,\n    suppressScrollWhenPopupsAreOpen: false,\n    suppressAnimationFrame: false,\n    suppressMiddleClickScrolls: false,\n    suppressPreventDefaultOnMouseWheel: false,\n    rowMultiSelectWithClick: false,\n    suppressRowDeselection: false,\n    suppressRowClickSelection: false,\n    suppressCellFocus: false,\n    suppressHeaderFocus: false,\n    suppressMultiRangeSelection: false,\n    enableCellTextSelection: false,\n    enableRangeSelection: false,\n    enableRangeHandle: false,\n    enableFillHandle: false,\n    fillHandleDirection: 'xy',\n    suppressClearOnFillReduction: false,\n    accentedSort: false,\n    unSortIcon: false,\n    suppressMultiSort: false,\n    alwaysMultiSort: false,\n    suppressMaintainUnsortedOrder: false,\n    suppressRowHoverHighlight: false,\n    suppressRowTransform: false,\n    columnHoverHighlight: false,\n    deltaSort: false,\n    enableGroupEdit: false,\n    suppressGroupMaintainValueType: false,\n    groupLockGroupColumns: 0,\n    serverSideEnableClientSideSort: false,\n    suppressServerSideFullWidthLoadingRow: false,\n    pivotMaxGeneratedColumns: -1,\n    columnMenu: 'new',\n    reactiveCustomComponents: true,\n} as const;\n/**\n * Used simply to type check the default grid options.\n * Done here to allow inference of the above type, for gridOptionsService.get to infer where defaults exist.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst GRID_OPTIONS_DEFAULT_ASSERTION: GridOptions = GRID_OPTION_DEFAULTS;\n\n/**\n * Validation rules for gridOptions\n */\nconst GRID_OPTION_VALIDATIONS: () => Validations<GridOptions> = () => ({\n    sideBar: { module: ModuleNames.SideBarModule },\n    statusBar: { module: ModuleNames.StatusBarModule },\n    enableCharts: { module: ModuleNames.GridChartsModule },\n    getMainMenuItems: { module: ModuleNames.MenuModule },\n    getContextMenuItems: { module: ModuleNames.MenuModule },\n    allowContextMenuWithControlKey: { module: ModuleNames.MenuModule },\n    enableAdvancedFilter: { module: ModuleNames.AdvancedFilterModule },\n    treeData: {\n        supportedRowModels: ['clientSide', 'serverSide'],\n        module: ModuleNames.RowGroupingModule,\n        dependencies: (options) => {\n            const rowModel = options.rowModelType ?? 'clientSide';\n            switch (rowModel) {\n                case 'clientSide': {\n                    const csrmWarning = `treeData requires 'getDataPath' in the ${rowModel} row model.`;\n                    return options.getDataPath ? null : csrmWarning;\n                }\n                case 'serverSide': {\n                    const ssrmWarning = `treeData requires 'isServerSideGroup' and 'getServerSideGroupKey' in the ${rowModel} row model.`;\n                    return options.isServerSideGroup && options.getServerSideGroupKey ? null : ssrmWarning;\n                }\n            }\n            return null;\n        },\n    },\n    masterDetail: { module: ModuleNames.MasterDetailModule },\n\n    enableRangeSelection: { module: ModuleNames.RangeSelectionModule },\n    enableRangeHandle: {\n        dependencies: {\n            enableRangeSelection: [true],\n        },\n    },\n    enableFillHandle: {\n        dependencies: {\n            enableRangeSelection: [true],\n        },\n    },\n\n    groupDefaultExpanded: {\n        supportedRowModels: ['clientSide'],\n    },\n    groupIncludeFooter: {\n        supportedRowModels: ['clientSide', 'serverSide'],\n        dependencies: (options) => {\n            const rowModel = options.rowModelType ?? 'clientSide';\n            switch (rowModel) {\n                case 'clientSide':\n                    return null;\n                case 'serverSide': {\n                    const warning = 'groupIncludeFooter is not supported alongside suppressServerSideInfiniteScroll';\n                    return options.suppressServerSideInfiniteScroll ? warning : null;\n                }\n            }\n            return null;\n        },\n    },\n    groupHideOpenParents: {\n        supportedRowModels: ['clientSide'],\n        dependencies: {\n            groupTotalRow: [undefined, 'bottom'],\n        },\n    },\n    groupIncludeTotalFooter: {\n        supportedRowModels: ['clientSide'],\n    },\n    groupRemoveSingleChildren: {\n        dependencies: {\n            groupHideOpenParents: [undefined, false],\n            groupRemoveLowestSingleChildren: [undefined, false],\n        },\n    },\n    groupRemoveLowestSingleChildren: {\n        dependencies: {\n            groupHideOpenParents: [undefined, false],\n            groupRemoveSingleChildren: [undefined, false],\n        },\n    },\n    groupSelectsChildren: {\n        dependencies: {\n            rowSelection: ['multiple'],\n        },\n    },\n\n    viewportDatasource: {\n        supportedRowModels: ['viewport'],\n        module: ModuleNames.ViewportRowModelModule,\n    },\n    serverSideDatasource: {\n        supportedRowModels: ['serverSide'],\n        module: ModuleNames.ServerSideRowModelModule,\n    },\n    cacheBlockSize: {\n        supportedRowModels: ['serverSide', 'infinite'],\n    },\n    datasource: {\n        supportedRowModels: ['infinite'],\n        module: ModuleNames.InfiniteRowModelModule,\n    },\n    rowData: {\n        supportedRowModels: ['clientSide'],\n        module: ModuleNames.ClientSideRowModelModule,\n    },\n\n    columnDefs: () => COL_DEF_VALIDATORS,\n    defaultColDef: () => COL_DEF_VALIDATORS,\n    defaultColGroupDef: () => COL_DEF_VALIDATORS,\n    autoGroupColumnDef: () => COL_DEF_VALIDATORS,\n});\n\nexport const GRID_OPTIONS_VALIDATORS: () => OptionsValidator<GridOptions> = () => ({\n    objectName: 'gridOptions',\n    allProperties: [...PropertyKeys.ALL_PROPERTIES, ...ComponentUtil.EVENT_CALLBACKS],\n    propertyExceptions: ['api'],\n    docsUrl: 'grid-options/',\n    deprecations: GRID_OPTION_DEPRECATIONS(),\n    validations: GRID_OPTION_VALIDATIONS(),\n});\n", "import type { ApiFunction, ApiFunctionName } from '../api/iApiFunction';\nimport type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { ColDef, ColGroupDef } from '../entities/colDef';\nimport type { GridOptions } from '../entities/gridOptions';\nimport { ModuleRegistry } from '../modules/moduleRegistry';\nimport { _warnOnce } from '../utils/function';\nimport { _fuzzyCheckStrings } from '../utils/fuzzyMatch';\nimport { _iterateObject } from '../utils/object';\nimport { validateApiFunction, warnMissingApiFunction } from './apiFunctionValidator';\nimport { COL_DEF_VALIDATORS } from './rules/colDefValidations';\nimport { GRID_OPTIONS_VALIDATORS } from './rules/gridOptionsValidations';\nimport type { DependencyValidator, OptionsValidation, OptionsValidator } from './validationTypes';\n\nexport class ValidationService extends BeanStub implements NamedBean {\n    beanName = 'validationService' as const;\n\n    private beans: BeanCollection;\n    private gridOptions: GridOptions;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.beans = beans;\n        this.gridOptions = beans.gridOptions;\n    }\n\n    public postConstruct(): void {\n        this.processGridOptions(this.gridOptions);\n    }\n\n    public processGridOptions(options: GridOptions): void {\n        this.processOptions(options, GRID_OPTIONS_VALIDATORS());\n    }\n\n    public processColumnDefs(options: ColDef | ColGroupDef): void {\n        this.processOptions(options, COL_DEF_VALIDATORS);\n    }\n\n    public warnMissingApiFunction(functionName: ApiFunctionName): void {\n        warnMissingApiFunction(functionName, this.gridId);\n    }\n\n    public validateApiFunction<TFunctionName extends ApiFunctionName>(\n        functionName: TFunctionName,\n        apiFunction: ApiFunction<TFunctionName>\n    ): ApiFunction<TFunctionName> {\n        return validateApiFunction(functionName, apiFunction, this.beans);\n    }\n\n    private processOptions<T extends object>(options: T, validator: OptionsValidator<T>): void {\n        const { validations, deprecations, allProperties, propertyExceptions, objectName, docsUrl } = validator;\n\n        if (allProperties && this.gridOptions.suppressPropertyNamesCheck !== true) {\n            this.checkProperties(\n                options,\n                [...(propertyExceptions ?? []), ...Object.keys(deprecations)],\n                allProperties,\n                objectName,\n                docsUrl\n            );\n        }\n\n        const warnings: Set<string> = new Set();\n\n        const optionKeys = Object.keys(options) as (keyof T)[];\n        optionKeys.forEach((key: keyof T) => {\n            const deprecation = deprecations[key] as any;\n            if (deprecation) {\n                if ('renamed' in deprecation) {\n                    const { renamed, version } = deprecation;\n                    warnings.add(\n                        `As of v${version}, ${String(key)} is deprecated. Please use ${String(renamed)} instead.`\n                    );\n                    (options as any)[renamed] = options[key];\n                } else {\n                    const { message, version } = deprecation;\n                    warnings.add(`As of v${version}, ${String(key)} is deprecated. ${message ?? ''}`);\n                }\n            }\n\n            const value = options[key];\n            if (value == null || (value as any) === false) {\n                // false implies feature is disabled, don't validate.\n                return;\n            }\n\n            const rulesOrGetter = validations[key];\n            let rules: OptionsValidation<T>;\n            if (!rulesOrGetter) {\n                return;\n            } else if (typeof rulesOrGetter === 'function') {\n                const fromGetter = rulesOrGetter(options, this.gridOptions);\n                if (!fromGetter) {\n                    return;\n                }\n\n                // this is a sub validator.\n                if ('objectName' in fromGetter) {\n                    const value = options[key];\n                    if (Array.isArray(value)) {\n                        value.forEach((item) => {\n                            this.processOptions(item, fromGetter);\n                        });\n                        return;\n                    }\n                    this.processOptions(options[key] as any, fromGetter);\n                    return;\n                }\n\n                rules = fromGetter;\n            } else {\n                rules = rulesOrGetter;\n            }\n\n            const { module, dependencies, supportedRowModels } = rules;\n            if (supportedRowModels) {\n                const rowModel = this.gridOptions.rowModelType ?? 'clientSide';\n                if (!supportedRowModels.includes(rowModel)) {\n                    warnings.add(`${String(key)} is not supported with the '${rowModel}' row model.`);\n                    return;\n                }\n            }\n\n            if (module) {\n                const modules = Array.isArray(module) ? module : [module];\n\n                let allRegistered = true;\n                modules.forEach((m) => {\n                    if (!ModuleRegistry.__assertRegistered(m, String(key), this.gridId)) {\n                        allRegistered = false;\n                        warnings.add(`${String(key)} is only available when ${m} is loaded.`);\n                    }\n                });\n\n                if (!allRegistered) {\n                    return;\n                }\n            }\n\n            if (dependencies) {\n                const warning = this.checkForWarning(key, dependencies, options);\n                if (warning) {\n                    warnings.add(warning);\n                    return;\n                }\n            }\n        });\n        if (warnings.size > 0) {\n            warnings.forEach((warning) => {\n                _warnOnce(warning);\n            });\n        }\n    }\n\n    private checkForWarning<T extends object>(\n        key: keyof T,\n        validator: DependencyValidator<T>,\n        options: T\n    ): string | null {\n        if (typeof validator === 'function') {\n            return validator(options, this.gridOptions);\n        }\n\n        const optionEntries = Object.entries(validator) as [string, any][];\n        const failed = optionEntries.find(([key, value]) => {\n            const gridOptionValue = options[key as keyof T];\n            return !value.includes(gridOptionValue);\n        });\n\n        if (!failed) {\n            return null;\n        }\n\n        const [failedKey, possibleOptions] = failed;\n        if (possibleOptions.length > 1) {\n            return `'${String(key)}' requires '${failedKey}' to be one of [${possibleOptions.join(', ')}].`;\n        }\n\n        return `'${String(key)}' requires '${failedKey}' to be ${possibleOptions[0]}.`;\n    }\n\n    private checkProperties<T extends object>(\n        object: T,\n        exceptions: string[], // deprecated properties generally\n        validProperties: string[], // properties to recommend\n        containerName: string,\n        docsUrl?: string\n    ): void {\n        // Vue adds these properties to all objects, so we ignore them when checking for invalid properties\n        const VUE_FRAMEWORK_PROPS = ['__ob__', '__v_skip', '__metadata__'];\n\n        const invalidProperties: { [p: string]: string[] } = _fuzzyCheckStrings(\n            Object.getOwnPropertyNames(object),\n            [...VUE_FRAMEWORK_PROPS, ...exceptions, ...validProperties],\n            validProperties\n        );\n\n        _iterateObject(invalidProperties, (key, value) => {\n            let message = `invalid ${containerName} property '${key}' did you mean any of these: ${value.slice(0, 8).join(', ')}.`;\n            if (validProperties.includes('context')) {\n                message += `\\nIf you are trying to annotate ${containerName} with application data, use the '${containerName}.context' property instead.`;\n            }\n            _warnOnce(message);\n        });\n\n        if (Object.keys(invalidProperties).length > 0 && docsUrl) {\n            const url = this.getFrameworkOverrides().getDocLink(docsUrl);\n            _warnOnce(`to see all the valid ${containerName} properties please check: ${url}`);\n        }\n    }\n}\n", "import { AlignedGridsModule } from './alignedGridsModule';\nimport { CommunityApiModule } from './api/apiModule';\nimport { DataTypeModule } from './columns/columnModule';\nimport { EditModule } from './edit/editModule';\nimport { FilterModule } from './filter/filterModule';\nimport type { Module } from './interfaces/iModule';\nimport { StateModule } from './misc/state/stateModule';\nimport { ModuleNames } from './modules/moduleNames';\nimport { PaginationModule } from './pagination/paginationModule';\nimport { ValidationService } from './validation/validationService';\nimport { VERSION } from './version';\n\nexport const GridCoreModule = {\n    version: VERSION,\n    moduleName: ModuleNames.CommunityCoreModule,\n};\n\nexport const ValidationsModule = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/core-validations',\n    beans: [ValidationService],\n};\n\nexport const CommunityFeaturesModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/core-community-features',\n    dependantModules: [\n        GridCoreModule,\n        ValidationsModule,\n        EditModule,\n        FilterModule,\n        StateModule,\n        DataTypeModule,\n        AlignedGridsModule,\n        PaginationModule,\n        CommunityApiModule,\n    ],\n};\n", "import type { NamedBean } from './context/bean';\nimport { BeanStub } from './context/beanStub';\nimport type { BeanCollection } from './context/context';\nimport type { GridPreDestroyedEvent } from './events';\nimport type { WithoutGridCommon } from './interfaces/iCommon';\n\nexport class GridDestroyService extends BeanStub implements NamedBean {\n    beanName = 'gridDestroyService' as const;\n\n    private beans: BeanCollection;\n\n    private destroyCalled = false;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.beans = beans;\n    }\n\n    public override destroy(): void {\n        // prevent infinite loop\n        if (this.destroyCalled) {\n            return;\n        }\n\n        const event: WithoutGridCommon<GridPreDestroyedEvent> = {\n            type: 'gridPreDestroyed',\n            state: this.beans.stateService?.getState() ?? {},\n        };\n        this.eventService.dispatchEvent(event);\n\n        // Set after pre-destroy so user can still use the api in pre-destroy event and it is not marked as destroyed yet.\n        this.destroyCalled = true;\n\n        // destroy the UI first (as they use the services)\n        this.beans.ctrlsService.get('gridCtrl')?.destroyGridUi();\n\n        // destroy the services\n        this.beans.context.destroy();\n        super.destroy();\n    }\n\n    public isDestroyCalled(): boolean {\n        return this.destroyCalled;\n    }\n}\n", "import type { AgChartThemeOverrides } from 'ag-charts-types';\n\nimport type { ColDef } from './entities/colDef';\nimport type { GridOptions } from './entities/gridOptions';\nimport type { AgEventType, AgInternalEventType, AgPublicEventType } from './eventTypes';\nimport type { FilterRequestSource } from './filter/iColumnFilter';\nimport type { CellRange, CellRangeParams } from './interfaces/IRangeService';\nimport type { GridState } from './interfaces/gridState';\nimport type { ChartType } from './interfaces/iChartOptions';\nimport type { Column, ColumnEventName, ColumnGroup, ColumnPinnedType, ProvidedColumnGroup } from './interfaces/iColumn';\nimport type { AgGridCommon } from './interfaces/iCommon';\nimport type { BuildEventTypeMap } from './interfaces/iEventEmitter';\nimport type { IFilterComp } from './interfaces/iFilter';\nimport type { IRowNode, RowPinnedType } from './interfaces/iRowNode';\nimport type { RowNodeTransaction } from './interfaces/rowNodeTransaction';\nimport type { ServerSideTransactionResult } from './interfaces/serverSideTransaction';\n\nexport const ALWAYS_SYNC_GLOBAL_EVENTS: Set<AgEventType> = new Set(['gridPreDestroyed', 'fillStart', 'pasteStart']);\n\nexport type AgEventTypeParams<TData = any, TContext = any> = BuildEventTypeMap<\n    AgPublicEventType | AgInternalEventType,\n    {\n        columnEverythingChanged: ColumnEverythingChangedEvent<TData, TContext>;\n        newColumnsLoaded: NewColumnsLoadedEvent<TData, TContext>;\n        columnPivotModeChanged: ColumnPivotModeChangedEvent<TData, TContext>;\n        pivotMaxColumnsExceeded: PivotMaxColumnsExceededEvent<TData, TContext>;\n        columnRowGroupChanged: ColumnRowGroupChangedEvent<TData, TContext>;\n        expandOrCollapseAll: ExpandOrCollapseAllEvent<TData, TContext>;\n        columnPivotChanged: ColumnPivotChangedEvent<TData, TContext>;\n        gridColumnsChanged: GridColumnsChangedEvent<TData, TContext>;\n        columnValueChanged: ColumnValueChangedEvent<TData, TContext>;\n        columnMoved: ColumnMovedEvent<TData, TContext>;\n        columnVisible: ColumnVisibleEvent<TData, TContext>;\n        columnPinned: ColumnPinnedEvent<TData, TContext>;\n        columnGroupOpened: ColumnGroupOpenedEvent<TData, TContext>;\n        columnResized: ColumnResizedEvent<TData, TContext>;\n        displayedColumnsChanged: DisplayedColumnsChangedEvent<TData, TContext>;\n        virtualColumnsChanged: VirtualColumnsChangedEvent<TData, TContext>;\n        columnHeaderMouseOver: ColumnHeaderMouseOverEvent<TData, TContext>;\n        columnHeaderMouseLeave: ColumnHeaderMouseLeaveEvent<TData, TContext>;\n        columnHeaderClicked: ColumnHeaderClickedEvent<TData, TContext>;\n        columnHeaderContextMenu: ColumnHeaderContextMenuEvent<TData, TContext>;\n        asyncTransactionsFlushed: AsyncTransactionsFlushedEvent<TData, TContext>;\n        rowGroupOpened: RowGroupOpenedEvent<TData, TContext>;\n        rowDataUpdated: RowDataUpdatedEvent<TData, TContext>;\n        pinnedRowDataChanged: PinnedRowDataChangedEvent<TData, TContext>;\n        rangeSelectionChanged: RangeSelectionChangedEvent<TData, TContext>;\n        chartCreated: ChartCreatedEvent<TData, TContext>;\n        chartRangeSelectionChanged: ChartRangeSelectionChangedEvent<TData, TContext>;\n        chartOptionsChanged: ChartOptionsChangedEvent<TData, TContext>;\n        chartDestroyed: ChartDestroyedEvent<TData, TContext>;\n        toolPanelVisibleChanged: ToolPanelVisibleChangedEvent<TData, TContext>;\n        toolPanelSizeChanged: ToolPanelSizeChangedEvent<TData, TContext>;\n        modelUpdated: ModelUpdatedEvent<TData, TContext>;\n        cutStart: CutStartEvent<TData, TContext>;\n        cutEnd: CutEndEvent<TData, TContext>;\n        pasteStart: PasteStartEvent<TData, TContext>;\n        pasteEnd: PasteEndEvent<TData, TContext>;\n        fillStart: FillStartEvent<TData, TContext>;\n        fillEnd: FillEndEvent<TData, TContext>;\n        rangeDeleteStart: RangeDeleteStartEvent<TData, TContext>;\n        rangeDeleteEnd: RangeDeleteEndEvent<TData, TContext>;\n        undoStarted: UndoStartedEvent<TData, TContext>;\n        undoEnded: UndoEndedEvent<TData, TContext>;\n        redoStarted: RedoStartedEvent<TData, TContext>;\n        redoEnded: RedoEndedEvent<TData, TContext>;\n        cellClicked: CellClickedEvent<TData, TContext>;\n        cellDoubleClicked: CellDoubleClickedEvent<TData, TContext>;\n        cellMouseDown: CellMouseDownEvent<TData, TContext>;\n        cellContextMenu: CellContextMenuEvent<TData, TContext>;\n        cellValueChanged: CellValueChangedEvent<TData, TContext>;\n        cellEditRequest: CellEditRequestEvent<TData, TContext>;\n        rowValueChanged: RowValueChangedEvent<TData, TContext>;\n        headerFocused: HeaderFocusedEvent<TData, TContext>;\n        cellFocused: CellFocusedEvent<TData, TContext>;\n        rowSelected: RowSelectedEvent<TData, TContext>;\n        selectionChanged: SelectionChangedEvent<TData, TContext>;\n        tooltipShow: TooltipShowEvent<TData, TContext>;\n        tooltipHide: TooltipHideEvent<TData, TContext>;\n        cellKeyDown: CellKeyDownEvent<TData, TContext>;\n        cellMouseOver: CellMouseOverEvent<TData, TContext>;\n        cellMouseOut: CellMouseOutEvent<TData, TContext>;\n        filterChanged: FilterChangedEvent<TData, TContext>;\n        filterModified: FilterModifiedEvent<TData, TContext>;\n        filterOpened: FilterOpenedEvent<TData, TContext>;\n        advancedFilterBuilderVisibleChanged: AdvancedFilterBuilderVisibleChangedEvent<TData, TContext>;\n        sortChanged: SortChangedEvent<TData, TContext>;\n        virtualRowRemoved: VirtualRowRemovedEvent<TData, TContext>;\n        rowClicked: RowClickedEvent<TData, TContext>;\n        rowDoubleClicked: RowDoubleClickedEvent<TData, TContext>;\n        gridReady: GridReadyEvent<TData, TContext>;\n        gridPreDestroyed: GridPreDestroyedEvent<TData, TContext>;\n        gridSizeChanged: GridSizeChangedEvent<TData, TContext>;\n        viewportChanged: ViewportChangedEvent<TData, TContext>;\n        firstDataRendered: FirstDataRenderedEvent<TData, TContext>;\n        dragStarted: DragStartedEvent<TData, TContext>;\n        dragStopped: DragStoppedEvent<TData, TContext>;\n        rowEditingStarted: RowEditingStartedEvent<TData, TContext>;\n        rowEditingStopped: RowEditingStoppedEvent<TData, TContext>;\n        cellEditingStarted: CellEditingStartedEvent<TData, TContext>;\n        cellEditingStopped: CellEditingStoppedEvent<TData, TContext>;\n        bodyScroll: BodyScrollEvent<TData, TContext>;\n        bodyScrollEnd: BodyScrollEndEvent<TData, TContext>;\n        paginationChanged: PaginationChangedEvent<TData, TContext>;\n        componentStateChanged: ComponentStateChangedEvent<TData, TContext>;\n        storeRefreshed: StoreRefreshedEvent<TData, TContext>;\n        stateUpdated: StateUpdatedEvent<TData, TContext>;\n        columnMenuVisibleChanged: ColumnMenuVisibleChangedEvent<TData, TContext>;\n        contextMenuVisibleChanged: ContextMenuVisibleChangedEvent<TData, TContext>;\n        rowDragEnter: RowDragEnterEvent<TData, TContext>;\n        rowDragMove: RowDragMoveEvent<TData, TContext>;\n        rowDragLeave: RowDragLeaveEvent<TData, TContext>;\n        rowDragEnd: RowDragEndEvent<TData, TContext>;\n        // Internal events\n        scrollbarWidthChanged: ScrollbarWidthChangedEvent<TData, TContext>;\n        keyShortcutChangedCellStart: KeyShortcutChangedCellStartEvent<TData, TContext>;\n        keyShortcutChangedCellEnd: KeyShortcutChangedCellEndEvent<TData, TContext>;\n        pinnedHeightChanged: PinnedHeightChangedEvent<TData, TContext>;\n        cellFocusCleared: CellFocusClearedEvent<TData, TContext>;\n        fullWidthRowFocused: FullWidthRowFocusedEvent<TData, TContext>;\n        checkboxChanged: CheckboxChangedEvent<TData, TContext>;\n        heightScaleChanged: HeightScaleChangedEvent<TData, TContext>;\n        suppressMovableColumns: SuppressMovableColumnsEvent<TData, TContext>;\n        suppressMenuHide: SuppressMenuHideEvent<TData, TContext>;\n        suppressFieldDotNotation: SuppressFieldDotNotationEvent<TData, TContext>;\n        columnPanelItemDragStart: ColumnPanelItemDragStartEvent<TData, TContext>;\n        columnPanelItemDragEnd: ColumnPanelItemDragEndEvent<TData, TContext>;\n        bodyHeightChanged: BodyHeightChangedEvent<TData, TContext>;\n        columnContainerWidthChanged: ColumnContainerWidthChangedEvent<TData, TContext>;\n        displayedColumnsWidthChanged: DisplayedColumnsWidthChangedEvent<TData, TContext>;\n        scrollVisibilityChanged: ScrollVisibilityChangedEvent<TData, TContext>;\n        columnHoverChanged: ColumnHoverChangedEvent<TData, TContext>;\n        flashCells: FlashCellsEvent<TData, TContext>;\n        paginationPixelOffsetChanged: PaginationPixelOffsetChangedEvent<TData, TContext>;\n        displayedRowsChanged: DisplayedRowsChangedEvent<TData, TContext>;\n        leftPinnedWidthChanged: LeftPinnedWidthChangedEvent<TData, TContext>;\n        rightPinnedWidthChanged: RightPinnedWidthChangedEvent<TData, TContext>;\n        rowContainerHeightChanged: RowContainerHeightChangedEvent<TData, TContext>;\n        headerHeightChanged: HeaderHeightChangedEvent<TData, TContext>;\n        columnHeaderHeightChanged: ColumnHeaderHeightChangedEvent<TData, TContext>;\n        gridStylesChanged: GridStylesChangedEvent<TData, TContext>;\n        storeUpdated: StoreUpdatedEvent<TData, TContext>;\n        filterDestroyed: FilterDestroyedEvent<TData, TContext>;\n        rowDataUpdateStarted: RowDataUpdateStartedEvent<TData, TContext>;\n        rowCountReady: RowCountReadyEvent<TData, TContext>;\n        advancedFilterEnabledChanged: AdvancedFilterEnabledChangedEvent<TData, TContext>;\n        dataTypesInferred: DataTypesInferredEvent<TData, TContext>;\n        fieldValueChanged: FieldValueChangedEvent<TData, TContext>;\n        fieldPickerValueSelected: FieldPickerValueSelectedEvent<TData, TContext>;\n        richSelectListRowSelected: RichSelectListRowSelectedEvent<TData, TContext>;\n        sideBarUpdated: SideBarUpdatedEvent<TData, TContext>;\n        alignedGridScroll: AlignedGridScrollEvent<TData, TContext>;\n        alignedGridColumn: AlignedGridColumnEvent<TData, TContext>;\n        gridOptionsChanged: GridOptionsChangedEvent<TData, TContext>;\n        chartTitleEdit: ChartTitleEditEvent<TData, TContext>;\n        recalculateRowBounds: RecalculateRowBoundsEvent<TData, TContext>;\n        stickyTopOffsetChanged: StickyTopOffsetChangedEvent<TData, TContext>;\n    }\n>;\n\nexport interface AgEvent<TEventType extends string = string> {\n    /** Event identifier */\n    type: TEventType;\n}\n\nexport interface AgGridEvent<TData = any, TContext = any, TEventType extends string = string>\n    extends AgGridCommon<TData, TContext>,\n        AgEvent<TEventType> {}\n\nexport interface AgGlobalEvent<T extends AgEventType, TData = any, TContext = any>\n    extends AgGridEvent<TData, TContext, T> {}\n\nexport type AgEventListener<TData = any, TContext = any, TEventType extends AgEventType = AgEventType> = (\n    params: AgEventTypeParams<TData, TContext>[TEventType]\n) => void;\n\nexport type AgGlobalEventListener<TData = any, TContext = any, T extends AgEventType = AgEventType> = (\n    eventType: T,\n    event: AgEventTypeParams<TData, TContext>[T]\n) => void;\n\nexport interface ModelUpdatedEvent<TData = any, TContext = any> extends AgGlobalEvent<'modelUpdated', TData, TContext> {\n    /** If true, the grid will try and animate the rows to the new positions */\n    animate: boolean | undefined;\n    /** If true, the grid has new data loaded, eg user called setRowData(), otherwise\n     * it's the same data but sorted or filtered, in which case this is true, and rows\n     * can animate around (eg rowNode id 24 is the same row node as last time). */\n    keepRenderedRows: boolean | undefined;\n    /** If true, then this update was a result of setRowData() getting called. This\n     * gets the grid to scroll to the top again. */\n    newData: boolean | undefined;\n    /** True when pagination and a new page is navigated to. */\n    newPage: boolean;\n    /** True when page size changes from the page size selector. */\n    newPageSize?: boolean;\n    /** true if all we did is changed row height, data still the same, no need to clear the undo/redo stacks */\n    keepUndoRedoStack?: boolean;\n}\n\nexport interface PaginationChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'paginationChanged', TData, TContext> {\n    /** True if rows were animated to new position */\n    animate?: boolean;\n    /** True if rows were kept (otherwise complete redraw) */\n    keepRenderedRows?: boolean;\n    /** True if data was new (i.e user set new data) */\n    newData?: boolean;\n    /** True if user went to a new page */\n    newPage: boolean;\n    /** True if user changed the page size */\n    newPageSize?: boolean;\n}\n\nexport interface ToolPanelSizeChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'toolPanelSizeChanged', TData, TContext> {\n    /** True if this is the first change to the Tool Panel size. */\n    started: boolean;\n    /** True if this is the last change to the Tool Panel size. */\n    ended: boolean;\n    /** New width of the ToolPanel component. */\n    width: number;\n}\n\nexport interface ColumnPivotModeChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'columnPivotModeChanged', TData, TContext> {}\n\nexport interface VirtualColumnsChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'virtualColumnsChanged', TData, TContext> {\n    afterScroll: boolean;\n}\n\nexport interface ColumnEverythingChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'columnEverythingChanged', TData, TContext> {\n    source: string;\n}\n\nexport interface NewColumnsLoadedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'newColumnsLoaded', TData, TContext> {\n    source: ColumnEventType;\n}\n\nexport interface GridColumnsChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'gridColumnsChanged', TData, TContext> {}\n\nexport interface DisplayedColumnsChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'displayedColumnsChanged', TData, TContext> {}\n\nexport interface RowDataUpdatedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'rowDataUpdated', TData, TContext> {}\n\nexport interface RowDataUpdateStartedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'rowDataUpdateStarted', TData, TContext> {\n    firstRowData: TData | null;\n}\n\nexport interface PinnedRowDataChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'pinnedRowDataChanged', TData, TContext> {}\nexport interface PinnedHeightChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'pinnedHeightChanged', TData, TContext> {}\n\n/**\n * - `api` - from API method\n * - `apiSelectAll` - from API methods `selectAll`/`deselectAll`\n * - `apiSelectAllFiltered` - from API methods `selectAllFiltered`/`deselectAllFiltered`\n * - `apiSelectAllCurrentPage` - from API methods `selectAllOnCurrentPage`/`deselectAllOnCurrentPage`\n * - `checkboxSelected` - row selection checkbox clicked\n * - `rowClicked` - row clicked when row selection enabled\n * - `rowDataChanged` - row data updated which triggered selection updates\n * - `rowGroupChanged` - grouping changed which updated the selection\n * - `selectableChanged`- selectable status of row has changed when `groupSelectsChildren = true`\n * - `spaceKey` - space key pressed on row\n * - `uiSelectAll` - select all in header clicked\n * - `uiSelectAllFiltered` - select all in header clicked when `headerCheckboxSelectionFilteredOnly = true`\n * - `uiSelectAllCurrentPage` - select all in header clicked when `headerCheckboxSelectionCurrentPageOnly = true`\n * - 'gridInitializing' - set as part of initial state while the grid is initializing\n */\nexport type SelectionEventSourceType =\n    | 'api'\n    | 'apiSelectAll'\n    | 'apiSelectAllFiltered'\n    | 'apiSelectAllCurrentPage'\n    | 'checkboxSelected'\n    | 'rowClicked'\n    | 'rowDataChanged'\n    | 'rowGroupChanged'\n    | 'selectableChanged'\n    | 'spaceKey'\n    | 'uiSelectAll'\n    | 'uiSelectAllFiltered'\n    | 'uiSelectAllCurrentPage'\n    | 'gridInitializing';\n\n/**\n * Determines whether the selection event was generated directly by a user interacting\n * with the UI\n */\nexport const isSelectionUIEvent = (\n    source: SelectionEventSourceType\n): source is Exclude<\n    SelectionEventSourceType,\n    | 'api'\n    | 'apiSelectAll'\n    | 'apiSelectAllFiltered'\n    | 'apiSelectAllCurrentPage'\n    | 'rowDataChanged'\n    | 'rowGroupChanged'\n    | 'selectableChanged'\n    | 'gridInitializing'\n> => {\n    return (\n        source === 'checkboxSelected' ||\n        source === 'rowClicked' ||\n        source === 'spaceKey' ||\n        source === 'uiSelectAll' ||\n        source === 'uiSelectAllCurrentPage' ||\n        source === 'uiSelectAllFiltered'\n    );\n};\n\nexport interface SelectionChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'selectionChanged', TData, TContext> {\n    source: SelectionEventSourceType;\n}\n\nexport type FilterChangedEventSourceType = 'api' | 'quickFilter' | 'columnFilter' | 'advancedFilter';\n\nexport interface FilterChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'filterChanged', TData, TContext> {\n    /**\n     * The source that triggered the filter change event. Can be one of the following:\n     * - `api` - triggered by an API call\n     * - `quickFilter` - triggered by user filtering from Quick Filter\n     * - `columnFilter` - triggered by user filtering from Column Menu\n     * - `advancedFilter` - triggered by user filtering from Advanced Filter\n     */\n    source?: FilterChangedEventSourceType;\n    /** True if the filter was changed as a result of data changing */\n    afterDataChange?: boolean;\n    /** True if filter was changed via floating filter */\n    afterFloatingFilter?: boolean;\n    /**\n     * Columns affected by the filter change. Array contents depend on the source of the event.\n     *\n     * - Expect 1 element for UI-driven column filter changes.\n     * - Expect 0-N elements (all affected columns) for calls to `api.setFilterModel()`.\n     * - Expect 0-N elements (removed columns) for calls to `api.setColumnDefs()`.\n     * - Expect 0 elements for quick-filters and calls to `api.onFilterChanged()`.\n     */\n    columns: Column[];\n}\n\nexport interface FilterModifiedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'filterModified', TData, TContext> {\n    filterInstance: IFilterComp;\n    column: Column;\n}\n\nexport interface FilterOpenedEvent<TData = any, TContext = any> extends AgGlobalEvent<'filterOpened', TData, TContext> {\n    /** Column / ProvidedColumnGroup that contains the filter */\n    column: Column | ProvidedColumnGroup;\n    /** Source of the open request */\n    source: FilterRequestSource;\n    /** Parent element of the filter */\n    eGui: HTMLElement;\n}\n\n// internal event\nexport interface FilterDestroyedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'filterDestroyed', TData, TContext> {\n    source: 'api' | 'columnChanged' | 'gridDestroyed' | 'advancedFilterEnabled' | 'paramsUpdated';\n    column: Column;\n}\n\nexport interface SortChangedEvent<TData = any, TContext = any> extends AgGlobalEvent<'sortChanged', TData, TContext> {\n    /** Source of the sort change. */\n    source: string;\n    /**\n     * The list of columns impacted by the sort change.\n     */\n    columns?: Column[];\n}\n\nexport interface GridReadyEvent<TData = any, TContext = any> extends AgGlobalEvent<'gridReady', TData, TContext> {}\nexport interface GridPreDestroyedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'gridPreDestroyed', TData, TContext> {\n    /** Current state of the grid */\n    state: GridState;\n}\n\nexport interface ColumnContainerWidthChanged<TData = any, TContext = any>\n    extends AgGlobalEvent<'columnContainerWidthChanged', TData, TContext> {} // not documented\nexport interface DisplayedColumnsWidthChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'displayedColumnsWidthChanged', TData, TContext> {} // not documented\nexport interface ColumnHoverChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'columnHoverChanged', TData, TContext> {} // not documented\nexport interface BodyHeightChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'bodyHeightChanged', TData, TContext> {} // not documented\n\n// this event is 'odd one out' as it should have properties for all the properties\n// in gridOptions that can be bound by the framework. for example, the gridOptions\n// has 'rowData', so this property should have 'rowData' also, so that when the row\n// data changes via the framework bound property, this event has that attribute set.\nexport interface ComponentStateChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'componentStateChanged', TData, TContext> {}\n\nexport interface ColumnPanelItemDragStartEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'columnPanelItemDragStart', TData, TContext> {\n    column: Column | ProvidedColumnGroup;\n}\n\nexport interface ColumnPanelItemDragEndEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'columnPanelItemDragEnd', TData, TContext> {}\n\nexport interface AgDragEvent<T extends AgEventType, TData = any, TContext = any>\n    extends AgGlobalEvent<T, TData, TContext> {\n    /** The DOM element that started the event. */\n    target: Element;\n}\n\nexport interface DragStartedEvent<TData = any, TContext = any> extends AgDragEvent<'dragStarted', TData, TContext> {\n    type: 'dragStarted';\n}\n\nexport interface DragStoppedEvent<TData = any, TContext = any> extends AgDragEvent<`dragStopped`, TData, TContext> {\n    type: 'dragStopped';\n}\n\n// For internal use only.\n// This event allows us to detect when other inputs in the same named group are changed, so for example we can ensure\n// that only one radio button in the same group is selected at any given time.\nexport interface CheckboxChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'checkboxChanged', TData, TContext> {\n    id: string;\n    name: string;\n    selected?: boolean;\n    previousValue: boolean | undefined;\n}\n\nexport interface GridSizeChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'gridSizeChanged', TData, TContext> {\n    /** The grid's DIV's clientWidth */\n    clientWidth: number;\n    /** The grid's DIV's clientHeight */\n    clientHeight: number;\n}\n\nexport interface PivotMaxColumnsExceededEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'pivotMaxColumnsExceeded', TData, TContext> {\n    message: string;\n}\n\nexport interface RowDragEvent<TData = any, TContext = any, T extends AgEventType = any>\n    extends AgGlobalEvent<T, TData, TContext> {\n    /** The row node getting dragged. Also the node that started the drag when multi-row dragging. */\n    node: IRowNode<TData>;\n    /** The list of nodes being dragged. */\n    nodes: IRowNode<TData>[];\n    /** The underlying mouse move event associated with the drag. */\n    event: MouseEvent;\n    /** The `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */\n    eventPath?: EventTarget[];\n    /** Direction of the drag, either `'up'`, `'down'` or `null` (if mouse is moving horizontally and not vertically). */\n    vDirection: string;\n    /** The row index the mouse is dragging over or -1 if over no row. */\n    overIndex: number;\n    /** The row node the mouse is dragging over or undefined if over no row. */\n    overNode?: IRowNode<TData>;\n    /** The vertical pixel location the mouse is over, with `0` meaning the top of the first row.\n     * This can be compared to the `rowNode.rowHeight` and `rowNode.rowTop` to work out the mouse position relative to rows.\n     * The provided attributes `overIndex` and `overNode` means the `y` property is mostly redundant.\n     * The `y` property can be handy if you want more information such as 'how close is the mouse to the top or bottom of the row?'\n     */\n    y: number;\n}\n\nexport interface RowDragEnterEvent<TData = any, TContext = any> extends RowDragEvent<TData, TContext, 'rowDragEnter'> {}\n\nexport interface RowDragEndEvent<TData = any, TContext = any> extends RowDragEvent<TData, TContext, 'rowDragEnd'> {}\n\nexport interface RowDragMoveEvent<TData = any, TContext = any> extends RowDragEvent<TData, TContext, 'rowDragMove'> {}\n\nexport interface RowDragLeaveEvent<TData = any, TContext = any> extends RowDragEvent<TData, TContext, 'rowDragLeave'> {}\n\nexport interface CutStartEvent<TData = any, TContext = any> extends AgGlobalEvent<'cutStart', TData, TContext> {\n    source: 'api' | 'ui' | 'contextMenu';\n}\n\nexport interface CutEndEvent<TData = any, TContext = any> extends AgGlobalEvent<'cutEnd', TData, TContext> {\n    source: 'api' | 'ui' | 'contextMenu';\n}\n\nexport interface PasteStartEvent<TData = any, TContext = any> extends AgGlobalEvent<'pasteStart', TData, TContext> {\n    source: string;\n}\n\nexport interface PasteEndEvent<TData = any, TContext = any> extends AgGlobalEvent<'pasteEnd', TData, TContext> {\n    source: string;\n}\n\nexport interface FillStartEvent<TData = any, TContext = any> extends AgGlobalEvent<'fillStart', TData, TContext> {}\n\nexport interface FillEndEvent<TData = any, TContext = any> extends AgGlobalEvent<'fillEnd', TData, TContext> {\n    initialRange: CellRange;\n    finalRange: CellRange;\n}\n\nexport interface RangeDeleteStartEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'rangeDeleteStart', TData, TContext> {\n    source: 'deleteKey';\n}\n\nexport interface RangeDeleteEndEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'rangeDeleteEnd', TData, TContext> {\n    source: 'deleteKey';\n}\n\nexport interface UndoStartedEvent<TData = any, TContext = any> extends AgGlobalEvent<'undoStarted', TData, TContext> {\n    /** Source of the event. `api` if via API method. `ui` if via keyboard shortcut. */\n    source: 'api' | 'ui';\n}\n\nexport interface UndoEndedEvent<TData = any, TContext = any> extends AgGlobalEvent<'undoEnded', TData, TContext> {\n    /** Source of the event. `api` if via API method. `ui` if via keyboard shortcut. */\n    source: 'api' | 'ui';\n    /** `true` if any undo operations were performed. */\n    operationPerformed: boolean;\n}\n\nexport interface RedoStartedEvent<TData = any, TContext = any> extends AgGlobalEvent<'redoStarted', TData, TContext> {\n    /** Source of the event. `api` if via API method. `ui` if via keyboard shortcut. */\n    source: 'api' | 'ui';\n}\n\nexport interface RedoEndedEvent<TData = any, TContext = any> extends AgGlobalEvent<'redoEnded', TData, TContext> {\n    /** Source of the event. `api` if via API method. `ui` if via keyboard shortcut. */\n    source: 'api' | 'ui';\n    /** `true` if any redo operations were performed. */\n    operationPerformed: boolean;\n}\n\nexport interface ViewportChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'viewportChanged', TData, TContext> {\n    /** Index of the first rendered row */\n    firstRow: number;\n    /** Index of the last rendered row */\n    lastRow: number;\n}\n\nexport interface FirstDataRenderedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'firstDataRendered', TData, TContext> {\n    /** Index of the first rendered row */\n    firstRow: number;\n    /** Index of the last rendered row */\n    lastRow: number;\n}\n\nexport interface RangeSelectionChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'rangeSelectionChanged', TData, TContext> {\n    id?: string;\n    /** True for the first change event, otherwise false */\n    started: boolean;\n    /** True for the last change event, otherwise false */\n    finished: boolean;\n}\n\nexport interface ChartCreatedEvent<TData = any, TContext = any> extends AgGlobalEvent<'chartCreated', TData, TContext> {\n    /** Id of the created chart. This can later be used to reference the chart via api methods. */\n    chartId: string;\n}\n/** @deprecated v32 Use ChartCreatedEvent instead */\nexport interface ChartCreated<TData = any, TContext = any> extends ChartCreatedEvent<TData, TContext> {}\n\nexport interface ChartRangeSelectionChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'chartRangeSelectionChanged', TData, TContext> {\n    /** Id of the effected chart. */\n    chartId: string;\n    /** Same as `chartId`. */\n    id: string;\n    /** New cellRange selected. */\n    cellRange: CellRangeParams;\n}\n/** @deprecated v32 Use ChartRangeSelectionChangedEvent instead */\nexport interface ChartRangeSelectionChanged<TData = any, TContext = any>\n    extends ChartRangeSelectionChangedEvent<TData, TContext> {}\n\nexport interface ChartOptionsChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'chartOptionsChanged', TData, TContext> {\n    /** Id of the effected chart. */\n    chartId: string;\n    /** ChartType */\n    chartType: ChartType;\n    /** Chart theme name of currently selected theme. */\n    chartThemeName: string;\n    /** Chart options.  */\n    chartOptions: AgChartThemeOverrides;\n}\n/** @deprecated v32 Use ChartOptionsChangedEvent instead */\nexport interface ChartOptionsChanged<TData = any, TContext = any> extends ChartOptionsChangedEvent<TData, TContext> {}\n\nexport interface ChartDestroyedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'chartDestroyed', TData, TContext> {\n    /** Id of the effected chart. */\n    chartId: string;\n}\n\n/** @deprecated v32 Use ChartDestroyedEvent instead */\nexport interface ChartDestroyed<TData = any, TContext = any> extends ChartDestroyedEvent<TData, TContext> {}\n\nexport interface ColumnGroupOpenedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'columnGroupOpened', TData, TContext> {\n    columnGroup?: ProvidedColumnGroup;\n    columnGroups: ProvidedColumnGroup[];\n}\n\nexport type ScrollDirection = 'horizontal' | 'vertical';\n\ninterface BaseBodyScrollEvent<T extends AgEventType, TData = any, TContext = any>\n    extends AgGlobalEvent<T, TData, TContext> {\n    direction: ScrollDirection;\n    left: number;\n    top: number;\n}\nexport interface BodyScrollEvent<TData = any, TContext = any>\n    extends BaseBodyScrollEvent<'bodyScroll', TData, TContext> {}\n\nexport interface BodyScrollEndEvent<TData = any, TContext = any>\n    extends BaseBodyScrollEvent<'bodyScrollEnd', TData, TContext> {}\n\ninterface TooltipEvent<T extends 'tooltipShow' | 'tooltipHide', TData = any, TContext = any>\n    extends AgGlobalEvent<T, TData, TContext> {\n    parentGui: HTMLElement;\n}\nexport interface TooltipShowEvent<TData = any, TContext = any> extends TooltipEvent<'tooltipShow', TData, TContext> {\n    tooltipGui: HTMLElement;\n}\n\nexport interface TooltipHideEvent<TData = any, TContext = any> extends TooltipEvent<'tooltipHide', TData, TContext> {}\n\nexport interface PaginationPixelOffsetChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'paginationPixelOffsetChanged', TData, TContext> {}\n\nexport interface StickyTopOffsetChangedEvent extends AgEvent<'stickyTopOffsetChanged'> {\n    offset: number;\n}\n\nexport interface CommonCellFocusParams {\n    /** Row index of the focused cell */\n    rowIndex: number | null;\n    /** Column of the focused cell */\n    column: Column | string | null;\n    /** either 'top', 'bottom' or null / undefined (if not pinned) */\n    rowPinned: RowPinnedType;\n    /** Whether the cell a full width cell or a regular cell */\n    isFullWidthCell?: boolean;\n}\n\nexport interface CellFocusClearedParams extends CommonCellFocusParams {}\n\nexport interface CellFocusedParams extends CommonCellFocusParams {\n    /** Whether browser focus is also set (false when editing) */\n    forceBrowserFocus?: boolean;\n    /** When `forceBrowserFocus` is `true`, should scroll be prevented */\n    preventScrollOnBrowserFocus?: boolean;\n}\n\nexport interface HeaderFocusedParams {\n    column: Column | ColumnGroup;\n}\n\nexport interface HeaderFocusedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'headerFocused', TData, TContext>,\n        HeaderFocusedParams {}\n\nexport interface CellFocusClearedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'cellFocusCleared', TData, TContext>,\n        CellFocusClearedParams {}\n\n// this does not extent CellEvent as the focus service doesn't keep a reference to\n// the rowNode.\nexport interface CellFocusedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'cellFocused', TData, TContext>,\n        CellFocusedParams {}\n\nexport interface FullWidthRowFocusedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'fullWidthRowFocused', TData, TContext>,\n        CellFocusedParams {\n    fromBelow: boolean;\n}\n\n/**\n * @deprecated v32 Please use `ExpandOrCollapseAllEvent` instead.\n */\nexport interface ExpandCollapseAllEvent<TData = any, TContext = any>\n    extends ExpandOrCollapseAllEvent<TData, TContext> {}\nexport interface ExpandOrCollapseAllEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'expandOrCollapseAll', TData, TContext> {\n    source: string;\n}\n\n/**---------------*/\n/** COLUMN EVENTS */\n/**---------------*/\n\nexport type ColumnEventType =\n    | 'sizeColumnsToFit'\n    | 'autosizeColumns'\n    | 'autosizeColumnHeaderHeight'\n    | 'alignedGridChanged'\n    | 'filterChanged'\n    | 'filterDestroyed'\n    | 'gridOptionsChanged'\n    | 'gridInitializing'\n    | 'toolPanelDragAndDrop'\n    | 'toolPanelUi'\n    | 'uiColumnMoved'\n    | 'uiColumnResized'\n    | 'uiColumnDragged'\n    | 'uiColumnExpanded'\n    | 'uiColumnSorted'\n    | 'contextMenu'\n    | 'columnMenu'\n    | 'rowModelUpdated'\n    | 'rowDataUpdated'\n    | 'api'\n    | 'flex'\n    | 'pivotChart'\n    | 'columnRowGroupChanged'\n    | 'cellDataTypeInferred'\n    | 'viewportSizeFeature';\n\nexport interface ColumnEvent<T extends AgEventType | ColumnEventName = any, TData = any, TContext = any>\n    extends AgGridEvent<TData, TContext, T> {\n    /** The impacted column, only set if action was on one column */\n    column: Column | null;\n    /** List of all impacted columns */\n    columns: Column[] | null;\n    /** String describing where the event is coming from */\n    source: ColumnEventType;\n}\n\nexport interface ColumnResizedEvent<TData = any, TContext = any> extends ColumnEvent<'columnResized', TData, TContext> {\n    /** Set to true for last event in a sequence of move events */\n    finished: boolean;\n    /** Any columns resized due to flex */\n    flexColumns: Column[] | null;\n}\n\nexport interface ColumnPivotChangedEvent<TData = any, TContext = any>\n    extends ColumnEvent<'columnPivotChanged', TData, TContext> {}\n\nexport interface ColumnRowGroupChangedEvent<TData = any, TContext = any>\n    extends ColumnEvent<'columnRowGroupChanged', TData, TContext> {}\n\nexport interface ColumnValueChangedEvent<TData = any, TContext = any>\n    extends ColumnEvent<'columnValueChanged', TData, TContext> {}\n\nexport interface ColumnMovedEvent<TData = any, TContext = any> extends ColumnEvent<'columnMoved', TData, TContext> {\n    /** The position the column was moved to */\n    toIndex?: number;\n    /** `True` when the column has finished moving. */\n    finished: boolean;\n}\n\nexport interface ColumnVisibleEvent<TData = any, TContext = any> extends ColumnEvent<'columnVisible', TData, TContext> {\n    /** True if column was set to visible, false if set to hide, undefined if in a single call some columns were shown while others hidden */\n    visible?: boolean;\n}\n\nexport interface ColumnPinnedEvent<TData = any, TContext = any> extends ColumnEvent<'columnPinned', TData, TContext> {\n    /** Either 'left', 'right', or null (it not pinned) */\n    pinned: ColumnPinnedType;\n}\n\nexport interface ColumnHeaderMouseOverEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'columnHeaderMouseOver', TData, TContext> {\n    /** Column or column-group related to the header that triggered the event */\n    column: Column | ProvidedColumnGroup;\n}\n\nexport interface ColumnHeaderMouseLeaveEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'columnHeaderMouseLeave', TData, TContext> {\n    /** Column or column-group related to the header that triggered the event */\n    column: Column | ProvidedColumnGroup;\n}\n\nexport interface ColumnHeaderClickedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'columnHeaderClicked', TData, TContext> {\n    /** Column or column-group related to the header that triggered the event */\n    column: Column | ProvidedColumnGroup;\n}\n\nexport interface ColumnHeaderContextMenuEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'columnHeaderContextMenu', TData, TContext> {\n    /** Column or column-group related to the header that triggered the event */\n    column: Column | ProvidedColumnGroup;\n}\n\n/**-------------------*/\n/** VISIBILITY EVENTS */\n/**-------------------*/\nexport interface ContextMenuVisibleChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'contextMenuVisibleChanged', TData, TContext> {\n    /** True if now visible; false if now hidden. */\n    visible: boolean;\n    /** Source of the visibility status change. */\n    source: 'api' | 'ui';\n}\n\nexport interface AdvancedFilterBuilderVisibleChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'advancedFilterBuilderVisibleChanged', TData, TContext> {\n    /** True if now visible; false if now hidden. */\n    visible: boolean;\n    /** Source of the visibility status change. */\n    source: 'api' | 'ui';\n}\n\nexport interface ToolPanelVisibleChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'toolPanelVisibleChanged', TData, TContext> {\n    /** True if now visible; false if now hidden. */\n    visible: boolean;\n    source: 'sideBarButtonClicked' | 'sideBarInitializing' | 'api';\n    /** Key of tool panel. */\n    key: string;\n    /** True if switching between tool panels. False if showing/hiding. */\n    switchingToolPanel: boolean;\n}\n\nexport interface ColumnMenuVisibleChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'columnMenuVisibleChanged', TData, TContext> {\n    /** True if now visible; false if now hidden. */\n    visible: boolean;\n    /** True if switching between tabs. False if showing/hiding. Only applies to legacy tabbed menu. */\n    switchingTab: boolean;\n    /**\n     * Currently displayed menu/tab.\n     * If filter launched from floating filter, will be `'floatingFilter'`.\n     * If using `columnMenu = 'new'` (default behaviour), will be `'columnMenu'` for the column menu,\n     * `'columnFilter'` for the column filter, and `'columnChooser'` for the column chooser.\n     * If using AG Grid Enterprise and `columnMenu = 'legacy'`,\n     * will be the tab `'generalMenuTab'`, `'filterMenuTab'` or `'columnsMenuTab'`.\n     * If using AG Grid Community and `columnMenu = 'legacy'`, will be `'columnMenu'`.\n     */\n    key:\n        | 'generalMenuTab'\n        | 'filterMenuTab'\n        | 'columnsMenuTab'\n        | 'columnMenu'\n        | 'columnFilter'\n        | 'floatingFilter'\n        | 'columnChooser';\n    /**\n     * Column the menu is opened for. Will be `null` if not launched from a column\n     * (e.g. column chooser from the API, or column menu via right-click on an empty header).\n     */\n    column: Column | null;\n}\n\n/**------------*/\n/** ROW EVENTS */\n/**------------*/\ninterface BaseRowEvent<T extends AgEventType, TData, TContext> extends AgGlobalEvent<T, TData, TContext> {\n    /** The row node. */\n    node: IRowNode<TData>;\n    /** The visible row index for the row */\n    rowIndex: number | null;\n    /** Either 'top', 'bottom' or null / undefined (if not set) */\n    rowPinned: RowPinnedType;\n    /** If event was due to browser event (eg click), this is the browser event */\n    event?: Event | null;\n    /** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */\n    eventPath?: EventTarget[];\n}\n\nexport interface RowEvent<T extends AgEventType, TData = any, TContext = any> extends BaseRowEvent<T, TData, TContext> {\n    /** The user provided data for the row. Data is `undefined` for row groups. */\n    data: TData | undefined;\n}\n\n/** Base interface for row events that always have data set. */\ninterface RowWithDataEvent<T extends AgEventType, TData = any, TContext = any>\n    extends BaseRowEvent<T, TData, TContext> {\n    /** The user provided data for the row. */\n    data: TData;\n}\n\nexport interface RowGroupOpenedEvent<TData = any, TContext = any> extends RowEvent<'rowGroupOpened', TData, TContext> {\n    /** True if the group is expanded. */\n    expanded: boolean;\n}\n\nexport interface RowValueChangedEvent<TData = any, TContext = any>\n    extends RowEvent<'rowValueChanged', TData, TContext> {}\n\nexport interface RowSelectedEvent<TData = any, TContext = any> extends RowEvent<'rowSelected', TData, TContext> {\n    source: SelectionEventSourceType;\n}\n\nexport interface VirtualRowRemovedEvent<TData = any, TContext = any>\n    extends RowEvent<'virtualRowRemoved', TData, TContext> {}\n\nexport interface RowClickedEvent<TData = any, TContext = any> extends RowEvent<'rowClicked', TData, TContext> {}\n\nexport interface RowDoubleClickedEvent<TData = any, TContext = any>\n    extends RowEvent<'rowDoubleClicked', TData, TContext> {}\n\nexport interface RowEditingStartedEvent<TData = any, TContext = any>\n    extends RowEvent<'rowEditingStarted', TData, TContext> {}\n\nexport interface RowEditingStoppedEvent<TData = any, TContext = any>\n    extends RowEvent<'rowEditingStopped', TData, TContext> {}\n\nexport interface FullWidthCellKeyDownEvent<TData = any, TContext = any>\n    extends RowEvent<'cellKeyDown', TData, TContext> {}\n\n/**------------*/\n\n/** CELL EVENTS */\n/**------------*/\nexport interface CellEvent<T extends AgEventType, TData = any, TValue = any> extends RowEvent<T, TData> {\n    column: Column<TValue>;\n    colDef: ColDef<TData, TValue>;\n    /** The value for the cell if available otherwise undefined. */\n    value: TValue | null | undefined;\n}\n\n/** Use for cell events that will always have a data property. */\ninterface CellWithDataEvent<T extends AgEventType, TData = any, TValue = any> extends RowWithDataEvent<T, TData> {\n    column: Column<TValue>;\n    colDef: ColDef<TData, TValue>;\n    /** The value for the cell */\n    value: TValue | null | undefined;\n}\n\nexport interface CellKeyDownEvent<TData = any, TValue = any> extends CellEvent<'cellKeyDown', TData, TValue> {}\n\nexport interface CellClickedEvent<TData = any, TValue = any> extends CellEvent<'cellClicked', TData, TValue> {}\n\nexport interface CellMouseDownEvent<TData = any, TValue = any> extends CellEvent<'cellMouseDown', TData, TValue> {}\n\nexport interface CellDoubleClickedEvent<TData = any, TValue = any>\n    extends CellEvent<'cellDoubleClicked', TData, TValue> {}\n\nexport interface CellMouseOverEvent<TData = any, TValue = any> extends CellEvent<'cellMouseOver', TData, TValue> {}\n\nexport interface CellMouseOutEvent<TData = any, TValue = any> extends CellEvent<'cellMouseOut', TData, TValue> {}\n\nexport interface CellContextMenuEvent<TData = any, TValue = any> extends CellEvent<'cellContextMenu', TData, TValue> {}\n\nexport interface CellEditingStartedEvent<TData = any, TValue = any>\n    extends CellEvent<'cellEditingStarted', TData, TValue> {}\n\nexport interface CellEditingStoppedEvent<TData = any, TValue = any>\n    extends CellEvent<'cellEditingStopped', TData, TValue> {\n    /** The old value before editing */\n    oldValue: TValue | null | undefined;\n    /** The new value after editing */\n    newValue: TValue | null | undefined;\n    /** Property indicating if the value of the editor has changed */\n    valueChanged: boolean;\n}\n\nexport interface CellValueChangedEvent<TData = any, TValue = any>\n    extends CellWithDataEvent<'cellValueChanged', TData, TValue> {\n    oldValue: TValue | null | undefined;\n    newValue: TValue | null | undefined;\n    source: string | undefined;\n}\n\nexport interface CellEditRequestEvent<TData = any, TValue = any>\n    extends CellWithDataEvent<'cellEditRequest', TData, TValue> {\n    oldValue: TValue | null | undefined;\n    newValue: TValue | null | undefined;\n    source: string | undefined;\n}\n\nexport interface AsyncTransactionsFlushedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'asyncTransactionsFlushed', TData, TContext> {\n    /**\n     * Array of result objects. for SSRM it's always list of `ServerSideTransactionResult`.\n     * For Client-Side Row Model it's a list of `RowNodeTransaction`.\n     */\n    results: (RowNodeTransaction<TData> | ServerSideTransactionResult)[];\n}\n/** @deprecated v32 Use AsyncTransactionsFlushedEvent */\nexport interface AsyncTransactionsFlushed<TData = any, TContext = any>\n    extends AsyncTransactionsFlushedEvent<TData, TContext> {}\n\nexport interface StoreRefreshedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'storeRefreshed', TData, TContext> {\n    /** The route of the store which has finished refreshing, undefined if root level */\n    route?: string[];\n}\n\nexport interface StateUpdatedEvent<TData = any, TContext = any> extends AgGlobalEvent<'stateUpdated', TData, TContext> {\n    /** Which parts of the state triggered the update, or `gridInitializing` when the state has been created during grid initialization */\n    sources: (keyof GridState | 'gridInitializing')[];\n    /** The updated state */\n    state: GridState;\n}\n\nexport interface ScrollVisibilityChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'scrollVisibilityChanged', TData, TContext> {} // not documented\n\nexport interface StoreUpdatedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'storeUpdated', TData, TContext> {} // not documented\n\nexport interface LeftPinnedWidthChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'leftPinnedWidthChanged', TData, TContext> {} // not documented\nexport interface RightPinnedWidthChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'rightPinnedWidthChanged', TData, TContext> {} // not documented\n\nexport interface RowContainerHeightChanged<TData = any, TContext = any>\n    extends AgGlobalEvent<'rowContainerHeightChanged', TData, TContext> {} // not documented\n\n/**-----------------*/\n/** Internal EVENTS */\n/**-----------------*/\n\n// not documented\nexport interface FlashCellsEvent<TData = any, TContext = any> extends AgGlobalEvent<'flashCells', TData, TContext> {\n    cells: any;\n}\nexport interface DisplayedRowsChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'displayedRowsChanged', TData, TContext> {\n    afterScroll: boolean;\n} // not documented\n\nexport interface CssVariablesChanged<TData = any, TContext = any>\n    extends AgGlobalEvent<'gridStylesChanged', TData, TContext> {\n    themeChanged?: boolean;\n    headerHeightChanged?: boolean;\n    rowHeightChanged?: boolean;\n    listItemHeightChanged?: boolean;\n} // not documented\n\nexport interface AdvancedFilterEnabledChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'advancedFilterEnabledChanged', TData, TContext> {\n    enabled: boolean;\n}\n\nexport interface DataTypesInferredEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'dataTypesInferred', TData, TContext> {}\n\nexport interface FieldValueEvent<T extends AgEventType = 'fieldValueChanged', TData = any, TContext = any>\n    extends AgGlobalEvent<T, TData, TContext> {\n    value: any;\n}\nexport interface FieldPickerValueSelectedEvent<TData = any, TContext = any>\n    extends FieldValueEvent<'fieldPickerValueSelected', TData, TContext> {\n    fromEnterKey: boolean;\n}\nexport interface RichSelectListRowSelectedEvent<TData = any, TContext = any>\n    extends FieldValueEvent<'richSelectListRowSelected', TData, TContext> {\n    fromEnterKey: boolean;\n}\n\nexport interface AlignedGridColumnEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'alignedGridColumn', TData, TContext> {\n    event: ColumnEvent<any>;\n}\n\nexport interface AlignedGridScrollEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'alignedGridScroll', TData, TContext> {\n    event: BodyScrollEvent;\n}\n\nexport interface GridOptionsChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'gridOptionsChanged', TData, TContext> {\n    options: GridOptions;\n}\n\nexport interface ScrollbarWidthChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'scrollbarWidthChanged', TData, TContext> {}\nexport interface KeyShortcutChangedCellStartEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'keyShortcutChangedCellStart', TData, TContext> {}\nexport interface KeyShortcutChangedCellEndEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'keyShortcutChangedCellEnd', TData, TContext> {}\nexport interface HeightScaleChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'heightScaleChanged', TData, TContext> {}\nexport interface SuppressMovableColumnsEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'suppressMovableColumns', TData, TContext> {}\nexport interface SuppressMenuHideEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'suppressMenuHide', TData, TContext> {}\nexport interface SuppressFieldDotNotationEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'suppressFieldDotNotation', TData, TContext> {}\nexport interface ColumnContainerWidthChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'columnContainerWidthChanged', TData, TContext> {}\nexport interface RowContainerHeightChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'rowContainerHeightChanged', TData, TContext> {}\nexport interface HeaderHeightChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'headerHeightChanged', TData, TContext> {}\nexport interface ColumnHeaderHeightChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'columnHeaderHeightChanged', TData, TContext> {}\nexport interface GridStylesChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'gridStylesChanged', TData, TContext> {}\nexport interface RowCountReadyEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'rowCountReady', TData, TContext> {}\nexport interface FieldValueChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'fieldValueChanged', TData, TContext> {}\nexport interface FieldPickerValueSelectedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'fieldPickerValueSelected', TData, TContext> {}\nexport interface RichSelectListRowSelectedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'richSelectListRowSelected', TData, TContext> {}\nexport interface SideBarUpdatedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'sideBarUpdated', TData, TContext> {}\nexport interface ChartTitleEditEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'chartTitleEdit', TData, TContext> {}\nexport interface RecalculateRowBoundsEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'recalculateRowBounds', TData, TContext> {}\nexport interface StickyTopOffsetChangedEvent<TData = any, TContext = any>\n    extends AgGlobalEvent<'stickyTopOffsetChanged', TData, TContext> {}\n", "import type { GridApi } from './api/gridApi';\nimport { ComponentUtil } from './components/componentUtil';\nimport type { NamedBean } from './context/bean';\nimport { BeanStub } from './context/beanStub';\nimport type { BeanCollection } from './context/context';\nimport type { DomLayoutType, GetRowIdFunc, GridOptions } from './entities/gridOptions';\nimport type { Environment } from './environment';\nimport type { AgEventType } from './eventTypes';\nimport type { AgEvent } from './events';\nimport { ALWAYS_SYNC_GLOBAL_EVENTS } from './events';\nimport type {\n    GetGroupAggFilteringParams,\n    GetGroupIncludeFooterParams,\n    RowHeightParams,\n} from './interfaces/iCallbackParams';\nimport type { AgGridCommon, WithoutGridCommon } from './interfaces/iCommon';\nimport type { RowModelType } from './interfaces/iRowModel';\nimport type { IRowNode } from './interfaces/iRowNode';\nimport { LocalEventService } from './localEventService';\nimport type { AnyGridOptions } from './propertyKeys';\nimport { INITIAL_GRID_OPTION_KEYS, PropertyKeys } from './propertyKeys';\nimport { _getScrollbarWidth } from './utils/browser';\nimport { _log, _warnOnce } from './utils/function';\nimport { _exists, _missing, toBoolean } from './utils/generic';\nimport { toConstrainedNum, toNumber } from './utils/number';\nimport { GRID_OPTION_DEFAULTS } from './validation/rules/gridOptionsValidations';\nimport type { ValidationService } from './validation/validationService';\n\ntype GetKeys<T, U> = {\n    [K in keyof T]: T[K] extends U | undefined ? K : never;\n}[keyof T];\n\n/**\n * Get all the GridOption properties that strictly contain the provided type.\n * Does not include `any` properties.\n */\nexport type KeysOfType<U> = Exclude<GetKeys<GridOptions, U>, AnyGridOptions>;\n\ntype BooleanProps = Exclude<KeysOfType<boolean>, AnyGridOptions>;\ntype NoArgFuncs = KeysOfType<() => any>;\ntype AnyArgFuncs = KeysOfType<(arg: 'NO_MATCH') => any>;\ntype CallbackProps = Exclude<KeysOfType<(params: AgGridCommon<any, any>) => any>, NoArgFuncs | AnyArgFuncs>;\n\ntype ExtractParamsFromCallback<TCallback> = TCallback extends (params: infer PA) => any ? PA : never;\ntype ExtractReturnTypeFromCallback<TCallback> = TCallback extends (params: AgGridCommon<any, any>) => infer RT\n    ? RT\n    : never;\ntype WrappedCallback<K extends CallbackProps, OriginalCallback extends GridOptions[K]> =\n    | undefined\n    | ((\n          params: WithoutGridCommon<ExtractParamsFromCallback<OriginalCallback>>\n      ) => ExtractReturnTypeFromCallback<OriginalCallback>);\nexport interface PropertyChangeSet {\n    /** Unique id which can be used to link changes of multiple properties that were updated together.\n     * i.e a user updated multiple properties at the same time.\n     */\n    id: number;\n    /** All the properties that have been updated in this change set */\n    properties: (keyof GridOptions)[];\n}\nexport type PropertyChangedSource = 'api' | 'gridOptionsUpdated';\nexport interface PropertyChangedEvent extends AgEvent {\n    type: 'gridPropertyChanged';\n    changeSet: PropertyChangeSet | undefined;\n    source: PropertyChangedSource;\n}\n\n/**\n * For boolean properties the changed value will have been coerced to a boolean, so we do not want the type to include the undefined value.\n */\ntype GridOptionsOrBooleanCoercedValue<K extends keyof GridOptions> = K extends BooleanProps ? boolean : GridOptions[K];\n\nexport interface PropertyValueChangedEvent<K extends keyof GridOptions> extends AgEvent {\n    type: K;\n    changeSet: PropertyChangeSet | undefined;\n    currentValue: GridOptionsOrBooleanCoercedValue<K>;\n    previousValue: GridOptionsOrBooleanCoercedValue<K>;\n    source: PropertyChangedSource;\n}\n\nexport type PropertyChangedListener = (event: PropertyChangedEvent) => void;\nexport type PropertyValueChangedListener<K extends keyof GridOptions> = (event: PropertyValueChangedEvent<K>) => void;\n\n/**\n * Handles value coercion including validation of ranges etc. If value is invalid, undefined is set, allowing default to be used.\n */\nconst PROPERTY_COERCIONS: Map<keyof GridOptions, (value: any) => GridOptions[keyof GridOptions]> = new Map([\n    ...PropertyKeys.BOOLEAN_PROPERTIES.map((key) => [key as keyof GridOptions, toBoolean]),\n    ...PropertyKeys.NUMBER_PROPERTIES.map((key) => [key as keyof GridOptions, toNumber]),\n    ['groupAggFiltering', (val: any) => (typeof val === 'function' ? val : toBoolean(val))],\n    ['pageSize', toConstrainedNum(1)],\n    ['autoSizePadding', toConstrainedNum(0)],\n    ['keepDetailRowsCount', toConstrainedNum(1)],\n    ['rowBuffer', toConstrainedNum(0)],\n    ['infiniteInitialRowCount', toConstrainedNum(1)],\n    ['cacheOverflowSize', toConstrainedNum(1)],\n    ['cacheBlockSize', toConstrainedNum(1)],\n    ['serverSideInitialRowCount', toConstrainedNum(1)],\n    ['viewportRowModelPageSize', toConstrainedNum(1)],\n    ['viewportRowModelBufferSize', toConstrainedNum(0)],\n] as [keyof GridOptions, (value: any) => GridOptions[keyof GridOptions]][]);\n\nfunction getCoercedValue<K extends keyof GridOptions>(key: K, value: GridOptions[K]): GridOptions[K] {\n    const coerceFunc = PROPERTY_COERCIONS.get(key);\n\n    if (!coerceFunc) {\n        return value;\n    }\n\n    return coerceFunc(value);\n}\n\nexport function getCoercedGridOptions(gridOptions: GridOptions): GridOptions {\n    const newGo: GridOptions = {};\n    Object.entries(gridOptions).forEach(([key, value]: [keyof GridOptions, any]) => {\n        const coercedValue = getCoercedValue(key, value);\n        newGo[key] = coercedValue;\n    });\n    return newGo;\n}\n\nexport class GridOptionsService extends BeanStub implements NamedBean {\n    beanName = 'gos' as const;\n\n    private gridOptions: GridOptions;\n    private eGridDiv: HTMLElement;\n    private validationService?: ValidationService;\n    private environment: Environment;\n    private api: GridApi;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.gridOptions = beans.gridOptions;\n        this.eGridDiv = beans.eGridDiv;\n        this.validationService = beans.validationService;\n        this.environment = beans.environment;\n        this.api = beans.gridApi;\n    }\n\n    // we store this locally, so we are not calling getScrollWidth() multiple times as it's an expensive operation\n    private scrollbarWidth: number;\n    private domDataKey = '__AG_' + Math.random().toString();\n\n    // This is quicker then having code call gridOptionsService.get('context')\n    private get gridOptionsContext() {\n        return this.gridOptions['context'];\n    }\n\n    private propertyEventService: LocalEventService<keyof GridOptions> = new LocalEventService();\n\n    public postConstruct(): void {\n        const async = !this.get('suppressAsyncEvents');\n        this.eventService.addGlobalListener(this.globalEventHandlerFactory().bind(this), async);\n        this.eventService.addGlobalListener(this.globalEventHandlerFactory(true).bind(this), false);\n\n        // Ensure the propertyEventService has framework overrides set so that it can fire events outside of angular\n        this.propertyEventService.setFrameworkOverrides(this.frameworkOverrides);\n        // sets an initial calculation for the scrollbar width\n        this.getScrollbarWidth();\n\n        this.addManagedEventListeners({\n            gridOptionsChanged: ({ options }) => {\n                this.updateGridOptions({ options, force: true, source: 'gridOptionsUpdated' });\n            },\n        });\n    }\n\n    /**\n     * Get the raw value of the GridOptions property provided.\n     * @param property\n     */\n    public get<K extends keyof GridOptions>(\n        property: K\n    ): K extends keyof typeof GRID_OPTION_DEFAULTS ? NonNullable<GridOptions[K]> : GridOptions[K] {\n        return (\n            this.gridOptions[property] ??\n            (GRID_OPTION_DEFAULTS[property as keyof typeof GRID_OPTION_DEFAULTS] as GridOptions[K])\n        );\n    }\n\n    /**\n     * Get the GridOption callback but wrapped so that the common params of api and context are automatically applied to the params.\n     * @param property GridOption callback properties based on the fact that this property has a callback with params extending AgGridCommon\n     */\n    public getCallback<K extends CallbackProps>(property: K): WrappedCallback<K, GridOptions[K]> {\n        return this.mergeGridCommonParams(this.gridOptions[property]);\n    }\n\n    /**\n     * Returns `true` if a value has been specified for this GridOption.\n     * @param property GridOption property\n     */\n    public exists(property: keyof GridOptions): boolean {\n        return _exists(this.gridOptions[property]);\n    }\n\n    /**\n     * Wrap the user callback and attach the api and context to the params object on the way through.\n     * @param callback User provided callback\n     * @returns Wrapped callback where the params object not require api and context\n     */\n    private mergeGridCommonParams<P extends AgGridCommon<any, any>, T>(\n        callback: ((params: P) => T) | undefined\n    ): ((params: WithoutGridCommon<P>) => T) | undefined {\n        if (callback) {\n            const wrapped = (callbackParams: WithoutGridCommon<P>): T => {\n                const mergedParams = callbackParams as P;\n                mergedParams.api = this.api;\n                mergedParams.context = this.gridOptionsContext;\n\n                return callback(mergedParams);\n            };\n            return wrapped;\n        }\n        return callback;\n    }\n\n    private static changeSetId = 0;\n    public updateGridOptions({\n        options,\n        force,\n        source = 'api',\n    }: {\n        options: Partial<GridOptions>;\n        force?: boolean;\n        source?: PropertyChangedSource;\n    }): void {\n        const changeSet: PropertyChangeSet = { id: GridOptionsService.changeSetId++, properties: [] };\n        // all events are fired after grid options has finished updating.\n        const events: PropertyValueChangedEvent<keyof GridOptions>[] = [];\n        Object.entries(options).forEach(([key, value]) => {\n            if (source === 'api' && (INITIAL_GRID_OPTION_KEYS as any)[key]) {\n                _warnOnce(`${key} is an initial property and cannot be updated.`);\n            }\n            const coercedValue = getCoercedValue(key as keyof GridOptions, value);\n            const shouldForce = force || (typeof coercedValue === 'object' && source === 'api'); // force objects as they could have been mutated.\n\n            const previousValue = this.gridOptions[key as keyof GridOptions];\n            if (shouldForce || previousValue !== coercedValue) {\n                this.gridOptions[key as keyof GridOptions] = coercedValue;\n                const event: PropertyValueChangedEvent<keyof GridOptions> = {\n                    type: key as keyof GridOptions,\n                    currentValue: coercedValue,\n                    previousValue,\n                    changeSet,\n                    source,\n                };\n                events.push(event);\n            }\n        });\n\n        this.validationService?.processGridOptions(this.gridOptions);\n\n        // changeSet should just include the properties that have changed.\n        changeSet.properties = events.map((event) => event.type);\n\n        events.forEach((event) => {\n            if (this.gridOptions.debug) {\n                _log(`Updated property ${event.type} from ${event.previousValue} to ${event.currentValue}`);\n            }\n            this.propertyEventService.dispatchEvent(event);\n        });\n    }\n\n    addPropertyEventListener<K extends keyof GridOptions>(key: K, listener: PropertyValueChangedListener<K>): void {\n        this.propertyEventService.addEventListener(key, listener as any);\n    }\n    removePropertyEventListener<K extends keyof GridOptions>(key: K, listener: PropertyValueChangedListener<K>): void {\n        this.propertyEventService.removeEventListener(key, listener as any);\n    }\n\n    // responsible for calling the onXXX functions on gridOptions\n    // It forces events defined in GridOptionsService.alwaysSyncGlobalEvents to be fired synchronously.\n    // This is required for events such as GridPreDestroyed.\n    // Other events can be fired asynchronously or synchronously depending on config.\n    globalEventHandlerFactory = (restrictToSyncOnly?: boolean) => {\n        return (eventName: AgEventType, event?: any) => {\n            // prevent events from being fired _after_ the grid has been destroyed\n            if (!this.isAlive()) {\n                return;\n            }\n\n            const alwaysSync = ALWAYS_SYNC_GLOBAL_EVENTS.has(eventName);\n            if ((alwaysSync && !restrictToSyncOnly) || (!alwaysSync && restrictToSyncOnly)) {\n                return;\n            }\n\n            const eventHandlerName = ComponentUtil.getCallbackForEvent(eventName);\n            const eventHandler = (this.gridOptions as any)[eventHandlerName];\n            if (typeof eventHandler === 'function') {\n                this.frameworkOverrides.wrapOutgoing(() => {\n                    eventHandler(event);\n                });\n            }\n        };\n    };\n\n    // *************** Helper methods ************************** //\n    // Methods to share common GridOptions related logic that goes above accessing a single property\n\n    // the user might be using some non-standard scrollbar, eg a scrollbar that has zero\n    // width and overlays (like the Safari scrollbar, but presented in Chrome). so we\n    // allow the user to provide the scroll width before we work it out.\n    public getScrollbarWidth() {\n        if (this.scrollbarWidth == null) {\n            const useGridOptions =\n                typeof this.gridOptions.scrollbarWidth === 'number' && this.gridOptions.scrollbarWidth >= 0;\n            const scrollbarWidth = useGridOptions ? this.gridOptions.scrollbarWidth : _getScrollbarWidth();\n\n            if (scrollbarWidth != null) {\n                this.scrollbarWidth = scrollbarWidth;\n\n                this.eventService.dispatchEvent({\n                    type: 'scrollbarWidthChanged',\n                });\n            }\n        }\n\n        return this.scrollbarWidth;\n    }\n\n    public isRowModelType(rowModelType: RowModelType): boolean {\n        return (\n            this.gridOptions.rowModelType === rowModelType ||\n            (rowModelType === 'clientSide' && _missing(this.gridOptions.rowModelType))\n        );\n    }\n\n    public isDomLayout(domLayout: DomLayoutType) {\n        const gridLayout = this.gridOptions.domLayout ?? 'normal';\n        return gridLayout === domLayout;\n    }\n\n    public isRowSelection() {\n        return this.gridOptions.rowSelection === 'single' || this.gridOptions.rowSelection === 'multiple';\n    }\n\n    public useAsyncEvents() {\n        return !this.get('suppressAsyncEvents');\n    }\n\n    public isGetRowHeightFunction(): boolean {\n        return typeof this.gridOptions.getRowHeight === 'function';\n    }\n\n    public getRowHeightForNode(\n        rowNode: IRowNode,\n        allowEstimate = false,\n        defaultRowHeight?: number\n    ): { height: number; estimated: boolean } {\n        if (defaultRowHeight == null) {\n            defaultRowHeight = this.environment.getDefaultRowHeight();\n        }\n\n        // check the function first, in case use set both function and\n        // number, when using virtual pagination then function can be\n        // used for pinned rows and the number for the body rows.\n\n        if (this.isGetRowHeightFunction()) {\n            if (allowEstimate) {\n                return { height: defaultRowHeight, estimated: true };\n            }\n\n            const params: WithoutGridCommon<RowHeightParams> = {\n                node: rowNode,\n                data: rowNode.data,\n            };\n\n            const height = this.getCallback('getRowHeight')!(params);\n\n            if (this.isNumeric(height)) {\n                if (height === 0) {\n                    _warnOnce(\n                        'The return of `getRowHeight` cannot be zero. If the intention is to hide rows, use a filter instead.'\n                    );\n                }\n                return { height: Math.max(1, height), estimated: false };\n            }\n        }\n\n        if (rowNode.detail && this.get('masterDetail')) {\n            return this.getMasterDetailRowHeight();\n        }\n\n        const rowHeight =\n            this.gridOptions.rowHeight && this.isNumeric(this.gridOptions.rowHeight)\n                ? this.gridOptions.rowHeight\n                : defaultRowHeight;\n\n        return { height: rowHeight, estimated: false };\n    }\n\n    private getMasterDetailRowHeight(): { height: number; estimated: boolean } {\n        // if autoHeight, we want the height to grow to the new height starting at 1, as otherwise a flicker would happen,\n        // as the detail goes to the default (eg 200px) and then immediately shrink up/down to the new measured height\n        // (due to auto height) which looks bad, especially if doing row animation.\n        if (this.get('detailRowAutoHeight')) {\n            return { height: 1, estimated: false };\n        }\n\n        if (this.isNumeric(this.gridOptions.detailRowHeight)) {\n            return { height: this.gridOptions.detailRowHeight, estimated: false };\n        }\n\n        return { height: 300, estimated: false };\n    }\n\n    // we don't allow dynamic row height for virtual paging\n    public getRowHeightAsNumber(): number {\n        if (!this.gridOptions.rowHeight || _missing(this.gridOptions.rowHeight)) {\n            return this.environment.getDefaultRowHeight();\n        }\n\n        const rowHeight = this.environment.refreshRowHeightVariable();\n\n        if (rowHeight !== -1) {\n            return rowHeight;\n        }\n\n        _warnOnce('row height must be a number if not using standard row model');\n        return this.environment.getDefaultRowHeight();\n    }\n\n    private isNumeric(value: any): value is number {\n        return !isNaN(value) && typeof value === 'number' && isFinite(value);\n    }\n\n    public getDomDataKey(): string {\n        return this.domDataKey;\n    }\n\n    // returns the dom data, or undefined if not found\n    public getDomData(element: Node | null, key: string): any {\n        const domData = (element as any)[this.getDomDataKey()];\n\n        return domData ? domData[key] : undefined;\n    }\n\n    public setDomData(element: Element, key: string, value: any): any {\n        const domDataKey = this.getDomDataKey();\n        let domData = (element as any)[domDataKey];\n\n        if (_missing(domData)) {\n            domData = {};\n            (element as any)[domDataKey] = domData;\n        }\n        domData[key] = value;\n    }\n\n    public getDocument(): Document {\n        // if user is providing document, we use the users one,\n        // otherwise we use the document on the global namespace.\n        let result: Document | null = null;\n        if (this.gridOptions.getDocument && _exists(this.gridOptions.getDocument)) {\n            result = this.gridOptions.getDocument();\n        } else if (this.eGridDiv) {\n            result = this.eGridDiv.ownerDocument;\n        }\n\n        if (result && _exists(result)) {\n            return result;\n        }\n\n        return document;\n    }\n\n    public getWindow() {\n        const eDocument = this.getDocument();\n        return eDocument.defaultView || window;\n    }\n\n    public getRootNode(): Document | ShadowRoot {\n        return this.eGridDiv.getRootNode() as Document | ShadowRoot;\n    }\n\n    public getActiveDomElement(): Element | null {\n        return this.getRootNode().activeElement;\n    }\n\n    public getAsyncTransactionWaitMillis(): number | undefined {\n        return _exists(this.gridOptions.asyncTransactionWaitMillis) ? this.gridOptions.asyncTransactionWaitMillis : 50;\n    }\n\n    public isAnimateRows() {\n        // never allow animating if enforcing the row order\n        if (this.get('ensureDomOrder')) {\n            return false;\n        }\n\n        return this.get('animateRows');\n    }\n\n    public isGroupRowsSticky(): boolean {\n        if (this.get('paginateChildRows') || this.get('groupHideOpenParents') || this.isDomLayout('print')) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public isColumnsSortingCoupledToGroup(): boolean {\n        const autoGroupColumnDef = this.gridOptions.autoGroupColumnDef;\n        return !autoGroupColumnDef?.comparator && !this.get('treeData');\n    }\n\n    public getGroupAggFiltering(): ((params: WithoutGridCommon<GetGroupAggFilteringParams>) => boolean) | undefined {\n        const userValue = this.gridOptions.groupAggFiltering;\n\n        if (typeof userValue === 'function') {\n            return this.getCallback('groupAggFiltering' as any) as any;\n        }\n\n        if (userValue === true) {\n            return () => true;\n        }\n\n        return undefined;\n    }\n\n    public getGrandTotalRow(): 'top' | 'bottom' | undefined {\n        const userValue = this.gridOptions.grandTotalRow;\n        if (userValue) {\n            return userValue;\n        }\n\n        const legacyValue = this.gridOptions.groupIncludeTotalFooter;\n        if (legacyValue) {\n            return 'bottom';\n        }\n        return undefined;\n    }\n\n    public getGroupTotalRowCallback(): (\n        params: WithoutGridCommon<GetGroupIncludeFooterParams>\n    ) => 'top' | 'bottom' | undefined {\n        const userValue = this.get('groupTotalRow');\n\n        if (typeof userValue === 'function') {\n            return this.getCallback('groupTotalRow' as any) as any;\n        }\n\n        if (userValue) {\n            return () => userValue;\n        }\n\n        const legacyValue = this.get('groupIncludeFooter');\n        if (typeof legacyValue === 'function') {\n            const legacyCallback = this.getCallback('groupIncludeFooter' as any) as any;\n            return (p: GetGroupIncludeFooterParams) => {\n                return legacyCallback(p) ? 'bottom' : undefined;\n            };\n        }\n        return () => (legacyValue ? 'bottom' : undefined);\n    }\n\n    public isGroupMultiAutoColumn() {\n        if (this.gridOptions.groupDisplayType) {\n            return this.gridOptions.groupDisplayType === 'multipleColumns';\n        }\n        // if we are doing hideOpenParents we also show multiple columns, otherwise hideOpenParents would not work\n        return this.get('groupHideOpenParents');\n    }\n\n    public isGroupUseEntireRow(pivotMode: boolean): boolean {\n        // we never allow groupDisplayType = 'groupRows' if in pivot mode, otherwise we won't see the pivot values.\n        if (pivotMode) {\n            return false;\n        }\n\n        return this.gridOptions.groupDisplayType === 'groupRows';\n    }\n\n    public getGridCommonParams<TData = any, TContext = any>(): AgGridCommon<TData, TContext> {\n        return {\n            api: this.api,\n            context: this.gridOptionsContext,\n        };\n    }\n\n    public addGridCommonParams<T extends AgGridCommon<TData, TContext>, TData = any, TContext = any>(\n        params: WithoutGridCommon<T>\n    ): T {\n        const updatedParams = params as T;\n        updatedParams.api = this.api;\n        updatedParams.context = this.gridOptionsContext;\n        return updatedParams;\n    }\n\n    // AG-9259 Can't use `WrappedCallback<'getRowId', ...>` here because of a strange typescript bug\n    public getRowIdCallback<TData = any>():\n        | ((\n              params: WithoutGridCommon<ExtractParamsFromCallback<GetRowIdFunc<TData>>>\n          ) => ExtractReturnTypeFromCallback<GetRowIdFunc<TData>>)\n        | undefined {\n        const getRowId = this.getCallback('getRowId');\n\n        if (getRowId === undefined) {\n            return getRowId;\n        }\n\n        return (params) => {\n            let id = getRowId(params);\n\n            if (typeof id !== 'string') {\n                _warnOnce(`The getRowId callback must return a string. The ID ${id} is being cast to a string.`);\n                id = String(id);\n            }\n\n            return id;\n        };\n    }\n}\n", "import type { VisibleColsService } from '../../columns/visibleColsService';\nimport type { NamedBean } from '../../context/bean';\nimport { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { CtrlsService } from '../../ctrlsService';\nimport type { AgColumn } from '../../entities/agColumn';\nimport { isColumnGroup } from '../../entities/agColumnGroup';\nimport type { AgColumnGroup } from '../../entities/agColumnGroup';\nimport type { Column, ColumnGroup } from '../../interfaces/iColumn';\nimport { _last } from '../../utils/array';\nimport { HeaderRowType } from '../row/headerRowComp';\n\nexport interface HeaderPosition {\n    /** A number from 0 to n, where n is the last header row the grid is rendering */\n    headerRowIndex: number;\n    /** The grid column or column group */\n    column: Column | ColumnGroup;\n}\n\nexport interface HeaderFuturePosition extends HeaderPosition {\n    headerRowIndexWithoutSpan?: number;\n}\n\nexport class HeaderPositionUtils extends BeanStub implements NamedBean {\n    beanName = 'headerPositionUtils' as const;\n\n    private visibleColsService: VisibleColsService;\n    private ctrlsService: CtrlsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.visibleColsService = beans.visibleColsService;\n        this.ctrlsService = beans.ctrlsService;\n    }\n\n    public findHeader(focusedHeader: HeaderPosition, direction: 'Before' | 'After'): HeaderPosition | undefined {\n        let nextColumn: AgColumn | AgColumnGroup;\n        let getColMethod: 'getColBefore' | 'getColAfter';\n\n        if (isColumnGroup(focusedHeader.column)) {\n            nextColumn = this.visibleColsService.getGroupAtDirection(focusedHeader.column, direction)!;\n        } else {\n            getColMethod = `getCol${direction}` as any;\n            nextColumn = this.visibleColsService[getColMethod](focusedHeader.column as AgColumn)!;\n        }\n\n        if (!nextColumn) {\n            return;\n        }\n\n        const { headerRowIndex } = focusedHeader;\n\n        if (this.getHeaderRowType(headerRowIndex) !== HeaderRowType.FLOATING_FILTER) {\n            const columnsInPath: (AgColumn | AgColumnGroup)[] = [nextColumn];\n\n            while (nextColumn.getParent()) {\n                nextColumn = nextColumn.getParent()!;\n                columnsInPath.push(nextColumn);\n            }\n\n            nextColumn = columnsInPath[columnsInPath.length - 1 - headerRowIndex];\n        }\n\n        const { column, headerRowIndex: indexToFocus } = this.getHeaderIndexToFocus(nextColumn, headerRowIndex);\n\n        return {\n            column,\n            headerRowIndex: indexToFocus,\n        };\n    }\n\n    public getHeaderIndexToFocus(column: AgColumn | AgColumnGroup, currentIndex: number): HeaderPosition {\n        let nextColumn: AgColumn | undefined;\n\n        if (isColumnGroup(column) && this.isAnyChildSpanningHeaderHeight(column) && column.isPadding()) {\n            const targetColumn: AgColumnGroup = column;\n            nextColumn = targetColumn.getLeafColumns()[0];\n            let col: AgColumn | AgColumnGroup = nextColumn;\n            while (col !== targetColumn) {\n                currentIndex++;\n                col = col.getParent()!;\n            }\n        }\n\n        return {\n            column: nextColumn || column,\n            headerRowIndex: currentIndex,\n        };\n    }\n\n    private isAnyChildSpanningHeaderHeight(columnGroup: AgColumnGroup | null): boolean {\n        if (!columnGroup) {\n            return false;\n        }\n        return columnGroup.getLeafColumns().some((col) => col.isSpanHeaderHeight());\n    }\n\n    public getColumnVisibleParent(currentColumn: AgColumn | AgColumnGroup, currentIndex: number): HeaderFuturePosition {\n        const currentRowType = this.getHeaderRowType(currentIndex);\n        const isFloatingFilter = currentRowType === HeaderRowType.FLOATING_FILTER;\n        const isColumn = currentRowType === HeaderRowType.COLUMN;\n\n        let nextFocusColumn: AgColumn | AgColumnGroup | null = isFloatingFilter\n            ? currentColumn\n            : currentColumn.getParent();\n        let nextRow = currentIndex - 1;\n        let headerRowIndexWithoutSpan: number | undefined = nextRow;\n\n        if (isColumn && this.isAnyChildSpanningHeaderHeight((currentColumn as AgColumn).getParent())) {\n            while (nextFocusColumn && (nextFocusColumn as AgColumnGroup).isPadding()) {\n                nextFocusColumn = nextFocusColumn.getParent();\n                nextRow--;\n            }\n\n            headerRowIndexWithoutSpan = nextRow;\n            if (nextRow < 0) {\n                nextFocusColumn = currentColumn;\n                nextRow = currentIndex;\n                headerRowIndexWithoutSpan = undefined;\n            }\n        }\n\n        return { column: nextFocusColumn!, headerRowIndex: nextRow, headerRowIndexWithoutSpan };\n    }\n\n    public getColumnVisibleChild(\n        column: AgColumn | AgColumnGroup,\n        currentIndex: number,\n        direction: 'Before' | 'After' = 'After'\n    ): HeaderFuturePosition {\n        const currentRowType = this.getHeaderRowType(currentIndex);\n        let nextFocusColumn: AgColumn | AgColumnGroup | null = column;\n        let nextRow = currentIndex + 1;\n        const headerRowIndexWithoutSpan = nextRow;\n\n        if (currentRowType === HeaderRowType.COLUMN_GROUP) {\n            const leafColumns = (column as AgColumnGroup).getDisplayedLeafColumns();\n            const leafColumn = direction === 'After' ? leafColumns[0] : _last(leafColumns);\n            const columnsInTheWay: AgColumnGroup[] = [];\n\n            let currentColumn: AgColumn | AgColumnGroup = leafColumn;\n            while (currentColumn.getParent() !== column) {\n                currentColumn = currentColumn.getParent()!;\n                columnsInTheWay.push(currentColumn);\n            }\n\n            nextFocusColumn = leafColumn;\n            if (leafColumn.isSpanHeaderHeight()) {\n                for (let i = columnsInTheWay.length - 1; i >= 0; i--) {\n                    const colToFocus = columnsInTheWay[i];\n                    if (!colToFocus.isPadding()) {\n                        nextFocusColumn = colToFocus;\n                        break;\n                    }\n                    nextRow++;\n                }\n            } else {\n                nextFocusColumn = _last(columnsInTheWay);\n                if (!nextFocusColumn) {\n                    nextFocusColumn = leafColumn;\n                }\n            }\n        }\n\n        return { column: nextFocusColumn, headerRowIndex: nextRow, headerRowIndexWithoutSpan };\n    }\n\n    private getHeaderRowType(rowIndex: number): HeaderRowType | undefined {\n        const centerHeaderContainer = this.ctrlsService.getHeaderRowContainerCtrl();\n        if (centerHeaderContainer) {\n            return centerHeaderContainer.getRowType(rowIndex);\n        }\n    }\n\n    public findColAtEdgeForHeaderRow(level: number, position: 'start' | 'end'): HeaderPosition | undefined {\n        const displayedColumns = this.visibleColsService.getAllCols();\n        const column = displayedColumns[position === 'start' ? 0 : displayedColumns.length - 1];\n\n        if (!column) {\n            return;\n        }\n\n        const childContainer = this.ctrlsService.getHeaderRowContainerCtrl(column.getPinned());\n        const type = childContainer.getRowType(level);\n\n        if (type == HeaderRowType.COLUMN_GROUP) {\n            const columnGroup = this.visibleColsService.getColGroupAtLevel(column, level);\n            return {\n                headerRowIndex: level,\n                column: columnGroup!,\n            };\n        }\n\n        return {\n            // if type==null, means the header level didn't exist\n            headerRowIndex: type == null ? -1 : level,\n            column,\n        };\n    }\n}\n", "import type { NamedBean } from './context/bean';\nimport { BeanStub } from './context/beanStub';\nimport type { GetLocaleTextParams } from './interfaces/iCallbackParams';\nimport type { WithoutGridCommon } from './interfaces/iCommon';\n\nexport class LocaleService extends BeanStub implements NamedBean {\n    beanName = 'localeService' as const;\n\n    public getLocaleTextFunc(): (key: string, defaultValue: string, variableValues?: string[]) => string {\n        const getLocaleText = this.gos.getCallback('getLocaleText');\n        if (getLocaleText) {\n            //key: string, defaultValue: string, variableValues?: string[]\n            return (key: string, defaultValue: string, variableValues?: string[]) => {\n                const params: WithoutGridCommon<GetLocaleTextParams> = {\n                    key,\n                    defaultValue,\n                    variableValues,\n                };\n                return getLocaleText(params);\n            };\n        }\n\n        const localeText = this.gos.get('localeText');\n        return (key: string, defaultValue: string, variableValues?: string[]) => {\n            let localisedText = localeText && localeText[key];\n\n            if (localisedText && variableValues && variableValues.length) {\n                let found = 0;\n                while (true) {\n                    if (found >= variableValues.length) {\n                        break;\n                    }\n                    const idx = localisedText.indexOf('${variable}');\n                    if (idx === -1) {\n                        break;\n                    }\n\n                    localisedText = localisedText.replace('${variable}', variableValues[found++]);\n                }\n            }\n\n            return localisedText ?? defaultValue;\n        };\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { AgEventType } from '../eventTypes';\nimport type { AgEventListener, AgGlobalEventListener } from '../events';\nimport { ALWAYS_SYNC_GLOBAL_EVENTS } from '../events';\nimport { FrameworkEventListenerService } from './frameworkEventListenerService';\n\nexport class ApiEventService extends BeanStub<AgEventType> implements NamedBean {\n    beanName = 'apiEventService' as const;\n\n    private syncEventListeners: Map<AgEventType, Set<AgEventListener>> = new Map();\n    private asyncEventListeners: Map<AgEventType, Set<AgEventListener>> = new Map();\n    private syncGlobalEventListeners: Set<AgGlobalEventListener> = new Set();\n    private globalEventListenerPairs = new Map<\n        AgGlobalEventListener,\n        { syncListener: AgGlobalEventListener; asyncListener: AgGlobalEventListener }\n    >();\n    private frameworkEventWrappingService: FrameworkEventListenerService<AgEventListener, AgGlobalEventListener>;\n\n    public postConstruct(): void {\n        this.frameworkEventWrappingService = new FrameworkEventListenerService(this.getFrameworkOverrides());\n    }\n\n    public override addEventListener<T extends AgEventType>(eventType: T, userListener: AgEventListener): void {\n        const listener = this.frameworkEventWrappingService.wrap(userListener);\n\n        const async = this.gos.useAsyncEvents() && !ALWAYS_SYNC_GLOBAL_EVENTS.has(eventType);\n        const listeners = async ? this.asyncEventListeners : this.syncEventListeners;\n        if (!listeners.has(eventType)) {\n            listeners.set(eventType, new Set());\n        }\n        listeners.get(eventType)!.add(listener);\n        this.eventService.addEventListener(eventType, listener, async);\n    }\n    public override removeEventListener<T extends AgEventType>(eventType: T, userListener: AgEventListener): void {\n        const listener = this.frameworkEventWrappingService.unwrap(userListener);\n        const asyncListeners = this.asyncEventListeners.get(eventType);\n        const hasAsync = !!asyncListeners?.delete(listener);\n        if (!hasAsync) {\n            this.syncEventListeners.get(eventType)?.delete(listener);\n        }\n        this.eventService.removeEventListener(eventType, listener, hasAsync);\n    }\n\n    public addGlobalListener(userListener: AgGlobalEventListener): void {\n        const listener = this.frameworkEventWrappingService.wrapGlobal(userListener);\n\n        const async = this.gos.useAsyncEvents();\n\n        if (async) {\n            // if async then need to setup the global listener for sync to handle alwaysSyncGlobalEvents\n            const syncListener: AgGlobalEventListener = (eventType, event) => {\n                if (ALWAYS_SYNC_GLOBAL_EVENTS.has(eventType)) {\n                    listener(eventType, event);\n                }\n            };\n            const asyncListener: AgGlobalEventListener = (eventType, event) => {\n                if (!ALWAYS_SYNC_GLOBAL_EVENTS.has(eventType)) {\n                    listener(eventType, event);\n                }\n            };\n            this.globalEventListenerPairs.set(userListener, { syncListener, asyncListener });\n            this.eventService.addGlobalListener(syncListener, false);\n            this.eventService.addGlobalListener(asyncListener, true);\n        } else {\n            this.syncGlobalEventListeners.add(listener);\n            this.eventService.addGlobalListener(listener, false);\n        }\n    }\n\n    public removeGlobalListener(userListener: AgGlobalEventListener): void {\n        const listener = this.frameworkEventWrappingService.unwrapGlobal(userListener);\n\n        const hasAsync = this.globalEventListenerPairs.has(listener);\n        if (hasAsync) {\n            // If it was async also remove the always sync listener we added\n            const { syncListener, asyncListener } = this.globalEventListenerPairs.get(listener)!;\n            this.eventService.removeGlobalListener(syncListener, false);\n            this.eventService.removeGlobalListener(asyncListener, true);\n            this.globalEventListenerPairs.delete(userListener);\n        } else {\n            this.syncGlobalEventListeners.delete(listener);\n            this.eventService.removeGlobalListener(listener, false);\n        }\n    }\n\n    private destroyEventListeners(map: Map<AgEventType, Set<AgEventListener>>, async: boolean): void {\n        map.forEach((listeners, eventType) => {\n            listeners.forEach((listener) => this.eventService.removeEventListener(eventType, listener, async));\n            listeners.clear();\n        });\n        map.clear();\n    }\n\n    private destroyGlobalListeners(set: Set<AgGlobalEventListener>, async: boolean): void {\n        set.forEach((listener) => this.eventService.removeGlobalListener(listener, async));\n        set.clear();\n    }\n\n    public override destroy(): void {\n        super.destroy();\n\n        this.destroyEventListeners(this.syncEventListeners, false);\n        this.destroyEventListeners(this.asyncEventListeners, true);\n        this.destroyGlobalListeners(this.syncGlobalEventListeners, false);\n        this.globalEventListenerPairs.forEach(({ syncListener, asyncListener }) => {\n            this.eventService.removeGlobalListener(syncListener, false);\n            this.eventService.removeGlobalListener(asyncListener, true);\n        });\n        this.globalEventListenerPairs.clear();\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { ModelUpdatedEvent, PaginationChangedEvent } from '../events';\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\nimport type { IRowModel } from '../interfaces/iRowModel';\nimport type { PageBoundsService } from './pageBoundsService';\nimport type { PaginationService } from './paginationService';\n\nexport class PageBoundsListener extends BeanStub implements NamedBean {\n    beanName = 'pageBoundsListener' as const;\n\n    private rowModel: IRowModel;\n    private paginationService?: PaginationService;\n    private pageBoundsService: PageBoundsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.rowModel = beans.rowModel;\n        this.paginationService = beans.paginationService;\n        this.pageBoundsService = beans.pageBoundsService;\n    }\n\n    public postConstruct(): void {\n        this.addManagedEventListeners({\n            modelUpdated: this.onModelUpdated.bind(this),\n            recalculateRowBounds: this.calculatePages.bind(this),\n        });\n\n        this.onModelUpdated();\n    }\n\n    private onModelUpdated(modelUpdatedEvent?: WithoutGridCommon<ModelUpdatedEvent>): void {\n        this.calculatePages();\n\n        const paginationChangedEvent: WithoutGridCommon<PaginationChangedEvent> = {\n            type: 'paginationChanged',\n            animate: modelUpdatedEvent ? modelUpdatedEvent.animate : false,\n            newData: modelUpdatedEvent ? modelUpdatedEvent.newData : false,\n            newPage: modelUpdatedEvent ? modelUpdatedEvent.newPage : false,\n            newPageSize: modelUpdatedEvent ? modelUpdatedEvent.newPageSize : false,\n            keepRenderedRows: modelUpdatedEvent ? modelUpdatedEvent.keepRenderedRows : false,\n        };\n        this.eventService.dispatchEvent(paginationChangedEvent);\n    }\n\n    private calculatePages(): void {\n        if (this.paginationService) {\n            this.paginationService.calculatePages();\n        } else {\n            this.pageBoundsService.calculateBounds(0, this.rowModel.getRowCount() - 1);\n        }\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { IRowModel, RowBounds } from '../interfaces/iRowModel';\nimport { _exists, _missing } from '../utils/generic';\n\n// note that everything in this service is used even when pagination is off\nexport class PageBoundsService extends BeanStub implements NamedBean {\n    beanName = 'pageBoundsService' as const;\n\n    private rowModel: IRowModel;\n\n    private topRowBounds: RowBounds;\n    private bottomRowBounds: RowBounds;\n    private pixelOffset = 0;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.rowModel = beans.rowModel;\n    }\n\n    public getFirstRow(): number {\n        return this.topRowBounds ? this.topRowBounds.rowIndex! : -1;\n    }\n\n    public getLastRow(): number {\n        return this.bottomRowBounds ? this.bottomRowBounds.rowIndex! : -1;\n    }\n\n    public getCurrentPageHeight(): number {\n        if (_missing(this.topRowBounds) || _missing(this.bottomRowBounds)) {\n            return 0;\n        }\n        return Math.max(this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight - this.topRowBounds.rowTop, 0);\n    }\n\n    public getCurrentPagePixelRange(): { pageFirstPixel: number; pageLastPixel: number } {\n        const pageFirstPixel = this.topRowBounds ? this.topRowBounds.rowTop : 0;\n        const pageLastPixel = this.bottomRowBounds ? this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight : 0;\n        return { pageFirstPixel, pageLastPixel };\n    }\n\n    public calculateBounds(topDisplayedRowIndex: number, bottomDisplayedRowIndex: number): void {\n        this.topRowBounds = this.rowModel.getRowBounds(topDisplayedRowIndex)!;\n        if (this.topRowBounds) {\n            this.topRowBounds.rowIndex = topDisplayedRowIndex;\n        }\n\n        this.bottomRowBounds = this.rowModel.getRowBounds(bottomDisplayedRowIndex)!;\n        if (this.bottomRowBounds) {\n            this.bottomRowBounds.rowIndex = bottomDisplayedRowIndex;\n        }\n\n        this.calculatePixelOffset();\n    }\n\n    public getPixelOffset(): number {\n        return this.pixelOffset;\n    }\n\n    private calculatePixelOffset(): void {\n        const value = _exists(this.topRowBounds) ? this.topRowBounds.rowTop : 0;\n\n        if (this.pixelOffset === value) {\n            return;\n        }\n\n        this.pixelOffset = value;\n        // this event is required even when pagination is off\n        this.eventService.dispatchEvent({ type: 'paginationPixelOffsetChanged' });\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport { _setAriaAtomic, _setAriaLive, _setAriaRelevant } from '../utils/aria';\nimport { _clearElement } from '../utils/dom';\nimport { _debounce } from '../utils/function';\n\nexport class AriaAnnouncementService extends BeanStub implements NamedBean {\n    beanName = 'ariaAnnouncementService' as const;\n\n    private eGridDiv: HTMLElement;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.eGridDiv = beans.eGridDiv;\n    }\n\n    private descriptionContainer: HTMLElement | null = null;\n\n    constructor() {\n        super();\n\n        this.announceValue = _debounce(this.announceValue.bind(this), 200);\n    }\n\n    public postConstruct(): void {\n        const eDocument = this.gos.getDocument();\n        const div = (this.descriptionContainer = eDocument.createElement('div'));\n        div.classList.add('ag-aria-description-container');\n\n        _setAriaLive(div, 'polite');\n        _setAriaRelevant(div, 'additions text');\n        _setAriaAtomic(div, true);\n\n        this.eGridDiv.appendChild(div);\n    }\n\n    public announceValue(value: string): void {\n        if (!this.descriptionContainer) {\n            return;\n        }\n        // screen readers announce a change in content, so we set it to an empty value\n        // and then use a setTimeout to force the Screen Reader announcement\n        this.descriptionContainer!.textContent = '';\n        setTimeout(() => {\n            if (this.isAlive() && this.descriptionContainer) {\n                this.descriptionContainer.textContent = value;\n            }\n        }, 50);\n    }\n\n    public override destroy(): void {\n        super.destroy();\n\n        const { descriptionContainer } = this;\n\n        if (descriptionContainer) {\n            _clearElement(descriptionContainer);\n            if (descriptionContainer.parentElement) {\n                descriptionContainer.parentElement.removeChild(descriptionContainer);\n            }\n        }\n        this.descriptionContainer = null;\n        (this.eGridDiv as any) = null;\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { CtrlsService } from '../ctrlsService';\nimport type { GridBodyCtrl } from '../gridBodyComp/gridBodyCtrl';\n\nexport class ColumnAnimationService extends BeanStub implements NamedBean {\n    beanName = 'columnAnimationService' as const;\n\n    private ctrlsService: CtrlsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.ctrlsService = beans.ctrlsService;\n    }\n\n    private gridBodyCtrl: GridBodyCtrl;\n\n    private executeNextFuncs: ((...args: any[]) => any)[] = [];\n    private executeLaterFuncs: ((...args: any[]) => any)[] = [];\n\n    private active = false;\n    private suppressAnimation = false;\n\n    private animationThreadCount = 0;\n\n    public postConstruct(): void {\n        this.ctrlsService.whenReady((p) => (this.gridBodyCtrl = p.gridBodyCtrl));\n    }\n\n    public isActive(): boolean {\n        return this.active && !this.suppressAnimation;\n    }\n\n    public setSuppressAnimation(suppress: boolean): void {\n        this.suppressAnimation = suppress;\n    }\n\n    public start(): void {\n        if (this.active) {\n            return;\n        }\n\n        if (this.gos.get('suppressColumnMoveAnimation')) {\n            return;\n        }\n\n        // if doing RTL, we don't animate open / close as due to how the pixels are inverted,\n        // the animation moves all the row the the right rather than to the left (ie it's the static\n        // columns that actually get their coordinates updated)\n        if (this.gos.get('enableRtl')) {\n            return;\n        }\n\n        this.ensureAnimationCssClassPresent();\n\n        this.active = true;\n    }\n\n    public finish(): void {\n        if (!this.active) {\n            return;\n        }\n        this.flush(() => {\n            this.active = false;\n        });\n    }\n\n    public executeNextVMTurn(func: (...args: any[]) => any): void {\n        if (this.active) {\n            this.executeNextFuncs.push(func);\n        } else {\n            func();\n        }\n    }\n\n    public executeLaterVMTurn(func: (...args: any[]) => any): void {\n        if (this.active) {\n            this.executeLaterFuncs.push(func);\n        } else {\n            func();\n        }\n    }\n\n    private ensureAnimationCssClassPresent(): void {\n        // up the count, so we can tell if someone else has updated the count\n        // by the time the 'wait' func executes\n        this.animationThreadCount++;\n        const animationThreadCountCopy = this.animationThreadCount;\n        this.gridBodyCtrl.setColumnMovingCss(true);\n\n        this.executeLaterFuncs.push(() => {\n            // only remove the class if this thread was the last one to update it\n            if (this.animationThreadCount === animationThreadCountCopy) {\n                this.gridBodyCtrl.setColumnMovingCss(false);\n            }\n        });\n    }\n\n    private flush(callback: () => void): void {\n        if (this.executeNextFuncs.length === 0 && this.executeLaterFuncs.length === 0) {\n            callback();\n            return;\n        }\n\n        const runFuncs = (queue: ((...args: any[]) => any)[]) => {\n            while (queue.length) {\n                const func = queue.pop();\n                if (func) {\n                    func();\n                }\n            }\n        };\n\n        this.getFrameworkOverrides().wrapIncoming(() => {\n            window.setTimeout(() => runFuncs(this.executeNextFuncs), 0);\n            window.setTimeout(() => {\n                // run the callback before executeLaterFuncs\n                // because some functions being executed later\n                // check if this service is `active`.\n                callback();\n                runFuncs(this.executeLaterFuncs);\n            }, 200);\n        });\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { ColumnHoverChangedEvent } from '../events';\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\n\nexport class ColumnHoverService extends BeanStub implements NamedBean {\n    beanName = 'columnHoverService' as const;\n\n    private selectedColumns: AgColumn[] | null;\n\n    public setMouseOver(columns: AgColumn[]): void {\n        this.selectedColumns = columns;\n        const event: WithoutGridCommon<ColumnHoverChangedEvent> = {\n            type: 'columnHoverChanged',\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public clearMouseOver(): void {\n        this.selectedColumns = null;\n        const event: WithoutGridCommon<ColumnHoverChangedEvent> = {\n            type: 'columnHoverChanged',\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public isHovered(column: AgColumn): boolean {\n        return !!this.selectedColumns && this.selectedColumns.indexOf(column) >= 0;\n    }\n}\n", "import type { ColumnModel } from '../../columns/columnModel';\nimport type { UserCompDetails, UserComponentFactory } from '../../components/framework/userComponentFactory';\nimport type { NamedBean } from '../../context/bean';\nimport { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { GridOptions } from '../../entities/gridOptions';\nimport type { IRowModel } from '../../interfaces/iRowModel';\nimport type { OverlayWrapperComponent } from './overlayWrapperComponent';\n\nconst enum OverlayServiceState {\n    Hidden = 0,\n    Loading = 1,\n    NoRows = 2,\n}\n\nexport class OverlayService extends BeanStub implements NamedBean {\n    beanName = 'overlayService' as const;\n\n    private userComponentFactory: UserComponentFactory;\n    private rowModel: IRowModel;\n    private columnModel: ColumnModel;\n\n    private state: OverlayServiceState = OverlayServiceState.Hidden;\n    private showInitialOverlay: boolean = true;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.userComponentFactory = beans.userComponentFactory;\n        this.rowModel = beans.rowModel;\n        this.columnModel = beans.columnModel;\n    }\n\n    private overlayWrapperComp: OverlayWrapperComponent;\n\n    public postConstruct(): void {\n        const updateOverlayVisibility = () => this.updateOverlayVisibility();\n\n        this.addManagedEventListeners({\n            newColumnsLoaded: updateOverlayVisibility,\n            rowDataUpdated: updateOverlayVisibility,\n        });\n\n        this.addManagedPropertyListener('loading', updateOverlayVisibility);\n    }\n\n    public registerOverlayWrapperComp(overlayWrapperComp: OverlayWrapperComponent): void {\n        this.overlayWrapperComp = overlayWrapperComp;\n        this.updateOverlayVisibility();\n    }\n\n    public showLoadingOverlay(): void {\n        this.showInitialOverlay = false;\n\n        const loading = this.gos.get('loading');\n        if (!loading && (loading !== undefined || this.gos.get('suppressLoadingOverlay'))) {\n            return;\n        }\n\n        this.doShowLoadingOverlay();\n    }\n\n    public showNoRowsOverlay(): void {\n        this.showInitialOverlay = false;\n\n        if (this.gos.get('loading') || this.gos.get('suppressNoRowsOverlay')) {\n            return;\n        }\n\n        this.doShowNoRowsOverlay();\n    }\n\n    public hideOverlay(): void {\n        this.showInitialOverlay = false;\n\n        if (this.gos.get('loading')) {\n            return;\n        }\n\n        this.doHideOverlay();\n    }\n\n    private updateOverlayVisibility(): void {\n        let loading = this.gos.get('loading');\n\n        if (this.showInitialOverlay && loading === undefined && !this.gos.get('suppressLoadingOverlay')) {\n            loading =\n                !this.gos.get('columnDefs') ||\n                !this.columnModel.isReady() ||\n                (!this.gos.get('rowData') && this.gos.isRowModelType('clientSide'));\n        }\n\n        if (loading) {\n            if (this.state !== OverlayServiceState.Loading) {\n                this.doShowLoadingOverlay();\n            }\n        } else {\n            this.showInitialOverlay = false;\n            if (\n                this.rowModel.isEmpty() &&\n                !this.gos.get('suppressNoRowsOverlay') &&\n                this.gos.isRowModelType('clientSide')\n            ) {\n                if (this.state !== OverlayServiceState.NoRows) {\n                    this.doShowNoRowsOverlay();\n                }\n            } else if (this.state !== OverlayServiceState.Hidden) {\n                this.doHideOverlay();\n            }\n        }\n    }\n\n    private doShowLoadingOverlay(): void {\n        this.state = OverlayServiceState.Loading;\n        this.showOverlay(\n            this.userComponentFactory.getLoadingOverlayCompDetails({}),\n            'ag-overlay-loading-wrapper',\n            'loadingOverlayComponentParams'\n        );\n    }\n\n    private doShowNoRowsOverlay(): void {\n        this.state = OverlayServiceState.NoRows;\n        this.showOverlay(\n            this.userComponentFactory.getNoRowsOverlayCompDetails({}),\n            'ag-overlay-no-rows-wrapper',\n            'noRowsOverlayComponentParams'\n        );\n    }\n\n    private doHideOverlay(): void {\n        this.state = OverlayServiceState.Hidden;\n        this.overlayWrapperComp.hideOverlay();\n    }\n\n    private showOverlay(compDetails: UserCompDetails, wrapperCssClass: string, gridOption: keyof GridOptions): void {\n        const promise = compDetails.newAgStackInstance();\n        this.overlayWrapperComp.showOverlay(promise, wrapperCssClass, gridOption);\n    }\n}\n", "import type { NamedBean } from '../../context/bean';\nimport { BeanStub } from '../../context/beanStub';\nimport type { BeanCollection } from '../../context/context';\nimport type { RowClassParams } from '../../entities/gridOptions';\nimport type { RowNode } from '../../entities/rowNode';\nimport type { ColumnPinnedType } from '../../interfaces/iColumn';\nimport type { WithoutGridCommon } from '../../interfaces/iCommon';\nimport type { StylingService } from '../../styling/stylingService';\nimport { _pushAll } from '../../utils/array';\nimport { _warnOnce } from '../../utils/function';\nimport { _exists } from '../../utils/generic';\n\nexport interface RowCssClassCalculatorParams {\n    rowNode: RowNode;\n    rowIsEven: boolean;\n    rowLevel: number;\n    fullWidthRow?: boolean;\n    firstRowOnPage: boolean;\n    lastRowOnPage: boolean;\n    printLayout: boolean;\n    expandable: boolean;\n\n    pinned: ColumnPinnedType;\n    extraCssClass?: string;\n    rowFocused?: boolean;\n    fadeRowIn?: boolean;\n}\n\nexport class RowCssClassCalculator extends BeanStub implements NamedBean {\n    beanName = 'rowCssClassCalculator' as const;\n\n    private stylingService: StylingService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.stylingService = beans.stylingService;\n    }\n\n    public getInitialRowClasses(params: RowCssClassCalculatorParams): string[] {\n        const classes: string[] = [];\n\n        if (_exists(params.extraCssClass)) {\n            classes.push(params.extraCssClass);\n        }\n\n        classes.push('ag-row');\n        classes.push(params.rowFocused ? 'ag-row-focus' : 'ag-row-no-focus');\n\n        if (params.fadeRowIn) {\n            classes.push('ag-opacity-zero');\n        }\n\n        classes.push(params.rowIsEven ? 'ag-row-even' : 'ag-row-odd');\n\n        if (params.rowNode.isRowPinned()) {\n            classes.push('ag-row-pinned');\n        }\n\n        if (params.rowNode.isSelected()) {\n            classes.push('ag-row-selected');\n        }\n\n        if (params.rowNode.footer) {\n            classes.push('ag-row-footer');\n        }\n\n        classes.push('ag-row-level-' + params.rowLevel);\n\n        if (params.rowNode.stub) {\n            classes.push('ag-row-loading');\n        }\n\n        if (params.fullWidthRow) {\n            classes.push('ag-full-width-row');\n        }\n\n        if (params.expandable) {\n            classes.push('ag-row-group');\n            classes.push(params.rowNode.expanded ? 'ag-row-group-expanded' : 'ag-row-group-contracted');\n        }\n\n        if (params.rowNode.dragging) {\n            classes.push('ag-row-dragging');\n        }\n\n        _pushAll(classes, this.processClassesFromGridOptions(params.rowNode));\n        _pushAll(classes, this.preProcessRowClassRules(params.rowNode));\n\n        // we use absolute position unless we are doing print layout\n        classes.push(params.printLayout ? 'ag-row-position-relative' : 'ag-row-position-absolute');\n\n        if (params.firstRowOnPage) {\n            classes.push('ag-row-first');\n        }\n\n        if (params.lastRowOnPage) {\n            classes.push('ag-row-last');\n        }\n\n        if (params.fullWidthRow) {\n            if (params.pinned === 'left') {\n                classes.push('ag-cell-last-left-pinned');\n            }\n            if (params.pinned === 'right') {\n                classes.push('ag-cell-first-right-pinned');\n            }\n        }\n\n        return classes;\n    }\n\n    public processClassesFromGridOptions(rowNode: RowNode): string[] {\n        const res: string[] = [];\n\n        const process = (rowCls: string | string[] | undefined) => {\n            if (typeof rowCls === 'string') {\n                res.push(rowCls);\n            } else if (Array.isArray(rowCls)) {\n                rowCls.forEach((e) => res.push(e));\n            }\n        };\n\n        // part 1 - rowClass\n        const rowClass = this.gos.get('rowClass');\n        if (rowClass) {\n            if (typeof rowClass === 'function') {\n                _warnOnce('rowClass should not be a function, please use getRowClass instead');\n                return [];\n            }\n            process(rowClass);\n        }\n\n        // part 2 - rowClassFunc\n        const rowClassFunc = this.gos.getCallback('getRowClass');\n\n        if (rowClassFunc) {\n            const params: WithoutGridCommon<RowClassParams> = {\n                data: rowNode.data,\n                node: rowNode,\n                rowIndex: rowNode.rowIndex!,\n            };\n            const rowClassFuncResult = rowClassFunc(params);\n            process(rowClassFuncResult);\n        }\n\n        return res;\n    }\n\n    private preProcessRowClassRules(rowNode: RowNode): string[] {\n        const res: string[] = [];\n\n        this.processRowClassRules(\n            rowNode,\n            (className: string) => {\n                res.push(className);\n            },\n            () => {\n                // not catered for, if creating, no need\n                // to remove class as it was never there\n            }\n        );\n\n        return res;\n    }\n\n    public processRowClassRules(\n        rowNode: RowNode,\n        onApplicableClass: (className: string) => void,\n        onNotApplicableClass?: (className: string) => void\n    ): void {\n        const rowClassParams: RowClassParams = this.gos.addGridCommonParams({\n            data: rowNode.data,\n            node: rowNode,\n            rowIndex: rowNode.rowIndex!,\n        });\n\n        this.stylingService.processClassRules(\n            undefined,\n            this.gos.get('rowClassRules'),\n            rowClassParams,\n            onApplicableClass,\n            onNotApplicableClass\n        );\n    }\n\n    public calculateRowLevel(rowNode: RowNode): number {\n        if (rowNode.group) {\n            return rowNode.level;\n        }\n\n        // if a leaf, and a parent exists, put a level of the parent, else put level of 0 for top level item\n        return rowNode.parent ? rowNode.parent.level + 1 : 0;\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { CtrlsService } from '../ctrlsService';\nimport { _getMaxDivHeight } from '../utils/browser';\nimport { _log } from '../utils/function';\n\n/**\n * This class solves the 'max height' problem, where the user might want to show more data than\n * the max div height actually allows.\n */\n\nexport class RowContainerHeightService extends BeanStub implements NamedBean {\n    beanName = 'rowContainerHeightService' as const;\n\n    private ctrlsService: CtrlsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.ctrlsService = beans.ctrlsService;\n    }\n\n    private maxDivHeight: number;\n\n    // if false, then stretching is not active, logic in this class is not used,\n    // the pixel height of the row container matches what is actually needed,\n    // no scaling applied.\n    private stretching: boolean;\n\n    private modelHeight: number | null; // how many pixels the model needs\n    private uiContainerHeight: number | null; // how many pixels we actually have\n    private pixelsToShave: number; // the number of pixels we need to shave\n\n    // the number of pixels we add to each rowTop - depends on the scroll position\n    private divStretchOffset: number;\n\n    // the scrollY position\n    private scrollY = 0;\n    // how tall the body is\n    private uiBodyHeight = 0;\n\n    // the max scroll position\n    private maxScrollY: number;\n\n    public postConstruct(): void {\n        this.addManagedEventListeners({ bodyHeightChanged: this.updateOffset.bind(this) });\n        this.maxDivHeight = _getMaxDivHeight();\n        if (this.gos.get('debug')) {\n            _log('RowContainerHeightService - maxDivHeight = ' + this.maxDivHeight);\n        }\n    }\n\n    public isStretching(): boolean {\n        return this.stretching;\n    }\n\n    public getDivStretchOffset(): number {\n        return this.divStretchOffset;\n    }\n\n    public updateOffset(): void {\n        if (!this.stretching) {\n            return;\n        }\n\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const newScrollY = gridBodyCon.getScrollFeature().getVScrollPosition().top;\n        const newBodyHeight = this.getUiBodyHeight();\n\n        const atLeastOneChanged = newScrollY !== this.scrollY || newBodyHeight !== this.uiBodyHeight;\n        if (atLeastOneChanged) {\n            this.scrollY = newScrollY;\n            this.uiBodyHeight = newBodyHeight;\n            this.calculateOffset();\n        }\n    }\n\n    private calculateOffset(): void {\n        this.setUiContainerHeight(this.maxDivHeight);\n        this.pixelsToShave = this.modelHeight! - this.uiContainerHeight!;\n\n        this.maxScrollY = this.uiContainerHeight! - this.uiBodyHeight;\n        const scrollPercent = this.scrollY / this.maxScrollY;\n\n        const divStretchOffset = scrollPercent * this.pixelsToShave;\n\n        if (this.gos.get('debug')) {\n            _log(\n                `RowContainerHeightService - Div Stretch Offset = ${divStretchOffset} (${this.pixelsToShave} * ${scrollPercent})`\n            );\n        }\n\n        this.setDivStretchOffset(divStretchOffset);\n    }\n\n    private setUiContainerHeight(height: number | null): void {\n        if (height !== this.uiContainerHeight) {\n            this.uiContainerHeight = height;\n            this.eventService.dispatchEvent({ type: 'rowContainerHeightChanged' });\n        }\n    }\n\n    private clearOffset(): void {\n        this.setUiContainerHeight(this.modelHeight);\n        this.pixelsToShave = 0;\n        this.setDivStretchOffset(0);\n    }\n\n    private setDivStretchOffset(newOffset: number): void {\n        // because we are talking pixels, no point in confusing things with half numbers\n        const newOffsetFloor = typeof newOffset === 'number' ? Math.floor(newOffset) : null;\n        if (this.divStretchOffset === newOffsetFloor) {\n            return;\n        }\n\n        this.divStretchOffset = newOffsetFloor!;\n        this.eventService.dispatchEvent({ type: 'heightScaleChanged' });\n    }\n\n    public setModelHeight(modelHeight: number | null): void {\n        this.modelHeight = modelHeight;\n        this.stretching =\n            modelHeight != null && // null happens when in print layout\n            this.maxDivHeight > 0 &&\n            modelHeight! > this.maxDivHeight;\n        if (this.stretching) {\n            this.calculateOffset();\n        } else {\n            this.clearOffset();\n        }\n    }\n\n    public getUiContainerHeight(): number | null {\n        return this.uiContainerHeight;\n    }\n\n    public getRealPixelPosition(modelPixel: number): number {\n        return modelPixel - this.divStretchOffset;\n    }\n\n    private getUiBodyHeight(): number {\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const pos = gridBodyCon.getScrollFeature().getVScrollPosition();\n        return pos.bottom - pos.top;\n    }\n\n    public getScrollPositionForPixel(rowTop: number): number {\n        if (this.pixelsToShave <= 0) {\n            return rowTop;\n        }\n\n        const modelMaxScroll = this.modelHeight! - this.getUiBodyHeight();\n        const scrollPercent = rowTop / modelMaxScroll;\n        const scrollPixel = this.maxScrollY * scrollPercent;\n        return scrollPixel;\n    }\n}\n", "import type { ColumnModel } from '../columns/columnModel';\nimport type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { RowNode } from '../entities/rowNode';\nimport type { Column } from '../interfaces/iColumn';\nimport type { IShowRowGroupColsService } from '../interfaces/iShowRowGroupColsService';\nimport { _defaultComparator } from '../utils/generic';\nimport type { ValueService } from '../valueService/valueService';\n\nexport interface SortOption {\n    sort: 'asc' | 'desc';\n    column: Column;\n}\n\nexport interface SortedRowNode {\n    currentPos: number;\n    rowNode: RowNode;\n}\n\n// this logic is used by both SSRM and CSRM\n\nexport class RowNodeSorter extends BeanStub implements NamedBean {\n    beanName = 'rowNodeSorter' as const;\n\n    private valueService: ValueService;\n    private columnModel: ColumnModel;\n    private showRowGroupColsService?: IShowRowGroupColsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.valueService = beans.valueService;\n        this.columnModel = beans.columnModel;\n        this.showRowGroupColsService = beans.showRowGroupColsService;\n    }\n\n    private isAccentedSort: boolean;\n    private primaryColumnsSortGroups: boolean;\n\n    public postConstruct(): void {\n        this.isAccentedSort = this.gos.get('accentedSort');\n        this.primaryColumnsSortGroups = this.gos.isColumnsSortingCoupledToGroup();\n\n        this.addManagedPropertyListener(\n            'accentedSort',\n            (propChange) => (this.isAccentedSort = propChange.currentValue)\n        );\n        this.addManagedPropertyListener(\n            'autoGroupColumnDef',\n            () => (this.primaryColumnsSortGroups = this.gos.isColumnsSortingCoupledToGroup())\n        );\n    }\n\n    public doFullSort(rowNodes: RowNode[], sortOptions: SortOption[]): RowNode[] {\n        const mapper = (rowNode: RowNode, pos: number) => ({ currentPos: pos, rowNode: rowNode });\n        const sortedRowNodes: SortedRowNode[] = rowNodes.map(mapper);\n\n        sortedRowNodes.sort(this.compareRowNodes.bind(this, sortOptions));\n\n        return sortedRowNodes.map((item) => item.rowNode);\n    }\n\n    public compareRowNodes(sortOptions: SortOption[], sortedNodeA: SortedRowNode, sortedNodeB: SortedRowNode): number {\n        const nodeA: RowNode = sortedNodeA.rowNode;\n        const nodeB: RowNode = sortedNodeB.rowNode;\n\n        // Iterate columns, return the first that doesn't match\n        for (let i = 0, len = sortOptions.length; i < len; i++) {\n            const sortOption = sortOptions[i];\n            const isDescending = sortOption.sort === 'desc';\n\n            const valueA: any = this.getValue(nodeA, sortOption.column as AgColumn);\n            const valueB: any = this.getValue(nodeB, sortOption.column as AgColumn);\n\n            let comparatorResult: number;\n            const providedComparator = this.getComparator(sortOption, nodeA);\n            if (providedComparator) {\n                //if comparator provided, use it\n                comparatorResult = providedComparator(valueA, valueB, nodeA, nodeB, isDescending);\n            } else {\n                //otherwise do our own comparison\n                comparatorResult = _defaultComparator(valueA, valueB, this.isAccentedSort);\n            }\n\n            // user provided comparators can return 'NaN' if they don't correctly handle 'undefined' values, this\n            // typically occurs when the comparator is used on a group row\n            const validResult = !isNaN(comparatorResult);\n\n            if (validResult && comparatorResult !== 0) {\n                return sortOption.sort === 'asc' ? comparatorResult : comparatorResult * -1;\n            }\n        }\n        // All matched, we make is so that the original sort order is kept:\n        return sortedNodeA.currentPos - sortedNodeB.currentPos;\n    }\n\n    private getComparator(\n        sortOption: SortOption,\n        rowNode: RowNode\n    ): ((valueA: any, valueB: any, nodeA: RowNode, nodeB: RowNode, isDescending: boolean) => number) | undefined {\n        const column = sortOption.column;\n\n        // comparator on col get preference over everything else\n        const comparatorOnCol = column.getColDef().comparator;\n        if (comparatorOnCol != null) {\n            return comparatorOnCol;\n        }\n\n        if (!column.getColDef().showRowGroup) {\n            return;\n        }\n\n        // if a 'field' is supplied on the autoGroupColumnDef we need to use the associated column comparator\n        const groupLeafField = !rowNode.group && column.getColDef().field;\n        if (!groupLeafField) {\n            return;\n        }\n\n        const primaryColumn = this.columnModel.getColDefCol(groupLeafField);\n        if (!primaryColumn) {\n            return;\n        }\n\n        return primaryColumn.getColDef().comparator;\n    }\n\n    private getValue(node: RowNode, column: AgColumn): any {\n        if (!this.primaryColumnsSortGroups) {\n            return this.valueService.getValue(column, node, false, false);\n        }\n\n        const isNodeGroupedAtLevel = node.rowGroupColumn === column;\n        if (isNodeGroupedAtLevel) {\n            const isGroupRows = this.gos.isGroupUseEntireRow(this.columnModel.isPivotActive());\n            // because they're group rows, no display cols exist, so groupData never populated.\n            // instead delegate to getting value from leaf child.\n            if (isGroupRows) {\n                const leafChild = node.allLeafChildren?.[0];\n                if (leafChild) {\n                    return this.valueService.getValue(column, leafChild, false, false);\n                }\n                return undefined;\n            }\n\n            const displayCol = this.showRowGroupColsService?.getShowRowGroupCol(column.getId());\n            if (!displayCol) {\n                return undefined;\n            }\n            return node.groupData?.[displayCol.getId()];\n        }\n\n        if (node.group && column.getColDef().showRowGroup) {\n            return undefined;\n        }\n\n        return this.valueService.getValue(column, node, false, false);\n    }\n}\n", "import type { AgColumn } from '../entities/agColumn';\nimport type { RowNode } from '../entities/rowNode';\n\n// the class below contains a tree of row nodes. each node is\n// represented by a PathItem\ninterface PathItem {\n    rowNode: RowNode; // the node this item points to\n    children: PathItem[] | null; // children of this node - will be a subset of all the nodes children\n}\n\n// when doing transactions, or change detection, and grouping is present\n// in the data, there is no need for the ClientSideRowModel to update each\n// group after an update, ony parts that were impacted by the change.\n// this class keeps track of all groups that were impacted by a transaction.\n// the the different CSRM operations (filter, sort etc) use the forEach method\n// to visit each group that was changed.\nexport class ChangedPath {\n    // we keep columns when doing changed detection after user edits.\n    // when a user edits, we only need to re-aggregate the column\n    // that was edited.\n    private readonly keepingColumns: boolean;\n\n    // the root path always points to RootNode, and RootNode\n    // is always in the changed path. over time, we add items to\n    // the path, but this stays as the root. when the changed path\n    // is ready, this will be the root of the tree of RowNodes that\n    // need to be refreshed (all the row nodes that were impacted by\n    // the transaction).\n    private readonly pathRoot: PathItem;\n\n    // whether changed path is active of not. it is active when a) doing\n    // a transaction update or b) doing change detection. if we are doing\n    // a CSRM refresh for other reasons (after sort or filter, or user calling\n    // setRowData() without delta mode) then we are not active. we are also\n    // marked as not active if secondary columns change in pivot (as this impacts\n    // aggregations)\n    private active = true;\n\n    // for each node in the change path, we also store which columns need\n    // to be re-aggregated.\n    private nodeIdsToColumns: { [nodeId: string]: { [colId: string]: boolean } } = {};\n\n    // for quick lookup, all items in the change path are mapped by nodeId\n    private mapToItems: { [id: string]: PathItem } = {};\n\n    public constructor(keepingColumns: boolean, rootNode: RowNode) {\n        this.keepingColumns = keepingColumns;\n\n        this.pathRoot = {\n            rowNode: rootNode,\n            children: null,\n        };\n        this.mapToItems[rootNode.id!] = this.pathRoot;\n    }\n\n    // can be set inactive by:\n    // a) ClientSideRowModel, if no transactions or\n    // b) PivotService, if secondary columns changed\n    public setInactive(): void {\n        this.active = false;\n    }\n\n    public isActive(): boolean {\n        return this.active;\n    }\n\n    private depthFirstSearchChangedPath(pathItem: PathItem, callback: (rowNode: RowNode) => void): void {\n        if (pathItem.children) {\n            for (let i = 0; i < pathItem.children.length; i++) {\n                this.depthFirstSearchChangedPath(pathItem.children[i], callback);\n            }\n        }\n        callback(pathItem.rowNode);\n    }\n\n    private depthFirstSearchEverything(\n        rowNode: RowNode,\n        callback: (rowNode: RowNode) => void,\n        traverseEverything: boolean\n    ): void {\n        if (rowNode.childrenAfterGroup) {\n            for (let i = 0; i < rowNode.childrenAfterGroup.length; i++) {\n                const childNode = rowNode.childrenAfterGroup[i];\n                if (childNode.childrenAfterGroup) {\n                    this.depthFirstSearchEverything(rowNode.childrenAfterGroup[i], callback, traverseEverything);\n                } else if (traverseEverything) {\n                    callback(childNode);\n                }\n            }\n        }\n        callback(rowNode);\n    }\n\n    // traverseLeafNodes -> used when NOT doing changed path, ie traversing everything. the callback\n    // will be called for child nodes in addition to parent nodes.\n    public forEachChangedNodeDepthFirst(\n        callback: (rowNode: RowNode) => void,\n        traverseLeafNodes = false,\n        includeUnchangedNodes = false\n    ): void {\n        if (this.active && !includeUnchangedNodes) {\n            // if we are active, then use the change path to callback\n            // only for updated groups\n            this.depthFirstSearchChangedPath(this.pathRoot, callback);\n        } else {\n            // we are not active, so callback for everything, walk the entire path\n            this.depthFirstSearchEverything(this.pathRoot.rowNode, callback, traverseLeafNodes);\n        }\n    }\n\n    public executeFromRootNode(callback: (rowNode: RowNode) => void) {\n        callback(this.pathRoot.rowNode);\n    }\n\n    private createPathItems(rowNode: RowNode): number {\n        let pointer = rowNode;\n        let newEntryCount = 0;\n        while (!this.mapToItems[pointer.id!]) {\n            const newEntry: PathItem = {\n                rowNode: pointer,\n                children: null,\n            };\n            this.mapToItems[pointer.id!] = newEntry;\n            newEntryCount++;\n            pointer = pointer.parent!;\n        }\n        return newEntryCount;\n    }\n\n    private populateColumnsMap(rowNode: RowNode, columns: AgColumn[]): void {\n        if (!this.keepingColumns || !columns) {\n            return;\n        }\n\n        let pointer = rowNode;\n        while (pointer) {\n            // if columns, add the columns in all the way to parent, merging\n            // in any other columns that might be there already\n            if (!this.nodeIdsToColumns[pointer.id!]) {\n                this.nodeIdsToColumns[pointer.id!] = {};\n            }\n            columns.forEach((col) => (this.nodeIdsToColumns[pointer.id!][col.getId()] = true));\n            pointer = pointer.parent!;\n        }\n    }\n\n    private linkPathItems(rowNode: RowNode, newEntryCount: number): void {\n        let pointer = rowNode;\n        for (let i = 0; i < newEntryCount; i++) {\n            const thisItem = this.mapToItems[pointer.id!];\n            const parentItem = this.mapToItems[pointer.parent!.id!];\n            if (!parentItem.children) {\n                parentItem.children = [];\n            }\n            parentItem.children.push(thisItem);\n            pointer = pointer.parent!;\n        }\n    }\n\n    // called by\n    // 1) change detection (provides cols) and\n    // 2) groupStage if doing transaction update (doesn't provide cols)\n    public addParentNode(rowNode: RowNode | null, columns?: AgColumn[]): void {\n        if (!rowNode || rowNode.isRowPinned()) {\n            return;\n        }\n\n        // we cannot do  both steps below in the same loop as\n        // the second loop has a dependency on the first loop.\n        // ie the hierarchy cannot be stitched up yet because\n        // we don't have it built yet\n\n        // create the new PathItem objects.\n        const newEntryCount = this.createPathItems(rowNode);\n\n        // link in the node items\n        this.linkPathItems(rowNode, newEntryCount);\n\n        // update columns\n        this.populateColumnsMap(rowNode, columns!);\n    }\n\n    public canSkip(rowNode: RowNode): boolean {\n        return this.active && !this.mapToItems[rowNode.id!];\n    }\n\n    public getValueColumnsForNode(rowNode: RowNode, valueColumns: AgColumn[]): AgColumn[] {\n        if (!this.keepingColumns) {\n            return valueColumns;\n        }\n\n        const colsForThisNode = this.nodeIdsToColumns[rowNode.id!];\n        const result = valueColumns.filter((col) => colsForThisNode[col.getId()]);\n        return result;\n    }\n\n    public getNotValueColumnsForNode(rowNode: RowNode, valueColumns: AgColumn[]): AgColumn[] | null {\n        if (!this.keepingColumns) {\n            return null;\n        }\n\n        const colsForThisNode = this.nodeIdsToColumns[rowNode.id!];\n        const result = valueColumns.filter((col) => !colsForThisNode[col.getId()]);\n        return result;\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { RowNode } from '../entities/rowNode';\nimport type { SelectionChangedEvent, SelectionEventSourceType } from '../events';\nimport { isSelectionUIEvent } from '../events';\nimport type { IClientSideRowModel } from '../interfaces/iClientSideRowModel';\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\nimport type { IRowModel } from '../interfaces/iRowModel';\nimport type { ISelectionService, ISetNodesSelectedParams } from '../interfaces/iSelectionService';\nimport type { ServerSideRowGroupSelectionState, ServerSideRowSelectionState } from '../interfaces/selectionState';\nimport type { PageBoundsService } from '../pagination/pageBoundsService';\nimport { _last } from '../utils/array';\nimport { ChangedPath } from '../utils/changedPath';\nimport { _errorOnce, _warnOnce } from '../utils/function';\nimport { _exists, _missing } from '../utils/generic';\nimport { RowRangeSelectionContext } from './rowRangeSelectionContext';\n\nexport class SelectionService extends BeanStub implements NamedBean, ISelectionService {\n    beanName = 'selectionService' as const;\n\n    private rowModel: IRowModel;\n    private pageBoundsService: PageBoundsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.rowModel = beans.rowModel;\n        this.pageBoundsService = beans.pageBoundsService;\n    }\n\n    private selectedNodes: Map<string, RowNode> = new Map();\n    private selectionCtx: RowRangeSelectionContext = new RowRangeSelectionContext();\n\n    private groupSelectsChildren: boolean;\n    private rowSelection?: 'single' | 'multiple';\n\n    public postConstruct(): void {\n        this.selectionCtx.init(this.rowModel);\n        this.rowSelection = this.gos.get('rowSelection');\n        this.groupSelectsChildren = this.gos.get('groupSelectsChildren');\n        this.addManagedPropertyListeners(['groupSelectsChildren', 'rowSelection'], () => {\n            this.groupSelectsChildren = this.gos.get('groupSelectsChildren');\n            this.rowSelection = this.gos.get('rowSelection');\n            this.deselectAllRowNodes({ source: 'api' });\n        });\n\n        this.addManagedEventListeners({ rowSelected: this.onRowSelected.bind(this) });\n    }\n\n    public override destroy(): void {\n        super.destroy();\n        this.resetNodes();\n        this.selectionCtx.reset();\n    }\n\n    private isMultiselect() {\n        return this.rowSelection === 'multiple';\n    }\n\n    /**\n     * We override the selection value for UI-triggered events because it's the\n     * current selection state that should determine the next selection state. This\n     * is a stepping stone towards removing selection logic from event listeners and\n     * other code external to the selection service(s).\n     */\n    private overrideSelectionValue(newValue: boolean, source: SelectionEventSourceType): boolean {\n        if (!isSelectionUIEvent(source)) {\n            return newValue;\n        }\n\n        const root = this.selectionCtx.getRoot();\n\n        return root ? root.isSelected() ?? false : true;\n    }\n\n    public setNodesSelected(params: ISetNodesSelectedParams): number {\n        const { newValue, clearSelection, suppressFinishActions, rangeSelect, nodes, event, source } = params;\n\n        if (nodes.length === 0) return 0;\n\n        if (nodes.length > 1 && !this.isMultiselect()) {\n            _warnOnce(`cannot multi select while rowSelection='single'`);\n            return 0;\n        }\n\n        // groupSelectsFiltered only makes sense when group selects children\n        const groupSelectsFiltered = this.groupSelectsChildren && params.groupSelectsFiltered === true;\n\n        // if node is a footer, we don't do selection, just pass the info\n        // to the sibling (the parent of the group)\n        const filteredNodes = nodes.map((node) => (node.footer ? node.sibling! : node));\n\n        if (rangeSelect) {\n            if (filteredNodes.length > 1) {\n                _warnOnce('cannot range select while selecting multiple rows');\n                return 0;\n            }\n\n            const node = filteredNodes[0];\n            const newSelectionValue = this.overrideSelectionValue(newValue, source);\n\n            if (this.selectionCtx.isInRange(node)) {\n                const partition = this.selectionCtx.truncate(node);\n\n                // When we are selecting a range, we may need to de-select part of the previously\n                // selected range (see AG-9620)\n                // When we are de-selecting a range, we can/should leave the other nodes unchanged\n                // (i.e. selected nodes outside the current range should remain selected - see AG-10215)\n                if (newSelectionValue) {\n                    this.selectRange(partition.discard, false, source);\n                }\n                return this.selectRange(partition.keep, newSelectionValue, source);\n            } else {\n                const fromNode = this.selectionCtx.getRoot();\n                const toNode = node;\n                if (fromNode !== toNode) {\n                    const partition = this.selectionCtx.extend(node, this.groupSelectsChildren);\n                    if (newSelectionValue) {\n                        this.selectRange(partition.discard, false, source);\n                    }\n                    return this.selectRange(partition.keep, newSelectionValue, source);\n                }\n            }\n        }\n\n        // Avoid re-setting here because if `suppressFinishActions` is true then this\n        // call is not a result of a user action, but rather a follow-on call (e.g\n        // in this.clearOtherNodes).\n        if (!suppressFinishActions) {\n            this.selectionCtx.setRoot(filteredNodes[0]);\n        }\n\n        let updatedCount = 0;\n        for (let i = 0; i < filteredNodes.length; i++) {\n            const node = filteredNodes[i];\n            // when groupSelectsFiltered, then this node may end up indeterminate despite\n            // trying to set it to true / false. this group will be calculated further on\n            // down when we call updateGroupsFromChildrenSelections(). we need to skip it\n            // here, otherwise the updatedCount would include it.\n            const skipThisNode = groupSelectsFiltered && node.group;\n\n            if (!skipThisNode) {\n                const thisNodeWasSelected = node.selectThisNode(newValue, event, source);\n                if (thisNodeWasSelected) {\n                    updatedCount++;\n                }\n            }\n\n            if (this.groupSelectsChildren && node.childrenAfterGroup?.length) {\n                updatedCount += this.selectChildren(node, newValue, groupSelectsFiltered, source);\n            }\n        }\n\n        // clear other nodes if not doing multi select\n        if (!suppressFinishActions) {\n            const clearOtherNodes = newValue && (clearSelection || !this.isMultiselect());\n            if (clearOtherNodes) {\n                updatedCount += this.clearOtherNodes(filteredNodes[0], source);\n            }\n\n            // only if we selected something, then update groups and fire events\n            if (updatedCount > 0) {\n                this.updateGroupsFromChildrenSelections(source);\n\n                // this is the very end of the 'action node', so we are finished all the updates,\n                // include any parent / child changes that this method caused\n                this.dispatchSelectionChanged(source);\n            }\n        }\n        return updatedCount;\n    }\n\n    // not to be mixed up with 'cell range selection' where you drag the mouse, this is row range selection, by\n    // holding down 'shift'.\n    private selectRange(nodesToSelect: RowNode[], value: boolean, source: SelectionEventSourceType): number {\n        let updatedCount = 0;\n\n        nodesToSelect.forEach((rowNode) => {\n            if (rowNode.group && this.groupSelectsChildren) {\n                return;\n            }\n\n            const nodeWasSelected = rowNode.selectThisNode(value, undefined, source);\n            if (nodeWasSelected) {\n                updatedCount++;\n            }\n        });\n\n        if (updatedCount > 0) {\n            this.updateGroupsFromChildrenSelections(source);\n\n            this.dispatchSelectionChanged(source);\n        }\n\n        return updatedCount;\n    }\n\n    private selectChildren(\n        node: RowNode,\n        newValue: boolean,\n        groupSelectsFiltered: boolean,\n        source: SelectionEventSourceType\n    ): number {\n        const children = groupSelectsFiltered ? node.childrenAfterAggFilter : node.childrenAfterGroup;\n\n        if (_missing(children)) {\n            return 0;\n        }\n\n        return this.setNodesSelected({\n            newValue: newValue,\n            clearSelection: false,\n            suppressFinishActions: true,\n            groupSelectsFiltered,\n            source,\n            nodes: children,\n        });\n    }\n\n    public getSelectedNodes() {\n        const selectedNodes: RowNode[] = [];\n        this.selectedNodes.forEach((rowNode: RowNode) => {\n            if (rowNode) {\n                selectedNodes.push(rowNode);\n            }\n        });\n        return selectedNodes;\n    }\n\n    public getSelectedRows() {\n        const selectedRows: any[] = [];\n\n        this.selectedNodes.forEach((rowNode: RowNode) => {\n            if (rowNode && rowNode.data) {\n                selectedRows.push(rowNode.data);\n            }\n        });\n        return selectedRows;\n    }\n\n    public getSelectionCount(): number {\n        return this.selectedNodes.size;\n    }\n\n    /**\n     * This method is used by the CSRM to remove groups which are being disposed of,\n     * events do not need fired in this case\n     */\n    public filterFromSelection(predicate: (node: RowNode) => boolean): void {\n        const newSelectedNodes: Map<string, RowNode> = new Map();\n        this.selectedNodes.forEach((rowNode: RowNode, key: string) => {\n            const passesPredicate = rowNode && predicate(rowNode);\n            if (passesPredicate) {\n                newSelectedNodes.set(key, rowNode);\n            }\n        });\n        this.selectedNodes = newSelectedNodes;\n    }\n\n    // should only be called if groupSelectsChildren=true\n    public updateGroupsFromChildrenSelections(source: SelectionEventSourceType, changedPath?: ChangedPath): boolean {\n        // we only do this when group selection state depends on selected children\n        if (!this.groupSelectsChildren) {\n            return false;\n        }\n        // also only do it if CSRM (code should never allow this anyway)\n        if (this.rowModel.getType() !== 'clientSide') {\n            return false;\n        }\n\n        const clientSideRowModel = this.rowModel as IClientSideRowModel;\n        const rootNode = clientSideRowModel.getRootNode();\n\n        if (!changedPath) {\n            changedPath = new ChangedPath(true, rootNode);\n            changedPath.setInactive();\n        }\n\n        let selectionChanged = false;\n\n        changedPath.forEachChangedNodeDepthFirst((rowNode) => {\n            if (rowNode !== rootNode) {\n                const selected = rowNode.calculateSelectedFromChildren();\n                selectionChanged =\n                    rowNode.selectThisNode(selected === null ? false : selected, undefined, source) || selectionChanged;\n            }\n        });\n\n        return selectionChanged;\n    }\n\n    public clearOtherNodes(rowNodeToKeepSelected: RowNode, source: SelectionEventSourceType): number {\n        const groupsToRefresh: Map<string, RowNode> = new Map();\n        let updatedCount = 0;\n        this.selectedNodes.forEach((otherRowNode: RowNode) => {\n            if (otherRowNode && otherRowNode.id !== rowNodeToKeepSelected.id) {\n                const rowNode = this.selectedNodes.get(otherRowNode.id!);\n                updatedCount += rowNode!.setSelectedParams({\n                    newValue: false,\n                    clearSelection: false,\n                    suppressFinishActions: true,\n                    source,\n                });\n\n                if (this.groupSelectsChildren && otherRowNode.parent) {\n                    groupsToRefresh.set(otherRowNode.parent.id!, otherRowNode.parent);\n                }\n            }\n        });\n\n        groupsToRefresh.forEach((group: RowNode) => {\n            const selected = group.calculateSelectedFromChildren();\n            group.selectThisNode(selected === null ? false : selected, undefined, source);\n        });\n\n        return updatedCount;\n    }\n\n    private onRowSelected(event: any): void {\n        const rowNode = event.node;\n\n        // we do not store the group rows when the groups select children\n        if (this.groupSelectsChildren && rowNode.group) {\n            return;\n        }\n\n        if (rowNode.isSelected()) {\n            this.selectedNodes.set(rowNode.id, rowNode);\n        } else {\n            this.selectedNodes.delete(rowNode.id);\n        }\n    }\n\n    public syncInRowNode(rowNode: RowNode, oldNode: RowNode | null): void {\n        this.syncInOldRowNode(rowNode, oldNode);\n        this.syncInNewRowNode(rowNode);\n    }\n\n    // if the id has changed for the node, then this means the rowNode\n    // is getting used for a different data item, which breaks\n    // our selectedNodes, as the node now is mapped by the old id\n    // which is inconsistent. so to keep the old node as selected,\n    // we swap in the clone (with the old id and old data). this means\n    // the oldNode is effectively a daemon we keep a reference to,\n    // so if client calls api.getSelectedNodes(), it gets the daemon\n    // in the result. when the client un-selects, the reference to the\n    // daemon is removed. the daemon, because it's an oldNode, is not\n    // used by the grid for rendering, it's a copy of what the node used\n    // to be like before the id was changed.\n    private syncInOldRowNode(rowNode: RowNode, oldNode: RowNode | null): void {\n        const oldNodeHasDifferentId = _exists(oldNode) && rowNode.id !== oldNode.id;\n        if (oldNodeHasDifferentId && oldNode) {\n            const id = oldNode.id!;\n            const oldNodeSelected = this.selectedNodes.get(id) == rowNode;\n            if (oldNodeSelected) {\n                this.selectedNodes.set(oldNode.id!, oldNode);\n            }\n        }\n    }\n\n    private syncInNewRowNode(rowNode: RowNode): void {\n        if (this.selectedNodes.has(rowNode.id!)) {\n            rowNode.setSelectedInitialValue(true);\n            this.selectedNodes.set(rowNode.id!, rowNode);\n        } else {\n            rowNode.setSelectedInitialValue(false);\n        }\n    }\n\n    public reset(source: SelectionEventSourceType): void {\n        const selectionCount = this.getSelectionCount();\n        this.resetNodes();\n        if (selectionCount) {\n            this.dispatchSelectionChanged(source);\n        }\n    }\n\n    private resetNodes(): void {\n        this.selectedNodes?.clear();\n    }\n\n    // returns a list of all nodes at 'best cost' - a feature to be used\n    // with groups / trees. if a group has all it's children selected,\n    // then the group appears in the result, but not the children.\n    // Designed for use with 'children' as the group selection type,\n    // where groups don't actually appear in the selection normally.\n    public getBestCostNodeSelection(): RowNode[] | undefined {\n        if (this.rowModel.getType() !== 'clientSide') {\n            // Error logged as part of gridApi as that is only call point for this method.\n            return;\n        }\n\n        const clientSideRowModel = this.rowModel as IClientSideRowModel;\n\n        const topLevelNodes = clientSideRowModel.getTopLevelNodes();\n\n        if (topLevelNodes === null) {\n            return;\n        }\n\n        const result: RowNode[] = [];\n\n        // recursive function, to find the selected nodes\n        function traverse(nodes: RowNode[]) {\n            for (let i = 0, l = nodes.length; i < l; i++) {\n                const node = nodes[i];\n                if (node.isSelected()) {\n                    result.push(node);\n                } else {\n                    // if not selected, then if it's a group, and the group\n                    // has children, continue to search for selections\n                    const maybeGroup = node as any;\n                    if (maybeGroup.group && maybeGroup.children) {\n                        traverse(maybeGroup.children);\n                    }\n                }\n            }\n        }\n\n        traverse(topLevelNodes);\n\n        return result;\n    }\n\n    public isEmpty(): boolean {\n        let count = 0;\n        this.selectedNodes.forEach((rowNode: RowNode) => {\n            if (rowNode) {\n                count++;\n            }\n        });\n        return count === 0;\n    }\n\n    public deselectAllRowNodes(params: {\n        source: SelectionEventSourceType;\n        justFiltered?: boolean;\n        justCurrentPage?: boolean;\n    }) {\n        const callback = (rowNode: RowNode) => rowNode.selectThisNode(false, undefined, source);\n        const rowModelClientSide = this.rowModel.getType() === 'clientSide';\n\n        const { source, justFiltered, justCurrentPage } = params;\n\n        if (justCurrentPage || justFiltered) {\n            if (!rowModelClientSide) {\n                _errorOnce(\"selecting just filtered only works when gridOptions.rowModelType='clientSide'\");\n                return;\n            }\n            this.getNodesToSelect(justFiltered, justCurrentPage).forEach(callback);\n        } else {\n            this.selectedNodes.forEach((rowNode: RowNode) => {\n                // remember the reference can be to null, as we never 'delete' from the map\n                if (rowNode) {\n                    callback(rowNode);\n                }\n            });\n            // this clears down the map (whereas above only sets the items in map to 'undefined')\n            this.reset(source);\n        }\n\n        this.selectionCtx.reset();\n\n        // the above does not clean up the parent rows if they are selected\n        if (rowModelClientSide && this.groupSelectsChildren) {\n            this.updateGroupsFromChildrenSelections(source);\n        }\n\n        this.dispatchSelectionChanged(source);\n    }\n\n    private getSelectedCounts(\n        justFiltered?: boolean | undefined,\n        justCurrentPage?: boolean | undefined\n    ): {\n        selectedCount: number;\n        notSelectedCount: number;\n    } {\n        let selectedCount = 0;\n        let notSelectedCount = 0;\n\n        const callback = (node: RowNode) => {\n            if (this.groupSelectsChildren && node.group) {\n                return;\n            }\n\n            if (node.isSelected()) {\n                selectedCount++;\n            } else if (!node.selectable) {\n                // don't count non-selectable nodes!\n            } else {\n                notSelectedCount++;\n            }\n        };\n\n        this.getNodesToSelect(justFiltered, justCurrentPage).forEach(callback);\n        return { selectedCount, notSelectedCount };\n    }\n\n    public getSelectAllState(\n        justFiltered?: boolean | undefined,\n        justCurrentPage?: boolean | undefined\n    ): boolean | null {\n        const { selectedCount, notSelectedCount } = this.getSelectedCounts(justFiltered, justCurrentPage);\n        // if no rows, always have it unselected\n        if (selectedCount === 0 && notSelectedCount === 0) {\n            return false;\n        }\n\n        // if mix of selected and unselected, this is indeterminate\n        if (selectedCount > 0 && notSelectedCount > 0) {\n            return null;\n        }\n\n        // only selected\n        return selectedCount > 0;\n    }\n\n    public hasNodesToSelect(justFiltered = false, justCurrentPage = false) {\n        return this.getNodesToSelect(justFiltered, justCurrentPage).filter((node) => node.selectable).length > 0;\n    }\n\n    /**\n     * @param justFiltered whether to just include nodes which have passed the filter\n     * @param justCurrentPage whether to just include nodes on the current page\n     * @returns all nodes including unselectable nodes which are the target of this selection attempt\n     */\n    private getNodesToSelect(justFiltered = false, justCurrentPage = false) {\n        if (this.rowModel.getType() !== 'clientSide') {\n            throw new Error(\n                `selectAll only available when rowModelType='clientSide', ie not ${this.rowModel.getType()}`\n            );\n        }\n\n        const nodes: RowNode[] = [];\n        if (justCurrentPage) {\n            this.forEachNodeOnPage((node) => {\n                if (!node.group) {\n                    nodes.push(node);\n                    return;\n                }\n\n                if (!node.expanded) {\n                    // even with groupSelectsChildren, do this recursively as only the filtered children\n                    // are considered as the current page\n                    const recursivelyAddChildren = (child: RowNode) => {\n                        nodes.push(child);\n                        if (child.childrenAfterFilter?.length) {\n                            child.childrenAfterFilter.forEach(recursivelyAddChildren);\n                        }\n                    };\n                    recursivelyAddChildren(node);\n                    return;\n                }\n\n                // if the group node is expanded, the pagination proxy will include the visible nodes to select\n                if (!this.groupSelectsChildren) {\n                    nodes.push(node);\n                }\n            });\n            return nodes;\n        }\n\n        const clientSideRowModel = this.rowModel as IClientSideRowModel;\n        if (justFiltered) {\n            clientSideRowModel.forEachNodeAfterFilter((node) => {\n                nodes.push(node);\n            });\n            return nodes;\n        }\n\n        clientSideRowModel.forEachNode((node) => {\n            nodes.push(node);\n        });\n        return nodes;\n    }\n\n    private forEachNodeOnPage(callback: (rowNode: RowNode) => void) {\n        const firstRow = this.pageBoundsService.getFirstRow();\n        const lastRow = this.pageBoundsService.getLastRow();\n        for (let i = firstRow; i <= lastRow; i++) {\n            const node = this.rowModel.getRow(i);\n            if (node) {\n                callback(node);\n            }\n        }\n    }\n\n    public selectAllRowNodes(params: {\n        source: SelectionEventSourceType;\n        justFiltered?: boolean;\n        justCurrentPage?: boolean;\n    }) {\n        if (this.rowModel.getType() !== 'clientSide') {\n            throw new Error(\n                `selectAll only available when rowModelType='clientSide', ie not ${this.rowModel.getType()}`\n            );\n        }\n\n        const { source, justFiltered, justCurrentPage } = params;\n\n        const nodes = this.getNodesToSelect(justFiltered, justCurrentPage);\n        nodes.forEach((rowNode) => rowNode.selectThisNode(true, undefined, source));\n\n        this.selectionCtx.setRoot(nodes[0] ?? null);\n        this.selectionCtx.setEndRange(_last(nodes) ?? null);\n\n        // the above does not clean up the parent rows if they are selected\n        if (this.rowModel.getType() === 'clientSide' && this.groupSelectsChildren) {\n            this.updateGroupsFromChildrenSelections(source);\n        }\n\n        this.dispatchSelectionChanged(source);\n    }\n\n    public getSelectionState(): string[] | null {\n        const selectedIds: string[] = [];\n        this.selectedNodes.forEach((node) => {\n            if (node?.id) {\n                selectedIds.push(node.id);\n            }\n        });\n        return selectedIds.length ? selectedIds : null;\n    }\n\n    public setSelectionState(\n        state: string[] | ServerSideRowSelectionState | ServerSideRowGroupSelectionState,\n        source: SelectionEventSourceType\n    ): void {\n        if (!Array.isArray(state)) {\n            return;\n        }\n        const rowIds = new Set(state);\n        const nodes: RowNode[] = [];\n        this.rowModel.forEachNode((node) => {\n            if (rowIds.has(node.id!)) {\n                nodes.push(node);\n            }\n        });\n        this.setNodesSelected({\n            newValue: true,\n            nodes,\n            source,\n        });\n    }\n\n    private dispatchSelectionChanged(source: SelectionEventSourceType): void {\n        const event: WithoutGridCommon<SelectionChangedEvent> = {\n            type: 'selectionChanged',\n            source,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { RowNode } from '../entities/rowNode';\nimport type { IClientSideRowModel } from '../interfaces/iClientSideRowModel';\nimport type { IRowModel } from '../interfaces/iRowModel';\nimport type { ISelectionService } from '../interfaces/iSelectionService';\nimport { SelectionService } from '../selection/selectionService';\nimport { ChangedPath } from '../utils/changedPath';\n\nexport class SelectableService extends BeanStub implements NamedBean {\n    beanName = 'selectableService' as const;\n\n    private rowModel: IRowModel;\n    private selectionService: ISelectionService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.rowModel = beans.rowModel;\n        this.selectionService = beans.selectionService;\n    }\n\n    public postConstruct() {\n        this.addManagedPropertyListener('isRowSelectable', () => this.updateSelectable());\n    }\n\n    /**\n     * Used by CSRM only, to update selectable state after group state changes.\n     */\n    public updateSelectableAfterGrouping(): void {\n        this.updateSelectable(true);\n    }\n\n    private updateSelectable(skipLeafNodes = false) {\n        const isRowSelecting = !!this.gos.get('rowSelection');\n        const isRowSelectable = this.gos.get('isRowSelectable');\n\n        if (!isRowSelecting || !isRowSelectable) {\n            return;\n        }\n\n        const isGroupSelectsChildren = this.gos.get('groupSelectsChildren');\n\n        const isCsrmGroupSelectsChildren = this.rowModel.getType() === 'clientSide' && isGroupSelectsChildren;\n\n        const nodesToDeselect: RowNode[] = [];\n\n        const nodeCallback = (node: RowNode) => {\n            if (skipLeafNodes && !node.group) {\n                return;\n            }\n\n            // Only in the CSRM, we allow group node selection if a child has a selectable=true when using groupSelectsChildren\n            if (isCsrmGroupSelectsChildren && node.group) {\n                const hasSelectableChild = node.childrenAfterGroup!.some((rowNode) => rowNode.selectable === true);\n                node.setRowSelectable(hasSelectableChild, true);\n                return;\n            }\n\n            const rowSelectable = isRowSelectable ? isRowSelectable(node) : true;\n            node.setRowSelectable(rowSelectable, true);\n\n            if (!rowSelectable && node.isSelected()) {\n                nodesToDeselect.push(node);\n            }\n        };\n\n        // Needs to be depth first in this case, so that parents can be updated based on child.\n        if (isCsrmGroupSelectsChildren) {\n            const csrm = this.rowModel as IClientSideRowModel;\n            const changedPath = new ChangedPath(false, csrm.getRootNode());\n            changedPath.forEachChangedNodeDepthFirst(nodeCallback, true, true);\n        } else {\n            // Normal case, update all rows\n            this.rowModel.forEachNode(nodeCallback);\n        }\n\n        if (nodesToDeselect.length) {\n            this.selectionService.setNodesSelected({\n                nodes: nodesToDeselect,\n                newValue: false,\n                source: 'selectableChanged',\n            });\n        }\n\n        // if csrm and group selects children, update the groups after deselecting leaf nodes.\n        if (isCsrmGroupSelectsChildren && this.selectionService instanceof SelectionService) {\n            this.selectionService.updateGroupsFromChildrenSelections('selectableChanged');\n        }\n    }\n}\n", "import type { ColumnModel } from './columns/columnModel';\nimport type { FuncColsService } from './columns/funcColsService';\nimport type { NamedBean } from './context/bean';\nimport { BeanStub } from './context/beanStub';\nimport type { BeanCollection } from './context/context';\nimport type { AgColumn } from './entities/agColumn';\nimport type { SortDirection } from './entities/colDef';\nimport type { ColumnEventType, SortChangedEvent } from './events';\nimport type { WithoutGridCommon } from './interfaces/iCommon';\nimport type { IShowRowGroupColsService } from './interfaces/iShowRowGroupColsService';\nimport type { SortOption } from './rowNodes/rowNodeSorter';\nimport { _warnOnce } from './utils/function';\n\nexport interface SortModelItem {\n    /** Column Id to apply the sort to. */\n    colId: string;\n    /** Sort direction */\n    sort: 'asc' | 'desc';\n}\n\nconst DEFAULT_SORTING_ORDER: SortDirection[] = ['asc', 'desc', null];\nexport class SortController extends BeanStub implements NamedBean {\n    beanName = 'sortController' as const;\n\n    private columnModel: ColumnModel;\n    private funcColsService: FuncColsService;\n    private showRowGroupColsService?: IShowRowGroupColsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.columnModel = beans.columnModel;\n        this.funcColsService = beans.funcColsService;\n        this.showRowGroupColsService = beans.showRowGroupColsService;\n    }\n\n    public progressSort(column: AgColumn, multiSort: boolean, source: ColumnEventType): void {\n        const nextDirection = this.getNextSortDirection(column);\n        this.setSortForColumn(column, nextDirection, multiSort, source);\n    }\n\n    public setSortForColumn(column: AgColumn, sort: SortDirection, multiSort: boolean, source: ColumnEventType): void {\n        // auto correct - if sort not legal value, then set it to 'no sort' (which is null)\n        if (sort !== 'asc' && sort !== 'desc') {\n            sort = null;\n        }\n\n        const isColumnsSortingCoupledToGroup = this.gos.isColumnsSortingCoupledToGroup();\n        let columnsToUpdate = [column];\n        if (isColumnsSortingCoupledToGroup) {\n            if (column.getColDef().showRowGroup) {\n                const rowGroupColumns = this.funcColsService.getSourceColumnsForGroupColumn(column);\n                const sortableRowGroupColumns = rowGroupColumns?.filter((col) => col.isSortable());\n\n                if (sortableRowGroupColumns) {\n                    columnsToUpdate = [column, ...sortableRowGroupColumns];\n                }\n            }\n        }\n\n        columnsToUpdate.forEach((col) => col.setSort(sort, source));\n\n        const doingMultiSort = (multiSort || this.gos.get('alwaysMultiSort')) && !this.gos.get('suppressMultiSort');\n\n        // clear sort on all columns except those changed, and update the icons\n        const updatedColumns: AgColumn[] = [];\n        if (!doingMultiSort) {\n            const clearedColumns = this.clearSortBarTheseColumns(columnsToUpdate, source);\n            updatedColumns.push(...clearedColumns);\n        }\n\n        // sortIndex used for knowing order of cols when multi-col sort\n        this.updateSortIndex(column);\n\n        updatedColumns.push(...columnsToUpdate);\n        this.dispatchSortChangedEvents(source, updatedColumns);\n    }\n\n    private updateSortIndex(lastColToChange: AgColumn) {\n        const isCoupled = this.gos.isColumnsSortingCoupledToGroup();\n        const groupParent = this.showRowGroupColsService?.getShowRowGroupCol(lastColToChange.getId());\n        const lastSortIndexCol = isCoupled ? groupParent || lastColToChange : lastColToChange;\n\n        const allSortedCols = this.getColumnsWithSortingOrdered();\n\n        // reset sort index on everything\n        this.columnModel.getAllCols().forEach((col) => col.setSortIndex(null));\n        const allSortedColsWithoutChangesOrGroups = allSortedCols.filter((col) => {\n            if (isCoupled && col.getColDef().showRowGroup) {\n                return false;\n            }\n            return col !== lastSortIndexCol;\n        });\n        const sortedColsWithIndices = lastSortIndexCol.getSort()\n            ? [...allSortedColsWithoutChangesOrGroups, lastSortIndexCol]\n            : allSortedColsWithoutChangesOrGroups;\n        sortedColsWithIndices.forEach((col, idx) => {\n            col.setSortIndex(idx);\n        });\n    }\n\n    // gets called by API, so if data changes, use can call this, which will end up\n    // working out the sort order again of the rows.\n    public onSortChanged(source: string, columns?: AgColumn[]): void {\n        this.dispatchSortChangedEvents(source, columns);\n    }\n\n    public isSortActive(): boolean {\n        // pull out all the columns that have sorting set\n        const allCols = this.columnModel.getAllCols();\n        const sortedCols = allCols.filter((column) => !!column.getSort());\n        return sortedCols && sortedCols.length > 0;\n    }\n\n    public dispatchSortChangedEvents(source: string, columns?: AgColumn[]): void {\n        const event: WithoutGridCommon<SortChangedEvent> = {\n            type: 'sortChanged',\n            source,\n        };\n\n        if (columns) {\n            event.columns = columns;\n        }\n        this.eventService.dispatchEvent(event);\n    }\n\n    private clearSortBarTheseColumns(columnsToSkip: AgColumn[], source: ColumnEventType): AgColumn[] {\n        const clearedColumns: AgColumn[] = [];\n        this.columnModel.getAllCols().forEach((columnToClear) => {\n            // Do not clear if either holding shift, or if column in question was clicked\n            if (!columnsToSkip.includes(columnToClear)) {\n                // add to list of cleared cols when sort direction is set\n                if (columnToClear.getSort()) {\n                    clearedColumns.push(columnToClear);\n                }\n\n                // setting to 'undefined' as null means 'none' rather than cleared, otherwise issue will arise\n                // if sort order is: ['desc', null , 'asc'], as it will start at null rather than 'desc'.\n                columnToClear.setSort(undefined, source);\n            }\n        });\n\n        return clearedColumns;\n    }\n\n    private getNextSortDirection(column: AgColumn): SortDirection {\n        let sortingOrder: SortDirection[] | null | undefined;\n\n        if (column.getColDef().sortingOrder) {\n            sortingOrder = column.getColDef().sortingOrder;\n        } else if (this.gos.get('sortingOrder')) {\n            sortingOrder = this.gos.get('sortingOrder');\n        } else {\n            sortingOrder = DEFAULT_SORTING_ORDER;\n        }\n\n        if (!Array.isArray(sortingOrder) || sortingOrder.length <= 0) {\n            _warnOnce(`sortingOrder must be an array with at least one element, currently it's ${sortingOrder}`);\n            return null;\n        }\n\n        const currentIndex = sortingOrder.indexOf(column.getSort()!);\n        const notInArray = currentIndex < 0;\n        const lastItemInArray = currentIndex == sortingOrder.length - 1;\n        let result: SortDirection;\n\n        if (notInArray || lastItemInArray) {\n            result = sortingOrder[0];\n        } else {\n            result = sortingOrder[currentIndex + 1];\n        }\n\n        // verify the sort type exists, as the user could provide the sortingOrder, need to make sure it's valid\n        if (DEFAULT_SORTING_ORDER.indexOf(result) < 0) {\n            _warnOnce('invalid sort type ', result);\n            return null;\n        }\n\n        return result;\n    }\n\n    /**\n     * @returns a map of sort indexes for every sorted column, if groups sort primaries then they will have equivalent indices\n     */\n    private getIndexedSortMap(): Map<AgColumn, number> {\n        // pull out all the columns that have sorting set\n        let allSortedCols = this.columnModel.getAllCols().filter((col) => !!col.getSort());\n\n        if (this.columnModel.isPivotMode()) {\n            const isSortingLinked = this.gos.isColumnsSortingCoupledToGroup();\n            allSortedCols = allSortedCols.filter((col) => {\n                const isAggregated = !!col.getAggFunc();\n                const isSecondary = !col.isPrimary();\n                const isGroup = isSortingLinked\n                    ? this.showRowGroupColsService?.getShowRowGroupCol(col.getId())\n                    : col.getColDef().showRowGroup;\n                return isAggregated || isSecondary || isGroup;\n            });\n        }\n\n        const sortedRowGroupCols = this.funcColsService.getRowGroupColumns().filter((col) => !!col.getSort());\n\n        // when both cols are missing sortIndex, we use the position of the col in all cols list.\n        // this means if colDefs only have sort, but no sortIndex, we deterministically pick which\n        // cols is sorted by first.\n        const allColsIndexes: { [id: string]: number } = {};\n        allSortedCols.forEach((col, index) => (allColsIndexes[col.getId()] = index));\n\n        // put the columns in order of which one got sorted first\n        allSortedCols.sort((a, b) => {\n            const iA = a.getSortIndex();\n            const iB = b.getSortIndex();\n            if (iA != null && iB != null) {\n                return iA - iB; // both present, normal comparison\n            } else if (iA == null && iB == null) {\n                // both missing, compare using column positions\n                const posA = allColsIndexes[a.getId()];\n                const posB = allColsIndexes[b.getId()];\n                return posA > posB ? 1 : -1;\n            } else if (iB == null) {\n                return -1; // iB missing\n            } else {\n                return 1; // iA missing\n            }\n        });\n\n        const isSortLinked = this.gos.isColumnsSortingCoupledToGroup() && !!sortedRowGroupCols.length;\n        if (isSortLinked) {\n            allSortedCols = [\n                ...new Set(\n                    // if linked sorting, replace all columns with the display group column for index purposes, and ensure uniqueness\n                    allSortedCols.map((col) => this.showRowGroupColsService?.getShowRowGroupCol(col.getId()) ?? col)\n                ),\n            ];\n        }\n\n        const indexMap: Map<AgColumn, number> = new Map();\n\n        allSortedCols.forEach((col, idx) => indexMap.set(col, idx));\n\n        // add the row group cols back\n        if (isSortLinked) {\n            sortedRowGroupCols.forEach((col) => {\n                const groupDisplayCol = this.showRowGroupColsService!.getShowRowGroupCol(col.getId())!;\n                indexMap.set(col, indexMap.get(groupDisplayCol)!);\n            });\n        }\n\n        return indexMap;\n    }\n\n    public getColumnsWithSortingOrdered(): AgColumn[] {\n        // pull out all the columns that have sorting set\n        return (\n            [...this.getIndexedSortMap().entries()]\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                .sort(([col1, idx1], [col2, idx2]) => idx1 - idx2)\n                .map(([col]) => col)\n        );\n    }\n\n    // used by server side row models, to sent sort to server\n    public getSortModel(): SortModelItem[] {\n        return this.getColumnsWithSortingOrdered()\n            .filter((column) => column.getSort())\n            .map((column) => ({\n                sort: column.getSort()!,\n                colId: column.getId(),\n            }));\n    }\n\n    public getSortOptions(): SortOption[] {\n        return this.getColumnsWithSortingOrdered()\n            .filter((column) => column.getSort())\n            .map((column) => ({\n                sort: column.getSort()!,\n                column,\n            }));\n    }\n\n    public canColumnDisplayMixedSort(column: AgColumn): boolean {\n        const isColumnSortCouplingActive = this.gos.isColumnsSortingCoupledToGroup();\n        const isGroupDisplayColumn = !!column.getColDef().showRowGroup;\n        return isColumnSortCouplingActive && isGroupDisplayColumn;\n    }\n\n    public getDisplaySortForColumn(column: AgColumn): SortDirection | 'mixed' | undefined {\n        const linkedColumns = this.funcColsService.getSourceColumnsForGroupColumn(column);\n        if (!this.canColumnDisplayMixedSort(column) || !linkedColumns?.length) {\n            return column.getSort();\n        }\n\n        // if column has unique data, its sorting is independent - but can still be mixed\n        const columnHasUniqueData = column.getColDef().field != null || !!column.getColDef().valueGetter;\n        const sortableColumns = columnHasUniqueData ? [column, ...linkedColumns] : linkedColumns;\n\n        const firstSort = sortableColumns[0].getSort();\n        // the == is intentional, as null and undefined both represent no sort, which means they are equivalent\n        const allMatch = sortableColumns.every((col) => col.getSort() == firstSort);\n        if (!allMatch) {\n            return 'mixed';\n        }\n        return firstSort;\n    }\n\n    public getDisplaySortIndexForColumn(column: AgColumn): number | null | undefined {\n        return this.getIndexedSortMap().get(column);\n    }\n}\n", "import type { ColumnModel } from './columns/columnModel';\nimport { convertSourceType } from './columns/columnModel';\nimport type { NamedBean } from './context/bean';\nimport { BeanStub } from './context/beanStub';\nimport type { BeanCollection } from './context/context';\nimport type { CtrlsService } from './ctrlsService';\nimport type { ColDef, ColGroupDef } from './entities/colDef';\nimport type { GridReadyEvent } from './events';\nimport type { PropertyValueChangedEvent } from './gridOptionsService';\nimport type { WithoutGridCommon } from './interfaces/iCommon';\nimport type { IRowModel } from './interfaces/iRowModel';\nimport { ModuleNames } from './modules/moduleNames';\nimport { ModuleRegistry } from './modules/moduleRegistry';\nimport { _log } from './utils/function';\n\nexport class SyncService extends BeanStub implements NamedBean {\n    beanName = 'syncService' as const;\n\n    private ctrlsService: CtrlsService;\n    private columnModel: ColumnModel;\n    private rowModel: IRowModel;\n\n    public wireBeans(beans: BeanCollection) {\n        this.ctrlsService = beans.ctrlsService;\n        this.columnModel = beans.columnModel;\n        this.rowModel = beans.rowModel;\n    }\n\n    private waitingForColumns: boolean = false;\n\n    public postConstruct(): void {\n        this.addManagedPropertyListener('columnDefs', (event) => this.setColumnDefs(event));\n    }\n\n    public start(): void {\n        // we wait until the UI has finished initialising before setting in columns and rows\n        this.ctrlsService.whenReady(() => {\n            const columnDefs = this.gos.get('columnDefs');\n            if (columnDefs) {\n                this.setColumnsAndData(columnDefs);\n            } else {\n                this.waitingForColumns = true;\n            }\n            this.gridReady();\n        });\n    }\n\n    private setColumnsAndData(columnDefs: (ColDef | ColGroupDef)[]): void {\n        this.columnModel.setColumnDefs(columnDefs ?? [], 'gridInitializing');\n        this.rowModel.start();\n    }\n\n    private gridReady(): void {\n        this.dispatchGridReadyEvent();\n        const isEnterprise = ModuleRegistry.__isRegistered(ModuleNames.EnterpriseCoreModule, this.gridId);\n        if (this.gos.get('debug')) {\n            _log(`initialised successfully, enterprise = ${isEnterprise}`);\n        }\n    }\n\n    private dispatchGridReadyEvent(): void {\n        const readyEvent: WithoutGridCommon<GridReadyEvent> = {\n            type: 'gridReady',\n        };\n        this.eventService.dispatchEvent(readyEvent);\n    }\n\n    private setColumnDefs(event: PropertyValueChangedEvent<'columnDefs'>): void {\n        const columnDefs = this.gos.get('columnDefs');\n        if (!columnDefs) {\n            return;\n        }\n\n        if (this.waitingForColumns) {\n            this.waitingForColumns = false;\n            this.setColumnsAndData(columnDefs);\n            return;\n        }\n\n        this.columnModel.setColumnDefs(columnDefs, convertSourceType(event.source));\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { AgColumn } from '../entities/agColumn';\nimport type { RowNode } from '../entities/rowNode';\nimport type { CellValueChangedEvent } from '../events';\nimport type { IClientSideRowModel } from '../interfaces/iClientSideRowModel';\nimport type { IRowModel } from '../interfaces/iRowModel';\nimport type { RowRenderer } from '../rendering/rowRenderer';\nimport { ChangedPath } from '../utils/changedPath';\n\n// Matches value in clipboard module\nconst SOURCE_PASTE = 'paste';\nexport class ChangeDetectionService extends BeanStub implements NamedBean {\n    beanName = 'changeDetectionService' as const;\n\n    private rowModel: IRowModel;\n    private rowRenderer: RowRenderer;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.rowModel = beans.rowModel;\n        this.rowRenderer = beans.rowRenderer;\n    }\n\n    private clientSideRowModel: IClientSideRowModel;\n\n    public postConstruct(): void {\n        if (this.rowModel.getType() === 'clientSide') {\n            this.clientSideRowModel = this.rowModel as IClientSideRowModel;\n        }\n\n        this.addManagedEventListeners({ cellValueChanged: this.onCellValueChanged.bind(this) });\n    }\n\n    private onCellValueChanged(event: CellValueChangedEvent): void {\n        // Clipboard service manages its own change detection, so no need to do it here.\n        // The clipboard manages its own as otherwise this would happen once for every cell\n        // that got updated as part of a paste operation, so e.g. if 100 cells in a paste operation,\n        // this doChangeDetection would get called 100 times (once for each cell), instead clipboard\n        // service executes the logic we have here once (in essence batching up all cell changes\n        // into one change detection).\n        if (event.source === SOURCE_PASTE) {\n            return;\n        }\n\n        this.doChangeDetection(event.node as RowNode, event.column as AgColumn);\n    }\n\n    private doChangeDetection(rowNode: RowNode, column: AgColumn): void {\n        if (this.gos.get('suppressChangeDetection')) {\n            return;\n        }\n\n        const nodesToRefresh: RowNode[] = [rowNode];\n\n        // step 1 of change detection is to update the aggregated values\n        if (this.clientSideRowModel && !rowNode.isRowPinned()) {\n            const onlyChangedColumns = this.gos.get('aggregateOnlyChangedColumns');\n            const changedPath = new ChangedPath(onlyChangedColumns, this.clientSideRowModel.getRootNode());\n            changedPath.addParentNode(rowNode.parent, [column]);\n            this.clientSideRowModel.doAggregate(changedPath);\n\n            // add all nodes impacted by aggregation, as they need refreshed also.\n            changedPath.forEachChangedNodeDepthFirst((rowNode) => {\n                nodesToRefresh.push(rowNode);\n            });\n        }\n\n        // step 2 of change detection is to refresh the cells\n        this.rowRenderer.refreshCells({ rowNodes: nodesToRefresh });\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport { _errorOnce, _log } from '../utils/function';\n\nexport class ExpressionService extends BeanStub implements NamedBean {\n    beanName = 'expressionService' as const;\n\n    private expressionToFunctionCache = {} as any;\n\n    public evaluate(expression: string | undefined, params: any): any {\n        if (typeof expression === 'string') {\n            // valueGetter is an expression, so execute the expression\n            return this.evaluateExpression(expression, params);\n        } else {\n            _errorOnce('value should be either a string or a function', expression);\n        }\n    }\n\n    private evaluateExpression(expression: string, params: any): any {\n        try {\n            const javaScriptFunction = this.createExpressionFunction(expression);\n            // the params don't have all these values, rather we add every possible\n            // value a params can have, which makes whatever is in the params available.\n            const result = javaScriptFunction(\n                params.value,\n                params.context,\n                params.oldValue,\n                params.newValue,\n                params.value,\n                params.node,\n                params.data,\n                params.colDef,\n                params.rowIndex,\n                params.api,\n                params.getValue,\n                params.column,\n                params.columnGroup\n            );\n            return result;\n        } catch (e) {\n            // the expression failed, which can happen, as it's the client that\n            // provides the expression. so print a nice message\n            // tslint:disable-next-line\n            _log('Processing of the expression failed');\n            // tslint:disable-next-line\n            _log('Expression = ', expression);\n            // tslint:disable-next-line\n            _log('Params = ', params);\n            // tslint:disable-next-line\n            _log('Exception = ', e);\n            return null;\n        }\n    }\n\n    private createExpressionFunction(expression: any) {\n        // check cache first\n        if (this.expressionToFunctionCache[expression]) {\n            return this.expressionToFunctionCache[expression];\n        }\n        // if not found in cache, return the function\n        const functionBody = this.createFunctionBody(expression);\n        const theFunction = new Function(\n            'x, ctx, oldValue, newValue, value, node, data, colDef, rowIndex, api, getValue, column, columnGroup',\n            functionBody\n        );\n\n        // store in cache\n        this.expressionToFunctionCache[expression] = theFunction;\n\n        return theFunction;\n    }\n\n    private createFunctionBody(expression: any) {\n        // if the expression has the 'return' word in it, then use as is,\n        // if not, then wrap it with return and ';' to make a function\n        if (expression.indexOf('return') >= 0) {\n            return expression;\n        } else {\n            return 'return ' + expression + ';';\n        }\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { RowNode } from '../entities/rowNode';\n\nexport class ValueCache extends BeanStub implements NamedBean {\n    beanName = 'valueCache' as const;\n\n    private cacheVersion = 0;\n    private active: boolean;\n    private neverExpires: boolean;\n\n    public postConstruct(): void {\n        this.active = this.gos.get('valueCache');\n        this.neverExpires = this.gos.get('valueCacheNeverExpires');\n    }\n\n    public onDataChanged(): void {\n        if (this.neverExpires) {\n            return;\n        }\n\n        this.expire();\n    }\n\n    public expire(): void {\n        this.cacheVersion++;\n    }\n\n    public setValue(rowNode: RowNode, colId: string, value: any): any {\n        if (this.active) {\n            if (rowNode.__cacheVersion !== this.cacheVersion) {\n                rowNode.__cacheVersion = this.cacheVersion;\n                rowNode.__cacheData = {};\n            }\n\n            rowNode.__cacheData[colId] = value;\n        }\n    }\n\n    public getValue(rowNode: RowNode, colId: string): any {\n        if (!this.active || rowNode.__cacheVersion !== this.cacheVersion) {\n            return undefined;\n        }\n\n        return rowNode.__cacheData[colId];\n    }\n}\n", "import type { ColumnModel } from '../columns/columnModel';\nimport type { DataTypeService } from '../columns/dataTypeService';\nimport type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { AgColumn } from '../entities/agColumn';\nimport type {\n    KeyCreatorParams,\n    ValueFormatterParams,\n    ValueGetterParams,\n    ValueParserParams,\n    ValueSetterParams,\n} from '../entities/colDef';\nimport type { RowNode } from '../entities/rowNode';\nimport type { CellValueChangedEvent } from '../events';\nimport type { IRowNode } from '../interfaces/iRowNode';\nimport { _warnOnce } from '../utils/function';\nimport { _exists, _missing } from '../utils/generic';\nimport { _getValueUsingField } from '../utils/object';\nimport type { ExpressionService } from './expressionService';\nimport type { ValueCache } from './valueCache';\n\nexport class ValueService extends BeanStub implements NamedBean {\n    beanName = 'valueService' as const;\n\n    private expressionService: ExpressionService;\n    private columnModel: ColumnModel;\n    private valueCache: ValueCache;\n    private dataTypeService?: DataTypeService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.expressionService = beans.expressionService;\n        this.columnModel = beans.columnModel;\n        this.valueCache = beans.valueCache;\n        this.dataTypeService = beans.dataTypeService;\n    }\n\n    private cellExpressions: boolean;\n    // Store locally for performance reasons and keep updated via property listener\n    private isTreeData: boolean;\n\n    private initialised = false;\n\n    private isSsrm = false;\n\n    public postConstruct(): void {\n        if (!this.initialised) {\n            this.init();\n        }\n    }\n\n    private init(): void {\n        this.isSsrm = this.gos.isRowModelType('serverSide');\n        this.cellExpressions = this.gos.get('enableCellExpressions');\n        this.isTreeData = this.gos.get('treeData');\n        this.initialised = true;\n\n        // We listen to our own event and use it to call the columnSpecific callback,\n        // this way the handler calls are correctly interleaved with other global events\n        const listener = (event: CellValueChangedEvent) => this.callColumnCellValueChangedHandler(event);\n        const async = this.gos.useAsyncEvents();\n        this.eventService.addEventListener('cellValueChanged', listener, async);\n        this.addDestroyFunc(() => this.eventService.removeEventListener('cellValueChanged', listener, async));\n\n        this.addManagedPropertyListener('treeData', (propChange) => (this.isTreeData = propChange.currentValue));\n    }\n\n    public getValue(column: AgColumn, rowNode?: IRowNode | null, forFilter = false, ignoreAggData = false): any {\n        // hack - the grid is getting refreshed before this bean gets initialised, race condition.\n        // really should have a way so they get initialised in the right order???\n        if (!this.initialised) {\n            this.init();\n        }\n\n        if (!rowNode) {\n            return;\n        }\n\n        // pull these out to make code below easier to read\n        const colDef = column.getColDef();\n        const field = colDef.field;\n        const colId = column.getColId();\n        const data = rowNode.data;\n\n        let result: any;\n\n        // if there is a value getter, this gets precedence over a field\n        const groupDataExists = rowNode.groupData && rowNode.groupData[colId] !== undefined;\n        const aggDataExists = !ignoreAggData && rowNode.aggData && rowNode.aggData[colId] !== undefined;\n\n        // SSRM agg data comes from the data attribute, so ignore that instead\n        const ignoreSsrmAggData = this.isSsrm && ignoreAggData && !!column.getColDef().aggFunc;\n        const ssrmFooterGroupCol =\n            this.isSsrm &&\n            rowNode.footer &&\n            rowNode.field &&\n            (column.getColDef().showRowGroup === true || column.getColDef().showRowGroup === rowNode.field);\n\n        if (forFilter && colDef.filterValueGetter) {\n            result = this.executeFilterValueGetter(colDef.filterValueGetter, data, column, rowNode);\n        } else if (this.isTreeData && aggDataExists) {\n            result = rowNode.aggData[colId];\n        } else if (this.isTreeData && colDef.valueGetter) {\n            result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);\n        } else if (this.isTreeData && field && data) {\n            result = _getValueUsingField(data, field, column.isFieldContainsDots());\n        } else if (groupDataExists) {\n            result = rowNode.groupData![colId];\n        } else if (aggDataExists) {\n            result = rowNode.aggData[colId];\n        } else if (colDef.valueGetter) {\n            result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);\n        } else if (ssrmFooterGroupCol) {\n            // this is for group footers in SSRM, as the SSRM row won't have groupData, need to extract\n            // the group value from the data using the row field\n            result = _getValueUsingField(data, rowNode.field!, column.isFieldContainsDots());\n        } else if (field && data && !ignoreSsrmAggData) {\n            result = _getValueUsingField(data, field, column.isFieldContainsDots());\n        }\n\n        // the result could be an expression itself, if we are allowing cell values to be expressions\n        if (this.cellExpressions && typeof result === 'string' && result.indexOf('=') === 0) {\n            const cellValueGetter = result.substring(1);\n            result = this.executeValueGetter(cellValueGetter, data, column, rowNode);\n        }\n\n        if (result == null) {\n            const openedGroup = this.getOpenedGroup(rowNode, column);\n            if (openedGroup != null) {\n                return openedGroup;\n            }\n        }\n\n        return result;\n    }\n\n    public parseValue(column: AgColumn, rowNode: IRowNode | null, newValue: any, oldValue: any): any {\n        const colDef = column.getColDef();\n        const params: ValueParserParams = this.gos.addGridCommonParams({\n            node: rowNode,\n            data: rowNode?.data,\n            oldValue,\n            newValue,\n            colDef,\n            column,\n        });\n\n        const valueParser = colDef.valueParser;\n\n        if (_exists(valueParser)) {\n            if (typeof valueParser === 'function') {\n                return valueParser(params);\n            }\n            return this.expressionService.evaluate(valueParser, params);\n        }\n        return newValue;\n    }\n\n    public formatValue(\n        column: AgColumn,\n        node: IRowNode | null,\n        value: any,\n        suppliedFormatter?: (value: any) => string,\n        useFormatterFromColumn = true\n    ): string | null {\n        let result: string | null = null;\n        let formatter: ((value: any) => string) | string | undefined;\n\n        const colDef = column.getColDef();\n\n        if (suppliedFormatter) {\n            // use supplied formatter if provided, e.g. set filter items can have their own value formatters\n            formatter = suppliedFormatter;\n        } else if (useFormatterFromColumn) {\n            formatter = colDef.valueFormatter;\n        }\n\n        if (formatter) {\n            const params: ValueFormatterParams = this.gos.addGridCommonParams({\n                value,\n                node,\n                data: node ? node.data : null,\n                colDef,\n                column,\n            });\n            if (typeof formatter === 'function') {\n                result = formatter(params);\n            } else {\n                result = this.expressionService.evaluate(formatter, params);\n            }\n        } else if (colDef.refData) {\n            return colDef.refData[value] || '';\n        }\n\n        // if we don't do this, then arrays get displayed as 1,2,3, but we want 1, 2, 3 (i.e. with spaces)\n        if (result == null && Array.isArray(value)) {\n            result = value.join(', ');\n        }\n\n        return result;\n    }\n\n    private getOpenedGroup(rowNode: IRowNode, column: AgColumn): any {\n        if (!this.gos.get('showOpenedGroup')) {\n            return;\n        }\n\n        const colDef = column.getColDef();\n        if (!colDef.showRowGroup) {\n            return;\n        }\n\n        const showRowGroup = column.getColDef().showRowGroup;\n\n        let pointer = rowNode.parent;\n\n        while (pointer != null) {\n            if (\n                pointer.rowGroupColumn &&\n                (showRowGroup === true || showRowGroup === pointer.rowGroupColumn.getColId())\n            ) {\n                return pointer.key;\n            }\n            pointer = pointer.parent;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sets the value of a GridCell\n     * @param rowNode The `RowNode` to be updated\n     * @param colKey The `Column` to be updated\n     * @param newValue The new value to be set\n     * @param eventSource The event source\n     * @returns `True` if the value has been updated, otherwise`False`.\n     */\n    public setValue(rowNode: IRowNode, colKey: string | AgColumn, newValue: any, eventSource?: string): boolean {\n        const column = this.columnModel.getColDefCol(colKey);\n\n        if (!rowNode || !column) {\n            return false;\n        }\n        // this will only happen if user is trying to paste into a group row, which doesn't make sense\n        // the user should not be trying to paste into group rows\n        if (_missing(rowNode.data)) {\n            rowNode.data = {};\n        }\n\n        const { field, valueSetter } = column.getColDef();\n\n        if (_missing(field) && _missing(valueSetter)) {\n            _warnOnce(`you need either field or valueSetter set on colDef for editing to work`);\n            return false;\n        }\n\n        if (this.dataTypeService && !this.dataTypeService.checkType(column, newValue)) {\n            _warnOnce(`Data type of the new value does not match the cell data type of the column`);\n            return false;\n        }\n\n        const params: ValueSetterParams = this.gos.addGridCommonParams({\n            node: rowNode,\n            data: rowNode.data,\n            oldValue: this.getValue(column, rowNode),\n            newValue: newValue,\n            colDef: column.getColDef(),\n            column: column,\n        });\n\n        params.newValue = newValue;\n\n        let valueWasDifferent: boolean;\n\n        if (_exists(valueSetter)) {\n            if (typeof valueSetter === 'function') {\n                valueWasDifferent = valueSetter(params);\n            } else {\n                valueWasDifferent = this.expressionService.evaluate(valueSetter, params);\n            }\n        } else {\n            valueWasDifferent = this.setValueUsingField(rowNode.data, field, newValue, column.isFieldContainsDots());\n        }\n\n        // in case user forgot to return something (possible if they are not using TypeScript\n        // and just forgot we default the return value to true, so we always refresh.\n        if (valueWasDifferent === undefined) {\n            valueWasDifferent = true;\n        }\n\n        // if no change to the value, then no need to do the updating, or notifying via events.\n        // otherwise the user could be tabbing around the grid, and cellValueChange would get called\n        // all the time.\n        if (!valueWasDifferent) {\n            return false;\n        }\n\n        // reset quick filter on this row\n        rowNode.resetQuickFilterAggregateText();\n\n        this.valueCache.onDataChanged();\n\n        params.newValue = this.getValue(column, rowNode);\n\n        const event: CellValueChangedEvent = {\n            type: 'cellValueChanged',\n            event: null,\n            rowIndex: rowNode.rowIndex!,\n            rowPinned: rowNode.rowPinned,\n            column: params.column,\n            api: params.api!,\n            colDef: params.colDef,\n            context: params.context,\n            data: rowNode.data,\n            node: rowNode,\n            oldValue: params.oldValue,\n            newValue: params.newValue,\n            value: params.newValue,\n            source: eventSource,\n        };\n\n        this.eventService.dispatchEvent(event);\n\n        return true;\n    }\n\n    private callColumnCellValueChangedHandler(event: CellValueChangedEvent) {\n        const onCellValueChanged = event.colDef.onCellValueChanged;\n        if (typeof onCellValueChanged === 'function') {\n            this.getFrameworkOverrides().wrapOutgoing(() => {\n                onCellValueChanged({\n                    node: event.node,\n                    data: event.data,\n                    oldValue: event.oldValue,\n                    newValue: event.newValue,\n                    colDef: event.colDef,\n                    column: event.column,\n                    api: event.api,\n                    context: event.context,\n                });\n            });\n        }\n    }\n\n    private setValueUsingField(\n        data: any,\n        field: string | undefined,\n        newValue: any,\n        isFieldContainsDots: boolean\n    ): boolean {\n        if (!field) {\n            return false;\n        }\n\n        // if no '.', then it's not a deep value\n        let valuesAreSame: boolean = false;\n        if (!isFieldContainsDots) {\n            valuesAreSame = data[field] === newValue;\n            if (!valuesAreSame) {\n                data[field] = newValue;\n            }\n        } else {\n            // otherwise it is a deep value, so need to dig for it\n            const fieldPieces = field.split('.');\n            let currentObject = data;\n            while (fieldPieces.length > 0 && currentObject) {\n                const fieldPiece: any = fieldPieces.shift();\n                if (fieldPieces.length === 0) {\n                    valuesAreSame = currentObject[fieldPiece] === newValue;\n                    if (!valuesAreSame) {\n                        currentObject[fieldPiece] = newValue;\n                    }\n                } else {\n                    currentObject = currentObject[fieldPiece];\n                }\n            }\n        }\n        return !valuesAreSame;\n    }\n\n    private executeFilterValueGetter(\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        valueGetter: string | Function,\n        data: any,\n        column: AgColumn,\n        rowNode: IRowNode\n    ): any {\n        const params: ValueGetterParams = this.gos.addGridCommonParams({\n            data: data,\n            node: rowNode,\n            column: column,\n            colDef: column.getColDef(),\n            getValue: this.getValueCallback.bind(this, rowNode),\n        });\n\n        if (typeof valueGetter === 'function') {\n            return valueGetter(params);\n        }\n        return this.expressionService.evaluate(valueGetter, params);\n    }\n\n    private executeValueGetter(\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        valueGetter: string | Function,\n        data: any,\n        column: AgColumn,\n        rowNode: IRowNode\n    ): any {\n        const colId = column.getColId();\n\n        // if inside the same turn, just return back the value we got last time\n        const valueFromCache = this.valueCache.getValue(rowNode as RowNode, colId);\n\n        if (valueFromCache !== undefined) {\n            return valueFromCache;\n        }\n\n        const params: ValueGetterParams = this.gos.addGridCommonParams({\n            data: data,\n            node: rowNode,\n            column: column,\n            colDef: column.getColDef(),\n            getValue: this.getValueCallback.bind(this, rowNode),\n        });\n\n        let result;\n        if (typeof valueGetter === 'function') {\n            result = valueGetter(params);\n        } else {\n            result = this.expressionService.evaluate(valueGetter, params);\n        }\n\n        // if a turn is active, store the value in case the grid asks for it again\n        this.valueCache.setValue(rowNode as RowNode, colId, result);\n\n        return result;\n    }\n\n    private getValueCallback(node: IRowNode, field: string | AgColumn): any {\n        const otherColumn = this.columnModel.getColDefCol(field);\n\n        if (otherColumn) {\n            return this.getValue(otherColumn, node);\n        }\n\n        return null;\n    }\n\n    // used by row grouping and pivot, to get key for a row. col can be a pivot col or a row grouping col\n    public getKeyForNode(col: AgColumn, rowNode: IRowNode): any {\n        const value = this.getValue(col, rowNode);\n        const keyCreator = col.getColDef().keyCreator;\n\n        let result = value;\n        if (keyCreator) {\n            const keyParams: KeyCreatorParams = this.gos.addGridCommonParams({\n                value: value,\n                colDef: col.getColDef(),\n                column: col,\n                node: rowNode,\n                data: rowNode.data,\n            });\n            result = keyCreator(keyParams);\n        }\n\n        // if already a string, or missing, just return it\n        if (typeof result === 'string' || result == null) {\n            return result;\n        }\n\n        result = String(result);\n\n        if (result === '[object Object]') {\n            _warnOnce(\n                'a column you are grouping or pivoting by has objects as values. If you want to group by complex objects then either a) use a colDef.keyCreator (se AG Grid docs) or b) to toString() on the object to return a key'\n            );\n        }\n\n        return result;\n    }\n}\n", "import { ApiFunctionService } from './api/apiFunctionService';\nimport { createApiProxy } from './api/apiUtils';\nimport type { GridApi } from './api/gridApi';\nimport type { ApiFunctionName } from './api/iApiFunction';\nimport { CellNavigationService } from './cellNavigationService';\nimport { ColumnApplyStateService } from './columns/columnApplyStateService';\nimport { ColumnAutosizeService } from './columns/columnAutosizeService';\nimport { ColumnDefFactory } from './columns/columnDefFactory';\nimport { ColumnEventDispatcher } from './columns/columnEventDispatcher';\nimport { ColumnFactory } from './columns/columnFactory';\nimport { ColumnGetStateService } from './columns/columnGetStateService';\nimport { ColumnGroupStateService } from './columns/columnGroupStateService';\nimport { ColumnModel } from './columns/columnModel';\nimport { ColumnMoveService } from './columns/columnMoveService';\nimport { ColumnNameService } from './columns/columnNameService';\nimport { ColumnSizeService } from './columns/columnSizeService';\nimport { ColumnViewportService } from './columns/columnViewportService';\nimport { FuncColsService } from './columns/funcColsService';\nimport { PivotResultColsService } from './columns/pivotResultColsService';\nimport { VisibleColsService } from './columns/visibleColsService';\nimport { AgComponentUtils } from './components/framework/agComponentUtils';\nimport { ComponentMetadataProvider } from './components/framework/componentMetadataProvider';\nimport { UserComponentFactory } from './components/framework/userComponentFactory';\nimport { UserComponentRegistry } from './components/framework/userComponentRegistry';\nimport type { ComponentMeta, ContextParams, SingletonBean } from './context/context';\nimport { Context } from './context/context';\nimport { gridBeanDestroyComparator, gridBeanInitComparator } from './context/gridBeanComparator';\nimport { CtrlsFactory } from './ctrlsFactory';\nimport { CtrlsService } from './ctrlsService';\nimport { DragAndDropService } from './dragAndDrop/dragAndDropService';\nimport { DragService } from './dragAndDrop/dragService';\nimport { CellPositionUtils } from './entities/cellPositionUtils';\nimport type { GridOptions } from './entities/gridOptions';\nimport { RowNodeEventThrottle } from './entities/rowNodeEventThrottle';\nimport { RowPositionUtils } from './entities/rowPositionUtils';\nimport { Environment } from './environment';\nimport { EventService } from './eventService';\nimport { FocusService } from './focusService';\nimport { MouseEventService } from './gridBodyComp/mouseEventService';\nimport { NavigationService } from './gridBodyComp/navigationService';\nimport { PinnedWidthService } from './gridBodyComp/pinnedWidthService';\nimport { ScrollVisibleService } from './gridBodyComp/scrollVisibleService';\nimport { GridComp } from './gridComp/gridComp';\nimport { CommunityFeaturesModule } from './gridCoreModule';\nimport { GridDestroyService } from './gridDestroyService';\nimport { GridOptionsService, getCoercedGridOptions } from './gridOptionsService';\nimport { StandardMenuFactory } from './headerRendering/cells/column/standardMenu';\nimport { HeaderNavigationService } from './headerRendering/common/headerNavigationService';\nimport { HeaderPositionUtils } from './headerRendering/common/headerPosition';\nimport { HorizontalResizeService } from './headerRendering/common/horizontalResizeService';\nimport type { IFrameworkOverrides } from './interfaces/iFrameworkOverrides';\nimport type { Module } from './interfaces/iModule';\nimport type { RowModelType } from './interfaces/iRowModel';\nimport { LocaleService } from './localeService';\nimport { AnimationFrameService } from './misc/animationFrameService';\nimport { ApiEventService } from './misc/apiEventService';\nimport { ExpansionService } from './misc/expansionService';\nimport { MenuService } from './misc/menuService';\nimport { ResizeObserverService } from './misc/resizeObserverService';\nimport { ModuleNames } from './modules/moduleNames';\nimport { ModuleRegistry } from './modules/moduleRegistry';\nimport { PageBoundsListener } from './pagination/pageBoundsListener';\nimport { PageBoundsService } from './pagination/pageBoundsService';\nimport { PinnedRowModel } from './pinnedRowModel/pinnedRowModel';\nimport { AriaAnnouncementService } from './rendering/ariaAnnouncementService';\nimport { AutoWidthCalculator } from './rendering/autoWidthCalculator';\nimport { ColumnAnimationService } from './rendering/columnAnimationService';\nimport { ColumnHoverService } from './rendering/columnHoverService';\nimport { OverlayService } from './rendering/overlays/overlayService';\nimport { RowCssClassCalculator } from './rendering/row/rowCssClassCalculator';\nimport { RowContainerHeightService } from './rendering/rowContainerHeightService';\nimport { RowRenderer } from './rendering/rowRenderer';\nimport { RowNodeSorter } from './rowNodes/rowNodeSorter';\nimport { SelectableService } from './rowNodes/selectableService';\nimport { SelectionService } from './selection/selectionService';\nimport { SortController } from './sortController';\nimport { StylingService } from './styling/stylingService';\nimport { SyncService } from './syncService';\nimport { _errorOnce, _warnOnce } from './utils/function';\nimport { _missing } from './utils/generic';\nimport { _mergeDeep } from './utils/object';\nimport { ChangeDetectionService } from './valueService/changeDetectionService';\nimport { ExpressionService } from './valueService/expressionService';\nimport { ValueCache } from './valueService/valueCache';\nimport { ValueService } from './valueService/valueService';\nimport { VanillaFrameworkOverrides } from './vanillaFrameworkOverrides';\nimport { PopupService } from './widgets/popupService';\n\nexport interface GridParams {\n    // INTERNAL - used by Web Components\n    globalEventListener?: (...args: any[]) => any;\n    // INTERNAL - Always sync - for events such as gridPreDestroyed\n    globalSyncEventListener?: (...args: any[]) => any;\n    // INTERNAL - this allows the base frameworks (React, Angular, etc) to provide alternative cellRenderers and cellEditors\n    frameworkOverrides?: IFrameworkOverrides;\n    // INTERNAL - bean instances to add to the context\n    providedBeanInstances?: { [key: string]: any };\n\n    /**\n     * Modules to be registered directly with this grid instance.\n     */\n    modules?: Module[];\n}\n\nexport interface Params {\n    /**\n     * Modules to be registered directly with this grid instance.\n     */\n    modules?: Module[];\n}\n\nclass GlobalGridOptions {\n    static gridOptions: GridOptions | undefined = undefined;\n}\n\n/**\n * Provide gridOptions that will be shared by all grid instances.\n * Individually defined GridOptions will take precedence over global options.\n * @param gridOptions - global grid options\n */\nexport function provideGlobalGridOptions(gridOptions: GridOptions): void {\n    GlobalGridOptions.gridOptions = gridOptions;\n}\n\n/**\n * Creates a grid inside the provided HTML element.\n * @param eGridDiv Parent element to contain the grid.\n * @param gridOptions Configuration for the grid.\n * @param params Individually register AG Grid Modules to this grid.\n * @returns api to be used to interact with the grid.\n */\nexport function createGrid<TData>(\n    eGridDiv: HTMLElement,\n    gridOptions: GridOptions<TData>,\n    params?: Params\n): GridApi<TData> {\n    if (!gridOptions) {\n        _errorOnce('No gridOptions provided to createGrid');\n        return {} as GridApi;\n    }\n    const api = new GridCoreCreator().create(\n        eGridDiv,\n        gridOptions,\n        (context) => {\n            const gridComp = new GridComp(eGridDiv);\n            context.createBean(gridComp);\n        },\n        undefined,\n        params\n    );\n\n    // @deprecated v31 api no longer mutated onto the provided gridOptions\n    // Instead we place a getter that will log an error when accessed and direct users to the docs\n    // Only apply for direct usages of createGrid, not for frameworks\n    if (!Object.isFrozen(gridOptions) && !(params as GridParams)?.frameworkOverrides) {\n        const apiUrl = 'https://ag-grid.com/javascript-data-grid/grid-interface/#grid-api';\n        Object.defineProperty(gridOptions, 'api', {\n            get: () => {\n                _errorOnce(`gridOptions.api is no longer supported. See ${apiUrl}.`);\n                return undefined;\n            },\n            configurable: true,\n        });\n    }\n\n    return api;\n}\n/**\n * @deprecated v31 use createGrid() instead\n */\nexport class Grid {\n    private readonly gridOptions: any; // Not typed to enable setting api for backwards compatibility\n\n    constructor(eGridDiv: HTMLElement, gridOptions: GridOptions, params?: GridParams) {\n        _warnOnce(\n            'Since v31 new Grid(...) is deprecated. Use createGrid instead: `const gridApi = createGrid(...)`. The grid api is returned from createGrid and will not be available on gridOptions.'\n        );\n\n        if (!gridOptions) {\n            _errorOnce('No gridOptions provided to the grid');\n            return;\n        }\n\n        this.gridOptions = gridOptions as any;\n\n        const api = new GridCoreCreator().create(\n            eGridDiv,\n            gridOptions,\n            (context) => {\n                const gridComp = new GridComp(eGridDiv);\n                const bean = context.createBean(gridComp);\n                bean.addDestroyFunc(() => {\n                    this.destroy();\n                });\n            },\n            undefined,\n            params\n        );\n\n        // Maintain existing behaviour by mutating gridOptions with the apis for deprecated new Grid()\n        this.gridOptions.api = api;\n    }\n\n    public destroy(): void {\n        if (this.gridOptions) {\n            this.gridOptions.api?.destroy();\n            // need to remove these, as we don't own the lifecycle of the gridOptions, we need to\n            // remove the references in case the user keeps the grid options, we want the rest\n            // of the grid to be picked up by the garbage collector\n            delete this.gridOptions.api;\n        }\n    }\n}\n\nlet nextGridId = 1;\n\n// creates services of grid only, no UI, so frameworks can use this if providing\n// their own UI\nexport class GridCoreCreator {\n    public create(\n        eGridDiv: HTMLElement,\n        providedOptions: GridOptions,\n        createUi: (context: Context) => void,\n        acceptChanges?: (context: Context) => void,\n        params?: GridParams\n    ): GridApi {\n        let mergedGridOps: GridOptions = {};\n        if (GlobalGridOptions.gridOptions) {\n            // Merge deep to avoid leaking changes to the global options\n            _mergeDeep(mergedGridOps, GlobalGridOptions.gridOptions, true, true);\n            // Shallow copy to ensure context reference is maintained\n            mergedGridOps = { ...mergedGridOps, ...providedOptions };\n        } else {\n            mergedGridOps = providedOptions;\n        }\n        const gridOptions = getCoercedGridOptions(mergedGridOps);\n\n        const gridId = gridOptions.gridId ?? String(nextGridId++);\n\n        const registeredModules = this.getRegisteredModules(params, gridId);\n\n        const beanClasses = this.createBeansList(gridOptions.rowModelType, registeredModules, gridId);\n        const providedBeanInstances = this.createProvidedBeans(eGridDiv, gridOptions, params);\n\n        if (!beanClasses) {\n            // Detailed error message will have been printed by createBeansList\n            _errorOnce('Failed to create grid.');\n            // Break typing so that the normal return type does not have to handle undefined.\n            return undefined as any;\n        }\n\n        const contextParams: ContextParams = {\n            providedBeanInstances: providedBeanInstances,\n            beanClasses: beanClasses,\n            gridId: gridId,\n            beanInitComparator: gridBeanInitComparator,\n            beanDestroyComparator: gridBeanDestroyComparator,\n            derivedBeans: [createApiProxy],\n        };\n\n        const context = new Context(contextParams);\n        this.registerModuleUserComponents(context, registeredModules);\n        this.registerControllers(context, registeredModules);\n        this.registerModuleApiFunctions(context, registeredModules);\n\n        createUi(context);\n\n        context.getBean('syncService').start();\n\n        if (acceptChanges) {\n            acceptChanges(context);\n        }\n\n        return context.getBean('gridApi');\n    }\n\n    private registerControllers(context: Context, registeredModules: Module[]): void {\n        const factory = context.getBean('ctrlsFactory');\n        registeredModules.forEach((module) => {\n            if (module.controllers) {\n                module.controllers.forEach((meta) => factory.register(meta));\n            }\n        });\n    }\n\n    private getRegisteredModules(params: GridParams | undefined, gridId: string): Module[] {\n        const passedViaConstructor: Module[] | undefined | null = params ? params.modules : null;\n        const registered = ModuleRegistry.__getRegisteredModules(gridId);\n\n        const allModules: Module[] = [];\n        const mapNames: { [name: string]: boolean } = {};\n\n        // adds to list and removes duplicates\n        const addModule = (moduleBased: boolean, mod: Module, gridId: string | undefined) => {\n            const addIndividualModule = (currentModule: Module) => {\n                if (!mapNames[currentModule.moduleName]) {\n                    mapNames[currentModule.moduleName] = true;\n                    allModules.push(currentModule);\n                    ModuleRegistry.__register(currentModule, moduleBased, gridId);\n                }\n            };\n\n            addIndividualModule(mod);\n            if (mod.dependantModules) {\n                mod.dependantModules.forEach((m) => addModule(moduleBased, m, gridId));\n            }\n        };\n\n        addModule(\n            !!passedViaConstructor?.length || !ModuleRegistry.__isPackageBased(),\n            CommunityFeaturesModule,\n            undefined\n        );\n\n        if (passedViaConstructor) {\n            passedViaConstructor.forEach((m) => addModule(true, m, gridId));\n        }\n\n        if (registered) {\n            registered.forEach((m) => addModule(!ModuleRegistry.__isPackageBased(), m, undefined));\n        }\n\n        return allModules;\n    }\n\n    private registerModuleUserComponents(context: Context, registeredModules: Module[]): void {\n        const moduleUserComps: ComponentMeta[] = this.extractModuleEntity<ComponentMeta>(registeredModules, (module) =>\n            module.userComponents ? module.userComponents : []\n        );\n\n        const registry = context.getBean('userComponentRegistry');\n        moduleUserComps.forEach((compMeta) => {\n            registry.registerDefaultComponent(compMeta.name, compMeta.classImp);\n        });\n    }\n\n    private registerModuleApiFunctions(context: Context, registeredModules: Module[]): void {\n        const apiFunctionService = context.getBean('apiFunctionService');\n        registeredModules.forEach((module) => {\n            const apiFunctions = module.apiFunctions ?? {};\n            const names = Object.keys(apiFunctions) as ApiFunctionName[];\n            names.forEach((name) => {\n                apiFunctionService?.addFunction(name, apiFunctions[name]!);\n            });\n        });\n    }\n\n    private createProvidedBeans(eGridDiv: HTMLElement, gridOptions: GridOptions, params?: GridParams): any {\n        let frameworkOverrides = params ? params.frameworkOverrides : null;\n        if (_missing(frameworkOverrides)) {\n            frameworkOverrides = new VanillaFrameworkOverrides();\n        }\n\n        const seed = {\n            gridOptions: gridOptions,\n            eGridDiv: eGridDiv,\n            globalEventListener: params ? params.globalEventListener : null,\n            globalSyncEventListener: params ? params.globalSyncEventListener : null,\n            frameworkOverrides: frameworkOverrides,\n        };\n        if (params && params.providedBeanInstances) {\n            Object.assign(seed, params.providedBeanInstances);\n        }\n\n        return seed;\n    }\n\n    private createBeansList(\n        rowModelType: RowModelType | undefined = 'clientSide',\n        registeredModules: Module[],\n        gridId: string\n    ): SingletonBean[] | undefined {\n        // only load beans matching the required row model\n        const rowModelModules = registeredModules.filter(\n            (module) => !module.rowModel || module.rowModel === rowModelType\n        );\n\n        // assert that the relevant module has been loaded\n        const rowModelModuleNames: Record<RowModelType, ModuleNames> = {\n            clientSide: ModuleNames.ClientSideRowModelModule,\n            infinite: ModuleNames.InfiniteRowModelModule,\n            serverSide: ModuleNames.ServerSideRowModelModule,\n            viewport: ModuleNames.ViewportRowModelModule,\n        };\n\n        if (!rowModelModuleNames[rowModelType]) {\n            _errorOnce('Could not find row model for rowModelType = ', rowModelType);\n            return;\n        }\n\n        if (\n            !ModuleRegistry.__assertRegistered(\n                rowModelModuleNames[rowModelType],\n                `rowModelType = '${rowModelType}'`,\n                gridId\n            )\n        ) {\n            return;\n        }\n\n        // beans should only contain SERVICES, it should NEVER contain COMPONENTS\n        const beans: SingletonBean[] = [\n            RowPositionUtils,\n            CellPositionUtils,\n            HeaderPositionUtils,\n            GridDestroyService,\n            ApiFunctionService,\n            UserComponentRegistry,\n            AgComponentUtils,\n            ComponentMetadataProvider,\n            ResizeObserverService,\n            UserComponentFactory,\n            RowContainerHeightService,\n            HorizontalResizeService,\n            LocaleService,\n            PinnedRowModel,\n            DragService,\n            VisibleColsService,\n            EventService,\n            GridOptionsService,\n            PopupService,\n            SelectionService,\n            ColumnModel,\n            HeaderNavigationService,\n            PageBoundsService,\n            PageBoundsListener,\n            RowRenderer,\n            ExpressionService,\n            ColumnFactory,\n            NavigationService,\n            ValueCache,\n            ValueService,\n            AutoWidthCalculator,\n            StandardMenuFactory,\n            DragAndDropService,\n            FocusService,\n            MouseEventService,\n            Environment,\n            CellNavigationService,\n            StylingService,\n            ScrollVisibleService,\n            SortController,\n            ColumnHoverService,\n            ColumnAnimationService,\n            SelectableService,\n            ChangeDetectionService,\n            AnimationFrameService,\n            ColumnDefFactory,\n            RowCssClassCalculator,\n            RowNodeSorter,\n            CtrlsService,\n            PinnedWidthService,\n            RowNodeEventThrottle,\n            CtrlsFactory,\n            SyncService,\n            OverlayService,\n            ExpansionService,\n            ApiEventService,\n            AriaAnnouncementService,\n            MenuService,\n            ColumnApplyStateService,\n            ColumnEventDispatcher,\n            ColumnMoveService,\n            ColumnAutosizeService,\n            ColumnGetStateService,\n            ColumnGroupStateService,\n            ColumnSizeService,\n            FuncColsService,\n            ColumnNameService,\n            ColumnViewportService,\n            PivotResultColsService,\n        ];\n\n        const moduleBeans = this.extractModuleEntity(rowModelModules, (module) => (module.beans ? module.beans : []));\n        beans.push(...moduleBeans);\n\n        // check for duplicates, as different modules could include the same beans that\n        // they depend on, eg ClientSideRowModel in enterprise, and ClientSideRowModel in community\n        const beansNoDuplicates: SingletonBean[] = [];\n        beans.forEach((bean) => {\n            if (beansNoDuplicates.indexOf(bean) < 0) {\n                beansNoDuplicates.push(bean);\n            }\n        });\n\n        return beansNoDuplicates;\n    }\n\n    private extractModuleEntity<T>(moduleEntities: Module[], extractor: (module: Module) => T[]) {\n        return ([] as T[]).concat(...moduleEntities.map(extractor));\n    }\n}\n", "import type { NamedBean } from '../context/bean';\nimport { BeanStub } from '../context/beanStub';\nimport type { BeanCollection } from '../context/context';\nimport type { IClientSideRowModel } from '../interfaces/iClientSideRowModel';\nimport type { IInfiniteRowModel } from '../interfaces/iInfiniteRowModel';\nimport type { IRowModel } from '../interfaces/iRowModel';\nimport type { IServerSideRowModel } from '../interfaces/iServerSideRowModel';\n\nexport class RowModelHelperService extends BeanStub implements NamedBean {\n    beanName = 'rowModelHelperService' as const;\n\n    private rowModel: IRowModel;\n    private clientSideRowModel: IClientSideRowModel;\n    private infiniteRowModel: IInfiniteRowModel;\n    private serverSideRowModel: IServerSideRowModel;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.rowModel = beans.rowModel;\n    }\n\n    public postConstruct(): void {\n        const rowModel = this.rowModel;\n        switch (rowModel.getType()) {\n            case 'clientSide':\n                this.clientSideRowModel = rowModel as IClientSideRowModel;\n                break;\n            case 'infinite':\n                this.infiniteRowModel = rowModel as IInfiniteRowModel;\n                break;\n            case 'serverSide':\n                this.serverSideRowModel = rowModel as IServerSideRowModel;\n                break;\n        }\n    }\n\n    public getClientSideRowModel(): IClientSideRowModel | undefined {\n        return this.clientSideRowModel;\n    }\n\n    public getInfiniteRowModel(): IInfiniteRowModel | undefined {\n        return this.infiniteRowModel;\n    }\n\n    public getServerSideRowModel(): IServerSideRowModel | undefined {\n        return this.serverSideRowModel;\n    }\n}\n", "import type { BeanCollection } from '../context/context';\n\nexport function expandAll(beans: BeanCollection) {\n    beans.expansionService.expandAll(true);\n}\n\nexport function collapseAll(beans: BeanCollection) {\n    beans.expansionService.expandAll(false);\n}\n\nexport function onRowHeightChanged(beans: BeanCollection) {\n    const clientSideRowModel = beans.rowModelHelperService?.getClientSideRowModel();\n    const serverSideRowModel = beans.rowModelHelperService?.getServerSideRowModel();\n    if (clientSideRowModel) {\n        clientSideRowModel.onRowHeightChanged();\n    } else if (serverSideRowModel) {\n        serverSideRowModel.onRowHeightChanged();\n    }\n}\n", "import type { BeanCollection } from '../context/context';\nimport { _errorOnce } from '../utils/function';\n\nexport function setRowCount(beans: BeanCollection, rowCount: number, maxRowFound?: boolean): void {\n    const serverSideRowModel = beans.rowModelHelperService?.getServerSideRowModel();\n    if (serverSideRowModel) {\n        if (beans.funcColsService.isRowGroupEmpty()) {\n            serverSideRowModel.setRowCount(rowCount, maxRowFound);\n            return;\n        }\n        _errorOnce('setRowCount cannot be used while using row grouping.');\n        return;\n    }\n\n    const infiniteRowModel = beans.rowModelHelperService?.getInfiniteRowModel();\n    if (infiniteRowModel) {\n        infiniteRowModel.setRowCount(rowCount, maxRowFound);\n        return;\n    }\n}\n\nexport function getCacheBlockState(beans: BeanCollection): any {\n    return beans.rowNodeBlockLoader?.getBlockState() ?? {};\n}\n", "import type { Module } from '../interfaces/iModule';\nimport { VERSION } from '../version';\nimport { collapseAll, expandAll, onRowHeightChanged } from './csrmSsrmSharedApi';\nimport { getCacheBlockState, setRowCount } from './ssrmInfiniteSharedApi';\n\n// these modules are not used in core, but are shared between multiple other modules\n\nexport const CsrmSsrmSharedApiModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/csrm-ssrm-shared-api',\n    apiFunctions: {\n        expandAll,\n        collapseAll,\n        onRowHeightChanged,\n    },\n};\n\nexport const SsrmInfiniteSharedApiModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-community/ssrm-infinite-shared-api',\n    apiFunctions: {\n        setRowCount,\n        getCacheBlockState,\n    },\n};\n", "import type { IComponent } from '../../interfaces/iComponent';\nimport { _warnOnce } from '../../utils/function';\nimport type { ComponentType } from './componentTypes';\n\n/**\n * B the business interface (ie IHeader)\n * A the agGridComponent interface (ie IHeaderComp). The final object acceptable by ag-grid\n */\nexport interface FrameworkComponentWrapper {\n    wrap<A extends IComponent<any>>(\n        frameworkComponent: { new (): any } | null,\n        methodList: string[],\n        optionalMethodList: string[],\n        componentType: ComponentType\n    ): A;\n}\n\nexport interface WrappableInterface {\n    hasMethod(name: string): boolean;\n\n    callMethod(name: string, args: IArguments): void;\n\n    addMethod(name: string, callback: (...args: any[]) => any): void;\n}\n\nexport abstract class BaseComponentWrapper<F extends WrappableInterface> implements FrameworkComponentWrapper {\n    public wrap<A extends IComponent<any>>(\n        OriginalConstructor: { new (): any },\n        mandatoryMethodList: string[],\n        optionalMethodList: string[] = [],\n        componentType: ComponentType\n    ): A {\n        const wrapper: F = this.createWrapper(OriginalConstructor, componentType);\n\n        mandatoryMethodList.forEach((methodName) => {\n            this.createMethod(wrapper, methodName, true);\n        });\n\n        optionalMethodList.forEach((methodName) => {\n            this.createMethod(wrapper, methodName, false);\n        });\n\n        return wrapper as any as A;\n    }\n\n    public unwrap(comp: any): any {\n        return comp;\n    }\n\n    abstract createWrapper(OriginalConstructor: { new (): any }, componentType: ComponentType): F;\n\n    private createMethod(wrapper: F, methodName: string, mandatory: boolean): void {\n        wrapper.addMethod(methodName, this.createMethodProxy(wrapper, methodName, mandatory));\n    }\n\n    protected createMethodProxy(wrapper: F, methodName: string, mandatory: boolean): (...args: any[]) => any {\n        return function () {\n            if (wrapper.hasMethod(methodName)) {\n                // eslint-disable-next-line\n                return wrapper.callMethod(methodName, arguments);\n            }\n\n            if (mandatory) {\n                _warnOnce('Framework component is missing the method ' + methodName + '()');\n            }\n            // multiple features rely on this returning `null` rather than `undefined`,\n            // so that they can differentiate whether the underlying component has implemented a void method or not\n            return null;\n        };\n    }\n}\n", "import type { RowNode } from '../entities/rowNode';\n\n/**\n * Gets called by: a) ClientSideNodeManager and b) GroupStage to do sorting.\n * when in ClientSideNodeManager we always have indexes (as this sorts the items the\n * user provided) but when in GroupStage, the nodes can contain filler nodes that\n * don't have order id's\n * @param {RowNode[]} rowNodes\n * @param {Object} rowNodeOrder\n *\n * @returns a boolean representing whether nodes were reordered\n */\nexport function _sortRowNodesByOrder(rowNodes: RowNode[] | null, rowNodeOrder: { [id: string]: number }): boolean {\n    if (!rowNodes) {\n        return false;\n    }\n\n    const comparator = (nodeA: RowNode, nodeB: RowNode) => {\n        const positionA = rowNodeOrder[nodeA.id!];\n        const positionB = rowNodeOrder[nodeB.id!];\n\n        const aHasIndex = positionA !== undefined;\n        const bHasIndex = positionB !== undefined;\n\n        const bothNodesAreUserNodes = aHasIndex && bHasIndex;\n        const bothNodesAreFillerNodes = !aHasIndex && !bHasIndex;\n\n        if (bothNodesAreUserNodes) {\n            // when comparing two nodes the user has provided, they always\n            // have indexes\n            return positionA - positionB;\n        }\n\n        if (bothNodesAreFillerNodes) {\n            // when comparing two filler nodes, we have no index to compare them\n            // against, however we want this sorting to be deterministic, so that\n            // the rows don't jump around as the user does delta updates. so we\n            // want the same sort result. so we use the __objectId - which doesn't make sense\n            // from a sorting point of view, but does give consistent behaviour between\n            // calls. otherwise groups jump around as delta updates are done.\n            // note: previously here we used nodeId, however this gave a strange order\n            // as string ordering of numbers is wrong, so using id based on creation order\n            // as least gives better looking order.\n            return nodeA.__objectId - nodeB.__objectId;\n        }\n\n        if (aHasIndex) {\n            return 1;\n        }\n\n        return -1;\n    };\n\n    // check if the list first needs sorting\n    let rowNodeA: RowNode;\n    let rowNodeB: RowNode;\n    let atLeastOneOutOfOrder = false;\n\n    for (let i = 0; i < rowNodes.length - 1; i++) {\n        rowNodeA = rowNodes[i];\n        rowNodeB = rowNodes[i + 1];\n\n        if (comparator(rowNodeA, rowNodeB) > 0) {\n            atLeastOneOutOfOrder = true;\n            break;\n        }\n    }\n\n    if (atLeastOneOutOfOrder) {\n        rowNodes.sort(comparator);\n        return true;\n    }\n    return false;\n}\n", "export interface ChartGroupsDef {\n    // community chart groups\n    columnGroup?: ('column' | 'stackedColumn' | 'normalizedColumn')[];\n    barGroup?: ('bar' | 'stackedBar' | 'normalizedBar')[];\n    pieGroup?: ('pie' | 'donut' | 'doughnut')[];\n    lineGroup?: 'line'[];\n    scatterGroup?: ('scatter' | 'bubble')[];\n    areaGroup?: ('area' | 'stackedArea' | 'normalizedArea')[];\n    combinationGroup?: ('columnLineCombo' | 'areaColumnCombo' | 'customCombo')[];\n\n    // enterprise chart groups\n    polarGroup?: ('radarLine' | 'radarArea' | 'nightingale' | 'radialColumn' | 'radialBar')[];\n    statisticalGroup?: ('boxPlot' | 'histogram' | 'rangeBar' | 'rangeArea')[];\n    hierarchicalGroup?: ('treemap' | 'sunburst')[];\n    specializedGroup?: ('heatmap' | 'waterfall')[];\n}\n\nexport type ChartToolPanelName = 'settings' | 'data' | 'format';\n\n/** Configuration for the `Chart` panel */\nexport interface ChartSettingsPanel {\n    /** Chart groups customisations for which charts are displayed in the chart panel */\n    chartGroupsDef?: ChartGroupsDef;\n}\n\nexport type ChartFormatPanelGroup =\n    | 'chart'\n    | 'titles'\n    | 'legend'\n    | 'axis'\n    | 'horizontalAxis'\n    | 'verticalAxis'\n    | 'series'\n    | 'navigator';\n\nexport type ChartDataPanelGroup = 'categories' | 'series' | 'seriesChartType' | 'chartSpecific';\n\nexport interface ChartPanelGroupDef<GroupType> {\n    /** The panel group type */\n    type: GroupType;\n    /** Whether the panel group is open by default. If not specified, it is closed */\n    isOpen?: boolean;\n}\n\n/** Configuration for the `Customize` panel */\nexport interface ChartFormatPanel {\n    /** The customize panel group configurations, their order and whether they are shown. If not specified shows all groups */\n    groups?: ChartPanelGroupDef<ChartFormatPanelGroup>[];\n}\n\n/** Configuration for the `Set Up` panel */\nexport interface ChartDataPanel {\n    /** The set up panel group configurations, their order and whether they are shown. If not specified shows all groups */\n    groups?: ChartPanelGroupDef<ChartDataPanelGroup>[];\n}\n\nexport interface ChartToolPanelsDef {\n    /** Customisations for the chart panel and chart menu items in the Context Menu. */\n    settingsPanel?: ChartSettingsPanel;\n    /** Customisations for the customize panel */\n    formatPanel?: ChartFormatPanel;\n    /** Customisations for the set up panel */\n    dataPanel?: ChartDataPanel;\n    /** The ordered list of panels to show in the chart tool panels. If none specified, all panels are shown */\n    panels?: ChartToolPanelName[];\n    /** The panel to open by default when the chart loads. If none specified, the tool panel is hidden by default and the first panel is open when triggered. */\n    defaultToolPanel?: ChartToolPanelName;\n}\n\nexport type CrossFilterChartType =\n    | 'column'\n    | 'bar'\n    | 'line'\n    | 'scatter'\n    | 'bubble'\n    | 'pie'\n    | 'donut'\n    | 'doughnut'\n    | 'area';\n\nexport type ChartToolPanelMenuOptions = 'chartSettings' | 'chartData' | 'chartFormat';\nexport type ChartToolbarMenuItemOptions = 'chartLink' | 'chartUnlink' | 'chartDownload' | 'chartMenu';\n\nexport interface SeriesChartType {\n    colId: string;\n    chartType: ChartType;\n    secondaryAxis?: boolean;\n}\n\nexport class ChartMappings {\n    public static readonly CHART_TYPE_TO_SERIES_TYPE = {\n        column: 'bar',\n        groupedColumn: 'bar',\n        stackedColumn: 'bar',\n        normalizedColumn: 'bar',\n        bar: 'bar',\n        groupedBar: 'bar',\n        stackedBar: 'bar',\n        normalizedBar: 'bar',\n        line: 'line',\n        scatter: 'scatter',\n        bubble: 'bubble',\n        pie: 'pie',\n        donut: 'donut',\n        doughnut: 'donut',\n        area: 'area',\n        stackedArea: 'area',\n        normalizedArea: 'area',\n        histogram: 'histogram',\n        radarLine: 'radar-line',\n        radarArea: 'radar-area',\n        nightingale: 'nightingale',\n        radialColumn: 'radial-column',\n        radialBar: 'radial-bar',\n        sunburst: 'sunburst',\n        rangeBar: 'range-bar',\n        rangeArea: 'range-area',\n        boxPlot: 'box-plot',\n        treemap: 'treemap',\n        heatmap: 'heatmap',\n        waterfall: 'waterfall',\n    } as const;\n\n    public static readonly COMBO_CHART_TYPES = ['columnLineCombo', 'areaColumnCombo', 'customCombo'] as const;\n\n    public static readonly SERIES_GROUP_TYPES = ['grouped', 'stacked', 'normalized'] as const;\n}\n\nexport type ChartType =\n    | keyof typeof ChartMappings.CHART_TYPE_TO_SERIES_TYPE\n    | (typeof ChartMappings.COMBO_CHART_TYPES)[number];\n\nexport type SeriesGroupType = (typeof ChartMappings.SERIES_GROUP_TYPES)[number];\n", "import type { ICellRendererParams } from '../rendering/cellRenderers/iCellRenderer';\n\nexport interface ISparklineCellRendererParams<TData = any, TContext = any>\n    extends ICellRendererParams<TData, TContext> {\n    sparklineOptions?: SparklineOptions;\n}\n\nexport type SparklineOptions =\n    | LineSparklineOptions\n    | AreaSparklineOptions\n    | ColumnSparklineOptions\n    | BarSparklineOptions;\n\nexport interface BaseSparklineOptions {\n    /** The key to use to retrieve X values from the data. This will only be used if the data array contains objects with key-value pairs.\n     * @default 'x'\n     */\n    xKey?: string;\n    /** The key to use to retrieve Y values from the data. This will only be used if the data array contains objects with key-value pairs.\n     * @default 'y'\n     */\n    yKey?: string;\n    /** Configuration for the padding in pixels shown around the sparklines. */\n    padding?: PaddingOptions;\n    /** The options for the axis line in the sparklines. */\n    axis?: SparklineAxisOptions;\n    /** The configuration for the highlighting used when the items are hovered over. */\n    highlightStyle?: HighlightStyleOptions;\n    /** Configuration for the tooltips. */\n    tooltip?: SparklineTooltipOptions;\n}\n\nexport interface LineSparklineOptions extends BaseSparklineOptions {\n    /** The type of sparklines to create, in this case it would be `'line'`. */\n    type?: 'line';\n    /** The configuration for the line. */\n    line?: SparklineLineOptions;\n    /** The configuration for the marker styles. */\n    marker?: SparklineMarkerOptions;\n    /** The configuration for the crosshairs. */\n    crosshairs?: SparklineCrosshairsOptions;\n}\n\nexport interface AreaSparklineOptions extends BaseSparklineOptions {\n    /** The type of sparklines to create, in this case it would be `'area'`. */\n    type?: 'area';\n    /** The CSS colour value for the fill of the area.\n     * @default 'rgba(124, 181, 236, 0.25)'\n     */\n    fill?: string;\n    /** The configuration for the line. */\n    line?: SparklineLineOptions;\n    /** The configuration for the marker styles. */\n    marker?: SparklineMarkerOptions;\n    /** The configuration for the crosshairs. */\n    crosshairs?: SparklineCrosshairsOptions;\n}\n\nexport interface ColumnSparklineOptions extends BaseSparklineOptions {\n    /** The type of sparklines to create, in this case it would be `'column'`. */\n    type?: 'column';\n    /** The CSS colour value for the fill of the columns.\n     * @default 'rgb(124, 181, 236)'\n     */\n    fill?: string;\n    /** The CSS colour value for the outline of the columns.\n     * @default 'silver'\n     */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the columns.\n     * @default 0\n     */\n    strokeWidth?: number;\n    /** The size of the gap between the columns as a proportion, between 0 and 1. This value is a fraction of the \u201Cstep\u201D, which is the interval between the start of a band and the start of the next band.\n     * @default 0.1\n     */\n    paddingInner?: number;\n    /** The padding on the outside i.e. left and right of the first and last columns, to leave some room for the axis. In association with `paddingInner`, this value can be between 0 and 1.\n     * @default 0.2\n     */\n    paddingOuter?: number;\n    /** User override for the automatically determined domain (based on data min and max values). Only applied to `number` axes.\n     * Used to interpolate the numeric pixel values corresponding to each data value.\n     */\n    valueAxisDomain?: [number, number];\n    /** A callback function to return format styles of type ColumnFormat, based on the data represented by individual columns. */\n    formatter?: SparklineColumnFormatter;\n    /** Configuration for the labels. */\n    label?: SparklineLabelOptions;\n}\n\nexport interface BarSparklineOptions extends BaseSparklineOptions {\n    /** The type of sparklines to create, in this case it would be `'bar'`. */\n    type?: 'bar';\n    /** The CSS colour value for the fill of the bars.\n     * @default 'rgb(124, 181, 236)'\n     */\n    fill?: string;\n    /** The CSS colour value for the outline of the bars.\n     * Default `'silver'`\n     */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the bars.\n     * @default 0\n     */\n    strokeWidth?: number;\n    /** The size of the gap between the bars as a proportion, between 0 and 1. This value is a fraction of the \u201Cstep\u201D, which is the interval between the start of a band and the start of the next band.\n     * @default 0.1\n     */\n    paddingInner?: number;\n    /** The padding on the outside i.e. left and right of the first and last bars, to leave some room for the axis. In association with `paddingInner`, this value can be between 0 and 1.\n     * @default 0.2\n     */\n    paddingOuter?: number;\n    /** User override for the automatically determined domain (based on data min and max values). Only applied to `number` axes.\n     * Used to interpolate the numeric pixel values corresponding to each data value.\n     */\n    valueAxisDomain?: [number, number];\n    /** A callback function to return format styles of type BarFormat, based on the data represented by individual bars. */\n    formatter?: SparklineBarFormatter;\n    /** Configuration for the labels. */\n    label?: SparklineLabelOptions;\n}\n\nexport interface SparklineLabelOptions {\n    /**\n     * Set to true to enable labels.\n     * @default false\n     */\n    enabled?: boolean;\n    /**\n     * Set size of the font.\n     * @default 8\n     */\n    fontSize?: number;\n    /**\n     * Specify the font for the label text.\n     * @default Verdana, sans-serif\n     */\n    fontFamily?: string;\n    /** Specify the font style for the label text. */\n    fontStyle?: 'normal' | 'italic' | 'oblique';\n    /** Set how thick or thin characters in label text should be displayed. */\n    fontWeight?:\n        | 'normal'\n        | 'bold'\n        | 'bolder'\n        | 'lighter'\n        | '100'\n        | '200'\n        | '300'\n        | '400'\n        | '500'\n        | '600'\n        | '700'\n        | '800'\n        | '900';\n    /**\n     * Set the color of the label text. The color can be specified by a color name, a HEX or an RGB value.\n     * @default rgba(70, 70, 70, 1)\n     */\n    color?: string;\n    /**\n     * A callback function to return the text to be displayed as the label, based on the value represented by the column or bar.\n     * By default the values are simply stringified. */\n    formatter?: (params: LabelFormatterParams) => string;\n    /**\n     * Where to render labels relative to the segments.\n     * @default insideEnd\n     */\n    placement?: BarColumnLabelPlacement;\n}\n\nexport interface LabelFormatterParams {\n    /** The Y value of the data point. */\n    value: number | undefined;\n}\n\nexport enum BarColumnLabelPlacement {\n    InsideBase = 'insideBase',\n    InsideEnd = 'insideEnd',\n    Center = 'center',\n    OutsideEnd = 'outsideEnd',\n}\n\nexport interface PaddingOptions {\n    /** The number of pixels of padding at the top of the sparkline area.\n     * @default 3\n     */\n    top?: number;\n    /** The number of pixels of padding at the right of the sparkline area.\n     * @default 3\n     */\n    right?: number;\n    /** The number of pixels of padding at the bottom of the sparkline area.\n     * @default 3\n     */\n    bottom?: number;\n    /** The number of pixels of padding at the left of the sparkline area.\n     * @default 3\n     */\n    left?: number;\n}\n\nexport interface SparklineAxisOptions {\n    /** The type of axis used to plot the data.\n     * @default 'category'\n     */\n    type?: AxisType;\n    /** The CSS colour value for the outline of the axis line.\n     * @default 'rgb(204, 214, 235)'\n     */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the axis line.\n     * @default 1\n     */\n    strokeWidth?: number;\n}\n\nexport type AxisType = 'number' | 'category' | 'time';\n\nexport interface SparklineTooltipOptions {\n    /** Set to false to disable tooltips. */\n    enabled?: boolean;\n    /** The element to place the tooltip into. This can be used to confine the tooltip to a specific area which may be outside of the sparkline grid cell. */\n    container?: HTMLElement;\n    /**\n     * The horizontal distance in pixels between the cursor and the top left corner of the tooltip.\n     * @default 10\n     */\n    xOffset?: number;\n    /**\n     * The vertical distance in pixels between the cursor and the top left corner of the tooltip.\n     * @default 0\n     */\n    yOffset?: number;\n    /** A callback function used to create the content for the tooltips. This function should return an object or a HTML string used to render the tooltip. */\n    renderer?: SparklineTooltipRenderer;\n}\n\nexport type SparklineTooltipRenderer = (params: TooltipRendererParams) => TooltipRendererResult;\nexport interface TooltipRendererResult {\n    /** Set to false to disable individual tooltip. */\n    enabled?: boolean;\n    /** The content to display in each tooltip. */\n    content?: string;\n    /** The title of the tooltip. */\n    title?: string;\n    /** The CSS color for the title text. */\n    color?: string;\n    /** The CSS color for the background of the tooltip title. */\n    backgroundColor?: string;\n    /** The opacity of the background for the tooltip title. */\n    opacity?: number;\n}\nexport interface TooltipRendererParams {\n    /** The grid context, includes row data, giving access to data from other columns in the same row. */\n    context?: any;\n    /** The raw datum associated with the point. */\n    datum: any;\n    /** The X value of the data point. */\n    xValue: any;\n    /** The Y value of the data point. */\n    yValue: any;\n}\n\nexport interface SparklineLineOptions {\n    /** The CSS colour value for the line.\n     *  @default 'rgb(124, 181, 236)'\n     */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the line.\n     * @default 1\n     */\n    strokeWidth?: number;\n}\n\nexport interface HighlightStyleOptions {\n    /**\n     * The width in pixels of the markers when hovered over. This is only for the Line and Area sparklines as Column and Bar sparklines do not have markers.\n     * @default 6\n     */\n    size?: number;\n    /**\n     * The fill colour of the markers, columns or bars when hovered over. Use `undefined` for no highlight fill.\n     * @default 'yellow'\n     */\n    fill?: string;\n    /**\n     * The CSS colour value for the outline of the markers, columns or bars when hovered over. Use `undefined` for no highlight stroke.\n     * @default 'silver'\n     */\n    stroke?: string;\n    /**\n     * The thickness in pixels for the stroke of the markers, columns or bars when hovered over.\n     * @default 1\n     */\n    strokeWidth?: number;\n}\nexport interface SparklineCrosshairsOptions {\n    xLine?: CrosshairLineOptions;\n    yLine?: CrosshairLineOptions;\n}\nexport interface CrosshairLineOptions {\n    /**\n     * Set to true to show crosshair line.\n     * @default false\n     */\n    enabled?: boolean;\n    /**\n     * The CSS colour value for the crosshair line.\n     * @default rgba(0,0,0, 0.54)\n     */\n    stroke?: string;\n    /**\n     * The thickness in pixels for the crosshair line.\n     * @default 1\n     */\n    strokeWidth?: number;\n    /**\n     * Defines how the crosshair stroke is rendered. This can be one of the lineDash style options.\n     * The default is `solid`, this renders a solid stroke with no gaps.\n     * @default 'solid'\n     */\n    lineDash?:\n        | 'dash'\n        | 'dashDot'\n        | 'dashDotDot'\n        | 'dot'\n        | 'longDash'\n        | 'longDashDot'\n        | 'longDashDotDot'\n        | 'shortDash'\n        | 'shortDashDot'\n        | 'shortDashDotDot'\n        | 'shortDot'\n        | 'solid';\n    /**\n     * The shape used to draw the end points of the crosshair line.\n     * The options include `butt` (the ends of the line are squared off at the endpoints), `round` (the ends of the line are rounded) and `square` (the ends of the line are squared off by adding a box with width equal to the line's strokeWidth and height equal to half the line's strokeWidth).\n     * @default butt\n     */\n    lineCap?: 'round' | 'square' | 'butt';\n}\n\nexport type SparklineColumnFormatter = (params: ColumnFormatterParams) => ColumnFormat;\nexport type SparklineBarFormatter = (params: BarFormatterParams) => BarFormat;\nexport interface ColumnFormatterParams {\n    /** The raw data associated with the specific column. */\n    datum: any;\n    /** The X value of the data point. */\n    xValue: any;\n    /** The Y value of the data point. */\n    yValue: any;\n    /** The width of the column in pixels. */\n    width: number;\n    /** The height of the column in pixels. */\n    height: number;\n    /** Whether or not the column is a minimum point. */\n    min?: boolean;\n    /** Whether or not the column is a maximum point. */\n    max?: boolean;\n    /** Whether or not the column represents the first data point. */\n    first?: boolean;\n    /** Whether or not the column represents the last data point. */\n    last?: boolean;\n    /** The CSS colour value for the fill of the individual column. */\n    fill?: string;\n    /** The CSS colour value for the outline of the individual column. */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the individual column. */\n    strokeWidth: number;\n    /** Whether or not the column is highlighted. */\n    highlighted: boolean;\n}\n\nexport interface ColumnFormat {\n    /** The CSS colour value for the fill of the individual column. */\n    fill?: string;\n    /** The CSS colour value for the outline of the individual column. */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the individual column.*/\n    strokeWidth?: number;\n}\n\nexport interface BarFormatterParams {\n    /** The raw data associated with the specific bar. */\n    datum: any;\n    /** The X value of the data point. */\n    xValue: any;\n    /** The Y value of the data point. */\n    yValue: any;\n    /** The width of the bar in pixels. */\n    width: number;\n    /** The height of the bar in pixels. */\n    height: number;\n    /** Whether or not the bar is a minimum point. */\n    min?: boolean;\n    /** Whether or not the bar is a maximum point. */\n    max?: boolean;\n    /** Whether or not the bar represents the first data point. */\n    first?: boolean;\n    /** Whether or not the bar represents the last data point. */\n    last?: boolean;\n    /** The CSS colour value for the fill of the individual bar. */\n    fill?: string;\n    /** The CSS colour value for the outline of the individual bar. */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the individual bar. */\n    strokeWidth: number;\n    /** Whether or not the bar is highlighted. */\n    highlighted: boolean;\n}\nexport interface BarFormat {\n    /** The CSS colour value for the fill of the individual bar. */\n    fill?: string;\n    /** The CSS colour value for the outline of the individual bar. */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the individual bar.*/\n    strokeWidth?: number;\n}\n\nexport interface SparklineMarkerOptions {\n    /** By default this is set to `true` whilst marker size is set to `0`, which means the markers are present but not visible.\n     * @default true\n     */\n    enabled?: boolean;\n    /** The shape of the markers.\n     * @default 'circle'\n     */\n    shape?: string;\n    /** The width in pixels of markers. By default this is `0`, increase the size to make markers visible.\n     * @default 0\n     */\n    size?: number;\n    /** The CSS colour value for the fill of the markers.\n     * @default 'rgb(124, 181, 236)'\n     */\n    fill?: string;\n    /** The CSS colour value for the outline of the markers.\n     * @default 'rgb(124, 181, 236)'\n     */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the markers.\n     * @default 1\n     */\n    strokeWidth?: number;\n    /** A callback function to return format styles for individual markers. */\n    formatter?: SparklineMarkerFormatter;\n}\n\nexport type SparklineMarkerFormatter = (params: MarkerFormatterParams) => MarkerFormat;\nexport interface MarkerFormatterParams {\n    /** The raw data associated with the specific marker. */\n    datum: any;\n    /** The X value of the data point. */\n    xValue: any;\n    /** The Y value of the data point. */\n    yValue: any;\n    /** Whether or not the marker is a minimum point. */\n    min?: boolean;\n    /** Whether or not the marker is a maximum point. */\n    max?: boolean;\n    /** Whether or not the marker represents the first data point. */\n    first?: boolean;\n    /** Whether or not the marker represents the last data point. */\n    last?: boolean;\n    /** The CSS colour value for the fill of the individual marker. */\n    fill?: string;\n    /** The CSS colour value for the outline of the individual marker. */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the individual marker. */\n    strokeWidth: number;\n    /** The width in pixels of the individual marker. */\n    size: number;\n    /** Whether or not the marker is highlighted. */\n    highlighted: boolean;\n}\n\nexport interface MarkerFormat {\n    /** Set to false to make marker invisible. */\n    enabled?: boolean;\n    /** The width in pixels of the individual marker. */\n    size?: number;\n    /** The CSS colour value for the fill of the individual marker. */\n    fill?: string;\n    /** The CSS colour value for the outline of the individual marker. */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the individual marker.*/\n    strokeWidth?: number;\n}\n", "// to satisfy server side compilation\ndeclare let global: any;\nconst globalObj = typeof global === 'undefined' ? {} : global;\nglobalObj.HTMLElement = typeof HTMLElement === 'undefined' ? {} : HTMLElement;\nglobalObj.HTMLButtonElement = typeof HTMLButtonElement === 'undefined' ? {} : HTMLButtonElement;\nglobalObj.HTMLSelectElement = typeof HTMLSelectElement === 'undefined' ? {} : HTMLSelectElement;\nglobalObj.HTMLInputElement = typeof HTMLInputElement === 'undefined' ? {} : HTMLInputElement;\nglobalObj.Node = typeof Node === 'undefined' ? {} : Node;\nglobalObj.MouseEvent = typeof MouseEvent === 'undefined' ? {} : MouseEvent;\n\n// columns\nexport { ColumnFactory } from './columns/columnFactory';\nexport { ColumnModel } from './columns/columnModel';\nexport { ColumnAutosizeService } from './columns/columnAutosizeService';\nexport { FuncColsService } from './columns/funcColsService';\nexport {\n    ColumnApplyStateService,\n    ColumnState,\n    ColumnStateParams,\n    ApplyColumnStateParams,\n} from './columns/columnApplyStateService';\nexport { ColumnMoveService } from './columns/columnMoveService';\nexport { ColumnNameService } from './columns/columnNameService';\nexport { IShowRowGroupColsService, IColumnDropZonesService } from './interfaces/iShowRowGroupColsService';\nexport { PivotResultColsService } from './columns/pivotResultColsService';\nexport { ColumnSizeService, IColumnLimit, ISizeColumnsToFitParams } from './columns/columnSizeService';\nexport { ColumnKeyCreator } from './columns/columnKeyCreator';\nexport { VisibleColsService } from './columns/visibleColsService';\nexport { GroupInstanceIdCreator } from './columns/groupInstanceIdCreator';\nexport { GROUP_AUTO_COLUMN_ID } from './columns/columnUtils';\nexport { IAutoColService } from './interfaces/iAutoColService';\nexport {\n    SizeColumnsToFitGridColumnLimits,\n    SizeColumnsToContentStrategy,\n    SizeColumnsToFitProvidedWidthStrategy,\n    SizeColumnsToFitGridStrategy,\n} from './interfaces/autoSizeStrategy';\nexport { IRenderStatusService } from './interfaces/renderStatusService';\n\n// components\nexport { ComponentUtil, _combineAttributesAndGridOptions, _processOnChange } from './components/componentUtil';\nexport { ComponentSelector, AgComponentSelector, RefPlaceholder, ComponentEvent } from './widgets/component';\n\nexport { UserComponentRegistry } from './components/framework/userComponentRegistry';\nexport { UserComponentFactory, UserCompDetails } from './components/framework/userComponentFactory';\nexport { ComponentType } from './components/framework/componentTypes';\nexport { _unwrapUserComp } from './components/framework/unwrapUserComp';\n\n// context\nexport { BeanStub } from './context/beanStub';\nexport { Bean, NamedBean } from './context/bean';\nexport { Context, BeanName, SingletonBean, BeanCollection } from './context/context';\n\n// excel\nexport {\n    ColumnWidthCallbackParams,\n    RowHeightCallbackParams,\n    IExcelCreator,\n    ExcelAlignment,\n    ExcelBorder,\n    ExcelBorders,\n    ExcelCell,\n    ExcelColumn,\n    ExcelContentType,\n    ExcelData,\n    ExcelDataType,\n    ExcelExportParams,\n    ExcelHeaderFooterConfig,\n    ExcelHeaderFooter,\n    ExcelHeaderFooterContent,\n    ExcelImage,\n    ExcelImagePosition,\n    ExcelHeaderFooterImage,\n    ExcelSheetMargin,\n    ExcelExportMultipleSheetParams,\n    ExcelSheetPageSetup,\n    ExcelFont,\n    ExcelInterior,\n    ExcelNumberFormat,\n    ExcelOOXMLDataType,\n    ExcelOOXMLTemplate,\n    ExcelProtection,\n    ExcelRelationship,\n    ExcelFactoryMode,\n    ExcelRow,\n    ExcelStyle,\n    ExcelTable,\n    ExcelWorksheet,\n    ExcelTableConfig,\n    ExcelSheetNameGetter,\n    ExcelSheetNameGetterParams,\n} from './interfaces/iExcelCreator';\n\n// dragAndDrop\nexport {\n    DragAndDropService,\n    DragSourceType,\n    DropTarget,\n    DragSource,\n    DragItem,\n    DraggingEvent,\n    DragAndDropIcon,\n} from './dragAndDrop/dragAndDropService';\nexport { RowDropZoneParams, RowDropZoneEvents } from './gridBodyComp/rowDragFeature';\nexport { DragService, DragListenerParams } from './dragAndDrop/dragService';\nexport { IRowDragItem, RowDragComp } from './rendering/row/rowDragComp';\n\n// entities\nexport { Column, ColumnPinnedType, ColumnGroup, ProvidedColumnGroup, ColumnGroupShowType } from './interfaces/iColumn';\nexport { AgColumn, isColumn } from './entities/agColumn';\nexport { AgColumnGroup, isColumnGroup } from './entities/agColumnGroup';\nexport { AgProvidedColumnGroup, isProvidedColumnGroup } from './entities/agProvidedColumnGroup';\nexport { RowNode } from './entities/rowNode';\nexport {\n    RowHighlightPosition,\n    RowPinnedType,\n    IRowNode,\n    RowSelectedEvent,\n    MouseEnterEvent,\n    MouseLeaveEvent,\n    HeightChangedEvent,\n    RowIndexChangedEvent,\n    TopChangedEvent,\n    ExpandedChangedEvent,\n    FirstChildChangedEvent,\n    LastChildChangedEvent,\n    ChildIndexChangedEvent,\n    AllChildrenCountChangedEvent,\n    UiLevelChangedEvent,\n    DataChangedEvent,\n    CellChangedEvent,\n    SelectableChangedEvent,\n    DisplayedChangedEvent,\n    MasterChangedEvent,\n    GroupChangedEvent,\n    HasChildrenChangedEvent,\n    RowHighlightChangedEvent,\n    DraggingChangedEvent,\n} from './interfaces/iRowNode';\n\n// filter\nexport {\n    IFilterDef,\n    IFilterParams,\n    IFilterOptionDef,\n    IDoesFilterPassParams,\n    ProvidedFilterModel,\n    IFilter,\n    IFilterComp,\n    IFilterType,\n    IFloatingFilterType,\n    FilterModel,\n    BaseFilter,\n    BaseFilterParams,\n} from './interfaces/iFilter';\nexport {\n    ISetFilter,\n    SetFilterModel,\n    ISetFilterParams,\n    SetFilterParams,\n    SetFilterValues,\n    SetFilterModelValue,\n    SetFilterValuesFunc,\n    SetFilterValuesFuncParams,\n    ISetFilterTreeListTooltipParams,\n} from './interfaces/iSetFilter';\nexport { FilterManager } from './filter/filterManager';\nexport { FilterRequestSource } from './filter/iColumnFilter';\nexport {\n    IMultiFilter,\n    IMultiFilterModel,\n    IMultiFilterComp,\n    IMultiFilterParams,\n    MultiFilterParams,\n    IMultiFilterDef,\n} from './interfaces/iMultiFilter';\nexport { FilterWrapperComp } from './filter/filterWrapperComp';\n\nexport { IProvidedFilter, IProvidedFilterParams, ProvidedFilterParams } from './filter/provided/iProvidedFilter';\nexport { ProvidedFilter } from './filter/provided/providedFilter';\nexport {\n    ISimpleFilter,\n    ISimpleFilterParams,\n    SimpleFilterParams,\n    ISimpleFilterModel,\n    ICombinedSimpleModel,\n    JoinOperator,\n    IFilterPlaceholderFunctionParams,\n    FilterPlaceholderFunction,\n} from './filter/provided/iSimpleFilter';\nexport { SimpleFilter } from './filter/provided/simpleFilter';\nexport { IScalarFilterParams, ScalarFilterParams } from './filter/provided/iScalarFilter';\nexport { ScalarFilter } from './filter/provided/scalarFilter';\n\nexport {\n    INumberFilterParams,\n    NumberFilterParams,\n    NumberFilterModel,\n    INumberFloatingFilterParams,\n} from './filter/provided/number/iNumberFilter';\nexport { NumberFilter } from './filter/provided/number/numberFilter';\nexport {\n    ITextFilterParams,\n    TextFilterParams,\n    TextFilterModel,\n    TextFormatter,\n    TextMatcherParams,\n    TextMatcher,\n    ITextFloatingFilterParams,\n} from './filter/provided/text/iTextFilter';\nexport { TextFilter } from './filter/provided/text/textFilter';\nexport { IDateFilterParams, DateFilterParams, DateFilterModel } from './filter/provided/date/iDateFilter';\nexport { DateFilter } from './filter/provided/date/dateFilter';\nexport {\n    ColumnFilterModule as _ColumnFilterModule,\n    FilterCoreModule as _FilterCoreModule,\n    FloatingFilterModule as _FloatingFilterModule,\n    ReadOnlyFloatingFilterModule as _ReadOnlyFloatingFilterModule,\n} from './filter/filterModule';\n\nexport {\n    IFloatingFilter,\n    IFloatingFilterParams,\n    IFloatingFilterComp,\n    BaseFloatingFilterChange,\n    IFloatingFilterParent,\n    IFloatingFilterParentCallback,\n    BaseFloatingFilter,\n} from './filter/floating/floatingFilter';\nexport { TextFloatingFilter } from './filter/provided/text/textFloatingFilter';\nexport { HeaderFilterCellComp } from './headerRendering/cells/floatingFilter/headerFilterCellComp';\nexport { getDefaultFloatingFilterType } from './filter/floating/floatingFilterMapper';\n\nexport {\n    AdvancedFilterModel,\n    JoinAdvancedFilterModel,\n    ColumnAdvancedFilterModel,\n    TextAdvancedFilterModel,\n    NumberAdvancedFilterModel,\n    BooleanAdvancedFilterModel,\n    DateAdvancedFilterModel,\n    DateStringAdvancedFilterModel,\n    ObjectAdvancedFilterModel,\n    TextAdvancedFilterModelType,\n    ScalarAdvancedFilterModelType,\n    BooleanAdvancedFilterModelType,\n} from './interfaces/advancedFilterModel';\nexport { IAdvancedFilterCtrl } from './interfaces/iAdvancedFilterCtrl';\nexport { IAdvancedFilterBuilderParams } from './interfaces/iAdvancedFilterBuilderParams';\nexport { IAdvancedFilterService } from './interfaces/iAdvancedFilterService';\n\n// gridPanel\nexport { GridBodyComp } from './gridBodyComp/gridBodyComp';\nexport { GridBodyCtrl, IGridBodyComp, RowAnimationCssClasses } from './gridBodyComp/gridBodyCtrl';\nexport { ScrollVisibleService } from './gridBodyComp/scrollVisibleService';\nexport { MouseEventService } from './gridBodyComp/mouseEventService';\nexport { NavigationService } from './gridBodyComp/navigationService';\nexport { FakeHScrollComp } from './gridBodyComp/fakeHScrollComp';\nexport { FakeVScrollComp } from './gridBodyComp/fakeVScrollComp';\n\n// rowContainer\nexport { RowContainerComp } from './gridBodyComp/rowContainer/rowContainerComp';\nexport {\n    RowContainerName,\n    IRowContainerComp,\n    RowContainerCtrl,\n    RowContainerType,\n    RowContainerOptions,\n    _getRowContainerOptions,\n} from './gridBodyComp/rowContainer/rowContainerCtrl';\n\n// headerRendering\nexport { BodyDropPivotTarget } from './headerRendering/columnDrag/bodyDropPivotTarget';\nexport { BodyDropTarget } from './headerRendering/columnDrag/bodyDropTarget';\nexport { _getHeaderClassesFromColDef, _getToolPanelClassesFromColDef } from './headerRendering/cells/cssClassApplier';\nexport { HeaderRowContainerComp } from './headerRendering/rowContainer/headerRowContainerComp';\nexport { GridHeaderComp } from './headerRendering/gridHeaderComp';\nexport { GridHeaderCtrl, IGridHeaderComp } from './headerRendering/gridHeaderCtrl';\nexport { HeaderRowComp, HeaderRowType } from './headerRendering/row/headerRowComp';\nexport { HeaderRowCtrl, IHeaderRowComp } from './headerRendering/row/headerRowCtrl';\nexport { HeaderCellCtrl, IHeaderCellComp } from './headerRendering/cells/column/headerCellCtrl';\nexport { SortIndicatorComp, SortIndicatorSelector } from './headerRendering/cells/column/sortIndicatorComp';\nexport { IHeaderFilterCellComp } from './headerRendering/cells/floatingFilter/iHeaderFilterCellComp';\nexport { HeaderFilterCellCtrl } from './headerRendering/cells/floatingFilter/headerFilterCellCtrl';\nexport { HeaderGroupCellCtrl, IHeaderGroupCellComp } from './headerRendering/cells/columnGroup/headerGroupCellCtrl';\nexport {\n    AbstractHeaderCellCtrl,\n    IAbstractHeaderCellComp,\n} from './headerRendering/cells/abstractCell/abstractHeaderCellCtrl';\nexport { HeaderRowContainerCtrl, IHeaderRowContainerComp } from './headerRendering/rowContainer/headerRowContainerCtrl';\nexport { HorizontalResizeService } from './headerRendering/common/horizontalResizeService';\nexport { MoveColumnFeature } from './headerRendering/columnDrag/moveColumnFeature';\nexport { StandardMenuFactory } from './headerRendering/cells/column/standardMenu';\n\n// misc\nexport { ResizeObserverService } from './misc/resizeObserverService';\nexport { IImmutableService } from './interfaces/iImmutableService';\nexport { AnimationFrameService } from './misc/animationFrameService';\nexport { AlignedGrid } from './interfaces/iAlignedGrid';\nexport { ExpansionService } from './misc/expansionService';\nexport { MenuService, IContextMenuParams } from './misc/menuService';\n\n// editing / cellEditors\nexport { ICellEditor, ICellEditorComp, ICellEditorParams, BaseCellEditor } from './interfaces/iCellEditor';\nexport { ILargeTextEditorParams } from './edit/cellEditors/iLargeTextCellEditor';\nexport { LargeTextCellEditor } from './edit/cellEditors/largeTextCellEditor';\nexport { PopupEditorWrapper } from './edit/cellEditors/popupEditorWrapper';\nexport { ISelectCellEditorParams } from './edit/cellEditors/iSelectCellEditor';\nexport { SelectCellEditor } from './edit/cellEditors/selectCellEditor';\nexport { ITextCellEditorParams } from './edit/cellEditors/iTextCellEditor';\nexport { TextCellEditor } from './edit/cellEditors/textCellEditor';\nexport { INumberCellEditorParams } from './edit/cellEditors/iNumberCellEditor';\nexport { NumberCellEditor } from './edit/cellEditors/numberCellEditor';\nexport { IDateCellEditorParams } from './edit/cellEditors/iDateCellEditor';\nexport { DateCellEditor } from './edit/cellEditors/dateCellEditor';\nexport { IDateStringCellEditorParams } from './edit/cellEditors/iDateStringCellEditor';\nexport { DateStringCellEditor } from './edit/cellEditors/dateStringCellEditor';\nexport {\n    IRichCellEditorParams,\n    RichCellEditorValuesCallback,\n    RichCellEditorParams,\n    IRichCellEditorRendererParams,\n} from './interfaces/iRichCellEditorParams';\n\nexport { ICellEditorRendererComp, ICellEditorRendererParams } from './interfaces/iCellEditorRenderer';\n\nexport { CheckboxCellEditor } from './edit/cellEditors/checkboxCellEditor';\nexport { EditCoreModule as _EditCoreModule } from './edit/editModule';\n\n// rendering / cellRenderers\nexport {\n    ICellRenderer,\n    ICellRendererFunc,\n    ICellRendererComp,\n    ICellRendererParams,\n    ISetFilterCellRendererParams,\n} from './rendering/cellRenderers/iCellRenderer';\nexport { AnimateShowChangeCellRenderer } from './rendering/cellRenderers/animateShowChangeCellRenderer';\nexport { AnimateSlideCellRenderer } from './rendering/cellRenderers/animateSlideCellRenderer';\nexport {\n    GroupCellRendererParams,\n    IGroupCellRenderer,\n    IGroupCellRendererParams,\n    IGroupCellRendererFullRowParams,\n    IGroupCellRendererCtrl,\n    FooterValueGetterFunc,\n    TotalValueGetterFunc,\n    GroupCheckboxSelectionCallback,\n    GroupCheckboxSelectionCallbackParams,\n} from './interfaces/groupCellRenderer';\n\n// status bar components\nexport {\n    StatusPanelDef,\n    IStatusPanel,\n    IStatusPanelComp,\n    IStatusPanelParams,\n    AggregationStatusPanelAggFunc,\n    IAggregationStatusPanelParams,\n    AggregationStatusPanelParams,\n} from './interfaces/iStatusPanel';\nexport { IStatusBarService } from './interfaces/iStatusBarService';\n\n// tool panel components\nexport {\n    IToolPanel,\n    IToolPanelComp,\n    IToolPanelParams,\n    ToolPanelColumnCompParams,\n    BaseToolPanelParams,\n    IToolPanelColumnCompParams,\n    IToolPanelFiltersCompParams,\n} from './interfaces/iToolPanel';\nexport { IColumnToolPanel } from './interfaces/iColumnToolPanel';\nexport { IFiltersToolPanel } from './interfaces/iFiltersToolPanel';\n\n// overlays\nexport {\n    ILoadingOverlayComp,\n    ILoadingOverlayParams,\n    ILoadingOverlay,\n} from './rendering/overlays/loadingOverlayComponent';\nexport { INoRowsOverlayComp, INoRowsOverlayParams, INoRowsOverlay } from './rendering/overlays/noRowsOverlayComponent';\nexport { OverlayWrapperComponent } from './rendering/overlays/overlayWrapperComponent';\n\n// features\nexport { SetLeftFeature } from './rendering/features/setLeftFeature';\nexport {\n    PositionableFeature,\n    ResizableStructure,\n    ResizableSides,\n    PositionableOptions,\n} from './rendering/features/positionableFeature';\n\n// rendering\nexport { AutoWidthCalculator } from './rendering/autoWidthCalculator';\nexport { CheckboxSelectionComponent } from './rendering/checkboxSelectionComponent';\nexport { CellComp } from './rendering/cell/cellComp';\nexport { CellCtrl, ICellComp } from './rendering/cell/cellCtrl';\nexport { RowCtrl, IRowComp } from './rendering/row/rowCtrl';\nexport {\n    RowRenderer,\n    FlashCellsParams,\n    GetCellRendererInstancesParams,\n    RefreshCellsParams,\n    RedrawRowsParams,\n    GetCellEditorInstancesParams,\n} from './rendering/rowRenderer';\nexport {\n    ILoadingCellRenderer,\n    ILoadingCellRendererComp,\n    ILoadingCellRendererParams,\n} from './rendering/cellRenderers/loadingCellRenderer';\nexport { CssClassManager } from './rendering/cssClassManager';\nexport { CheckboxCellRenderer, ICheckboxCellRendererParams } from './rendering/cellRenderers/checkboxCellRenderer';\n\n// row models\nexport { PinnedRowModel } from './pinnedRowModel/pinnedRowModel';\nexport { RowNodeTransaction } from './interfaces/rowNodeTransaction';\nexport { RowDataTransaction } from './interfaces/rowDataTransaction';\nexport {\n    ServerSideTransaction,\n    ServerSideTransactionResult,\n    ServerSideTransactionResultStatus,\n} from './interfaces/serverSideTransaction';\nexport { LoadCompleteEvent, LoadSuccessParams } from './rowNodeCache/iRowNodeBlock';\nexport { RowNodeBlock } from './rowNodeCache/rowNodeBlock';\nexport { RowNodeBlockLoader } from './rowNodeCache/rowNodeBlockLoader';\nexport { RowNodeBlockModule as _RowNodeBlockModule } from './rowNodeCache/rowNodeBlockModule';\nexport {\n    IClientSideRowModel,\n    ClientSideRowModelSteps,\n    ClientSideRowModelStep,\n    RefreshModelParams,\n} from './interfaces/iClientSideRowModel';\nexport { IInfiniteRowModel } from './interfaces/iInfiniteRowModel';\n\nexport { ColumnVO } from './interfaces/iColumnVO';\n\nexport {\n    IServerSideDatasource,\n    IServerSideGetRowsParams,\n    IServerSideGetRowsRequest,\n} from './interfaces/iServerSideDatasource';\nexport {\n    IServerSideRowModel,\n    IServerSideTransactionManager,\n    RefreshServerSideParams,\n} from './interfaces/iServerSideRowModel';\nexport { IServerSideStore, StoreRefreshAfterParams, ServerSideGroupLevelState } from './interfaces/IServerSideStore';\n\nexport { ISideBarService, ISideBar, SideBarDef, ToolPanelDef } from './interfaces/iSideBar';\nexport { IGetRowsParams, IDatasource } from './interfaces/iDatasource';\n\n// selection\nexport { ISelectionContext } from './selection/rowRangeSelectionContext';\n\n// styling\nexport { StylingService } from './styling/stylingService';\nexport { UpdateLayoutClassesParams, LayoutCssClasses } from './styling/layoutFeature';\n\n// widgets\nexport {\n    AgFieldParams,\n    AgCheckboxParams,\n    AgLabelParams,\n    LabelAlignment,\n    AgInputFieldParams,\n    AgPickerFieldParams,\n} from './interfaces/agFieldParams';\nexport { RichSelectParams } from './interfaces/iRichCellEditorParams';\nexport { AgAbstractField, FieldElement } from './widgets/agAbstractField';\nexport { AgAbstractInputField } from './widgets/agAbstractInputField';\nexport { AgCheckbox, AgCheckboxSelector } from './widgets/agCheckbox';\nexport { AgRadioButton, AgRadioButtonParams } from './widgets/agRadioButton';\nexport { AgToggleButton, AgToggleButtonParams, AgToggleButtonSelector } from './widgets/agToggleButton';\nexport { AgInputTextField, AgInputTextFieldParams, AgInputTextFieldSelector } from './widgets/agInputTextField';\nexport { AgInputTextArea } from './widgets/agInputTextArea';\nexport { AgInputNumberField, AgInputNumberFieldSelector, AgInputNumberFieldParams } from './widgets/agInputNumberField';\nexport { AgInputDateField } from './widgets/agInputDateField';\nexport { AgSelect, AgSelectParams, AgSelectSelector } from './widgets/agSelect';\nexport { ListOption } from './widgets/agList';\nexport { Component, VisibleChangedEvent } from './widgets/component';\nexport { ManagedFocusFeature, ManagedFocusCallbacks } from './widgets/managedFocusFeature';\nexport { TabGuardComp } from './widgets/tabGuardComp';\nexport { TabGuardCtrl, ITabGuard, TabGuardClassNames } from './widgets/tabGuardCtrl';\nexport { TabGuardFeature } from './widgets/tabGuardFeature';\nexport { PopupComponent } from './widgets/popupComponent';\nexport { PopupService, AgPopup, PopupPositionParams, PopupEventParams } from './widgets/popupService';\nexport { TouchListener, TapEvent, LongTapEvent, TouchListenerEvent } from './widgets/touchListener';\nexport { FocusableContainer } from './interfaces/iFocusableContainer';\n\nexport { AgAbstractLabel } from './widgets/agAbstractLabel';\nexport { AgPickerField } from './widgets/agPickerField';\n\n// range\nexport {\n    CellRange,\n    CellRangeParams,\n    CellRangeType,\n    IRangeService,\n    ISelectionHandle,\n    SelectionHandleType,\n    ISelectionHandleFactory,\n    ClearCellRangeParams,\n    PartialCellRange,\n} from './interfaces/IRangeService';\nexport {\n    IChartService,\n    ChartDownloadParams,\n    OpenChartToolPanelParams,\n    CloseChartToolPanelParams,\n    ChartModel,\n    GetChartImageDataUrlParams,\n    ChartModelType,\n    CreateRangeChartParams,\n    ChartParamsCellRange,\n    CreatePivotChartParams,\n    CreateCrossFilterChartParams,\n    UpdateRangeChartParams,\n    UpdatePivotChartParams,\n    UpdateCrossFilterChartParams,\n    UpdateChartParams,\n    BaseCreateChartParams,\n} from './interfaces/IChartService';\n\n// master detail\nexport {\n    IDetailCellRendererParams,\n    GetDetailRowData,\n    GetDetailRowDataParams,\n    IDetailCellRenderer,\n    IDetailCellRendererCtrl,\n} from './interfaces/masterDetail';\n\n// exporter\nexport {\n    CsvExportParams,\n    CsvCell,\n    CsvCellData,\n    CsvCustomContent,\n    ExportParams,\n    ExportFileNameGetter,\n    ExportFileNameGetterParams,\n    PackageFileParams,\n    ProcessCellForExportParams,\n    ProcessHeaderForExportParams,\n    ProcessGroupHeaderForExportParams,\n    ProcessRowGroupForExportParams,\n    ShouldRowBeSkippedParams,\n    BaseExportParams,\n} from './interfaces/exportParams';\nexport { HeaderElement, PrefixedXmlAttributes, XmlElement } from './interfaces/iXmlFactory';\nexport { ICsvCreator } from './interfaces/iCsvCreator';\n\n// root\nexport { AutoScrollService } from './autoScrollService';\nexport { VanillaFrameworkOverrides } from './vanillaFrameworkOverrides';\nexport { CellNavigationService } from './cellNavigationService';\nexport { KeyCode } from './constants/keyCode';\nexport { VerticalDirection, HorizontalDirection } from './constants/direction';\nexport { Grid, GridParams, Params, GridCoreCreator, createGrid, provideGlobalGridOptions } from './grid';\nexport { GridApi, DetailGridInfo, StartEditingCellParams, GetCellValueParams } from './api/gridApi';\nexport { IDetailGridApiService } from './interfaces/iDetailGridApiService';\nexport { RowModelHelperService } from './api/rowModelHelperService';\nexport {\n    CsrmSsrmSharedApiModule as _CsrmSsrmSharedApiModule,\n    SsrmInfiniteSharedApiModule as _SsrmInfiniteSharedApiModule,\n} from './api/sharedApiModule';\nexport { CommunityMenuApiModule as _CommunityMenuApiModule } from './api/apiModule';\nexport { AgEventType } from './eventTypes';\nexport { FocusService } from './focusService';\nexport { GridOptionsService, PropertyChangedEvent } from './gridOptionsService';\nexport { LocalEventService } from './localEventService';\nexport { EventService } from './eventService';\nexport { SelectableService } from './rowNodes/selectableService';\nexport { RowNodeSorter, SortedRowNode, SortOption } from './rowNodes/rowNodeSorter';\nexport { CtrlsService } from './ctrlsService';\nexport { GridComp } from './gridComp/gridComp';\nexport { GridCtrl, IGridComp } from './gridComp/gridCtrl';\nexport { SortController, SortModelItem } from './sortController';\nexport { LocaleService } from './localeService';\nexport { ValueService } from './valueService/valueService';\nexport { ValueCache } from './valueService/valueCache';\nexport { ExpressionService } from './valueService/expressionService';\n\n//state\nexport {\n    AggregationColumnState,\n    AggregationState,\n    ColumnGroupState,\n    ColumnOrderState,\n    ColumnPinningState,\n    ColumnSizeState,\n    ColumnSizingState,\n    ColumnToolPanelState,\n    ColumnVisibilityState,\n    FilterState,\n    FiltersToolPanelState,\n    FocusedCellState,\n    GridState,\n    PaginationState,\n    PivotState,\n    RangeSelectionCellState,\n    RangeSelectionState,\n    RowGroupExpansionState,\n    RowGroupState,\n    ScrollState,\n    SideBarState,\n    SortState,\n} from './interfaces/gridState';\n\n// uncatalogued\nexport { IRowModel, RowBounds, RowModelType } from './interfaces/iRowModel';\nexport { ISelectionService, ISetNodesSelectedParams } from './interfaces/iSelectionService';\nexport { IExpansionService } from './interfaces/iExpansionService';\nexport { ServerSideRowSelectionState, ServerSideRowGroupSelectionState } from './interfaces/selectionState';\nexport { IServerSideSelectionState, IServerSideGroupSelectionState } from './interfaces/iServerSideSelection';\nexport { IAggFuncService } from './interfaces/iAggFuncService';\nexport { IClipboardService, IClipboardCopyParams, IClipboardCopyRowsParams } from './interfaces/iClipboardService';\nexport { IMenuFactory } from './interfaces/iMenuFactory';\nexport { IColumnChooserFactory, ShowColumnChooserParams } from './interfaces/iColumnChooserFactory';\nexport { CellPosition, CellPositionUtils } from './entities/cellPositionUtils';\nexport { RowPosition, RowPositionUtils } from './entities/rowPositionUtils';\nexport { HeaderPosition, HeaderPositionUtils } from './headerRendering/common/headerPosition';\nexport { HeaderNavigationService, HeaderNavigationDirection } from './headerRendering/common/headerNavigationService';\nexport {\n    IAggFunc,\n    IAggFuncParams,\n    ColGroupDef,\n    ColDef,\n    ColDefField,\n    AbstractColDef,\n    ColTypeDef,\n    ValueSetterParams,\n    ValueParserParams,\n    ValueFormatterParams,\n    ValueFormatterFunc,\n    ValueParserFunc,\n    ValueGetterFunc,\n    ValueSetterFunc,\n    HeaderValueGetterFunc,\n    HeaderValueGetterParams,\n    ColSpanParams,\n    RowSpanParams,\n    SuppressKeyboardEventParams,\n    SuppressHeaderKeyboardEventParams,\n    ValueGetterParams,\n    NewValueParams,\n    CellClassParams,\n    CellClassFunc,\n    CellStyleFunc,\n    CellStyle,\n    CellClassRules,\n    CellEditorSelectorFunc,\n    CellEditorSelectorResult,\n    CellRendererSelectorFunc,\n    CellRendererSelectorResult,\n    GetQuickFilterTextParams,\n    ColumnFunctionCallbackParams,\n    CheckboxSelectionCallbackParams,\n    CheckboxSelectionCallback,\n    RowDragCallback,\n    RowDragCallbackParams,\n    DndSourceCallback,\n    DndSourceCallbackParams,\n    DndSourceOnRowDragParams,\n    EditableCallbackParams,\n    EditableCallback,\n    SuppressPasteCallback,\n    SuppressPasteCallbackParams,\n    SuppressNavigableCallback,\n    SuppressNavigableCallbackParams,\n    HeaderCheckboxSelectionCallbackParams,\n    HeaderCheckboxSelectionCallback,\n    HeaderLocation,\n    ColumnsMenuParams,\n    ColumnChooserParams,\n    ColumnMenuTab,\n    HeaderClassParams,\n    HeaderClass,\n    ToolPanelClassParams,\n    ToolPanelClass,\n    KeyCreatorParams,\n    SortDirection,\n    NestedFieldPaths,\n} from './entities/colDef';\nexport {\n    DataTypeDefinition,\n    TextDataTypeDefinition,\n    NumberDataTypeDefinition,\n    BooleanDataTypeDefinition,\n    DateDataTypeDefinition,\n    DateStringDataTypeDefinition,\n    ObjectDataTypeDefinition,\n    ValueFormatterLiteFunc,\n    ValueFormatterLiteParams,\n    ValueParserLiteFunc,\n    ValueParserLiteParams,\n    BaseCellDataType,\n} from './entities/dataType';\nexport { DataTypeService } from './columns/dataTypeService';\nexport {\n    GridOptions,\n    IsApplyServerSideTransaction,\n    GetContextMenuItems,\n    GetDataPath,\n    IsRowMaster,\n    IsRowSelectable,\n    IsRowFilterable,\n    GetMainMenuItems,\n    GetRowNodeIdFunc,\n    GetRowIdFunc,\n    ChartRef,\n    ChartRefParams,\n    RowClassRules,\n    RowStyle,\n    RowClassParams,\n    ServerSideGroupLevelParams,\n    ServerSideStoreParams,\n    GetServerSideGroupKey,\n    IsServerSideGroup,\n    GetChartToolbarItems,\n    RowGroupingDisplayType,\n    TreeDataDisplayType,\n    LoadingCellRendererSelectorFunc,\n    LoadingCellRendererSelectorResult,\n    DomLayoutType,\n    UseGroupFooter,\n    UseGroupTotalRow,\n    GetChartMenuItems,\n} from './entities/gridOptions';\n\nexport {\n    FillOperationParams,\n    RowHeightParams,\n    GetRowIdParams,\n    ProcessRowParams,\n    IsServerSideGroupOpenByDefaultParams,\n    ProcessUnpinnedColumnsParams,\n    IsApplyServerSideTransactionParams,\n    IsGroupOpenByDefaultParams,\n    GetServerSideGroupLevelParamsParams,\n    PaginationNumberFormatterParams,\n    ProcessDataFromClipboardParams,\n    SendToClipboardParams,\n    GetChartToolbarItemsParams,\n    NavigateToNextHeaderParams,\n    TabToNextHeaderParams,\n    NavigateToNextCellParams,\n    TabToNextCellParams,\n    GetContextMenuItemsParams,\n    GetMainMenuItemsParams,\n    PostProcessPopupParams,\n    IsExternalFilterPresentParams,\n    InitialGroupOrderComparatorParams,\n    GetGroupRowAggParams,\n    IsFullWidthRowParams,\n    PostSortRowsParams,\n    FocusGridInnerElementParams,\n    GetLocaleTextParams,\n    GetGroupAggFilteringParams,\n    GetGroupIncludeFooterParams,\n    GetGroupIncludeTotalRowParams,\n    IMenuActionParams,\n} from './interfaces/iCallbackParams';\nexport { WithoutGridCommon } from './interfaces/iCommon';\n\nexport { ManagedGridOptionKey, ManagedGridOptions, PropertyKeys } from './propertyKeys';\nexport { IPivotColDefService } from './interfaces/iPivotColDefService';\nexport { IViewportDatasource, IViewportDatasourceParams } from './interfaces/iViewportDatasource';\nexport { IContextMenuFactory } from './interfaces/iContextMenuFactory';\nexport { IRowNodeStage, StageExecuteParams } from './interfaces/iRowNodeStage';\nexport { IDateParams, IDate, IDateComp, BaseDate, BaseDateParams } from './interfaces/dateComponent';\nexport { IAfterGuiAttachedParams, ContainerType } from './interfaces/iAfterGuiAttachedParams';\nexport { IComponent } from './interfaces/iComponent';\nexport { IEventEmitter, IEventListener } from './interfaces/iEventEmitter';\nexport { IHeaderParams, IHeaderComp, IHeader } from './headerRendering/cells/column/headerComp';\nexport {\n    IHeaderGroupParams,\n    IHeaderGroup,\n    IHeaderGroupComp,\n} from './headerRendering/cells/columnGroup/headerGroupComp';\nexport {\n    WrappableInterface,\n    BaseComponentWrapper,\n    FrameworkComponentWrapper,\n} from './components/framework/frameworkComponentWrapper';\nexport { IFrameworkOverrides, FrameworkOverridesIncomingSource } from './interfaces/iFrameworkOverrides';\nexport { Environment } from './environment';\nexport { ITooltipComp, ITooltipParams, TooltipLocation } from './rendering/tooltipComponent';\nexport { TooltipFeature } from './widgets/tooltipFeature';\nexport { TooltipStateManager } from './widgets/tooltipStateManager';\nexport { IAggregationStage } from './interfaces/iAggregationStage';\nexport {\n    MenuItemLeafDef,\n    MenuItemDef,\n    IMenuConfigParams,\n    IMenuItemParams,\n    IMenuItem,\n    IMenuItemComp,\n    BaseMenuItem,\n    BaseMenuItemParams,\n} from './interfaces/menuItem';\nexport { IWatermark } from './interfaces/iWatermark';\n\nexport { AriaAnnouncementService } from './rendering/ariaAnnouncementService';\n\n// utils\nexport {\n    ColumnSortState,\n    _setAriaLevel,\n    _setAriaLabel,\n    _setAriaDescribedBy,\n    _setAriaExpanded,\n    _setAriaLabelledBy,\n    _setAriaChecked,\n    _setAriaControls,\n    _setAriaRole,\n    _setAriaColIndex,\n    _setAriaColSpan,\n    _setAriaRowIndex,\n    _setAriaDisabled,\n    _removeAriaExpanded,\n    _removeAriaSort,\n    _setAriaSort,\n    _setAriaColCount,\n    _setAriaRowCount,\n    _setAriaActiveDescendant,\n    _setAriaSelected,\n    _setAriaPosInSet,\n    _setAriaSetSize,\n    _setAriaHidden,\n    _getAriaPosInSet,\n} from './utils/aria';\nexport {\n    _removeFromArray,\n    _last,\n    _insertIntoArray,\n    _includes,\n    _shallowCompare,\n    _flatten,\n    _forEachReverse,\n    _areEqual,\n    _existsAndNotEmpty,\n    _removeRepeatsFromArray,\n    _insertArrayIntoArray,\n} from './utils/array';\nexport { _isIOSUserAgent } from './utils/browser';\nexport { ChangedPath } from './utils/changedPath';\nexport { _serialiseDate, _parseDateTimeFromString } from './utils/date';\nexport {\n    _getAbsoluteHeight,\n    _getAbsoluteWidth,\n    _setDisplayed,\n    _clearElement,\n    _removeFromParent,\n    _radioCssClass,\n    _loadTemplate,\n    _isVisible,\n    _setFixedWidth,\n    _setDisabled,\n    _setVisible,\n    _bindCellRendererToHtmlElement,\n    _getInnerHeight,\n    _getInnerWidth,\n    _isNodeOrElement,\n} from './utils/dom';\nexport {\n    _getCtrlForEventTarget,\n    _stopPropagationForAgGrid,\n    _isStopPropagationForAgGrid,\n    _isElementInEventPath,\n} from './utils/event';\nexport { _log, _warnOnce, _errorOnce, _debounce, _compose, _doOnce, _waitUntil } from './utils/function';\nexport { _createIcon, _createIconNoSpan } from './utils/icon';\nexport { _fuzzySuggestions } from './utils/fuzzyMatch';\nexport {\n    _exists,\n    _missing,\n    _missingOrEmpty,\n    _jsonEquals,\n    _toStringOrNull,\n    _values,\n    _makeNull,\n    _defaultComparator,\n} from './utils/generic';\nexport { _isEventFromPrintableCharacter } from './utils/keyboard';\nexport { NumberSequence } from './utils/numberSequence';\nexport { _formatNumberTwoDecimalPlacesAndCommas, _formatNumberCommas } from './utils/number';\nexport { _iterateObject, _cloneObject, _getAllValuesInObject, _mergeDeep } from './utils/object';\nexport { _sortRowNodesByOrder } from './utils/rowNode';\nexport { _capitalise, _escapeString, _utf8_encode } from './utils/string';\nexport { AgPromise } from './utils/promise';\nexport { _addFocusableContainerListener } from './utils/focus';\n\n// charts\nexport * from './interfaces/iChartOptions';\n\n// sparklines\nexport * from './interfaces/iSparklineCellRendererParams';\n\n// modules\nexport { Module, ModuleValidationResult } from './interfaces/iModule';\nexport { ModuleNames } from './modules/moduleNames';\nexport { ModuleRegistry } from './modules/moduleRegistry';\n\nexport { CommunityFeaturesModule, GridCoreModule } from './gridCoreModule';\n\n//  events\nexport * from './events';\n", "import type {\n    BeanCollection,\n    EventService,\n    FuncColsService,\n    GridOptionsService,\n    ISelectionService,\n    RowDataTransaction,\n    RowDataUpdateStartedEvent,\n    RowNodeTransaction,\n    SelectionChangedEvent,\n    SelectionEventSourceType,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport {\n    RowNode,\n    _cloneObject,\n    _errorOnce,\n    _missingOrEmpty,\n    _sortRowNodesByOrder,\n    _warnOnce,\n} from '@ag-grid-community/core';\n\nconst ROOT_NODE_ID = 'ROOT_NODE_ID';\nconst TOP_LEVEL = 0;\nexport class ClientSideNodeManager {\n    private readonly rootNode: RowNode;\n\n    private gos: GridOptionsService;\n    private eventService: EventService;\n    private funcColsService: FuncColsService;\n    private selectionService: ISelectionService;\n    private beans: BeanCollection;\n\n    private nextId = 0;\n\n    // has row data actually been set\n    private rowCountReady = false;\n\n    // when user is provide the id's, we also keep a map of ids to row nodes for convenience\n    private allNodesMap: { [id: string]: RowNode } = {};\n\n    constructor(\n        rootNode: RowNode,\n        gos: GridOptionsService,\n        eventService: EventService,\n        funcColsService: FuncColsService,\n        selectionService: ISelectionService,\n        beans: BeanCollection\n    ) {\n        this.rootNode = rootNode;\n        this.gos = gos;\n        this.eventService = eventService;\n        this.funcColsService = funcColsService;\n        this.beans = beans;\n        this.selectionService = selectionService;\n\n        this.rootNode.group = true;\n        this.rootNode.level = -1;\n        this.rootNode.id = ROOT_NODE_ID;\n        this.rootNode.allLeafChildren = [];\n        this.rootNode.childrenAfterGroup = [];\n        this.rootNode.childrenAfterSort = [];\n        this.rootNode.childrenAfterAggFilter = [];\n        this.rootNode.childrenAfterFilter = [];\n    }\n\n    public getCopyOfNodesMap(): { [id: string]: RowNode } {\n        return _cloneObject(this.allNodesMap);\n    }\n\n    public getRowNode(id: string): RowNode | undefined {\n        return this.allNodesMap[id];\n    }\n\n    public setRowData(rowData: any[]): RowNode[] | undefined {\n        if (typeof rowData === 'string') {\n            _warnOnce('rowData must be an array.');\n            return;\n        }\n        this.rowCountReady = true;\n\n        this.dispatchRowDataUpdateStartedEvent(rowData);\n\n        const rootNode = this.rootNode;\n        const sibling = this.rootNode.sibling;\n\n        rootNode.childrenAfterFilter = null;\n        rootNode.childrenAfterGroup = null;\n        rootNode.childrenAfterAggFilter = null;\n        rootNode.childrenAfterSort = null;\n        rootNode.childrenMapped = null;\n        rootNode.updateHasChildren();\n\n        this.nextId = 0;\n        this.allNodesMap = {};\n\n        if (rowData) {\n            // we use rootNode as the parent, however if using ag-grid-enterprise, the grouping stage\n            // sets the parent node on each row (even if we are not grouping). so setting parent node\n            // here is for benefit of ag-grid-community users\n            rootNode.allLeafChildren = rowData.map((dataItem) => this.createNode(dataItem, this.rootNode, TOP_LEVEL));\n        } else {\n            rootNode.allLeafChildren = [];\n            rootNode.childrenAfterGroup = [];\n        }\n\n        if (sibling) {\n            sibling.childrenAfterFilter = rootNode.childrenAfterFilter;\n            sibling.childrenAfterGroup = rootNode.childrenAfterGroup;\n            sibling.childrenAfterAggFilter = rootNode.childrenAfterAggFilter;\n            sibling.childrenAfterSort = rootNode.childrenAfterSort;\n            sibling.childrenMapped = rootNode.childrenMapped;\n            sibling.allLeafChildren = rootNode.allLeafChildren;\n        }\n    }\n\n    public updateRowData(\n        rowDataTran: RowDataTransaction,\n        rowNodeOrder: { [id: string]: number } | null | undefined\n    ): RowNodeTransaction {\n        this.rowCountReady = true;\n        this.dispatchRowDataUpdateStartedEvent(rowDataTran.add);\n\n        const rowNodeTransaction: RowNodeTransaction = {\n            remove: [],\n            update: [],\n            add: [],\n        };\n\n        const nodesToUnselect: RowNode[] = [];\n\n        this.executeRemove(rowDataTran, rowNodeTransaction, nodesToUnselect);\n        this.executeUpdate(rowDataTran, rowNodeTransaction, nodesToUnselect);\n        this.executeAdd(rowDataTran, rowNodeTransaction);\n\n        this.updateSelection(nodesToUnselect, 'rowDataChanged');\n\n        if (rowNodeOrder) {\n            _sortRowNodesByOrder(this.rootNode.allLeafChildren, rowNodeOrder);\n        }\n\n        return rowNodeTransaction;\n    }\n\n    public isRowCountReady(): boolean {\n        return this.rowCountReady;\n    }\n\n    private dispatchRowDataUpdateStartedEvent(rowData?: any[] | null): void {\n        const event: WithoutGridCommon<RowDataUpdateStartedEvent> = {\n            type: 'rowDataUpdateStarted',\n            firstRowData: rowData?.length ? rowData[0] : null,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private updateSelection(nodesToUnselect: RowNode[], source: SelectionEventSourceType): void {\n        const selectionChanged = nodesToUnselect.length > 0;\n        if (selectionChanged) {\n            this.selectionService.setNodesSelected({\n                newValue: false,\n                nodes: nodesToUnselect,\n                suppressFinishActions: true,\n                source,\n            });\n        }\n\n        // we do this regardless of nodes to unselect or not, as it's possible\n        // a new node was inserted, so a parent that was previously selected (as all\n        // children were selected) should not be tri-state (as new one unselected against\n        // all other selected children).\n        this.selectionService.updateGroupsFromChildrenSelections(source);\n\n        if (selectionChanged) {\n            const event: WithoutGridCommon<SelectionChangedEvent> = {\n                type: 'selectionChanged',\n                source: source,\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    private executeAdd(rowDataTran: RowDataTransaction, rowNodeTransaction: RowNodeTransaction): void {\n        const { add, addIndex } = rowDataTran;\n        if (_missingOrEmpty(add)) {\n            return;\n        }\n\n        // create new row nodes for each data item\n        const newNodes: RowNode[] = add!.map((item) => this.createNode(item, this.rootNode, TOP_LEVEL));\n\n        const allLeafChildren = this.rootNode.allLeafChildren!;\n        if (typeof addIndex === 'number' && addIndex >= 0) {\n            // new rows are inserted in one go by concatenating them in between the existing rows at the desired index.\n            // this is much faster than splicing them individually into 'allLeafChildren' when there are large inserts.\n            const len = allLeafChildren.length;\n            let normalisedAddIndex = addIndex;\n\n            const isTreeData = this.gos.get('treeData');\n            if (isTreeData && addIndex > 0 && len > 0) {\n                for (let i = 0; i < len; i++) {\n                    if (allLeafChildren[i]?.rowIndex == addIndex - 1) {\n                        normalisedAddIndex = i + 1;\n                        break;\n                    }\n                }\n            }\n\n            const nodesBeforeIndex = allLeafChildren.slice(0, normalisedAddIndex);\n            const nodesAfterIndex = allLeafChildren.slice(normalisedAddIndex, allLeafChildren.length);\n            this.rootNode.allLeafChildren = [...nodesBeforeIndex, ...newNodes, ...nodesAfterIndex];\n        } else {\n            this.rootNode.allLeafChildren = [...allLeafChildren, ...newNodes];\n        }\n        if (this.rootNode.sibling) {\n            this.rootNode.sibling.allLeafChildren = allLeafChildren;\n        }\n        // add new row nodes to the transaction add items\n        rowNodeTransaction.add = newNodes;\n    }\n\n    private executeRemove(\n        rowDataTran: RowDataTransaction,\n        rowNodeTransaction: RowNodeTransaction,\n        nodesToUnselect: RowNode[]\n    ): void {\n        const { remove } = rowDataTran;\n\n        if (_missingOrEmpty(remove)) {\n            return;\n        }\n\n        const rowIdsRemoved: { [key: string]: boolean } = {};\n\n        remove!.forEach((item) => {\n            const rowNode = this.lookupRowNode(item);\n\n            if (!rowNode) {\n                return;\n            }\n\n            // do delete - setting 'suppressFinishActions = true' to ensure EVENT_SELECTION_CHANGED is not raised for\n            // each row node updated, instead it is raised once by the calling code if any selected nodes exist.\n            if (rowNode.isSelected()) {\n                nodesToUnselect.push(rowNode);\n            }\n\n            // so row renderer knows to fade row out (and not reposition it)\n            rowNode.clearRowTopAndRowIndex();\n\n            // NOTE: were we could remove from allLeaveChildren, however removeFromArray() is expensive, especially\n            // if called multiple times (eg deleting lots of rows) and if allLeafChildren is a large list\n            rowIdsRemoved[rowNode.id!] = true;\n            // removeFromArray(this.rootNode.allLeafChildren, rowNode);\n            delete this.allNodesMap[rowNode.id!];\n\n            rowNodeTransaction.remove.push(rowNode);\n        });\n\n        this.rootNode.allLeafChildren =\n            this.rootNode.allLeafChildren?.filter((rowNode) => !rowIdsRemoved[rowNode.id!]) ?? null;\n        if (this.rootNode.sibling) {\n            this.rootNode.sibling.allLeafChildren = this.rootNode.allLeafChildren;\n        }\n    }\n\n    private executeUpdate(\n        rowDataTran: RowDataTransaction,\n        rowNodeTransaction: RowNodeTransaction,\n        nodesToUnselect: RowNode[]\n    ): void {\n        const { update } = rowDataTran;\n        if (_missingOrEmpty(update)) {\n            return;\n        }\n\n        update!.forEach((item) => {\n            const rowNode = this.lookupRowNode(item);\n\n            if (!rowNode) {\n                return;\n            }\n\n            rowNode.updateData(item);\n            if (!rowNode.selectable && rowNode.isSelected()) {\n                nodesToUnselect.push(rowNode);\n            }\n\n            this.setMasterForRow(rowNode, item, TOP_LEVEL, false);\n\n            rowNodeTransaction.update.push(rowNode);\n        });\n    }\n\n    private lookupRowNode(data: any): RowNode | null {\n        const getRowIdFunc = this.gos.getRowIdCallback();\n\n        let rowNode: RowNode | undefined;\n        if (getRowIdFunc) {\n            // find rowNode using id\n            const id = getRowIdFunc({ data, level: 0 });\n            rowNode = this.allNodesMap[id];\n            if (!rowNode) {\n                _errorOnce(`could not find row id=${id}, data item was not found for this id`);\n                return null;\n            }\n        } else {\n            // find rowNode using object references\n            rowNode = this.rootNode.allLeafChildren?.find((node) => node.data === data);\n            if (!rowNode) {\n                _errorOnce(`could not find data item as object was not found`, data);\n                _errorOnce(`Consider using getRowId to help the Grid find matching row data`);\n                return null;\n            }\n        }\n\n        return rowNode || null;\n    }\n\n    private createNode(dataItem: any, parent: RowNode, level: number): RowNode {\n        const node = new RowNode(this.beans);\n\n        node.group = false;\n        this.setMasterForRow(node, dataItem, level, true);\n\n        if (parent) {\n            node.parent = parent;\n        }\n        node.level = level;\n        node.setDataAndId(dataItem, this.nextId.toString());\n\n        if (this.allNodesMap[node.id!]) {\n            _warnOnce(\n                `duplicate node id '${node.id}' detected from getRowId callback, this could cause issues in your grid.`\n            );\n        }\n        this.allNodesMap[node.id!] = node;\n\n        this.nextId++;\n\n        return node;\n    }\n\n    private setMasterForRow(rowNode: RowNode, data: any, level: number, setExpanded: boolean): void {\n        const isTreeData = this.gos.get('treeData');\n        if (isTreeData) {\n            rowNode.setMaster(false);\n            if (setExpanded) {\n                rowNode.expanded = false;\n            }\n        } else {\n            const masterDetail = this.gos.get('masterDetail');\n            // this is the default, for when doing grid data\n            if (masterDetail) {\n                // if we are doing master detail, then the\n                // default is that everything can be a Master Row.\n                const isRowMasterFunc = this.gos.get('isRowMaster');\n                if (isRowMasterFunc) {\n                    rowNode.setMaster(isRowMasterFunc(data));\n                } else {\n                    rowNode.setMaster(true);\n                }\n            } else {\n                rowNode.setMaster(false);\n            }\n\n            if (setExpanded) {\n                const rowGroupColumns = this.funcColsService.getRowGroupColumns();\n                const numRowGroupColumns = rowGroupColumns ? rowGroupColumns.length : 0;\n\n                // need to take row group into account when determining level\n                const masterRowLevel = level + numRowGroupColumns;\n\n                rowNode.expanded = rowNode.master ? this.isExpanded(masterRowLevel) : false;\n            }\n        }\n    }\n\n    private isExpanded(level: any) {\n        const expandByDefault = this.gos.get('groupDefaultExpanded');\n        if (expandByDefault === -1) {\n            return true;\n        }\n        return level < expandByDefault;\n    }\n}\n", "import type {\n    AsyncTransactionsFlushed,\n    BeanCollection,\n    ClientSideRowModelStep,\n    ColumnModel,\n    CssVariablesChanged,\n    Environment,\n    ExpandOrCollapseAllEvent,\n    FilterChangedEvent,\n    FuncColsService,\n    GridOptions,\n    IClientSideRowModel,\n    IRowNodeStage,\n    ISelectionService,\n    ModelUpdatedEvent,\n    NamedBean,\n    RefreshModelParams,\n    RowBounds,\n    RowDataTransaction,\n    RowDataUpdatedEvent,\n    RowModelType,\n    RowNodeTransaction,\n    SelectionChangedEvent,\n    ValueCache,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport {\n    BeanStub,\n    ChangedPath,\n    ClientSideRowModelSteps,\n    RowHighlightPosition,\n    RowNode,\n    _debounce,\n    _errorOnce,\n    _exists,\n    _insertIntoArray,\n    _last,\n    _missing,\n    _missingOrEmpty,\n    _removeFromArray,\n} from '@ag-grid-community/core';\n\nimport { ClientSideNodeManager } from './clientSideNodeManager';\n\nenum RecursionType {\n    Normal,\n    AfterFilter,\n    AfterFilterAndSort,\n    PivotNodes,\n}\n\nexport interface BatchTransactionItem<TData = any> {\n    rowDataTransaction: RowDataTransaction<TData>;\n    callback: ((res: RowNodeTransaction<TData>) => void) | undefined;\n}\n\nexport interface RowNodeMap {\n    [id: string]: RowNode;\n}\n\nexport class ClientSideRowModel extends BeanStub implements IClientSideRowModel, NamedBean {\n    beanName = 'rowModel' as const;\n\n    private beans: BeanCollection;\n\n    private columnModel: ColumnModel;\n    private funcColsService: FuncColsService;\n    private selectionService: ISelectionService;\n    private valueCache: ValueCache;\n    private environment: Environment;\n\n    // standard stages\n    private filterStage: IRowNodeStage;\n    private sortStage: IRowNodeStage;\n    private flattenStage: IRowNodeStage;\n\n    // enterprise stages\n    private groupStage?: IRowNodeStage;\n    private aggregationStage?: IRowNodeStage;\n    private pivotStage?: IRowNodeStage;\n    private filterAggregatesStage?: IRowNodeStage;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.beans = beans;\n\n        this.columnModel = beans.columnModel;\n        this.funcColsService = beans.funcColsService;\n        this.selectionService = beans.selectionService;\n        this.valueCache = beans.valueCache;\n        this.environment = beans.environment;\n\n        this.filterStage = beans.filterStage!;\n        this.sortStage = beans.sortStage!;\n        this.flattenStage = beans.flattenStage!;\n\n        this.groupStage = beans.groupStage;\n        this.aggregationStage = beans.aggregationStage;\n        this.pivotStage = beans.pivotStage;\n        this.filterAggregatesStage = beans.filterAggregatesStage;\n    }\n\n    private onRowHeightChanged_debounced = _debounce(this.onRowHeightChanged.bind(this), 100);\n\n    // top most node of the tree. the children are the user provided data.\n    private rootNode: RowNode;\n    private rowsToDisplay: RowNode[] = []; // the rows mapped to rows to display\n    private nodeManager: ClientSideNodeManager;\n    private rowDataTransactionBatch: BatchTransactionItem[] | null;\n    private lastHighlightedRow: RowNode | null;\n    private applyAsyncTransactionsTimeout: number | undefined;\n    /** Has the start method been called */\n    private hasStarted: boolean = false;\n    /** E.g. data has been set into the node manager already */\n    private shouldSkipSettingDataOnStart: boolean = false;\n    /**\n     * This is to prevent refresh model being called when it's already being called.\n     * E.g. the group stage can trigger initial state filter model to be applied. This fires onFilterChanged,\n     * which then triggers the listener here that calls refresh model again but at the filter stage\n     * (which is about to be run by the original call).\n     */\n    private isRefreshingModel: boolean = false;\n    private rowCountReady: boolean = false;\n\n    public postConstruct(): void {\n        const refreshEverythingFunc = this.refreshModel.bind(this, { step: ClientSideRowModelSteps.EVERYTHING });\n        const animate = !this.gos.get('suppressAnimationFrame');\n        const refreshEverythingAfterColsChangedFunc = this.refreshModel.bind(this, {\n            step: ClientSideRowModelSteps.EVERYTHING, // after cols change, row grouping (the first stage) could of changed\n            afterColumnsChanged: true,\n            keepRenderedRows: true, // we want animations cos sorting or filtering could be applied\n            animate,\n        });\n\n        this.addManagedEventListeners({\n            newColumnsLoaded: refreshEverythingAfterColsChangedFunc,\n            columnRowGroupChanged: refreshEverythingFunc,\n            columnValueChanged: this.onValueChanged.bind(this),\n            columnPivotChanged: this.refreshModel.bind(this, { step: ClientSideRowModelSteps.PIVOT }),\n            filterChanged: this.onFilterChanged.bind(this),\n            sortChanged: this.onSortChanged.bind(this),\n            columnPivotModeChanged: refreshEverythingFunc,\n            gridStylesChanged: this.onGridStylesChanges.bind(this),\n            gridReady: this.onGridReady.bind(this),\n        });\n\n        // doesn't need done if doing full reset\n        // Property listeners which call `refreshModel` at different stages\n        this.addPropertyListeners();\n\n        this.rootNode = new RowNode(this.beans);\n        this.nodeManager = new ClientSideNodeManager(\n            this.rootNode,\n            this.gos,\n            this.eventService,\n            this.funcColsService,\n            this.selectionService,\n            this.beans\n        );\n    }\n\n    private addPropertyListeners() {\n        // Omitted Properties\n        //\n        // We do not act reactively on all functional properties, as it's possible the application is React and\n        // has not memoised the property and it's getting set every render.\n        //\n        // ** LIST OF NON REACTIVE, NO ARGUMENT\n        //\n        // getDataPath, getRowId, isRowMaster -- these are called once for each Node when the Node is created.\n        //                                    -- these are immutable Node properties (ie a Node ID cannot be changed)\n        //\n        // getRowHeight - this is called once when Node is created, if a new getRowHeight function is provided,\n        //              - we do not revisit the heights of each node.\n        //\n        // pivotDefaultExpanded - relevant for initial pivot column creation, no impact on existing pivot columns.\n        //\n        // deltaSort - this changes the type of algorithm used only, it doesn't change the sort order. so no point\n        //           - in doing the sort again as the same result will be got. the new Prop will be used next time we sort.\n        //\n        // ** LIST OF NON REACTIVE, SOME ARGUMENT\n        // ** For these, they could be reactive, but not convinced the business argument is strong enough,\n        // ** so leaving as non-reactive for now, and see if anyone complains.\n        //\n        // processPivotResultColDef, processPivotResultColGroupDef\n        //                       - there is an argument for having these reactive, that if the application changes\n        //                       - these props, we should re-create the Pivot Columns, however it's highly unlikely\n        //                       - the application would change these functions, far more likely the functions were\n        //                       - non memoised correctly.\n\n        const resetProps: Set<keyof GridOptions> = new Set(['treeData', 'masterDetail']);\n        const groupStageRefreshProps: Set<keyof GridOptions> = new Set([\n            'groupDefaultExpanded',\n            'groupAllowUnbalanced',\n            'initialGroupOrderComparator',\n            'groupHideOpenParents',\n            'groupDisplayType',\n        ]);\n        const filterStageRefreshProps: Set<keyof GridOptions> = new Set(['excludeChildrenWhenTreeDataFiltering']);\n        const pivotStageRefreshProps: Set<keyof GridOptions> = new Set([\n            'removePivotHeaderRowWhenSingleValueColumn',\n            'pivotRowTotals',\n            'pivotColumnGroupTotals',\n            'suppressExpandablePivotGroups',\n        ]);\n        const aggregateStageRefreshProps: Set<keyof GridOptions> = new Set([\n            'getGroupRowAgg',\n            'alwaysAggregateAtRootLevel',\n            'groupIncludeTotalFooter',\n            'suppressAggFilteredOnly',\n            'grandTotalRow',\n        ]);\n        const sortStageRefreshProps: Set<keyof GridOptions> = new Set([\n            'postSortRows',\n            'groupDisplayType',\n            'accentedSort',\n        ]);\n        const filterAggStageRefreshProps: Set<keyof GridOptions> = new Set([]);\n        const flattenStageRefreshProps: Set<keyof GridOptions> = new Set([\n            'groupRemoveSingleChildren',\n            'groupRemoveLowestSingleChildren',\n            'groupIncludeFooter',\n            'groupTotalRow',\n        ]);\n\n        const allProps = [\n            ...resetProps,\n            ...groupStageRefreshProps,\n            ...filterStageRefreshProps,\n            ...pivotStageRefreshProps,\n            ...pivotStageRefreshProps,\n            ...aggregateStageRefreshProps,\n            ...sortStageRefreshProps,\n            ...filterAggStageRefreshProps,\n            ...flattenStageRefreshProps,\n        ];\n        this.addManagedPropertyListeners(allProps, (params) => {\n            const properties = params.changeSet?.properties;\n            if (!properties) {\n                return;\n            }\n\n            const arePropertiesImpacted = (propSet: Set<keyof GridOptions>) =>\n                properties.some((prop) => propSet.has(prop));\n\n            if (arePropertiesImpacted(resetProps)) {\n                this.setRowData(this.rootNode.allLeafChildren!.map((child) => child.data));\n                return;\n            }\n\n            if (arePropertiesImpacted(groupStageRefreshProps)) {\n                this.refreshModel({ step: ClientSideRowModelSteps.EVERYTHING });\n                return;\n            }\n\n            if (arePropertiesImpacted(filterStageRefreshProps)) {\n                this.refreshModel({ step: ClientSideRowModelSteps.FILTER });\n                return;\n            }\n\n            if (arePropertiesImpacted(pivotStageRefreshProps)) {\n                this.refreshModel({ step: ClientSideRowModelSteps.PIVOT });\n                return;\n            }\n            if (arePropertiesImpacted(aggregateStageRefreshProps)) {\n                this.refreshModel({ step: ClientSideRowModelSteps.AGGREGATE });\n                return;\n            }\n\n            if (arePropertiesImpacted(sortStageRefreshProps)) {\n                this.refreshModel({ step: ClientSideRowModelSteps.SORT });\n                return;\n            }\n\n            if (arePropertiesImpacted(filterAggStageRefreshProps)) {\n                this.refreshModel({ step: ClientSideRowModelSteps.FILTER_AGGREGATES });\n                return;\n            }\n\n            if (arePropertiesImpacted(flattenStageRefreshProps)) {\n                this.refreshModel({ step: ClientSideRowModelSteps.MAP });\n            }\n        });\n\n        this.addManagedPropertyListener('rowHeight', () => this.resetRowHeights());\n    }\n\n    public start(): void {\n        this.hasStarted = true;\n        if (this.shouldSkipSettingDataOnStart) {\n            this.dispatchUpdateEventsAndRefresh();\n        } else {\n            this.setInitialData();\n        }\n    }\n\n    private setInitialData(): void {\n        const rowData = this.gos.get('rowData');\n        if (rowData) {\n            this.shouldSkipSettingDataOnStart = true;\n            this.setRowData(rowData);\n        }\n    }\n\n    public ensureRowHeightsValid(\n        startPixel: number,\n        endPixel: number,\n        startLimitIndex: number,\n        endLimitIndex: number\n    ): boolean {\n        let atLeastOneChange: boolean;\n        let res = false;\n\n        // we do this multiple times as changing the row heights can also change the first and last rows,\n        // so the first pass can make lots of rows smaller, which means the second pass we end up changing\n        // more rows.\n        do {\n            atLeastOneChange = false;\n\n            const rowAtStartPixel = this.getRowIndexAtPixel(startPixel);\n            const rowAtEndPixel = this.getRowIndexAtPixel(endPixel);\n\n            // keep check to current page if doing pagination\n            const firstRow = Math.max(rowAtStartPixel, startLimitIndex);\n            const lastRow = Math.min(rowAtEndPixel, endLimitIndex);\n\n            for (let rowIndex = firstRow; rowIndex <= lastRow; rowIndex++) {\n                const rowNode = this.getRow(rowIndex);\n                if (rowNode.rowHeightEstimated) {\n                    const rowHeight = this.gos.getRowHeightForNode(rowNode);\n                    rowNode.setRowHeight(rowHeight.height);\n                    atLeastOneChange = true;\n                    res = true;\n                }\n            }\n\n            if (atLeastOneChange) {\n                this.setRowTopAndRowIndex();\n            }\n        } while (atLeastOneChange);\n\n        return res;\n    }\n\n    private setRowTopAndRowIndex(): Set<string> {\n        const defaultRowHeight = this.environment.getDefaultRowHeight();\n        let nextRowTop = 0;\n\n        // mapping displayed rows is not needed for this method, however it's used in\n        // clearRowTopAndRowIndex(), and given we are looping through this.rowsToDisplay here,\n        // we create the map here for performance reasons, so we don't loop a second time\n        // in clearRowTopAndRowIndex()\n        const displayedRowsMapped = new Set<string>();\n\n        // we don't estimate if doing fullHeight or autoHeight, as all rows get rendered all the time\n        // with these two layouts.\n        const allowEstimate = this.gos.isDomLayout('normal');\n\n        for (let i = 0; i < this.rowsToDisplay.length; i++) {\n            const rowNode = this.rowsToDisplay[i];\n\n            if (rowNode.id != null) {\n                displayedRowsMapped.add(rowNode.id);\n            }\n\n            if (rowNode.rowHeight == null) {\n                const rowHeight = this.gos.getRowHeightForNode(rowNode, allowEstimate, defaultRowHeight);\n                rowNode.setRowHeight(rowHeight.height, rowHeight.estimated);\n            }\n\n            rowNode.setRowTop(nextRowTop);\n            rowNode.setRowIndex(i);\n            nextRowTop += rowNode.rowHeight!;\n        }\n\n        return displayedRowsMapped;\n    }\n\n    private clearRowTopAndRowIndex(changedPath: ChangedPath, displayedRowsMapped: Set<string>): void {\n        const changedPathActive = changedPath.isActive();\n\n        const clearIfNotDisplayed = (rowNode: RowNode) => {\n            if (rowNode && rowNode.id != null && !displayedRowsMapped.has(rowNode.id)) {\n                rowNode.clearRowTopAndRowIndex();\n            }\n        };\n\n        const recurse = (rowNode: RowNode) => {\n            clearIfNotDisplayed(rowNode);\n            clearIfNotDisplayed(rowNode.detailNode);\n            clearIfNotDisplayed(rowNode.sibling);\n\n            if (rowNode.hasChildren()) {\n                if (rowNode.childrenAfterGroup) {\n                    // if a changedPath is active, it means we are here because of a transaction update or\n                    // a change detection. neither of these impacts the open/closed state of groups. so if\n                    // a group is not open this time, it was not open last time. so we know all closed groups\n                    // already have their top positions cleared. so there is no need to traverse all the way\n                    // when changedPath is active and the rowNode is not expanded.\n                    const isRootNode = rowNode.level == -1; // we need to give special consideration for root node,\n                    // as expanded=undefined for root node\n                    const skipChildren = changedPathActive && !isRootNode && !rowNode.expanded;\n                    if (!skipChildren) {\n                        rowNode.childrenAfterGroup.forEach(recurse);\n                    }\n                }\n            }\n        };\n\n        recurse(this.rootNode);\n    }\n\n    // returns false if row was moved, otherwise true\n    public ensureRowsAtPixel(rowNodes: RowNode[], pixel: number, increment: number = 0): boolean {\n        const indexAtPixelNow = this.getRowIndexAtPixel(pixel);\n        const rowNodeAtPixelNow = this.getRow(indexAtPixelNow);\n        const animate = !this.gos.get('suppressAnimationFrame');\n\n        if (rowNodeAtPixelNow === rowNodes[0]) {\n            return false;\n        }\n\n        rowNodes.forEach((rowNode) => {\n            _removeFromArray(this.rootNode.allLeafChildren!, rowNode);\n        });\n\n        rowNodes.forEach((rowNode, idx) => {\n            _insertIntoArray(this.rootNode.allLeafChildren!, rowNode, Math.max(indexAtPixelNow + increment, 0) + idx);\n        });\n\n        this.refreshModel({\n            step: ClientSideRowModelSteps.EVERYTHING,\n            keepRenderedRows: true,\n            keepEditingRows: true,\n            animate,\n        });\n\n        return true;\n    }\n\n    public highlightRowAtPixel(rowNode: RowNode | null, pixel?: number): void {\n        const indexAtPixelNow = pixel != null ? this.getRowIndexAtPixel(pixel) : null;\n        const rowNodeAtPixelNow = indexAtPixelNow != null ? this.getRow(indexAtPixelNow) : null;\n\n        if (!rowNodeAtPixelNow || !rowNode || rowNodeAtPixelNow === rowNode || pixel == null) {\n            if (this.lastHighlightedRow) {\n                this.lastHighlightedRow.setHighlighted(null);\n                this.lastHighlightedRow = null;\n            }\n            return;\n        }\n\n        const highlight = this.getHighlightPosition(pixel, rowNodeAtPixelNow);\n\n        if (this.lastHighlightedRow && this.lastHighlightedRow !== rowNodeAtPixelNow) {\n            this.lastHighlightedRow.setHighlighted(null);\n            this.lastHighlightedRow = null;\n        }\n\n        rowNodeAtPixelNow.setHighlighted(highlight);\n        this.lastHighlightedRow = rowNodeAtPixelNow;\n    }\n\n    public getHighlightPosition(pixel: number, rowNode?: RowNode): RowHighlightPosition {\n        if (!rowNode) {\n            const index = this.getRowIndexAtPixel(pixel);\n            rowNode = this.getRow(index || 0);\n\n            if (!rowNode) {\n                return RowHighlightPosition.Below;\n            }\n        }\n\n        const { rowTop, rowHeight } = rowNode;\n\n        return pixel - rowTop! < rowHeight! / 2 ? RowHighlightPosition.Above : RowHighlightPosition.Below;\n    }\n\n    public getLastHighlightedRowNode(): RowNode | null {\n        return this.lastHighlightedRow;\n    }\n\n    public isLastRowIndexKnown(): boolean {\n        return true;\n    }\n\n    public getRowCount(): number {\n        if (this.rowsToDisplay) {\n            return this.rowsToDisplay.length;\n        }\n\n        return 0;\n    }\n\n    public getTopLevelRowCount(): number {\n        const showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;\n\n        if (showingRootNode) {\n            return 1;\n        }\n\n        const totalFooterInc = this.rootNode.sibling ? 1 : 0;\n\n        const filteredChildren = this.rootNode.childrenAfterAggFilter;\n        return (filteredChildren ? filteredChildren.length : 0) + totalFooterInc;\n    }\n\n    public getTopLevelRowDisplayedIndex(topLevelIndex: number): number {\n        const showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;\n\n        if (showingRootNode) {\n            return topLevelIndex;\n        }\n\n        // if first row is footer, any following rows are pushed down by one\n        let adjustedIndex = topLevelIndex;\n        if (this.rowsToDisplay[0].footer) {\n            if (topLevelIndex === 0) {\n                return 0;\n            }\n            adjustedIndex -= 1;\n        }\n\n        let rowNode = this.rootNode.childrenAfterSort![adjustedIndex];\n\n        if (this.gos.get('groupHideOpenParents')) {\n            // if hideOpenParents, and this row open, then this row is now displayed at this index, first child is\n            while (rowNode.expanded && rowNode.childrenAfterSort && rowNode.childrenAfterSort.length > 0) {\n                rowNode = rowNode.childrenAfterSort[0];\n            }\n        }\n\n        return rowNode.rowIndex!;\n    }\n\n    public getRowBounds(index: number): RowBounds | null {\n        if (_missing(this.rowsToDisplay)) {\n            return null;\n        }\n\n        const rowNode = this.rowsToDisplay[index];\n\n        if (rowNode) {\n            return {\n                rowTop: rowNode.rowTop!,\n                rowHeight: rowNode.rowHeight!,\n            };\n        }\n\n        return null;\n    }\n\n    public onRowGroupOpened(): void {\n        const animate = this.gos.isAnimateRows();\n        this.refreshModel({ step: ClientSideRowModelSteps.MAP, keepRenderedRows: true, animate: animate });\n    }\n\n    private onFilterChanged(event: FilterChangedEvent): void {\n        if (event.afterDataChange) {\n            return;\n        }\n        const animate = this.gos.isAnimateRows();\n\n        const primaryOrQuickFilterChanged = event.columns.length === 0 || event.columns.some((col) => col.isPrimary());\n        const step: ClientSideRowModelSteps = primaryOrQuickFilterChanged\n            ? ClientSideRowModelSteps.FILTER\n            : ClientSideRowModelSteps.FILTER_AGGREGATES;\n        this.refreshModel({ step: step, keepRenderedRows: true, animate: animate });\n    }\n\n    private onSortChanged(): void {\n        const animate = this.gos.isAnimateRows();\n        this.refreshModel({\n            step: ClientSideRowModelSteps.SORT,\n            keepRenderedRows: true,\n            animate: animate,\n            keepEditingRows: true,\n        });\n    }\n\n    public getType(): RowModelType {\n        return 'clientSide';\n    }\n\n    private onValueChanged(): void {\n        if (this.columnModel.isPivotActive()) {\n            this.refreshModel({ step: ClientSideRowModelSteps.PIVOT });\n        } else {\n            this.refreshModel({ step: ClientSideRowModelSteps.AGGREGATE });\n        }\n    }\n\n    private createChangePath(rowNodeTransactions: (RowNodeTransaction | null)[] | undefined): ChangedPath {\n        // for updates, if the row is updated at all, then we re-calc all the values\n        // in that row. we could compare each value to each old value, however if we\n        // did this, we would be calling the valueService twice, once on the old value\n        // and once on the new value. so it's less valueGetter calls if we just assume\n        // each column is different. that way the changedPath is used so that only\n        // the impacted parent rows are recalculated, parents who's children have\n        // not changed are not impacted.\n\n        const noTransactions = _missingOrEmpty(rowNodeTransactions);\n\n        const changedPath = new ChangedPath(false, this.rootNode);\n\n        if (noTransactions || this.gos.get('treeData')) {\n            changedPath.setInactive();\n        }\n\n        return changedPath;\n    }\n\n    private isSuppressModelUpdateAfterUpdateTransaction(params: RefreshModelParams): boolean {\n        if (!this.gos.get('suppressModelUpdateAfterUpdateTransaction')) {\n            return false;\n        }\n\n        // return true if we are only doing update transactions\n        if (params.rowNodeTransactions == null) {\n            return false;\n        }\n\n        const transWithAddsOrDeletes = params.rowNodeTransactions.filter(\n            (tx) => (tx.add != null && tx.add.length > 0) || (tx.remove != null && tx.remove.length > 0)\n        );\n\n        const transactionsContainUpdatesOnly = transWithAddsOrDeletes == null || transWithAddsOrDeletes.length == 0;\n\n        return transactionsContainUpdatesOnly;\n    }\n\n    private buildRefreshModelParams(step: ClientSideRowModelStep | undefined): RefreshModelParams | undefined {\n        let paramsStep = ClientSideRowModelSteps.EVERYTHING;\n        const stepsMapped: any = {\n            everything: ClientSideRowModelSteps.EVERYTHING,\n            group: ClientSideRowModelSteps.EVERYTHING,\n            filter: ClientSideRowModelSteps.FILTER,\n            map: ClientSideRowModelSteps.MAP,\n            aggregate: ClientSideRowModelSteps.AGGREGATE,\n            sort: ClientSideRowModelSteps.SORT,\n            pivot: ClientSideRowModelSteps.PIVOT,\n        };\n        if (_exists(step)) {\n            paramsStep = stepsMapped[step];\n        }\n\n        if (_missing(paramsStep)) {\n            _errorOnce(`invalid step ${step}, available steps are ${Object.keys(stepsMapped).join(', ')}`);\n            return undefined;\n        }\n        const animate = !this.gos.get('suppressAnimationFrame');\n        const modelParams: RefreshModelParams = {\n            step: paramsStep,\n            keepRenderedRows: true,\n            keepEditingRows: true,\n            animate,\n        };\n        return modelParams;\n    }\n\n    refreshModel(paramsOrStep: RefreshModelParams | ClientSideRowModelStep | undefined): void {\n        if (!this.hasStarted || this.isRefreshingModel || this.columnModel.isChangeEventsDispatching()) {\n            return;\n        }\n\n        const params =\n            typeof paramsOrStep === 'object' && 'step' in paramsOrStep\n                ? paramsOrStep\n                : this.buildRefreshModelParams(paramsOrStep);\n\n        if (!params) {\n            return;\n        }\n\n        if (this.isSuppressModelUpdateAfterUpdateTransaction(params)) {\n            return;\n        }\n\n        // this goes through the pipeline of stages. what's in my head is similar\n        // to the diagram on this page:\n        // http://commons.apache.org/sandbox/commons-pipeline/pipeline_basics.html\n        // however we want to keep the results of each stage, hence we manually call\n        // each step rather than have them chain each other.\n\n        // fallthrough in below switch is on purpose,\n        // eg if STEP_FILTER, then all steps below this\n        // step get done\n        // let start: number;\n        // console.log('======= start =======');\n\n        const changedPath: ChangedPath = this.createChangePath(params.rowNodeTransactions);\n\n        this.isRefreshingModel = true;\n\n        switch (params.step) {\n            case ClientSideRowModelSteps.EVERYTHING:\n                this.doRowGrouping(\n                    params.rowNodeTransactions,\n                    params.rowNodeOrder,\n                    changedPath,\n                    !!params.afterColumnsChanged\n                );\n            /* eslint-disable no-fallthrough */\n            case ClientSideRowModelSteps.FILTER:\n                this.doFilter(changedPath);\n            case ClientSideRowModelSteps.PIVOT:\n                this.doPivot(changedPath);\n            case ClientSideRowModelSteps.AGGREGATE: // depends on agg fields\n                this.doAggregate(changedPath);\n            case ClientSideRowModelSteps.FILTER_AGGREGATES:\n                this.doFilterAggregates(changedPath);\n            case ClientSideRowModelSteps.SORT:\n                this.doSort(params.rowNodeTransactions, changedPath);\n            case ClientSideRowModelSteps.MAP:\n                this.doRowsToDisplay();\n            /* eslint-enable no-fallthrough */\n        }\n\n        // set all row tops to null, then set row tops on all visible rows. if we don't\n        // do this, then the algorithm below only sets row tops, old row tops from old rows\n        // will still lie around\n        const displayedNodesMapped = this.setRowTopAndRowIndex();\n        this.clearRowTopAndRowIndex(changedPath, displayedNodesMapped);\n\n        this.isRefreshingModel = false;\n\n        const event: WithoutGridCommon<ModelUpdatedEvent> = {\n            type: 'modelUpdated',\n            animate: params.animate,\n            keepRenderedRows: params.keepRenderedRows,\n            newData: params.newData,\n            newPage: false,\n            keepUndoRedoStack: params.keepUndoRedoStack,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public isEmpty(): boolean {\n        const rowsMissing = _missing(this.rootNode.allLeafChildren) || this.rootNode.allLeafChildren.length === 0;\n        return _missing(this.rootNode) || rowsMissing || !this.columnModel.isReady();\n    }\n\n    public isRowsToRender(): boolean {\n        return _exists(this.rowsToDisplay) && this.rowsToDisplay.length > 0;\n    }\n\n    public getNodesInRangeForSelection(firstInRange: RowNode, lastInRange: RowNode): RowNode[] {\n        let started = false;\n        let finished = false;\n\n        const result: RowNode[] = [];\n\n        const groupsSelectChildren = this.gos.get('groupSelectsChildren');\n\n        this.forEachNodeAfterFilterAndSort((rowNode) => {\n            // range has been closed, skip till end\n            if (finished) {\n                return;\n            }\n\n            if (started) {\n                if (rowNode === lastInRange || rowNode === firstInRange) {\n                    // check if this is the last node we're going to be adding\n                    finished = true;\n\n                    // if the final node was a group node, and we're doing groupSelectsChildren\n                    // make the exception to select all of it's descendants too\n                    if (rowNode.group && groupsSelectChildren) {\n                        result.push(...rowNode.allLeafChildren!);\n                        return;\n                    }\n                }\n            }\n\n            if (!started) {\n                if (rowNode !== lastInRange && rowNode !== firstInRange) {\n                    // still haven't hit a boundary node, keep searching\n                    return;\n                }\n                started = true;\n            }\n\n            // only select leaf nodes if groupsSelectChildren\n            const includeThisNode = !rowNode.group || !groupsSelectChildren;\n            if (includeThisNode) {\n                result.push(rowNode);\n                return;\n            }\n        });\n\n        return result;\n    }\n\n    // eslint-disable-next-line\n    public setDatasource(datasource: any): void {\n        _errorOnce('should never call setDatasource on clientSideRowController');\n    }\n\n    public getTopLevelNodes(): RowNode[] | null {\n        return this.rootNode ? this.rootNode.childrenAfterGroup : null;\n    }\n\n    public getRootNode(): RowNode {\n        return this.rootNode;\n    }\n\n    public getRow(index: number): RowNode {\n        return this.rowsToDisplay[index];\n    }\n\n    public isRowPresent(rowNode: RowNode): boolean {\n        return this.rowsToDisplay.indexOf(rowNode) >= 0;\n    }\n\n    public getRowIndexAtPixel(pixelToMatch: number): number {\n        if (this.isEmpty() || this.rowsToDisplay.length === 0) {\n            return -1;\n        }\n\n        // do binary search of tree\n        // http://oli.me.uk/2013/06/08/searching-javascript-arrays-with-a-binary-search/\n        let bottomPointer = 0;\n        let topPointer = this.rowsToDisplay.length - 1;\n\n        // quick check, if the pixel is out of bounds, then return last row\n        if (pixelToMatch <= 0) {\n            // if pixel is less than or equal zero, it's always the first row\n            return 0;\n        }\n        const lastNode = _last(this.rowsToDisplay);\n        if (lastNode.rowTop! <= pixelToMatch) {\n            return this.rowsToDisplay.length - 1;\n        }\n\n        let oldBottomPointer = -1;\n        let oldTopPointer = -1;\n\n        while (true) {\n            const midPointer = Math.floor((bottomPointer + topPointer) / 2);\n            const currentRowNode = this.rowsToDisplay[midPointer];\n\n            if (this.isRowInPixel(currentRowNode, pixelToMatch)) {\n                return midPointer;\n            }\n\n            if (currentRowNode.rowTop! < pixelToMatch) {\n                bottomPointer = midPointer + 1;\n            } else if (currentRowNode.rowTop! > pixelToMatch) {\n                topPointer = midPointer - 1;\n            }\n\n            // infinite loops happen when there is space between rows. this can happen\n            // when Auto Height is active, cos we re-calculate row tops asynchronously\n            // when row heights change, which can temporarily result in gaps between rows.\n            const caughtInInfiniteLoop = oldBottomPointer === bottomPointer && oldTopPointer === topPointer;\n            if (caughtInInfiniteLoop) {\n                return midPointer;\n            }\n\n            oldBottomPointer = bottomPointer;\n            oldTopPointer = topPointer;\n        }\n    }\n\n    private isRowInPixel(rowNode: RowNode, pixelToMatch: number): boolean {\n        const topPixel = rowNode.rowTop;\n        const bottomPixel = rowNode.rowTop! + rowNode.rowHeight!;\n        const pixelInRow = topPixel! <= pixelToMatch && bottomPixel > pixelToMatch;\n        return pixelInRow;\n    }\n\n    public forEachLeafNode(callback: (node: RowNode, index: number) => void): void {\n        if (this.rootNode.allLeafChildren) {\n            this.rootNode.allLeafChildren.forEach((rowNode, index) => callback(rowNode, index));\n        }\n    }\n\n    public forEachNode(callback: (node: RowNode, index: number) => void, includeFooterNodes: boolean = false): void {\n        this.recursivelyWalkNodesAndCallback({\n            nodes: [...(this.rootNode.childrenAfterGroup || [])],\n            callback,\n            recursionType: RecursionType.Normal,\n            index: 0,\n            includeFooterNodes,\n        });\n    }\n\n    public forEachNodeAfterFilter(\n        callback: (node: RowNode, index: number) => void,\n        includeFooterNodes: boolean = false\n    ): void {\n        this.recursivelyWalkNodesAndCallback({\n            nodes: [...(this.rootNode.childrenAfterAggFilter || [])],\n            callback,\n            recursionType: RecursionType.AfterFilter,\n            index: 0,\n            includeFooterNodes,\n        });\n    }\n\n    public forEachNodeAfterFilterAndSort(\n        callback: (node: RowNode, index: number) => void,\n        includeFooterNodes: boolean = false\n    ): void {\n        this.recursivelyWalkNodesAndCallback({\n            nodes: [...(this.rootNode.childrenAfterSort || [])],\n            callback,\n            recursionType: RecursionType.AfterFilterAndSort,\n            index: 0,\n            includeFooterNodes,\n        });\n    }\n\n    public forEachPivotNode(\n        callback: (node: RowNode, index: number) => void,\n        includeFooterNodes: boolean = false\n    ): void {\n        this.recursivelyWalkNodesAndCallback({\n            nodes: [this.rootNode],\n            callback,\n            recursionType: RecursionType.PivotNodes,\n            index: 0,\n            includeFooterNodes,\n        });\n    }\n\n    // iterates through each item in memory, and calls the callback function\n    // nodes - the rowNodes to traverse\n    // callback - the user provided callback\n    // recursion type - need this to know what child nodes to recurse, eg if looking at all nodes, or filtered notes etc\n    // index - works similar to the index in forEach in javascript's array function\n    private recursivelyWalkNodesAndCallback(params: {\n        nodes: RowNode[];\n        callback: (node: RowNode, index: number) => void;\n        recursionType: RecursionType;\n        index: number;\n        includeFooterNodes: boolean;\n    }): number {\n        const { nodes, callback, recursionType, includeFooterNodes } = params;\n        let { index } = params;\n\n        const addFooters = (position: 'top' | 'bottom') => {\n            const parentNode = nodes[0]?.parent;\n\n            if (!parentNode) return;\n\n            const grandTotal = includeFooterNodes && this.gos.getGrandTotalRow();\n            const isGroupIncludeFooter = this.gos.getGroupTotalRowCallback();\n            const groupTotal = includeFooterNodes && isGroupIncludeFooter({ node: parentNode });\n\n            const isRootNode = parentNode === this.rootNode;\n            if (isRootNode) {\n                if (grandTotal === position) {\n                    parentNode.createFooter();\n                    callback(parentNode.sibling, index++);\n                }\n                return;\n            }\n\n            if (groupTotal === position) {\n                parentNode.createFooter();\n                callback(parentNode.sibling, index++);\n            }\n        };\n\n        addFooters('top');\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n            callback(node, index++);\n            // go to the next level if it is a group\n            if (node.hasChildren() && !node.footer) {\n                // depending on the recursion type, we pick a difference set of children\n                let nodeChildren: RowNode[] | null = null;\n                switch (recursionType) {\n                    case RecursionType.Normal:\n                        nodeChildren = node.childrenAfterGroup;\n                        break;\n                    case RecursionType.AfterFilter:\n                        nodeChildren = node.childrenAfterAggFilter;\n                        break;\n                    case RecursionType.AfterFilterAndSort:\n                        nodeChildren = node.childrenAfterSort;\n                        break;\n                    case RecursionType.PivotNodes:\n                        // for pivot, we don't go below leafGroup levels\n                        nodeChildren = !node.leafGroup ? node.childrenAfterSort : null;\n                        break;\n                }\n                if (nodeChildren) {\n                    index = this.recursivelyWalkNodesAndCallback({\n                        nodes: [...nodeChildren],\n                        callback,\n                        recursionType,\n                        index,\n                        includeFooterNodes,\n                    });\n                }\n            }\n        }\n        addFooters('bottom');\n        return index;\n    }\n\n    // it's possible to recompute the aggregate without doing the other parts\n    // + api.refreshClientSideRowModel('aggregate')\n    public doAggregate(changedPath?: ChangedPath): void {\n        this.aggregationStage?.execute({ rowNode: this.rootNode, changedPath: changedPath });\n    }\n\n    private doFilterAggregates(changedPath: ChangedPath): void {\n        if (this.filterAggregatesStage) {\n            this.filterAggregatesStage.execute({ rowNode: this.rootNode, changedPath: changedPath });\n        } else {\n            // If filterAggregatesStage is undefined, then so is the grouping stage, so all children should be on the rootNode.\n            this.rootNode.childrenAfterAggFilter = this.rootNode.childrenAfterFilter;\n        }\n    }\n\n    // + gridApi.expandAll()\n    // + gridApi.collapseAll()\n    public expandOrCollapseAll(expand: boolean): void {\n        const usingTreeData = this.gos.get('treeData');\n        const usingPivotMode = this.columnModel.isPivotActive();\n\n        const recursiveExpandOrCollapse = (rowNodes: RowNode[] | null): void => {\n            if (!rowNodes) {\n                return;\n            }\n            rowNodes.forEach((rowNode) => {\n                const actionRow = () => {\n                    rowNode.expanded = expand;\n                    recursiveExpandOrCollapse(rowNode.childrenAfterGroup);\n                };\n\n                if (usingTreeData) {\n                    const hasChildren = _exists(rowNode.childrenAfterGroup);\n                    if (hasChildren) {\n                        actionRow();\n                    }\n                    return;\n                }\n\n                if (usingPivotMode) {\n                    const notLeafGroup = !rowNode.leafGroup;\n                    if (notLeafGroup) {\n                        actionRow();\n                    }\n                    return;\n                }\n\n                const isRowGroup = rowNode.group;\n                if (isRowGroup) {\n                    actionRow();\n                }\n            });\n        };\n\n        if (this.rootNode) {\n            recursiveExpandOrCollapse(this.rootNode.childrenAfterGroup);\n        }\n\n        this.refreshModel({ step: ClientSideRowModelSteps.MAP });\n\n        const eventSource = expand ? 'expandAll' : 'collapseAll';\n        const event: WithoutGridCommon<ExpandOrCollapseAllEvent> = {\n            type: 'expandOrCollapseAll',\n            source: eventSource,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private doSort(rowNodeTransactions: RowNodeTransaction[] | undefined, changedPath: ChangedPath) {\n        this.sortStage.execute({\n            rowNode: this.rootNode,\n            rowNodeTransactions: rowNodeTransactions,\n            changedPath: changedPath,\n        });\n    }\n\n    private doRowGrouping(\n        rowNodeTransactions: RowNodeTransaction[] | undefined,\n        rowNodeOrder: { [id: string]: number } | undefined,\n        changedPath: ChangedPath,\n        afterColumnsChanged: boolean\n    ) {\n        if (this.groupStage) {\n            if (rowNodeTransactions) {\n                this.groupStage.execute({\n                    rowNode: this.rootNode,\n                    rowNodeTransactions: rowNodeTransactions,\n                    rowNodeOrder: rowNodeOrder,\n                    changedPath: changedPath,\n                });\n            } else {\n                this.groupStage.execute({\n                    rowNode: this.rootNode,\n                    changedPath: changedPath,\n                    afterColumnsChanged: afterColumnsChanged,\n                });\n            }\n\n            if (this.gos.get('groupSelectsChildren')) {\n                const selectionChanged = this.selectionService.updateGroupsFromChildrenSelections(\n                    'rowGroupChanged',\n                    changedPath\n                );\n\n                if (selectionChanged) {\n                    const event: WithoutGridCommon<SelectionChangedEvent> = {\n                        type: 'selectionChanged',\n                        source: 'rowGroupChanged',\n                    };\n                    this.eventService.dispatchEvent(event);\n                }\n            }\n        } else {\n            this.rootNode.childrenAfterGroup = this.rootNode.allLeafChildren;\n            if (this.rootNode.sibling) {\n                this.rootNode.sibling.childrenAfterGroup = this.rootNode.childrenAfterGroup;\n            }\n            this.rootNode.updateHasChildren();\n        }\n\n        if (this.nodeManager.isRowCountReady()) {\n            // only if row data has been set\n            this.rowCountReady = true;\n            this.eventService.dispatchEventOnce({\n                type: 'rowCountReady',\n            });\n        }\n    }\n\n    private doFilter(changedPath: ChangedPath) {\n        this.filterStage.execute({ rowNode: this.rootNode, changedPath: changedPath });\n    }\n\n    private doPivot(changedPath: ChangedPath) {\n        this.pivotStage?.execute({ rowNode: this.rootNode, changedPath: changedPath });\n    }\n\n    public getCopyOfNodesMap(): { [id: string]: RowNode } {\n        return this.nodeManager.getCopyOfNodesMap();\n    }\n\n    public getRowNode(id: string): RowNode | undefined {\n        // although id is typed a string, this could be called by the user, and they could have passed a number\n        const idIsGroup = typeof id == 'string' && id.indexOf(RowNode.ID_PREFIX_ROW_GROUP) == 0;\n\n        if (idIsGroup) {\n            // only one users complained about getRowNode not working for groups, after years of\n            // this working for normal rows. so have done quick implementation. if users complain\n            // about performance, then GroupStage should store / manage created groups in a map,\n            // which is a chunk of work.\n            let res: RowNode | undefined = undefined;\n            this.forEachNode((node) => {\n                if (node.id === id) {\n                    res = node;\n                }\n            });\n            return res;\n        }\n\n        return this.nodeManager.getRowNode(id);\n    }\n\n    // rows: the rows to put into the model\n    public setRowData(rowData: any[]): void {\n        // no need to invalidate cache, as the cache is stored on the rowNode,\n        // so new rowNodes means the cache is wiped anyway.\n\n        // - clears selection, done before we set row data to ensure it isn't readded via `selectionService.syncInOldRowNode`\n        this.selectionService.reset('rowDataChanged');\n\n        this.nodeManager.setRowData(rowData);\n\n        if (this.hasStarted) {\n            this.dispatchUpdateEventsAndRefresh();\n        }\n    }\n\n    private dispatchUpdateEventsAndRefresh(): void {\n        // this event kicks off:\n        // - shows 'no rows' overlay if needed\n        const rowDataUpdatedEvent: WithoutGridCommon<RowDataUpdatedEvent> = {\n            type: 'rowDataUpdated',\n        };\n        this.eventService.dispatchEvent(rowDataUpdatedEvent);\n\n        this.refreshModel({\n            step: ClientSideRowModelSteps.EVERYTHING,\n            newData: true,\n        });\n    }\n\n    public batchUpdateRowData(\n        rowDataTransaction: RowDataTransaction,\n        callback?: (res: RowNodeTransaction) => void\n    ): void {\n        if (this.applyAsyncTransactionsTimeout == null) {\n            this.rowDataTransactionBatch = [];\n            const waitMillis = this.gos.getAsyncTransactionWaitMillis();\n            this.applyAsyncTransactionsTimeout = window.setTimeout(() => {\n                this.executeBatchUpdateRowData();\n            }, waitMillis);\n        }\n        this.rowDataTransactionBatch!.push({ rowDataTransaction: rowDataTransaction, callback: callback });\n    }\n\n    public flushAsyncTransactions(): void {\n        if (this.applyAsyncTransactionsTimeout != null) {\n            clearTimeout(this.applyAsyncTransactionsTimeout);\n            this.executeBatchUpdateRowData();\n        }\n    }\n\n    private executeBatchUpdateRowData(): void {\n        this.valueCache.onDataChanged();\n\n        const callbackFuncsBound: ((...args: any[]) => any)[] = [];\n        const rowNodeTrans: RowNodeTransaction[] = [];\n\n        // The rowGroup stage uses rowNodeOrder if order was provided. if we didn't pass 'true' to\n        // commonUpdateRowData, using addIndex would have no effect when grouping.\n        let forceRowNodeOrder = false;\n\n        if (this.rowDataTransactionBatch) {\n            this.rowDataTransactionBatch.forEach((tranItem) => {\n                const rowNodeTran = this.nodeManager.updateRowData(tranItem.rowDataTransaction, undefined);\n                rowNodeTrans.push(rowNodeTran);\n                if (tranItem.callback) {\n                    callbackFuncsBound.push(tranItem.callback.bind(null, rowNodeTran));\n                }\n                if (typeof tranItem.rowDataTransaction.addIndex === 'number') {\n                    forceRowNodeOrder = true;\n                }\n            });\n        }\n\n        this.commonUpdateRowData(rowNodeTrans, undefined, forceRowNodeOrder);\n\n        // do callbacks in next VM turn so it's async\n        if (callbackFuncsBound.length > 0) {\n            window.setTimeout(() => {\n                callbackFuncsBound.forEach((func) => func());\n            }, 0);\n        }\n\n        if (rowNodeTrans.length > 0) {\n            const event: WithoutGridCommon<AsyncTransactionsFlushed> = {\n                type: 'asyncTransactionsFlushed',\n                results: rowNodeTrans,\n            };\n            this.eventService.dispatchEvent(event);\n        }\n\n        this.rowDataTransactionBatch = null;\n        this.applyAsyncTransactionsTimeout = undefined;\n    }\n\n    public updateRowData(\n        rowDataTran: RowDataTransaction,\n        rowNodeOrder?: { [id: string]: number }\n    ): RowNodeTransaction | null {\n        this.valueCache.onDataChanged();\n\n        const rowNodeTran = this.nodeManager.updateRowData(rowDataTran, rowNodeOrder);\n\n        // if doing immutableData, addIndex is never present. however if doing standard transaction, and user\n        // provided addIndex, then this is used in updateRowData. However if doing Enterprise, then the rowGroup\n        // stage also uses the\n        const forceRowNodeOrder = typeof rowDataTran.addIndex === 'number';\n\n        this.commonUpdateRowData([rowNodeTran], rowNodeOrder, forceRowNodeOrder);\n\n        return rowNodeTran;\n    }\n\n    private createRowNodeOrder(): { [id: string]: number } | undefined {\n        const suppressSortOrder = this.gos.get('suppressMaintainUnsortedOrder');\n        if (suppressSortOrder) {\n            return;\n        }\n\n        const orderMap: { [id: string]: number } = {};\n\n        if (this.rootNode && this.rootNode.allLeafChildren) {\n            for (let index = 0; index < this.rootNode.allLeafChildren.length; index++) {\n                const node = this.rootNode.allLeafChildren[index];\n                orderMap[node.id!] = index;\n            }\n        }\n\n        return orderMap;\n    }\n\n    // common to updateRowData and batchUpdateRowData\n    private commonUpdateRowData(\n        rowNodeTrans: RowNodeTransaction[],\n        rowNodeOrder: { [id: string]: number } | undefined,\n        forceRowNodeOrder: boolean\n    ): void {\n        if (!this.hasStarted) {\n            return;\n        }\n\n        const animate = !this.gos.get('suppressAnimationFrame');\n\n        if (forceRowNodeOrder) {\n            rowNodeOrder = this.createRowNodeOrder();\n        }\n\n        const event: WithoutGridCommon<RowDataUpdatedEvent> = {\n            type: 'rowDataUpdated',\n        };\n        this.eventService.dispatchEvent(event);\n\n        this.refreshModel({\n            step: ClientSideRowModelSteps.EVERYTHING,\n            rowNodeTransactions: rowNodeTrans,\n            rowNodeOrder: rowNodeOrder,\n            keepRenderedRows: true,\n            keepEditingRows: true,\n            animate,\n        });\n    }\n\n    private doRowsToDisplay() {\n        this.rowsToDisplay = this.flattenStage.execute({ rowNode: this.rootNode }) as RowNode[];\n    }\n\n    public onRowHeightChanged(): void {\n        this.refreshModel({\n            step: ClientSideRowModelSteps.MAP,\n            keepRenderedRows: true,\n            keepEditingRows: true,\n            keepUndoRedoStack: true,\n        });\n    }\n\n    /** This method is debounced. It is used for row auto-height. If we don't debounce,\n     * then the Row Models will end up recalculating each row position\n     * for each row height change and result in the Row Renderer laying out rows.\n     * This is particularly bad if using print layout, and showing eg 1,000 rows,\n     * each row will change it's height, causing Row Model to update 1,000 times.\n     */\n    public onRowHeightChangedDebounced(): void {\n        this.onRowHeightChanged_debounced();\n    }\n\n    public resetRowHeights(): void {\n        const atLeastOne = this.resetRowHeightsForAllRowNodes();\n\n        this.rootNode.setRowHeight(this.rootNode.rowHeight, true);\n        if (this.rootNode.sibling) {\n            this.rootNode.sibling.setRowHeight(this.rootNode.sibling.rowHeight, true);\n        }\n\n        // when pivotMode but pivot not active, root node is displayed on its own\n        // because it's only ever displayed alone, refreshing the model (onRowHeightChanged) is not required\n        if (atLeastOne) {\n            this.onRowHeightChanged();\n        }\n    }\n\n    private resetRowHeightsForAllRowNodes(): boolean {\n        let atLeastOne = false;\n        this.forEachNode((rowNode) => {\n            rowNode.setRowHeight(rowNode.rowHeight, true);\n            // we keep the height each row is at, however we set estimated=true rather than clear the height.\n            // this means the grid will not reset the row heights back to defaults, rather it will re-calc\n            // the height for each row as the row is displayed. otherwise the scroll will jump when heights are reset.\n            const detailNode = rowNode.detailNode;\n            if (detailNode) {\n                detailNode.setRowHeight(detailNode.rowHeight, true);\n            }\n\n            if (rowNode.sibling) {\n                rowNode.sibling.setRowHeight(rowNode.sibling.rowHeight, true);\n            }\n            atLeastOne = true;\n        });\n\n        return atLeastOne;\n    }\n\n    private onGridStylesChanges(e: CssVariablesChanged) {\n        if (e.rowHeightChanged) {\n            if (this.columnModel.isAutoRowHeightActive()) {\n                return;\n            }\n\n            this.resetRowHeights();\n        }\n    }\n\n    private onGridReady(): void {\n        if (this.hasStarted) {\n            return;\n        }\n        // App can start using API to add transactions, so need to add data into the node manager if not started\n        this.setInitialData();\n    }\n\n    public isRowDataLoaded(): boolean {\n        return this.rowCountReady;\n    }\n}\n", "import type {\n    BeanCollection,\n    ClientSideRowModelStep,\n    IRowNode,\n    RowDataTransaction,\n    RowNodeTransaction,\n} from '@ag-grid-community/core';\nimport { _warnOnce } from '@ag-grid-community/core';\n\nexport function onGroupExpandedOrCollapsed(beans: BeanCollection): void {\n    beans.expansionService.onGroupExpandedOrCollapsed();\n}\n\nexport function refreshClientSideRowModel(beans: BeanCollection, step?: ClientSideRowModelStep): void {\n    beans.rowModelHelperService?.getClientSideRowModel()?.refreshModel(step);\n}\n\nexport function forEachLeafNode<TData = any>(\n    beans: BeanCollection,\n    callback: (rowNode: IRowNode<TData>) => void\n): void {\n    beans.rowModelHelperService?.getClientSideRowModel()?.forEachLeafNode(callback);\n}\n\nexport function forEachNodeAfterFilter<TData = any>(\n    beans: BeanCollection,\n    callback: (rowNode: IRowNode<TData>, index: number) => void\n): void {\n    beans.rowModelHelperService?.getClientSideRowModel()?.forEachNodeAfterFilter(callback);\n}\n\nexport function forEachNodeAfterFilterAndSort<TData = any>(\n    beans: BeanCollection,\n    callback: (rowNode: IRowNode<TData>, index: number) => void\n): void {\n    beans.rowModelHelperService?.getClientSideRowModel()?.forEachNodeAfterFilterAndSort(callback);\n}\n\nexport function resetRowHeights(beans: BeanCollection): void {\n    if (beans.columnModel.isAutoRowHeightActive()) {\n        _warnOnce('calling gridApi.resetRowHeights() makes no sense when using Auto Row Height.');\n        return;\n    }\n    beans.rowModelHelperService?.getClientSideRowModel()?.resetRowHeights();\n}\n\nexport function applyTransaction<TData = any>(\n    beans: BeanCollection,\n    rowDataTransaction: RowDataTransaction<TData>\n): RowNodeTransaction<TData> | null | undefined {\n    return beans.frameworkOverrides.wrapIncoming(() =>\n        beans.rowModelHelperService?.getClientSideRowModel()?.updateRowData(rowDataTransaction)\n    );\n}\n\nexport function applyTransactionAsync<TData = any>(\n    beans: BeanCollection,\n    rowDataTransaction: RowDataTransaction<TData>,\n    callback?: (res: RowNodeTransaction<TData>) => void\n): void {\n    beans.frameworkOverrides.wrapIncoming(() =>\n        beans.rowModelHelperService?.getClientSideRowModel()?.batchUpdateRowData(rowDataTransaction, callback)\n    );\n}\n\nexport function flushAsyncTransactions(beans: BeanCollection): void {\n    beans.frameworkOverrides.wrapIncoming(() =>\n        beans.rowModelHelperService?.getClientSideRowModel()?.flushAsyncTransactions()\n    );\n}\n\nexport function getBestCostNodeSelection<TData = any>(beans: BeanCollection): IRowNode<TData>[] | undefined {\n    return beans.selectionService.getBestCostNodeSelection();\n}\n", "import type {\n    BeanCollection,\n    ChangedPath,\n    FilterManager,\n    IRowNodeStage,\n    NamedBean,\n    RowNode,\n    StageExecuteParams,\n} from '@ag-grid-community/core';\nimport { BeanStub } from '@ag-grid-community/core';\n\nexport class FilterStage extends BeanStub implements IRowNodeStage, NamedBean {\n    beanName = 'filterStage' as const;\n\n    private filterManager?: FilterManager;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.filterManager = beans.filterManager;\n    }\n\n    public execute(params: StageExecuteParams): void {\n        const { changedPath } = params;\n        this.filter(changedPath!);\n    }\n\n    private filter(changedPath: ChangedPath): void {\n        const filterActive: boolean = !!this.filterManager?.isChildFilterPresent();\n        this.filterNodes(filterActive, changedPath);\n    }\n\n    private filterNodes(filterActive: boolean, changedPath: ChangedPath): void {\n        const filterCallback = (rowNode: RowNode, includeChildNodes: boolean) => {\n            // recursively get all children that are groups to also filter\n            if (rowNode.hasChildren()) {\n                // result of filter for this node. when filtering tree data, includeChildNodes = true when parent passes\n                if (filterActive && !includeChildNodes) {\n                    rowNode.childrenAfterFilter = rowNode.childrenAfterGroup!.filter((childNode) => {\n                        // a group is included in the result if it has any children of it's own.\n                        // by this stage, the child groups are already filtered\n                        const passBecauseChildren =\n                            childNode.childrenAfterFilter && childNode.childrenAfterFilter.length > 0;\n\n                        // both leaf level nodes and tree data nodes have data. these get added if\n                        // the data passes the filter\n                        const passBecauseDataPasses =\n                            childNode.data && this.filterManager!.doesRowPassFilter({ rowNode: childNode });\n\n                        // note - tree data nodes pass either if a) they pass themselves or b) any children of that node pass\n\n                        return passBecauseChildren || passBecauseDataPasses;\n                    });\n                } else {\n                    // if not filtering, the result is the original list\n                    rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\n                }\n            } else {\n                rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\n            }\n\n            if (rowNode.sibling) {\n                rowNode.sibling.childrenAfterFilter = rowNode.childrenAfterFilter;\n            }\n        };\n\n        if (this.doingTreeDataFiltering()) {\n            const treeDataDepthFirstFilter = (rowNode: RowNode, alreadyFoundInParent: boolean) => {\n                // tree data filter traverses the hierarchy depth first and includes child nodes if parent passes\n                // filter, and parent nodes will be include if any children exist.\n\n                if (rowNode.childrenAfterGroup) {\n                    for (let i = 0; i < rowNode.childrenAfterGroup.length; i++) {\n                        const childNode = rowNode.childrenAfterGroup[i];\n\n                        // first check if current node passes filter before invoking child nodes\n                        const foundInParent =\n                            alreadyFoundInParent || this.filterManager!.doesRowPassFilter({ rowNode: childNode });\n                        if (childNode.childrenAfterGroup) {\n                            treeDataDepthFirstFilter(rowNode.childrenAfterGroup[i], foundInParent);\n                        } else {\n                            filterCallback(childNode, foundInParent);\n                        }\n                    }\n                }\n                filterCallback(rowNode, alreadyFoundInParent);\n            };\n\n            const treeDataFilterCallback = (rowNode: RowNode) => treeDataDepthFirstFilter(rowNode, false);\n            changedPath.executeFromRootNode(treeDataFilterCallback);\n        } else {\n            const defaultFilterCallback = (rowNode: RowNode) => filterCallback(rowNode, false);\n            changedPath.forEachChangedNodeDepthFirst(defaultFilterCallback, true);\n        }\n    }\n\n    private doingTreeDataFiltering() {\n        return this.gos.get('treeData') && !this.gos.get('excludeChildrenWhenTreeDataFiltering');\n    }\n}\n", "import type {\n    BeanCollection,\n    ColumnModel,\n    GetGroupIncludeFooterParams,\n    IRowNodeStage,\n    NamedBean,\n    StageExecuteParams,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { BeanStub, RowNode, _exists, _missingOrEmpty } from '@ag-grid-community/core';\n\ninterface FlattenDetails {\n    hideOpenParents: boolean;\n    groupRemoveSingleChildren: boolean;\n    groupRemoveLowestSingleChildren: boolean;\n    isGroupMultiAutoColumn: boolean;\n    grandTotalRow: 'top' | 'bottom' | undefined;\n    groupTotalRow: (params: WithoutGridCommon<GetGroupIncludeFooterParams<any, any>>) => 'top' | 'bottom' | undefined;\n}\n\nexport class FlattenStage extends BeanStub implements IRowNodeStage, NamedBean {\n    beanName = 'flattenStage' as const;\n\n    private beans: BeanCollection;\n    private columnModel: ColumnModel;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.beans = beans;\n        this.columnModel = beans.columnModel;\n    }\n\n    public execute(params: StageExecuteParams): RowNode[] {\n        const rootNode = params.rowNode;\n\n        // even if not doing grouping, we do the mapping, as the client might\n        // of passed in data that already has a grouping in it somewhere\n        const result: RowNode[] = [];\n        const skipLeafNodes = this.columnModel.isPivotMode();\n        // if we are reducing, and not grouping, then we want to show the root node, as that\n        // is where the pivot values are\n        const showRootNode = skipLeafNodes && rootNode.leafGroup;\n        const topList = showRootNode ? [rootNode] : rootNode.childrenAfterSort;\n\n        const details = this.getFlattenDetails();\n\n        this.recursivelyAddToRowsToDisplay(details, topList, result, skipLeafNodes, 0);\n\n        // we do not want the footer total if the gris is empty\n        const atLeastOneRowPresent = result.length > 0;\n\n        const includeGrandTotalRow =\n            !showRootNode &&\n            // don't show total footer when showRootNode is true (i.e. in pivot mode and no groups)\n            atLeastOneRowPresent &&\n            details.grandTotalRow;\n\n        if (includeGrandTotalRow) {\n            rootNode.createFooter();\n            const addToTop = details.grandTotalRow === 'top';\n            this.addRowNodeToRowsToDisplay(details, rootNode.sibling, result, 0, addToTop);\n        }\n\n        return result;\n    }\n\n    private getFlattenDetails(): FlattenDetails {\n        // these two are mutually exclusive, so if first set, we don't set the second\n        const groupRemoveSingleChildren = this.gos.get('groupRemoveSingleChildren');\n        const groupRemoveLowestSingleChildren =\n            !groupRemoveSingleChildren && this.gos.get('groupRemoveLowestSingleChildren');\n\n        return {\n            groupRemoveLowestSingleChildren,\n            groupRemoveSingleChildren,\n            isGroupMultiAutoColumn: this.gos.isGroupMultiAutoColumn(),\n            hideOpenParents: this.gos.get('groupHideOpenParents'),\n            grandTotalRow: this.gos.getGrandTotalRow(),\n            groupTotalRow: this.gos.getGroupTotalRowCallback(),\n        };\n    }\n\n    private recursivelyAddToRowsToDisplay(\n        details: FlattenDetails,\n        rowsToFlatten: RowNode[] | null,\n        result: RowNode[],\n        skipLeafNodes: boolean,\n        uiLevel: number\n    ) {\n        if (_missingOrEmpty(rowsToFlatten)) {\n            return;\n        }\n\n        for (let i = 0; i < rowsToFlatten!.length; i++) {\n            const rowNode = rowsToFlatten![i];\n            // check all these cases, for working out if this row should be included in the final mapped list\n            const isParent = rowNode.hasChildren();\n\n            const isSkippedLeafNode = skipLeafNodes && !isParent;\n\n            const isRemovedSingleChildrenGroup =\n                details.groupRemoveSingleChildren && isParent && rowNode.childrenAfterGroup!.length === 1;\n\n            const isRemovedLowestSingleChildrenGroup =\n                details.groupRemoveLowestSingleChildren &&\n                isParent &&\n                rowNode.leafGroup &&\n                rowNode.childrenAfterGroup!.length === 1;\n\n            // hide open parents means when group is open, we don't show it. we also need to make sure the\n            // group is expandable in the first place (as leaf groups are not expandable if pivot mode is on).\n            // the UI will never allow expanding leaf  groups, however the user might via the API (or menu option 'expand all row groups')\n            const neverAllowToExpand = skipLeafNodes && rowNode.leafGroup;\n\n            const isHiddenOpenParent =\n                details.hideOpenParents && rowNode.expanded && !rowNode.master && !neverAllowToExpand;\n\n            const thisRowShouldBeRendered =\n                !isSkippedLeafNode &&\n                !isHiddenOpenParent &&\n                !isRemovedSingleChildrenGroup &&\n                !isRemovedLowestSingleChildrenGroup;\n\n            if (thisRowShouldBeRendered) {\n                this.addRowNodeToRowsToDisplay(details, rowNode, result, uiLevel);\n            }\n\n            // if we are pivoting, we never map below the leaf group\n            if (skipLeafNodes && rowNode.leafGroup) {\n                continue;\n            }\n\n            if (isParent) {\n                const excludedParent = isRemovedSingleChildrenGroup || isRemovedLowestSingleChildrenGroup;\n\n                // we traverse the group if it is expended, however we always traverse if the parent node\n                // was removed (as the group will never be opened if it is not displayed, we show the children instead)\n                if (rowNode.expanded || excludedParent) {\n                    const doesRowShowFooter = details.groupTotalRow({ node: rowNode });\n                    if (!doesRowShowFooter) {\n                        rowNode.destroyFooter();\n                    }\n\n                    // if the parent was excluded, then ui level is that of the parent\n                    const uiLevelForChildren = excludedParent ? uiLevel : uiLevel + 1;\n                    if (doesRowShowFooter === 'top') {\n                        rowNode.createFooter();\n                        this.addRowNodeToRowsToDisplay(details, rowNode.sibling, result, uiLevelForChildren);\n                    }\n\n                    this.recursivelyAddToRowsToDisplay(\n                        details,\n                        rowNode.childrenAfterSort,\n                        result,\n                        skipLeafNodes,\n                        uiLevelForChildren\n                    );\n\n                    if (doesRowShowFooter === 'bottom') {\n                        rowNode.createFooter();\n                        this.addRowNodeToRowsToDisplay(details, rowNode.sibling, result, uiLevelForChildren);\n                    }\n                }\n            } else if (rowNode.master && rowNode.expanded) {\n                const detailNode = this.createDetailNode(rowNode);\n                this.addRowNodeToRowsToDisplay(details, detailNode, result, uiLevel);\n            }\n        }\n    }\n\n    // duplicated method, it's also in floatingRowModel\n    private addRowNodeToRowsToDisplay(\n        details: FlattenDetails,\n        rowNode: RowNode,\n        result: RowNode[],\n        uiLevel: number,\n        addToTop?: boolean\n    ): void {\n        if (addToTop) {\n            result.unshift(rowNode);\n        } else {\n            result.push(rowNode);\n        }\n        rowNode.setUiLevel(details.isGroupMultiAutoColumn ? 0 : uiLevel);\n    }\n\n    private createDetailNode(masterNode: RowNode): RowNode {\n        if (_exists(masterNode.detailNode)) {\n            return masterNode.detailNode;\n        }\n\n        const detailNode = new RowNode(this.beans);\n\n        detailNode.detail = true;\n        detailNode.selectable = false;\n        detailNode.parent = masterNode;\n\n        if (_exists(masterNode.id)) {\n            detailNode.id = 'detail_' + masterNode.id;\n        }\n\n        detailNode.data = masterNode.data;\n        detailNode.level = masterNode.level + 1;\n        masterNode.detailNode = detailNode;\n\n        return detailNode;\n    }\n}\n", "import type {\n    BeanCollection,\n    IImmutableService,\n    IRowModel,\n    ISelectionService,\n    NamedBean,\n    RowDataTransaction,\n    RowNode,\n} from '@ag-grid-community/core';\nimport { BeanStub, _errorOnce, _exists, _iterateObject, _missing } from '@ag-grid-community/core';\n\nimport type { ClientSideRowModel } from './clientSideRowModel';\n\nexport class ImmutableService extends BeanStub implements NamedBean, IImmutableService {\n    beanName = 'immutableService' as const;\n\n    private rowModel: IRowModel;\n    private selectionService: ISelectionService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.rowModel = beans.rowModel;\n        this.selectionService = beans.selectionService;\n    }\n\n    private clientSideRowModel: ClientSideRowModel;\n\n    public postConstruct(): void {\n        if (this.rowModel.getType() === 'clientSide') {\n            this.clientSideRowModel = this.rowModel as ClientSideRowModel;\n\n            this.addManagedPropertyListener('rowData', () => this.onRowDataUpdated());\n        }\n    }\n\n    public isActive(): boolean {\n        const getRowIdProvided = this.gos.exists('getRowId');\n        // this property is a backwards compatibility property, for those who want\n        // the old behaviour of Row ID's but NOT Immutable Data.\n        const resetRowDataOnUpdate = this.gos.get('resetRowDataOnUpdate');\n\n        if (resetRowDataOnUpdate) {\n            return false;\n        }\n        return getRowIdProvided;\n    }\n\n    public setRowData(rowData: any[]): void {\n        const transactionAndMap = this.createTransactionForRowData(rowData);\n        if (!transactionAndMap) {\n            return;\n        }\n\n        const [transaction, orderIdMap] = transactionAndMap;\n        this.clientSideRowModel.updateRowData(transaction, orderIdMap);\n    }\n\n    // converts the setRowData() command to a transaction\n    private createTransactionForRowData(\n        rowData: any[]\n    ): [RowDataTransaction, { [id: string]: number } | undefined] | undefined {\n        if (_missing(this.clientSideRowModel)) {\n            _errorOnce('ImmutableService only works with ClientSideRowModel');\n            return;\n        }\n\n        const getRowIdFunc = this.gos.getRowIdCallback();\n        if (getRowIdFunc == null) {\n            _errorOnce('ImmutableService requires getRowId() callback to be implemented, your row data needs IDs!');\n            return;\n        }\n\n        // convert the data into a transaction object by working out adds, removes and updates\n        const transaction: RowDataTransaction = {\n            remove: [],\n            update: [],\n            add: [],\n        };\n\n        const existingNodesMap: { [id: string]: RowNode | undefined } = this.clientSideRowModel.getCopyOfNodesMap();\n\n        const suppressSortOrder = this.gos.get('suppressMaintainUnsortedOrder');\n        const orderMap: { [id: string]: number } | undefined = suppressSortOrder ? undefined : {};\n\n        if (_exists(rowData)) {\n            // split all the new data in the following:\n            // if new, push to 'add'\n            // if update, push to 'update'\n            // if not changed, do not include in the transaction\n            rowData.forEach((data: any, index: number) => {\n                const id: string = getRowIdFunc({ data, level: 0 });\n                const existingNode: RowNode | undefined = existingNodesMap[id];\n\n                if (orderMap) {\n                    orderMap[id] = index;\n                }\n\n                if (existingNode) {\n                    const dataHasChanged = existingNode.data !== data;\n                    if (dataHasChanged) {\n                        transaction.update!.push(data);\n                    }\n                    // otherwise, if data not changed, we just don't include it anywhere, as it's not a delta\n\n                    // remove from list, so we know the item is not to be removed\n                    existingNodesMap[id] = undefined;\n                } else {\n                    transaction.add!.push(data);\n                }\n            });\n        }\n\n        // at this point, all rows that are left, should be removed\n        _iterateObject(existingNodesMap, (id: string, rowNode: RowNode) => {\n            if (rowNode) {\n                transaction.remove!.push(rowNode.data);\n            }\n        });\n\n        return [transaction, orderMap];\n    }\n\n    private onRowDataUpdated(): void {\n        const rowData = this.gos.get('rowData');\n        if (!rowData) {\n            return;\n        }\n\n        if (this.isActive()) {\n            this.setRowData(rowData);\n        } else {\n            this.selectionService.reset('rowDataChanged');\n            this.clientSideRowModel.setRowData(rowData);\n        }\n    }\n}\n", "import type {\n    BeanCollection,\n    ChangedPath,\n    ColumnModel,\n    FuncColsService,\n    IRowNode,\n    IShowRowGroupColsService,\n    NamedBean,\n    PostSortRowsParams,\n    RowNode,\n    RowNodeSorter,\n    RowNodeTransaction,\n    SortOption,\n    SortedRowNode,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { BeanStub, _errorOnce, _missing, _warnOnce } from '@ag-grid-community/core';\n\nexport class SortService extends BeanStub implements NamedBean {\n    beanName = 'sortService' as const;\n\n    private columnModel: ColumnModel;\n    private funcColsService: FuncColsService;\n    private rowNodeSorter: RowNodeSorter;\n    private showRowGroupColsService?: IShowRowGroupColsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.columnModel = beans.columnModel;\n        this.funcColsService = beans.funcColsService;\n        this.rowNodeSorter = beans.rowNodeSorter;\n        this.showRowGroupColsService = beans.showRowGroupColsService;\n    }\n\n    public sort(\n        sortOptions: SortOption[],\n        sortActive: boolean,\n        useDeltaSort: boolean,\n        rowNodeTransactions: RowNodeTransaction[] | null | undefined,\n        changedPath: ChangedPath | undefined,\n        sortContainsGroupColumns: boolean\n    ): void {\n        const groupMaintainOrder = this.gos.get('groupMaintainOrder');\n        const groupColumnsPresent = this.columnModel.getCols().some((c) => c.isRowGroupActive());\n\n        let allDirtyNodes: { [key: string]: true } = {};\n        if (useDeltaSort && rowNodeTransactions) {\n            allDirtyNodes = this.calculateDirtyNodes(rowNodeTransactions);\n        }\n\n        const isPivotMode = this.columnModel.isPivotMode();\n        const postSortFunc = this.gos.getCallback('postSortRows');\n\n        const callback = (rowNode: RowNode) => {\n            // we clear out the 'pull down open parents' first, as the values mix up the sorting\n            this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterAggFilter, true);\n\n            // It's pointless to sort rows which aren't being displayed. in pivot mode we don't need to sort the leaf group children.\n            const skipSortingPivotLeafs = isPivotMode && rowNode.leafGroup;\n\n            // Javascript sort is non deterministic when all the array items are equals, ie Comparator always returns 0,\n            // so to ensure the array keeps its order, add an additional sorting condition manually, in this case we\n            // are going to inspect the original array position. This is what sortedRowNodes is for.\n            const skipSortingGroups =\n                groupMaintainOrder && groupColumnsPresent && !rowNode.leafGroup && !sortContainsGroupColumns;\n            if (skipSortingGroups) {\n                const nextGroup = this.funcColsService.getRowGroupColumns()?.[rowNode.level + 1];\n                // if the sort is null, then sort was explicitly removed, so remove sort from this group.\n                const wasSortExplicitlyRemoved = nextGroup?.getSort() === null;\n\n                const childrenToBeSorted = rowNode.childrenAfterAggFilter!.slice(0);\n                if (rowNode.childrenAfterSort && !wasSortExplicitlyRemoved) {\n                    const indexedOrders: { [key: string]: number } = {};\n                    rowNode.childrenAfterSort.forEach((node, idx) => {\n                        indexedOrders[node.id!] = idx;\n                    });\n                    childrenToBeSorted.sort(\n                        (row1, row2) => (indexedOrders[row1.id!] ?? 0) - (indexedOrders[row2.id!] ?? 0)\n                    );\n                }\n                rowNode.childrenAfterSort = childrenToBeSorted;\n            } else if (!sortActive || skipSortingPivotLeafs) {\n                // if there's no sort to make, skip this step\n                rowNode.childrenAfterSort = rowNode.childrenAfterAggFilter!.slice(0);\n            } else if (useDeltaSort) {\n                rowNode.childrenAfterSort = this.doDeltaSort(rowNode, allDirtyNodes, changedPath!, sortOptions);\n            } else {\n                rowNode.childrenAfterSort = this.rowNodeSorter.doFullSort(rowNode.childrenAfterAggFilter!, sortOptions);\n            }\n\n            if (rowNode.sibling) {\n                rowNode.sibling.childrenAfterSort = rowNode.childrenAfterSort;\n            }\n\n            this.updateChildIndexes(rowNode);\n\n            if (postSortFunc) {\n                const params: WithoutGridCommon<PostSortRowsParams> = { nodes: rowNode.childrenAfterSort };\n                postSortFunc(params);\n            }\n        };\n\n        if (changedPath) {\n            changedPath.forEachChangedNodeDepthFirst(callback);\n        }\n\n        this.updateGroupDataForHideOpenParents(changedPath);\n    }\n\n    private calculateDirtyNodes(rowNodeTransactions?: RowNodeTransaction[] | null): { [nodeId: string]: true } {\n        const dirtyNodes: { [nodeId: string]: true } = {};\n\n        const addNodesFunc = (rowNodes: IRowNode[]) => {\n            if (rowNodes) {\n                rowNodes.forEach((rowNode) => (dirtyNodes[rowNode.id!] = true));\n            }\n        };\n\n        // all leaf level nodes in the transaction were impacted\n        if (rowNodeTransactions) {\n            rowNodeTransactions.forEach((tran) => {\n                addNodesFunc(tran.add);\n                addNodesFunc(tran.update);\n                addNodesFunc(tran.remove);\n            });\n        }\n\n        return dirtyNodes;\n    }\n\n    private doDeltaSort(\n        rowNode: RowNode,\n        allTouchedNodes: { [rowId: string]: true },\n        changedPath: ChangedPath,\n        sortOptions: SortOption[]\n    ) {\n        const unsortedRows = rowNode.childrenAfterAggFilter!;\n        const oldSortedRows = rowNode.childrenAfterSort;\n        if (!oldSortedRows) {\n            return this.rowNodeSorter.doFullSort(unsortedRows, sortOptions);\n        }\n\n        const untouchedRowsMap: { [rowId: string]: true } = {};\n        const touchedRows: RowNode[] = [];\n\n        unsortedRows.forEach((row) => {\n            if (allTouchedNodes[row.id!] || !changedPath.canSkip(row)) {\n                touchedRows.push(row);\n            } else {\n                untouchedRowsMap[row.id!] = true;\n            }\n        });\n\n        const sortedUntouchedRows = oldSortedRows.filter((child) => untouchedRowsMap[child.id!]);\n\n        const mapNodeToSortedNode = (rowNode: RowNode, pos: number): SortedRowNode => ({\n            currentPos: pos,\n            rowNode: rowNode,\n        });\n\n        const sortedChangedRows = touchedRows\n            .map(mapNodeToSortedNode)\n            .sort((a, b) => this.rowNodeSorter.compareRowNodes(sortOptions, a, b));\n\n        return this.mergeSortedArrays(sortOptions, sortedChangedRows, sortedUntouchedRows.map(mapNodeToSortedNode)).map(\n            ({ rowNode }) => rowNode\n        );\n    }\n\n    // Merge two sorted arrays into each other\n    private mergeSortedArrays(sortOptions: SortOption[], arr1: SortedRowNode[], arr2: SortedRowNode[]) {\n        const res = [];\n        let i = 0;\n        let j = 0;\n\n        // Traverse both array, adding them in order\n        while (i < arr1.length && j < arr2.length) {\n            // Check if current element of first\n            // array is smaller than current element\n            // of second array. If yes, store first\n            // array element and increment first array\n            // index. Otherwise do same with second array\n            const compareResult = this.rowNodeSorter.compareRowNodes(sortOptions, arr1[i], arr2[j]);\n            if (compareResult < 0) {\n                res.push(arr1[i++]);\n            } else {\n                res.push(arr2[j++]);\n            }\n        }\n\n        // add remaining from arr1\n        while (i < arr1.length) {\n            res.push(arr1[i++]);\n        }\n\n        // add remaining from arr2\n        while (j < arr2.length) {\n            res.push(arr2[j++]);\n        }\n\n        return res;\n    }\n\n    private updateChildIndexes(rowNode: RowNode) {\n        if (_missing(rowNode.childrenAfterSort)) {\n            return;\n        }\n\n        const listToSort = rowNode.childrenAfterSort;\n        for (let i = 0; i < listToSort.length; i++) {\n            const child = listToSort[i];\n            const firstChild = i === 0;\n            const lastChild = i === rowNode.childrenAfterSort.length - 1;\n            child.setFirstChild(firstChild);\n            child.setLastChild(lastChild);\n            child.setChildIndex(i);\n        }\n    }\n\n    private updateGroupDataForHideOpenParents(changedPath?: ChangedPath) {\n        if (!this.gos.get('groupHideOpenParents')) {\n            return;\n        }\n\n        if (this.gos.get('treeData')) {\n            _warnOnce(\n                `The property hideOpenParents dose not work with Tree Data. This is because Tree Data has values at the group level, it doesn't make sense to hide them.`\n            );\n            return false;\n        }\n\n        // recurse breadth first over group nodes after sort to 'pull down' group data to child groups\n        const callback = (rowNode: RowNode) => {\n            this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterSort, false);\n            rowNode.childrenAfterSort!.forEach((child) => {\n                if (child.hasChildren()) {\n                    callback(child);\n                }\n            });\n        };\n\n        if (changedPath) {\n            changedPath.executeFromRootNode((rowNode) => callback(rowNode));\n        }\n    }\n\n    private pullDownGroupDataForHideOpenParents(rowNodes: RowNode[] | null, clearOperation: boolean) {\n        if (!this.gos.get('groupHideOpenParents') || _missing(rowNodes)) {\n            return;\n        }\n\n        rowNodes.forEach((childRowNode) => {\n            const groupDisplayCols = this.showRowGroupColsService?.getShowRowGroupCols() ?? [];\n            groupDisplayCols.forEach((groupDisplayCol) => {\n                const showRowGroup = groupDisplayCol.getColDef().showRowGroup;\n                if (typeof showRowGroup !== 'string') {\n                    _errorOnce(\n                        'groupHideOpenParents only works when specifying specific columns for colDef.showRowGroup'\n                    );\n                    return;\n                }\n\n                const displayingGroupKey = showRowGroup;\n                const rowGroupColumn = this.columnModel.getColDefCol(displayingGroupKey);\n                const thisRowNodeMatches = rowGroupColumn === childRowNode.rowGroupColumn;\n\n                if (thisRowNodeMatches) {\n                    return;\n                }\n\n                if (clearOperation) {\n                    // if doing a clear operation, we clear down the value for every possible group column\n                    childRowNode.setGroupValue(groupDisplayCol.getId(), undefined);\n                } else {\n                    // if doing a set operation, we set only where the pull down is to occur\n                    const parentToStealFrom = childRowNode.getFirstChildOfFirstChild(rowGroupColumn);\n                    if (parentToStealFrom) {\n                        childRowNode.setGroupValue(groupDisplayCol.getId(), parentToStealFrom.key);\n                    }\n                }\n            });\n        });\n    }\n}\n", "import type {\n    BeanCollection,\n    IRowNodeStage,\n    NamedBean,\n    SortController,\n    SortOption,\n    StageExecuteParams,\n} from '@ag-grid-community/core';\nimport { BeanStub, _exists } from '@ag-grid-community/core';\n\nimport type { SortService } from './sortService';\n\nexport class SortStage extends BeanStub implements NamedBean, IRowNodeStage {\n    beanName = 'sortStage' as const;\n\n    private sortService: SortService;\n    private sortController: SortController;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.sortService = beans.sortService as SortService;\n        this.sortController = beans.sortController;\n    }\n\n    public execute(params: StageExecuteParams): void {\n        const sortOptions: SortOption[] = this.sortController.getSortOptions();\n\n        const sortActive = _exists(sortOptions) && sortOptions.length > 0;\n        const deltaSort =\n            sortActive &&\n            _exists(params.rowNodeTransactions) &&\n            // in time we can remove this check, so that delta sort is always\n            // on if transactions are present. it's off for now so that we can\n            // selectively turn it on and test it with some select users before\n            // rolling out to everyone.\n            this.gos.get('deltaSort');\n\n        const sortContainsGroupColumns = sortOptions.some((opt) => {\n            const isSortingCoupled = this.gos.isColumnsSortingCoupledToGroup();\n            if (isSortingCoupled) {\n                return opt.column.isPrimary() && opt.column.isRowGroupActive();\n            }\n            return !!opt.column.getColDef().showRowGroup;\n        });\n        this.sortService.sort(\n            sortOptions,\n            sortActive,\n            deltaSort,\n            params.rowNodeTransactions,\n            params.changedPath,\n            sortContainsGroupColumns\n        );\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.3.1';\n", "import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames, RowModelHelperService, _CsrmSsrmSharedApiModule } from '@ag-grid-community/core';\n\nimport { ClientSideRowModel } from './clientSideRowModel/clientSideRowModel';\nimport {\n    applyTransaction,\n    applyTransactionAsync,\n    flushAsyncTransactions,\n    forEachLeafNode,\n    forEachNodeAfterFilter,\n    forEachNodeAfterFilterAndSort,\n    getBestCostNodeSelection,\n    onGroupExpandedOrCollapsed,\n    refreshClientSideRowModel,\n    resetRowHeights,\n} from './clientSideRowModel/clientSideRowModelApi';\nimport { FilterStage } from './clientSideRowModel/filterStage';\nimport { FlattenStage } from './clientSideRowModel/flattenStage';\nimport { ImmutableService } from './clientSideRowModel/immutableService';\nimport { SortService } from './clientSideRowModel/sortService';\nimport { SortStage } from './clientSideRowModel/sortStage';\nimport { VERSION } from './version';\n\nexport const ClientSideRowModelCoreModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.ClientSideRowModelModule}-core`,\n    rowModel: 'clientSide',\n    beans: [ClientSideRowModel, FilterStage, SortStage, FlattenStage, SortService, ImmutableService],\n};\n\nexport const ClientSideRowModelApiModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.ClientSideRowModelModule}-api`,\n    beans: [RowModelHelperService],\n    apiFunctions: {\n        onGroupExpandedOrCollapsed,\n        refreshClientSideRowModel,\n        forEachLeafNode,\n        forEachNodeAfterFilter,\n        forEachNodeAfterFilterAndSort,\n        resetRowHeights,\n        applyTransaction,\n        applyTransactionAsync,\n        flushAsyncTransactions,\n        getBestCostNodeSelection,\n    },\n    dependantModules: [ClientSideRowModelCoreModule, _CsrmSsrmSharedApiModule],\n};\n\nexport const ClientSideRowModelModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.ClientSideRowModelModule,\n    dependantModules: [ClientSideRowModelCoreModule, ClientSideRowModelApiModule],\n};\n", "import { BeanStub } from '@ag-grid-community/core';\nimport type { ExportParams } from '@ag-grid-community/core';\n\nimport type { BaseCreatorBeans, GridSerializingSession } from './interfaces';\n\nexport abstract class BaseCreator<T, S extends GridSerializingSession<T>, P extends ExportParams<T>> extends BeanStub {\n    private beans: BaseCreatorBeans;\n\n    protected setBeans(beans: BaseCreatorBeans) {\n        this.beans = beans;\n    }\n\n    protected abstract export(userParams?: P, compress?: boolean): void;\n\n    protected abstract getMergedParams(params?: P): P;\n\n    protected getFileName(fileName?: string): string {\n        const extension = this.getDefaultFileExtension();\n\n        if (fileName == null || !fileName.length) {\n            fileName = this.getDefaultFileName();\n        }\n\n        return fileName.indexOf('.') === -1 ? `${fileName}.${extension}` : fileName;\n    }\n\n    protected getData(params: P): string {\n        const serializingSession = this.createSerializingSession(params);\n        return this.beans.gridSerializer.serialize(serializingSession, params);\n    }\n\n    public getDefaultFileName(): string {\n        return `export.${this.getDefaultFileExtension()}`;\n    }\n\n    public abstract createSerializingSession(params?: P): S;\n    public abstract getDefaultFileExtension(): string;\n    public abstract isExportSuppressed(): boolean;\n}\n", "import type {\n    AgColumn,\n    ColumnModel,\n    ColumnNameService,\n    FuncColsService,\n    GridOptionsService,\n    ProcessCellForExportParams,\n    ProcessGroupHeaderForExportParams,\n    ProcessHeaderForExportParams,\n    ProcessRowGroupForExportParams,\n    RowNode,\n    ValueService,\n} from '@ag-grid-community/core';\n\nimport type {\n    GridSerializingParams,\n    GridSerializingSession,\n    RowAccumulator,\n    RowSpanningAccumulator,\n} from '../interfaces';\n\nexport abstract class BaseGridSerializingSession<T> implements GridSerializingSession<T> {\n    public columnModel: ColumnModel;\n    private columnNameService: ColumnNameService;\n    public funcColsService: FuncColsService;\n    public valueService: ValueService;\n    public gos: GridOptionsService;\n    public processCellCallback?: (params: ProcessCellForExportParams) => string;\n    public processHeaderCallback?: (params: ProcessHeaderForExportParams) => string;\n    public processGroupHeaderCallback?: (params: ProcessGroupHeaderForExportParams) => string;\n    public processRowGroupCallback?: (params: ProcessRowGroupForExportParams) => string;\n\n    private groupColumns: AgColumn[] = [];\n\n    constructor(config: GridSerializingParams) {\n        const {\n            columnModel,\n            funcColsService,\n            columnNameService,\n            valueService,\n            gos,\n            processCellCallback,\n            processHeaderCallback,\n            processGroupHeaderCallback,\n            processRowGroupCallback,\n        } = config;\n\n        this.columnModel = columnModel;\n        this.funcColsService = funcColsService;\n        this.columnNameService = columnNameService;\n        this.valueService = valueService;\n        this.gos = gos;\n        this.processCellCallback = processCellCallback;\n        this.processHeaderCallback = processHeaderCallback;\n        this.processGroupHeaderCallback = processGroupHeaderCallback;\n        this.processRowGroupCallback = processRowGroupCallback;\n    }\n\n    abstract addCustomContent(customContent: T): void;\n    abstract onNewHeaderGroupingRow(): RowSpanningAccumulator;\n    abstract onNewHeaderRow(): RowAccumulator;\n    abstract onNewBodyRow(node?: RowNode): RowAccumulator;\n    abstract parse(): string;\n\n    public prepare(columnsToExport: AgColumn[]): void {\n        this.groupColumns = columnsToExport.filter((col) => !!col.getColDef().showRowGroup);\n    }\n\n    public extractHeaderValue(column: AgColumn): string {\n        const value = this.getHeaderName(this.processHeaderCallback, column);\n        return value ?? '';\n    }\n\n    public extractRowCellValue(\n        column: AgColumn,\n        index: number,\n        accumulatedRowIndex: number,\n        type: string,\n        node: RowNode\n    ): { value: any; valueFormatted?: string | null } {\n        // we render the group summary text e.g. \"-> Parent -> Child\"...\n        const hideOpenParents = this.gos.get('groupHideOpenParents');\n        const value =\n            (!hideOpenParents || node.footer) && this.shouldRenderGroupSummaryCell(node, column, index)\n                ? this.createValueForGroupNode(column, node)\n                : this.valueService.getValue(column, node);\n\n        const processedValue = this.processCell({\n            accumulatedRowIndex,\n            rowNode: node,\n            column,\n            value,\n            processCellCallback: this.processCellCallback,\n            type,\n        });\n\n        return processedValue;\n    }\n\n    private shouldRenderGroupSummaryCell(node: RowNode, column: AgColumn, currentColumnIndex: number): boolean {\n        const isGroupNode = node && node.group;\n        // only on group rows\n        if (!isGroupNode) {\n            return false;\n        }\n\n        const currentColumnGroupIndex = this.groupColumns.indexOf(column);\n\n        if (currentColumnGroupIndex !== -1) {\n            if (node.groupData?.[column.getId()] != null) {\n                return true;\n            }\n\n            if (this.gos.isRowModelType('serverSide') && node.group) {\n                return true;\n            }\n\n            // if this is a top level footer, always render`Total` in the left-most cell\n            if (node.footer && node.level === -1) {\n                const colDef = column.getColDef();\n                const isFullWidth = colDef == null || colDef.showRowGroup === true;\n\n                return isFullWidth || colDef.showRowGroup === this.funcColsService.getRowGroupColumns()[0].getId();\n            }\n        }\n\n        const isGroupUseEntireRow = this.gos.isGroupUseEntireRow(this.columnModel.isPivotMode());\n\n        return currentColumnIndex === 0 && isGroupUseEntireRow;\n    }\n\n    private getHeaderName(\n        callback: ((params: ProcessHeaderForExportParams) => string) | undefined,\n        column: AgColumn\n    ): string | null {\n        if (callback) {\n            return callback(this.gos.addGridCommonParams({ column }));\n        }\n\n        return this.columnNameService.getDisplayNameForColumn(column, 'csv', true);\n    }\n\n    private createValueForGroupNode(column: AgColumn, node: RowNode): string {\n        if (this.processRowGroupCallback) {\n            return this.processRowGroupCallback(this.gos.addGridCommonParams({ column, node }));\n        }\n\n        const isTreeData = this.gos.get('treeData');\n        const isSuppressGroupMaintainValueType = this.gos.get('suppressGroupMaintainValueType');\n\n        // if not tree data and not suppressGroupMaintainValueType then we get the value from the group data\n        const getValueFromNode = (node: RowNode) => {\n            if (isTreeData || isSuppressGroupMaintainValueType) {\n                return node.key;\n            }\n            const value = node.groupData?.[column.getId()];\n            if (\n                !value ||\n                !node.rowGroupColumn ||\n                node.rowGroupColumn.getColDef().useValueFormatterForExport === false\n            ) {\n                return value;\n            }\n            return this.valueService.formatValue(node.rowGroupColumn, node, value) ?? value;\n        };\n\n        const isFooter = node.footer;\n        const keys = [getValueFromNode(node)];\n\n        if (!this.gos.isGroupMultiAutoColumn()) {\n            while (node.parent) {\n                node = node.parent;\n                keys.push(getValueFromNode(node));\n            }\n        }\n\n        const groupValue = keys.reverse().join(' -> ');\n\n        return isFooter ? `Total ${groupValue}` : groupValue;\n    }\n\n    private processCell(params: {\n        accumulatedRowIndex: number;\n        rowNode: RowNode;\n        column: AgColumn;\n        value: any;\n        processCellCallback: ((params: ProcessCellForExportParams) => string) | undefined;\n        type: string;\n    }): { value: any; valueFormatted?: string | null } {\n        const { accumulatedRowIndex, rowNode, column, value, processCellCallback, type } = params;\n\n        if (processCellCallback) {\n            return {\n                value:\n                    processCellCallback(\n                        this.gos.addGridCommonParams({\n                            accumulatedRowIndex,\n                            column: column,\n                            node: rowNode,\n                            value: value,\n                            type: type,\n                            parseValue: (valueToParse: string) =>\n                                this.valueService.parseValue(\n                                    column,\n                                    rowNode,\n                                    valueToParse,\n                                    this.valueService.getValue(column, rowNode)\n                                ),\n                            formatValue: (valueToFormat: any) =>\n                                this.valueService.formatValue(column, rowNode, valueToFormat) ?? valueToFormat,\n                        })\n                    ) ?? '',\n            };\n        }\n\n        if (column.getColDef().useValueFormatterForExport !== false) {\n            return {\n                value: value ?? '',\n                valueFormatted: this.valueService.formatValue(column, rowNode, value),\n            };\n        }\n\n        return { value: value ?? '' };\n    }\n}\n", "import type {\n    BeanCollection,\n    ColumnModel,\n    ColumnNameService,\n    CsvCustomContent,\n    CsvExportParams,\n    FuncColsService,\n    ICsvCreator,\n    NamedBean,\n    ValueService,\n} from '@ag-grid-community/core';\nimport { _warnOnce } from '@ag-grid-community/core';\n\nimport { BaseCreator } from './baseCreator';\nimport { Downloader } from './downloader';\nimport type { GridSerializer } from './gridSerializer';\nimport { CsvSerializingSession } from './sessions/csvSerializingSession';\n\nexport class CsvCreator\n    extends BaseCreator<CsvCustomContent, CsvSerializingSession, CsvExportParams>\n    implements NamedBean, ICsvCreator\n{\n    beanName = 'csvCreator' as const;\n\n    private columnModel: ColumnModel;\n    private columnNameService: ColumnNameService;\n    private funcColsService: FuncColsService;\n    private valueService: ValueService;\n    private gridSerializer: GridSerializer;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.columnModel = beans.columnModel;\n        this.columnNameService = beans.columnNameService;\n        this.funcColsService = beans.funcColsService;\n        this.valueService = beans.valueService;\n        this.gridSerializer = beans.gridSerializer as GridSerializer;\n    }\n\n    public postConstruct(): void {\n        this.setBeans({\n            gridSerializer: this.gridSerializer,\n            gos: this.gos,\n        });\n    }\n\n    protected getMergedParams(params?: CsvExportParams): CsvExportParams {\n        const baseParams = this.gos.get('defaultCsvExportParams');\n        return Object.assign({}, baseParams, params);\n    }\n\n    protected export(userParams?: CsvExportParams): void {\n        if (this.isExportSuppressed()) {\n            _warnOnce(`Export cancelled. Export is not allowed as per your configuration.`);\n            return;\n        }\n\n        const mergedParams = this.getMergedParams(userParams);\n        const data = this.getData(mergedParams);\n\n        const packagedFile = new Blob(['\\ufeff', data], { type: 'text/plain' });\n\n        const fileName =\n            typeof mergedParams.fileName === 'function'\n                ? mergedParams.fileName(this.gos.getGridCommonParams())\n                : mergedParams.fileName;\n\n        Downloader.download(this.getFileName(fileName), packagedFile);\n    }\n\n    public exportDataAsCsv(params?: CsvExportParams): void {\n        this.export(params);\n    }\n\n    public getDataAsCsv(params?: CsvExportParams, skipDefaultParams = false): string {\n        const mergedParams = skipDefaultParams ? Object.assign({}, params) : this.getMergedParams(params);\n\n        return this.getData(mergedParams);\n    }\n\n    public getDefaultFileExtension(): string {\n        return 'csv';\n    }\n\n    public createSerializingSession(params?: CsvExportParams): CsvSerializingSession {\n        const { columnModel, columnNameService, funcColsService, valueService, gos } = this;\n        const {\n            processCellCallback,\n            processHeaderCallback,\n            processGroupHeaderCallback,\n            processRowGroupCallback,\n            suppressQuotes,\n            columnSeparator,\n        } = params!;\n\n        return new CsvSerializingSession({\n            columnModel,\n            columnNameService,\n            funcColsService,\n            valueService,\n            gos,\n            processCellCallback: processCellCallback || undefined,\n            processHeaderCallback: processHeaderCallback || undefined,\n            processGroupHeaderCallback: processGroupHeaderCallback || undefined,\n            processRowGroupCallback: processRowGroupCallback || undefined,\n            suppressQuotes: suppressQuotes || false,\n            columnSeparator: columnSeparator || ',',\n        });\n    }\n\n    public isExportSuppressed(): boolean {\n        return this.gos.get('suppressCsvExport');\n    }\n}\n", "import { _warnOnce } from '@ag-grid-community/core';\n\nexport class Downloader {\n    public static download(fileName: string, content: Blob) {\n        const win = document.defaultView || window;\n\n        if (!win) {\n            _warnOnce('There is no `window` associated with the current `document`');\n            return;\n        }\n\n        const element = document.createElement('a');\n        const url = win.URL.createObjectURL(content);\n        element.setAttribute('href', url);\n        element.setAttribute('download', fileName);\n        element.style.display = 'none';\n        document.body.appendChild(element);\n\n        element.dispatchEvent(\n            new MouseEvent('click', {\n                bubbles: false,\n                cancelable: true,\n                view: win,\n            })\n        );\n\n        document.body.removeChild(element);\n\n        win.setTimeout(() => {\n            win.URL.revokeObjectURL(url);\n        }, 0);\n    }\n}\n", "import { _warnOnce } from '@ag-grid-community/core';\nimport type { AgColumn, AgColumnGroup, CsvCustomContent, RowNode } from '@ag-grid-community/core';\n\nimport type { CsvSerializingParams, RowAccumulator, RowSpanningAccumulator } from '../interfaces';\nimport { BaseGridSerializingSession } from './baseGridSerializingSession';\n\nconst LINE_SEPARATOR = '\\r\\n';\n\nexport class CsvSerializingSession extends BaseGridSerializingSession<CsvCustomContent> {\n    private isFirstLine = true;\n    private result: string = '';\n    private suppressQuotes: boolean;\n    private columnSeparator: string;\n\n    constructor(config: CsvSerializingParams) {\n        super(config);\n\n        const { suppressQuotes, columnSeparator } = config;\n\n        this.suppressQuotes = suppressQuotes;\n        this.columnSeparator = columnSeparator;\n    }\n\n    public addCustomContent(content: CsvCustomContent) {\n        if (!content) {\n            return;\n        }\n        if (typeof content === 'string') {\n            if (!/^\\s*\\n/.test(content)) {\n                this.beginNewLine();\n            }\n            // replace whatever newlines are supplied with the style we're using\n            content = content.replace(/\\r?\\n/g, LINE_SEPARATOR);\n            this.result += content;\n        } else {\n            content.forEach((row) => {\n                this.beginNewLine();\n                row.forEach((cell, index) => {\n                    if (index !== 0) {\n                        this.result += this.columnSeparator;\n                    }\n                    this.result += this.putInQuotes(cell.data.value || '');\n                    if (cell.mergeAcross) {\n                        this.appendEmptyCells(cell.mergeAcross);\n                    }\n                });\n            });\n        }\n    }\n\n    public onNewHeaderGroupingRow(): RowSpanningAccumulator {\n        this.beginNewLine();\n\n        return {\n            onColumn: this.onNewHeaderGroupingRowColumn.bind(this),\n        };\n    }\n\n    private onNewHeaderGroupingRowColumn(columnGroup: AgColumnGroup, header: string, index: number, span: number) {\n        if (index != 0) {\n            this.result += this.columnSeparator;\n        }\n\n        this.result += this.putInQuotes(header);\n\n        this.appendEmptyCells(span);\n    }\n\n    private appendEmptyCells(count: number) {\n        for (let i = 1; i <= count; i++) {\n            this.result += this.columnSeparator + this.putInQuotes('');\n        }\n    }\n\n    public onNewHeaderRow(): RowAccumulator {\n        this.beginNewLine();\n\n        return {\n            onColumn: this.onNewHeaderRowColumn.bind(this),\n        };\n    }\n\n    private onNewHeaderRowColumn(column: AgColumn, index: number): void {\n        if (index != 0) {\n            this.result += this.columnSeparator;\n        }\n        this.result += this.putInQuotes(this.extractHeaderValue(column));\n    }\n\n    public onNewBodyRow(): RowAccumulator {\n        this.beginNewLine();\n\n        return {\n            onColumn: this.onNewBodyRowColumn.bind(this),\n        };\n    }\n\n    private onNewBodyRowColumn(column: AgColumn, index: number, node: RowNode): void {\n        if (index != 0) {\n            this.result += this.columnSeparator;\n        }\n        const rowCellValue = this.extractRowCellValue(column, index, index, 'csv', node);\n        this.result += this.putInQuotes(rowCellValue.valueFormatted ?? rowCellValue.value);\n    }\n\n    private putInQuotes(value: any): string {\n        if (this.suppressQuotes) {\n            return value;\n        }\n\n        if (value === null || value === undefined) {\n            return '\"\"';\n        }\n\n        let stringValue: string;\n        if (typeof value === 'string') {\n            stringValue = value;\n        } else if (typeof value.toString === 'function') {\n            stringValue = value.toString();\n        } else {\n            _warnOnce('unknown value type during csv conversion');\n            stringValue = '';\n        }\n\n        // replace each \" with \"\" (ie two sets of double quotes is how to do double quotes in csv)\n        const valueEscaped = stringValue.replace(/\"/g, '\"\"');\n\n        return '\"' + valueEscaped + '\"';\n    }\n\n    public parse(): string {\n        return this.result;\n    }\n\n    private beginNewLine() {\n        if (!this.isFirstLine) {\n            this.result += LINE_SEPARATOR;\n        }\n        this.isFirstLine = false;\n    }\n}\n", "import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames } from '@ag-grid-community/core';\n\nimport { CsvCreator } from './csvExport/csvCreator';\nimport { exportDataAsCsv, getDataAsCsv } from './csvExport/csvExportApi';\nimport { GridSerializer } from './csvExport/gridSerializer';\nimport { VERSION } from './version';\n\nexport const CsvExportCoreModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.CsvExportModule}-core`,\n    beans: [CsvCreator, GridSerializer],\n};\n\nexport const CsvExportApiModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.CsvExportModule}-api`,\n    apiFunctions: {\n        getDataAsCsv,\n        exportDataAsCsv,\n    },\n    dependantModules: [CsvExportCoreModule],\n};\n\nexport const CsvExportModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.CsvExportModule,\n    dependantModules: [CsvExportCoreModule, CsvExportApiModule],\n};\n", "import type { BeanCollection, CsvExportParams } from '@ag-grid-community/core';\n\nexport function getDataAsCsv(beans: BeanCollection, params?: CsvExportParams): string | undefined {\n    return beans.csvCreator?.getDataAsCsv(params);\n}\n\nexport function exportDataAsCsv(beans: BeanCollection, params?: CsvExportParams): void {\n    beans.csvCreator?.exportDataAsCsv(params);\n}\n", "import type {\n    AgColumn,\n    AgColumnGroup,\n    BeanCollection,\n    ColumnModel,\n    ColumnNameService,\n    ExportParams,\n    IClientSideRowModel,\n    IRowModel,\n    ISelectionService,\n    IServerSideRowModel,\n    NamedBean,\n    PinnedRowModel,\n    ProcessGroupHeaderForExportParams,\n    RowNode,\n    RowNodeSorter,\n    ShouldRowBeSkippedParams,\n    SortController,\n    VisibleColsService,\n} from '@ag-grid-community/core';\nimport {\n    BeanStub,\n    GROUP_AUTO_COLUMN_ID,\n    GroupInstanceIdCreator,\n    _compose,\n    _last,\n    isColumnGroup,\n} from '@ag-grid-community/core';\n\nimport type { GridSerializingSession, RowAccumulator, RowSpanningAccumulator } from './interfaces';\n\ntype ProcessGroupHeaderCallback = (params: ProcessGroupHeaderForExportParams) => string;\n\nexport enum RowType {\n    HEADER_GROUPING,\n    HEADER,\n    BODY,\n}\n\nexport class GridSerializer extends BeanStub implements NamedBean {\n    beanName = 'gridSerializer' as const;\n\n    private visibleColsService: VisibleColsService;\n    private columnModel: ColumnModel;\n    private columnNameService: ColumnNameService;\n    private rowModel: IRowModel;\n    private pinnedRowModel: PinnedRowModel;\n    private selectionService: ISelectionService;\n    private rowNodeSorter: RowNodeSorter;\n    private sortController: SortController;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.visibleColsService = beans.visibleColsService;\n        this.columnModel = beans.columnModel;\n        this.columnNameService = beans.columnNameService;\n        this.rowModel = beans.rowModel;\n        this.pinnedRowModel = beans.pinnedRowModel;\n        this.selectionService = beans.selectionService;\n        this.rowNodeSorter = beans.rowNodeSorter;\n        this.sortController = beans.sortController;\n    }\n\n    public serialize<T>(gridSerializingSession: GridSerializingSession<T>, params: ExportParams<T> = {}): string {\n        const { allColumns, columnKeys, skipRowGroups } = params;\n        const columnsToExport = this.getColumnsToExport(\n            allColumns,\n            skipRowGroups,\n            columnKeys as (string | AgColumn)[] | undefined\n        );\n\n        const serializeChain = _compose<GridSerializingSession<T>>(\n            // first pass, put in the header names of the cols\n            this.prepareSession(columnsToExport),\n            this.prependContent(params),\n            this.exportColumnGroups(params, columnsToExport),\n            this.exportHeaders(params, columnsToExport),\n            this.processPinnedTopRows(params, columnsToExport),\n            this.processRows(params, columnsToExport),\n            this.processPinnedBottomRows(params, columnsToExport),\n            this.appendContent(params)\n        );\n\n        return serializeChain(gridSerializingSession).parse();\n    }\n\n    private processRow<T>(\n        gridSerializingSession: GridSerializingSession<T>,\n        params: ExportParams<T>,\n        columnsToExport: AgColumn[],\n        node: RowNode\n    ): void {\n        const rowSkipper: (params: ShouldRowBeSkippedParams) => boolean = params.shouldRowBeSkipped || (() => false);\n        const skipSingleChildrenGroup = this.gos.get('groupRemoveSingleChildren');\n        const skipLowestSingleChildrenGroup = this.gos.get('groupRemoveLowestSingleChildren');\n        // if onlySelected, we ignore groupHideOpenParents as the user has explicitly selected the rows they wish to export.\n        // similarly, if specific rowNodes are provided we do the same. (the clipboard service uses rowNodes to define which rows to export)\n        const isClipboardExport = params.rowPositions != null;\n        const isExplicitExportSelection = isClipboardExport || !!params.onlySelected;\n        const hideOpenParents = this.gos.get('groupHideOpenParents') && !isExplicitExportSelection;\n        const isLeafNode = this.columnModel.isPivotMode() ? node.leafGroup : !node.group;\n        const isFooter = !!node.footer;\n        const shouldSkipLowestGroup = skipLowestSingleChildrenGroup && node.leafGroup;\n        const shouldSkipCurrentGroup =\n            node.allChildrenCount === 1 &&\n            node.childrenAfterGroup?.length === 1 &&\n            (skipSingleChildrenGroup || shouldSkipLowestGroup);\n\n        if (\n            (!isLeafNode && !isFooter && (params.skipRowGroups || shouldSkipCurrentGroup || hideOpenParents)) ||\n            (params.onlySelected && !node.isSelected()) ||\n            (params.skipPinnedTop && node.rowPinned === 'top') ||\n            (params.skipPinnedBottom && node.rowPinned === 'bottom')\n        ) {\n            return;\n        }\n\n        // if we are in pivotMode, then the grid will show the root node only\n        // if it's not a leaf group\n        const nodeIsRootNode = node.level === -1;\n\n        if (nodeIsRootNode && !isLeafNode && !isFooter) {\n            return;\n        }\n\n        const shouldRowBeSkipped: boolean = rowSkipper(this.gos.addGridCommonParams({ node }));\n\n        if (shouldRowBeSkipped) {\n            return;\n        }\n\n        const rowAccumulator: RowAccumulator = gridSerializingSession.onNewBodyRow(node);\n        columnsToExport.forEach((column: AgColumn, index: number) => {\n            rowAccumulator.onColumn(column, index, node);\n        });\n\n        if (params.getCustomContentBelowRow) {\n            const content = params.getCustomContentBelowRow(this.gos.addGridCommonParams({ node }));\n            if (content) {\n                gridSerializingSession.addCustomContent(content);\n            }\n        }\n    }\n\n    private appendContent<T>(\n        params: ExportParams<T>\n    ): (gridSerializingSession: GridSerializingSession<T>) => GridSerializingSession<T> {\n        return (gridSerializingSession: GridSerializingSession<T>) => {\n            const appendContent = params.appendContent;\n            if (appendContent) {\n                gridSerializingSession.addCustomContent(appendContent);\n            }\n            return gridSerializingSession;\n        };\n    }\n\n    private prependContent<T>(\n        params: ExportParams<T>\n    ): (gridSerializingSession: GridSerializingSession<T>) => GridSerializingSession<T> {\n        return (gridSerializingSession: GridSerializingSession<T>) => {\n            const prependContent = params.prependContent;\n            if (prependContent) {\n                gridSerializingSession.addCustomContent(prependContent);\n            }\n            return gridSerializingSession;\n        };\n    }\n\n    private prepareSession<T>(\n        columnsToExport: AgColumn[]\n    ): (gridSerializingSession: GridSerializingSession<T>) => GridSerializingSession<T> {\n        return (gridSerializingSession) => {\n            gridSerializingSession.prepare(columnsToExport);\n            return gridSerializingSession;\n        };\n    }\n\n    private exportColumnGroups<T>(\n        params: ExportParams<T>,\n        columnsToExport: AgColumn[]\n    ): (gridSerializingSession: GridSerializingSession<T>) => GridSerializingSession<T> {\n        return (gridSerializingSession) => {\n            if (!params.skipColumnGroupHeaders) {\n                const idCreator: GroupInstanceIdCreator = new GroupInstanceIdCreator();\n                const displayedGroups: (AgColumn | AgColumnGroup)[] = this.visibleColsService.createGroups({\n                    columns: columnsToExport,\n                    idCreator,\n                    pinned: null,\n                    isStandaloneStructure: true,\n                });\n\n                this.recursivelyAddHeaderGroups(\n                    displayedGroups,\n                    gridSerializingSession,\n                    params.processGroupHeaderCallback\n                );\n            }\n            return gridSerializingSession;\n        };\n    }\n\n    private exportHeaders<T>(\n        params: ExportParams<T>,\n        columnsToExport: AgColumn[]\n    ): (gridSerializingSession: GridSerializingSession<T>) => GridSerializingSession<T> {\n        return (gridSerializingSession) => {\n            if (!params.skipColumnHeaders) {\n                const gridRowIterator = gridSerializingSession.onNewHeaderRow();\n                columnsToExport.forEach((column, index) => {\n                    gridRowIterator.onColumn(column, index, undefined);\n                });\n            }\n            return gridSerializingSession;\n        };\n    }\n\n    private processPinnedTopRows<T>(\n        params: ExportParams<T>,\n        columnsToExport: AgColumn[]\n    ): (gridSerializingSession: GridSerializingSession<T>) => GridSerializingSession<T> {\n        return (gridSerializingSession) => {\n            const processRow = this.processRow.bind(this, gridSerializingSession, params, columnsToExport);\n\n            if (params.rowPositions) {\n                params.rowPositions\n                    // only pinnedTop rows, other models are processed by `processRows` and `processPinnedBottomsRows`\n                    .filter((position) => position.rowPinned === 'top')\n                    .sort((a, b) => a.rowIndex - b.rowIndex)\n                    .map((position) => this.pinnedRowModel.getPinnedTopRow(position.rowIndex))\n                    .forEach(processRow);\n            } else {\n                this.pinnedRowModel.forEachPinnedTopRow(processRow);\n            }\n            return gridSerializingSession;\n        };\n    }\n\n    private processRows<T>(\n        params: ExportParams<T>,\n        columnsToExport: AgColumn[]\n    ): (gridSerializingSession: GridSerializingSession<T>) => GridSerializingSession<T> {\n        return (gridSerializingSession) => {\n            // when in pivot mode, we always render cols on screen, never 'all columns'\n            const rowModel = this.rowModel;\n            const rowModelType = rowModel.getType();\n            const usingCsrm = rowModelType === 'clientSide';\n            const usingSsrm = rowModelType === 'serverSide';\n            const onlySelectedNonStandardModel = !usingCsrm && params.onlySelected;\n            const processRow = this.processRow.bind(this, gridSerializingSession, params, columnsToExport);\n            const { exportedRows = 'filteredAndSorted' } = params;\n\n            if (params.rowPositions) {\n                params.rowPositions\n                    // pinnedRows are processed by `processPinnedTopRows` and `processPinnedBottomsRows`\n                    .filter((position) => position.rowPinned == null)\n                    .sort((a, b) => a.rowIndex - b.rowIndex)\n                    .map((position) => rowModel.getRow(position.rowIndex))\n                    .forEach(processRow);\n            } else if (this.columnModel.isPivotMode()) {\n                if (usingCsrm) {\n                    (rowModel as IClientSideRowModel).forEachPivotNode(processRow, true);\n                } else if (usingSsrm) {\n                    (rowModel as IServerSideRowModel).forEachNodeAfterFilterAndSort(processRow, true);\n                } else {\n                    // must be enterprise, so we can just loop through all the nodes\n                    rowModel.forEachNode(processRow);\n                }\n            } else {\n                // onlySelectedAllPages: user doing pagination and wants selected items from\n                // other pages, so cannot use the standard row model as it won't have rows from\n                // other pages.\n                // onlySelectedNonStandardModel: if user wants selected in non standard row model\n                // (eg viewport) then again RowModel cannot be used, so need to use selected instead.\n                if (params.onlySelectedAllPages || onlySelectedNonStandardModel) {\n                    const selectedNodes = this.selectionService.getSelectedNodes();\n                    this.replicateSortedOrder(selectedNodes);\n                    // serialize each node\n                    selectedNodes.forEach(processRow);\n                } else {\n                    // here is everything else - including standard row model and selected. we don't use\n                    // the selection model even when just using selected, so that the result is the order\n                    // of the rows appearing on the screen.\n                    if (exportedRows === 'all') {\n                        rowModel.forEachNode(processRow);\n                    } else if (usingCsrm) {\n                        (rowModel as IClientSideRowModel).forEachNodeAfterFilterAndSort(processRow, true);\n                    } else if (usingSsrm) {\n                        (rowModel as IServerSideRowModel).forEachNodeAfterFilterAndSort(processRow, true);\n                    } else {\n                        rowModel.forEachNode(processRow);\n                    }\n                }\n            }\n            return gridSerializingSession;\n        };\n    }\n\n    private replicateSortedOrder(rows: RowNode[]) {\n        const sortOptions = this.sortController.getSortOptions();\n        const compareNodes = (rowA: RowNode, rowB: RowNode): number => {\n            if (rowA.rowIndex != null && rowB.rowIndex != null) {\n                // if the rows have rowIndexes, this is the easiest way to compare,\n                // as they're already ordered\n                return rowA.rowIndex - rowB.rowIndex;\n            }\n\n            // if the level is the same, compare these nodes, or their parents\n            if (rowA.level === rowB.level) {\n                if (rowA.parent?.id === rowB.parent?.id) {\n                    return this.rowNodeSorter.compareRowNodes(\n                        sortOptions,\n                        {\n                            rowNode: rowA,\n                            currentPos: rowA.rowIndex ?? -1,\n                        },\n                        {\n                            rowNode: rowB,\n                            currentPos: rowB.rowIndex ?? -1,\n                        }\n                    );\n                }\n\n                // level is same, but parent isn't, compare parents\n                return compareNodes(rowA.parent!, rowB.parent!);\n            }\n\n            // if level is different, match levels\n            if (rowA.level > rowB.level) {\n                return compareNodes(rowA.parent!, rowB);\n            }\n            return compareNodes(rowA, rowB.parent!);\n        };\n\n        // sort the nodes either by existing row index or compare them\n        rows.sort(compareNodes);\n    }\n\n    private processPinnedBottomRows<T>(\n        params: ExportParams<T>,\n        columnsToExport: AgColumn[]\n    ): (gridSerializingSession: GridSerializingSession<T>) => GridSerializingSession<T> {\n        return (gridSerializingSession) => {\n            const processRow = this.processRow.bind(this, gridSerializingSession, params, columnsToExport);\n            if (params.rowPositions) {\n                params.rowPositions\n                    // only pinnedBottom rows, other models are processed by `processRows` and `processPinnedTopRows`\n                    .filter((position) => position.rowPinned === 'bottom')\n                    .sort((a, b) => a.rowIndex - b.rowIndex)\n                    .map((position) => this.pinnedRowModel.getPinnedBottomRow(position.rowIndex))\n                    .forEach(processRow);\n            } else {\n                this.pinnedRowModel.forEachPinnedBottomRow(processRow);\n            }\n            return gridSerializingSession;\n        };\n    }\n\n    private getColumnsToExport(\n        allColumns: boolean = false,\n        skipRowGroups: boolean = false,\n        columnKeys?: (string | AgColumn)[]\n    ): AgColumn[] {\n        const isPivotMode = this.columnModel.isPivotMode();\n\n        if (columnKeys && columnKeys.length) {\n            return this.columnModel.getColsForKeys(columnKeys);\n        }\n\n        const isTreeData = this.gos.get('treeData');\n\n        let columnsToExport: AgColumn[] = [];\n\n        if (allColumns && !isPivotMode) {\n            columnsToExport = this.columnModel.getCols();\n        } else {\n            columnsToExport = this.visibleColsService.getAllCols();\n        }\n\n        if (skipRowGroups && !isTreeData) {\n            columnsToExport = columnsToExport.filter((column) => column.getColId() !== GROUP_AUTO_COLUMN_ID);\n        }\n\n        return columnsToExport;\n    }\n\n    private recursivelyAddHeaderGroups<T>(\n        displayedGroups: (AgColumn | AgColumnGroup)[],\n        gridSerializingSession: GridSerializingSession<T>,\n        processGroupHeaderCallback: ProcessGroupHeaderCallback | undefined\n    ): void {\n        const directChildrenHeaderGroups: (AgColumn | AgColumnGroup)[] = [];\n        displayedGroups.forEach((columnGroupChild) => {\n            const columnGroup = columnGroupChild as AgColumnGroup;\n            if (!columnGroup.getChildren) {\n                return;\n            }\n            columnGroup.getChildren()!.forEach((it) => directChildrenHeaderGroups.push(it));\n        });\n\n        if (displayedGroups.length > 0 && isColumnGroup(displayedGroups[0])) {\n            this.doAddHeaderHeader(gridSerializingSession, displayedGroups, processGroupHeaderCallback);\n        }\n\n        if (directChildrenHeaderGroups && directChildrenHeaderGroups.length > 0) {\n            this.recursivelyAddHeaderGroups(\n                directChildrenHeaderGroups,\n                gridSerializingSession,\n                processGroupHeaderCallback\n            );\n        }\n    }\n\n    private doAddHeaderHeader<T>(\n        gridSerializingSession: GridSerializingSession<T>,\n        displayedGroups: (AgColumn | AgColumnGroup)[],\n        processGroupHeaderCallback: ProcessGroupHeaderCallback | undefined\n    ) {\n        const gridRowIterator: RowSpanningAccumulator = gridSerializingSession.onNewHeaderGroupingRow();\n        let columnIndex: number = 0;\n        displayedGroups.forEach((columnGroupChild) => {\n            const columnGroup: AgColumnGroup = columnGroupChild as AgColumnGroup;\n\n            let name: string;\n            if (processGroupHeaderCallback) {\n                name = processGroupHeaderCallback(\n                    this.gos.addGridCommonParams({\n                        columnGroup: columnGroup,\n                    })\n                );\n            } else {\n                name = this.columnNameService.getDisplayNameForColumnGroup(columnGroup, 'header')!;\n            }\n\n            const collapsibleGroupRanges = columnGroup\n                .getLeafColumns()\n                .reduce((collapsibleGroups: number[][], currentColumn, currentIdx, arr) => {\n                    let lastGroup = _last(collapsibleGroups);\n                    const groupShow = currentColumn.getColumnGroupShow() === 'open';\n\n                    if (!groupShow) {\n                        if (lastGroup && lastGroup[1] == null) {\n                            lastGroup[1] = currentIdx - 1;\n                        }\n                    } else if (!lastGroup || lastGroup[1] != null) {\n                        lastGroup = [currentIdx];\n                        collapsibleGroups.push(lastGroup);\n                    }\n\n                    if (currentIdx === arr.length - 1 && lastGroup && lastGroup[1] == null) {\n                        lastGroup[1] = currentIdx;\n                    }\n\n                    return collapsibleGroups;\n                }, []);\n\n            gridRowIterator.onColumn(\n                columnGroup,\n                name || '',\n                columnIndex++,\n                columnGroup.getLeafColumns().length - 1,\n                collapsibleGroupRanges\n            );\n        });\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.3.1';\n", "import type { HeaderElement, PrefixedXmlAttributes, XmlElement } from '@ag-grid-community/core';\n\nconst LINE_SEPARATOR = '\\r\\n';\n\nfunction returnAttributeIfPopulated(key: string, value: any, booleanTransformer?: (currentValue: boolean) => string) {\n    if (!value && value !== '' && value !== 0) {\n        return '';\n    }\n\n    let xmlValue: string = value;\n    if (typeof value === 'boolean') {\n        if (booleanTransformer) {\n            xmlValue = booleanTransformer(value);\n        }\n    }\n\n    return ` ${key}=\"${xmlValue}\"`;\n}\n\nexport class XmlFactory {\n    public static createHeader(headerElement: HeaderElement = {}): string {\n        const headerStart = '<?';\n        const headerEnd = '?>';\n        const keys = ['version'];\n\n        if (!headerElement.version) {\n            headerElement.version = '1.0';\n        }\n        if (headerElement.encoding) {\n            keys.push('encoding');\n        }\n        if (headerElement.standalone) {\n            keys.push('standalone');\n        }\n\n        const att = keys.map((key: string): string => `${key}=\"${headerElement[key]}\"`).join(' ');\n        return `${headerStart}xml ${att} ${headerEnd}`;\n    }\n\n    public static createXml(xmlElement: XmlElement, booleanTransformer?: (currentValue: boolean) => string): string {\n        let props: string = '';\n        if (xmlElement.properties) {\n            if (xmlElement.properties.prefixedAttributes) {\n                xmlElement.properties.prefixedAttributes.forEach((prefixedSet: PrefixedXmlAttributes) => {\n                    Object.keys(prefixedSet.map).forEach((key) => {\n                        props += returnAttributeIfPopulated(\n                            prefixedSet.prefix + key,\n                            prefixedSet.map[key],\n                            booleanTransformer\n                        );\n                    });\n                });\n            }\n\n            if (xmlElement.properties.rawMap) {\n                Object.keys(xmlElement.properties.rawMap).forEach((key) => {\n                    props += returnAttributeIfPopulated(key, xmlElement.properties!.rawMap[key], booleanTransformer);\n                });\n            }\n        }\n        let result: string = '<' + xmlElement.name + props;\n\n        if (!xmlElement.children && xmlElement.textNode == null) {\n            return result + '/>' + LINE_SEPARATOR;\n        }\n\n        if (xmlElement.textNode != null) {\n            return result + '>' + xmlElement.textNode + '</' + xmlElement.name + '>' + LINE_SEPARATOR;\n        }\n\n        result += '>' + LINE_SEPARATOR;\n        if (xmlElement.children) {\n            xmlElement.children.forEach((it) => {\n                result += this.createXml(it, booleanTransformer);\n            });\n        }\n\n        return result + '</' + xmlElement.name + '>' + LINE_SEPARATOR;\n    }\n}\n", "import { _utf8_encode } from '@ag-grid-community/core';\n\nimport { deflateLocalFile } from './compress';\nimport { convertDate, convertDecToHex, convertTime } from './convert';\nimport { getCrcFromCrc32Table } from './crcTable';\nimport type { ZipFile } from './zipContainer';\n\ninterface ZipFileHeader {\n    localFileHeader: Uint8Array;\n    centralDirectoryHeader: Uint8Array;\n}\n\nexport interface ProcessedZipFile extends ZipFileHeader {\n    content: Uint8Array;\n    isCompressed: boolean;\n}\n\nconst getHeaders = (\n    currentFile: ZipFile,\n    isCompressed: boolean,\n    offset: number,\n    rawSize: number,\n    rawContent: string | Uint8Array,\n    deflatedSize: number | undefined\n): ZipFileHeader => {\n    const { content, path, created: creationDate } = currentFile;\n\n    const time = convertTime(creationDate);\n    const dt = convertDate(creationDate);\n\n    const crcFlag = getCrcFromCrc32Table(rawContent);\n    const zipSize = deflatedSize !== undefined ? deflatedSize : rawSize;\n\n    const utfPath = _utf8_encode(path);\n    const isUTF8 = utfPath !== path;\n\n    let extraFields = '';\n    if (isUTF8) {\n        const uExtraFieldPath = convertDecToHex(1, 1) + convertDecToHex(getCrcFromCrc32Table(utfPath), 4) + utfPath;\n        extraFields = '\\x75\\x70' + convertDecToHex(uExtraFieldPath.length, 2) + uExtraFieldPath;\n    }\n\n    const commonHeader =\n        '\\x14\\x00' + // version needed to extract\n        (isUTF8 ? '\\x00\\x08' : '\\x00\\x00') + // Language encoding flag (EFS) (12th bit turned on)\n        convertDecToHex(isCompressed ? 8 : 0, 2) + // As per ECMA-376 Part 2 specs\n        convertDecToHex(time, 2) + // last modified time\n        convertDecToHex(dt, 2) + // last modified date\n        convertDecToHex(zipSize ? crcFlag : 0, 4) +\n        convertDecToHex(deflatedSize ?? rawSize, 4) + // compressed size\n        convertDecToHex(rawSize, 4) + // uncompressed size\n        convertDecToHex(utfPath.length, 2) + // file name length\n        convertDecToHex(extraFields.length, 2); // extra field length\n\n    const localFileHeader = 'PK\\x03\\x04' + commonHeader + utfPath + extraFields;\n    const centralDirectoryHeader =\n        'PK\\x01\\x02' + // central header\n        '\\x14\\x00' +\n        commonHeader + // file header\n        '\\x00\\x00' +\n        '\\x00\\x00' +\n        '\\x00\\x00' +\n        (content ? '\\x00\\x00\\x00\\x00' : '\\x10\\x00\\x00\\x00') + // external file attributes\n        convertDecToHex(offset, 4) + // relative offset of local header\n        utfPath + // file name\n        extraFields; // extra field\n\n    return {\n        localFileHeader: Uint8Array.from(localFileHeader, (c) => c.charCodeAt(0)),\n        centralDirectoryHeader: Uint8Array.from(centralDirectoryHeader, (c) => c.charCodeAt(0)),\n    };\n};\n\nconst getDecodedContent = (\n    content: string | Uint8Array\n): {\n    size: number;\n    content: Uint8Array;\n} => {\n    let contentToUse: Uint8Array;\n    // base64 content is passed as string\n    if (typeof content === 'string') {\n        const base64String = atob(content.split(';base64,')[1]);\n        contentToUse = Uint8Array.from(base64String, (c) => c.charCodeAt(0));\n    } else {\n        contentToUse = content;\n    }\n\n    return {\n        size: contentToUse.length,\n        content: contentToUse,\n    };\n};\n\nexport const getDeflatedHeaderAndContent = async (currentFile: ZipFile, offset: number): Promise<ProcessedZipFile> => {\n    const { content } = currentFile;\n\n    const { size, content: rawContent } = !content\n        ? { size: 0, content: Uint8Array.from([]) }\n        : getDecodedContent(content);\n\n    let deflatedContent: Uint8Array | undefined = undefined;\n    let deflatedSize: number | undefined = undefined;\n    let deflationPerformed = false;\n\n    const shouldDeflate = currentFile.type === 'file' && rawContent && size > 0;\n    if (shouldDeflate) {\n        const result = await deflateLocalFile(rawContent);\n        deflatedContent = result.content;\n        deflatedSize = result.size;\n        deflationPerformed = true;\n    }\n\n    const headers = getHeaders(currentFile, deflationPerformed, offset, size, rawContent, deflatedSize);\n\n    return {\n        ...headers,\n        content: deflatedContent || rawContent,\n        isCompressed: deflationPerformed,\n    };\n};\n\nexport const getHeaderAndContent = (currentFile: ZipFile, offset: number): ProcessedZipFile => {\n    const { content } = currentFile;\n\n    const { content: rawContent } = !content ? { content: Uint8Array.from([]) } : getDecodedContent(content);\n\n    const headers = getHeaders(currentFile, false, offset, rawContent.length, rawContent, undefined);\n\n    return {\n        ...headers,\n        content: rawContent,\n        isCompressed: false,\n    };\n};\n\nexport const buildCentralDirectoryEnd = (tLen: number, cLen: number, lLen: number): Uint8Array => {\n    const str =\n        'PK\\x05\\x06' + // central folder end\n        '\\x00\\x00' +\n        '\\x00\\x00' +\n        convertDecToHex(tLen, 2) + // total number of entries in the central folder\n        convertDecToHex(tLen, 2) + // total number of entries in the central folder\n        convertDecToHex(cLen, 4) + // size of the central folder\n        convertDecToHex(lLen, 4) + // central folder start offset\n        '\\x00\\x00';\n\n    return Uint8Array.from(str, (c) => c.charCodeAt(0));\n};\n", "const compressBlob = async (\n    data: Blob\n): Promise<{\n    size: number;\n    content: Blob;\n}> => {\n    // Callback to extract the compressed data\n    let chunksSize = 0;\n    const chunks: Uint8Array[] = [];\n    const writeCompressedData: WritableStream<Uint8Array> = new WritableStream({\n        write: (chunk: Uint8Array) => {\n            chunks.push(chunk);\n            chunksSize += chunk.length;\n        },\n    });\n\n    // Create readable stream from blob\n    const readable = new ReadableStream({\n        start: (controller) => {\n            const reader = new FileReader();\n            reader.onload = (e) => {\n                if (e.target?.result) {\n                    controller.enqueue(e.target.result);\n                }\n\n                controller.close();\n            };\n\n            reader.readAsArrayBuffer(data);\n        },\n    });\n\n    // Perform the compression using the browser's native CompressionStream API\n    // Ref https://developer.mozilla.org/en-US/docs/Web/API/CompressionStream for details\n    const compressStream = new (window as any).CompressionStream('deflate-raw');\n    await readable.pipeThrough(compressStream).pipeTo(writeCompressedData);\n\n    // Return the compressed data\n    return {\n        size: chunksSize,\n        content: new Blob(chunks),\n    };\n};\n\nexport const deflateLocalFile = async (\n    rawContent: string | Uint8Array\n): Promise<{\n    size: number;\n    content: Uint8Array;\n}> => {\n    const contentAsBlob = new Blob([rawContent]);\n    const { size: compressedSize, content: compressedContent } = await compressBlob(contentAsBlob);\n\n    const compressedContentAsUint8Array = new Uint8Array(await compressedContent.arrayBuffer());\n\n    return {\n        size: compressedSize,\n        content: compressedContentAsUint8Array,\n    };\n};\n", "export const convertTime = (date: Date): number => {\n    let time = date.getHours();\n    time <<= 6;\n    time = time | date.getMinutes();\n    time <<= 5;\n    time = time | (date.getSeconds() / 2);\n\n    return time;\n};\n\nexport const convertDate = (date: Date): number => {\n    let dt = date.getFullYear() - 1980;\n    dt <<= 4;\n    dt = dt | (date.getMonth() + 1);\n    dt <<= 5;\n    dt = dt | date.getDate();\n\n    return dt;\n};\n\nexport function convertDecToHex(number: number, bytes: number): string {\n    let hex = '';\n\n    for (let i = 0; i < bytes; i++) {\n        hex += String.fromCharCode(number & 0xff);\n        number >>>= 8;\n    }\n\n    return hex;\n}\n", "const getCrcFromCrc32TableAndByteArray = (content: Uint8Array): number => {\n    if (!content.length) {\n        return 0;\n    }\n\n    let crc = 0 ^ -1;\n\n    let j = 0;\n    let k = 0;\n    let l = 0;\n\n    for (let i = 0; i < content.length; i++) {\n        j = content[i];\n        k = (crc ^ j) & 0xff;\n        l = crcTable[k];\n        crc = (crc >>> 8) ^ l;\n    }\n\n    return crc ^ -1;\n};\n\nexport const getCrcFromCrc32Table = (content: string | Uint8Array): number => {\n    if (!content.length) {\n        return 0;\n    }\n\n    if (typeof content === 'string') {\n        return getCrcFromCrc32TableAndByteArray(new TextEncoder().encode(content));\n    }\n\n    return getCrcFromCrc32TableAndByteArray(content);\n};\n\n// Table for crc calculation from:\n// https://referencesource.microsoft.com/#System/sys/System/IO/compression/Crc32Helper.cs,3b31978c7d7f7246,references\nconst crcTable = new Uint32Array([\n    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832,\n    0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2,\n    0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856, 0x646ba8c0, 0xfd62f97a,\n    0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,\n    0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3,\n    0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423,\n    0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab,\n    0xb6662d3d, 0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,\n    0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01, 0x6b6b51f4,\n    0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,\n    0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074,\n    0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,\n    0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525,\n    0x206f85b3, 0xb966d409, 0xce61e49f, 0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81,\n    0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615,\n    0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,\n    0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7, 0xfed41b76,\n    0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e,\n    0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c, 0x36034af6,\n    0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,\n    0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7,\n    0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f,\n    0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7,\n    0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,\n    0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278,\n    0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc,\n    0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9, 0xbdbdf21c, 0xcabac28a, 0x53b39330,\n    0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,\n    0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d,\n]);\n", "import type { ProcessedZipFile } from './zipContainerHelper';\nimport { buildCentralDirectoryEnd, getDeflatedHeaderAndContent, getHeaderAndContent } from './zipContainerHelper';\n\nexport interface ZipFile {\n    path: string;\n    created: Date;\n    isBase64: boolean;\n    type: 'file' | 'folder';\n    content?: string | Uint8Array;\n}\n\nexport class ZipContainer {\n    private static folders: ZipFile[] = [];\n    private static files: ZipFile[] = [];\n\n    public static addFolders(paths: string[]): void {\n        paths.forEach(this.addFolder.bind(this));\n    }\n\n    private static addFolder(path: string): void {\n        this.folders.push({\n            path,\n            created: new Date(),\n            isBase64: false,\n            type: 'folder',\n        });\n    }\n\n    public static addFile(path: string, content: string, isBase64 = false): void {\n        this.files.push({\n            path,\n            created: new Date(),\n            content: isBase64 ? content : new TextEncoder().encode(content),\n            isBase64,\n            type: 'file',\n        });\n    }\n\n    public static async getZipFile(mimeType: string = 'application/zip'): Promise<Blob> {\n        const textOutput = await this.buildCompressedFileStream();\n        this.clearStream();\n        return new Blob([textOutput], { type: mimeType });\n    }\n\n    public static getUncompressedZipFile(mimeType: string = 'application/zip'): Blob {\n        const textOutput = this.buildFileStream();\n        this.clearStream();\n        return new Blob([textOutput], { type: mimeType });\n    }\n\n    private static clearStream(): void {\n        this.folders = [];\n        this.files = [];\n    }\n\n    private static packageFiles(files: ProcessedZipFile[]) {\n        let fileLen: number = 0;\n        let folderLen: number = 0;\n\n        for (const currentFile of files) {\n            const { localFileHeader, centralDirectoryHeader, content } = currentFile;\n            fileLen += localFileHeader.length + content.length;\n            folderLen += centralDirectoryHeader.length;\n        }\n\n        const fileData: Uint8Array = new Uint8Array(fileLen);\n        const folderData: Uint8Array = new Uint8Array(folderLen);\n\n        let fileOffset = 0;\n        let folderOffset = 0;\n        for (const currentFile of files) {\n            const { localFileHeader, centralDirectoryHeader, content } = currentFile;\n\n            // Append fileHeader to fData\n            fileData.set(localFileHeader, fileOffset);\n            fileOffset += localFileHeader.length;\n\n            // Append content to fData\n            fileData.set(content, fileOffset);\n            fileOffset += content.length;\n\n            // Append folder header to foData\n            folderData.set(centralDirectoryHeader, folderOffset);\n            folderOffset += centralDirectoryHeader.length;\n        }\n\n        const folderEnd = buildCentralDirectoryEnd(files.length, folderLen, fileLen);\n\n        // Append folder data and file data\n        const result = new Uint8Array(fileData.length + folderData.length + folderEnd.length);\n\n        result.set(fileData);\n        result.set(folderData, fileData.length);\n        result.set(folderEnd, fileData.length + folderData.length);\n\n        return result;\n    }\n\n    private static async buildCompressedFileStream(): Promise<Uint8Array> {\n        const totalFiles: ZipFile[] = [...this.folders, ...this.files];\n        const readyFiles: ProcessedZipFile[] = [];\n        let lL = 0;\n\n        for (const currentFile of totalFiles) {\n            const output = await getDeflatedHeaderAndContent(currentFile, lL);\n            const { localFileHeader, content } = output;\n            readyFiles.push(output);\n            lL += localFileHeader.length + content.length;\n        }\n\n        return this.packageFiles(readyFiles);\n    }\n\n    private static buildFileStream(): Uint8Array {\n        const totalFiles: ZipFile[] = [...this.folders, ...this.files];\n        const readyFiles: ProcessedZipFile[] = [];\n        let lL = 0;\n\n        for (const currentFile of totalFiles) {\n            const readyFile = getHeaderAndContent(currentFile, lL);\n            const { localFileHeader, content } = readyFile;\n            readyFiles.push(readyFile);\n            lL += localFileHeader.length + content.length;\n        }\n\n        return this.packageFiles(readyFiles);\n    }\n}\n", "import type { Module } from '@ag-grid-community/core';\nimport {\n    ModuleNames,\n    RowModelHelperService,\n    _RowNodeBlockModule,\n    _SsrmInfiniteSharedApiModule,\n} from '@ag-grid-community/core';\n\nimport { InfiniteRowModel } from './infiniteRowModel/infiniteRowModel';\nimport {\n    getInfiniteRowCount,\n    isLastRowIndexKnown,\n    purgeInfiniteCache,\n    refreshInfiniteCache,\n} from './infiniteRowModel/infiniteRowModelApi';\nimport { VERSION } from './version';\n\nexport const InfiniteRowModelCoreModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.InfiniteRowModelModule}-core`,\n    rowModel: 'infinite',\n    beans: [InfiniteRowModel],\n    dependantModules: [_RowNodeBlockModule],\n};\n\nexport const InfiniteRowModelApiModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.InfiniteRowModelModule}-api`,\n    beans: [RowModelHelperService],\n    apiFunctions: {\n        refreshInfiniteCache,\n        purgeInfiniteCache,\n        getInfiniteRowCount,\n        isLastRowIndexKnown,\n    },\n    dependantModules: [InfiniteRowModelCoreModule, _SsrmInfiniteSharedApiModule],\n};\n\nexport const InfiniteRowModelModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.InfiniteRowModelModule,\n    dependantModules: [InfiniteRowModelCoreModule, InfiniteRowModelApiModule],\n};\n", "import type {\n    BeanCollection,\n    FilterManager,\n    IDatasource,\n    IInfiniteRowModel,\n    ISelectionService,\n    ModelUpdatedEvent,\n    NamedBean,\n    RowBounds,\n    RowModelType,\n    RowNode,\n    RowNodeBlockLoader,\n    RowRenderer,\n    SortController,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { BeanStub, NumberSequence, _jsonEquals, _warnOnce } from '@ag-grid-community/core';\n\nimport type { InfiniteCacheParams } from './infiniteCache';\nimport { InfiniteCache } from './infiniteCache';\n\nexport class InfiniteRowModel extends BeanStub implements NamedBean, IInfiniteRowModel {\n    beanName = 'rowModel' as const;\n\n    private filterManager?: FilterManager;\n    private sortController: SortController;\n    private selectionService: ISelectionService;\n    private rowRenderer: RowRenderer;\n    private rowNodeBlockLoader: RowNodeBlockLoader;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.filterManager = beans.filterManager;\n        this.sortController = beans.sortController;\n        this.selectionService = beans.selectionService;\n        this.rowRenderer = beans.rowRenderer;\n        this.rowNodeBlockLoader = beans.rowNodeBlockLoader!;\n    }\n\n    private infiniteCache: InfiniteCache | null | undefined;\n    private datasource: IDatasource | null | undefined;\n    private rowHeight: number;\n    private cacheParams: InfiniteCacheParams;\n\n    public getRowBounds(index: number): RowBounds {\n        return {\n            rowHeight: this.rowHeight,\n            rowTop: this.rowHeight * index,\n        };\n    }\n\n    // we don't implement as lazy row heights is not supported in this row model\n    public ensureRowHeightsValid(): boolean {\n        return false;\n    }\n\n    public postConstruct(): void {\n        if (!this.gos.isRowModelType('infinite')) {\n            return;\n        }\n\n        this.rowHeight = this.gos.getRowHeightAsNumber();\n\n        this.addEventListeners();\n\n        this.addDestroyFunc(() => this.destroyCache());\n\n        this.verifyProps();\n    }\n\n    private verifyProps(): void {\n        if (this.gos.exists('initialGroupOrderComparator')) {\n            _warnOnce(\n                'initialGroupOrderComparator cannot be used with Infinite Row Model as sorting is done on the server side'\n            );\n        }\n    }\n\n    public start(): void {\n        this.setDatasource(this.gos.get('datasource'));\n    }\n\n    public override destroy(): void {\n        this.destroyDatasource();\n        super.destroy();\n    }\n\n    private destroyDatasource(): void {\n        if (this.datasource) {\n            this.destroyBean(this.datasource);\n            this.rowRenderer.datasourceChanged();\n            this.datasource = null;\n        }\n    }\n\n    private addEventListeners(): void {\n        this.addManagedEventListeners({\n            filterChanged: this.onFilterChanged.bind(this),\n            sortChanged: this.onSortChanged.bind(this),\n            newColumnsLoaded: this.onColumnEverything.bind(this),\n            storeUpdated: this.onCacheUpdated.bind(this),\n        });\n\n        this.addManagedPropertyListener('datasource', () => this.setDatasource(this.gos.get('datasource')));\n        this.addManagedPropertyListener('cacheBlockSize', () => this.resetCache());\n        this.addManagedPropertyListener('rowHeight', () => {\n            this.rowHeight = this.gos.getRowHeightAsNumber();\n            this.cacheParams.rowHeight = this.rowHeight;\n            this.updateRowHeights();\n        });\n    }\n\n    private onFilterChanged(): void {\n        this.reset();\n    }\n\n    private onSortChanged(): void {\n        this.reset();\n    }\n\n    private onColumnEverything(): void {\n        let resetRequired;\n        // if cache params, we require reset only if sort model has changed. we don't need to check\n        // for filter model, as the filter manager will fire an event when columns change that result\n        // in the filter changing.\n        if (this.cacheParams) {\n            resetRequired = this.isSortModelDifferent();\n        } else {\n            // if no cacheParams, means first time creating the cache, so always create one\n            resetRequired = true;\n        }\n        if (resetRequired) {\n            this.reset();\n        }\n    }\n\n    private isSortModelDifferent(): boolean {\n        return !_jsonEquals(this.cacheParams.sortModel, this.sortController.getSortModel());\n    }\n\n    public getType(): RowModelType {\n        return 'infinite';\n    }\n\n    public setDatasource(datasource: IDatasource | undefined): void {\n        this.destroyDatasource();\n        this.datasource = datasource;\n\n        // only reset if we have a valid datasource to working with\n        if (datasource) {\n            this.reset();\n        }\n    }\n\n    public isEmpty(): boolean {\n        return !this.infiniteCache;\n    }\n\n    public isRowsToRender(): boolean {\n        return !!this.infiniteCache;\n    }\n\n    public getNodesInRangeForSelection(firstInRange: RowNode, lastInRange: RowNode): RowNode[] {\n        return this.infiniteCache ? this.infiniteCache.getRowNodesInRange(firstInRange, lastInRange) : [];\n    }\n\n    private reset() {\n        // important to return here, as the user could be setting filter or sort before\n        // data-source is set\n        if (!this.datasource) {\n            return;\n        }\n\n        // if user is providing id's, then this means we can keep the selection between datasource hits,\n        // as the rows will keep their unique id's even if, for example, server side sorting or filtering\n        // is done.\n        const getRowIdFunc = this.gos.getRowIdCallback();\n        const userGeneratingIds = getRowIdFunc != null;\n\n        if (!userGeneratingIds) {\n            this.selectionService.reset('rowDataChanged');\n        }\n\n        this.resetCache();\n    }\n\n    private createModelUpdatedEvent(): WithoutGridCommon<ModelUpdatedEvent> {\n        return {\n            type: 'modelUpdated',\n            // not sure if these should all be false - noticed if after implementing,\n            // maybe they should be true?\n            newPage: false,\n            newPageSize: false,\n            newData: false,\n            keepRenderedRows: true,\n            animate: false,\n        };\n    }\n\n    private resetCache(): void {\n        // if not first time creating a cache, need to destroy the old one\n        this.destroyCache();\n\n        this.cacheParams = {\n            // the user provided datasource\n            datasource: this.datasource,\n\n            // sort and filter model\n            filterModel: this.filterManager?.getFilterModel() ?? {},\n            sortModel: this.sortController.getSortModel(),\n\n            rowNodeBlockLoader: this.rowNodeBlockLoader,\n\n            // properties - this way we take a snapshot of them, so if user changes any, they will be\n            // used next time we create a new cache, which is generally after a filter or sort change,\n            // or a new datasource is set\n            initialRowCount: this.gos.get('infiniteInitialRowCount'),\n            maxBlocksInCache: this.gos.get('maxBlocksInCache'),\n            rowHeight: this.gos.getRowHeightAsNumber(),\n\n            // if user doesn't provide overflow, we use default overflow of 1, so user can scroll past\n            // the current page and request first row of next page\n            overflowSize: this.gos.get('cacheOverflowSize'),\n\n            // page size needs to be 1 or greater. having it at 1 would be silly, as you would be hitting the\n            // server for one page at a time. so the default if not specified is 100.\n            blockSize: this.gos.get('cacheBlockSize'),\n\n            // the cache could create this, however it is also used by the pages, so handy to create it\n            // here as the settings are also passed to the pages\n            lastAccessedSequence: new NumberSequence(),\n        } as InfiniteCacheParams;\n\n        this.infiniteCache = this.createBean(new InfiniteCache(this.cacheParams));\n\n        this.eventService.dispatchEventOnce({\n            type: 'rowCountReady',\n        });\n\n        const event = this.createModelUpdatedEvent();\n        this.eventService.dispatchEvent(event);\n    }\n\n    private updateRowHeights() {\n        this.forEachNode((node) => {\n            node.setRowHeight(this.rowHeight);\n            node.setRowTop(this.rowHeight * node.rowIndex!);\n        });\n\n        const event = this.createModelUpdatedEvent();\n        this.eventService.dispatchEvent(event);\n    }\n\n    private destroyCache(): void {\n        if (this.infiniteCache) {\n            this.infiniteCache = this.destroyBean(this.infiniteCache);\n        }\n    }\n\n    private onCacheUpdated(): void {\n        const event = this.createModelUpdatedEvent();\n        this.eventService.dispatchEvent(event);\n    }\n\n    public getRow(rowIndex: number): RowNode | undefined {\n        if (!this.infiniteCache) {\n            return undefined;\n        }\n        if (rowIndex >= this.infiniteCache.getRowCount()) {\n            return undefined;\n        }\n        return this.infiniteCache.getRow(rowIndex);\n    }\n\n    public getRowNode(id: string): RowNode | undefined {\n        let result: RowNode | undefined;\n        this.forEachNode((rowNode) => {\n            if (rowNode.id === id) {\n                result = rowNode;\n            }\n        });\n        return result;\n    }\n\n    public forEachNode(callback: (rowNode: RowNode, index: number) => void): void {\n        if (this.infiniteCache) {\n            this.infiniteCache.forEachNodeDeep(callback);\n        }\n    }\n\n    public getTopLevelRowCount(): number {\n        return this.getRowCount();\n    }\n\n    public getTopLevelRowDisplayedIndex(topLevelIndex: number): number {\n        return topLevelIndex;\n    }\n\n    public getRowIndexAtPixel(pixel: number): number {\n        if (this.rowHeight !== 0) {\n            // avoid divide by zero error\n            const rowIndexForPixel = Math.floor(pixel / this.rowHeight);\n            const lastRowIndex = this.getRowCount() - 1;\n            if (rowIndexForPixel > lastRowIndex) {\n                return lastRowIndex;\n            }\n            return rowIndexForPixel;\n        }\n        return 0;\n    }\n\n    public getRowCount(): number {\n        return this.infiniteCache ? this.infiniteCache.getRowCount() : 0;\n    }\n\n    public isRowPresent(rowNode: RowNode): boolean {\n        const foundRowNode = this.getRowNode(rowNode.id!);\n        return !!foundRowNode;\n    }\n\n    public refreshCache(): void {\n        if (this.infiniteCache) {\n            this.infiniteCache.refreshCache();\n        }\n    }\n\n    public purgeCache(): void {\n        if (this.infiniteCache) {\n            this.infiniteCache.purgeCache();\n        }\n    }\n\n    // for iRowModel\n    public isLastRowIndexKnown(): boolean {\n        if (this.infiniteCache) {\n            return this.infiniteCache.isLastRowIndexKnown();\n        }\n        return false;\n    }\n\n    public setRowCount(rowCount: number, lastRowIndexKnown?: boolean): void {\n        if (this.infiniteCache) {\n            this.infiniteCache.setRowCount(rowCount, lastRowIndexKnown);\n        }\n    }\n}\n", "import type {\n    BeanCollection,\n    FocusService,\n    IDatasource,\n    RowNode,\n    RowNodeBlockLoader,\n    RowRenderer,\n    SortModelItem,\n    StoreUpdatedEvent,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { BeanStub, NumberSequence, _exists, _getAllValuesInObject, _log, _missing } from '@ag-grid-community/core';\n\nimport { InfiniteBlock } from './infiniteBlock';\n\nexport interface InfiniteCacheParams {\n    datasource: IDatasource;\n    initialRowCount: number;\n    blockSize?: number;\n    overflowSize: number;\n    sortModel: SortModelItem[];\n    filterModel: any;\n    maxBlocksInCache?: number;\n    rowHeight: number;\n    lastAccessedSequence: NumberSequence;\n    rowNodeBlockLoader?: RowNodeBlockLoader;\n    dynamicRowHeight: boolean;\n}\n\n// this property says how many empty blocks should be in a cache, eg if scrolls down fast and creates 10\n// blocks all for loading, the grid will only load the last 2 - it will assume the blocks the user quickly\n// scrolled over are not needed to be loaded.\nconst MAX_EMPTY_BLOCKS_TO_KEEP = 2;\n\nexport class InfiniteCache extends BeanStub {\n    protected rowRenderer: RowRenderer;\n    private focusService: FocusService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.rowRenderer = beans.rowRenderer;\n        this.focusService = beans.focusService;\n    }\n\n    private readonly params: InfiniteCacheParams;\n\n    private rowCount: number;\n    private lastRowIndexKnown = false;\n\n    private blocks: { [blockNumber: string]: InfiniteBlock } = {};\n    private blockCount = 0;\n\n    constructor(params: InfiniteCacheParams) {\n        super();\n        this.rowCount = params.initialRowCount;\n        this.params = params;\n    }\n\n    // the rowRenderer will not pass dontCreatePage, meaning when rendering the grid,\n    // it will want new pages in the cache as it asks for rows. only when we are inserting /\n    // removing rows via the api is dontCreatePage set, where we move rows between the pages.\n    public getRow(rowIndex: number, dontCreatePage = false): RowNode | undefined {\n        const blockId = Math.floor(rowIndex / this.params.blockSize!);\n        let block = this.blocks[blockId];\n\n        if (!block) {\n            if (dontCreatePage) {\n                return undefined;\n            }\n            block = this.createBlock(blockId);\n        }\n\n        return block.getRow(rowIndex);\n    }\n\n    private createBlock(blockNumber: number): InfiniteBlock {\n        const newBlock = this.createBean(new InfiniteBlock(blockNumber, this, this.params));\n\n        this.blocks[newBlock.getId()] = newBlock;\n        this.blockCount++;\n\n        this.purgeBlocksIfNeeded(newBlock);\n\n        this.params.rowNodeBlockLoader!.addBlock(newBlock);\n\n        return newBlock;\n    }\n\n    // we have this on infinite row model only, not server side row model,\n    // because for server side, it would leave the children in inconsistent\n    // state - eg if a node had children, but after the refresh it had data\n    // for a different row, then the children would be with the wrong row node.\n    public refreshCache(): void {\n        const nothingToRefresh = this.blockCount == 0;\n        if (nothingToRefresh) {\n            this.purgeCache();\n            return;\n        }\n\n        this.getBlocksInOrder().forEach((block) => block.setStateWaitingToLoad());\n        this.params.rowNodeBlockLoader!.checkBlockToLoad();\n    }\n\n    public override destroy(): void {\n        this.getBlocksInOrder().forEach((block) => this.destroyBlock(block));\n        super.destroy();\n    }\n\n    public getRowCount(): number {\n        return this.rowCount;\n    }\n\n    public isLastRowIndexKnown(): boolean {\n        return this.lastRowIndexKnown;\n    }\n\n    // block calls this, when page loaded\n    public pageLoaded(block: InfiniteBlock, lastRow?: number): void {\n        // if we are not active, then we ignore all events, otherwise we could end up getting the\n        // grid to refresh even though we are no longer the active cache\n        if (!this.isAlive()) {\n            return;\n        }\n\n        if (this.gos.get('debug')) {\n            _log(`InfiniteCache - onPageLoaded: page = ${block.getId()}, lastRow = ${lastRow}`);\n        }\n\n        this.checkRowCount(block, lastRow);\n        // we fire cacheUpdated even if the row count has not changed, as some items need updating even\n        // if no new rows to render. for example the pagination panel has '?' as the total rows when loading\n        // is underway, which would need to get updated when loading finishes.\n        this.onCacheUpdated();\n    }\n\n    private purgeBlocksIfNeeded(blockToExclude: InfiniteBlock): void {\n        // we exclude checking for the page just created, as this has yet to be accessed and hence\n        // the lastAccessed stamp will not be updated for the first time yet\n        const blocksForPurging = this.getBlocksInOrder().filter((b) => b != blockToExclude);\n        const lastAccessedComparator = (a: InfiniteBlock, b: InfiniteBlock) =>\n            b.getLastAccessed() - a.getLastAccessed();\n        blocksForPurging.sort(lastAccessedComparator);\n\n        // we remove (maxBlocksInCache - 1) as we already excluded the 'just created' page.\n        // in other words, after the splice operation below, we have taken out the blocks\n        // we want to keep, which means we are left with blocks that we can potentially purge\n        const maxBlocksProvided = this.params.maxBlocksInCache! > 0;\n        const blocksToKeep = maxBlocksProvided ? this.params.maxBlocksInCache! - 1 : null;\n        const emptyBlocksToKeep = MAX_EMPTY_BLOCKS_TO_KEEP - 1;\n\n        blocksForPurging.forEach((block: InfiniteBlock, index: number) => {\n            const purgeBecauseBlockEmpty = block.getState() === 'needsLoading' && index >= emptyBlocksToKeep;\n\n            const purgeBecauseCacheFull = maxBlocksProvided ? index >= blocksToKeep! : false;\n\n            if (purgeBecauseBlockEmpty || purgeBecauseCacheFull) {\n                // if the block currently has rows been displayed, then don't remove it either.\n                // this can happen if user has maxBlocks=2, and blockSize=5 (thus 10 max rows in cache)\n                // but the screen is showing 20 rows, so at least 4 blocks are needed.\n                if (this.isBlockCurrentlyDisplayed(block)) {\n                    return;\n                }\n\n                // don't want to loose keyboard focus, so keyboard navigation can continue. so keep focused blocks.\n                if (this.isBlockFocused(block)) {\n                    return;\n                }\n\n                // at this point, block is not needed, so burn baby burn\n                this.removeBlockFromCache(block);\n            }\n        });\n    }\n\n    private isBlockFocused(block: InfiniteBlock): boolean {\n        const focusedCell = this.focusService.getFocusCellToUseAfterRefresh();\n        if (!focusedCell) {\n            return false;\n        }\n        if (focusedCell.rowPinned != null) {\n            return false;\n        }\n\n        const blockIndexStart = block.getStartRow();\n        const blockIndexEnd = block.getEndRow();\n\n        const hasFocus = focusedCell.rowIndex >= blockIndexStart && focusedCell.rowIndex < blockIndexEnd;\n        return hasFocus;\n    }\n\n    private isBlockCurrentlyDisplayed(block: InfiniteBlock): boolean {\n        const startIndex = block.getStartRow();\n        const endIndex = block.getEndRow() - 1;\n        return this.rowRenderer.isRangeInRenderedViewport(startIndex, endIndex);\n    }\n\n    private removeBlockFromCache(blockToRemove: InfiniteBlock): void {\n        if (!blockToRemove) {\n            return;\n        }\n\n        this.destroyBlock(blockToRemove);\n\n        // we do not want to remove the 'loaded' event listener, as the\n        // concurrent loads count needs to be updated when the load is complete\n        // if the purged page is in loading state\n    }\n\n    private checkRowCount(block: InfiniteBlock, lastRow?: number): void {\n        // if client provided a last row, we always use it, as it could change between server calls\n        // if user deleted data and then called refresh on the grid.\n        if (typeof lastRow === 'number' && lastRow >= 0) {\n            this.rowCount = lastRow;\n            this.lastRowIndexKnown = true;\n        } else if (!this.lastRowIndexKnown) {\n            // otherwise, see if we need to add some virtual rows\n            const lastRowIndex = (block.getId() + 1) * this.params.blockSize!;\n            const lastRowIndexPlusOverflow = lastRowIndex + this.params.overflowSize;\n\n            if (this.rowCount < lastRowIndexPlusOverflow) {\n                this.rowCount = lastRowIndexPlusOverflow;\n            }\n        }\n    }\n\n    public setRowCount(rowCount: number, lastRowIndexKnown?: boolean): void {\n        this.rowCount = rowCount;\n\n        // if undefined is passed, we do not set this value, if one of {true,false}\n        // is passed, we do set the value.\n        if (_exists(lastRowIndexKnown)) {\n            this.lastRowIndexKnown = lastRowIndexKnown;\n        }\n\n        // if we are still searching, then the row count must not end at the end\n        // of a particular page, otherwise the searching will not pop into the\n        // next page\n        if (!this.lastRowIndexKnown) {\n            if (this.rowCount % this.params.blockSize! === 0) {\n                this.rowCount++;\n            }\n        }\n\n        this.onCacheUpdated();\n    }\n\n    public forEachNodeDeep(callback: (rowNode: RowNode, index: number) => void): void {\n        const sequence = new NumberSequence();\n        this.getBlocksInOrder().forEach((block) => block.forEachNode(callback, sequence, this.rowCount));\n    }\n\n    public getBlocksInOrder(): InfiniteBlock[] {\n        // get all page id's as NUMBERS (not strings, as we need to sort as numbers) and in descending order\n        const blockComparator = (a: InfiniteBlock, b: InfiniteBlock) => a.getId() - b.getId();\n        const blocks = _getAllValuesInObject(this.blocks).sort(blockComparator);\n        return blocks;\n    }\n\n    private destroyBlock(block: InfiniteBlock): void {\n        delete this.blocks[block.getId()];\n        this.destroyBean(block);\n        this.blockCount--;\n        this.params.rowNodeBlockLoader!.removeBlock(block);\n    }\n\n    // gets called 1) row count changed 2) cache purged 3) items inserted\n    private onCacheUpdated(): void {\n        if (this.isAlive()) {\n            // if the virtualRowCount is shortened, then it's possible blocks exist that are no longer\n            // in the valid range. so we must remove these. this can happen if user explicitly sets\n            // the virtual row count, or the datasource returns a result and sets lastRow to something\n            // less than virtualRowCount (can happen if user scrolls down, server reduces dataset size).\n            this.destroyAllBlocksPastVirtualRowCount();\n\n            // this results in both row models (infinite and server side) firing ModelUpdated,\n            // however server side row model also updates the row indexes first\n            const event: WithoutGridCommon<StoreUpdatedEvent> = {\n                type: 'storeUpdated',\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    private destroyAllBlocksPastVirtualRowCount(): void {\n        const blocksToDestroy: InfiniteBlock[] = [];\n        this.getBlocksInOrder().forEach((block) => {\n            const startRow = block.getId() * this.params.blockSize!;\n            if (startRow >= this.rowCount) {\n                blocksToDestroy.push(block);\n            }\n        });\n        if (blocksToDestroy.length > 0) {\n            blocksToDestroy.forEach((block) => this.destroyBlock(block));\n        }\n    }\n\n    public purgeCache(): void {\n        this.getBlocksInOrder().forEach((block) => this.removeBlockFromCache(block));\n        this.lastRowIndexKnown = false;\n        // if zero rows in the cache, we need to get the SSRM to start asking for rows again.\n        // otherwise if set to zero rows last time, and we don't update the row count, then after\n        // the purge there will still be zero rows, meaning the SSRM won't request any rows.\n        // to kick things off, at least one row needs to be asked for.\n        if (this.rowCount === 0) {\n            this.rowCount = this.params.initialRowCount;\n        }\n\n        this.onCacheUpdated();\n    }\n\n    public getRowNodesInRange(firstInRange: RowNode, lastInRange: RowNode): RowNode[] {\n        const result: RowNode[] = [];\n\n        let lastBlockId = -1;\n        let inActiveRange = false;\n        const numberSequence: NumberSequence = new NumberSequence();\n\n        let foundGapInSelection = false;\n\n        this.getBlocksInOrder().forEach((block) => {\n            if (foundGapInSelection) {\n                return;\n            }\n\n            if (inActiveRange && lastBlockId + 1 !== block.getId()) {\n                foundGapInSelection = true;\n                return;\n            }\n\n            lastBlockId = block.getId();\n\n            block.forEachNode(\n                (rowNode) => {\n                    const hitFirstOrLast = rowNode === firstInRange || rowNode === lastInRange;\n                    if (inActiveRange || hitFirstOrLast) {\n                        result.push(rowNode);\n                    }\n\n                    if (hitFirstOrLast) {\n                        inActiveRange = !inActiveRange;\n                    }\n                },\n                numberSequence,\n                this.rowCount\n            );\n        });\n\n        // inActiveRange will be still true if we never hit the second rowNode\n        const invalidRange = foundGapInSelection || inActiveRange;\n        return invalidRange ? [] : result;\n    }\n}\n", "import type { BeanCollection, IGetRowsParams, LoadSuccessParams, NumberSequence } from '@ag-grid-community/core';\nimport { RowNode, RowNodeBlock, _exists, _missing, _warnOnce } from '@ag-grid-community/core';\n\nimport type { InfiniteCache, InfiniteCacheParams } from './infiniteCache';\n\nexport class InfiniteBlock extends RowNodeBlock {\n    private beans: BeanCollection;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.beans = beans;\n    }\n\n    private readonly startRow: number;\n    private readonly endRow: number;\n    private readonly parentCache: InfiniteCache;\n\n    private params: InfiniteCacheParams;\n\n    private lastAccessed: number;\n\n    public rowNodes: RowNode[];\n\n    constructor(id: number, parentCache: InfiniteCache, params: InfiniteCacheParams) {\n        super(id);\n\n        this.parentCache = parentCache;\n        this.params = params;\n\n        // we don't need to calculate these now, as the inputs don't change,\n        // however it makes the code easier to read if we work them out up front\n        this.startRow = id * params.blockSize!;\n        this.endRow = this.startRow + params.blockSize!;\n    }\n\n    public postConstruct(): void {\n        this.createRowNodes();\n    }\n\n    public getBlockStateJson(): { id: string; state: any } {\n        return {\n            id: '' + this.getId(),\n            state: {\n                blockNumber: this.getId(),\n                startRow: this.getStartRow(),\n                endRow: this.getEndRow(),\n                pageStatus: this.getState(),\n            },\n        };\n    }\n\n    protected setDataAndId(rowNode: RowNode, data: any, index: number): void {\n        if (_exists(data)) {\n            // this means if the user is not providing id's we just use the\n            // index for the row. this will allow selection to work (that is based\n            // on index) as long user is not inserting or deleting rows,\n            // or wanting to keep selection between server side sorting or filtering\n            rowNode.setDataAndId(data, index.toString());\n        } else {\n            rowNode.setDataAndId(undefined, undefined);\n        }\n    }\n\n    protected loadFromDatasource(): void {\n        const params = this.createLoadParams();\n        if (_missing(this.params.datasource.getRows)) {\n            _warnOnce(`datasource is missing getRows method`);\n            return;\n        }\n\n        // put in timeout, to force result to be async\n        window.setTimeout(() => {\n            this.params.datasource.getRows(params);\n        }, 0);\n    }\n\n    protected processServerFail(): void {\n        // todo - this method has better handling in SSRM\n    }\n\n    protected createLoadParams(): any {\n        // PROBLEM . . . . when the user sets sort via colDef.sort, then this code\n        // is executing before the sort is set up, so server is not getting the sort\n        // model. need to change with regards order - so the server side request is\n        // AFTER thus it gets the right sort model.\n        const params: IGetRowsParams = {\n            startRow: this.getStartRow(),\n            endRow: this.getEndRow(),\n            successCallback: this.pageLoaded.bind(this, this.getVersion()),\n            failCallback: this.pageLoadFailed.bind(this, this.getVersion()),\n            sortModel: this.params.sortModel,\n            filterModel: this.params.filterModel,\n            context: this.gos.getGridCommonParams().context,\n        };\n        return params;\n    }\n\n    public forEachNode(\n        callback: (rowNode: RowNode, index: number) => void,\n        sequence: NumberSequence,\n        rowCount: number\n    ): void {\n        this.rowNodes.forEach((rowNode: RowNode, index: number) => {\n            const rowIndex = this.startRow + index;\n            if (rowIndex < rowCount) {\n                callback(rowNode, sequence.next());\n            }\n        });\n    }\n\n    public getLastAccessed(): number {\n        return this.lastAccessed;\n    }\n\n    public getRow(rowIndex: number, dontTouchLastAccessed = false): RowNode {\n        if (!dontTouchLastAccessed) {\n            this.lastAccessed = this.params.lastAccessedSequence.next();\n        }\n        const localIndex = rowIndex - this.startRow;\n        return this.rowNodes[localIndex];\n    }\n\n    public getStartRow(): number {\n        return this.startRow;\n    }\n\n    public getEndRow(): number {\n        return this.endRow;\n    }\n\n    // creates empty row nodes, data is missing as not loaded yet\n    protected createRowNodes(): void {\n        this.rowNodes = [];\n        for (let i = 0; i < this.params.blockSize!; i++) {\n            const rowIndex = this.startRow + i;\n\n            const rowNode = new RowNode(this.beans);\n\n            rowNode.setRowHeight(this.params.rowHeight);\n            rowNode.uiLevel = 0;\n            rowNode.setRowIndex(rowIndex);\n            rowNode.setRowTop(this.params.rowHeight * rowIndex);\n\n            this.rowNodes.push(rowNode);\n        }\n    }\n\n    protected processServerResult(params: LoadSuccessParams): void {\n        this.rowNodes.forEach((rowNode: RowNode, index: number) => {\n            const data = params.rowData ? params.rowData[index] : undefined;\n\n            if (!rowNode.id && rowNode.alreadyRendered && data) {\n                // if the node had no id and was rendered, but we have data for it now, then\n                // destroy the old row and copy its position into new row. This prevents an additional\n                // set of events being fired as the row renderer tries to understand the changing id\n                this.rowNodes[index] = new RowNode(this.beans);\n                this.rowNodes[index].setRowIndex(rowNode.rowIndex!);\n                this.rowNodes[index].setRowTop(rowNode.rowTop!);\n                this.rowNodes[index].setRowHeight(rowNode.rowHeight!);\n\n                // clean up the old row\n                rowNode.clearRowTopAndRowIndex();\n            }\n            this.setDataAndId(this.rowNodes[index], data, this.startRow + index);\n        });\n        const finalRowCount = params.rowCount != null && params.rowCount >= 0 ? params.rowCount : undefined;\n        this.parentCache.pageLoaded(this, finalRowCount);\n    }\n\n    public override destroy(): void {\n        this.rowNodes.forEach((rowNode) => {\n            // this is needed, so row render knows to fade out the row, otherwise it\n            // sees row top is present, and thinks the row should be shown.\n            rowNode.clearRowTopAndRowIndex();\n        });\n        super.destroy();\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\n\nexport function refreshInfiniteCache(beans: BeanCollection): void {\n    beans.rowModelHelperService?.getInfiniteRowModel()?.refreshCache();\n}\n\nexport function purgeInfiniteCache(beans: BeanCollection): void {\n    beans.rowModelHelperService?.getInfiniteRowModel()?.purgeCache();\n}\n\nexport function getInfiniteRowCount(beans: BeanCollection): number | undefined {\n    return beans.rowModelHelperService?.getInfiniteRowModel()?.getRowCount();\n}\n\nexport function isLastRowIndexKnown(beans: BeanCollection): boolean | undefined {\n    return beans.rowModelHelperService?.getInfiniteRowModel()?.isLastRowIndexKnown();\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.3.1';\n"],
  "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",
  "names": ["listeners", "originalListeners", "func", "unmatchedAndAutoStates", "unmatchedCount", "getValue", "changedColumns", "childComp", "ModuleNames", "module", "LoadingOverlayComponent", "NoRowsOverlayComponent", "TooltipComponent", "LoadingOverlayComponent", "NoRowsOverlayComponent", "TooltipComponent", "ExcelFactoryMode", "VerticalDirection", "HorizontalDirection", "DragSourceType", "RowHighlightPosition", "instanceIdSequence", "HeaderRowType", "HeaderNavigationDirection", "instanceIdSequence", "ctrl", "LayoutCssClasses", "invisibleScrollbar", "invisibleScrollbar", "SelectionHandleType", "CellRangeType", "instanceIdSequence", "instanceIdSequence", "column", "gui", "ClientSideRowModelSteps", "ServerSideTransactionResultStatus", "node", "TabGuardClassNames", "alignSide", "PASSIVE_EVENTS", "params", "moveColumns", "colDef", "moveColumns", "getColumnState", "module", "value", "module", "key", "isColumn", "rowNode", "module", "gridId", "BarColumnLabelPlacement", "rowNode", "VERSION", "VERSION", "node", "_warnOnce", "RowType", "BeanStub", "VERSION", "LINE_SEPARATOR", "_exists", "BeanStub", "_warnOnce", "NumberSequence", "VERSION"]
}
